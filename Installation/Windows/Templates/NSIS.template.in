; CPack install script designed for a nmake build
!addplugindir  '@CPACK_PLUGIN_PATH@/NSIS_Simple_Service_Plugin_1.30'
!addplugindir  '@CPACK_PLUGIN_PATH@/UAC-plug-in-NSIS/Ansi'
!addplugindir  '@CPACK_PLUGIN_PATH@/AccessControl/Plugins'
!addplugindir  '@CPACK_PLUGIN_PATH@/SharedMemory/Plugins'
!addincludedir '@CPACK_PLUGIN_PATH@/UAC-plug-in-NSIS'
!addincludedir '@CPACK_PLUGIN_PATH@/'
!include "OpenLink.nsh"

;--------------------------------
; Include LogicLib for more readable code
  !include "LogicLib.nsh"
  !include "UAC.nsh"
  !include nsDialogs.nsh
  !include WinMessages.nsh
  !include InstallOptions.nsh
  !include MUI2.nsh
;--------------------------------
; get commandline parameters
!include FileFunc.nsh
!insertmacro GetParameters
!insertmacro GetOptions

;--------------------------------

!define VERSION "@CPACK_PACKAGE_VERSION@"
!define PATCH  "@CPACK_PACKAGE_VERSION_PATCH@"
!define INST_DIR "@CPACK_TEMPORARY_DIRECTORY@"

;--------------------------------
; custom defines for the DRY people of us.
!define TRI_UNINSTALL_REG_PATH "Software\Microsoft\Windows\CurrentVersion\Uninstall\@CPACK_PACKAGE_INSTALL_REGISTRY_KEY@";
# Comes from WaitForService: !define TRI_SVC_NAME 'ArangoDB'
; Put some of the more custom ones in from the CMakeFile:
@CPACK_ARANGODB_NSIS_DEFINES@

;--------------------------------
;Variables                        x -> from userinput
!define EMPTY ""
Var MUI_TEMP
Var STARTMENU_FOLDER
Var SV_ALLUSERS
Var START_MENU

Var INSTALL_DESKTOP           ; x bool: add desktop icon
Var IS_DEFAULT_INSTALLDIR

Var STORAGE_ENGINE            ; x string auto/mmfiles/rocksdb
Var PASSWORD                  ; x string
Var PASSWORD_AGAIN            ; x string / only for comparison

Var PURGE_DB                  ; x bool ; delete DB on uninstall

Var DO_NOT_ADD_TO_PATH        ; x bool
Var ADD_TO_PATH_ALL_USERS     ; x bool
Var ADD_TO_PATH_CURRENT_USER  ; x bool

; Variables for definition of instdir
; posible values: SingleUser | AllUsers | Service
VAR TRI_INSTALL_TYPE          ; x 
Var newCfgValues              ; keep new config file values
Var newCfgValuesFile          ; write them to a temporary file...
Var ServiceUp                 ; did the service start?
!define TEMP1 $R0 ;Temp variable

Var DATADIR
;--------------------------------
;Include Modern UI

!include "MUI.nsh"

;Default installation folder
InstallDir "@CPACK_NSIS_INSTALL_ROOT@\@CPACK_PACKAGE_INSTALL_DIRECTORY@"


;--------------------------------
;General

;Name and file
Name "@CPACK_NSIS_PACKAGE_NAME@"
OutFile "@CPACK_TOPLEVEL_DIRECTORY@/@CPACK_OUTPUT_FILE_NAME@"

;Set compression
SetCompressor @CPACK_NSIS_COMPRESSOR@

;Require administrator access
; RequestExecutionLevel admin
RequestExecutionLevel highest

!include "AddToPath.nsh"
!include "AddToRegistry.nsh"
!include "WaitForService.nsh"
!include "ReadINIFileKeys.nsh"

Function disableBackButton
     GetDlgItem $0 $HWNDParent 3
     EnableWindow $0 0
FunctionEnd

Function stop_old_service
  StrCmp $TRI_INSTALL_TYPE  'Service' 0 noServiceToStop
     SimpleSC::StopService    '${TRI_SVC_NAME}' 0 30
     Call WaitForServiceDown
     SimpleSC::RemoveService  '${TRI_SVC_NAME}'
noServiceToStop:
FunctionEnd

Function Tri_ChangePrivileges
  ${IfNot} ${UAC_IsInnerInstance}
     Call disableBackButton
     GetDlgItem $0 $HWNDParent 2
     EnableWindow $0 0
     GetDlgItem $0 $HWNDParent 1
     EnableWindow $0 0
  ${EndIf}
    uac_tryagain:
    !insertmacro UAC_RunElevated
    ${Switch} $0
    ${Case} 0
	${IfThen} $1 = 1 ${|} Quit ${|} ;we are the outer process, the inner process has done its work, we are done
	${IfThen} $3 <> 0 ${|} ${Break} ${|} ;we are admin, let the show go on
	${If} $1 = 3 ;RunAs completed successfully, but with a non-admin user
		MessageBox mb_YesNo|mb_IconExclamation|mb_TopMost|mb_SetForeground "Administrator privileges required, plesae try again" /SD IDNO IDYES uac_tryagain IDNO 0
	${EndIf}
	;fall-through and die
    ${Case} 1223
	MessageBox mb_IconStop|mb_TopMost|mb_SetForeground "Administrator privileges required, aborting!"
	Quit
    ${Case} 1062
	MessageBox mb_IconStop|mb_TopMost|mb_SetForeground "Logon service not running, aborting!"
	Quit
    ${Default}
	MessageBox mb_IconStop|mb_TopMost|mb_SetForeground "Unable to elevate, error $0"
	Quit
    ${EndSwitch}

  SetShellVarContext all
FunctionEnd

; same aagin for uninstall - NSIS requires the function name have to have 'un.' - prefix
Function un.Tri_ChangePrivileges
uac_tryagain:
!insertmacro UAC_RunElevated
${Switch} $0
${Case} 0
	${IfThen} $1 = 1 ${|} Quit ${|} ;we are the outer process, the inner process has done its work, we are done
	${IfThen} $3 <> 0 ${|} ${Break} ${|} ;we are admin, let the show go on
	${If} $1 = 3 ;RunAs completed successfully, but with a non-admin user
		MessageBox mb_YesNo|mb_IconExclamation|mb_TopMost|mb_SetForeground "Administrator privileges required, plesae try again" /SD IDNO IDYES uac_tryagain IDNO 0
	${EndIf}
	;fall-through and die
${Case} 1223
	MessageBox mb_IconStop|mb_TopMost|mb_SetForeground "Administrator privileges required, aborting!"
	Quit
${Case} 1062
	MessageBox mb_IconStop|mb_TopMost|mb_SetForeground "Logon service not running, aborting!"
	Quit
${Default}
	MessageBox mb_IconStop|mb_TopMost|mb_SetForeground "Unable to elevate, error $0"
	Quit
${EndSwitch}

SetShellVarContext all
FunctionEnd

Var mycheckbox ; You could just store the HWND in $1 etc if you don't want this extra variable

Function un.ModifyUnWelcome
;  SendMessage $HWNDPARENT ${WM_SETTEXT} 0 "STR:Titlebar - UnWelcome BLARG"
  ${NSD_CreateCheckbox} 120u -20u 50% 20u "Delete databases with uninstallation?"
  Pop $mycheckbox
;  ${NSD_Check} $mycheckbox ; don't check it by default
FunctionEnd

Function un.LeaveUnWelcome
  ${NSD_GetState} $mycheckbox $0
  ${If} $0 <> 0
    StrCpy $PURGE_DB "1"
  ${EndIf}
FunctionEnd

!include Sections.nsh

;--- Component support macros: ---
; The code for the add/remove functionality is from:
;   http://nsis.sourceforge.net/Add/Remove_Functionality
; It has been modified slightly and extended to provide
; inter-component dependencies.
Var AR_SecFlags
Var AR_RegFlags
@CPACK_NSIS_SECTION_SELECTED_VARS@

; Loads the "selected" flag for the section named SecName into the
; variable VarName.
!macro LoadSectionSelectedIntoVar SecName VarName
 SectionGetFlags ${${SecName}} $${VarName}
 IntOp $${VarName} $${VarName} & ${SF_SELECTED}  ;Turn off all other bits
!macroend

; Loads the value of a variable... can we get around this?
!macro LoadVar VarName
  IntOp $R0 0 + $${VarName}
!macroend

; Sets the value of a variable
!macro StoreVar VarName IntValue
  IntOp $${VarName} 0 + ${IntValue}
!macroend

!macro InitSection SecName
  ;  This macro reads component installed flag from the registry and
  ;changes checked state of the section on the components page.
  ;Input: section index constant name specified in Section command.

  ClearErrors
  ;Reading component status from registry
  ReadRegDWORD $AR_RegFlags HKLM "${TRI_UNINSTALL_REG_PATH}\Components\${SecName}" "Installed"
  IfErrors "default_${SecName}"
    ;Status will stay default if registry value not found
    ;(component was never installed)
  IntOp $AR_RegFlags $AR_RegFlags & ${SF_SELECTED} ;Turn off all other bits
  SectionGetFlags ${${SecName}} $AR_SecFlags  ;Reading default section flags
  IntOp $AR_SecFlags $AR_SecFlags & 0xFFFE  ;Turn lowest (enabled) bit off
  IntOp $AR_SecFlags $AR_RegFlags | $AR_SecFlags      ;Change lowest bit

  ; Note whether this component was installed before
  !insertmacro StoreVar ${SecName}_was_installed $AR_RegFlags
  IntOp $R0 $AR_RegFlags & $AR_RegFlags

  ;Writing modified flags
  SectionSetFlags ${${SecName}} $AR_SecFlags

 "default_${SecName}:"
 !insertmacro LoadSectionSelectedIntoVar ${SecName} ${SecName}_selected
!macroend

!macro FinishSection SecName
  ;  This macro reads section flag set by user and removes the section
  ;if it is not selected.
  ;Then it writes component installed flag to registry
  ;Input: section index constant name specified in Section command.

  SectionGetFlags ${${SecName}} $AR_SecFlags  ;Reading section flags
  ;Checking lowest bit:
  IntOp $AR_SecFlags $AR_SecFlags & ${SF_SELECTED}
  IntCmp $AR_SecFlags 1 "leave_${SecName}"
    ;Section is not selected:
    ;Calling Section uninstall macro and writing zero installed flag
    !insertmacro "Remove_${${SecName}}"
    WriteRegDWORD HKLM "${TRI_UNINSTALL_REG_PATH}\Components\${SecName}" "Installed" 0
    Goto "exit_${SecName}"

 "leave_${SecName}:"
    ;Section is selected:
    WriteRegDWORD HKLM "${TRI_UNINSTALL_REG_PATH}\Components\${SecName}" "Installed" 1

 "exit_${SecName}:"
!macroend

!macro RemoveSection_CPack SecName
  ;  This macro is used to call section''s Remove_... macro
  ;from the uninstaller.
  ;Input: section index constant name specified in Section command.

  !insertmacro "Remove_${${SecName}}"
!macroend

; Determine whether the selection of SecName changed
!macro MaybeSelectionChanged SecName
  !insertmacro LoadVar ${SecName}_selected
  SectionGetFlags ${${SecName}} $R1
  IntOp $R1 $R1 & ${SF_SELECTED} ;Turn off all other bits

  ; See if the status has changed:
  IntCmp $R0 $R1 "${SecName}_unchanged"
  !insertmacro LoadSectionSelectedIntoVar ${SecName} ${SecName}_selected

  IntCmp $R1 ${SF_SELECTED} "${SecName}_was_selected"
  !insertmacro "Deselect_required_by_${SecName}"
  goto "${SecName}_unchanged"

  "${SecName}_was_selected:"
  !insertmacro "Select_${SecName}_depends"

  "${SecName}_unchanged:"
!macroend
;--- End of Add/Remove macros ---

;--------------------------------
;Interface Settings

  !define MUI_HEADERIMAGE
  !define MUI_ABORTWARNING


!verbose 3
!include "WinMessages.NSH"
!verbose 4

;----------------------------------------
!verbose 3
!include "WinMessages.NSH"
!verbose 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Uninstall sutff
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;###########################################
;#            Utility Functions            #
;###########################################

;--------------------------------
; Installation types
@CPACK_NSIS_INSTALLATION_TYPES@

;--------------------------------
; Component sections
@CPACK_NSIS_COMPONENT_SECTIONS@

;--------------------------------
; Define some macro setting for the gui
@CPACK_NSIS_INSTALLER_MUI_ICON_CODE@
@CPACK_NSIS_INSTALLER_ICON_CODE@
@CPACK_NSIS_INSTALLER_MUI_COMPONENTS_DESC@
@CPACK_NSIS_INSTALLER_MUI_FINISHPAGE_RUN_CODE@

;--------------------------------
;Pages
  !define MUI_PAGE_CUSTOMFUNCTION_PRE skip_page
  !insertmacro MUI_PAGE_WELCOME

  !define MUI_PAGE_CUSTOMFUNCTION_PRE skip_page
  !insertmacro MUI_PAGE_LICENSE "@CPACK_RESOURCE_FILE_LICENSE@"

  Page custom InstallOptionsPage skip_page

  !define MUI_PAGE_CUSTOMFUNCTION_PRE default_installation_directory
  !define MUI_PAGE_CUSTOMFUNCTION_LEAVE check_installation_directory
  !insertmacro MUI_PAGE_DIRECTORY

  ;Start Menu Folder Page Configuration
  !define MUI_STARTMENUPAGE_REGISTRY_ROOT "SHCTX"
  !define MUI_STARTMENUPAGE_REGISTRY_KEY "Software\@CPACK_PACKAGE_VENDOR@\@CPACK_PACKAGE_INSTALL_REGISTRY_KEY@"
  !define MUI_STARTMENUPAGE_REGISTRY_VALUENAME "Start Menu Folder"
  !insertmacro MUI_PAGE_STARTMENU Application $STARTMENU_FOLDER

  @CPACK_NSIS_PAGE_COMPONENTS@

  !define MUI_PAGE_CUSTOMFUNCTION_PRE stop_old_service
  !define MUI_PAGE_CUSTOMFUNCTION_LEAVE insert_registration_keys
  !insertmacro MUI_PAGE_INSTFILES
  !insertmacro MUI_PAGE_FINISH

  !define MUI_WELCOMEPAGE_TEXT 'Please choose whether we should also remove the database files along with the programm files.'
  !define MUI_PAGE_CUSTOMFUNCTION_SHOW un.ModifyUnWelcome
  !define MUI_PAGE_CUSTOMFUNCTION_LEAVE un.LeaveUnWelcome
  !insertmacro MUI_UNPAGE_WELCOME
  !insertmacro MUI_UNPAGE_CONFIRM
  !insertmacro MUI_UNPAGE_INSTFILES

;--------------------------------
;Languages

  !insertmacro MUI_LANGUAGE "English" ;first language is the default language
  !insertmacro MUI_LANGUAGE "Albanian"
  !insertmacro MUI_LANGUAGE "Arabic"
  !insertmacro MUI_LANGUAGE "Basque"
  !insertmacro MUI_LANGUAGE "Belarusian"
  !insertmacro MUI_LANGUAGE "Bosnian"
  !insertmacro MUI_LANGUAGE "Breton"
  !insertmacro MUI_LANGUAGE "Bulgarian"
  !insertmacro MUI_LANGUAGE "Croatian"
  !insertmacro MUI_LANGUAGE "Czech"
  !insertmacro MUI_LANGUAGE "Danish"
  !insertmacro MUI_LANGUAGE "Dutch"
  !insertmacro MUI_LANGUAGE "Estonian"
  !insertmacro MUI_LANGUAGE "Farsi"
  !insertmacro MUI_LANGUAGE "Finnish"
  !insertmacro MUI_LANGUAGE "French"
  !insertmacro MUI_LANGUAGE "German"
  !insertmacro MUI_LANGUAGE "Greek"
  !insertmacro MUI_LANGUAGE "Hebrew"
  !insertmacro MUI_LANGUAGE "Hungarian"
  !insertmacro MUI_LANGUAGE "Icelandic"
  !insertmacro MUI_LANGUAGE "Indonesian"
  !insertmacro MUI_LANGUAGE "Irish"
  !insertmacro MUI_LANGUAGE "Italian"
  !insertmacro MUI_LANGUAGE "Japanese"
  !insertmacro MUI_LANGUAGE "Korean"
  !insertmacro MUI_LANGUAGE "Kurdish"
  !insertmacro MUI_LANGUAGE "Latvian"
  !insertmacro MUI_LANGUAGE "Lithuanian"
  !insertmacro MUI_LANGUAGE "Luxembourgish"
  !insertmacro MUI_LANGUAGE "Macedonian"
  !insertmacro MUI_LANGUAGE "Malay"
  !insertmacro MUI_LANGUAGE "Mongolian"
  !insertmacro MUI_LANGUAGE "Norwegian"
  !insertmacro MUI_LANGUAGE "Polish"
  !insertmacro MUI_LANGUAGE "Portuguese"
  !insertmacro MUI_LANGUAGE "PortugueseBR"
  !insertmacro MUI_LANGUAGE "Romanian"
  !insertmacro MUI_LANGUAGE "Russian"
  !insertmacro MUI_LANGUAGE "Serbian"
  !insertmacro MUI_LANGUAGE "SerbianLatin"
  !insertmacro MUI_LANGUAGE "SimpChinese"
  !insertmacro MUI_LANGUAGE "Slovak"
  !insertmacro MUI_LANGUAGE "Slovenian"
  !insertmacro MUI_LANGUAGE "Spanish"
  !insertmacro MUI_LANGUAGE "Swedish"
  !insertmacro MUI_LANGUAGE "Thai"
  !insertmacro MUI_LANGUAGE "TradChinese"
  !insertmacro MUI_LANGUAGE "Turkish"
  !insertmacro MUI_LANGUAGE "Ukrainian"
  !insertmacro MUI_LANGUAGE "Welsh"


;--------------------------------
;Reserve Files

  ;These files should be inserted before other files in the data block
  ;Keep these lines before any File command
  ;Only for solid compression (by default, solid compression is enabled for BZIP2 and LZMA)

  ReserveFile "NSIS.InstallOptions.ini"

;--------------------------------
;Installer Sections

Section "-Core installation"
  ;Use the entire tree produced by the INSTALL target.  Keep the
  ;list of directories here in sync with the RMDir commands below.
  SetOutPath "$INSTDIR"
  ; SetRegView controlls where die regkeys are written to
  ; SetRegView 32 writes the keys into Wow6432
  ; this variable was defined by eld and included in NSIS.template.in
  ; we probably need this for the install/uninstall software list.
  SetRegView ${BITS}
  
  @CPACK_NSIS_FULL_INSTALL@

  ;Store installation folder
  WriteRegStr SHCTX "Software\@CPACK_PACKAGE_VENDOR@\@CPACK_PACKAGE_INSTALL_REGISTRY_KEY@" "" $INSTDIR

  ;Create uninstaller
  WriteUninstaller "$INSTDIR\Uninstall.exe"
  !insertmacro AddToRegistry "DisplayName"          "@CPACK_NSIS_DISPLAY_NAME@"
  !insertmacro AddToRegistry "DisplayVersion"       "@CPACK_PACKAGE_VERSION@"
  !insertmacro AddToRegistry "Publisher"            "@CPACK_PACKAGE_VENDOR@"
  !insertmacro AddToRegistry "UninstallString"      "$INSTDIR\Uninstall.exe"
  !insertmacro AddToRegistry "NoRepair"             "1"

  ; Optional registration
  !insertmacro AddToRegistry "DisplayIcon"          "$INSTDIR\@CPACK_NSIS_INSTALLED_ICON_NAME@"
  !insertmacro AddToRegistry "HelpLink"             "@CPACK_NSIS_HELP_LINK@"
  !insertmacro AddToRegistry "URLInfoAbout"         "@CPACK_NSIS_URL_INFO_ABOUT@"
  !insertmacro AddToRegistry "Contact"              "@CPACK_NSIS_CONTACT@"

  !insertmacro MUI_STARTMENU_WRITE_BEGIN Application

  ;Create shortcuts
  CreateDirectory "$SMPROGRAMS\$STARTMENU_FOLDER"
  CreateShortCut  "$SMPROGRAMS\$STARTMENU_FOLDER\Arango Shell.lnk"  "$INSTDIR\${BIN_DIR}\arangosh.exe"  '' '$INSTDIR\resources\arangodb.ico' '0' SW_SHOWMAXIMIZED
  CreateShortCut  "$SMPROGRAMS\$STARTMENU_FOLDER\Arango Server.lnk" "$INSTDIR\${SBIN_DIR}\arangod.exe"   '' '$INSTDIR\resources\arangodb.ico' '0' SW_SHOWMAXIMIZED
  CreateShortCut  "$SMPROGRAMS\$STARTMENU_FOLDER\Uninstall.lnk"     "$INSTDIR\Uninstall.exe"

  ;Read a value from an InstallOptions INI file

  StrCmp "0" "$INSTALL_DESKTOP" noDesktopIcon
  CreateShortCut  "$DESKTOP\Arango Shell.lnk"  "$INSTDIR\${BIN_DIR}\arangosh.exe"  '' '$INSTDIR\resources\arangodb.ico' '0' SW_SHOWMAXIMIZED
  CreateShortCut  "$DESKTOP\Arango Management Interface.lnk"  "http://127.0.0.1:8529"  '' '$INSTDIR\resources\arangodb.ico' '0' SW_SHOWMAXIMIZED
  noDesktopIcon:

  ; Write special uninstall registry entries
  !insertmacro AddToRegistry "StartMenu"            "$STARTMENU_FOLDER"
  !insertmacro AddToRegistry "DoNotAddToPath"       "$DO_NOT_ADD_TO_PATH"
  !insertmacro AddToRegistry "AddToPathAllUsers"    "$ADD_TO_PATH_ALL_USERS"
  !insertmacro AddToRegistry "AddToPathCurrentUser" "$ADD_TO_PATH_CURRENT_USER"
  !insertmacro AddToRegistry "InstallToDesktop"     "$INSTALL_DESKTOP"

  !insertmacro MUI_STARTMENU_WRITE_END

  !insertmacro AddToRegistry "DATADIR"        "$DATADIR"

  ; Create a file containing the settings we want to be overwritten:
  StrCpy $newCfgValues "[database]$\r$\ndirectory = $DATADIR$\r$\n[server]$\r$\nstorage-engine = $STORAGE_ENGINE$\r$\n"
  StrCpy $newCfgValuesFile "$INSTDIR\etc\arangodb3\newValues.ini"
  FileOpen $4  "$newCfgValuesFile" w
  FileWrite $4 "$newCfgValues"
  FileClose $4
  ; Alter the shipped file and insert the values from above:
  push "$newCfgValuesFile"
  push "$INSTDIR\etc\arangodb3\arangod.conf"
  call ReadINIFileKeys
  Delete "$newCfgValuesFile"

System::Call 'Kernel32::SetEnvironmentVariable(t, t)i ("ARANGODB_DEFAULT_ROOT_PASSWORD", "$PASSWORD").r0'
  StrCmp $0 0 error
    ExecWait "$INSTDIR\${SBIN_DIR}\arangod.exe --database.init-database --server.rest-server false --server.statistics false --foxx.queues false"
    Goto done
  error:
    MessageBox MB_OK "Failed to initialize database password."
  done:
@CPACK_NSIS_EXTRA_INSTALL_COMMANDS@
   StrCmp $TRI_INSTALL_TYPE  'Service' 0 nothing
     SimpleSC::InstallService '${TRI_SVC_NAME}' '${TRI_SVC_NAME}'  '16'  '2'  '"$INSTDIR\${SBIN_DIR}\arangod.exe" --start-service' '' '' ''
     SimpleSC::SetServiceDescription '${TRI_SVC_NAME}' '${TRI_FRIENDLY_SVC_NAME}'
     SimpleSC::StartService '${TRI_SVC_NAME}' '' 30
     Call WaitForServiceUp
     pop $ServiceUp
   nothing:
SectionEnd

Function .onInstSuccess
  IfSilent 0 continueUI
  Call insert_registration_keys
  StrCmp "@CPACK_NSIS_MODIFY_PATH@" "ON" 0 doNotAddToPath
  StrCmp $DO_NOT_ADD_TO_PATH "1" doNotAddToPath 0
  !insertmacro AddToPath "$INSTDIR/${BIN_DIR}" $ADD_TO_PATH_ALL_USERS
  doNotAddToPath:
    Return

  continueUI:
    ifErrors +3
    ${If} $TRI_INSTALL_TYPE == 'Service'
    ${AndIf} $ServiceUp == 0
      ${OpenURL} ${TRI_AARDVARK_URL}
    ${EndIf}
FunctionEnd

Section "-Add to path"
  Push "$INSTDIR/${BIN_DIR}"
  StrCmp "@CPACK_NSIS_MODIFY_PATH@" "ON" 0 doNotAddToPath
  StrCmp $DO_NOT_ADD_TO_PATH "1" doNotAddToPath 0
    Call AddToPath
  doNotAddToPath:
SectionEnd

;--------------------------------
; Create custom pages
Function InstallOptionsPage
   IfSilent 0 continueUI
   Return

continueUI:
   Push ${TEMP1}
displayAgain:

  !insertmacro MUI_HEADER_TEXT "Install Options" "Choose options for installing @CPACK_NSIS_PACKAGE_NAME@"
  !insertmacro INSTALLOPTIONS_READ $INSTALL_DESKTOP "NSIS.InstallOptions.ini" "Field 5" "State"
  !insertmacro INSTALLOPTIONS_DISPLAY "NSIS.InstallOptions.ini"
  !insertmacro INSTALLOPTIONS_READ $PASSWORD "NSIS.InstallOptions.ini" "Field 6" "State"
  !insertmacro INSTALLOPTIONS_READ $PASSWORD_AGAIN "NSIS.InstallOptions.ini" "Field 7" "State"
  !insertmacro INSTALLOPTIONS_READ $DO_NOT_ADD_TO_PATH "NSIS.InstallOptions.ini" "Field 2" "State"
  !insertmacro INSTALLOPTIONS_READ $ADD_TO_PATH_ALL_USERS "NSIS.InstallOptions.ini" "Field 3" "State"
  !insertmacro INSTALLOPTIONS_READ $ADD_TO_PATH_CURRENT_USER "NSIS.InstallOptions.ini" "Field 4" "State"
  !insertmacro INSTALLOPTIONS_READ $STORAGE_ENGINE "NSIS.InstallOptions.ini" "Field 11" "State"

  StrCmp $PASSWORD $PASSWORD_AGAIN +3 0
    MessageBox MB_OK|MB_ICONSTOP "Passwords don't match, try again"
    Goto displayAgain
  done:
    Pop ${TEMP1}

    Return  
FunctionEnd

;--------------------------------
Function skip_page
  ${If} ${UAC_IsInnerInstance}
    Abort
  ${EndIf}
FunctionEnd

; when I am a child proces
; I read the state (from shared memory) of the install options page
; these informations has to be written by the father process
Function read_options
  ${If} ${UAC_IsInnerInstance}
     sharedmem::ReadIntoSharedMem
     pop $0
     pop $1
     ${If} $0 == 0
        StrCpy  $TRI_INSTALL_TYPE $1
      ${Else}
; when something is wrong arango is installed as Service
        StrCpy  $TRI_INSTALL_TYPE 'Service'
     ${EndIf}
  ${EndIf}
FunctionEnd
;--------------------------------
Function default_installation_directory
; Read variables which defines if arango should be installed as Service

  ${If} ${UAC_IsInnerInstance}
     Call disableBackButton
  ${EndIf}
  ${IfNot} ${UAC_IsInnerInstance}
    !insertmacro INSTALLOPTIONS_READ $R2 "NSIS.InstallOptions.ini" "Field 2" "State"
    !insertmacro INSTALLOPTIONS_READ $R3 "NSIS.InstallOptions.ini" "Field 3" "State"
    !insertmacro INSTALLOPTIONS_READ $R4 "NSIS.InstallOptions.ini" "Field 4" "State"

     ${If} $R2 == '1'
       StrCpy $TRI_INSTALL_TYPE 'Service'
     ${EndIf}

     ${If} $R3 == '1'
       StrCpy $TRI_INSTALL_TYPE 'AllUsers'
     ${EndIf}

     ${If} $R4 == '1'
       StrCpy $TRI_INSTALL_TYPE 'SingleUser'
     ${EndIf}
     sharedmem::WriteIntoSharedMem  $TRI_INSTALL_TYPE
     pop $0
     ; $0 should be '0'
     ; this value is read by child process
   ${Else}
     Call read_options
   ${EndIf}

  ${Switch} $TRI_INSTALL_TYPE
    ${Case} 'Service'
      Call Tri_ChangePrivileges
      SetShellVarContext all
      ;MessageBox MB_OK "Service : $INSTDIR"
      StrCpy $DATADIR "$APPDATA\ArangoDB"
      ${Break}
    ${Case} 'SingleUser'
      SetShellVarContext current
      StrCpy $INSTDIR "$LOCALAPPDATA\@CPACK_PACKAGE_INSTALL_DIRECTORY@"
      ;MessageBox MB_OK "SingleUser : $INSTDIR"
      StrCpy $DATADIR "$LOCALAPPDATA\ArangoDB"
      ${Break}
    ${Case} 'AllUsers'
      Call Tri_ChangePrivileges
      SetShellVarContext all
      StrCpy $INSTDIR "$DOCUMENTS\@CPACK_PACKAGE_INSTALL_DIRECTORY@"
      StrCpy $DATADIR "$DOCUMENTS\ArangoDB"
      ;MessageBox MB_OK "AllUsers : $INSTDIR"
      ${Break}
   ${EndSwitch}
   Return
FunctionEnd

Function assign_proper_access_rights
    StrCpy $0 "0"
    AccessControl::GrantOnFile \
     "$INSTDIR" "(BU)" "GenericRead + GenericWrite + GenericExecute"
    Pop $R0
    ${If} $R0 == error
      Pop $R0
      StrCpy $0 "1"
      DetailPrint `AccessControl error: $R0`
      ; MessageBox MB_OK "target directory  $INSTDIR can not get cannot get correct access rigths"
  ${EndIf}
FunctionEnd

Function is_writable
; is does not matter if we do some errors here
   ${If} $TRI_INSTALL_ALL_USERS == '1'
     CreateDirectory $INSTDIR
     Call assign_proper_access_rights
    ${EndIf}
FunctionEnd

Function check_installation_directory
   ClearErrors
    Call is_writable
   StrCmp $1 "0" handle_error
   return
   handle_error:
     MessageBox MB_YESNO "you aren't allowed to install arango in $INSTDIR do you want try once more?" IDNO no
       Abort
     no: Quit
FunctionEnd

Function insert_registration_keys
  ClearErrors
  ; MessageBox MB_OK "XXXX insert_registration_keys in HKCC ${BITS}"
  ${Switch} $TRI_INSTALL_TYPE
    ${Case} 'Service'
      WriteRegExpandStr HKCC "Software\@CPACK_NSIS_PACKAGE_NAME@" "type" 'Service'
       ; MessageBox MB_OK "Sevice in HKCC"
      IfErrors there_are_erros
      ${Break}

    ${Case} 'SingleUser'
      ${If}  ${UAC_IsAdmin}
        WriteRegExpandStr HKCC "Software\@CPACK_NSIS_PACKAGE_NAME@" "type" 'SingleUser'
         ; MessageBox MB_OK "SingleUser in HKCC"
      ${Else}
        ; normal user has not write rights to HKCC
        WriteRegExpandStr HKCU "Software\@CPACK_NSIS_PACKAGE_NAME@" "type" 'SingleUser'
         ; MessageBox MB_OK "SingleUser in HKCU"
        IfErrors there_are_erros
      ${EndIf}
      ${Break}

    ${Case} 'AllUsers'
      WriteRegExpandStr HKCC "Software\@CPACK_NSIS_PACKAGE_NAME@" "type" 'Service'
      StrCpy $INSTDIR "$DOCUMENTS\@CPACK_PACKAGE_INSTALL_DIRECTORY@"
       ; MessageBox MB_OK "AllUsers in HKCC"
      IfErrors there_are_erros
      ${Break}
   ${EndSwitch}
   Return

 there_are_erros: ;nothing
MessageBox MB_OK "There was an error during adding the installation keys to the registry$\nArango will work fine but there may be trouble during the deinstallation$\nplease contact @CPACK_NSIS_CONTACT@"

FunctionEnd

!macro triagens_init
  ${If} ${UAC_IsInnerInstance}
  ; memory segment is created by father process
  ; nothing to do
SendMessage $HWNDPARENT ${WM_SETTEXT} 0 "STR:Hallo"
    return
  ${EndIf}
  sharedmem::ExistsSharedMem
  pop $0
  ${If} $0 == '1'
    MessageBox MB_OK "Installer is already running"
    Quit
  ${EndIf}
  sharedmem::CreateSharedMemory
  pop $0
  ${Switch} $0
  ${Case} 0
  ; shared memory was created
   ; return
  ${Case} 5
  ; what is to do, memory segment could no be created ?
  ${EndSwitch}
; SetShellVarContext all
!macroend

;--------------------------------
; determine admin versus local install
Function un.onInit
; arango may be installed on diferent places
; determine if the arango was installed for a local user
  ${GetParameters} $R0        
  ${GetOptions} $R0 "/PURGE_DB="    $PURGE_DB
  IfErrors 0 +2
  StrCpy $PURGE_DB "0"

  Pop $0
; temporary variable used as flag for decide the change to administration rights
  StrCpy $R0 "admin"
  ${If}  ${UAC_IsAdmin}
    ReadRegStr $0 HKCC "Software\@CPACK_NSIS_PACKAGE_NAME@" "type"
  ${Else}
; see function default_installation_directory
    ReadRegStr $0 HKCU "Software\@CPACK_NSIS_PACKAGE_NAME@" "type"
    ${If}  $0 == "SingleUser"
      StrCpy $R0 "user"
    ${EndIf}
  ${EndIf}

  ${If} $R0 == "admin"
    Call un.Tri_ChangePrivileges
  ${EndIf}
 ; are we a child process?
 ; when yes, we have administrator privileges
  ${If} ${UAC_IsInnerInstance}
    SetShellVarContext all
  ${Else}
    SetShellVarContext current
  ${EndIf}

FunctionEnd

;--- Add/Remove callback functions: ---
!macro SectionList MacroName
  ;This macro used to perform operation on multiple sections.
  ;List all of your components in following manner here.
@CPACK_NSIS_COMPONENT_SECTION_LIST@
!macroend

Section -FinishComponents
  ;Removes unselected components and writes component status to registry
  !insertmacro SectionList "FinishSection"
SectionEnd
;--- End of Add/Remove callback functions ---

;--------------------------------
; Component dependencies
Function .onSelChange
  !insertmacro SectionList MaybeSelectionChanged
FunctionEnd

;--------------------------------
;Uninstaller Section

Section "Uninstall"
  ; SetRegView controlls where die regkeys are written to
  ; SetRegView 32 writes the keys into Wow6432
  ; this variable was defined by eld and included in NSIS.template.in
  ; we probably need this for the install/uninstall software list.
  SetRegView ${BITS}
  ; A single user isn''t in HKCC...
  StrCpy $TRI_INSTALL_TYPE 'SingleUser'
  ReadRegStr $TRI_INSTALL_TYPE         HKCC "Software\@CPACK_NSIS_PACKAGE_NAME@" "type" 
  ;MessageBox MB_OK "Type: $TRI_INSTALL_TYPE"
  ${If} $TRI_INSTALL_TYPE == 'Service'
    Call un.Tri_ChangePrivileges
    SetShellVarContext all
    ;MessageBox MB_OK "Service : $INSTDIR"
  ${EndIf}

  ${If} $TRI_INSTALL_TYPE == 'AllUsers'
    Call un.Tri_ChangePrivileges
    SetShellVarContext all
    StrCpy $INSTDIR "$DOCUMENTS\@CPACK_PACKAGE_INSTALL_DIRECTORY@"
    ;MessageBox MB_OK "AllUsers : $INSTDIR"
  ${EndIf}

  ReadRegStr $START_MENU               SHCTX "${TRI_UNINSTALL_REG_PATH}" "StartMenu"
  ;MessageBox MB_OK "Start menu is in: $START_MENU"
  ReadRegStr $DO_NOT_ADD_TO_PATH       SHCTX "${TRI_UNINSTALL_REG_PATH}" "DoNotAddToPath"
  ReadRegStr $ADD_TO_PATH_ALL_USERS    SHCTX "${TRI_UNINSTALL_REG_PATH}" "AddToPathAllUsers"
  ReadRegStr $ADD_TO_PATH_CURRENT_USER SHCTX "${TRI_UNINSTALL_REG_PATH}" "AddToPathCurrentUser"
  ;MessageBox MB_OK "Add to path: $DO_NOT_ADD_TO_PATH all users: $ADD_TO_PATH_ALL_USERS"
  ReadRegStr $INSTALL_DESKTOP          SHCTX "${TRI_UNINSTALL_REG_PATH}" "InstallToDesktop"
  ReadRegStr $DATADIR                  SHCTX "${TRI_UNINSTALL_REG_PATH}" "DATADIR"
  
  ;MessageBox MB_OK "Install to desktop: $INSTALL_DESKTOP "

  StrCmp "0" "$INSTALL_DESKTOP" noDesktopIconRemove
  Delete  "$DESKTOP\Arango Shell.lnk"
  Delete  "$DESKTOP\Arango Management Interface.lnk"
  noDesktopIconRemove:


  ;MessageBox MB_OK "Deleting Directory: $SMPROGRAMS\$START_MENU\ $TRI_INSTALL_TYPE "
  Delete "$SMPROGRAMS\$START_MENU"

  StrCmp $TRI_INSTALL_TYPE  'Service' 0 nothing
  ;SimpleSC::GetServiceName '${TRI_SVC_NAME}'
  ;Pop $0 ; returns an errorcode (<>0) otherwise success (0)
  ;Pop $1 ; returns the binary path of the service
  ;MessageBox MB_OK "GetServiceName: : $0 $1 "
  ; First get the installed service command.
  SimpleSC::GetServiceBinaryPath '${TRI_SVC_NAME}'
  Pop $0 ; returns an errorcode (<>0) otherwise success (0)
  Pop $1 ; returns the binary path of the service
  ; $1 should contain '"$INSTDIR\${SBIN_DIR}\arangod.exe" --start-service' - if $INSTDIR is equal
  ; to our $INSTDIR uninstall the service - else its another installation and we jump to Done instead.
  ; MessageBox MB_OK ' current service: $1 ---- "$INSTDIR\${SBIN_DIR}\arangod.exe"'
  StrCmp $1 '"$INSTDIR\${SBIN_DIR}\arangod.exe" --start-service' '' Done
  DetailPrint 'Shutting down Service ${TRI_SVC_NAME}'
  SimpleSC::StopService  '${TRI_SVC_NAME}' 0 30
  Call un.WaitForServiceDown
  DetailPrint 'Removing ArangoDB Service'
  SimpleSC::RemoveService  '${TRI_SVC_NAME}'
  Pop $0 ; returns an errorcode (<>0) otherwise success (0)
  IntCmp $0 0 Done +1 +1
  Push $0
  SimpleSC::GetErrorMessage
  Pop $0
  DetailPrint 'Stopping ArangoDB fails - Reason: $0'
  MessageBox MB_OK 'Stopping ArangoDB fails - Reason: $0'

  Done:
  nothing:
  DetailPrint 'Removing files'

  Delete "$INSTDIR\etc\arangodb3\arangod.conf.old"

  StrCmp $PURGE_DB "0" dontDeleteDatabases
  DetailPrint 'Removing database files from $DATADIR: '
  RMDir /r "$DATADIR"
  RMDir /r "$INSTDIR\var\lib\arangodb3-apps"
  RMDir    "$INSTDIR\var\lib"
  RMDir /r "$INSTDIR\var\log\arangodb3"
  dontDeleteDatabases:
  DetailPrint 'Removing programm files:'
  ;Remove files we installed.
  ;Keep the list of directories here in sync with the File commands above.
@CPACK_NSIS_DELETE_FILES@
@CPACK_NSIS_DELETE_DIRECTORIES@

  ;Remove the uninstaller itself.
  Delete "$INSTDIR\Uninstall.exe"
  DeleteRegKey SHCTX "${TRI_UNINSTALL_REG_PATH}"
  DeleteRegKey HKCC  "Software\@CPACK_NSIS_PACKAGE_NAME@"

  ;Remove the installation directory if it is empty.
  RMDir "$INSTDIR"

  ; Remove the registry entries.
  DeleteRegKey SHCTX "Software\@CPACK_PACKAGE_VENDOR@\@CPACK_PACKAGE_INSTALL_REGISTRY_KEY@"

  ; Removes all optional components
  !insertmacro SectionList "RemoveSection_CPack"

  !insertmacro MUI_STARTMENU_GETFOLDER Application $MUI_TEMP

  Delete "$SMPROGRAMS\$MUI_TEMP\Uninstall.lnk"
  ; Note, short cuts are created in $SMPROGRAMS\$STARTMENU_FOLDER but
  ; they are deleted from '$SMPROGRAMS\$MUI_TEMP'
  Delete  '$SMPROGRAMS\$MUI_TEMP\Arango Server.lnk'
  Delete  '$SMPROGRAMS\$MUI_TEMP\Arango Shell.lnk'

  ;Delete empty start menu parent diretories
  StrCpy $MUI_TEMP "$SMPROGRAMS\$MUI_TEMP"

  startMenuDeleteLoop:
    ClearErrors
    RMDir $MUI_TEMP
    GetFullPathName $MUI_TEMP "$MUI_TEMP\.."

    IfErrors startMenuDeleteLoopDone

    StrCmp "$MUI_TEMP" "$SMPROGRAMS" startMenuDeleteLoopDone startMenuDeleteLoop
  startMenuDeleteLoopDone:

  ; If the user changed the shortcut, then untinstall may not work. This should
  ; try to fix it.
  StrCpy $MUI_TEMP "$START_MENU"
  Delete "$SMPROGRAMS\$MUI_TEMP\Uninstall.lnk"
  ; Note, short cuts are created in $SMPROGRAMS\$STARTMENU_FOLDER but
  ; they are deleted from '$SMPROGRAMS\$MUI_TEMP'
  Delete  '$SMPROGRAMS\$MUI_TEMP\Arango Server.lnk'
  Delete  '$SMPROGRAMS\$MUI_TEMP\Arango Shell.lnk'

  ;Delete empty start menu parent diretories
  StrCpy $MUI_TEMP "$SMPROGRAMS\$MUI_TEMP"

  secondStartMenuDeleteLoop:
    ClearErrors
    RMDir $MUI_TEMP
    GetFullPathName $MUI_TEMP "$MUI_TEMP\.."

    IfErrors secondStartMenuDeleteLoopDone

    StrCmp "$MUI_TEMP" "$SMPROGRAMS" secondStartMenuDeleteLoopDone secondStartMenuDeleteLoop
  secondStartMenuDeleteLoopDone:

  DeleteRegKey /ifempty SHCTX "Software\@CPACK_PACKAGE_VENDOR@\@CPACK_PACKAGE_INSTALL_REGISTRY_KEY@"
  ; Delete flag which controls if arango is started as service or no
  ${If} ${UAC_IsInnerInstance}
     DeleteRegKey HKCC "Software\@CPACK_NSIS_PACKAGE_NAME@"
  ${Else}
     DeleteRegKey HKCU "Software\@CPACK_NSIS_PACKAGE_NAME@"
  ${EndIf}
  DeleteRegKey HKLM "${TRI_UNINSTALL_REG_PATH}"

  StrCmp $DO_NOT_ADD_TO_PATH_ "1" doNotRemoveFromPath 0
  !InsertMacro un.RemoveFromPath "$INSTDIR/${BIN_DIR}"
  doNotRemoveFromPath:
SectionEnd


;--------------------------------
; determine admin versus local install
; Is install for "AllUsers" or "JustMe"?
; Default to "JustMe" - set to "AllUsers" if admin
; This function is used for the very first "custom page" of the installer.
; This custom page does not show up visibly, but it executes prior to the
; first visible page and sets up $INSTDIR properly...
; Choose different default installation folder based on SV_ALLUSERS...
; "Program Files" for AllUsers, "My Documents" for JustMe...
        
var allPathOpts
var CMDINSTDIR

Function .onInit
  ${GetParameters} $R0
  ClearErrors
  ${GetOptions} $R0 "/PASSWORD="       $PASSWORD
  IfErrors 0 +2
  ReadEnvStr $PASSWORD PASSWORD
  
  # we only want to manipulate INSTDIR here if /INSTDIR is realy set!
  ${GetParameters} $R0        
  ClearErrors
  ${GetOptions} $R0 "/INSTDIR="        $CMDINSTDIR
  IfErrors +2 0
  StrCpy $INSTDIR "$CMDINSTDIR"

  ${GetParameters} $R0
  ClearErrors
  ${GetOptions} $R0 "/STORAGE_ENGINE=" $STORAGE_ENGINE
  IfErrors 0 +2
  StrCpy $STORAGE_ENGINE "auto"

  ${GetParameters} $R0        
  ${GetOptions} $R0 "/DESKTOPICON="    $INSTALL_DESKTOP
  IfErrors 0 +2
  StrCpy $INSTALL_DESKTOP "1"
        
  ${GetParameters} $R0
  ClearErrors
  ${GetOptions} $R0 "/NOPATH="         $DO_NOT_ADD_TO_PATH
  IfErrors 0 +2
  StrCpy $DO_NOT_ADD_TO_PATH "0"

  ${GetParameters} $R0
  ClearErrors
  ${GetOptions} $R0 "/ALLPATH="        $ADD_TO_PATH_ALL_USERS
  IfErrors 0 +2
  StrCpy $ADD_TO_PATH_ALL_USERS "0"

  ${GetParameters} $R0
  ClearErrors
  ${GetOptions} $R0 "/CURPATH="        $ADD_TO_PATH_CURRENT_USER
  IfErrors 0 +2
  StrCpy $ADD_TO_PATH_CURRENT_USER "0"

  IfSilent 0 dontValidatePathOption
  StrCpy $allPathOpts "0"
  IntOp $allPathOpts $allPathOpts + $DO_NOT_ADD_TO_PATH
  IntOp $allPathOpts $allPathOpts + $ADD_TO_PATH_ALL_USERS
  IntOp $allPathOpts $allPathOpts + $ADD_TO_PATH_CURRENT_USER
  ${If} $allPathOpts != 1
      MessageBox MB_OK "You have to exactly set one of /NOPATH=$DO_NOT_ADD_TO_PATH, /ALLPATH=$ADD_TO_PATH_ALL_USERS or /CURPATH=$ADD_TO_PATH_CURRENT_USER to 1!"
      Abort
  ${EndIf}
dontValidatePathOption:

  IfSilent 0 dontFetchPath
  ${GetParameters} $R0
  ClearErrors
  ${GetOptions} $R0 "/INSTALLTYPE=" $TRI_INSTALL_TYPE
  StrLen $0 "$INSTDIR"
  ${If} $0 < 3
    MessageBox MB_OK 'Refusing to install flat on drive "$INSTDIR"'
    Abort
  ${EndIf}
  StrCmp "@CPACK_NSIS_ENABLE_UNINSTALL_BEFORE_INSTALL@" "ON" 0 inst
dontFetchPath:

  ReadRegStr $0 HKLM "${TRI_UNINSTALL_REG_PATH}" "UninstallString"
  StrCmp $0 "" inst

  MessageBox MB_YESNOCANCEL|MB_ICONEXCLAMATION \
  "@CPACK_NSIS_PACKAGE_NAME@ is already installed. $\n$\nDo you want to uninstall the old version before installing the new one?" \
  IDYES uninst IDNO inst
  Abort

;Run the uninstaller
uninst:
  ClearErrors
  StrLen $2 "\Uninstall.exe"
  StrCpy $3 $0 -$2 ; remove "\Uninstall.exe" from UninstallString to get path
  ExecWait '$0 _?=$3' ;Do not copy the uninstaller to a temp file

  IfErrors uninst_failed inst
uninst_failed:
  MessageBox MB_OK|MB_ICONSTOP "Uninstall failed."
  Abort


inst:
  !insertmacro triagens_init
  ; Reads components status for registry
  !insertmacro SectionList "InitSection"

  ; check to see if /D has been used to change
  ; the install directory by comparing it to the
  ; install directory that is expected to be the
  ; default
  StrCpy $IS_DEFAULT_INSTALLDIR 0
  StrCmp "$INSTDIR" "@CPACK_NSIS_INSTALL_ROOT@\@CPACK_PACKAGE_INSTALL_DIRECTORY@" 0 +2
    StrCpy $IS_DEFAULT_INSTALLDIR 1

  StrCpy $SV_ALLUSERS "JustMe"
  ; if default install dir then change the default
  ; if it is installed for JustMe
  StrCmp "$IS_DEFAULT_INSTALLDIR" "1" 0 +2
    StrCpy $INSTDIR "$DOCUMENTS\@CPACK_PACKAGE_INSTALL_DIRECTORY@"

  ClearErrors
  UserInfo::GetName
  IfErrors noLM
  Pop $0
  UserInfo::GetAccountType
  Pop $1
  StrCmp $1 "Admin" 0 +4
    SetShellVarContext all
    ;MessageBox MB_OK 'User "$0" is in the Admin group'
    StrCpy $SV_ALLUSERS "AllUsers"
    Goto done
  StrCmp $1 "Power" 0 +4
    SetShellVarContext all
    ;MessageBox MB_OK 'User "$0" is in the Power Users group'
    StrCpy $SV_ALLUSERS "AllUsers"
    Goto done

  noLM:
    StrCpy $SV_ALLUSERS "AllUsers"
    ;MessageBox MB_OK 'noLM'
    ;Get installation folder from registry if available

  done:
  StrCmp $SV_ALLUSERS "AllUsers" 0 +3
    StrCmp "$IS_DEFAULT_INSTALLDIR" "1" 0 +2
      StrCpy $INSTDIR "@CPACK_NSIS_INSTALL_ROOT@\@CPACK_PACKAGE_INSTALL_DIRECTORY@"

  StrCmp "@CPACK_NSIS_MODIFY_PATH@" "ON" 0 noOptionsPage
    !insertmacro INSTALLOPTIONS_EXTRACT "NSIS.InstallOptions.ini"

  noOptionsPage:
FunctionEnd
