//  -*- mode: groovy-mode

def PowerShell(psCmd) {
    bat "powershell.exe -NonInteractive -ExecutionPolicy Bypass -Command \"\$ErrorActionPreference='Stop';[Console]::OutputEncoding=[System.Text.Encoding]::UTF8;$psCmd;EXIT \$global:LastExitCode\""
}

pipeline {
    agent any 

    stages {
        stage('Checkout') {
            steps { 
                node('master') {
                    script {
                        retry(3) {
                            try {
                                checkout scm
                            }
                            catch (err) {
                                echo "GITHUB checkout failed, retrying in 5min"
                                sleep 300
                            }
                        }
                    }

                    script {
                        try {
                            echo "Trying enterprise branch ${env.BRANCH_NAME}"

                            checkout(
                                changelog: false,
                                poll: false,
                                scm: [
                                    $class: 'GitSCM',
                                    branches: [[name: "*/${env.BRANCH_NAME}"]],
                                    doGenerateSubmoduleConfigurations: false,
                                    extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'enterprise']],
                                    submoduleCfg: [],
                                    userRemoteConfigs: [[credentialsId: '8d893d23-6714-4f35-a239-c847c798e080',
                                                         url: 'https://github.com/arangodb/enterprise']]])
                        }
                        catch (err) {
                            echo "Failed ${env.BRANCH_NAME}, trying enterprise branch devel"

                            checkout(
                                changelog: false,
                                poll: false,
                                scm: [
                                    $class: 'GitSCM',
                                    branches: [[name: "*/devel"]],
                                    doGenerateSubmoduleConfigurations: false,
                                    extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'enterprise']],
                                    submoduleCfg: [],
                                    userRemoteConfigs: [[credentialsId: '8d893d23-6714-4f35-a239-c847c798e080',
                                                         url: 'https://github.com/arangodb/enterprise']]])
                        }
                    }

                    sh 'rm -rf build build-jenkins'

                    stash includes: '**', name: 'source'
                }
            }
        }

        stage('Build & Test') { 
            steps { 
                parallel(
                    'cc-lx': {
                        node('linux') {
                            unstash 'source'
                            sh './Installation/Pipeline/build_cc_lx.sh 16'
                            sh './Installation/Pipeline/test_ss_mm_cc_lx.sh 8'

                            stash includes: 'build/**,etc/**,Installation/Pipeline/**,js/**,scripts/**,tests/**,UnitTests/**,utils/**',
                                  name: 'build-cc-lx'

                        }
                    },

                    'ee-ma': {
                        node('mac') {
                            unstash 'source'
                            sh './Installation/Pipeline/build_ee_mc.sh 16'
                            sh './Installation/Pipeline/test_ss_mm_cc_lx.sh 8'
                        }
                    },

                    'ee-wi': {
                        node('windows') {
                            unstash 'source'
                            PowerShell(". .\\Installation\\Pipeline\\build_ee_wi.ps1")
                        }
                    }
                )
            }
        }

        stage('JS Lint') {
            steps {
                node('linux') {
                    unstash 'build-cc-lx'

                    script {
                        try {
                            sh './Installation/Pipeline/jslint.sh'
                        }
                        catch (exc) {
                            currentBuild.result = 'UNSTABLE'
                        }
                    }
                }
            }
        }
    }
}
