////////////////////////////////////////////////////////////////////////////////
/// DISCLAIMER
///
/// Copyright 2014-2016 ArangoDB GmbH, Cologne, Germany
/// Copyright 2004-2014 triAGENS GmbH, Cologne, Germany
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///
///     http://www.apache.org/licenses/LICENSE-2.0
///
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// Copyright holder is ArangoDB GmbH, Cologne, Germany
///
/// @author Dr. Frank Celler
////////////////////////////////////////////////////////////////////////////////

#include "ApplicationFeature.h"

using namespace arangodb;
using namespace arangodb::rest;

ApplicationFeature::ApplicationFeature(std::string const& name)
    : _disabled(false), _name(name) {}

ApplicationFeature::~ApplicationFeature() {}

////////////////////////////////////////////////////////////////////////////////
/// @brief returns the name
////////////////////////////////////////////////////////////////////////////////

std::string const& ApplicationFeature::getName() const { return _name; }

////////////////////////////////////////////////////////////////////////////////
/// @brief sets up the options
////////////////////////////////////////////////////////////////////////////////

void ApplicationFeature::setupOptions(
    std::map<std::string, basics::ProgramOptionsDescription>&) {}

////////////////////////////////////////////////////////////////////////////////
/// @brief callback after options parsing and config file reading,
/// before dropping privileges
////////////////////////////////////////////////////////////////////////////////

bool ApplicationFeature::afterOptionParsing(basics::ProgramOptions&) {
  return true;
}

////////////////////////////////////////////////////////////////////////////////
/// @brief prepares the feature
////////////////////////////////////////////////////////////////////////////////

bool ApplicationFeature::prepare() { return true; }

////////////////////////////////////////////////////////////////////////////////
/// @brief prepares the feature
////////////////////////////////////////////////////////////////////////////////

bool ApplicationFeature::prepare2() { return true; }

////////////////////////////////////////////////////////////////////////////////
/// @brief starts the feature
////////////////////////////////////////////////////////////////////////////////

bool ApplicationFeature::start() { return true; }

////////////////////////////////////////////////////////////////////////////////
/// @brief opens the feature for business
////////////////////////////////////////////////////////////////////////////////

bool ApplicationFeature::open() { return true; }

////////////////////////////////////////////////////////////////////////////////
/// @brief closes the feature
////////////////////////////////////////////////////////////////////////////////

void ApplicationFeature::close() {}

////////////////////////////////////////////////////////////////////////////////
/// @brief stops everything
////////////////////////////////////////////////////////////////////////////////

void ApplicationFeature::stop() {}

////////////////////////////////////////////////////////////////////////////////
/// @brief disable feature
////////////////////////////////////////////////////////////////////////////////

void ApplicationFeature::disable() { _disabled = true; }
