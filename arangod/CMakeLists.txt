set(CMAKE_RUNTIME_OUTPUT_DIRECTORY "${PROJECT_BINARY_DIR}/bin/")

################################################################################
## BISON/FLEX
################################################################################

#note that we check - in the generated FLEX / BISON files, therefore they are
#generate inside the source tree

if (USE_MAINTAINER_MODE AND NOT MSVC)
  set_directory_properties(PROPERTIES CLEAN_NO_CUSTOM "On")

  add_custom_command(
    OUTPUT ${CMAKE_CURRENT_SOURCE_DIR}/Aql/tokens.cpp
    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
    COMMAND ${FLEX_EXECUTABLE} -L -oAql/tokens.cpp Aql/tokens.ll
    MAIN_DEPENDENCY ${CMAKE_CURRENT_SOURCE_DIR}/Aql/tokens.ll
    VERBATIM
  )

  add_custom_command(
    OUTPUT ${CMAKE_CURRENT_SOURCE_DIR}/Aql/grammar.cpp
    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
    COMMAND ${CMAKE_SOURCE_DIR}/utils/bison-c.sh
      ${BISON_EXECUTABLE} Aql/grammar.cpp Aql/grammar.y
    MAIN_DEPENDENCY ${CMAKE_CURRENT_SOURCE_DIR}/Aql/grammar.y
    VERBATIM
  )

  add_custom_target(clean_aql_autogenerated
    COMMAND rm -f Aql/tokens.cpp Aql/grammar.cpp Aql/grammar.hpp
  )

  list(APPEND CLEAN_AUTOGENERATED_FILES clean_aql_autogenerated)
  set(CLEAN_AUTOGENERATED_FILES ${CLEAN_AUTOGENERATED_FILES} PARENT_SCOPE)
endif ()

if (CMAKE_COMPILER_IS_GNUCC)
  set_source_files_properties(Aql/tokens.cpp PROPERTIES COMPILE_FLAGS -Wno-sign-compare)
endif ()

################################################################################
## arangod
################################################################################

if (MSVC AND NOT(SKIP_PACKAGING))
  generate_product_version(ProductVersionFiles
    NAME arangod
    FILE_DESCRIPTION ${ARANGODB_FRIENDLY_STRING}
    ICON ${ARANGO_ICON}
    VERSION_MAJOR ${CPACK_PACKAGE_VERSION_MAJOR}
    VERSION_MINOR ${CPACK_PACKAGE_VERSION_MINOR}
    VERSION_PATCH ${CPACK_PACKAGE_VERSION_PATCH}
    VERSION_REVISION ${BUILD_ID}
  )
endif ()

################################################################################
## other stuff
################################################################################

include(arangoserver.cmake)

add_executable(${BIN_ARANGOD}
  RestServer/arangod.cpp
  ../cmake/activeCodePage.manifest
  ${ProductVersionFiles}
)

target_link_libraries(${BIN_ARANGOD}
  arangoserver
)

target_compile_features(${BIN_ARANGOD} PRIVATE cxx_constexpr)

install(
  TARGETS ${BIN_ARANGOD}
  RUNTIME DESTINATION ${CMAKE_INSTALL_SBINDIR}
)

install_config(arangod)

if (NOT USE_PRECOMPILED_V8)
  add_dependencies(arangod zlibstatic v8_build arango_iresearch)
else ()
  add_dependencies(arangod zlibstatic arango_iresearch)
endif ()

if (USE_JEMALLOC)
  add_dependencies(arangod jemalloc_build)
endif ()

# TODO move CMAKE_DEPRECATE_OPTIONS to presets
if (USE_FAIL_ON_WARNINGS)
  if (MSVC)
    list(APPEND ${CMAKE_DEPRECATE_OPTIONS} /WX /D_WINSOCK_DEPRECATED_NO_WARNINGS)
    if (CMAKE_CXX_COMPILER_ID STREQUAL "Clang") # clang-cl.exe
      # There's a warning about /MP being unused if compiling only a single file
      list(APPEND ${CMAKE_DEPRECATE_OPTIONS} -Wno-unused-command-line-argument)
    endif()
  else ()
    list(APPEND ${CMAKE_DEPRECATE_OPTIONS} -Werror -Wno-error=deprecated-declarations)
  endif ()
endif ()

foreach(TARGET
  arangod
)
  target_include_directories(${TARGET} PRIVATE ${CMAKE_CURRENT_SOURCE_DIR})
  target_include_directories(${TARGET} PRIVATE "${PROJECT_SOURCE_DIR}/${ENTERPRISE_INCLUDE_DIR}")

  target_compile_options(${TARGET} PRIVATE
	  ${CMAKE_DEPRECATE_OPTION})
endforeach()

################################################################################
## arango-secure-installation
################################################################################

install_command_alias(${BIN_ARANGOD}
  ${CMAKE_INSTALL_SBINDIR}
  arango-secure-installation
)

install_config(arango-secure-installation)

################################################################################
## arango-init-database
################################################################################

install_command_alias(${BIN_ARANGOD}
  ${CMAKE_INSTALL_SBINDIR}
  arango-init-database
)

install_config(arango-init-database)

get_target_property(IRESEARCH_INCLUDE
  iresearch-static INCLUDE_DIRECTORIES)

add_subdirectory(Agency)
add_subdirectory(Aql)
add_subdirectory(Cache)
add_subdirectory(Cluster)
add_subdirectory(ClusterEngine)
add_subdirectory(Graph)
add_subdirectory(Indexes)
add_subdirectory(IResearch)
add_subdirectory(Metrics)
add_subdirectory(Network)
add_subdirectory(Pregel)
add_subdirectory(Replication)
add_subdirectory(Replication2)
add_subdirectory(RestHandler)
add_subdirectory(RestServer)
add_subdirectory(RocksDBEngine)
add_subdirectory(StorageEngine)
add_subdirectory(Utils)
add_subdirectory(V8Server)
add_subdirectory(VocBase)
add_subdirectory(Zkd)
