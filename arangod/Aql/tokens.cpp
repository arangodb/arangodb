#line 16 "Aql/tokens.ll"
#include <stdint.h>
#if (_MSC_VER >= 1)
// fix ret_val = EOB_ACT_LAST_MATCH later on, its generated, we can't control
// this.
#pragma warning(disable : 4267)
#endif

#define YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

#ifdef yy_create_buffer
#define Aql_create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer Aql_create_buffer
#endif

#ifdef yy_delete_buffer
#define Aql_delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer Aql_delete_buffer
#endif

#ifdef yy_scan_buffer
#define Aql_scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer Aql_scan_buffer
#endif

#ifdef yy_scan_string
#define Aql_scan_string_ALREADY_DEFINED
#else
#define yy_scan_string Aql_scan_string
#endif

#ifdef yy_scan_bytes
#define Aql_scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes Aql_scan_bytes
#endif

#ifdef yy_init_buffer
#define Aql_init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer Aql_init_buffer
#endif

#ifdef yy_flush_buffer
#define Aql_flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer Aql_flush_buffer
#endif

#ifdef yy_load_buffer_state
#define Aql_load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state Aql_load_buffer_state
#endif

#ifdef yy_switch_to_buffer
#define Aql_switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer Aql_switch_to_buffer
#endif

#ifdef yypush_buffer_state
#define Aqlpush_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state Aqlpush_buffer_state
#endif

#ifdef yypop_buffer_state
#define Aqlpop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state Aqlpop_buffer_state
#endif

#ifdef yyensure_buffer_stack
#define Aqlensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack Aqlensure_buffer_stack
#endif

#ifdef yylex
#define Aqllex_ALREADY_DEFINED
#else
#define yylex Aqllex
#endif

#ifdef yyrestart
#define Aqlrestart_ALREADY_DEFINED
#else
#define yyrestart Aqlrestart
#endif

#ifdef yylex_init
#define Aqllex_init_ALREADY_DEFINED
#else
#define yylex_init Aqllex_init
#endif

#ifdef yylex_init_extra
#define Aqllex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra Aqllex_init_extra
#endif

#ifdef yylex_destroy
#define Aqllex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy Aqllex_destroy
#endif

#ifdef yyget_debug
#define Aqlget_debug_ALREADY_DEFINED
#else
#define yyget_debug Aqlget_debug
#endif

#ifdef yyset_debug
#define Aqlset_debug_ALREADY_DEFINED
#else
#define yyset_debug Aqlset_debug
#endif

#ifdef yyget_extra
#define Aqlget_extra_ALREADY_DEFINED
#else
#define yyget_extra Aqlget_extra
#endif

#ifdef yyset_extra
#define Aqlset_extra_ALREADY_DEFINED
#else
#define yyset_extra Aqlset_extra
#endif

#ifdef yyget_in
#define Aqlget_in_ALREADY_DEFINED
#else
#define yyget_in Aqlget_in
#endif

#ifdef yyset_in
#define Aqlset_in_ALREADY_DEFINED
#else
#define yyset_in Aqlset_in
#endif

#ifdef yyget_out
#define Aqlget_out_ALREADY_DEFINED
#else
#define yyget_out Aqlget_out
#endif

#ifdef yyset_out
#define Aqlset_out_ALREADY_DEFINED
#else
#define yyset_out Aqlset_out
#endif

#ifdef yyget_leng
#define Aqlget_leng_ALREADY_DEFINED
#else
#define yyget_leng Aqlget_leng
#endif

#ifdef yyget_text
#define Aqlget_text_ALREADY_DEFINED
#else
#define yyget_text Aqlget_text
#endif

#ifdef yyget_lineno
#define Aqlget_lineno_ALREADY_DEFINED
#else
#define yyget_lineno Aqlget_lineno
#endif

#ifdef yyset_lineno
#define Aqlset_lineno_ALREADY_DEFINED
#else
#define yyset_lineno Aqlset_lineno
#endif

#ifdef yyget_column
#define Aqlget_column_ALREADY_DEFINED
#else
#define yyget_column Aqlget_column
#endif

#ifdef yyset_column
#define Aqlset_column_ALREADY_DEFINED
#else
#define yyset_column Aqlset_column
#endif

#ifdef yywrap
#define Aqlwrap_ALREADY_DEFINED
#else
#define yywrap Aqlwrap
#endif

#ifdef yyget_lval
#define Aqlget_lval_ALREADY_DEFINED
#else
#define yyget_lval Aqlget_lval
#endif

#ifdef yyset_lval
#define Aqlset_lval_ALREADY_DEFINED
#else
#define yyset_lval Aqlset_lval
#endif

#ifdef yyget_lloc
#define Aqlget_lloc_ALREADY_DEFINED
#else
#define yyget_lloc Aqlget_lloc
#endif

#ifdef yyset_lloc
#define Aqlset_lloc_ALREADY_DEFINED
#else
#define yyset_lloc Aqlset_lloc
#endif

#ifdef yyalloc
#define Aqlalloc_ALREADY_DEFINED
#else
#define yyalloc Aqlalloc
#endif

#ifdef yyrealloc
#define Aqlrealloc_ALREADY_DEFINED
#else
#define yyrealloc Aqlrealloc
#endif

#ifdef yyfree
#define Aqlfree_ALREADY_DEFINED
#else
#define yyfree Aqlfree
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types.
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t;
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN (-32767 - 1)
#endif
#ifndef INT32_MIN
#define INT32_MIN (-2147483647 - 1)
#endif
#ifndef INT8_MAX
#define INT8_MAX (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR)(c))

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void *yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin, yyscanner)
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the
 * main buffer.
 */
#define YY_STATE_BUF_SIZE ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* Note: We specifically omit the test for yy_rule_can_match_eol because it
 * requires access to the local variable yy_act. Since yyless() is a macro, it
 * would break existing scanners that call yyless() from OUTSIDE yylex. One
 * obvious solution it to make yy_act a global. I tried that, and saw a 5%
 * performance hit in a non-yylineno scanner, because yy_act is normally
 * declared as a register variable-- so it is not worth it.
 */
#define YY_LESS_LINENO(n)                  \
  do {                                     \
    int yyl;                               \
    for (yyl = n; yyl < yyleng; ++yyl)     \
      if (yytext[yyl] == '\n') --yylineno; \
  } while (0)
#define YY_LINENO_REWIND_TO(dst)         \
  do {                                   \
    const char *p;                       \
    for (p = yy_cp - 1; p >= (dst); --p) \
      if (*p == '\n') --yylineno;        \
  } while (0)

/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n)                                                     \
  do {                                                                \
    /* Undo effects of setting up yytext. */                          \
    int yyless_macro_arg = (n);                                       \
    YY_LESS_LINENO(yyless_macro_arg);                                 \
    *yy_cp = yyg->yy_hold_char;                                       \
    YY_RESTORE_YY_MORE_OFFSET                                         \
    yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
    YY_DO_BEFORE_ACTION; /* set up yytext again */                    \
  } while (0)
#define unput(c) yyunput(c, yyg->yytext_ptr, yyscanner)

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state {
  FILE *yy_input_file;

  char *yy_ch_buf;  /* input buffer */
  char *yy_buf_pos; /* current position in input buffer */

  /* Size of input buffer in bytes, not including room for EOB
   * characters.
   */
  int yy_buf_size;

  /* Number of characters read into yy_ch_buf, not including EOB
   * characters.
   */
  int yy_n_chars;

  /* Whether we "own" the buffer - i.e., we know we created it,
   * and can realloc() it to grow it, and should free() it to
   * delete it.
   */
  int yy_is_our_buffer;

  /* Whether this is an "interactive" input source; if so, and
   * if we're using stdio for input, then we want to use getc()
   * instead of fread(), to make sure we stop fetching input after
   * each newline.
   */
  int yy_is_interactive;

  /* Whether we're considered to be at the beginning of a line.
   * If so, '^' rules will be active on the next match, otherwise
   * not.
   */
  int yy_at_bol;

  int yy_bs_lineno; /**< The line count. */
  int yy_bs_column; /**< The column count. */

  /* Whether to try to fill the input buffer when we reach the
   * end of it.
   */
  int yy_fill_buffer;

  int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
  /* When an EOF's been seen but there's still some text to process
   * then we mark the buffer as YY_EOF_PENDING, to indicate that we
   * shouldn't try reading from the input source any more.  We might
   * still have a bunch of tokens to match, though, because of
   * possible backing-up.
   *
   * When we actually see the EOF, we change the status to "new"
   * (via yyrestart()), so that the user can continue scanning by
   * just pointing yyin at a new input file.
   */
#define YY_BUFFER_EOF_PENDING 2
};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER \
  (yyg->yy_buffer_stack ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void yyrestart(FILE *input_file, yyscan_t yyscanner);
void yy_switch_to_buffer(YY_BUFFER_STATE new_buffer, yyscan_t yyscanner);
YY_BUFFER_STATE yy_create_buffer(FILE *file, int size, yyscan_t yyscanner);
void yy_delete_buffer(YY_BUFFER_STATE b, yyscan_t yyscanner);
void yy_flush_buffer(YY_BUFFER_STATE b, yyscan_t yyscanner);
void yypush_buffer_state(YY_BUFFER_STATE new_buffer, yyscan_t yyscanner);
void yypop_buffer_state(yyscan_t yyscanner);

static void yyensure_buffer_stack(yyscan_t yyscanner);
static void yy_load_buffer_state(yyscan_t yyscanner);
static void yy_init_buffer(YY_BUFFER_STATE b, FILE *file, yyscan_t yyscanner);
#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER, yyscanner)

YY_BUFFER_STATE yy_scan_buffer(char *base, yy_size_t size, yyscan_t yyscanner);
YY_BUFFER_STATE yy_scan_string(const char *yy_str, yyscan_t yyscanner);
YY_BUFFER_STATE yy_scan_bytes(const char *bytes, int len, yyscan_t yyscanner);

void *yyalloc(yy_size_t, yyscan_t yyscanner);
void *yyrealloc(void *, yy_size_t, yyscan_t yyscanner);
void yyfree(void *, yyscan_t yyscanner);

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive)                        \
  {                                                               \
    if (!YY_CURRENT_BUFFER) {                                     \
      yyensure_buffer_stack(yyscanner);                           \
      YY_CURRENT_BUFFER_LVALUE =                                  \
          yy_create_buffer(yyin, YY_BUF_SIZE, yyscanner);         \
    }                                                             \
    YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
  }
#define yy_set_bol(at_bol)                                \
  {                                                       \
    if (!YY_CURRENT_BUFFER) {                             \
      yyensure_buffer_stack(yyscanner);                   \
      YY_CURRENT_BUFFER_LVALUE =                          \
          yy_create_buffer(yyin, YY_BUF_SIZE, yyscanner); \
    }                                                     \
    YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol;         \
  }
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define Aqlwrap(yyscanner) (/*CONSTCOND*/ 1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state(yyscan_t yyscanner);
static yy_state_type yy_try_NUL_trans(yy_state_type current_state,
                                      yyscan_t yyscanner);
static int yy_get_next_buffer(yyscan_t yyscanner);
static void yynoreturn yy_fatal_error(const char *msg, yyscan_t yyscanner);

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION      \
  yyg->yytext_ptr = yy_bp;       \
  yyleng = (int)(yy_cp - yy_bp); \
  yyg->yy_hold_char = *yy_cp;    \
  *yy_cp = '\0';                 \
  yyg->yy_c_buf_p = yy_cp;
#define YY_NUM_RULES 103
#define YY_END_OF_BUFFER 104
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info {
  flex_int32_t yy_verify;
  flex_int32_t yy_nxt;
};
static const flex_int16_t yy_accept[286] = {
    0,   0,  0,  0,  0,   0,  0,   0,  0,   0,  0,  0,   0,  0,   0,   104, 102,
    92,  93, 46, 76, 102, 53, 102, 81, 59,  60, 51, 49,  58, 50,  102, 52,  86,
    86,  56, 44, 45, 42,  54, 102, 65, 65,  65, 65, 65,  65, 65,  65,  65,  65,
    65,  65, 65, 65, 65,  65, 63,  64, 102, 66, 61, 102, 62, 102, 70,  69,  70,
    67,  75, 74, 75, 75,  85, 84,  82, 85,  80, 79, 77,  80, 96,  95,  99,  101,
    100, 92, 40, 38, 65,  47, 57,  89, 97,  94, 0,  0,   0,  0,   86,  55,

    43,  39, 37, 41, 90,  0,  0,   65, 65,  65, 65, 65,  65, 65,  65,  65,  65,
    65,  65, 65, 16, 65,  65, 65,  65, 65,  15, 65, 65,  65, 65,  65,  65,  65,
    0,   48, 71, 68, 73,  72, 83,  78, 96,  99, 98, 89,  87, 0,   89,  88,  90,
    91,  0,  90, 65, 31,  14, 30,  11, 65,  65, 65, 65,  65, 1,   65,  65,  65,
    65,  65, 65, 2,  65,  65, 65,  13, 65,  65, 65, 65,  65, 65,  65,  65,  65,
    65,  65, 65, 91, 91,  90, 90,  65, 65,  12, 65, 65,  65, 65,  65,

    65,  17, 65, 65, 33,  65, 32,  34, 65,  65, 65, 65,  65, 6,   35,  65,  65,
    65,  18, 91, 91, 65,  65, 65,  36, 65,  24, 65, 65,  65, 65,  7,   65,  65,
    65,  65, 65, 65, 65,  65, 65,  65, 65,  3,  65, 20,  65, 65,  65,  19,  65,
    4,   65, 21, 23, 8,   65, 5,   65, 29,  27, 65, 65,  22, 65,  65,  9,   65,
    28,  65, 10, 65, 65,  65, 65,  65, 65,  65, 65, 65,  25, 65,  65,  26,  0};

static const YY_CHAR yy_ec[256] = {
    0,  1,  1,  1,  1,  1,  1,  1,  1,  2,  3,  1,  1,  2,  1,  1,  1,  1,  1,
    1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  2,  4,  5,  1,  6,  7,
    8,  9,  10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 20, 20, 20, 20, 20, 20,
    20, 21, 1,  22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37,
    38, 39, 40, 41, 42, 36, 43, 44, 45, 46, 47, 48, 49, 50, 36, 51, 52, 53, 1,
    54, 55, 56, 57, 58, 59,

    60, 61, 62, 63, 64, 36, 65, 66, 67, 68, 69, 70, 36, 71, 72, 73, 74, 75, 76,
    49, 77, 36, 78, 79, 80, 81, 1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
    1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
    1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
    1,  1,  1,  82, 1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  83, 1,
    1,  1,  1,  1,  1,

    1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
    1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
    1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1};

static const YY_CHAR yy_meta[84] = {
    0, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 4, 4, 4,
    1, 1, 1, 1, 1, 5, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7,
    7, 7, 7, 7, 7, 7, 7, 7, 7, 1, 1, 1, 8, 1, 6, 6, 6, 6, 6, 6, 7,
    7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 1, 1, 1, 1, 1, 1};

static const flex_int16_t yy_base[312] = {
    0,    0,    0,    81,   82,   83,   86,   87,   88,   89,   90,   338,
    337,  95,   96,   335,  1509, 331,  1509, 64,   1509, 0,    1509, 318,
    1509, 1509, 1509, 1509, 1509, 1509, 1509, 84,   89,   94,   93,   304,
    297,  65,   292,  1509, 90,   130,  101,  111,  140,  158,  163,  169,
    108,  200,  220,  224,  227,  265,  232,  237,  282,  1509, 1509, 260,
    1509, 1509, 201,  1509, 134,  1509, 1509, 0,    1509, 1509, 1509, 0,
    133,  1509, 1509, 1509, 0,    1509, 1509, 1509, 0,    0,    1509, 0,
    1509, 194,  208,  1509, 1509, 290,  1509, 1509, 293,  1509, 1509, 206,
    96,   303,  0,    311,  1509,

    1509, 1509, 1509, 1509, 0,    143,  137,  0,    319,  329,  332,  338,
    345,  341,  357,  362,  390,  394,  399,  403,  407,  395,  427,  455,
    458,  464,  467,  470,  509,  514,  517,  520,  526,  571,  136,  1509,
    1509, 1509, 1509, 1509, 1509, 1509, 0,    0,    1509, 577,  99,   210,
    253,  0,    0,    0,    118,  110,  581,  487,  539,  584,  587,  594,
    599,  602,  611,  631,  643,  648,  651,  662,  654,  105,  123,  659,
    680,  706,  711,  718,  725,  728,  732,  739,  735,  749,  776,  756,
    779,  793,  807,  820,  0,    102,  93,   0,    824,  832,  839,  850,
    857,  871,  853,  876,

    880,  861,  122,  132,  890,  900,  908,  917,  920,  923,  928,  938,
    945,  948,  960,  967,  976,  985,  988,  69,   0,    1004, 1009, 1015,
    997,  1025, 1030, 1041, 1052, 145,  162,  1056, 1067, 1070, 1073, 1080,
    1085, 1118, 1132, 1099, 1136, 1139, 1142, 1147, 1150, 1163, 169,  176,
    1179, 1169, 1195, 1188, 1202, 1209, 1212, 1216, 1219, 1225, 1232, 1239,
    0,    172,  1242, 1249, 1262, 1269, 1265, 204,  1279, 1290, 1293, 217,
    223,  51,   180,  226,  224,  226,  225,  232,  0,    229,  260,  0,
    1509, 1347, 1355, 1363, 1371, 1379, 1387, 1390, 1394, 1399, 1407, 1415,
    1423, 1431, 1439, 1447,

    1452, 1455, 1460, 1465, 1470, 1475, 1480, 1485, 1490, 1495, 1500};

static const flex_int16_t yy_def[312] = {
    0,   285, 1,   286, 286, 287, 287, 288, 288, 289, 289, 290, 290, 291, 291,
    285, 285, 285, 285, 285, 285, 292, 285, 285, 285, 285, 285, 285, 285, 285,
    285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 293, 294, 294, 294, 294,
    294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 285, 285, 292,
    285, 285, 285, 285, 285, 285, 285, 295, 285, 285, 285, 296, 285, 285, 285,
    285, 297, 285, 285, 285, 298, 299, 285, 300, 285, 285, 285, 285, 285, 294,
    285, 285, 285, 285, 285, 285, 285, 285, 301, 285, 285,

    285, 285, 285, 285, 302, 303, 304, 305, 294, 294, 294, 294, 294, 294, 294,
    294, 294, 294, 294, 294, 294, 305, 294, 294, 294, 294, 294, 294, 294, 294,
    294, 294, 294, 294, 292, 285, 285, 285, 285, 285, 285, 285, 299, 300, 285,
    285, 285, 285, 285, 301, 302, 306, 307, 308, 294, 294, 294, 294, 294, 294,
    294, 294, 294, 294, 294, 294, 294, 294, 294, 305, 305, 294, 294, 294, 294,
    294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 306, 309,
    308, 310, 294, 294, 294, 294, 294, 294, 294, 294,

    294, 294, 305, 305, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294,
    294, 294, 294, 294, 309, 311, 294, 294, 294, 294, 294, 294, 294, 294, 305,
    305, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294,
    294, 305, 305, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294,
    305, 305, 294, 294, 294, 294, 294, 305, 294, 294, 294, 305, 305, 305, 305,
    305, 305, 305, 305, 305, 305, 305, 305, 305, 0,   285, 285, 285, 285, 285,
    285, 285, 285, 285, 285, 285, 285, 285, 285, 285,

    285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285};

static const flex_int16_t yy_nxt[1593] = {
    0,   16,  17,  18,  19,  20,  21,  22,  23,  24,  25,  26,  27,  28,  29,
    30,  31,  32,  33,  34,  34,  35,  36,  37,  38,  39,  40,  41,  42,  43,
    44,  42,  45,  46,  42,  47,  42,  48,  49,  42,  50,  51,  42,  52,  53,
    54,  55,  42,  56,  42,  42,  57,  16,  58,  59,  60,  41,  42,  43,  44,
    42,  45,  46,  42,  47,  48,  49,  42,  50,  51,  42,  52,  53,  54,  55,
    42,  56,  42,  61,  62,  63,  16,  16,  64,  66,  66,  70,  87,  102, 70,
    74,  74,  78,  78,  79,  79,  75,  75,  84,  84,  91,

    93,  92,  92,  92,  276, 94,  85,  85,  95,  95,  99,  99,  99,  147, 147,
    106, 147, 147, 108, 108, 108, 96,  221, 97,  97,  108, 108, 108, 108, 108,
    108, 203, 67,  67,  71,  68,  68,  71,  76,  76,  80,  80,  98,  107, 88,
    103, 192, 108, 108, 108, 96,  114, 97,  97,  108, 221, 204, 108, 108, 108,
    203, 122, 110, 192, 108, 72,  230, 111, 72,  112, 115, 153, 231, 113, 116,
    108, 108, 108, 247, 114, 108, 108, 108, 108, 117, 204, 108, 108, 108, 135,
    107, 110, 118, 108, 230, 111, 153, 112, 119, 115,

    231, 113, 268, 116, 248, 120, 277, 247, 121, 86,  145, 108, 261, 117, 140,
    137, 108, 108, 108, 108, 262, 118, 108, 146, 146, 146, 119, 149, 149, 149,
    123, 268, 248, 120, 124, 277, 121, 108, 108, 108, 261, 108, 108, 108, 108,
    108, 108, 272, 262, 108, 108, 108, 280, 108, 108, 108, 108, 129, 281, 123,
    125, 274, 283, 124, 275, 126, 127, 278, 279, 128, 149, 149, 149, 108, 132,
    272, 282, 108, 133, 136, 108, 280, 108, 108, 108, 108, 129, 281, 125, 274,
    108, 283, 275, 126, 127, 278, 279, 128, 130, 108,

    108, 108, 132, 284, 282, 131, 133, 108, 108, 108, 92,  92,  92,  135, 104,
    148, 134, 148, 108, 101, 149, 149, 149, 97,  100, 90,  95,  130, 99,  99,
    99,  284, 86,  131, 285, 108, 108, 108, 108, 82,  82,  97,  285, 108, 285,
    134, 108, 108, 108, 108, 108, 108, 97,  285, 285, 108, 108, 108, 108, 108,
    108, 155, 108, 108, 108, 285, 285, 157, 285, 156, 97,  285, 108, 159, 108,
    108, 108, 285, 160, 108, 108, 108, 108, 285, 285, 108, 285, 158, 285, 285,
    155, 108, 285, 285, 108, 285, 157, 156, 108, 285,

    161, 285, 159, 285, 285, 162, 160, 108, 108, 108, 108, 108, 108, 108, 158,
    108, 108, 108, 108, 285, 108, 108, 108, 285, 108, 108, 108, 163, 161, 166,
    285, 164, 285, 162, 167, 285, 170, 285, 171, 285, 285, 165, 285, 108, 108,
    108, 108, 108, 285, 285, 168, 169, 108, 285, 285, 163, 108, 285, 166, 164,
    108, 285, 285, 167, 170, 285, 171, 285, 285, 165, 285, 172, 108, 108, 108,
    108, 108, 108, 168, 169, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
    285, 173, 285, 174, 285, 285, 285, 175, 285, 172,

    285, 177, 176, 285, 108, 108, 108, 285, 108, 285, 285, 108, 285, 285, 178,
    285, 285, 108, 285, 173, 108, 174, 285, 108, 285, 175, 108, 108, 108, 177,
    176, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 285, 178, 108, 108,
    108, 285, 179, 285, 285, 180, 285, 285, 181, 182, 185, 108, 108, 108, 183,
    285, 285, 108, 285, 285, 184, 285, 108, 285, 186, 108, 285, 285, 108, 285,
    179, 285, 285, 180, 108, 285, 181, 182, 285, 185, 285, 285, 183, 108, 108,
    108, 285, 108, 184, 146, 146, 146, 186, 108, 108,

    108, 108, 108, 108, 108, 108, 108, 97,  285, 285, 187, 108, 108, 108, 285,
    188, 108, 108, 108, 108, 108, 108, 285, 193, 108, 285, 285, 195, 108, 108,
    108, 194, 285, 285, 108, 285, 97,  108, 187, 285, 108, 285, 285, 188, 285,
    285, 196, 108, 108, 108, 108, 193, 108, 285, 197, 108, 195, 285, 285, 194,
    108, 108, 108, 285, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 196,
    198, 108, 108, 108, 108, 108, 108, 197, 285, 108, 285, 285, 285, 285, 199,
    285, 200, 201, 285, 202, 285, 108, 108, 108, 108,

    285, 108, 285, 198, 108, 285, 285, 108, 285, 285, 205, 285, 108, 285, 285,
    108, 285, 199, 285, 200, 285, 201, 202, 108, 108, 108, 285, 285, 108, 108,
    108, 285, 285, 108, 285, 108, 108, 108, 285, 205, 206, 207, 108, 108, 108,
    108, 108, 108, 285, 108, 108, 108, 108, 108, 108, 209, 108, 108, 108, 108,
    285, 285, 208, 285, 108, 285, 108, 108, 108, 206, 207, 108, 210, 108, 108,
    108, 211, 285, 108, 285, 212, 108, 285, 285, 209, 108, 215, 285, 108, 285,
    208, 213, 108, 108, 108, 108, 108, 108, 108, 285,

    210, 285, 108, 285, 211, 216, 285, 285, 212, 108, 108, 108, 108, 285, 285,
    215, 285, 285, 285, 213, 214, 285, 285, 217, 108, 108, 108, 285, 285, 108,
    285, 285, 108, 285, 216, 285, 218, 108, 108, 108, 285, 108, 108, 108, 285,
    285, 108, 285, 214, 108, 108, 108, 217, 219, 222, 285, 108, 108, 108, 285,
    108, 285, 223, 285, 285, 218, 285, 108, 108, 108, 108, 108, 108, 108, 108,
    108, 108, 108, 108, 108, 108, 285, 219, 222, 224, 108, 227, 225, 108, 108,
    108, 223, 108, 108, 108, 108, 285, 108, 108, 108,

    285, 226, 285, 108, 285, 285, 108, 108, 108, 108, 108, 285, 285, 224, 108,
    227, 225, 108, 108, 108, 285, 228, 229, 285, 108, 108, 108, 108, 285, 108,
    226, 285, 285, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 232,
    108, 108, 108, 285, 228, 229, 285, 285, 108, 235, 108, 108, 108, 285, 285,
    233, 108, 108, 108, 108, 108, 108, 108, 285, 234, 108, 285, 232, 108, 285,
    285, 108, 108, 108, 108, 236, 108, 285, 235, 108, 108, 108, 285, 233, 237,
    285, 108, 285, 108, 108, 108, 285, 234, 108, 285,

    285, 108, 108, 108, 108, 108, 108, 108, 236, 285, 285, 238, 285, 108, 108,
    108, 108, 237, 239, 285, 108, 108, 108, 108, 285, 240, 108, 108, 108, 108,
    285, 285, 108, 108, 108, 285, 241, 242, 108, 238, 285, 108, 108, 108, 108,
    285, 239, 108, 108, 108, 108, 285, 285, 240, 243, 285, 285, 108, 108, 108,
    108, 285, 108, 285, 285, 241, 242, 244, 108, 108, 108, 108, 285, 108, 108,
    108, 285, 285, 108, 285, 245, 285, 243, 108, 108, 108, 108, 108, 108, 108,
    108, 108, 108, 285, 108, 244, 246, 108, 108, 108,

    250, 251, 108, 108, 108, 108, 285, 285, 245, 108, 285, 285, 249, 285, 285,
    253, 108, 108, 108, 252, 108, 285, 285, 108, 246, 285, 108, 285, 285, 250,
    251, 285, 285, 108, 285, 108, 108, 108, 108, 285, 249, 285, 285, 285, 253,
    285, 256, 252, 254, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
    108, 108, 257, 285, 108, 108, 108, 108, 108, 108, 259, 108, 285, 285, 256,
    285, 255, 254, 285, 260, 108, 108, 108, 258, 285, 108, 108, 108, 108, 108,
    285, 257, 108, 285, 285, 108, 108, 108, 108, 259,

    108, 285, 285, 108, 255, 108, 108, 108, 260, 285, 285, 258, 108, 108, 108,
    285, 108, 285, 263, 108, 108, 108, 108, 285, 285, 264, 108, 108, 108, 108,
    108, 108, 108, 108, 108, 108, 108, 108, 108, 285, 285, 108, 108, 108, 108,
    265, 263, 285, 108, 108, 108, 108, 285, 285, 264, 108, 108, 108, 108, 108,
    108, 108, 108, 266, 285, 108, 108, 108, 108, 108, 285, 269, 108, 265, 285,
    285, 267, 285, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 285,
    285, 266, 108, 285, 285, 108, 108, 108, 108, 271,

    269, 285, 108, 285, 267, 285, 270, 108, 108, 108, 108, 108, 108, 285, 285,
    108, 285, 285, 108, 285, 285, 285, 108, 285, 285, 285, 285, 285, 271, 285,
    285, 285, 108, 285, 270, 285, 285, 285, 285, 285, 285, 285, 285, 273, 285,
    285, 108, 65,  65,  65,  65,  65,  65,  65,  65,  69,  69,  69,  69,  69,
    69,  69,  69,  73,  73,  73,  73,  73,  73,  73,  73,  77,  77,  77,  77,
    77,  77,  77,  77,  81,  81,  81,  81,  81,  81,  81,  81,  83,  83,  83,
    83,  83,  83,  83,  83,  89,  89,  105, 105, 105,

    105, 105, 109, 285, 109, 109, 109, 138, 285, 138, 138, 138, 138, 138, 138,
    139, 285, 139, 139, 139, 139, 139, 139, 141, 285, 141, 141, 141, 141, 141,
    141, 142, 285, 142, 142, 142, 142, 142, 142, 143, 285, 143, 143, 143, 143,
    143, 143, 144, 285, 285, 144, 144, 144, 144, 144, 150, 285, 150, 151, 285,
    151, 151, 151, 152, 285, 152, 152, 152, 154, 285, 154, 154, 154, 108, 285,
    108, 108, 108, 189, 285, 189, 189, 189, 190, 285, 190, 190, 190, 191, 285,
    191, 191, 191, 220, 285, 220, 220, 220, 192, 285,

    192, 192, 192, 221, 285, 221, 221, 221, 15,  285, 285, 285, 285, 285, 285,
    285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285,
    285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285,
    285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285,
    285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285,
    285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285,
    285, 285

};

static const flex_int16_t yy_chk[1593] = {
    0,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
    1,   1,   1,   1,   1,   1,   1,   1,   1,   3,   4,   5,   19,  37,  6,
    7,   8,   9,   10,  9,   10,  7,   8,   13,  14,  31,

    32,  31,  31,  31,  274, 32,  13,  14,  34,  33,  34,  34,  34,  96,  96,
    40,  147, 147, 42,  42,  42,  33,  220, 34,  33,  48,  48,  48,  43,  43,
    43,  170, 3,   4,   5,   3,   4,   6,   7,   8,   9,   10,  33,  40,  19,
    37,  191, 41,  41,  41,  33,  43,  34,  33,  42,  190, 171, 44,  44,  44,
    170, 48,  41,  154, 43,  5,   203, 41,  6,   41,  44,  153, 204, 41,  44,
    45,  45,  45,  230, 43,  46,  46,  46,  41,  45,  171, 47,  47,  47,  135,
    107, 41,  45,  44,  203, 41,  106, 41,  45,  44,

    204, 41,  262, 44,  231, 46,  275, 230, 47,  86,  85,  45,  247, 45,  72,
    64,  46,  49,  49,  49,  248, 45,  47,  95,  95,  95,  45,  148, 148, 148,
    49,  262, 231, 46,  49,  275, 47,  50,  50,  50,  247, 51,  51,  51,  52,
    52,  52,  268, 248, 54,  54,  54,  278, 49,  55,  55,  55,  52,  279, 49,
    50,  272, 282, 49,  273, 50,  51,  276, 277, 51,  149, 149, 149, 50,  54,
    268, 280, 51,  55,  62,  52,  278, 53,  53,  53,  54,  52,  279, 50,  272,
    55,  282, 273, 50,  51,  276, 277, 51,  53,  56,

    56,  56,  54,  283, 280, 53,  55,  89,  89,  89,  92,  92,  92,  59,  38,
    97,  56,  97,  53,  36,  97,  97,  97,  92,  35,  23,  99,  53,  99,  99,
    99,  283, 17,  53,  15,  56,  109, 109, 109, 12,  11,  99,  0,   89,  0,
    56,  110, 110, 110, 111, 111, 111, 92,  0,   0,   112, 112, 112, 114, 114,
    114, 110, 113, 113, 113, 0,   0,   112, 0,   111, 99,  0,   109, 113, 115,
    115, 115, 0,   114, 116, 116, 116, 110, 0,   0,   111, 0,   112, 0,   0,
    110, 112, 0,   0,   114, 0,   112, 111, 113, 0,

    115, 0,   113, 0,   0,   116, 114, 117, 117, 117, 115, 118, 118, 118, 112,
    116, 119, 119, 119, 0,   120, 120, 120, 0,   121, 121, 121, 117, 115, 120,
    0,   118, 0,   116, 121, 0,   122, 0,   122, 0,   0,   119, 0,   117, 123,
    123, 123, 118, 0,   0,   121, 121, 119, 0,   0,   117, 120, 0,   120, 118,
    121, 0,   0,   121, 122, 0,   122, 0,   0,   119, 0,   123, 124, 124, 124,
    125, 125, 125, 121, 121, 123, 126, 126, 126, 127, 127, 127, 128, 128, 128,
    0,   124, 0,   124, 0,   0,   0,   125, 0,   123,

    0,   126, 125, 0,   156, 156, 156, 0,   124, 0,   0,   125, 0,   0,   128,
    0,   0,   126, 0,   124, 127, 124, 0,   128, 0,   125, 129, 129, 129, 126,
    125, 130, 130, 130, 131, 131, 131, 132, 132, 132, 156, 0,   128, 133, 133,
    133, 0,   129, 0,   0,   129, 0,   0,   129, 130, 133, 157, 157, 157, 131,
    0,   0,   129, 0,   0,   132, 0,   130, 0,   133, 131, 0,   0,   132, 0,
    129, 0,   0,   129, 133, 0,   129, 130, 0,   133, 0,   0,   131, 134, 134,
    134, 0,   157, 132, 146, 146, 146, 133, 155, 155,

    155, 158, 158, 158, 159, 159, 159, 146, 0,   0,   134, 160, 160, 160, 0,
    134, 161, 161, 161, 162, 162, 162, 0,   155, 134, 0,   0,   161, 163, 163,
    163, 160, 0,   0,   155, 0,   146, 158, 134, 0,   159, 0,   0,   134, 0,
    0,   162, 160, 164, 164, 164, 155, 161, 0,   163, 162, 161, 0,   0,   160,
    165, 165, 165, 0,   163, 166, 166, 166, 167, 167, 167, 169, 169, 169, 162,
    164, 172, 172, 172, 168, 168, 168, 163, 0,   164, 0,   0,   0,   0,   166,
    0,   167, 168, 0,   169, 0,   165, 173, 173, 173,

    0,   166, 0,   164, 167, 0,   0,   169, 0,   0,   173, 0,   172, 0,   0,
    168, 0,   166, 0,   167, 0,   168, 169, 174, 174, 174, 0,   0,   175, 175,
    175, 0,   0,   173, 0,   176, 176, 176, 0,   173, 174, 175, 177, 177, 177,
    178, 178, 178, 0,   179, 179, 179, 181, 181, 181, 178, 180, 180, 180, 174,
    0,   0,   177, 0,   175, 0,   182, 182, 182, 174, 175, 176, 179, 184, 184,
    184, 180, 0,   177, 0,   181, 178, 0,   0,   178, 179, 184, 0,   181, 0,
    177, 182, 180, 183, 183, 183, 185, 185, 185, 0,

    179, 0,   182, 0,   180, 185, 0,   0,   181, 184, 186, 186, 186, 0,   0,
    184, 0,   0,   0,   182, 183, 0,   0,   186, 187, 187, 187, 0,   0,   183,
    0,   0,   185, 0,   185, 0,   187, 188, 188, 188, 0,   193, 193, 193, 0,
    0,   186, 0,   183, 194, 194, 194, 186, 188, 193, 0,   195, 195, 195, 0,
    187, 0,   194, 0,   0,   187, 0,   196, 196, 196, 199, 199, 199, 188, 197,
    197, 197, 193, 202, 202, 202, 0,   188, 193, 196, 194, 199, 197, 198, 198,
    198, 194, 195, 200, 200, 200, 0,   201, 201, 201,

    0,   198, 0,   196, 0,   0,   199, 205, 205, 205, 197, 0,   0,   196, 202,
    199, 197, 206, 206, 206, 0,   200, 201, 0,   198, 207, 207, 207, 0,   200,
    198, 0,   0,   201, 208, 208, 208, 209, 209, 209, 210, 210, 210, 205, 206,
    211, 211, 211, 0,   200, 201, 0,   0,   206, 211, 212, 212, 212, 0,   0,
    209, 207, 213, 213, 213, 214, 214, 214, 0,   210, 208, 0,   206, 209, 0,
    0,   210, 215, 215, 215, 212, 211, 0,   211, 216, 216, 216, 0,   209, 213,
    0,   212, 0,   217, 217, 217, 0,   210, 213, 0,

    0,   214, 218, 218, 218, 219, 219, 219, 212, 0,   0,   216, 0,   215, 225,
    225, 225, 213, 217, 0,   216, 222, 222, 222, 0,   218, 223, 223, 223, 217,
    0,   0,   224, 224, 224, 0,   222, 223, 218, 216, 0,   219, 226, 226, 226,
    0,   217, 227, 227, 227, 225, 0,   0,   218, 224, 0,   0,   222, 228, 228,
    228, 0,   223, 0,   0,   222, 223, 226, 224, 229, 229, 229, 0,   232, 232,
    232, 0,   0,   226, 0,   228, 0,   224, 227, 233, 233, 233, 234, 234, 234,
    235, 235, 235, 0,   228, 226, 229, 236, 236, 236,

    234, 235, 237, 237, 237, 229, 0,   0,   228, 232, 0,   0,   233, 0,   0,
    237, 240, 240, 240, 236, 233, 0,   0,   234, 229, 0,   235, 0,   0,   234,
    235, 0,   0,   236, 0,   238, 238, 238, 237, 0,   233, 0,   0,   0,   237,
    0,   240, 236, 238, 239, 239, 239, 240, 241, 241, 241, 242, 242, 242, 243,
    243, 243, 241, 0,   244, 244, 244, 245, 245, 245, 243, 238, 0,   0,   240,
    0,   239, 238, 0,   245, 246, 246, 246, 242, 0,   239, 250, 250, 250, 241,
    0,   241, 242, 0,   0,   243, 249, 249, 249, 243,

    244, 0,   0,   245, 239, 252, 252, 252, 245, 0,   0,   242, 251, 251, 251,
    0,   246, 0,   249, 253, 253, 253, 250, 0,   0,   251, 254, 254, 254, 255,
    255, 255, 249, 256, 256, 256, 257, 257, 257, 0,   0,   252, 258, 258, 258,
    253, 249, 0,   251, 259, 259, 259, 0,   0,   251, 253, 260, 260, 260, 263,
    263, 263, 254, 257, 0,   255, 264, 264, 264, 256, 0,   263, 257, 253, 0,
    0,   259, 0,   258, 265, 265, 265, 267, 267, 267, 259, 266, 266, 266, 0,
    0,   257, 260, 0,   0,   263, 269, 269, 269, 266,

    263, 0,   264, 0,   259, 0,   265, 270, 270, 270, 271, 271, 271, 0,   0,
    265, 0,   0,   267, 0,   0,   0,   266, 0,   0,   0,   0,   0,   266, 0,
    0,   0,   269, 0,   265, 0,   0,   0,   0,   0,   0,   0,   0,   270, 0,
    0,   271, 286, 286, 286, 286, 286, 286, 286, 286, 287, 287, 287, 287, 287,
    287, 287, 287, 288, 288, 288, 288, 288, 288, 288, 288, 289, 289, 289, 289,
    289, 289, 289, 289, 290, 290, 290, 290, 290, 290, 290, 290, 291, 291, 291,
    291, 291, 291, 291, 291, 292, 292, 293, 293, 293,

    293, 293, 294, 0,   294, 294, 294, 295, 0,   295, 295, 295, 295, 295, 295,
    296, 0,   296, 296, 296, 296, 296, 296, 297, 0,   297, 297, 297, 297, 297,
    297, 298, 0,   298, 298, 298, 298, 298, 298, 299, 0,   299, 299, 299, 299,
    299, 299, 300, 0,   0,   300, 300, 300, 300, 300, 301, 0,   301, 302, 0,
    302, 302, 302, 303, 0,   303, 303, 303, 304, 0,   304, 304, 304, 305, 0,
    305, 305, 305, 306, 0,   306, 306, 306, 307, 0,   307, 307, 307, 308, 0,
    308, 308, 308, 309, 0,   309, 309, 309, 310, 0,

    310, 310, 310, 311, 0,   311, 311, 311, 285, 285, 285, 285, 285, 285, 285,
    285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285,
    285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285,
    285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285,
    285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285,
    285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285,
    285, 285

};

/* Table of booleans, true if rule could match eol. */
static const flex_int32_t yy_rule_can_match_eol[104] = {
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0,
};

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET

#include "Basics/Common.h"
#include "Basics/NumberUtils.h"
#include "Basics/conversions.h"
#include "Basics/operating-system.h"

#if _WIN32
#include "Basics/win-utils.h"
#endif

// introduce the namespace here, otherwise following references to
// the namespace in auto-generated headers might fail

namespace arangodb {
namespace aql {
class QueryContext;
class Parser;
}  // namespace aql
}  // namespace arangodb

#include "Aql/AstNode.h"
#include "Aql/grammar.h"
#include "Aql/Functions.h"
#include "Aql/Parser.h"
#include "Aql/QueryContext.h"

#include <algorithm>

#define YY_EXTRA_TYPE arangodb::aql::Parser *

#define YY_USER_ACTION                                           \
  yylloc->first_line = static_cast<int>(yylineno);               \
  yylloc->first_column = static_cast<int>(yycolumn);             \
  yylloc->last_column = static_cast<int>(yycolumn + yyleng - 1); \
  yycolumn += static_cast<int>(yyleng);                          \
  yyextra->increaseOffset(yyleng);

#define YY_NO_INPUT 1

#define YY_INPUT(resultBuffer, resultState, maxBytesToRead)        \
  {                                                                \
    size_t length = std::min(yyextra->remainingLength(),           \
                             static_cast<size_t>(maxBytesToRead)); \
    if (length > 0) {                                              \
      yyextra->fillBuffer(resultBuffer, length);                   \
      resultState = length;                                        \
    } else {                                                       \
      resultState = YY_NULL;                                       \
    }                                                              \
  }

#define INITIAL 0
#define BACKTICK 1
#define FORWARDTICK 2
#define SINGLE_QUOTE 3
#define DOUBLE_QUOTE 4
#define COMMENT_SINGLE 5
#define COMMENT_MULTI 6

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t {
  /* User-defined. Not touched by flex. */
  YY_EXTRA_TYPE yyextra_r;

  /* The rest are the same as the globals declared in the non-reentrant scanner.
   */
  FILE *yyin_r, *yyout_r;
  size_t yy_buffer_stack_top;       /**< index of top of stack. */
  size_t yy_buffer_stack_max;       /**< capacity of stack. */
  YY_BUFFER_STATE *yy_buffer_stack; /**< Stack as an array. */
  char yy_hold_char;
  int yy_n_chars;
  int yyleng_r;
  char *yy_c_buf_p;
  int yy_init;
  int yy_start;
  int yy_did_buffer_switch_on_eof;
  int yy_start_stack_ptr;
  int yy_start_stack_depth;
  int *yy_start_stack;
  yy_state_type yy_last_accepting_state;
  char *yy_last_accepting_cpos;

  int yylineno_r;
  int yy_flex_debug_r;

  char *yytext_r;
  int yy_more_flag;
  int yy_more_len;

  YYSTYPE *yylval_r;

  YYLTYPE *yylloc_r;

}; /* end struct yyguts_t */

static int yy_init_globals(yyscan_t yyscanner);

/* This must go here because YYSTYPE and YYLTYPE are included
 * from bison output in section 1.*/
#define yylval yyg->yylval_r

#define yylloc yyg->yylloc_r

int yylex_init(yyscan_t *scanner);

int yylex_init_extra(YY_EXTRA_TYPE user_defined, yyscan_t *scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy(yyscan_t yyscanner);

int yyget_debug(yyscan_t yyscanner);

void yyset_debug(int debug_flag, yyscan_t yyscanner);

YY_EXTRA_TYPE yyget_extra(yyscan_t yyscanner);

void yyset_extra(YY_EXTRA_TYPE user_defined, yyscan_t yyscanner);

FILE *yyget_in(yyscan_t yyscanner);

void yyset_in(FILE *_in_str, yyscan_t yyscanner);

FILE *yyget_out(yyscan_t yyscanner);

void yyset_out(FILE *_out_str, yyscan_t yyscanner);

int yyget_leng(yyscan_t yyscanner);

char *yyget_text(yyscan_t yyscanner);

int yyget_lineno(yyscan_t yyscanner);

void yyset_lineno(int _line_number, yyscan_t yyscanner);

int yyget_column(yyscan_t yyscanner);

void yyset_column(int _column_no, yyscan_t yyscanner);

YYSTYPE *yyget_lval(yyscan_t yyscanner);

void yyset_lval(YYSTYPE *yylval_param, yyscan_t yyscanner);

YYLTYPE *yyget_lloc(yyscan_t yyscanner);

void yyset_lloc(YYLTYPE *yylloc_param, yyscan_t yyscanner);

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap(yyscan_t yyscanner);
#else
extern int yywrap(yyscan_t yyscanner);
#endif
#endif

#ifndef YY_NO_UNPUT

#endif

#ifndef yytext_ptr
static void yy_flex_strncpy(char *, const char *, int, yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen(const char *, yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput(yyscan_t yyscanner);
#else
static int input(yyscan_t yyscanner);
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO                                        \
  do {                                              \
    if (fwrite(yytext, (size_t)yyleng, 1, yyout)) { \
    }                                               \
  } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf, result, max_size)                                     \
  if (YY_CURRENT_BUFFER_LVALUE->yy_is_interactive) {                        \
    int c = '*';                                                            \
    int n;                                                                  \
    for (n = 0; n < max_size && (c = getc(yyin)) != EOF && c != '\n'; ++n)  \
      buf[n] = (char)c;                                                     \
    if (c == '\n') buf[n++] = (char)c;                                      \
    if (c == EOF && ferror(yyin))                                           \
      YY_FATAL_ERROR("input in flex scanner failed");                       \
    result = n;                                                             \
  } else {                                                                  \
    errno = 0;                                                              \
    while ((result = (int)fread(buf, 1, (yy_size_t)max_size, yyin)) == 0 && \
           ferror(yyin)) {                                                  \
      if (errno != EINTR) {                                                 \
        YY_FATAL_ERROR("input in flex scanner failed");                     \
        break;                                                              \
      }                                                                     \
      errno = 0;                                                            \
      clearerr(yyin);                                                       \
    }                                                                       \
  }

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error(msg, yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex(YYSTYPE *yylval_param, YYLTYPE *yylloc_param,
                 yyscan_t yyscanner);

#define YY_DECL \
  int yylex(YYSTYPE *yylval_param, YYLTYPE *yylloc_param, yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/ break;
#endif

#define YY_RULE_SETUP YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL {
  yy_state_type yy_current_state;
  char *yy_cp, *yy_bp;
  int yy_act;
  struct yyguts_t *yyg = (struct yyguts_t *)yyscanner;

  yylval = yylval_param;

  yylloc = yylloc_param;

  if (!yyg->yy_init) {
    yyg->yy_init = 1;

#ifdef YY_USER_INIT
    YY_USER_INIT;
#endif

    if (!yyg->yy_start) yyg->yy_start = 1; /* first start state */

    if (!yyin) yyin = stdin;

    if (!yyout) yyout = stdout;

    if (!YY_CURRENT_BUFFER) {
      yyensure_buffer_stack(yyscanner);
      YY_CURRENT_BUFFER_LVALUE = yy_create_buffer(yyin, YY_BUF_SIZE, yyscanner);
    }

    yy_load_buffer_state(yyscanner);
  }

  {
    /* ---------------------------------------------------------------------------
     * language keywords
     * ---------------------------------------------------------------------------
     */

    while (/*CONSTCOND*/ 1) /* loops until end-of-file is reached */
    {
      yy_cp = yyg->yy_c_buf_p;

      /* Support of yytext. */
      *yy_cp = yyg->yy_hold_char;

      /* yy_bp points to the position in yy_ch_buf of the start of
       * the current run.
       */
      yy_bp = yy_cp;

      yy_current_state = yyg->yy_start;
    yy_match:
      do {
        YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
        if (yy_accept[yy_current_state]) {
          yyg->yy_last_accepting_state = yy_current_state;
          yyg->yy_last_accepting_cpos = yy_cp;
        }
        while (yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state) {
          yy_current_state = (int)yy_def[yy_current_state];
          if (yy_current_state >= 286) yy_c = yy_meta[yy_c];
        }
        yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
        ++yy_cp;
      } while (yy_current_state != 285);
      yy_cp = yyg->yy_last_accepting_cpos;
      yy_current_state = yyg->yy_last_accepting_state;

    yy_find_action:
      yy_act = yy_accept[yy_current_state];

      YY_DO_BEFORE_ACTION;

      if (yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act]) {
        int yyl;
        for (yyl = 0; yyl < yyleng; ++yyl)
          if (yytext[yyl] == '\n') do {
              yylineno++;
              yycolumn = 0;
            } while (0);
      }

    do_action: /* This label is used only to access EOF actions. */

      switch (yy_act) { /* beginning of action switch */
        case 0:         /* must back up */
          /* undo the effects of YY_DO_BEFORE_ACTION */
          *yy_cp = yyg->yy_hold_char;
          yy_cp = yyg->yy_last_accepting_cpos;
          yy_current_state = yyg->yy_last_accepting_state;
          goto yy_find_action;

        case 1:
          YY_RULE_SETUP { return T_FOR; }
          YY_BREAK
        case 2:
          YY_RULE_SETUP { return T_LET; }
          YY_BREAK
        case 3:
          YY_RULE_SETUP { return T_FILTER; }
          YY_BREAK
        case 4:
          YY_RULE_SETUP { return T_RETURN; }
          YY_BREAK
        case 5:
          YY_RULE_SETUP { return T_COLLECT; }
          YY_BREAK
        case 6:
          YY_RULE_SETUP { return T_SORT; }
          YY_BREAK
        case 7:
          YY_RULE_SETUP { return T_LIMIT; }
          YY_BREAK
        case 8:
          YY_RULE_SETUP { return T_WINDOW; }
          YY_BREAK
        case 9:
          YY_RULE_SETUP { return T_DISTINCT; }
          YY_BREAK
        case 10:
          YY_RULE_SETUP { return T_AGGREGATE; }
          YY_BREAK
        case 11:
          YY_RULE_SETUP { return T_ASC; }
          YY_BREAK
        case 12:
          YY_RULE_SETUP { return T_DESC; }
          YY_BREAK
        case 13:
          YY_RULE_SETUP { return T_NOT; }
          YY_BREAK
        case 14:
          YY_RULE_SETUP { return T_AND; }
          YY_BREAK
        case 15:
          YY_RULE_SETUP { return T_OR; }
          YY_BREAK
        case 16:
          YY_RULE_SETUP { return T_IN; }
          YY_BREAK
        case 17:
          YY_RULE_SETUP { return T_INTO; }
          YY_BREAK
        case 18:
          YY_RULE_SETUP { return T_WITH; }
          YY_BREAK
        case 19:
          YY_RULE_SETUP { return T_REMOVE; }
          YY_BREAK
        case 20:
          YY_RULE_SETUP { return T_INSERT; }
          YY_BREAK
        case 21:
          YY_RULE_SETUP { return T_UPDATE; }
          YY_BREAK
        case 22:
          YY_RULE_SETUP { return T_REPLACE; }
          YY_BREAK
        case 23:
          YY_RULE_SETUP { return T_UPSERT; }
          YY_BREAK
        case 24:
          YY_RULE_SETUP { return T_GRAPH; }
          YY_BREAK
        case 25:
          YY_RULE_SETUP { return T_SHORTEST_PATH; }
          YY_BREAK
        case 26:
          YY_RULE_SETUP { return T_K_SHORTEST_PATHS; }
          YY_BREAK
        case 27:
          YY_RULE_SETUP { return T_K_PATHS; }
          YY_BREAK
        case 28:
          YY_RULE_SETUP { return T_OUTBOUND; }
          YY_BREAK
        case 29:
          YY_RULE_SETUP { return T_INBOUND; }
          YY_BREAK
        case 30:
          YY_RULE_SETUP { return T_ANY; }
          YY_BREAK
        case 31:
          YY_RULE_SETUP { return T_ALL; }
          YY_BREAK
        case 32:
          YY_RULE_SETUP { return T_NONE; }
          YY_BREAK
        case 33:
          YY_RULE_SETUP { return T_LIKE; }
          YY_BREAK
        /* ---------------------------------------------------------------------------
         * predefined type literals
         * ---------------------------------------------------------------------------
         */
        case 34:
          YY_RULE_SETUP { return T_NULL; }
          YY_BREAK
        case 35:
          YY_RULE_SETUP { return T_TRUE; }
          YY_BREAK
        case 36:
          YY_RULE_SETUP { return T_FALSE; }
          YY_BREAK
        /* ---------------------------------------------------------------------------
         * operators
         * ---------------------------------------------------------------------------
         */
        case 37:
          YY_RULE_SETUP { return T_REGEX_MATCH; }
          YY_BREAK
        case 38:
          YY_RULE_SETUP { return T_REGEX_NON_MATCH; }
          YY_BREAK
        case 39:
          YY_RULE_SETUP { return T_EQ; }
          YY_BREAK
        case 40:
          YY_RULE_SETUP { return T_NE; }
          YY_BREAK
        case 41:
          YY_RULE_SETUP { return T_GE; }
          YY_BREAK
        case 42:
          YY_RULE_SETUP { return T_GT; }
          YY_BREAK
        case 43:
          YY_RULE_SETUP { return T_LE; }
          YY_BREAK
        case 44:
          YY_RULE_SETUP { return T_LT; }
          YY_BREAK
        case 45:
          YY_RULE_SETUP { return T_ASSIGN; }
          YY_BREAK
        case 46:
          YY_RULE_SETUP { return T_NOT; }
          YY_BREAK
        case 47:
          YY_RULE_SETUP { return T_AND; }
          YY_BREAK
        case 48:
          YY_RULE_SETUP { return T_OR; }
          YY_BREAK
        case 49:
          YY_RULE_SETUP { return T_PLUS; }
          YY_BREAK
        case 50:
          YY_RULE_SETUP { return T_MINUS; }
          YY_BREAK
        case 51:
          YY_RULE_SETUP { return T_TIMES; }
          YY_BREAK
        case 52:
          YY_RULE_SETUP { return T_DIV; }
          YY_BREAK
        case 53:
          YY_RULE_SETUP { return T_MOD; }
          YY_BREAK
        case 54:
          YY_RULE_SETUP { return T_QUESTION; }
          YY_BREAK
        case 55:
          YY_RULE_SETUP { return T_SCOPE; }
          YY_BREAK
        case 56:
          YY_RULE_SETUP { return T_COLON; }
          YY_BREAK
        case 57:
          YY_RULE_SETUP { return T_RANGE; }
          YY_BREAK
        /* ---------------------------------------------------------------------------
         * punctuation
         * ---------------------------------------------------------------------------
         */
        case 58:
          YY_RULE_SETUP { return T_COMMA; }
          YY_BREAK
        case 59:
          YY_RULE_SETUP { return T_OPEN; }
          YY_BREAK
        case 60:
          YY_RULE_SETUP { return T_CLOSE; }
          YY_BREAK
        case 61:
          YY_RULE_SETUP { return T_OBJECT_OPEN; }
          YY_BREAK
        case 62:
          YY_RULE_SETUP { return T_OBJECT_CLOSE; }
          YY_BREAK
        case 63:
          YY_RULE_SETUP { return T_ARRAY_OPEN; }
          YY_BREAK
        case 64:
          YY_RULE_SETUP { return T_ARRAY_CLOSE; }
          YY_BREAK
        /* ---------------------------------------------------------------------------
         * identifiers
         * ---------------------------------------------------------------------------
         */
        case 65:
          YY_RULE_SETUP {
            /* unquoted string */
            yylval->strval.value =
                yyextra->ast()->resources().registerString(yytext, yyleng);
            yylval->strval.length = yyleng;
            return T_STRING;
          }
          YY_BREAK
        case 66:
          YY_RULE_SETUP {
            /* string enclosed in backticks */
            yyextra->marker(yyextra->queryStringStart() + yyextra->offset());
            BEGIN(BACKTICK);
          }
          YY_BREAK
        case 67:
          YY_RULE_SETUP {
            /* end of backtick-enclosed string */
            BEGIN(INITIAL);
            size_t outLength;
            yylval->strval.value =
                yyextra->ast()->resources().registerEscapedString(
                    yyextra->marker(),
                    yyextra->offset() -
                        (yyextra->marker() - yyextra->queryStringStart()) - 1,
                    outLength);
            yylval->strval.length = outLength;
            return T_STRING;
          }
          YY_BREAK
        case 68:
          YY_RULE_SETUP { /* character escaped by backslash */
          }
          YY_BREAK
        case 69:
          /* rule 69 can match eol */
          YY_RULE_SETUP { /* newline character inside backtick */
          }
          YY_BREAK
        case YY_STATE_EOF(BACKTICK): {
          auto parser = yyextra;
          parser->registerParseError(TRI_ERROR_QUERY_PARSE,
                                     "unexpected unterminated identifier",
                                     yylloc->first_line, yylloc->first_column);
        }
          YY_BREAK
        case 70:
          YY_RULE_SETUP { /* any character (except newline) inside backtick */
          }
          YY_BREAK
        case 71:
          YY_RULE_SETUP {
            /* string enclosed in forwardticks */
            yyextra->marker(yyextra->queryStringStart() + yyextra->offset());
            BEGIN(FORWARDTICK);
          }
          YY_BREAK
        case 72:
          YY_RULE_SETUP {
            /* end of forwardtick-enclosed string */
            BEGIN(INITIAL);
            size_t outLength;
            yylval->strval.value =
                yyextra->ast()->resources().registerEscapedString(
                    yyextra->marker(),
                    yyextra->offset() -
                        (yyextra->marker() - yyextra->queryStringStart()) - 2,
                    outLength);
            yylval->strval.length = outLength;
            return T_STRING;
          }
          YY_BREAK
        case 73:
          YY_RULE_SETUP { /* character escaped by backslash */
          }
          YY_BREAK
        case 74:
          /* rule 74 can match eol */
          YY_RULE_SETUP { /* newline character inside forwardtick */
          }
          YY_BREAK
        case YY_STATE_EOF(FORWARDTICK): {
          auto parser = yyextra;
          parser->registerParseError(TRI_ERROR_QUERY_PARSE,
                                     "unexpected unterminated identifier",
                                     yylloc->first_line, yylloc->first_column);
        }
          YY_BREAK
        case 75:
          YY_RULE_SETUP {
            /* any character (except newline) inside forwardtick */
          }
          YY_BREAK
        /* ---------------------------------------------------------------------------
         * strings
         * ---------------------------------------------------------------------------
         */
        case 76:
          YY_RULE_SETUP {
            yyextra->marker(yyextra->queryStringStart() + yyextra->offset());
            BEGIN(DOUBLE_QUOTE);
          }
          YY_BREAK
        case 77:
          YY_RULE_SETUP {
            /* end of quote-enclosed string */
            BEGIN(INITIAL);
            size_t outLength;
            yylval->strval.value =
                yyextra->ast()->resources().registerEscapedString(
                    yyextra->marker(),
                    yyextra->offset() -
                        (yyextra->marker() - yyextra->queryStringStart()) - 1,
                    outLength);
            yylval->strval.length = outLength;
            return T_QUOTED_STRING;
          }
          YY_BREAK
        case 78:
          YY_RULE_SETUP { /* character escaped by backslash */
          }
          YY_BREAK
        case 79:
          /* rule 79 can match eol */
          YY_RULE_SETUP { /* newline character inside quote */
          }
          YY_BREAK
        case YY_STATE_EOF(DOUBLE_QUOTE): {
          auto parser = yyextra;
          parser->registerParseError(TRI_ERROR_QUERY_PARSE,
                                     "unexpected unterminated string literal",
                                     yylloc->first_line, yylloc->first_column);
        }
          YY_BREAK
        case 80:
          YY_RULE_SETUP { /* any character (except newline) inside quote */
          }
          YY_BREAK
        case 81:
          YY_RULE_SETUP {
            yyextra->marker(yyextra->queryStringStart() + yyextra->offset());
            BEGIN(SINGLE_QUOTE);
          }
          YY_BREAK
        case 82:
          YY_RULE_SETUP {
            /* end of quote-enclosed string */
            BEGIN(INITIAL);
            size_t outLength;
            yylval->strval.value =
                yyextra->ast()->resources().registerEscapedString(
                    yyextra->marker(),
                    yyextra->offset() -
                        (yyextra->marker() - yyextra->queryStringStart()) - 1,
                    outLength);
            yylval->strval.length = outLength;
            return T_QUOTED_STRING;
          }
          YY_BREAK
        case 83:
          YY_RULE_SETUP { /* character escaped by backslash */
          }
          YY_BREAK
        case 84:
          /* rule 84 can match eol */
          YY_RULE_SETUP { /* newline character inside quote */
          }
          YY_BREAK
        case YY_STATE_EOF(SINGLE_QUOTE): {
          auto parser = yyextra;
          parser->registerParseError(TRI_ERROR_QUERY_PARSE,
                                     "unexpected unterminated string literal",
                                     yylloc->first_line, yylloc->first_column);
        }
          YY_BREAK
        case 85:
          YY_RULE_SETUP { /* any character (except newline) inside quote */
          }
          YY_BREAK
        /* ---------------------------------------------------------------------------
         * number literals
         * ---------------------------------------------------------------------------
         */
        case 86:
          YY_RULE_SETUP {
            /* a numeric integer value, base 10 (decimal) */
            arangodb::aql::AstNode *node = nullptr;
            auto parser = yyextra;

            bool valid;
            int64_t value1 = arangodb::NumberUtils::atoi<int64_t>(
                yytext, yytext + yyleng, valid);

            if (valid) {
              node = parser->ast()->createNodeValueInt(value1);
            } else {
              // TODO: use std::from_chars
              double value2 = TRI_DoubleString(yytext);

              if (TRI_errno() != TRI_ERROR_NO_ERROR) {
                parser->registerWarning(
                    TRI_ERROR_QUERY_NUMBER_OUT_OF_RANGE,
                    TRI_errno_string(TRI_ERROR_QUERY_NUMBER_OUT_OF_RANGE),
                    yylloc->first_line, yylloc->first_column);
                node = parser->ast()->createNodeValueNull();
              } else {
                node = parser->ast()->createNodeValueDouble(value2);
              }
            }

            yylval->node = node;

            return T_INTEGER;
          }
          YY_BREAK
        case 87:
          YY_RULE_SETUP {
            /* a numeric integer value, base 2 (binary) */
            /* note that we support an arbitrary run of leading zeroes for the
             * actual number */

            /* cut off first 2 characters */
            char const *p = yytext + 2;
            char const *e = yytext + yyleng;

            auto parser = yyextra;
            if (static_cast<uint64_t>(e - p) >
                arangodb::aql::Functions::bitFunctionsMaxSupportedBits) {
              /* we only support up to 32 bits for now */
              parser->registerParseError(
                  TRI_ERROR_QUERY_PARSE,
                  "binary number literal value exceeds the supported range",
                  yylloc->first_line, yylloc->first_column);
            }

            uint64_t result = 0;

            while (p != e) {
              char c = *p;
              if (c == '1') {
                /* only the 1s are interesting for us */
                result += (static_cast<uint64_t>(1) << (e - p - 1));
              }
              ++p;
            }

            TRI_ASSERT(result <= UINT32_MAX);

            arangodb::aql::AstNode *node =
                parser->ast()->createNodeValueInt(static_cast<int64_t>(result));
            yylval->node = node;

            return T_INTEGER;
          }
          YY_BREAK
        case 88:
          YY_RULE_SETUP {
            /* a numeric integer value, base 16 (hexadecimal) */
            /* note that we support an arbitrary run of leading zeroes for the
             * actual number */

            /* cut off first 2 characters */
            char const *p = yytext + 2;
            char const *e = yytext + yyleng;

            auto parser = yyextra;
            /* each digit 0-9a-f carries 4 bits of information */
            if (static_cast<uint64_t>(e - p) >
                arangodb::aql::Functions::bitFunctionsMaxSupportedBits / 4) {
              /* we only support up to 32 bits for now */
              parser->registerParseError(
                  TRI_ERROR_QUERY_PARSE,
                  "hex number literal value exceeds the supported range",
                  yylloc->first_line, yylloc->first_column);
            }

            uint64_t result = 0;

            while (p != e) {
              uint8_t v;
              char c = *p;
              if (c >= 'A' && c <= 'F') {
                v = c - 'A' + 10;
              } else if (c >= 'a' && c <= 'f') {
                v = c - 'a' + 10;
              } else {
                v = c - '0';
              }
              result += (static_cast<uint64_t>(v) << (4 * (e - p - 1)));
              ++p;
            }

            TRI_ASSERT(result <= UINT32_MAX);

            arangodb::aql::AstNode *node =
                parser->ast()->createNodeValueInt(static_cast<int64_t>(result));
            yylval->node = node;

            return T_INTEGER;
          }
          YY_BREAK
        case 89:
          YY_RULE_SETUP {
            /* a numeric double value, base 10 (decimal) */

            arangodb::aql::AstNode *node = nullptr;
            auto parser = yyextra;
            // TODO: use std::from_chars
            double value = TRI_DoubleString(yytext);

            if (TRI_errno() != TRI_ERROR_NO_ERROR) {
              parser->registerWarning(
                  TRI_ERROR_QUERY_NUMBER_OUT_OF_RANGE,
                  TRI_errno_string(TRI_ERROR_QUERY_NUMBER_OUT_OF_RANGE),
                  yylloc->first_line, yylloc->first_column);
              node = parser->ast()->createNodeValueNull();
            } else {
              node = parser->ast()->createNodeValueDouble(value);
            }

            yylval->node = node;

            return T_DOUBLE;
          }
          YY_BREAK
        /* ---------------------------------------------------------------------------
         * bind parameters
         * ---------------------------------------------------------------------------
         */
        case 90:
          YY_RULE_SETUP {
            /* bind parameters must start with a @
               if followed by another @, this is a collection name or a view
               name parameter */
            yylval->strval.value = yyextra->ast()->resources().registerString(
                yytext + 1, yyleng - 1);
            yylval->strval.length = yyleng - 1;
            return T_PARAMETER;
          }
          YY_BREAK
        /* ---------------------------------------------------------------------------
         * bind data source parameters
         * ---------------------------------------------------------------------------
         */
        case 91:
          YY_RULE_SETUP {
            /* bind parameters must start with a @
               if followed by another @, this is a collection name or a view
               name parameter */
            yylval->strval.value = yyextra->ast()->resources().registerString(
                yytext + 1, yyleng - 1);
            yylval->strval.length = yyleng - 1;
            return T_DATA_SOURCE_PARAMETER;
          }
          YY_BREAK
        /* ---------------------------------------------------------------------------
         * whitespace etc.
         * ---------------------------------------------------------------------------
         */
        case 92:
          YY_RULE_SETUP { /* whitespace is ignored */
          }
          YY_BREAK
        case 93:
          /* rule 93 can match eol */
          YY_RULE_SETUP { yycolumn = 0; }
          YY_BREAK
        /* ---------------------------------------------------------------------------
         * comments
         * ---------------------------------------------------------------------------
         */
        case 94:
          YY_RULE_SETUP { BEGIN(COMMENT_SINGLE); }
          YY_BREAK
        case 95:
          /* rule 95 can match eol */
          YY_RULE_SETUP {
            /* line numbers are counted elsewhere already */
            yycolumn = 0;
            BEGIN(INITIAL);
          }
          YY_BREAK
        case 96:
          YY_RULE_SETUP { /* everything else */
          }
          YY_BREAK
        case 97:
          YY_RULE_SETUP { BEGIN(COMMENT_MULTI); }
          YY_BREAK
        case 98:
          YY_RULE_SETUP { BEGIN(INITIAL); }
          YY_BREAK
        case 99:
          YY_RULE_SETUP {
            // eat comment in chunks
          }
          YY_BREAK
        case 100:
          YY_RULE_SETUP {
            // eat the lone star
          }
          YY_BREAK
        case YY_STATE_EOF(COMMENT_MULTI): {
          auto parser = yyextra;
          parser->registerParseError(
              TRI_ERROR_QUERY_PARSE,
              "unexpected unterminated multi-line comment", yylloc->first_line,
              yylloc->first_column);
        }
          YY_BREAK
        case 101:
          /* rule 101 can match eol */
          YY_RULE_SETUP {
            /* line numbers are counted elsewhere already */
            yycolumn = 0;
          }
          YY_BREAK
        case 102:
          YY_RULE_SETUP {
            /* anything else is returned as it is */
            return (int)yytext[0];
          }
          YY_BREAK
        case 103:
          YY_RULE_SETUP
          ECHO;
          YY_BREAK
        case YY_STATE_EOF(INITIAL):
        case YY_STATE_EOF(COMMENT_SINGLE):
          yyterminate();

        case YY_END_OF_BUFFER: {
          /* Amount of text matched not including the EOB char. */
          int yy_amount_of_matched_text = (int)(yy_cp - yyg->yytext_ptr) - 1;

          /* Undo the effects of YY_DO_BEFORE_ACTION. */
          *yy_cp = yyg->yy_hold_char;
          YY_RESTORE_YY_MORE_OFFSET

          if (YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW) {
            /* We're scanning a new file or input source.  It's
             * possible that this happened because the user
             * just pointed yyin at a new source and called
             * yylex().  If so, then we have to assure
             * consistency between YY_CURRENT_BUFFER and our
             * globals.  Here is the right place to do so, because
             * this is the first action (other than possibly a
             * back-up) that will match for the new input source.
             */
            yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
            YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
            YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
          }

          /* Note that here we test for yy_c_buf_p "<=" to the position
           * of the first EOB in the buffer, since yy_c_buf_p will
           * already have been incremented past the NUL character
           * (since all states make transitions on EOB to the
           * end-of-buffer state).  Contrast this with the test
           * in input().
           */
          if (yyg->yy_c_buf_p <=
              &YY_CURRENT_BUFFER_LVALUE
                   ->yy_ch_buf[yyg->yy_n_chars]) { /* This was really a NUL. */
            yy_state_type yy_next_state;

            yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

            yy_current_state = yy_get_previous_state(yyscanner);

            /* Okay, we're now positioned to make the NUL
             * transition.  We couldn't have
             * yy_get_previous_state() go ahead and do it
             * for us because it doesn't know how to deal
             * with the possibility of jamming (and we don't
             * want to build jamming into it because then it
             * will run more slowly).
             */

            yy_next_state = yy_try_NUL_trans(yy_current_state, yyscanner);

            yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

            if (yy_next_state) {
              /* Consume the NUL. */
              yy_cp = ++yyg->yy_c_buf_p;
              yy_current_state = yy_next_state;
              goto yy_match;
            }

            else {
              yy_cp = yyg->yy_last_accepting_cpos;
              yy_current_state = yyg->yy_last_accepting_state;
              goto yy_find_action;
            }
          }

          else
            switch (yy_get_next_buffer(yyscanner)) {
              case EOB_ACT_END_OF_FILE: {
                yyg->yy_did_buffer_switch_on_eof = 0;

                if (yywrap(yyscanner)) {
                  /* Note: because we've taken care in
                   * yy_get_next_buffer() to have set up
                   * yytext, we can now set up
                   * yy_c_buf_p so that if some total
                   * hoser (like flex itself) wants to
                   * call the scanner after we return the
                   * YY_NULL, it'll still work - another
                   * YY_NULL will get returned.
                   */
                  yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

                  yy_act = YY_STATE_EOF(YY_START);
                  goto do_action;
                }

                else {
                  if (!yyg->yy_did_buffer_switch_on_eof) YY_NEW_FILE;
                }
                break;
              }

              case EOB_ACT_CONTINUE_SCAN:
                yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

                yy_current_state = yy_get_previous_state(yyscanner);

                yy_cp = yyg->yy_c_buf_p;
                yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
                goto yy_match;

              case EOB_ACT_LAST_MATCH:
                yyg->yy_c_buf_p =
                    &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

                yy_current_state = yy_get_previous_state(yyscanner);

                yy_cp = yyg->yy_c_buf_p;
                yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
                goto yy_find_action;
            }
          break;
        }

        default:
          YY_FATAL_ERROR("fatal flex scanner internal error--no action found");
      } /* end of action switch */
    }   /* end of scanning one token */
  }     /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer(yyscan_t yyscanner) {
  struct yyguts_t *yyg = (struct yyguts_t *)yyscanner;
  char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
  char *source = yyg->yytext_ptr;
  int number_to_move, i;
  int ret_val;

  if (yyg->yy_c_buf_p >
      &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1])
    YY_FATAL_ERROR("fatal flex scanner internal error--end of buffer missed");

  if (YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer ==
      0) { /* Don't try to fill the buffer, so this is an EOF. */
    if (yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1) {
      /* We matched a single character, the EOB, so
       * treat this as a final EOF.
       */
      return EOB_ACT_END_OF_FILE;
    }

    else {
      /* We matched some text prior to the EOB, first
       * process it.
       */
      return EOB_ACT_LAST_MATCH;
    }
  }

  /* Try to read more data. */

  /* First move last chars to start of buffer. */
  number_to_move = (int)(yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

  for (i = 0; i < number_to_move; ++i) *(dest++) = *(source++);

  if (YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING)
    /* don't do the read, it's not guaranteed to return an EOF,
     * just force an EOF
     */
    YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

  else {
    int num_to_read =
        YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

    while (num_to_read <= 0) { /* Not enough room in the buffer - grow it. */

      /* just a shorter name for the current buffer */
      YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

      int yy_c_buf_p_offset = (int)(yyg->yy_c_buf_p - b->yy_ch_buf);

      if (b->yy_is_our_buffer) {
        int new_size = b->yy_buf_size * 2;

        if (new_size <= 0)
          b->yy_buf_size += b->yy_buf_size / 8;
        else
          b->yy_buf_size *= 2;

        b->yy_ch_buf = (char *)
            /* Include room in for 2 EOB chars. */
            yyrealloc((void *)b->yy_ch_buf, (yy_size_t)(b->yy_buf_size + 2),
                      yyscanner);
      } else
        /* Can't grow it, we don't own it. */
        b->yy_ch_buf = NULL;

      if (!b->yy_ch_buf)
        YY_FATAL_ERROR("fatal error - scanner input buffer overflow");

      yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

      num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;
    }

    if (num_to_read > YY_READ_BUF_SIZE) num_to_read = YY_READ_BUF_SIZE;

    /* Read in more data. */
    YY_INPUT((&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
             yyg->yy_n_chars, num_to_read);

    YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
  }

  if (yyg->yy_n_chars == 0) {
    if (number_to_move == YY_MORE_ADJ) {
      ret_val = EOB_ACT_END_OF_FILE;
      yyrestart(yyin, yyscanner);
    }

    else {
      ret_val = EOB_ACT_LAST_MATCH;
      YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_EOF_PENDING;
    }
  }

  else
    ret_val = EOB_ACT_CONTINUE_SCAN;

  if ((yyg->yy_n_chars + number_to_move) >
      YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
    /* Extend the array by 50%, plus the number we really need. */
    int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
    YY_CURRENT_BUFFER_LVALUE->yy_ch_buf =
        (char *)yyrealloc((void *)YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,
                          (yy_size_t)new_size, yyscanner);
    if (!YY_CURRENT_BUFFER_LVALUE->yy_ch_buf)
      YY_FATAL_ERROR("out of dynamic memory in yy_get_next_buffer()");
    /* "- 2" to take care of EOB's */
    YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int)(new_size - 2);
  }

  yyg->yy_n_chars += number_to_move;
  YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
  YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] =
      YY_END_OF_BUFFER_CHAR;

  yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

  return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state(yyscan_t yyscanner) {
  yy_state_type yy_current_state;
  char *yy_cp;
  struct yyguts_t *yyg = (struct yyguts_t *)yyscanner;

  yy_current_state = yyg->yy_start;

  for (yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p;
       ++yy_cp) {
    YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
    if (yy_accept[yy_current_state]) {
      yyg->yy_last_accepting_state = yy_current_state;
      yyg->yy_last_accepting_cpos = yy_cp;
    }
    while (yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state) {
      yy_current_state = (int)yy_def[yy_current_state];
      if (yy_current_state >= 286) yy_c = yy_meta[yy_c];
    }
    yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
  }

  return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
static yy_state_type yy_try_NUL_trans(yy_state_type yy_current_state,
                                      yyscan_t yyscanner) {
  int yy_is_jam;
  struct yyguts_t *yyg = (struct yyguts_t *)
      yyscanner; /* This var may be unused depending upon options. */
  char *yy_cp = yyg->yy_c_buf_p;

  YY_CHAR yy_c = 1;
  if (yy_accept[yy_current_state]) {
    yyg->yy_last_accepting_state = yy_current_state;
    yyg->yy_last_accepting_cpos = yy_cp;
  }
  while (yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state) {
    yy_current_state = (int)yy_def[yy_current_state];
    if (yy_current_state >= 286) yy_c = yy_meta[yy_c];
  }
  yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
  yy_is_jam = (yy_current_state == 285);

  (void)yyg;
  return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput(yyscan_t yyscanner)
#else
static int input(yyscan_t yyscanner)
#endif

{
  int c;
  struct yyguts_t *yyg = (struct yyguts_t *)yyscanner;

  *yyg->yy_c_buf_p = yyg->yy_hold_char;

  if (*yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR) {
    /* yy_c_buf_p now points to the character we want to return.
     * If this occurs *before* the EOB characters, then it's a
     * valid NUL; if not, then we've hit the end of the buffer.
     */
    if (yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars])
      /* This was really a NUL. */
      *yyg->yy_c_buf_p = '\0';

    else { /* need more input */
      int offset = (int)(yyg->yy_c_buf_p - yyg->yytext_ptr);
      ++yyg->yy_c_buf_p;

      switch (yy_get_next_buffer(yyscanner)) {
        case EOB_ACT_LAST_MATCH:
          /* This happens because yy_g_n_b()
           * sees that we've accumulated a
           * token and flags that we need to
           * try matching the token before
           * proceeding.  But for input(),
           * there's no matching to consider.
           * So convert the EOB_ACT_LAST_MATCH
           * to EOB_ACT_END_OF_FILE.
           */

          /* Reset buffer status. */
          yyrestart(yyin, yyscanner);

          /*FALLTHROUGH*/

        case EOB_ACT_END_OF_FILE: {
          if (yywrap(yyscanner)) return 0;

          if (!yyg->yy_did_buffer_switch_on_eof) YY_NEW_FILE;
#ifdef __cplusplus
          return yyinput(yyscanner);
#else
          return input(yyscanner);
#endif
        }

        case EOB_ACT_CONTINUE_SCAN:
          yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
          break;
      }
    }
  }

  c = *(unsigned char *)yyg->yy_c_buf_p; /* cast for 8-bit char's */
  *yyg->yy_c_buf_p = '\0';               /* preserve yytext */
  yyg->yy_hold_char = *++yyg->yy_c_buf_p;

  if (c == '\n') do {
      yylineno++;
      yycolumn = 0;
    } while (0);

  return c;
}
#endif /* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
void yyrestart(FILE *input_file, yyscan_t yyscanner) {
  struct yyguts_t *yyg = (struct yyguts_t *)yyscanner;

  if (!YY_CURRENT_BUFFER) {
    yyensure_buffer_stack(yyscanner);
    YY_CURRENT_BUFFER_LVALUE = yy_create_buffer(yyin, YY_BUF_SIZE, yyscanner);
  }

  yy_init_buffer(YY_CURRENT_BUFFER, input_file, yyscanner);
  yy_load_buffer_state(yyscanner);
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
void yy_switch_to_buffer(YY_BUFFER_STATE new_buffer, yyscan_t yyscanner) {
  struct yyguts_t *yyg = (struct yyguts_t *)yyscanner;

  /* TODO. We should be able to replace this entire function body
   * with
   *		yypop_buffer_state();
   *		yypush_buffer_state(new_buffer);
   */
  yyensure_buffer_stack(yyscanner);
  if (YY_CURRENT_BUFFER == new_buffer) return;

  if (YY_CURRENT_BUFFER) {
    /* Flush out information for old buffer. */
    *yyg->yy_c_buf_p = yyg->yy_hold_char;
    YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
    YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
  }

  YY_CURRENT_BUFFER_LVALUE = new_buffer;
  yy_load_buffer_state(yyscanner);

  /* We don't actually know whether we did this switch during
   * EOF (yywrap()) processing, but the only time this flag
   * is looked at is after yywrap() is called, so it's safe
   * to go ahead and always set it.
   */
  yyg->yy_did_buffer_switch_on_eof = 1;
}

static void yy_load_buffer_state(yyscan_t yyscanner) {
  struct yyguts_t *yyg = (struct yyguts_t *)yyscanner;
  yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
  yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
  yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
  yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c
 * YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
YY_BUFFER_STATE yy_create_buffer(FILE *file, int size, yyscan_t yyscanner) {
  YY_BUFFER_STATE b;

  b = (YY_BUFFER_STATE)yyalloc(sizeof(struct yy_buffer_state), yyscanner);
  if (!b) YY_FATAL_ERROR("out of dynamic memory in yy_create_buffer()");

  b->yy_buf_size = size;

  /* yy_ch_buf has to be 2 characters longer than the size given because
   * we need to put in 2 end-of-buffer characters.
   */
  b->yy_ch_buf = (char *)yyalloc((yy_size_t)(b->yy_buf_size + 2), yyscanner);
  if (!b->yy_ch_buf)
    YY_FATAL_ERROR("out of dynamic memory in yy_create_buffer()");

  b->yy_is_our_buffer = 1;

  yy_init_buffer(b, file, yyscanner);

  return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
void yy_delete_buffer(YY_BUFFER_STATE b, yyscan_t yyscanner) {
  struct yyguts_t *yyg = (struct yyguts_t *)yyscanner;

  if (!b) return;

  if (b == YY_CURRENT_BUFFER) /* Not sure if we should pop here. */
    YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE)0;

  if (b->yy_is_our_buffer) yyfree((void *)b->yy_ch_buf, yyscanner);

  yyfree((void *)b, yyscanner);
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
static void yy_init_buffer(YY_BUFFER_STATE b, FILE *file, yyscan_t yyscanner)

{
  int oerrno = errno;
  struct yyguts_t *yyg = (struct yyguts_t *)yyscanner;

  yy_flush_buffer(b, yyscanner);

  b->yy_input_file = file;
  b->yy_fill_buffer = 1;

  /* If b is the current buffer, then yy_init_buffer was _probably_
   * called from yyrestart() or through yy_get_next_buffer.
   * In that case, we don't want to reset the lineno or column.
   */
  if (b != YY_CURRENT_BUFFER) {
    b->yy_bs_lineno = 1;
    b->yy_bs_column = 0;
  }

  b->yy_is_interactive = file ? (isatty(fileno(file)) > 0) : 0;

  errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
void yy_flush_buffer(YY_BUFFER_STATE b, yyscan_t yyscanner) {
  struct yyguts_t *yyg = (struct yyguts_t *)yyscanner;
  if (!b) return;

  b->yy_n_chars = 0;

  /* We always need two end-of-buffer characters.  The first causes
   * a transition to the end-of-buffer state.  The second causes
   * a jam in that state.
   */
  b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
  b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

  b->yy_buf_pos = &b->yy_ch_buf[0];

  b->yy_at_bol = 1;
  b->yy_buffer_status = YY_BUFFER_NEW;

  if (b == YY_CURRENT_BUFFER) yy_load_buffer_state(yyscanner);
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yypush_buffer_state(YY_BUFFER_STATE new_buffer, yyscan_t yyscanner) {
  struct yyguts_t *yyg = (struct yyguts_t *)yyscanner;
  if (new_buffer == NULL) return;

  yyensure_buffer_stack(yyscanner);

  /* This block is copied from yy_switch_to_buffer. */
  if (YY_CURRENT_BUFFER) {
    /* Flush out information for old buffer. */
    *yyg->yy_c_buf_p = yyg->yy_hold_char;
    YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
    YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
  }

  /* Only push if top exists. Otherwise, replace top. */
  if (YY_CURRENT_BUFFER) yyg->yy_buffer_stack_top++;
  YY_CURRENT_BUFFER_LVALUE = new_buffer;

  /* copied from yy_switch_to_buffer. */
  yy_load_buffer_state(yyscanner);
  yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yypop_buffer_state(yyscan_t yyscanner) {
  struct yyguts_t *yyg = (struct yyguts_t *)yyscanner;
  if (!YY_CURRENT_BUFFER) return;

  yy_delete_buffer(YY_CURRENT_BUFFER, yyscanner);
  YY_CURRENT_BUFFER_LVALUE = NULL;
  if (yyg->yy_buffer_stack_top > 0) --yyg->yy_buffer_stack_top;

  if (YY_CURRENT_BUFFER) {
    yy_load_buffer_state(yyscanner);
    yyg->yy_did_buffer_switch_on_eof = 1;
  }
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack(yyscan_t yyscanner) {
  yy_size_t num_to_alloc;
  struct yyguts_t *yyg = (struct yyguts_t *)yyscanner;

  if (!yyg->yy_buffer_stack) {
    /* First allocation is just for 2 elements, since we don't know if this
     * scanner will even need a stack. We use 2 instead of 1 to avoid an
     * immediate realloc on the next call.
     */
    num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
    yyg->yy_buffer_stack = (struct yy_buffer_state **)yyalloc(
        num_to_alloc * sizeof(struct yy_buffer_state *), yyscanner);
    if (!yyg->yy_buffer_stack)
      YY_FATAL_ERROR("out of dynamic memory in yyensure_buffer_stack()");

    memset(yyg->yy_buffer_stack, 0,
           num_to_alloc * sizeof(struct yy_buffer_state *));

    yyg->yy_buffer_stack_max = num_to_alloc;
    yyg->yy_buffer_stack_top = 0;
    return;
  }

  if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1) {
    /* Increase the buffer to prepare for a possible push. */
    yy_size_t grow_size = 8 /* arbitrary grow size */;

    num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
    yyg->yy_buffer_stack = (struct yy_buffer_state **)yyrealloc(
        yyg->yy_buffer_stack, num_to_alloc * sizeof(struct yy_buffer_state *),
        yyscanner);
    if (!yyg->yy_buffer_stack)
      YY_FATAL_ERROR("out of dynamic memory in yyensure_buffer_stack()");

    /* zero only the new slots.*/
    memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0,
           grow_size * sizeof(struct yy_buffer_state *));
    yyg->yy_buffer_stack_max = num_to_alloc;
  }
}

/** Setup the input buffer state to scan directly from a user-specified
 * character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer(char *base, yy_size_t size, yyscan_t yyscanner) {
  YY_BUFFER_STATE b;

  if (size < 2 || base[size - 2] != YY_END_OF_BUFFER_CHAR ||
      base[size - 1] != YY_END_OF_BUFFER_CHAR)
    /* They forgot to leave room for the EOB's. */
    return NULL;

  b = (YY_BUFFER_STATE)yyalloc(sizeof(struct yy_buffer_state), yyscanner);
  if (!b) YY_FATAL_ERROR("out of dynamic memory in yy_scan_buffer()");

  b->yy_buf_size = (int)(size - 2); /* "- 2" to take care of EOB's */
  b->yy_buf_pos = b->yy_ch_buf = base;
  b->yy_is_our_buffer = 0;
  b->yy_input_file = NULL;
  b->yy_n_chars = b->yy_buf_size;
  b->yy_is_interactive = 0;
  b->yy_at_bol = 1;
  b->yy_fill_buffer = 0;
  b->yy_buffer_status = YY_BUFFER_NEW;

  yy_switch_to_buffer(b, yyscanner);

  return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string(const char *yystr, yyscan_t yyscanner) {
  return yy_scan_bytes(yystr, (int)strlen(yystr), yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to
 * yylex() will scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes(const char *yybytes, int _yybytes_len,
                              yyscan_t yyscanner) {
  YY_BUFFER_STATE b;
  char *buf;
  yy_size_t n;
  int i;

  /* Get memory for full buffer, including space for trailing EOB's. */
  n = (yy_size_t)(_yybytes_len + 2);
  buf = (char *)yyalloc(n, yyscanner);
  if (!buf) YY_FATAL_ERROR("out of dynamic memory in yy_scan_bytes()");

  for (i = 0; i < _yybytes_len; ++i) buf[i] = yybytes[i];

  buf[_yybytes_len] = buf[_yybytes_len + 1] = YY_END_OF_BUFFER_CHAR;

  b = yy_scan_buffer(buf, n, yyscanner);
  if (!b) YY_FATAL_ERROR("bad buffer in yy_scan_bytes()");

  /* It's okay to grow etc. this buffer, and we should throw it
   * away when we're done.
   */
  b->yy_is_our_buffer = 1;

  return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error(const char *msg, yyscan_t yyscanner) {
  struct yyguts_t *yyg = (struct yyguts_t *)yyscanner;
  (void)yyg;
  fprintf(stderr, "%s\n", msg);
  exit(YY_EXIT_FAILURE);
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n)                                \
  do {                                           \
    /* Undo effects of setting up yytext. */     \
    int yyless_macro_arg = (n);                  \
    YY_LESS_LINENO(yyless_macro_arg);            \
    yytext[yyleng] = yyg->yy_hold_char;          \
    yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
    yyg->yy_hold_char = *yyg->yy_c_buf_p;        \
    *yyg->yy_c_buf_p = '\0';                     \
    yyleng = yyless_macro_arg;                   \
  } while (0)

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra(yyscan_t yyscanner) {
  struct yyguts_t *yyg = (struct yyguts_t *)yyscanner;
  return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno(yyscan_t yyscanner) {
  struct yyguts_t *yyg = (struct yyguts_t *)yyscanner;

  if (!YY_CURRENT_BUFFER) return 0;

  return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column(yyscan_t yyscanner) {
  struct yyguts_t *yyg = (struct yyguts_t *)yyscanner;

  if (!YY_CURRENT_BUFFER) return 0;

  return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in(yyscan_t yyscanner) {
  struct yyguts_t *yyg = (struct yyguts_t *)yyscanner;
  return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out(yyscan_t yyscanner) {
  struct yyguts_t *yyg = (struct yyguts_t *)yyscanner;
  return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int yyget_leng(yyscan_t yyscanner) {
  struct yyguts_t *yyg = (struct yyguts_t *)yyscanner;
  return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text(yyscan_t yyscanner) {
  struct yyguts_t *yyg = (struct yyguts_t *)yyscanner;
  return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra(YY_EXTRA_TYPE user_defined, yyscan_t yyscanner) {
  struct yyguts_t *yyg = (struct yyguts_t *)yyscanner;
  yyextra = user_defined;
}

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void yyset_lineno(int _line_number, yyscan_t yyscanner) {
  struct yyguts_t *yyg = (struct yyguts_t *)yyscanner;

  /* lineno is only valid if an input buffer exists. */
  if (!YY_CURRENT_BUFFER) YY_FATAL_ERROR("yyset_lineno called with no buffer");

  yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void yyset_column(int _column_no, yyscan_t yyscanner) {
  struct yyguts_t *yyg = (struct yyguts_t *)yyscanner;

  /* column is only valid if an input buffer exists. */
  if (!YY_CURRENT_BUFFER) YY_FATAL_ERROR("yyset_column called with no buffer");

  yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in(FILE *_in_str, yyscan_t yyscanner) {
  struct yyguts_t *yyg = (struct yyguts_t *)yyscanner;
  yyin = _in_str;
}

void yyset_out(FILE *_out_str, yyscan_t yyscanner) {
  struct yyguts_t *yyg = (struct yyguts_t *)yyscanner;
  yyout = _out_str;
}

int yyget_debug(yyscan_t yyscanner) {
  struct yyguts_t *yyg = (struct yyguts_t *)yyscanner;
  return yy_flex_debug;
}

void yyset_debug(int _bdebug, yyscan_t yyscanner) {
  struct yyguts_t *yyg = (struct yyguts_t *)yyscanner;
  yy_flex_debug = _bdebug;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE *yyget_lval(yyscan_t yyscanner) {
  struct yyguts_t *yyg = (struct yyguts_t *)yyscanner;
  return yylval;
}

void yyset_lval(YYSTYPE *yylval_param, yyscan_t yyscanner) {
  struct yyguts_t *yyg = (struct yyguts_t *)yyscanner;
  yylval = yylval_param;
}

YYLTYPE *yyget_lloc(yyscan_t yyscanner) {
  struct yyguts_t *yyg = (struct yyguts_t *)yyscanner;
  return yylloc;
}

void yyset_lloc(YYLTYPE *yylloc_param, yyscan_t yyscanner) {
  struct yyguts_t *yyg = (struct yyguts_t *)yyscanner;
  yylloc = yylloc_param;
}

/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last
 * argument. That's why we explicitly handle the declaration, instead of using
 * our macros.
 */
int yylex_init(yyscan_t *ptr_yy_globals) {
  if (ptr_yy_globals == NULL) {
    errno = EINVAL;
    return 1;
  }

  *ptr_yy_globals = (yyscan_t)yyalloc(sizeof(struct yyguts_t), NULL);

  if (*ptr_yy_globals == NULL) {
    errno = ENOMEM;
    return 1;
  }

  /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for
   * releases. */
  memset(*ptr_yy_globals, 0x00, sizeof(struct yyguts_t));

  return yy_init_globals(*ptr_yy_globals);
}

/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */
int yylex_init_extra(YY_EXTRA_TYPE yy_user_defined, yyscan_t *ptr_yy_globals) {
  struct yyguts_t dummy_yyguts;

  yyset_extra(yy_user_defined, &dummy_yyguts);

  if (ptr_yy_globals == NULL) {
    errno = EINVAL;
    return 1;
  }

  *ptr_yy_globals = (yyscan_t)yyalloc(sizeof(struct yyguts_t), &dummy_yyguts);

  if (*ptr_yy_globals == NULL) {
    errno = ENOMEM;
    return 1;
  }

  /* By setting to 0xAA, we expose bugs in
  yy_init_globals. Leave at 0x00 for releases. */
  memset(*ptr_yy_globals, 0x00, sizeof(struct yyguts_t));

  yyset_extra(yy_user_defined, *ptr_yy_globals);

  return yy_init_globals(*ptr_yy_globals);
}

static int yy_init_globals(yyscan_t yyscanner) {
  struct yyguts_t *yyg = (struct yyguts_t *)yyscanner;
  /* Initialization is the same as for the non-reentrant scanner.
   * This function is called from yylex_destroy(), so don't allocate here.
   */

  yyg->yy_buffer_stack = NULL;
  yyg->yy_buffer_stack_top = 0;
  yyg->yy_buffer_stack_max = 0;
  yyg->yy_c_buf_p = NULL;
  yyg->yy_init = 0;
  yyg->yy_start = 0;

  yyg->yy_start_stack_ptr = 0;
  yyg->yy_start_stack_depth = 0;
  yyg->yy_start_stack = NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
  yyin = stdin;
  yyout = stdout;
#else
  yyin = NULL;
  yyout = NULL;
#endif

  /* For future reference: Set errno on error, since we are called by
   * yylex_init()
   */
  return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy(yyscan_t yyscanner) {
  struct yyguts_t *yyg = (struct yyguts_t *)yyscanner;

  /* Pop the buffer stack, destroying each element. */
  while (YY_CURRENT_BUFFER) {
    yy_delete_buffer(YY_CURRENT_BUFFER, yyscanner);
    YY_CURRENT_BUFFER_LVALUE = NULL;
    yypop_buffer_state(yyscanner);
  }

  /* Destroy the stack itself. */
  yyfree(yyg->yy_buffer_stack, yyscanner);
  yyg->yy_buffer_stack = NULL;

  /* Destroy the start condition stack. */
  yyfree(yyg->yy_start_stack, yyscanner);
  yyg->yy_start_stack = NULL;

  /* Reset the globals. This is important in a non-reentrant scanner so the next
   * time yylex() is called, initialization will occur. */
  yy_init_globals(yyscanner);

  /* Destroy the main struct (reentrant only). */
  yyfree(yyscanner, yyscanner);
  yyscanner = NULL;
  return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy(char *s1, const char *s2, int n,
                            yyscan_t yyscanner) {
  struct yyguts_t *yyg = (struct yyguts_t *)yyscanner;
  (void)yyg;

  int i;
  for (i = 0; i < n; ++i) s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen(const char *s, yyscan_t yyscanner) {
  int n;
  for (n = 0; s[n]; ++n)
    ;

  return n;
}
#endif

void *yyalloc(yy_size_t size, yyscan_t yyscanner) {
  struct yyguts_t *yyg = (struct yyguts_t *)yyscanner;
  (void)yyg;
  return malloc(size);
}

void *yyrealloc(void *ptr, yy_size_t size, yyscan_t yyscanner) {
  struct yyguts_t *yyg = (struct yyguts_t *)yyscanner;
  (void)yyg;

  /* The cast to (char *) in the following accommodates both
   * implementations that use char* generic pointers, and those
   * that use void* generic pointers.  It works with the latter
   * because both ANSI C and C++ allow castless assignment from
   * any pointer type to void*, and deal with argument conversions
   * as though doing an assignment.
   */
  return realloc(ptr, size);
}

void yyfree(void *ptr, yyscan_t yyscanner) {
  struct yyguts_t *yyg = (struct yyguts_t *)yyscanner;
  (void)yyg;
  free((char *)ptr); /* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"
