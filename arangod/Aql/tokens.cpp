#line 17 "Aql/tokens.ll"
#include <stdint.h>



#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */










#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif














#ifdef yy_create_buffer
#define Aql_create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer Aql_create_buffer
#endif

    
#ifdef yy_delete_buffer
#define Aql_delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer Aql_delete_buffer
#endif

    
#ifdef yy_scan_buffer
#define Aql_scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer Aql_scan_buffer
#endif

    
#ifdef yy_scan_string
#define Aql_scan_string_ALREADY_DEFINED
#else
#define yy_scan_string Aql_scan_string
#endif

    
#ifdef yy_scan_bytes
#define Aql_scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes Aql_scan_bytes
#endif

    
#ifdef yy_init_buffer
#define Aql_init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer Aql_init_buffer
#endif

    
#ifdef yy_flush_buffer
#define Aql_flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer Aql_flush_buffer
#endif

    
#ifdef yy_load_buffer_state
#define Aql_load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state Aql_load_buffer_state
#endif

    
#ifdef yy_switch_to_buffer
#define Aql_switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer Aql_switch_to_buffer
#endif

    
#ifdef yypush_buffer_state
#define Aqlpush_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state Aqlpush_buffer_state
#endif

    
#ifdef yypop_buffer_state
#define Aqlpop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state Aqlpop_buffer_state
#endif

    
#ifdef yyensure_buffer_stack
#define Aqlensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack Aqlensure_buffer_stack
#endif

    
#ifdef yylex
#define Aqllex_ALREADY_DEFINED
#else
#define yylex Aqllex
#endif

    
#ifdef yyrestart
#define Aqlrestart_ALREADY_DEFINED
#else
#define yyrestart Aqlrestart
#endif

    
#ifdef yylex_init
#define Aqllex_init_ALREADY_DEFINED
#else
#define yylex_init Aqllex_init
#endif

    
#ifdef yylex_init_extra
#define Aqllex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra Aqllex_init_extra
#endif

    
#ifdef yylex_destroy
#define Aqllex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy Aqllex_destroy
#endif

    
#ifdef yyget_debug
#define Aqlget_debug_ALREADY_DEFINED
#else
#define yyget_debug Aqlget_debug
#endif

    
#ifdef yyset_debug
#define Aqlset_debug_ALREADY_DEFINED
#else
#define yyset_debug Aqlset_debug
#endif

    
#ifdef yyget_extra
#define Aqlget_extra_ALREADY_DEFINED
#else
#define yyget_extra Aqlget_extra
#endif

    
#ifdef yyset_extra
#define Aqlset_extra_ALREADY_DEFINED
#else
#define yyset_extra Aqlset_extra
#endif

    
#ifdef yyget_in
#define Aqlget_in_ALREADY_DEFINED
#else
#define yyget_in Aqlget_in
#endif

    
#ifdef yyset_in
#define Aqlset_in_ALREADY_DEFINED
#else
#define yyset_in Aqlset_in
#endif

    
#ifdef yyget_out
#define Aqlget_out_ALREADY_DEFINED
#else
#define yyget_out Aqlget_out
#endif

    
#ifdef yyset_out
#define Aqlset_out_ALREADY_DEFINED
#else
#define yyset_out Aqlset_out
#endif

    
#ifdef yyget_leng
#define Aqlget_leng_ALREADY_DEFINED
#else
#define yyget_leng Aqlget_leng
#endif

    
#ifdef yyget_text
#define Aqlget_text_ALREADY_DEFINED
#else
#define yyget_text Aqlget_text
#endif

    
#ifdef yyget_lineno
#define Aqlget_lineno_ALREADY_DEFINED
#else
#define yyget_lineno Aqlget_lineno
#endif

    
#ifdef yyset_lineno
#define Aqlset_lineno_ALREADY_DEFINED
#else
#define yyset_lineno Aqlset_lineno
#endif

    
        
#ifdef yyget_column
#define Aqlget_column_ALREADY_DEFINED
#else
#define yyget_column Aqlget_column
#endif

        
#ifdef yyset_column
#define Aqlset_column_ALREADY_DEFINED
#else
#define yyset_column Aqlset_column
#endif

    
    
#ifdef yywrap
#define Aqlwrap_ALREADY_DEFINED
#else
#define yywrap Aqlwrap
#endif




    
#ifdef yyget_lval
#define Aqlget_lval_ALREADY_DEFINED
#else
#define yyget_lval Aqlget_lval
#endif

    
#ifdef yyset_lval
#define Aqlset_lval_ALREADY_DEFINED
#else
#define yyset_lval Aqlset_lval
#endif




    
#ifdef yyget_lloc
#define Aqlget_lloc_ALREADY_DEFINED
#else
#define yyget_lloc Aqlget_lloc
#endif

    
#ifdef yyset_lloc
#define Aqlset_lloc_ALREADY_DEFINED
#else
#define yyset_lloc Aqlset_lloc
#endif




#ifdef yyalloc
#define Aqlalloc_ALREADY_DEFINED
#else
#define yyalloc Aqlalloc
#endif

    
#ifdef yyrealloc
#define Aqlrealloc_ALREADY_DEFINED
#else
#define yyrealloc Aqlrealloc
#endif

    
#ifdef yyfree
#define Aqlfree_ALREADY_DEFINED
#else
#define yyfree Aqlfree
#endif









/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */


/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0


/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))





/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

















/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r













/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin , yyscanner )
#define YY_END_OF_BUFFER_CHAR 0


/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif


/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))



#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif




#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex.
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    #define YY_LINENO_REWIND_TO(dst) \
            do {\
                const char *p;\
                for ( p = yy_cp-1; p >= (dst); --p)\
                    if ( *p == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )


#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;



	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */


	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */




/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]





void yyrestart ( FILE *input_file , yyscan_t yyscanner );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
void yy_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yy_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
void yypop_buffer_state ( yyscan_t yyscanner );


static void yyensure_buffer_stack ( yyscan_t yyscanner );
static void yy_load_buffer_state ( yyscan_t yyscanner );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER , yyscanner)


YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len , yyscan_t yyscanner );


void *yyalloc ( yy_size_t , yyscan_t yyscanner );
void *yyrealloc ( void *, yy_size_t , yyscan_t yyscanner );
void yyfree ( void * , yyscan_t yyscanner );


#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)


/* Begin user sect3 */

#define Aqlwrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;


typedef int yy_state_type;

#define yytext_ptr yytext_r






static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
static int yy_get_next_buffer ( yyscan_t yyscanner );
static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );




/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;
#define YY_NUM_RULES 101
#define YY_END_OF_BUFFER 102
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[266] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  102,  100,   87,   88,
       43,   73,  100,   50,  100,   78,   56,   57,   48,   46,
       55,   47,  100,   49,   83,   83,   53,   41,   42,   39,
       51,  100,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   60,   61,  100,
       63,   58,  100,   59,  100,   67,   66,   67,   64,   72,
       71,   72,   72,   82,   81,   79,   82,   77,   76,   74,
       77,   91,   90,   94,   96,   95,   99,   98,   98,   99,
       87,   37,   35,   62,   44,   54,   84,   92,   89,    0,

        0,   83,   52,   40,   36,   34,   38,   85,    0,    0,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   15,   62,   62,   62,   62,   14,   62,   62,
       62,   62,   62,   62,   62,   62,    0,   45,   68,   65,
       70,   69,   80,   75,   91,   94,   93,   97,   84,    0,
       84,   85,   86,    0,   85,   62,   28,   13,   27,   10,
       62,   62,   62,   62,   62,    1,   62,   62,   62,   62,
        2,   62,   62,   62,   12,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   86,   86,
       85,   85,   62,   62,   11,   62,   62,   62,   62,   62,

       62,   16,   30,   62,   29,   31,   62,   62,   62,   62,
       62,    6,   32,   62,   62,   17,   86,   86,   62,   62,
       62,   33,   62,   23,   62,   62,    7,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,    3,   62,   19,
       62,   18,   62,    4,   62,   20,   22,   62,    5,   62,
       26,   62,   21,   62,   62,    8,   25,   62,    9,   62,
       62,   62,   62,   24,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    1,    6,    7,    8,    9,   10,
       11,   12,   13,   14,   15,   16,   17,   18,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   20,    1,   21,
       22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
       32,   33,   34,   35,   36,   37,   38,   39,   40,   41,
       35,   42,   43,   44,   45,   46,   47,   35,   48,   35,
       49,   50,   51,    1,   52,   53,   54,   55,   56,   57,

       58,   59,   60,   61,   62,   35,   63,   64,   65,   66,
       67,   68,   35,   69,   70,   71,   72,   73,   74,   35,
       75,   35,   76,   77,   78,   79,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,   80,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,   81,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[82] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    3,    1,    1,    1,    1,    1,    4,    4,    1,
        1,    1,    1,    1,    5,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    1,    1,
        1,    7,    1,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    1,    1,    1,    1,    1,
        1
    } ;

static const flex_int16_t yy_base[294] =
    {   0,
        0,    0,   79,   80,   81,   84,   85,   86,   87,   88,
      433,  430,   93,   94,   83,  105,  426,  587,  423,  587,
       76,  587,    0,  587,  416,  587,  587,  587,  587,  587,
      587,  587,   83,   92,   84,   94,  400,  397,   81,  395,
      587,   91,  114,    0,   80,   92,  132,   79,  102,  129,
      104,  128,   98,  142,  119,  128,  130,  587,  587,  364,
      587,  587,  338,  587,  334,  587,  587,    0,  587,  587,
      587,    0,  222,  587,  587,  587,    0,  587,  587,  587,
        0,    0,  587,    0,  587,  282,  587,  587,  587,  138,
      291,  587,  587,    0,  587,  587,  171,  587,  587,  100,

      192,  196,  587,  587,  587,  587,  587,    0,  235,  201,
        0,  153,  142,  173,  167,  144,  150,  155,  179,  180,
      176,  193,  195,  180,  195,  193,  191,    0,  190,  208,
      195,  194,  195,  213,  197,  253,  175,  587,  587,  587,
      587,  587,  587,  587,    0,    0,  587,  587,  256,  259,
      262,    0,    0,  131,   88,  215,    0,    0,    0,    0,
      232,  254,  241,  245,  245,    0,  249,  251,  262,  254,
        0,  265,  263,  268,    0,  263,  274,  263,  267,  261,
      265,  264,  279,  285,  283,  286,    0,  324,    0,   75,
       73,    0,  292,  294,    0,  294,  302,  306,  305,  295,

      302,    0,    0,  301,    0,    0,  306,  302,  323,  309,
      309,    0,    0,  310,  313,    0,   71,    0,  325,  330,
      322,    0,  320,    0,  324,  321,    0,  323,  329,  341,
      335,  340,  349,  339,  358,  347,  365,    0,  365,    0,
      357,    0,  369,    0,  359,    0,    0,  359,    0,  360,
        0,  371,    0,  361,  376,    0,    0,   63,    0,  367,
      383,  367,  380,    0,  587,  441,  448,  455,  462,  469,
      476,  483,  105,  487,  491,  493,  500,  507,  514,  521,
      528,  535,  539,  543,  547,  551,  555,  559,  563,  567,
      571,  575,  579

    } ;

static const flex_int16_t yy_def[294] =
    {   0,
      265,    1,  266,  266,  267,  267,  268,  268,  269,  269,
      270,  270,  271,  271,  272,  272,  265,  265,  265,  265,
      265,  265,  273,  265,  265,  265,  265,  265,  265,  265,
      265,  265,  265,  265,  265,  265,  265,  265,  265,  265,
      265,  274,  275,  275,  275,  275,  275,  275,  275,  275,
      275,  275,  275,  275,  275,  275,  275,  265,  265,  276,
      265,  265,  265,  265,  265,  265,  265,  277,  265,  265,
      265,  278,  265,  265,  265,  265,  279,  265,  265,  265,
      280,  281,  265,  282,  265,  265,  265,  265,  265,  265,
      265,  265,  265,  275,  265,  265,  265,  265,  265,  265,

      265,  265,  265,  265,  265,  265,  265,  283,  284,  285,
      275,  275,  275,  275,  275,  275,  275,  275,  275,  275,
      275,  275,  275,  275,  275,  275,  275,  275,  275,  275,
      275,  275,  275,  275,  275,  286,  276,  265,  265,  265,
      265,  265,  265,  265,  281,  282,  265,  265,  265,  265,
      265,  283,  287,  288,  289,  275,  275,  275,  275,  275,
      275,  275,  275,  275,  275,  275,  275,  275,  275,  275,
      275,  275,  275,  275,  275,  275,  275,  275,  275,  275,
      275,  275,  275,  275,  275,  275,  290,  286,  287,  291,
      289,  292,  275,  275,  275,  275,  275,  275,  275,  275,

      275,  275,  275,  275,  275,  275,  275,  275,  275,  275,
      275,  275,  275,  275,  275,  275,  291,  293,  275,  275,
      275,  275,  275,  275,  275,  275,  275,  275,  275,  275,
      275,  275,  275,  275,  275,  275,  275,  275,  275,  275,
      275,  275,  275,  275,  275,  275,  275,  275,  275,  275,
      275,  275,  275,  275,  275,  275,  275,  275,  275,  275,
      275,  275,  275,  275,    0,  265,  265,  265,  265,  265,
      265,  265,  265,  265,  265,  265,  265,  265,  265,  265,
      265,  265,  265,  265,  265,  265,  265,  265,  265,  265,
      265,  265,  265

    } ;

static const flex_int16_t yy_nxt[669] =
    {   0,
       18,   19,   20,   21,   22,   23,   24,   25,   26,   27,
       28,   29,   30,   31,   32,   33,   34,   35,   36,   37,
       38,   39,   40,   41,   42,   43,   44,   45,   46,   44,
       47,   48,   44,   49,   44,   44,   50,   44,   51,   52,
       44,   53,   54,   55,   56,   44,   57,   44,   58,   18,
       59,   60,   61,   43,   44,   45,   46,   44,   47,   48,
       44,   49,   44,   50,   44,   51,   52,   44,   53,   54,
       55,   56,   44,   57,   44,   62,   63,   64,   18,   18,
       65,   67,   67,   71,   88,   89,   71,   75,   75,   79,
       79,   80,   80,   76,   76,   85,   85,   92,   96,  100,

       97,   97,  105,   98,   86,   86,   88,   89,   99,  100,
       94,  102,  102,  101,  260,  109,   90,  149,  149,  116,
      122,  117,  218,  101,  192,  118,  218,  130,   68,   68,
       72,   69,   69,   72,   77,   77,   81,   81,   90,  192,
      123,  101,  110,  126,   90,  112,  116,  122,  127,  117,
      113,  101,  114,  118,   93,  130,  115,  119,  124,  106,
      133,   73,  125,  135,   73,  120,   90,  123,  134,  128,
      126,  121,  129,  112,  131,  127,  148,  113,  157,  114,
      161,  132,  154,  115,  156,  119,  124,  133,   97,   97,
      125,  135,  162,  120,  160,  134,  128,  163,  121,  129,

      101,  158,  131,  148,  150,  157,  150,  161,  132,  151,
      151,  100,  156,  102,  102,  164,  165,  166,  167,  162,
      159,  168,  160,  171,  163,  101,  137,  176,  101,  158,
      172,  174,  173,  177,  181,  182,  175,  169,  170,  183,
      186,  184,  164,  165,  166,  178,  167,  159,  179,  168,
      171,  180,  110,  101,  176,  185,  193,  172,  174,  173,
      177,  181,  182,  175,  169,  170,  183,  186,  194,  184,
      187,  187,  178,  149,  149,  179,  151,  151,  180,  151,
      151,  195,  185,  193,  196,  101,  154,  197,  198,  199,
      200,  201,   91,  202,  203,  194,  204,  205,  147,  206,

      207,  142,  208,  209,  187,  210,  211,  212,  213,  195,
      214,  196,  215,  101,  197,  198,  199,  200,  216,  201,
      202,  219,  203,  220,  204,  205,  206,  221,  207,  208,
      209,  222,  210,  211,  212,  223,  213,  224,  214,  225,
      215,  187,  187,  226,  227,  228,  216,  229,  230,  219,
      231,  220,  232,  233,  234,  221,  235,  236,  242,  222,
      237,  238,  239,  223,  240,  224,  225,  241,  243,  245,
      226,  227,  228,  244,  229,  187,  230,  231,  246,  232,
      233,  234,  247,  248,  235,  236,  242,  237,  238,  239,
      249,  240,  250,  251,  241,  252,  243,  245,  253,  257,

      244,  254,  255,  256,  258,  259,  246,  261,  262,  247,
      263,  248,  264,  139,  138,  137,  107,  249,  104,  103,
      250,  251,  252,   95,   91,  265,  253,  257,  254,  255,
      256,  258,   83,  259,  261,   83,  262,  263,  265,  265,
      264,   66,   66,   66,   66,   66,   66,   66,   70,   70,
       70,   70,   70,   70,   70,   74,   74,   74,   74,   74,
       74,   74,   78,   78,   78,   78,   78,   78,   78,   82,
       82,   82,   82,   82,   82,   82,   84,   84,   84,   84,
       84,   84,   84,   87,   87,   87,   87,   87,   87,   87,
      108,  108,  108,  108,  111,  265,  111,  111,  136,  136,

      140,  265,  140,  140,  140,  140,  140,  141,  265,  141,
      141,  141,  141,  141,  143,  265,  143,  143,  143,  143,
      143,  144,  265,  144,  144,  144,  144,  144,  145,  265,
      145,  145,  145,  145,  145,  146,  265,  265,  146,  146,
      146,  146,  152,  265,  152,  152,  153,  265,  153,  153,
      155,  265,  155,  155,  188,  265,  188,  188,  189,  265,
      189,  189,  190,  265,  190,  190,  191,  265,  191,  191,
      187,  265,  187,  187,  217,  265,  217,  217,  192,  265,
      192,  192,  218,  265,  218,  218,   17,  265,  265,  265,
      265,  265,  265,  265,  265,  265,  265,  265,  265,  265,

      265,  265,  265,  265,  265,  265,  265,  265,  265,  265,
      265,  265,  265,  265,  265,  265,  265,  265,  265,  265,
      265,  265,  265,  265,  265,  265,  265,  265,  265,  265,
      265,  265,  265,  265,  265,  265,  265,  265,  265,  265,
      265,  265,  265,  265,  265,  265,  265,  265,  265,  265,
      265,  265,  265,  265,  265,  265,  265,  265,  265,  265,
      265,  265,  265,  265,  265,  265,  265,  265
    } ;

static const flex_int16_t yy_chk[669] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    3,    4,    5,   15,   15,    6,    7,    8,    9,
       10,    9,   10,    7,    8,   13,   14,   21,   33,   35,

       33,   33,   39,   34,   13,   14,   16,   16,   34,   36,
      273,   36,   36,   35,  258,   42,   15,  100,  100,   45,
       48,   46,  217,   36,  191,   46,  190,   53,    3,    4,
        5,    3,    4,    6,    7,    8,    9,   10,   16,  155,
       49,   35,   42,   51,   15,   43,   45,   48,   51,   46,
       43,   36,   43,   46,   21,   53,   43,   47,   50,   39,
       55,    5,   50,   57,    6,   47,   16,   49,   56,   52,
       51,   47,   52,   43,   54,   51,   90,   43,  113,   43,
      116,   54,  154,   43,  112,   47,   50,   55,   97,   97,
       50,   57,  117,   47,  115,   56,   52,  118,   47,   52,

       97,  114,   54,   90,  101,  113,  101,  116,   54,  101,
      101,  102,  112,  102,  102,  119,  120,  121,  122,  117,
      114,  123,  115,  124,  118,  102,  137,  127,   97,  114,
      125,  126,  125,  129,  131,  132,  126,  123,  123,  133,
      135,  134,  119,  120,  121,  130,  122,  114,  130,  123,
      124,  130,  110,  102,  127,  134,  156,  125,  126,  125,
      129,  131,  132,  126,  123,  123,  133,  135,  161,  134,
      136,  136,  130,  149,  149,  130,  150,  150,  130,  151,
      151,  162,  134,  156,  163,  149,  109,  164,  165,  167,
      168,  169,   91,  170,  172,  161,  173,  174,   86,  176,

      177,   73,  178,  179,  136,  180,  181,  182,  183,  162,
      184,  163,  185,  149,  164,  165,  167,  168,  186,  169,
      170,  193,  172,  194,  173,  174,  176,  196,  177,  178,
      179,  197,  180,  181,  182,  198,  183,  199,  184,  200,
      185,  188,  188,  201,  204,  207,  186,  208,  209,  193,
      210,  194,  211,  214,  215,  196,  219,  220,  229,  197,
      221,  223,  225,  198,  226,  199,  200,  228,  230,  232,
      201,  204,  207,  231,  208,  188,  209,  210,  233,  211,
      214,  215,  234,  235,  219,  220,  229,  221,  223,  225,
      236,  226,  237,  239,  228,  241,  230,  232,  243,  252,

      231,  245,  248,  250,  254,  255,  233,  260,  261,  234,
      262,  235,  263,   65,   63,   60,   40,  236,   38,   37,
      237,  239,  241,   25,   19,   17,  243,  252,  245,  248,
      250,  254,   12,  255,  260,   11,  261,  262,    0,    0,
      263,  266,  266,  266,  266,  266,  266,  266,  267,  267,
      267,  267,  267,  267,  267,  268,  268,  268,  268,  268,
      268,  268,  269,  269,  269,  269,  269,  269,  269,  270,
      270,  270,  270,  270,  270,  270,  271,  271,  271,  271,
      271,  271,  271,  272,  272,  272,  272,  272,  272,  272,
      274,  274,  274,  274,  275,    0,  275,  275,  276,  276,

      277,    0,  277,  277,  277,  277,  277,  278,    0,  278,
      278,  278,  278,  278,  279,    0,  279,  279,  279,  279,
      279,  280,    0,  280,  280,  280,  280,  280,  281,    0,
      281,  281,  281,  281,  281,  282,    0,    0,  282,  282,
      282,  282,  283,    0,  283,  283,  284,    0,  284,  284,
      285,    0,  285,  285,  286,    0,  286,  286,  287,    0,
      287,  287,  288,    0,  288,  288,  289,    0,  289,  289,
      290,    0,  290,  290,  291,    0,  291,  291,  292,    0,
      292,  292,  293,    0,  293,  293,  265,  265,  265,  265,
      265,  265,  265,  265,  265,  265,  265,  265,  265,  265,

      265,  265,  265,  265,  265,  265,  265,  265,  265,  265,
      265,  265,  265,  265,  265,  265,  265,  265,  265,  265,
      265,  265,  265,  265,  265,  265,  265,  265,  265,  265,
      265,  265,  265,  265,  265,  265,  265,  265,  265,  265,
      265,  265,  265,  265,  265,  265,  265,  265,  265,  265,
      265,  265,  265,  265,  265,  265,  265,  265,  265,  265,
      265,  265,  265,  265,  265,  265,  265,  265
    } ;


/* Table of booleans, true if rule could match eol. */
static const flex_int32_t yy_rule_can_match_eol[102] =
    {   0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 
    0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 
    0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET








#include "Basics/Common.h"
#include "Basics/conversions.h"
#include "Basics/NumberUtils.h"

// introduce the namespace here, otherwise following references to
// the namespace in auto-generated headers might fail

namespace arangodb {
namespace aql {
class Query;
class Parser;
}
}

#include "Aql/AstNode.h"
#include "Aql/grammar.h"
#include "Aql/Parser.h"

#include <algorithm>

#define YY_EXTRA_TYPE arangodb::aql::Parser*

#define YY_USER_ACTION                                                   \
  yylloc->first_line = static_cast<int>(yylineno);                       \
  yylloc->first_column = static_cast<int>(yycolumn);                     \
  yylloc->last_column = static_cast<int>(yycolumn + yyleng - 1);         \
  yycolumn += static_cast<int>(yyleng);                                  \
  yyextra->increaseOffset(yyleng);

#define YY_NO_INPUT 1

#define YY_INPUT(resultBuffer, resultState, maxBytesToRead) {            \
  size_t length = std::min(yyextra->remainingLength(), static_cast<size_t>(maxBytesToRead));  \
  if (length > 0) {                                                      \
    yyextra->fillBuffer(resultBuffer, length);                           \
    resultState = length;                                                \
  } else {                                                               \
    resultState = YY_NULL;                                               \
  }                                                                      \
}



#define INITIAL 0
#define BACKTICK 1
#define FORWARDTICK 2
#define SINGLE_QUOTE 3
#define DOUBLE_QUOTE 4
#define COMMENT_SINGLE 5
#define COMMENT_MULTI 6
#define NOT 7




#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif



#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif





/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;




    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;



    YYSTYPE * yylval_r;



    YYLTYPE * yylloc_r;


    }; /* end struct yyguts_t */




static int yy_init_globals ( yyscan_t yyscanner );




    
    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    

    
    #    define yylloc yyg->yylloc_r
    


int yylex_init (yyscan_t* scanner);

int yylex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);



/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */


int yylex_destroy ( yyscan_t yyscanner );



int yyget_debug ( yyscan_t yyscanner );



void yyset_debug ( int debug_flag , yyscan_t yyscanner );



YY_EXTRA_TYPE yyget_extra ( yyscan_t yyscanner );



void yyset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );



FILE *yyget_in ( yyscan_t yyscanner );



void yyset_in  ( FILE * _in_str , yyscan_t yyscanner );



FILE *yyget_out ( yyscan_t yyscanner );



void yyset_out  ( FILE * _out_str , yyscan_t yyscanner );



			int yyget_leng ( yyscan_t yyscanner );



char *yyget_text ( yyscan_t yyscanner );



int yyget_lineno ( yyscan_t yyscanner );



void yyset_lineno ( int _line_number , yyscan_t yyscanner );




int yyget_column  ( yyscan_t yyscanner );





void yyset_column ( int _column_no , yyscan_t yyscanner );




YYSTYPE * yyget_lval ( yyscan_t yyscanner );


void yyset_lval ( YYSTYPE * yylval_param , yyscan_t yyscanner );


    
       YYLTYPE *yyget_lloc ( yyscan_t yyscanner );
    

    
        void yyset_lloc ( YYLTYPE * yylloc_param , yyscan_t yyscanner );
    


/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( yyscan_t yyscanner );
#else
extern int yywrap ( yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT
    
#endif


#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( yyscan_t yyscanner );
#else
static int input ( yyscan_t yyscanner );
#endif

#endif








/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif


/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif



/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif



/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif


/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif


/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif



/* end tables serialization structures and prototypes */



/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1






        
    
    



    
    
    


extern int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner);

#define YY_DECL int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */


/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif



/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif



#define YY_RULE_SETUP \
	YY_USER_ACTION


/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;




    yylval = yylval_param;



    yylloc = yylloc_param;


	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif



		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
		}

		yy_load_buffer_state( yyscanner );
		}

	{


 /* ---------------------------------------------------------------------------
  * language keywords
  * --------------------------------------------------------------------------- */


	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 266 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 265 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;


		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;
			}


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
{
  return T_FOR;
}
	YY_BREAK
case 2:
YY_RULE_SETUP
{
  return T_LET;
}
	YY_BREAK
case 3:
YY_RULE_SETUP
{
  return T_FILTER;
}
	YY_BREAK
case 4:
YY_RULE_SETUP
{
  return T_RETURN;
}
	YY_BREAK
case 5:
YY_RULE_SETUP
{
  return T_COLLECT;
}
	YY_BREAK
case 6:
YY_RULE_SETUP
{
  return T_SORT;
}
	YY_BREAK
case 7:
YY_RULE_SETUP
{
  return T_LIMIT;
}
	YY_BREAK
case 8:
YY_RULE_SETUP
{
  return T_DISTINCT;
}
	YY_BREAK
case 9:
YY_RULE_SETUP
{
  return T_AGGREGATE;
}
	YY_BREAK
case 10:
YY_RULE_SETUP
{
  return T_ASC;
}
	YY_BREAK
case 11:
YY_RULE_SETUP
{
  return T_DESC;
}
	YY_BREAK
case 12:
YY_RULE_SETUP
{
  BEGIN(NOT);
}
	YY_BREAK
case 13:
YY_RULE_SETUP
{
  return T_AND;
}
	YY_BREAK
case 14:
YY_RULE_SETUP
{
  return T_OR;
}
	YY_BREAK
case 15:
YY_RULE_SETUP
{
  return T_IN;
}
	YY_BREAK
case 16:
YY_RULE_SETUP
{
  return T_INTO;
}
	YY_BREAK
case 17:
YY_RULE_SETUP
{
  return T_WITH;
}
	YY_BREAK
case 18:
YY_RULE_SETUP
{
  return T_REMOVE;
}
	YY_BREAK
case 19:
YY_RULE_SETUP
{
  return T_INSERT;
}
	YY_BREAK
case 20:
YY_RULE_SETUP
{
  return T_UPDATE;
}
	YY_BREAK
case 21:
YY_RULE_SETUP
{
  return T_REPLACE;
}
	YY_BREAK
case 22:
YY_RULE_SETUP
{
  return T_UPSERT;
}
	YY_BREAK
case 23:
YY_RULE_SETUP
{
  return T_GRAPH;
}
	YY_BREAK
case 24:
YY_RULE_SETUP
{
  return T_SHORTEST_PATH;
}
	YY_BREAK
case 25:
YY_RULE_SETUP
{
  return T_OUTBOUND;
}
	YY_BREAK
case 26:
YY_RULE_SETUP
{
  return T_INBOUND;
}
	YY_BREAK
case 27:
YY_RULE_SETUP
{
  return T_ANY;
}
	YY_BREAK
case 28:
YY_RULE_SETUP
{
  return T_ALL;
}
	YY_BREAK
case 29:
YY_RULE_SETUP
{
  return T_NONE;
}
	YY_BREAK
case 30:
YY_RULE_SETUP
{
  return T_LIKE;
}
	YY_BREAK
/* ---------------------------------------------------------------------------
  * predefined type literals
  * --------------------------------------------------------------------------- */
case 31:
YY_RULE_SETUP
{
  return T_NULL;
}
	YY_BREAK
case 32:
YY_RULE_SETUP
{
  return T_TRUE;
}
	YY_BREAK
case 33:
YY_RULE_SETUP
{
  return T_FALSE;
}
	YY_BREAK
/* ---------------------------------------------------------------------------
  * operators
  * --------------------------------------------------------------------------- */
case 34:
YY_RULE_SETUP
{
  return T_REGEX_MATCH;
}
	YY_BREAK
case 35:
YY_RULE_SETUP
{
  return T_REGEX_NON_MATCH;
}
	YY_BREAK
case 36:
YY_RULE_SETUP
{
  return T_EQ;
}
	YY_BREAK
case 37:
YY_RULE_SETUP
{
  return T_NE;
}
	YY_BREAK
case 38:
YY_RULE_SETUP
{
  return T_GE;
}
	YY_BREAK
case 39:
YY_RULE_SETUP
{
  return T_GT;
}
	YY_BREAK
case 40:
YY_RULE_SETUP
{
  return T_LE;
}
	YY_BREAK
case 41:
YY_RULE_SETUP
{
  return T_LT;
}
	YY_BREAK
case 42:
YY_RULE_SETUP
{
  return T_ASSIGN;
}
	YY_BREAK
case 43:
YY_RULE_SETUP
{
  return T_NOT;
}
	YY_BREAK
case 44:
YY_RULE_SETUP
{
  return T_AND;
}
	YY_BREAK
case 45:
YY_RULE_SETUP
{
  return T_OR;
}
	YY_BREAK
case 46:
YY_RULE_SETUP
{
  return T_PLUS;
}
	YY_BREAK
case 47:
YY_RULE_SETUP
{
  return T_MINUS;
}
	YY_BREAK
case 48:
YY_RULE_SETUP
{
  return T_TIMES;
}
	YY_BREAK
case 49:
YY_RULE_SETUP
{
  return T_DIV;
}
	YY_BREAK
case 50:
YY_RULE_SETUP
{
  return T_MOD;
}
	YY_BREAK
case 51:
YY_RULE_SETUP
{
  return T_QUESTION;
}
	YY_BREAK
case 52:
YY_RULE_SETUP
{
  return T_SCOPE;
}
	YY_BREAK
case 53:
YY_RULE_SETUP
{
  return T_COLON;
}
	YY_BREAK
case 54:
YY_RULE_SETUP
{
  return T_RANGE;
}
	YY_BREAK
/* ---------------------------------------------------------------------------
  * punctuation
  * --------------------------------------------------------------------------- */
case 55:
YY_RULE_SETUP
{
  return T_COMMA;
}
	YY_BREAK
case 56:
YY_RULE_SETUP
{
  return T_OPEN;
}
	YY_BREAK
case 57:
YY_RULE_SETUP
{
  return T_CLOSE;
}
	YY_BREAK
case 58:
YY_RULE_SETUP
{
  return T_OBJECT_OPEN;
}
	YY_BREAK
case 59:
YY_RULE_SETUP
{
  return T_OBJECT_CLOSE;
}
	YY_BREAK
case 60:
YY_RULE_SETUP
{
  return T_ARRAY_OPEN;
}
	YY_BREAK
case 61:
YY_RULE_SETUP
{
  return T_ARRAY_CLOSE;
}
	YY_BREAK
/* ---------------------------------------------------------------------------
  * identifiers
  * --------------------------------------------------------------------------- */
case 62:
YY_RULE_SETUP
{
  /* unquoted string */
  yylval->strval.value = yyextra->query()->registerString(yytext, yyleng);
  yylval->strval.length = yyleng;
  return T_STRING;
}
	YY_BREAK
case 63:
YY_RULE_SETUP
{
  /* string enclosed in backticks */
  yyextra->marker(yyextra->queryStringStart() + yyextra->offset());
  BEGIN(BACKTICK);
}
	YY_BREAK
case 64:
YY_RULE_SETUP
{
  /* end of backtick-enclosed string */
  BEGIN(INITIAL);
  size_t outLength;
  yylval->strval.value = yyextra->query()->registerEscapedString(yyextra->marker(), yyextra->offset() - (yyextra->marker() - yyextra->queryStringStart()) - 1, outLength);
  yylval->strval.length = outLength;
  return T_STRING;
}
	YY_BREAK
case 65:
YY_RULE_SETUP
{
  /* character escaped by backslash */
}
	YY_BREAK
case 66:
/* rule 66 can match eol */
YY_RULE_SETUP
{
  /* newline character inside backtick */
}
	YY_BREAK
case 67:
YY_RULE_SETUP
{
  /* any character (except newline) inside backtick */
}
	YY_BREAK
case 68:
YY_RULE_SETUP
{
  /* string enclosed in forwardticks */
  yyextra->marker(yyextra->queryStringStart() + yyextra->offset());
  BEGIN(FORWARDTICK);
}
	YY_BREAK
case 69:
YY_RULE_SETUP
{
  /* end of forwardtick-enclosed string */
  BEGIN(INITIAL);
  size_t outLength;
  yylval->strval.value = yyextra->query()->registerEscapedString(yyextra->marker(), yyextra->offset() - (yyextra->marker() - yyextra->queryStringStart()) - 2, outLength);
  yylval->strval.length = outLength;
  return T_STRING;
}
	YY_BREAK
case 70:
YY_RULE_SETUP
{
  /* character escaped by backslash */
}
	YY_BREAK
case 71:
/* rule 71 can match eol */
YY_RULE_SETUP
{
  /* newline character inside forwardtick */
}
	YY_BREAK
case 72:
YY_RULE_SETUP
{
  /* any character (except newline) inside forwardtick */
}
	YY_BREAK
/* ---------------------------------------------------------------------------
  * strings
  * --------------------------------------------------------------------------- */
case 73:
YY_RULE_SETUP
{
  yyextra->marker(yyextra->queryStringStart() + yyextra->offset());
  BEGIN(DOUBLE_QUOTE);
}
	YY_BREAK
case 74:
YY_RULE_SETUP
{
  /* end of quote-enclosed string */
  BEGIN(INITIAL);
  size_t outLength;
  yylval->strval.value = yyextra->query()->registerEscapedString(yyextra->marker(), yyextra->offset() - (yyextra->marker() - yyextra->queryStringStart()) - 1, outLength);
  yylval->strval.length = outLength;
  return T_QUOTED_STRING;
}
	YY_BREAK
case 75:
YY_RULE_SETUP
{
  /* character escaped by backslash */
}
	YY_BREAK
case 76:
/* rule 76 can match eol */
YY_RULE_SETUP
{
  /* newline character inside quote */
}
	YY_BREAK
case 77:
YY_RULE_SETUP
{
  /* any character (except newline) inside quote */
}
	YY_BREAK
case 78:
YY_RULE_SETUP
{
  yyextra->marker(yyextra->queryStringStart() + yyextra->offset());
  BEGIN(SINGLE_QUOTE);
}
	YY_BREAK
case 79:
YY_RULE_SETUP
{
  /* end of quote-enclosed string */
  BEGIN(INITIAL);
  size_t outLength;
  yylval->strval.value = yyextra->query()->registerEscapedString(yyextra->marker(), yyextra->offset() - (yyextra->marker() - yyextra->queryStringStart()) - 1, outLength);
  yylval->strval.length = outLength;
  return T_QUOTED_STRING;
}
	YY_BREAK
case 80:
YY_RULE_SETUP
{
  /* character escaped by backslash */
}
	YY_BREAK
case 81:
/* rule 81 can match eol */
YY_RULE_SETUP
{
  /* newline character inside quote */
}
	YY_BREAK
case 82:
YY_RULE_SETUP
{
  /* any character (except newline) inside quote */
}
	YY_BREAK
/* ---------------------------------------------------------------------------
  * number literals
  * --------------------------------------------------------------------------- */
case 83:
YY_RULE_SETUP
{
  /* a numeric integer value */
  arangodb::aql::AstNode* node = nullptr;
  auto parser = yyextra;

  bool valid;
  int64_t value1 = arangodb::NumberUtils::atoi<int64_t>(yytext, yytext + yyleng, valid);

  if (valid) {
    node = parser->ast()->createNodeValueInt(value1);
  } else {
    // TODO: use std::from_chars
    double value2 = TRI_DoubleString(yytext);

    if (TRI_errno() != TRI_ERROR_NO_ERROR) {
      parser->registerWarning(TRI_ERROR_QUERY_NUMBER_OUT_OF_RANGE, TRI_errno_string(TRI_ERROR_QUERY_NUMBER_OUT_OF_RANGE), yylloc->first_line, yylloc->first_column);
      node = parser->ast()->createNodeValueNull();
    } else {
      node = parser->ast()->createNodeValueDouble(value2);
    }
  }

  yylval->node = node;

  return T_INTEGER;
}
	YY_BREAK
case 84:
YY_RULE_SETUP
{
  /* a numeric double value */

  arangodb::aql::AstNode* node = nullptr;
  auto parser = yyextra;
  // TODO: use std::from_chars
  double value = TRI_DoubleString(yytext);

  if (TRI_errno() != TRI_ERROR_NO_ERROR) {
    parser->registerWarning(TRI_ERROR_QUERY_NUMBER_OUT_OF_RANGE, TRI_errno_string(TRI_ERROR_QUERY_NUMBER_OUT_OF_RANGE), yylloc->first_line, yylloc->first_column);
    node = parser->ast()->createNodeValueNull();
  } else {
    node = parser->ast()->createNodeValueDouble(value);
  }

  yylval->node = node;

  return T_DOUBLE;
}
	YY_BREAK
/* ---------------------------------------------------------------------------
  * bind parameters
  * --------------------------------------------------------------------------- */
case 85:
YY_RULE_SETUP
{
  /* bind parameters must start with a @
     if followed by another @, this is a collection name or a view name parameter */
  yylval->strval.value = yyextra->query()->registerString(yytext + 1, yyleng - 1);
  yylval->strval.length = yyleng - 1;
  return T_PARAMETER;
}
	YY_BREAK
/* ---------------------------------------------------------------------------
  * bind data source parameters
  * --------------------------------------------------------------------------- */
case 86:
YY_RULE_SETUP
{
  /* bind parameters must start with a @
     if followed by another @, this is a collection name or a view name parameter */
  yylval->strval.value = yyextra->query()->registerString(yytext + 1, yyleng - 1);
  yylval->strval.length = yyleng - 1;
  return T_DATA_SOURCE_PARAMETER;
}
	YY_BREAK
/* ---------------------------------------------------------------------------
  * whitespace etc.
  * --------------------------------------------------------------------------- */
case 87:
YY_RULE_SETUP
{
  /* whitespace is ignored */
}
	YY_BREAK
case 88:
/* rule 88 can match eol */
YY_RULE_SETUP
{
  yycolumn = 0;
}
	YY_BREAK
/* ---------------------------------------------------------------------------
  * comments
  * --------------------------------------------------------------------------- */
case 89:
YY_RULE_SETUP
{
  BEGIN(COMMENT_SINGLE);
}
	YY_BREAK
case 90:
/* rule 90 can match eol */
YY_RULE_SETUP
{
  /* line numbers are counted elsewhere already */
  yycolumn = 0;
  BEGIN(INITIAL);
}
	YY_BREAK
case 91:
YY_RULE_SETUP
{
  /* everything else */
}
	YY_BREAK
case 92:
YY_RULE_SETUP
{
  BEGIN(COMMENT_MULTI);
}
	YY_BREAK
case 93:
YY_RULE_SETUP
{
  BEGIN(INITIAL);
}
	YY_BREAK
case 94:
YY_RULE_SETUP
{
  // eat comment in chunks
}
	YY_BREAK
case 95:
YY_RULE_SETUP
{
  // eat the lone star
}
	YY_BREAK
case 96:
/* rule 96 can match eol */
YY_RULE_SETUP
{
  /* line numbers are counted elsewhere already */
  yycolumn = 0;
}
	YY_BREAK
/* ---------------------------------------------------------------------------
  * special transformation for NOT IN to T_NIN
  * --------------------------------------------------------------------------- */
case 97:
YY_RULE_SETUP
{
  /* T_NOT + T_IN => T_NIN */
  BEGIN(INITIAL);
  return T_NIN;
}
	YY_BREAK
case 98:
/* rule 98 can match eol */
YY_RULE_SETUP
{
  /* ignore whitespace */
}
	YY_BREAK
case 99:
YY_RULE_SETUP
{
  /* found something different to T_IN */
  /* now push the character back into the input stream and return a T_NOT token */
  BEGIN(INITIAL);
  yyless(0);
  /* must decrement offset by one character as we're pushing the char back onto the stack */
  yyextra->decreaseOffset(1);
  return T_NOT;
}
	YY_BREAK
case YY_STATE_EOF(NOT):
{
  /* make sure that we still return a T_NOT when we reach the end of the input */
  BEGIN(INITIAL);
  return T_NOT;
}
	YY_BREAK
case 100:
YY_RULE_SETUP
{
  /* anything else is returned as it is */
  return (int) yytext[0];
}
	YY_BREAK
case 101:
YY_RULE_SETUP
ECHO;
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(BACKTICK):
case YY_STATE_EOF(FORWARDTICK):
case YY_STATE_EOF(SINGLE_QUOTE):
case YY_STATE_EOF(DOUBLE_QUOTE):
case YY_STATE_EOF(COMMENT_SINGLE):
case YY_STATE_EOF(COMMENT_MULTI):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap( yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */





/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  , yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size , yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}


/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 266 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	char *yy_cp = yyg->yy_c_buf_p;

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 266 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 265);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}


#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr);
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin , yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	if ( c == '\n' )
		
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file , yyscanner);
	yy_load_buffer_state( yyscanner );
}


/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}


static void yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file , yyscanner);

	return b;
}


/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf , yyscanner );

	yyfree( (void *) b , yyscanner );
}


/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer( b , yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }


    
        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    

	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}


/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER , yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}


/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );


		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}





/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b , yyscanner );

	return b;
}




/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) , yyscanner);
}




/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n , yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n , yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}











#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )



/* Accessor  methods (get/set functions) to struct members. */


/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}



/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}




/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}




/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}



/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}



/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}


/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}



/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}



/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    
        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
    
    yylineno = _line_number;
}




/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    
        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_column called with no buffer" );
    
    yycolumn = _column_no;
}





/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}



void yyset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}




int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}



void yyset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}


/* Accessor methods for yylval and yylloc */


YYSTYPE * yyget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}



void yyset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}



    
YYLTYPE *yyget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    

    
void yyset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    




/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */
int yylex_init(yyscan_t* ptr_yy_globals)
{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}


/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */
int yylex_init_extra( YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals )
{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    yyset_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}


static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */


    

    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;


    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;






/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}


/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER , yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack , yyscanner);
	yyg->yy_buffer_stack = NULL;


    /* Destroy the start condition stack. */
        yyfree( yyg->yy_start_stack , yyscanner );
        yyg->yy_start_stack = NULL;




    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}



/*
 * Internal utility routines.
 */



#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif



#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif



void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return malloc(size);
}



void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}



void yyfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}


#define YYTABLES_NAME "yytables"








