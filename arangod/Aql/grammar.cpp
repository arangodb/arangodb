/* A Bison parser, made by GNU Bison 3.7.5.  */

/* Bison implementation for Yacc-like parsers in C

   Copyright (C) 1984, 1989-1990, 2000-2015, 2018-2021 Free Software Foundation,
   Inc.

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.

   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* DO NOT RELY ON FEATURES THAT ARE NOT DOCUMENTED in the manual,
   especially those whose name start with YY_ or yy_.  They are
   private implementation details that can be changed or removed.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output, and Bison version.  */
#define YYBISON 30705

/* Bison version string.  */
#define YYBISON_VERSION "3.7.5"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 1

/* Push parsers.  */
#define YYPUSH 0

/* Pull parsers.  */
#define YYPULL 1


/* Substitute the variable and function names.  */
#define yyparse         Aqlparse
#define yylex           Aqllex
#define yyerror         Aqlerror
#define yydebug         Aqldebug
#define yynerrs         Aqlnerrs

/* First part of user prologue.  */
#line 9 "Aql/grammar.y"

// we are using alloca here explicitly because we may
// otherwise leak error messages that are generated by Bison.
// Bison reports all its errors via the function `Aqlerror`, which
// will receive the error message as a constant string. So we
// must not free the string inside `Aqlerror`, and we cannot even
// tell if the error message is a dynamically allocated error
// message or a hard-coded error message that resides in some
// static part of the program.
// Even worse, `Aqlerror` does not return control to Bison but throws
// an exception... So the best thing we can do here is to not use
// dynamically memory allocation by Bison, but make it use alloca.
#define YYSTACK_USE_ALLOCA 1

#include "Aql/Aggregator.h"
#include "Aql/AstNode.h"
#include "Aql/Function.h"
#include "Aql/Parser.h"
#include "Aql/Quantifier.h"
#include "Aql/QueryContext.h"
#include "Aql/types.h"
#include "Basics/StringUtils.h"
#include "Graph/ShortestPathType.h"
#include "Transaction/Context.h"
#include "VocBase/AccessMode.h"

#include <algorithm>
#include <string_view>


#line 107 "Aql/grammar.cpp"

# ifndef YY_CAST
#  ifdef __cplusplus
#   define YY_CAST(Type, Val) static_cast<Type> (Val)
#   define YY_REINTERPRET_CAST(Type, Val) reinterpret_cast<Type> (Val)
#  else
#   define YY_CAST(Type, Val) ((Type) (Val))
#   define YY_REINTERPRET_CAST(Type, Val) ((Type) (Val))
#  endif
# endif
# ifndef YY_NULLPTR
#  if defined __cplusplus
#   if 201103L <= __cplusplus
#    define YY_NULLPTR nullptr
#   else
#    define YY_NULLPTR 0
#   endif
#  else
#   define YY_NULLPTR ((void*)0)
#  endif
# endif

#include "grammar.hpp"
/* Symbol kind.  */
enum yysymbol_kind_t
{
  YYSYMBOL_YYEMPTY = -2,
  YYSYMBOL_YYEOF = 0,                      /* "end of query string"  */
  YYSYMBOL_YYerror = 1,                    /* error  */
  YYSYMBOL_YYUNDEF = 2,                    /* "invalid token"  */
  YYSYMBOL_T_FOR = 3,                      /* "FOR declaration"  */
  YYSYMBOL_T_LET = 4,                      /* "LET declaration"  */
  YYSYMBOL_T_FILTER = 5,                   /* "FILTER declaration"  */
  YYSYMBOL_T_RETURN = 6,                   /* "RETURN declaration"  */
  YYSYMBOL_T_COLLECT = 7,                  /* "COLLECT declaration"  */
  YYSYMBOL_T_SORT = 8,                     /* "SORT declaration"  */
  YYSYMBOL_T_LIMIT = 9,                    /* "LIMIT declaration"  */
  YYSYMBOL_T_WINDOW = 10,                  /* "WINDOW declaration"  */
  YYSYMBOL_T_ASC = 11,                     /* "ASC keyword"  */
  YYSYMBOL_T_DESC = 12,                    /* "DESC keyword"  */
  YYSYMBOL_T_IN = 13,                      /* "IN keyword"  */
  YYSYMBOL_T_WITH = 14,                    /* "WITH keyword"  */
  YYSYMBOL_T_INTO = 15,                    /* "INTO keyword"  */
  YYSYMBOL_T_AGGREGATE = 16,               /* "AGGREGATE keyword"  */
  YYSYMBOL_T_GRAPH = 17,                   /* "GRAPH keyword"  */
  YYSYMBOL_T_SHORTEST_PATH = 18,           /* "SHORTEST_PATH keyword"  */
  YYSYMBOL_T_K_SHORTEST_PATHS = 19,        /* "K_SHORTEST_PATHS keyword"  */
  YYSYMBOL_T_K_PATHS = 20,                 /* "K_PATHS keyword"  */
  YYSYMBOL_T_DISTINCT = 21,                /* "DISTINCT modifier"  */
  YYSYMBOL_T_REMOVE = 22,                  /* "REMOVE command"  */
  YYSYMBOL_T_INSERT = 23,                  /* "INSERT command"  */
  YYSYMBOL_T_UPDATE = 24,                  /* "UPDATE command"  */
  YYSYMBOL_T_REPLACE = 25,                 /* "REPLACE command"  */
  YYSYMBOL_T_UPSERT = 26,                  /* "UPSERT command"  */
  YYSYMBOL_T_NULL = 27,                    /* "null"  */
  YYSYMBOL_T_TRUE = 28,                    /* "true"  */
  YYSYMBOL_T_FALSE = 29,                   /* "false"  */
  YYSYMBOL_T_STRING = 30,                  /* "identifier"  */
  YYSYMBOL_T_QUOTED_STRING = 31,           /* "quoted string"  */
  YYSYMBOL_T_INTEGER = 32,                 /* "integer number"  */
  YYSYMBOL_T_DOUBLE = 33,                  /* "number"  */
  YYSYMBOL_T_PARAMETER = 34,               /* "bind parameter"  */
  YYSYMBOL_T_DATA_SOURCE_PARAMETER = 35,   /* "bind data source parameter"  */
  YYSYMBOL_T_ASSIGN = 36,                  /* "assignment"  */
  YYSYMBOL_T_NOT = 37,                     /* "not operator"  */
  YYSYMBOL_T_AND = 38,                     /* "and operator"  */
  YYSYMBOL_T_OR = 39,                      /* "or operator"  */
  YYSYMBOL_T_REGEX_MATCH = 40,             /* "~= operator"  */
  YYSYMBOL_T_REGEX_NON_MATCH = 41,         /* "~! operator"  */
  YYSYMBOL_T_EQ = 42,                      /* "== operator"  */
  YYSYMBOL_T_NE = 43,                      /* "!= operator"  */
  YYSYMBOL_T_LT = 44,                      /* "< operator"  */
  YYSYMBOL_T_GT = 45,                      /* "> operator"  */
  YYSYMBOL_T_LE = 46,                      /* "<= operator"  */
  YYSYMBOL_T_GE = 47,                      /* ">= operator"  */
  YYSYMBOL_T_LIKE = 48,                    /* "like operator"  */
  YYSYMBOL_T_PLUS = 49,                    /* "+ operator"  */
  YYSYMBOL_T_MINUS = 50,                   /* "- operator"  */
  YYSYMBOL_T_TIMES = 51,                   /* "* operator"  */
  YYSYMBOL_T_DIV = 52,                     /* "/ operator"  */
  YYSYMBOL_T_MOD = 53,                     /* "% operator"  */
  YYSYMBOL_T_QUESTION = 54,                /* "?"  */
  YYSYMBOL_T_COLON = 55,                   /* ":"  */
  YYSYMBOL_T_SCOPE = 56,                   /* "::"  */
  YYSYMBOL_T_RANGE = 57,                   /* ".."  */
  YYSYMBOL_T_COMMA = 58,                   /* ","  */
  YYSYMBOL_T_OPEN = 59,                    /* "("  */
  YYSYMBOL_T_CLOSE = 60,                   /* ")"  */
  YYSYMBOL_T_OBJECT_OPEN = 61,             /* "{"  */
  YYSYMBOL_T_OBJECT_CLOSE = 62,            /* "}"  */
  YYSYMBOL_T_ARRAY_OPEN = 63,              /* "["  */
  YYSYMBOL_T_ARRAY_CLOSE = 64,             /* "]"  */
  YYSYMBOL_T_OUTBOUND = 65,                /* "outbound modifier"  */
  YYSYMBOL_T_INBOUND = 66,                 /* "inbound modifier"  */
  YYSYMBOL_T_ANY = 67,                     /* "any modifier"  */
  YYSYMBOL_T_ALL = 68,                     /* "all modifier"  */
  YYSYMBOL_T_NONE = 69,                    /* "none modifier"  */
  YYSYMBOL_UMINUS = 70,                    /* UMINUS  */
  YYSYMBOL_UPLUS = 71,                     /* UPLUS  */
  YYSYMBOL_UNEGATION = 72,                 /* UNEGATION  */
  YYSYMBOL_FUNCCALL = 73,                  /* FUNCCALL  */
  YYSYMBOL_REFERENCE = 74,                 /* REFERENCE  */
  YYSYMBOL_INDEXED = 75,                   /* INDEXED  */
  YYSYMBOL_EXPANSION = 76,                 /* EXPANSION  */
  YYSYMBOL_77_ = 77,                       /* '.'  */
  YYSYMBOL_YYACCEPT = 78,                  /* $accept  */
  YYSYMBOL_optional_prune_variable = 79,   /* optional_prune_variable  */
  YYSYMBOL_with_collection = 80,           /* with_collection  */
  YYSYMBOL_with_collection_list = 81,      /* with_collection_list  */
  YYSYMBOL_optional_with = 82,             /* optional_with  */
  YYSYMBOL_83_1 = 83,                      /* $@1  */
  YYSYMBOL_queryStart = 84,                /* queryStart  */
  YYSYMBOL_query = 85,                     /* query  */
  YYSYMBOL_final_statement = 86,           /* final_statement  */
  YYSYMBOL_optional_statement_block_statements = 87, /* optional_statement_block_statements  */
  YYSYMBOL_statement_block_statement = 88, /* statement_block_statement  */
  YYSYMBOL_more_output_variables = 89,     /* more_output_variables  */
  YYSYMBOL_for_output_variables = 90,      /* for_output_variables  */
  YYSYMBOL_prune_and_options = 91,         /* prune_and_options  */
  YYSYMBOL_traversal_graph_info = 92,      /* traversal_graph_info  */
  YYSYMBOL_shortest_path_graph_info = 93,  /* shortest_path_graph_info  */
  YYSYMBOL_k_shortest_paths_graph_info = 94, /* k_shortest_paths_graph_info  */
  YYSYMBOL_k_paths_graph_info = 95,        /* k_paths_graph_info  */
  YYSYMBOL_for_statement = 96,             /* for_statement  */
  YYSYMBOL_97_2 = 97,                      /* $@2  */
  YYSYMBOL_98_3 = 98,                      /* $@3  */
  YYSYMBOL_filter_statement = 99,          /* filter_statement  */
  YYSYMBOL_let_statement = 100,            /* let_statement  */
  YYSYMBOL_let_list = 101,                 /* let_list  */
  YYSYMBOL_let_element = 102,              /* let_element  */
  YYSYMBOL_count_into = 103,               /* count_into  */
  YYSYMBOL_collect_variable_list = 104,    /* collect_variable_list  */
  YYSYMBOL_105_4 = 105,                    /* $@4  */
  YYSYMBOL_collect_statement = 106,        /* collect_statement  */
  YYSYMBOL_collect_list = 107,             /* collect_list  */
  YYSYMBOL_collect_element = 108,          /* collect_element  */
  YYSYMBOL_collect_optional_into = 109,    /* collect_optional_into  */
  YYSYMBOL_variable_list = 110,            /* variable_list  */
  YYSYMBOL_keep = 111,                     /* keep  */
  YYSYMBOL_112_5 = 112,                    /* $@5  */
  YYSYMBOL_aggregate = 113,                /* aggregate  */
  YYSYMBOL_114_6 = 114,                    /* $@6  */
  YYSYMBOL_aggregate_list = 115,           /* aggregate_list  */
  YYSYMBOL_aggregate_element = 116,        /* aggregate_element  */
  YYSYMBOL_aggregate_function_call = 117,  /* aggregate_function_call  */
  YYSYMBOL_118_7 = 118,                    /* $@7  */
  YYSYMBOL_sort_statement = 119,           /* sort_statement  */
  YYSYMBOL_120_8 = 120,                    /* $@8  */
  YYSYMBOL_sort_list = 121,                /* sort_list  */
  YYSYMBOL_sort_element = 122,             /* sort_element  */
  YYSYMBOL_sort_direction = 123,           /* sort_direction  */
  YYSYMBOL_limit_statement = 124,          /* limit_statement  */
  YYSYMBOL_window_statement = 125,         /* window_statement  */
  YYSYMBOL_return_statement = 126,         /* return_statement  */
  YYSYMBOL_in_or_into_collection = 127,    /* in_or_into_collection  */
  YYSYMBOL_remove_statement = 128,         /* remove_statement  */
  YYSYMBOL_insert_statement = 129,         /* insert_statement  */
  YYSYMBOL_update_parameters = 130,        /* update_parameters  */
  YYSYMBOL_update_statement = 131,         /* update_statement  */
  YYSYMBOL_replace_parameters = 132,       /* replace_parameters  */
  YYSYMBOL_replace_statement = 133,        /* replace_statement  */
  YYSYMBOL_update_or_replace = 134,        /* update_or_replace  */
  YYSYMBOL_upsert_statement = 135,         /* upsert_statement  */
  YYSYMBOL_136_9 = 136,                    /* $@9  */
  YYSYMBOL_137_10 = 137,                   /* $@10  */
  YYSYMBOL_quantifier = 138,               /* quantifier  */
  YYSYMBOL_distinct_expression = 139,      /* distinct_expression  */
  YYSYMBOL_140_11 = 140,                   /* $@11  */
  YYSYMBOL_expression = 141,               /* expression  */
  YYSYMBOL_function_name = 142,            /* function_name  */
  YYSYMBOL_function_call = 143,            /* function_call  */
  YYSYMBOL_144_12 = 144,                   /* $@12  */
  YYSYMBOL_145_13 = 145,                   /* $@13  */
  YYSYMBOL_operator_unary = 146,           /* operator_unary  */
  YYSYMBOL_operator_binary = 147,          /* operator_binary  */
  YYSYMBOL_operator_ternary = 148,         /* operator_ternary  */
  YYSYMBOL_optional_function_call_arguments = 149, /* optional_function_call_arguments  */
  YYSYMBOL_expression_or_query = 150,      /* expression_or_query  */
  YYSYMBOL_151_14 = 151,                   /* $@14  */
  YYSYMBOL_function_arguments_list = 152,  /* function_arguments_list  */
  YYSYMBOL_compound_value = 153,           /* compound_value  */
  YYSYMBOL_array = 154,                    /* array  */
  YYSYMBOL_155_15 = 155,                   /* $@15  */
  YYSYMBOL_optional_array_elements = 156,  /* optional_array_elements  */
  YYSYMBOL_array_elements_list = 157,      /* array_elements_list  */
  YYSYMBOL_array_element = 158,            /* array_element  */
  YYSYMBOL_for_options = 159,              /* for_options  */
  YYSYMBOL_options = 160,                  /* options  */
  YYSYMBOL_object = 161,                   /* object  */
  YYSYMBOL_162_16 = 162,                   /* $@16  */
  YYSYMBOL_optional_object_elements = 163, /* optional_object_elements  */
  YYSYMBOL_object_elements_list = 164,     /* object_elements_list  */
  YYSYMBOL_object_element = 165,           /* object_element  */
  YYSYMBOL_array_filter_operator = 166,    /* array_filter_operator  */
  YYSYMBOL_optional_array_filter = 167,    /* optional_array_filter  */
  YYSYMBOL_optional_array_limit = 168,     /* optional_array_limit  */
  YYSYMBOL_optional_array_return = 169,    /* optional_array_return  */
  YYSYMBOL_graph_collection = 170,         /* graph_collection  */
  YYSYMBOL_graph_collection_list = 171,    /* graph_collection_list  */
  YYSYMBOL_graph_subject = 172,            /* graph_subject  */
  YYSYMBOL_173_17 = 173,                   /* $@17  */
  YYSYMBOL_graph_direction = 174,          /* graph_direction  */
  YYSYMBOL_graph_direction_steps = 175,    /* graph_direction_steps  */
  YYSYMBOL_reference = 176,                /* reference  */
  YYSYMBOL_177_18 = 177,                   /* $@18  */
  YYSYMBOL_178_19 = 178,                   /* $@19  */
  YYSYMBOL_simple_value = 179,             /* simple_value  */
  YYSYMBOL_numeric_value = 180,            /* numeric_value  */
  YYSYMBOL_value_literal = 181,            /* value_literal  */
  YYSYMBOL_in_or_into_collection_name = 182, /* in_or_into_collection_name  */
  YYSYMBOL_bind_parameter = 183,           /* bind_parameter  */
  YYSYMBOL_bind_parameter_datasource_expected = 184, /* bind_parameter_datasource_expected  */
  YYSYMBOL_object_element_name = 185,      /* object_element_name  */
  YYSYMBOL_variable_name = 186             /* variable_name  */
};
typedef enum yysymbol_kind_t yysymbol_kind_t;


/* Second part of user prologue.  */
#line 50 "Aql/grammar.y"


using namespace arangodb::aql;

#define scanner parser->scanner()

/// @brief forward for lexer function defined in Aql/tokens.ll
int Aqllex(YYSTYPE*, YYLTYPE*, void*);

/// @brief register parse error (this will also abort the currently running query)
void Aqlerror(YYLTYPE* locp,
              arangodb::aql::Parser* parser,
              char const* message) {
  parser->registerParseError(TRI_ERROR_QUERY_PARSE, message, locp->first_line, locp->first_column);
}

namespace {

bool caseInsensitiveEqual(std::string_view lhs, std::string_view rhs) noexcept {
  return std::equal(lhs.begin(), lhs.end(), rhs.begin(), rhs.end(), [](char l, char r) {
    return arangodb::basics::StringUtils::tolower(l) == arangodb::basics::StringUtils::tolower(r);
  });
}

AstNode* buildShortestPathInfo(Parser* parser,
                               char const* seperator,
                               AstNode* direction,
                               AstNode* startNode,
                               AstNode* endNode,
                               AstNode* graph,
                               AstNode* options,
                               YYLTYPE const& yyloc) {
  if (!caseInsensitiveEqual(seperator, "TO")) {
    parser->registerParseError(TRI_ERROR_QUERY_PARSE, "unexpected qualifier '%s', expecting 'TO'", seperator, yyloc.first_line, yyloc.first_column);
  }
  auto infoNode = parser->ast()->createNodeArray();
  infoNode->addMember(direction);
  infoNode->addMember(startNode);
  infoNode->addMember(endNode);
  infoNode->addMember(graph);
  
  auto opts = parser->ast()->createNodeOptions(options);
  TRI_ASSERT(opts != nullptr);
  infoNode->addMember(opts);
  return infoNode;
}

void checkOutVariables(Parser* parser,
                       AstNode const* variableNamesNode,
                       size_t minVariables, size_t maxVariables,
                       char const* errorMessage,
                       YYLTYPE const& yyloc) {
  TRI_ASSERT(variableNamesNode != nullptr);
  TRI_ASSERT(variableNamesNode->type == NODE_TYPE_ARRAY);
  if (variableNamesNode->numMembers() < minVariables ||
      variableNamesNode->numMembers() > maxVariables) {
    parser->registerParseError(TRI_ERROR_QUERY_PARSE, errorMessage, yyloc.first_line, yyloc.first_column);
  }
}

void validateOptions(Parser* parser, AstNode const* node,
                     int line, int column) {
  TRI_ASSERT(node != nullptr);
  if (!node->isObject()) {
    parser->registerParseError(TRI_ERROR_QUERY_PARSE, "'OPTIONS' have to be an object", line, column);
  }
  if (!node->isConstant()) {
    parser->registerParseError(TRI_ERROR_QUERY_COMPILE_TIME_OPTIONS, "'OPTIONS' have to be known at query compile time", line, column);
  }
}

/// @brief check if any of the variables used in the INTO expression were
/// introduced by the COLLECT itself, in which case it would fail
void checkIntoVariables(Parser* parser, AstNode const* expression,
                        int line, int column,
                        VarSet const& variablesIntroduced) {
  if (expression == nullptr) {
    return;
  }

  VarSet varsInAssignment{};
  Ast::getReferencedVariables(expression, varsInAssignment);

  for (auto const& it : varsInAssignment) {
    if (variablesIntroduced.find(it) != variablesIntroduced.end()) {
      std::string msg("use of COLLECT variable '" + it->name + "' inside same COLLECT's INTO expression");
      parser->registerParseError(TRI_ERROR_QUERY_VARIABLE_NAME_UNKNOWN, msg.c_str(), it->name, line, column);
      return;
    }
  }
}

/// @brief register variables in the scope
void registerAssignVariables(Parser* parser, arangodb::aql::Scopes* scopes,
                             int line, int column,
                             VarSet& variablesIntroduced,
                             AstNode const* vars) {
  size_t const n = vars->numMembers();

  for (size_t i = 0; i < n; ++i) {
    auto member = vars->getMemberUnchecked(i);

    if (member != nullptr) {
      TRI_ASSERT(member->type == NODE_TYPE_ASSIGN);
      // keep track of the variable for our assignment
      auto v = static_cast<Variable*>(member->getMember(0)->getData());
      scopes->addVariable(v);
      variablesIntroduced.emplace(v);
    }
  }
}

/// @brief validate the aggregate variables expressions
bool validateAggregates(Parser* parser, AstNode const* aggregates,
                        int line, int column) {
  VarSet variablesIntroduced{};
  VarSet varsInAssignment{};
  
  size_t const n = aggregates->numMembers();
  for (size_t i = 0; i < n; ++i) {
    auto member = aggregates->getMemberUnchecked(i);

    if (member != nullptr) {
      TRI_ASSERT(member->type == NODE_TYPE_ASSIGN);
      
      // keep track of the variable for our assignment
      auto v = static_cast<Variable*>(member->getMember(0)->getData());
      variablesIntroduced.emplace(v);

      auto func = member->getMember(1);
      if (func->type != NODE_TYPE_FCALL) {
        // aggregate expression must be a function call
        char const* error = "aggregate expression must be a function call";
        parser->registerParseError(TRI_ERROR_QUERY_INVALID_AGGREGATE_EXPRESSION, error, line, column);
        return false;
      }
      else {
        auto f = static_cast<arangodb::aql::Function*>(func->getData());
        if (!Aggregator::isValid(f->name)) {
          // aggregate expression must be a call to MIN|MAX|LENGTH...
          char const* error = "unknown aggregate function used";
          parser->registerParseError(TRI_ERROR_QUERY_INVALID_AGGREGATE_EXPRESSION, error, line, column);
          return false;
        }
      }
      
      // check if any of the assignment refers to a variable introduced by this very
      // same COLLECT, e.g. COLLECT aggregate x = .., y = x
      varsInAssignment.clear();
      Ast::getReferencedVariables(member->getMember(1), varsInAssignment);
      for (auto const& it : varsInAssignment) {
        if (variablesIntroduced.find(it) != variablesIntroduced.end()) {
          std::string msg("use of COLLECT variable '" + it->name + "' inside same COLLECT");
          parser->registerParseError(TRI_ERROR_QUERY_VARIABLE_NAME_UNKNOWN, msg.c_str(), it->name, line, column);
          return false;
        }
      }
    }
  }

  return true;
}


/// @brief validate the WINDOW specification
bool validateWindowSpec(Parser* parser, AstNode const* spec,
                        int line, int column) {
  bool preceding = false;
  bool following = false;
  
  size_t const n = spec->numMembers();
  if (n == 0) {
    parser->registerParseError(TRI_ERROR_QUERY_PARSE, "At least one WINDOW bound must be specified ('preceding'/'following')", line, column);
    return false;
  }
  
  for (size_t i = 0; i < n; ++i) {
    auto member = spec->getMemberUnchecked(i);

    if (member != nullptr) {
      TRI_ASSERT(member->type == NODE_TYPE_OBJECT_ELEMENT);
      bool* attr{};
      auto name = member->getString();
      if (name == "preceding") {
        attr = &preceding;
      } else if (name == "following") {
        attr = &following;
      } else  {
        char const* error = "Invalid WINDOW attribute '%s'; only \"preceding\" and \"following\" are supported";
        parser->registerParseError(TRI_ERROR_QUERY_PARSE, error, name, line, column);
        return false;
      }
      
      if (*attr) {
        char const* error = "WINDOW attribute '%s' is specified multiple times";
        parser->registerParseError(TRI_ERROR_QUERY_PARSE, error, name, line, column);
        return false;
      }
      
      // mark this attribute as "seen"
      *attr = true;
    }
  }
  return true;
}

/// @brief start a new scope for the collect
bool startCollectScope(arangodb::aql::Scopes* scopes) {
  // check if we are in the main scope
  if (scopes->type() == arangodb::aql::AQL_SCOPE_MAIN ||
      scopes->type() == arangodb::aql::AQL_SCOPE_SUBQUERY) {
    return false;
  }


  // end the active scopes
  scopes->endNested();
  // start a new scope
  scopes->start(arangodb::aql::AQL_SCOPE_COLLECT);
  return true;
}

/// @brief get the INTO variable stored in a node (may not exist)
AstNode const* getIntoVariable(Parser* parser, AstNode const* node) {
  if (node == nullptr) {
    return nullptr;
  }

  if (node->type == NODE_TYPE_VALUE) {
    // node is a string containing the variable name
    return parser->ast()->createNodeVariable(node->getStringView(), true);
  }

  // node is an array with the variable name as the first member
  TRI_ASSERT(node->type == NODE_TYPE_ARRAY);
  TRI_ASSERT(node->numMembers() == 2);

  auto v = node->getMember(0);
  TRI_ASSERT(v->type == NODE_TYPE_VALUE);
  return parser->ast()->createNodeVariable(v->getStringView(), true);
}

/// @brief get the INTO variable = expression stored in a node (may not exist)
AstNode const* getIntoExpression(AstNode const* node) {
  if (node == nullptr || node->type == NODE_TYPE_VALUE) {
    return nullptr;
  }

  // node is an array with the expression as the second member
  TRI_ASSERT(node->type == NODE_TYPE_ARRAY);
  TRI_ASSERT(node->numMembers() == 2);

  return node->getMember(1);
}

AstNode* transformOutputVariables(Parser* parser, AstNode const* names) {
  auto wrapperNode = parser->ast()->createNodeArray();
  for (size_t i = 0; i < names->numMembers(); ++i) {
    AstNode* variableNameNode = names->getMemberUnchecked(i);
    TRI_ASSERT(variableNameNode->isStringValue());
    AstNode* variableNode = parser->ast()->createNodeVariable(variableNameNode->getStringView(), true);
    wrapperNode->addMember(variableNode);
  }
  return wrapperNode;
}

} // namespace


#line 597 "Aql/grammar.cpp"


#ifdef short
# undef short
#endif

/* On compilers that do not define __PTRDIFF_MAX__ etc., make sure
   <limits.h> and (if available) <stdint.h> are included
   so that the code can choose integer types of a good width.  */

#ifndef __PTRDIFF_MAX__
# include <limits.h> /* INFRINGES ON USER NAME SPACE */
# if defined __STDC_VERSION__ && 199901 <= __STDC_VERSION__
#  include <stdint.h> /* INFRINGES ON USER NAME SPACE */
#  define YY_STDINT_H
# endif
#endif

/* Narrow types that promote to a signed type and that can represent a
   signed or unsigned integer of at least N bits.  In tables they can
   save space and decrease cache pressure.  Promoting to a signed type
   helps avoid bugs in integer arithmetic.  */

#ifdef __INT_LEAST8_MAX__
typedef __INT_LEAST8_TYPE__ yytype_int8;
#elif defined YY_STDINT_H
typedef int_least8_t yytype_int8;
#else
typedef signed char yytype_int8;
#endif

#ifdef __INT_LEAST16_MAX__
typedef __INT_LEAST16_TYPE__ yytype_int16;
#elif defined YY_STDINT_H
typedef int_least16_t yytype_int16;
#else
typedef short yytype_int16;
#endif

/* Work around bug in HP-UX 11.23, which defines these macros
   incorrectly for preprocessor constants.  This workaround can likely
   be removed in 2023, as HPE has promised support for HP-UX 11.23
   (aka HP-UX 11i v2) only through the end of 2022; see Table 2 of
   <https://h20195.www2.hpe.com/V2/getpdf.aspx/4AA4-7673ENW.pdf>.  */
#ifdef __hpux
# undef UINT_LEAST8_MAX
# undef UINT_LEAST16_MAX
# define UINT_LEAST8_MAX 255
# define UINT_LEAST16_MAX 65535
#endif

#if defined __UINT_LEAST8_MAX__ && __UINT_LEAST8_MAX__ <= __INT_MAX__
typedef __UINT_LEAST8_TYPE__ yytype_uint8;
#elif (!defined __UINT_LEAST8_MAX__ && defined YY_STDINT_H \
       && UINT_LEAST8_MAX <= INT_MAX)
typedef uint_least8_t yytype_uint8;
#elif !defined __UINT_LEAST8_MAX__ && UCHAR_MAX <= INT_MAX
typedef unsigned char yytype_uint8;
#else
typedef short yytype_uint8;
#endif

#if defined __UINT_LEAST16_MAX__ && __UINT_LEAST16_MAX__ <= __INT_MAX__
typedef __UINT_LEAST16_TYPE__ yytype_uint16;
#elif (!defined __UINT_LEAST16_MAX__ && defined YY_STDINT_H \
       && UINT_LEAST16_MAX <= INT_MAX)
typedef uint_least16_t yytype_uint16;
#elif !defined __UINT_LEAST16_MAX__ && USHRT_MAX <= INT_MAX
typedef unsigned short yytype_uint16;
#else
typedef int yytype_uint16;
#endif

#ifndef YYPTRDIFF_T
# if defined __PTRDIFF_TYPE__ && defined __PTRDIFF_MAX__
#  define YYPTRDIFF_T __PTRDIFF_TYPE__
#  define YYPTRDIFF_MAXIMUM __PTRDIFF_MAX__
# elif defined PTRDIFF_MAX
#  ifndef ptrdiff_t
#   include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  endif
#  define YYPTRDIFF_T ptrdiff_t
#  define YYPTRDIFF_MAXIMUM PTRDIFF_MAX
# else
#  define YYPTRDIFF_T long
#  define YYPTRDIFF_MAXIMUM LONG_MAX
# endif
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif defined __STDC_VERSION__ && 199901 <= __STDC_VERSION__
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned
# endif
#endif

#define YYSIZE_MAXIMUM                                  \
  YY_CAST (YYPTRDIFF_T,                                 \
           (YYPTRDIFF_MAXIMUM < YY_CAST (YYSIZE_T, -1)  \
            ? YYPTRDIFF_MAXIMUM                         \
            : YY_CAST (YYSIZE_T, -1)))

#define YYSIZEOF(X) YY_CAST (YYPTRDIFF_T, sizeof (X))


/* Stored state numbers (used for stacks). */
typedef yytype_int16 yy_state_t;

/* State numbers in computations.  */
typedef int yy_state_fast_t;

#ifndef YY_
# if defined YYENABLE_NLS && YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(Msgid) dgettext ("bison-runtime", Msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(Msgid) Msgid
# endif
#endif


#ifndef YY_ATTRIBUTE_PURE
# if defined __GNUC__ && 2 < __GNUC__ + (96 <= __GNUC_MINOR__)
#  define YY_ATTRIBUTE_PURE __attribute__ ((__pure__))
# else
#  define YY_ATTRIBUTE_PURE
# endif
#endif

#ifndef YY_ATTRIBUTE_UNUSED
# if defined __GNUC__ && 2 < __GNUC__ + (7 <= __GNUC_MINOR__)
#  define YY_ATTRIBUTE_UNUSED __attribute__ ((__unused__))
# else
#  define YY_ATTRIBUTE_UNUSED
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YY_USE(E) ((void) (E))
#else
# define YY_USE(E) /* empty */
#endif

#if defined __GNUC__ && ! defined __ICC && 407 <= __GNUC__ * 100 + __GNUC_MINOR__
/* Suppress an incorrect diagnostic about yylval being uninitialized.  */
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN                            \
    _Pragma ("GCC diagnostic push")                                     \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")              \
    _Pragma ("GCC diagnostic ignored \"-Wmaybe-uninitialized\"")
# define YY_IGNORE_MAYBE_UNINITIALIZED_END      \
    _Pragma ("GCC diagnostic pop")
#else
# define YY_INITIAL_VALUE(Value) Value
#endif
#ifndef YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_END
#endif
#ifndef YY_INITIAL_VALUE
# define YY_INITIAL_VALUE(Value) /* Nothing. */
#endif

#if defined __cplusplus && defined __GNUC__ && ! defined __ICC && 6 <= __GNUC__
# define YY_IGNORE_USELESS_CAST_BEGIN                          \
    _Pragma ("GCC diagnostic push")                            \
    _Pragma ("GCC diagnostic ignored \"-Wuseless-cast\"")
# define YY_IGNORE_USELESS_CAST_END            \
    _Pragma ("GCC diagnostic pop")
#endif
#ifndef YY_IGNORE_USELESS_CAST_BEGIN
# define YY_IGNORE_USELESS_CAST_BEGIN
# define YY_IGNORE_USELESS_CAST_END
#endif


#define YY_ASSERT(E) ((void) (0 && (E)))

#if 1

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined EXIT_SUCCESS
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
      /* Use EXIT_SUCCESS as a witness for stdlib.h.  */
#     ifndef EXIT_SUCCESS
#      define EXIT_SUCCESS 0
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's 'empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined EXIT_SUCCESS \
       && ! ((defined YYMALLOC || defined malloc) \
             && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef EXIT_SUCCESS
#    define EXIT_SUCCESS 0
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined EXIT_SUCCESS
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined EXIT_SUCCESS
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* 1 */

#if (! defined yyoverflow \
     && (! defined __cplusplus \
         || (defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL \
             && defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yy_state_t yyss_alloc;
  YYSTYPE yyvs_alloc;
  YYLTYPE yyls_alloc;
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (YYSIZEOF (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (YYSIZEOF (yy_state_t) + YYSIZEOF (YYSTYPE) \
             + YYSIZEOF (YYLTYPE)) \
      + 2 * YYSTACK_GAP_MAXIMUM)

# define YYCOPY_NEEDED 1

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack_alloc, Stack)                           \
    do                                                                  \
      {                                                                 \
        YYPTRDIFF_T yynewbytes;                                         \
        YYCOPY (&yyptr->Stack_alloc, Stack, yysize);                    \
        Stack = &yyptr->Stack_alloc;                                    \
        yynewbytes = yystacksize * YYSIZEOF (*Stack) + YYSTACK_GAP_MAXIMUM; \
        yyptr += yynewbytes / YYSIZEOF (*yyptr);                        \
      }                                                                 \
    while (0)

#endif

#if defined YYCOPY_NEEDED && YYCOPY_NEEDED
/* Copy COUNT objects from SRC to DST.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(Dst, Src, Count) \
      __builtin_memcpy (Dst, Src, YY_CAST (YYSIZE_T, (Count)) * sizeof (*(Src)))
#  else
#   define YYCOPY(Dst, Src, Count)              \
      do                                        \
        {                                       \
          YYPTRDIFF_T yyi;                      \
          for (yyi = 0; yyi < (Count); yyi++)   \
            (Dst)[yyi] = (Src)[yyi];            \
        }                                       \
      while (0)
#  endif
# endif
#endif /* !YYCOPY_NEEDED */

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  7
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   1657

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  78
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  109
/* YYNRULES -- Number of rules.  */
#define YYNRULES  254
/* YYNSTATES -- Number of states.  */
#define YYNSTATES  429

/* YYMAXUTOK -- Last valid token kind.  */
#define YYMAXUTOK   331


/* YYTRANSLATE(TOKEN-NUM) -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex, with out-of-bounds checking.  */
#define YYTRANSLATE(YYX)                                \
  (0 <= (YYX) && (YYX) <= YYMAXUTOK                     \
   ? YY_CAST (yysymbol_kind_t, yytranslate[YYX])        \
   : YYSYMBOL_YYUNDEF)

/* YYTRANSLATE[TOKEN-NUM] -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex.  */
static const yytype_int8 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,    77,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76
};

#if YYDEBUG
  /* YYRLINE[YYN] -- Source line where rule number YYN was defined.  */
static const yytype_int16 yyrline[] =
{
       0,   504,   504,   510,   520,   523,   529,   533,   537,   544,
     546,   546,   558,   563,   568,   570,   573,   576,   579,   582,
     588,   590,   595,   597,   599,   601,   603,   605,   607,   609,
     611,   613,   615,   617,   622,   629,   636,   642,   649,   673,
     696,   709,   715,   721,   727,   727,   778,   778,   812,   824,
     836,   851,   859,   864,   866,   871,   878,   889,   889,   900,
     910,   923,   947,  1003,  1022,  1049,  1051,  1056,  1063,  1066,
    1069,  1078,  1091,  1107,  1107,  1122,  1122,  1132,  1134,  1139,
    1146,  1146,  1158,  1158,  1169,  1172,  1178,  1184,  1187,  1190,
    1193,  1199,  1204,  1211,  1226,  1244,  1252,  1255,  1261,  1271,
    1281,  1289,  1300,  1305,  1313,  1324,  1329,  1332,  1338,  1342,
    1338,  1409,  1412,  1415,  1421,  1421,  1431,  1437,  1440,  1443,
    1446,  1449,  1452,  1458,  1461,  1474,  1474,  1483,  1483,  1493,
    1496,  1499,  1505,  1508,  1511,  1514,  1517,  1520,  1523,  1526,
    1529,  1532,  1535,  1538,  1541,  1544,  1547,  1550,  1557,  1564,
    1570,  1576,  1582,  1589,  1592,  1595,  1598,  1601,  1604,  1607,
    1610,  1614,  1618,  1625,  1628,  1634,  1636,  1641,  1644,  1644,
    1660,  1663,  1669,  1672,  1678,  1678,  1687,  1689,  1691,  1696,
    1698,  1703,  1709,  1712,  1737,  1757,  1760,  1775,  1775,  1784,
    1786,  1788,  1793,  1795,  1800,  1816,  1820,  1830,  1837,  1840,
    1846,  1849,  1855,  1858,  1861,  1867,  1870,  1876,  1879,  1882,
    1886,  1892,  1896,  1903,  1909,  1909,  1918,  1922,  1926,  1935,
    1938,  1941,  1947,  1950,  1956,  1989,  1992,  1995,  1999,  2008,
    2008,  2021,  2036,  2049,  2062,  2062,  2103,  2106,  2112,  2116,
    2123,  2126,  2129,  2132,  2135,  2141,  2146,  2151,  2162,  2170,
    2177,  2185,  2192,  2195,  2200
};
#endif

/** Accessing symbol of state STATE.  */
#define YY_ACCESSING_SYMBOL(State) YY_CAST (yysymbol_kind_t, yystos[State])

#if 1
/* The user-facing name of the symbol whose (internal) number is
   YYSYMBOL.  No bounds checking.  */
static const char *yysymbol_name (yysymbol_kind_t yysymbol) YY_ATTRIBUTE_UNUSED;

/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "\"end of query string\"", "error", "\"invalid token\"",
  "\"FOR declaration\"", "\"LET declaration\"", "\"FILTER declaration\"",
  "\"RETURN declaration\"", "\"COLLECT declaration\"",
  "\"SORT declaration\"", "\"LIMIT declaration\"",
  "\"WINDOW declaration\"", "\"ASC keyword\"", "\"DESC keyword\"",
  "\"IN keyword\"", "\"WITH keyword\"", "\"INTO keyword\"",
  "\"AGGREGATE keyword\"", "\"GRAPH keyword\"",
  "\"SHORTEST_PATH keyword\"", "\"K_SHORTEST_PATHS keyword\"",
  "\"K_PATHS keyword\"", "\"DISTINCT modifier\"", "\"REMOVE command\"",
  "\"INSERT command\"", "\"UPDATE command\"", "\"REPLACE command\"",
  "\"UPSERT command\"", "\"null\"", "\"true\"", "\"false\"",
  "\"identifier\"", "\"quoted string\"", "\"integer number\"",
  "\"number\"", "\"bind parameter\"", "\"bind data source parameter\"",
  "\"assignment\"", "\"not operator\"", "\"and operator\"",
  "\"or operator\"", "\"~= operator\"", "\"~! operator\"",
  "\"== operator\"", "\"!= operator\"", "\"< operator\"", "\"> operator\"",
  "\"<= operator\"", "\">= operator\"", "\"like operator\"",
  "\"+ operator\"", "\"- operator\"", "\"* operator\"", "\"/ operator\"",
  "\"% operator\"", "\"?\"", "\":\"", "\"::\"", "\"..\"", "\",\"", "\"(\"",
  "\")\"", "\"{\"", "\"}\"", "\"[\"", "\"]\"", "\"outbound modifier\"",
  "\"inbound modifier\"", "\"any modifier\"", "\"all modifier\"",
  "\"none modifier\"", "UMINUS", "UPLUS", "UNEGATION", "FUNCCALL",
  "REFERENCE", "INDEXED", "EXPANSION", "'.'", "$accept",
  "optional_prune_variable", "with_collection", "with_collection_list",
  "optional_with", "$@1", "queryStart", "query", "final_statement",
  "optional_statement_block_statements", "statement_block_statement",
  "more_output_variables", "for_output_variables", "prune_and_options",
  "traversal_graph_info", "shortest_path_graph_info",
  "k_shortest_paths_graph_info", "k_paths_graph_info", "for_statement",
  "$@2", "$@3", "filter_statement", "let_statement", "let_list",
  "let_element", "count_into", "collect_variable_list", "$@4",
  "collect_statement", "collect_list", "collect_element",
  "collect_optional_into", "variable_list", "keep", "$@5", "aggregate",
  "$@6", "aggregate_list", "aggregate_element", "aggregate_function_call",
  "$@7", "sort_statement", "$@8", "sort_list", "sort_element",
  "sort_direction", "limit_statement", "window_statement",
  "return_statement", "in_or_into_collection", "remove_statement",
  "insert_statement", "update_parameters", "update_statement",
  "replace_parameters", "replace_statement", "update_or_replace",
  "upsert_statement", "$@9", "$@10", "quantifier", "distinct_expression",
  "$@11", "expression", "function_name", "function_call", "$@12", "$@13",
  "operator_unary", "operator_binary", "operator_ternary",
  "optional_function_call_arguments", "expression_or_query", "$@14",
  "function_arguments_list", "compound_value", "array", "$@15",
  "optional_array_elements", "array_elements_list", "array_element",
  "for_options", "options", "object", "$@16", "optional_object_elements",
  "object_elements_list", "object_element", "array_filter_operator",
  "optional_array_filter", "optional_array_limit", "optional_array_return",
  "graph_collection", "graph_collection_list", "graph_subject", "$@17",
  "graph_direction", "graph_direction_steps", "reference", "$@18", "$@19",
  "simple_value", "numeric_value", "value_literal",
  "in_or_into_collection_name", "bind_parameter",
  "bind_parameter_datasource_expected", "object_element_name",
  "variable_name", YY_NULLPTR
};

static const char *
yysymbol_name (yysymbol_kind_t yysymbol)
{
  return yytname[yysymbol];
}
#endif

#ifdef YYPRINT
/* YYTOKNUM[NUM] -- (External) token number corresponding to the
   (internal) symbol number NUM (which must be that of a token).  */
static const yytype_int16 yytoknum[] =
{
       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,    46
};
#endif

#define YYPACT_NINF (-370)

#define yypact_value_is_default(Yyn) \
  ((Yyn) == YYPACT_NINF)

#define YYTABLE_NINF (-255)

#define yytable_value_is_error(Yyn) \
  0

  /* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
     STATE-NUM.  */
static const yytype_int16 yypact[] =
{
      27,  -370,  -370,    36,   141,  -370,   414,  -370,  -370,  -370,
    -370,  -370,     4,  -370,    16,    16,  1520,   124,   170,  -370,
    1520,  1520,  1520,  1520,  1520,  1520,  -370,  -370,  -370,  -370,
    -370,  -370,   116,  -370,  -370,  -370,  -370,  -370,    21,    26,
      37,    64,    65,   141,  -370,  -370,    -1,    45,  -370,     9,
    -370,    40,  -370,  -370,  -370,   -26,  -370,  -370,  -370,  -370,
    -370,  1520,    12,  1520,  1520,  1520,  -370,  -370,  1188,    35,
    -370,  -370,  -370,  -370,  -370,  -370,  -370,    63,  -370,  -370,
    -370,  -370,  -370,  1188,    42,  -370,    68,    16,   106,  1520,
     682,   724,   112,   767,   767,  -370,   507,  -370,   552,  1520,
      16,    68,   104,   106,  -370,    16,  1368,    16,  1520,  -370,
    -370,  -370,  -370,   809,  -370,    22,  1520,  1520,     2,  1520,
    1520,  1520,  1520,  1520,  1520,  1520,  1520,  1520,  1520,  1520,
    1520,  1520,  1520,  1520,  1520,  1409,  1520,    99,   109,   131,
     120,   119,  -370,  1446,   147,  1520,   164,    16,   132,  -370,
     137,  -370,   161,    68,   149,  -370,   420,  1520,   132,  -370,
    1557,    39,    68,    68,  1520,    68,  1520,    68,  1188,   169,
    -370,   132,    68,  -370,    68,  -370,  -370,  -370,  -370,  -370,
    -370,  -370,  -370,   594,   194,  1314,  -370,  1188,  1483,  -370,
     165,   181,  -370,   191,  1520,   186,   173,  -370,   196,  1188,
     185,   207,  -370,   177,  1520,  1520,  1520,  1520,  1271,  1230,
    1337,  1337,  1337,  1337,   190,   190,   190,   190,  1337,   211,
     211,  -370,  -370,  -370,  1520,   851,   237,   239,   254,   255,
    1520,  1520,  1520,  1520,  1520,  1520,  1520,  -370,  1483,  -370,
     894,   226,  -370,  -370,  1188,    16,   220,  -370,   245,  -370,
      16,  1520,  -370,  1520,  -370,  -370,  -370,  -370,  -370,  -370,
    1188,   112,   250,   343,   386,  -370,  -370,  -370,  -370,  -370,
    -370,  -370,   767,  -370,   767,  -370,   259,  1520,    16,  -370,
    -370,   268,   157,   269,  -370,  1520,  1520,  1520,   462,  1188,
     224,  -370,  -370,   242,  -370,  1520,   936,  -370,    22,  1520,
    -370,  1520,   177,  1337,  1337,  1337,  1188,  1520,  1520,  1520,
    1520,   177,  1337,  1337,   190,   190,   190,   190,   241,  -370,
    -370,   297,  -370,    16,   273,  -370,  1188,  -370,  -370,    68,
      68,  1520,  1188,   246,  -370,  1594,  -370,  1520,  -370,   978,
    1020,  1062,   108,  -370,   247,  -370,   176,  -370,  -370,  -370,
    1520,  1188,   252,  -370,  1188,  -370,  1188,   177,   177,   177,
    -370,  1520,   303,  -370,  -370,  -370,    43,  -370,  -370,   640,
      16,    -5,   283,  1188,   278,  1104,  1520,  1520,  1520,  -370,
    -370,  -370,  -370,  -370,  -370,  -370,  1520,  1188,  1520,   310,
    -370,  -370,  -370,  1520,  -370,   132,  1520,  1520,   462,   462,
     462,    -6,  1188,  1146,  1520,   253,  1483,   767,  -370,  1188,
    1188,    68,    68,    68,  -370,   260,  1520,  1188,  -370,   262,
      68,  -370,  -370,  -370,    -6,  1188,  -370,  -370,  -370
};

  /* YYDEFACT[STATE-NUM] -- Default reduction number in state STATE-NUM.
     Performed when YYTABLE does not specify something else to do.  Zero
     means the default is an error.  */
static const yytype_uint8 yydefact[] =
{
       9,    10,    20,     0,     0,    12,     0,     1,     4,   251,
     250,     6,    11,     5,     0,     0,     0,     0,    57,    82,
       0,     0,     0,     0,     0,     0,   108,    13,    21,    22,
      24,    23,    68,    25,    26,    27,    28,    14,    29,    30,
      31,    32,    33,     0,     8,   254,    36,     0,    34,    52,
      53,     0,   242,   243,   244,   224,   240,   238,   239,   249,
     248,     0,     0,     0,     0,   229,   187,   174,    51,     0,
     227,   117,   118,   119,   225,   172,   173,   121,   241,   120,
     226,   114,    95,   116,     0,    75,   185,     0,    68,     0,
      91,     0,   173,     0,     0,   102,     0,   105,     0,     0,
       0,   185,   185,    68,     7,     0,     0,     0,     0,   131,
     127,   129,   130,     0,    20,   189,   176,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   112,   111,   113,
       0,     0,   125,     0,     0,     0,     0,     0,     0,    59,
      58,    65,     0,   185,    83,    84,    87,     0,     0,    93,
       0,     0,   185,   185,     0,   185,     0,   185,   109,    69,
      60,    73,   185,    63,   185,    35,   219,   220,   221,    46,
      48,    49,    50,    44,   222,     0,    54,    55,   168,   228,
       0,   194,   253,     0,     0,     0,   190,   192,     0,   181,
       0,   177,   179,   145,     0,     0,     0,     0,   133,   132,
     151,   152,   139,   140,   141,   142,   143,   144,   150,   134,
     135,   136,   137,   138,     0,     0,   122,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   124,   168,   198,
       0,   234,   231,   232,   115,     0,    76,    77,     0,   186,
       0,     0,    61,     0,    88,    89,    86,    90,   236,   237,
      92,     0,   224,   240,   248,    96,   245,   246,   247,    97,
      98,    99,     0,   100,     0,   103,     0,     0,     0,    64,
      62,    37,   221,   182,   223,     0,     0,     0,     0,   167,
       0,   170,    20,   166,   230,     0,     0,   188,   191,     0,
     175,   178,   146,   148,   149,   147,   164,     0,     0,     0,
       0,   159,   153,   154,   155,   156,   157,   158,     0,   233,
     199,   200,    56,     0,     0,    66,    67,    85,    94,   185,
     185,     0,    70,    74,    71,     0,    47,     0,    45,     0,
       0,     0,     0,   207,   213,    40,     0,   208,   128,   169,
     168,   196,     0,   193,   195,   180,   163,   161,   160,   162,
     126,     0,   202,    78,   123,    79,     0,   101,   104,     0,
       0,   224,    38,     2,     0,   183,     0,     0,     0,   218,
     217,   216,   214,   209,   210,   171,     0,   201,     0,   205,
      80,   106,   107,     0,    72,     0,     0,     0,     0,     0,
       0,     0,   197,   203,     0,     0,   168,     0,    39,     3,
     184,   185,   185,   185,   211,   215,     0,   206,   235,     0,
     185,    41,    42,    43,     0,   204,    81,   110,   212
};

  /* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
    -370,  -370,     1,  -370,  -370,  -370,  -370,  -100,  -370,  -370,
    -370,  -370,  -370,  -370,  -370,  -370,  -370,  -370,  -370,  -370,
    -370,  -370,  -370,  -370,   213,   292,  -370,  -370,  -370,  -370,
      75,   -63,  -370,  -370,  -370,   -29,  -370,  -370,     6,  -370,
    -370,  -370,  -370,  -370,    77,  -370,  -370,  -370,  -370,   -76,
    -370,  -370,  -370,  -370,  -370,  -370,  -370,  -370,  -370,  -370,
    -370,  -370,  -370,   -16,     8,  -370,  -370,  -370,  -370,  -370,
    -370,  -226,   -17,  -370,  -370,  -370,  -370,  -370,  -370,  -370,
      33,  -370,   -85,   -11,  -370,  -370,  -370,    38,  -370,  -370,
    -370,  -370,  -369,  -370,  -103,  -370,   -87,  -370,  -370,  -370,
    -370,  -370,  -370,   182,   178,  -133,    23,  -370,   -12
};

  /* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
       0,   372,    11,    12,     2,     4,     3,     5,    27,     6,
      28,    46,    47,   336,   179,   180,   181,   182,    29,   283,
     281,    30,    31,    49,    50,    86,    32,    87,    33,   150,
     151,   102,   333,   172,   278,    88,   147,   246,   247,   365,
     406,    34,    89,   154,   155,   256,    35,    36,    37,   162,
      38,    39,    95,    40,    97,    41,   393,    42,    99,   276,
     140,    82,   145,   289,    69,    70,   238,   188,    71,    72,
      73,   290,   291,   292,   293,    74,    75,   116,   200,   201,
     202,   338,   149,    76,   115,   195,   196,   197,   241,   362,
     389,   405,   344,   415,   345,   401,   346,   185,    77,   114,
     321,   257,    78,    79,   265,    80,   347,   198,    51
};

  /* YYTABLE[YYPACT[STATE-NUM]] -- What to do in state STATE-NUM.  If
     positive, shift that token.  If negative, reduce the rule whose
     number is the opposite.  If YYTABLE_NINF, syntax error.  */
static const yytype_int16 yytable[] =
{
      68,    83,    48,   103,    90,    91,    93,    94,    96,    98,
      92,   243,   318,    44,   190,   204,   170,   173,   163,   184,
     165,   -15,   167,   259,   343,   153,   -16,    13,     9,    10,
    -123,  -254,   414,  -123,     8,    13,     7,   -17,     9,    10,
     174,     1,   205,   206,   104,   109,    45,   111,   112,   113,
     207,  -123,   191,   192,  -123,   428,   193,   105,   106,   176,
     177,   178,    43,   159,   -18,   -19,    13,   107,   252,   266,
     267,   110,   146,   156,   268,   152,   108,   270,   271,   -15,
     273,   -15,   275,   168,   -16,   194,   -16,   279,   169,   280,
     183,   141,   187,   175,   142,   -17,   284,   -17,   148,   141,
     199,   203,   390,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   225,
     226,   100,   -18,   -19,   -18,   -19,   143,   240,    85,   244,
      84,   100,    85,   230,   171,   248,   227,   249,   379,   380,
     144,   260,    59,    60,   203,    81,   228,   261,   272,   237,
     274,    52,    53,    54,    55,    56,    57,    58,    59,    60,
     249,    61,   231,   232,   233,   234,   235,   236,   229,   288,
    -112,     8,    62,    63,    64,     9,    10,   242,   296,   245,
     419,    59,    60,    65,    84,    66,    85,    67,   302,   303,
     304,   305,   349,    66,   227,   250,   329,   251,   330,  -112,
    -112,  -112,  -112,  -112,  -112,   277,   383,   253,   306,   381,
      59,    60,   285,   384,   311,   312,   313,   314,   315,   316,
     317,   125,   126,   127,   128,   294,   130,   131,   132,   133,
     134,   298,   328,   322,   136,   326,  -252,   156,   152,   130,
     131,   132,   133,   134,   367,   368,   295,   136,   297,   300,
    -245,   299,   308,  -245,  -245,  -245,  -245,  -245,  -245,  -245,
    -245,   332,   132,   133,   134,   301,   334,   309,   310,   339,
     340,   341,  -245,  -245,  -245,  -245,  -245,   320,   323,   351,
    -245,   324,   331,   354,   348,   199,   130,   131,   132,   133,
     134,   356,   357,   358,   359,   411,   412,   413,   335,   337,
     350,   360,   361,   364,   370,   382,  -123,   386,  -245,  -123,
    -245,   248,   388,   395,   396,   369,   404,   418,   424,   373,
     186,   375,   426,   374,   101,   325,   421,   422,   423,   363,
     327,   420,   366,   385,   355,   427,   353,     0,   258,   269,
       0,     0,     0,  -246,     0,   387,  -246,  -246,  -246,  -246,
    -246,  -246,  -246,  -246,     0,     0,     0,     0,   394,     0,
     398,   399,   400,     0,     0,  -246,  -246,  -246,  -246,  -246,
     402,     0,   403,  -246,     0,     0,     0,   407,     0,     0,
     409,   410,     0,     0,   408,     0,  -247,     0,   417,  -247,
    -247,  -247,  -247,  -247,  -247,  -247,  -247,     0,     0,     0,
     425,  -246,     0,  -246,     0,     0,     0,     0,  -247,  -247,
    -247,  -247,  -247,     0,     0,     0,  -247,    14,    15,    16,
      17,    18,    19,    20,    21,     0,     0,     0,     0,     0,
       0,   254,   255,   117,     0,     0,    22,    23,    24,    25,
      26,     0,     0,     0,  -247,     0,  -247,    52,    53,    54,
       0,    56,    57,    58,    59,    60,     0,   118,   119,   120,
     121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
     131,   132,   133,   134,   135,   117,     0,   136,     0,   342,
       0,     0,     0,     0,     0,     0,     0,   137,   138,   139,
       0,     0,   343,     0,     0,     0,     9,    10,     0,   118,
     119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
     129,   130,   131,   132,   133,   134,   135,     0,     0,   136,
     160,   164,   161,     0,     0,     0,     0,   176,   177,   282,
     138,   139,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   118,   119,   120,   121,   122,   123,
     124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
     134,   135,     0,     0,   136,   160,   166,   161,     0,     0,
       0,     0,     0,     0,   137,   138,   139,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   118,
     119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
     129,   130,   131,   132,   133,   134,   135,   117,     0,   136,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   137,
     138,   139,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   118,   119,   120,   121,   122,   123,   124,   125,   126,
     127,   128,   129,   130,   131,   132,   133,   134,   135,     0,
       0,   136,     0,   117,     0,     0,     0,     0,     0,   176,
     177,   282,   138,   139,   391,   392,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   118,   119,   120,
     121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
     131,   132,   133,   134,   135,   117,     0,   136,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   137,   138,   139,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   118,
     119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
     129,   130,   131,   132,   133,   134,   135,   117,   158,   136,
     157,     0,     0,     0,     0,     0,     0,     0,     0,   137,
     138,   139,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   118,   119,   120,   121,   122,   123,   124,   125,   126,
     127,   128,   129,   130,   131,   132,   133,   134,   135,     0,
     160,   136,   161,     0,     0,     0,     0,     0,     0,     0,
       0,   137,   138,   139,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   118,   119,   120,   121,   122,   123,
     124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
     134,   135,   117,     0,   136,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   137,   138,   139,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   118,   119,   120,   121,
     122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
     132,   133,   134,   135,   117,     0,   136,     0,     0,   189,
       0,     0,     0,     0,     0,     0,   137,   138,   139,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   118,   119,
     120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
     130,   131,   132,   133,   134,   135,   307,   117,   136,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   137,   138,
     139,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   118,   119,   120,   121,   122,   123,   124,   125,   126,
     127,   128,   129,   130,   131,   132,   133,   134,   135,   117,
       0,   136,     0,     0,     0,     0,     0,     0,   319,     0,
       0,   137,   138,   139,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   117,     0,   136,     0,     0,     0,     0,     0,     0,
     352,     0,     0,   137,   138,   139,     0,     0,   376,     0,
       0,     0,     0,     0,     0,   118,   119,   120,   121,   122,
     123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
     133,   134,   135,   117,     0,   136,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   137,   138,   139,     0,     0,
     377,     0,     0,     0,     0,     0,     0,   118,   119,   120,
     121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
     131,   132,   133,   134,   135,   117,     0,   136,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   137,   138,   139,
       0,     0,   378,     0,     0,     0,     0,     0,     0,   118,
     119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
     129,   130,   131,   132,   133,   134,   135,   117,     0,   136,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   137,
     138,   139,     0,     0,   397,     0,     0,     0,     0,     0,
       0,   118,   119,   120,   121,   122,   123,   124,   125,   126,
     127,   128,   129,   130,   131,   132,   133,   134,   135,   117,
       0,   136,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   137,   138,   139,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   117,     0,   136,   416,     0,     0,     0,     0,     0,
       0,     0,     0,   137,   138,   139,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   118,   119,   120,   121,   122,
     123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
     133,   134,   135,   117,     0,   136,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   137,   138,   139,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   118,   119,     0,
     121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
     131,   132,   133,   134,   117,     0,     0,   136,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   137,   138,   139,
       0,     0,     0,     0,     0,     0,     0,     0,   118,     0,
       0,   121,   122,   123,   124,   125,   126,   127,   128,   129,
     130,   131,   132,   133,   134,     0,     0,     0,   136,     0,
       0,     0,     0,   286,   287,     0,     0,     0,   137,   138,
     139,    52,    53,    54,    55,    56,    57,    58,    59,    60,
     117,    61,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    62,    63,    64,     0,     0,     0,     0,     0,
       0,     0,     0,    65,   118,    66,     0,    67,     0,     0,
       0,   125,   126,   127,   128,     0,   130,   131,   132,   133,
     134,     0,     0,     0,   136,    52,    53,    54,    55,    56,
      57,    58,    59,    60,     0,    61,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    62,    63,    64,     0,
       0,     0,     0,     0,     0,     0,     0,    65,     0,    66,
       0,    67,     0,   176,   177,   178,    52,    53,    54,    55,
      56,    57,    58,    59,    60,     0,    61,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    62,    63,    64,
       0,     0,     0,     0,   224,     0,     0,     0,    65,     0,
      66,     0,    67,    52,    53,    54,    55,    56,    57,    58,
      59,    60,     0,    61,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    62,    63,    64,   239,     0,     0,
       0,     0,     0,     0,     0,    65,     0,    66,     0,    67,
      52,    53,    54,    55,    56,    57,    58,    59,    60,     0,
      61,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    62,    63,    64,     0,     0,     0,     0,     0,     0,
       0,     0,    65,  -165,    66,     0,    67,    52,    53,    54,
      55,    56,    57,    58,    59,    60,     0,    61,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    62,    63,
      64,     0,     0,     0,     0,     0,     0,     0,     0,    65,
       0,    66,     0,    67,    52,    53,    54,   262,   263,    57,
      58,    59,   264,     0,    61,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    62,    63,    64,     0,     0,
       0,     0,     0,     0,     0,     0,    65,     0,    66,     0,
      67,    52,    53,    54,   371,    56,    57,    58,    59,    60,
       0,    61,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    62,    63,    64,     0,     0,     0,     0,     0,
       0,     0,     0,    65,     0,    66,     0,    67
};

static const yytype_int16 yycheck[] =
{
      16,    17,    14,    32,    20,    21,    22,    23,    24,    25,
      21,   144,   238,    12,   114,    13,   101,   102,    94,   106,
      96,     0,    98,   156,    30,    88,     0,     4,    34,    35,
      56,    36,   401,    59,    30,    12,     0,     0,    34,    35,
     103,    14,    40,    41,    43,    61,    30,    63,    64,    65,
      48,    56,    30,    31,    59,   424,    34,    58,    13,    65,
      66,    67,    58,    92,     0,     0,    43,    58,   153,    30,
      31,    59,    30,    89,    35,    87,    36,   162,   163,    58,
     165,    60,   167,    99,    58,    63,    60,   172,   100,   174,
     106,    56,   108,   105,    59,    58,   183,    60,    30,    56,
     116,   117,    59,   119,   120,   121,   122,   123,   124,   125,
     126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
     136,    15,    58,    58,    60,    60,    63,   143,    16,   145,
      14,    15,    16,    13,    30,   147,    37,   148,    30,    31,
      77,   157,    34,    35,   160,    21,    37,   158,   164,    30,
     166,    27,    28,    29,    30,    31,    32,    33,    34,    35,
     171,    37,    42,    43,    44,    45,    46,    47,    37,   185,
      13,    30,    48,    49,    50,    34,    35,    30,   194,    15,
     406,    34,    35,    59,    14,    61,    16,    63,   204,   205,
     206,   207,   292,    61,    37,    58,   272,    36,   274,    42,
      43,    44,    45,    46,    47,    36,    30,    58,   224,   342,
      34,    35,    18,   346,   230,   231,   232,   233,   234,   235,
     236,    44,    45,    46,    47,    60,    49,    50,    51,    52,
      53,    58,   261,   245,    57,   251,    55,   253,   250,    49,
      50,    51,    52,    53,   329,   330,    55,    57,    62,    64,
       0,    55,    13,     3,     4,     5,     6,     7,     8,     9,
      10,   277,    51,    52,    53,    58,   278,    13,    13,   285,
     286,   287,    22,    23,    24,    25,    26,    51,    58,   295,
      30,    36,    23,   299,    60,   301,    49,    50,    51,    52,
      53,   307,   308,   309,   310,   398,   399,   400,    30,    30,
      58,    60,     5,    30,    58,    58,    56,    55,    58,    59,
      60,   323,     9,    30,    36,   331,     6,    64,    58,   335,
     107,   337,    60,   335,    32,   250,   411,   412,   413,   323,
     253,   407,   324,   350,   301,   420,   298,    -1,   156,   161,
      -1,    -1,    -1,     0,    -1,   361,     3,     4,     5,     6,
       7,     8,     9,    10,    -1,    -1,    -1,    -1,   370,    -1,
     376,   377,   378,    -1,    -1,    22,    23,    24,    25,    26,
     386,    -1,   388,    30,    -1,    -1,    -1,   393,    -1,    -1,
     396,   397,    -1,    -1,   395,    -1,     0,    -1,   404,     3,
       4,     5,     6,     7,     8,     9,    10,    -1,    -1,    -1,
     416,    58,    -1,    60,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    -1,    -1,    -1,    30,     3,     4,     5,
       6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,
      -1,    11,    12,    13,    -1,    -1,    22,    23,    24,    25,
      26,    -1,    -1,    -1,    58,    -1,    60,    27,    28,    29,
      -1,    31,    32,    33,    34,    35,    -1,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    13,    -1,    57,    -1,    17,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,    68,    69,
      -1,    -1,    30,    -1,    -1,    -1,    34,    35,    -1,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    -1,    -1,    57,
      13,    14,    15,    -1,    -1,    -1,    -1,    65,    66,    67,
      68,    69,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    -1,    -1,    57,    13,    14,    15,    -1,    -1,
      -1,    -1,    -1,    -1,    67,    68,    69,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    13,    -1,    57,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,
      68,    69,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    -1,
      -1,    57,    -1,    13,    -1,    -1,    -1,    -1,    -1,    65,
      66,    67,    68,    69,    24,    25,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    13,    -1,    57,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,    68,    69,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    13,    14,    57,
      58,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,
      68,    69,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    -1,
      13,    57,    15,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    67,    68,    69,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    13,    -1,    57,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    67,    68,    69,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    13,    -1,    57,    -1,    -1,    60,
      -1,    -1,    -1,    -1,    -1,    -1,    67,    68,    69,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    13,    57,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,    68,
      69,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    13,
      -1,    57,    -1,    -1,    -1,    -1,    -1,    -1,    64,    -1,
      -1,    67,    68,    69,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    13,    -1,    57,    -1,    -1,    -1,    -1,    -1,    -1,
      64,    -1,    -1,    67,    68,    69,    -1,    -1,    30,    -1,
      -1,    -1,    -1,    -1,    -1,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    13,    -1,    57,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    67,    68,    69,    -1,    -1,
      30,    -1,    -1,    -1,    -1,    -1,    -1,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    13,    -1,    57,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,    68,    69,
      -1,    -1,    30,    -1,    -1,    -1,    -1,    -1,    -1,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    13,    -1,    57,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,
      68,    69,    -1,    -1,    30,    -1,    -1,    -1,    -1,    -1,
      -1,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    13,
      -1,    57,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    67,    68,    69,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    13,    -1,    57,    58,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    67,    68,    69,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    13,    -1,    57,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    67,    68,    69,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    37,    38,    -1,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    13,    -1,    -1,    57,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,    68,    69,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    37,    -1,
      -1,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    -1,    -1,    -1,    57,    -1,
      -1,    -1,    -1,    19,    20,    -1,    -1,    -1,    67,    68,
      69,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      13,    37,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    59,    37,    61,    -1,    63,    -1,    -1,
      -1,    44,    45,    46,    47,    -1,    49,    50,    51,    52,
      53,    -1,    -1,    -1,    57,    27,    28,    29,    30,    31,
      32,    33,    34,    35,    -1,    37,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    48,    49,    50,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    59,    -1,    61,
      -1,    63,    -1,    65,    66,    67,    27,    28,    29,    30,
      31,    32,    33,    34,    35,    -1,    37,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    48,    49,    50,
      -1,    -1,    -1,    -1,    55,    -1,    -1,    -1,    59,    -1,
      61,    -1,    63,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    -1,    37,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    48,    49,    50,    51,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    59,    -1,    61,    -1,    63,
      27,    28,    29,    30,    31,    32,    33,    34,    35,    -1,
      37,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    59,    60,    61,    -1,    63,    27,    28,    29,
      30,    31,    32,    33,    34,    35,    -1,    37,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    48,    49,
      50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    59,
      -1,    61,    -1,    63,    27,    28,    29,    30,    31,    32,
      33,    34,    35,    -1,    37,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    48,    49,    50,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    59,    -1,    61,    -1,
      63,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      -1,    37,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    59,    -1,    61,    -1,    63
};

  /* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
     symbol of state STATE-NUM.  */
static const yytype_uint8 yystos[] =
{
       0,    14,    82,    84,    83,    85,    87,     0,    30,    34,
      35,    80,    81,   184,     3,     4,     5,     6,     7,     8,
       9,    10,    22,    23,    24,    25,    26,    86,    88,    96,
      99,   100,   104,   106,   119,   124,   125,   126,   128,   129,
     131,   133,   135,    58,    80,    30,    89,    90,   186,   101,
     102,   186,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    37,    48,    49,    50,    59,    61,    63,   141,   142,
     143,   146,   147,   148,   153,   154,   161,   176,   180,   181,
     183,    21,   139,   141,    14,    16,   103,   105,   113,   120,
     141,   141,   161,   141,   141,   130,   141,   132,   141,   136,
      15,   103,   109,   113,    80,    58,    13,    58,    36,   141,
      59,   141,   141,   141,   177,   162,   155,    13,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    57,    67,    68,    69,
     138,    56,    59,    63,    77,   140,    30,   114,    30,   160,
     107,   108,   186,   109,   121,   122,   141,    58,    14,   113,
      13,    15,   127,   127,    14,   127,    14,   127,   141,   186,
     160,    30,   111,   160,   109,   186,    65,    66,    67,    92,
      93,    94,    95,   141,   174,   175,   102,   141,   145,    60,
      85,    30,    31,    34,    63,   163,   164,   165,   185,   141,
     156,   157,   158,   141,    13,    40,    41,    48,   141,   141,
     141,   141,   141,   141,   141,   141,   141,   141,   141,   141,
     141,   141,   141,   141,    55,   141,   141,    37,    37,    37,
      13,    42,    43,    44,    45,    46,    47,    30,   144,    51,
     141,   166,    30,   183,   141,    15,   115,   116,   186,   161,
      58,    36,   160,    58,    11,    12,   123,   179,   181,   183,
     141,   161,    30,    31,    35,   182,    30,    31,    35,   182,
     160,   160,   141,   160,   141,   160,   137,    36,   112,   160,
     160,    98,    67,    97,   174,    18,    19,    20,   141,   141,
     149,   150,   151,   152,    60,    55,   141,    62,    58,    55,
      64,    58,   141,   141,   141,   141,   141,    55,    13,    13,
      13,   141,   141,   141,   141,   141,   141,   141,   149,    64,
      51,   178,   186,    58,    36,   108,   141,   122,   113,   127,
     127,    23,   141,   110,   186,    30,    91,    30,   159,   141,
     141,   141,    17,    30,   170,   172,   174,   184,    60,    85,
      58,   141,    64,   165,   141,   158,   141,   141,   141,   141,
      60,     5,   167,   116,    30,   117,   142,   160,   160,   141,
      58,    30,    79,   141,   186,   141,    30,    30,    30,    30,
      31,   183,    58,    30,   183,   150,    55,   141,     9,   168,
      59,    24,    25,   134,   186,    30,    36,    30,   141,   141,
     141,   173,   141,   141,     6,   169,   118,   141,   161,   141,
     141,   172,   172,   172,   170,   171,    58,   141,    64,   149,
     127,   160,   160,   160,    58,   141,    60,   160,   170
};

  /* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const yytype_uint8 yyr1[] =
{
       0,    78,    79,    79,    80,    80,    81,    81,    81,    82,
      83,    82,    84,    85,    86,    86,    86,    86,    86,    86,
      87,    87,    88,    88,    88,    88,    88,    88,    88,    88,
      88,    88,    88,    88,    89,    89,    90,    91,    91,    91,
      92,    93,    94,    95,    97,    96,    98,    96,    96,    96,
      96,    99,   100,   101,   101,   102,   103,   105,   104,   106,
     106,   106,   106,   106,   106,   107,   107,   108,   109,   109,
     109,   110,   110,   112,   111,   114,   113,   115,   115,   116,
     118,   117,   120,   119,   121,   121,   122,   123,   123,   123,
     123,   124,   124,   125,   125,   126,   127,   127,   128,   129,
     130,   130,   131,   132,   132,   133,   134,   134,   136,   137,
     135,   138,   138,   138,   140,   139,   139,   141,   141,   141,
     141,   141,   141,   142,   142,   144,   143,   145,   143,   146,
     146,   146,   147,   147,   147,   147,   147,   147,   147,   147,
     147,   147,   147,   147,   147,   147,   147,   147,   147,   147,
     147,   147,   147,   147,   147,   147,   147,   147,   147,   147,
     147,   147,   147,   148,   148,   149,   149,   150,   151,   150,
     152,   152,   153,   153,   155,   154,   156,   156,   156,   157,
     157,   158,   159,   159,   159,   160,   160,   162,   161,   163,
     163,   163,   164,   164,   165,   165,   165,   165,   166,   166,
     167,   167,   168,   168,   168,   169,   169,   170,   170,   170,
     170,   171,   171,   172,   173,   172,   172,   172,   172,   174,
     174,   174,   175,   175,   176,   176,   176,   176,   176,   177,
     176,   176,   176,   176,   178,   176,   179,   179,   180,   180,
     181,   181,   181,   181,   181,   182,   182,   182,   183,   183,
     184,   184,   185,   185,   186
};

  /* YYR2[YYN] -- Number of symbols on the right hand side of rule YYN.  */
static const yytype_int8 yyr2[] =
{
       0,     2,     1,     3,     1,     1,     1,     3,     2,     0,
       0,     3,     2,     2,     1,     1,     1,     1,     1,     1,
       0,     2,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     3,     1,     0,     2,     4,
       3,     7,     7,     7,     0,     6,     0,     6,     4,     4,
       4,     2,     2,     1,     3,     3,     4,     0,     3,     3,
       3,     4,     4,     3,     4,     1,     3,     3,     0,     2,
       4,     1,     3,     0,     3,     0,     3,     1,     3,     3,
       0,     5,     0,     3,     1,     3,     2,     0,     1,     1,
       1,     2,     4,     3,     5,     2,     2,     2,     4,     4,
       3,     5,     2,     3,     5,     2,     1,     1,     0,     0,
      10,     1,     1,     1,     0,     3,     1,     1,     1,     1,
       1,     1,     3,     1,     3,     0,     5,     0,     5,     2,
       2,     2,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     4,     4,     4,     4,
       3,     3,     3,     4,     4,     4,     4,     4,     4,     4,
       5,     5,     5,     5,     4,     0,     1,     1,     0,     2,
       1,     3,     1,     1,     0,     4,     0,     1,     2,     1,
       3,     1,     0,     2,     4,     0,     2,     0,     4,     0,
       1,     2,     1,     3,     1,     3,     3,     5,     1,     2,
       0,     2,     0,     2,     4,     0,     2,     1,     1,     2,
       2,     1,     3,     1,     0,     4,     2,     2,     2,     1,
       1,     1,     1,     2,     1,     1,     1,     1,     3,     0,
       4,     3,     3,     4,     0,     8,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1
};


enum { YYENOMEM = -2 };

#define yyerrok         (yyerrstatus = 0)
#define yyclearin       (yychar = YYEMPTY)

#define YYACCEPT        goto yyacceptlab
#define YYABORT         goto yyabortlab
#define YYERROR         goto yyerrorlab


#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)                                    \
  do                                                              \
    if (yychar == YYEMPTY)                                        \
      {                                                           \
        yychar = (Token);                                         \
        yylval = (Value);                                         \
        YYPOPSTACK (yylen);                                       \
        yystate = *yyssp;                                         \
        goto yybackup;                                            \
      }                                                           \
    else                                                          \
      {                                                           \
        yyerror (&yylloc, parser, YY_("syntax error: cannot back up")); \
        YYERROR;                                                  \
      }                                                           \
  while (0)

/* Backward compatibility with an undocumented macro.
   Use YYerror or YYUNDEF. */
#define YYERRCODE YYUNDEF

/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)                                \
    do                                                                  \
      if (N)                                                            \
        {                                                               \
          (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;        \
          (Current).first_column = YYRHSLOC (Rhs, 1).first_column;      \
          (Current).last_line    = YYRHSLOC (Rhs, N).last_line;         \
          (Current).last_column  = YYRHSLOC (Rhs, N).last_column;       \
        }                                                               \
      else                                                              \
        {                                                               \
          (Current).first_line   = (Current).last_line   =              \
            YYRHSLOC (Rhs, 0).last_line;                                \
          (Current).first_column = (Current).last_column =              \
            YYRHSLOC (Rhs, 0).last_column;                              \
        }                                                               \
    while (0)
#endif

#define YYRHSLOC(Rhs, K) ((Rhs)[K])


/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)                        \
do {                                            \
  if (yydebug)                                  \
    YYFPRINTF Args;                             \
} while (0)


/* YY_LOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */

# ifndef YY_LOCATION_PRINT
#  if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL

/* Print *YYLOCP on YYO.  Private, do not rely on its existence. */

YY_ATTRIBUTE_UNUSED
static int
yy_location_print_ (FILE *yyo, YYLTYPE const * const yylocp)
{
  int res = 0;
  int end_col = 0 != yylocp->last_column ? yylocp->last_column - 1 : 0;
  if (0 <= yylocp->first_line)
    {
      res += YYFPRINTF (yyo, "%d", yylocp->first_line);
      if (0 <= yylocp->first_column)
        res += YYFPRINTF (yyo, ".%d", yylocp->first_column);
    }
  if (0 <= yylocp->last_line)
    {
      if (yylocp->first_line < yylocp->last_line)
        {
          res += YYFPRINTF (yyo, "-%d", yylocp->last_line);
          if (0 <= end_col)
            res += YYFPRINTF (yyo, ".%d", end_col);
        }
      else if (0 <= end_col && yylocp->first_column < end_col)
        res += YYFPRINTF (yyo, "-%d", end_col);
    }
  return res;
 }

#   define YY_LOCATION_PRINT(File, Loc)          \
  yy_location_print_ (File, &(Loc))

#  else
#   define YY_LOCATION_PRINT(File, Loc) ((void) 0)
#  endif
# endif /* !defined YY_LOCATION_PRINT */


# define YY_SYMBOL_PRINT(Title, Kind, Value, Location)                    \
do {                                                                      \
  if (yydebug)                                                            \
    {                                                                     \
      YYFPRINTF (stderr, "%s ", Title);                                   \
      yy_symbol_print (stderr,                                            \
                  Kind, Value, Location, parser); \
      YYFPRINTF (stderr, "\n");                                           \
    }                                                                     \
} while (0)


/*-----------------------------------.
| Print this symbol's value on YYO.  |
`-----------------------------------*/

static void
yy_symbol_value_print (FILE *yyo,
                       yysymbol_kind_t yykind, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp, arangodb::aql::Parser* parser)
{
  FILE *yyoutput = yyo;
  YY_USE (yyoutput);
  YY_USE (yylocationp);
  YY_USE (parser);
  if (!yyvaluep)
    return;
# ifdef YYPRINT
  if (yykind < YYNTOKENS)
    YYPRINT (yyo, yytoknum[yykind], *yyvaluep);
# endif
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  YY_USE (yykind);
  YY_IGNORE_MAYBE_UNINITIALIZED_END
}


/*---------------------------.
| Print this symbol on YYO.  |
`---------------------------*/

static void
yy_symbol_print (FILE *yyo,
                 yysymbol_kind_t yykind, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp, arangodb::aql::Parser* parser)
{
  YYFPRINTF (yyo, "%s %s (",
             yykind < YYNTOKENS ? "token" : "nterm", yysymbol_name (yykind));

  YY_LOCATION_PRINT (yyo, *yylocationp);
  YYFPRINTF (yyo, ": ");
  yy_symbol_value_print (yyo, yykind, yyvaluep, yylocationp, parser);
  YYFPRINTF (yyo, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

static void
yy_stack_print (yy_state_t *yybottom, yy_state_t *yytop)
{
  YYFPRINTF (stderr, "Stack now");
  for (; yybottom <= yytop; yybottom++)
    {
      int yybot = *yybottom;
      YYFPRINTF (stderr, " %d", yybot);
    }
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)                            \
do {                                                            \
  if (yydebug)                                                  \
    yy_stack_print ((Bottom), (Top));                           \
} while (0)


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

static void
yy_reduce_print (yy_state_t *yyssp, YYSTYPE *yyvsp, YYLTYPE *yylsp,
                 int yyrule, arangodb::aql::Parser* parser)
{
  int yylno = yyrline[yyrule];
  int yynrhs = yyr2[yyrule];
  int yyi;
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %d):\n",
             yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr,
                       YY_ACCESSING_SYMBOL (+yyssp[yyi + 1 - yynrhs]),
                       &yyvsp[(yyi + 1) - (yynrhs)],
                       &(yylsp[(yyi + 1) - (yynrhs)]), parser);
      YYFPRINTF (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)          \
do {                                    \
  if (yydebug)                          \
    yy_reduce_print (yyssp, yyvsp, yylsp, Rule, parser); \
} while (0)

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args) ((void) 0)
# define YY_SYMBOL_PRINT(Title, Kind, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif


/* Context of a parse error.  */
typedef struct
{
  yy_state_t *yyssp;
  yysymbol_kind_t yytoken;
  YYLTYPE *yylloc;
} yypcontext_t;

/* Put in YYARG at most YYARGN of the expected tokens given the
   current YYCTX, and return the number of tokens stored in YYARG.  If
   YYARG is null, return the number of expected tokens (guaranteed to
   be less than YYNTOKENS).  Return YYENOMEM on memory exhaustion.
   Return 0 if there are more than YYARGN expected tokens, yet fill
   YYARG up to YYARGN. */
static int
yypcontext_expected_tokens (const yypcontext_t *yyctx,
                            yysymbol_kind_t yyarg[], int yyargn)
{
  /* Actual size of YYARG. */
  int yycount = 0;
  int yyn = yypact[+*yyctx->yyssp];
  if (!yypact_value_is_default (yyn))
    {
      /* Start YYX at -YYN if negative to avoid negative indexes in
         YYCHECK.  In other words, skip the first -YYN actions for
         this state because they are default actions.  */
      int yyxbegin = yyn < 0 ? -yyn : 0;
      /* Stay within bounds of both yycheck and yytname.  */
      int yychecklim = YYLAST - yyn + 1;
      int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
      int yyx;
      for (yyx = yyxbegin; yyx < yyxend; ++yyx)
        if (yycheck[yyx + yyn] == yyx && yyx != YYSYMBOL_YYerror
            && !yytable_value_is_error (yytable[yyx + yyn]))
          {
            if (!yyarg)
              ++yycount;
            else if (yycount == yyargn)
              return 0;
            else
              yyarg[yycount++] = YY_CAST (yysymbol_kind_t, yyx);
          }
    }
  if (yyarg && yycount == 0 && 0 < yyargn)
    yyarg[0] = YYSYMBOL_YYEMPTY;
  return yycount;
}




#ifndef yystrlen
# if defined __GLIBC__ && defined _STRING_H
#  define yystrlen(S) (YY_CAST (YYPTRDIFF_T, strlen (S)))
# else
/* Return the length of YYSTR.  */
static YYPTRDIFF_T
yystrlen (const char *yystr)
{
  YYPTRDIFF_T yylen;
  for (yylen = 0; yystr[yylen]; yylen++)
    continue;
  return yylen;
}
# endif
#endif

#ifndef yystpcpy
# if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
#  define yystpcpy stpcpy
# else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
static char *
yystpcpy (char *yydest, const char *yysrc)
{
  char *yyd = yydest;
  const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
# endif
#endif

#ifndef yytnamerr
/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
   quotes and backslashes, so that it's suitable for yyerror.  The
   heuristic is that double-quoting is unnecessary unless the string
   contains an apostrophe, a comma, or backslash (other than
   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
   null, do not copy; instead, return the length of what the result
   would have been.  */
static YYPTRDIFF_T
yytnamerr (char *yyres, const char *yystr)
{
  if (*yystr == '"')
    {
      YYPTRDIFF_T yyn = 0;
      char const *yyp = yystr;
      for (;;)
        switch (*++yyp)
          {
          case '\'':
          case ',':
            goto do_not_strip_quotes;

          case '\\':
            if (*++yyp != '\\')
              goto do_not_strip_quotes;
            else
              goto append;

          append:
          default:
            if (yyres)
              yyres[yyn] = *yyp;
            yyn++;
            break;

          case '"':
            if (yyres)
              yyres[yyn] = '\0';
            return yyn;
          }
    do_not_strip_quotes: ;
    }

  if (yyres)
    return yystpcpy (yyres, yystr) - yyres;
  else
    return yystrlen (yystr);
}
#endif


static int
yy_syntax_error_arguments (const yypcontext_t *yyctx,
                           yysymbol_kind_t yyarg[], int yyargn)
{
  /* Actual size of YYARG. */
  int yycount = 0;
  /* There are many possibilities here to consider:
     - If this state is a consistent state with a default action, then
       the only way this function was invoked is if the default action
       is an error action.  In that case, don't check for expected
       tokens because there are none.
     - The only way there can be no lookahead present (in yychar) is if
       this state is a consistent state with a default action.  Thus,
       detecting the absence of a lookahead is sufficient to determine
       that there is no unexpected or expected token to report.  In that
       case, just report a simple "syntax error".
     - Don't assume there isn't a lookahead just because this state is a
       consistent state with a default action.  There might have been a
       previous inconsistent state, consistent state with a non-default
       action, or user semantic action that manipulated yychar.
     - Of course, the expected token list depends on states to have
       correct lookahead information, and it depends on the parser not
       to perform extra reductions after fetching a lookahead from the
       scanner and before detecting a syntax error.  Thus, state merging
       (from LALR or IELR) and default reductions corrupt the expected
       token list.  However, the list is correct for canonical LR with
       one exception: it will still contain any token that will not be
       accepted due to an error action in a later state.
  */
  if (yyctx->yytoken != YYSYMBOL_YYEMPTY)
    {
      int yyn;
      if (yyarg)
        yyarg[yycount] = yyctx->yytoken;
      ++yycount;
      yyn = yypcontext_expected_tokens (yyctx,
                                        yyarg ? yyarg + 1 : yyarg, yyargn - 1);
      if (yyn == YYENOMEM)
        return YYENOMEM;
      else
        yycount += yyn;
    }
  return yycount;
}

/* Copy into *YYMSG, which is of size *YYMSG_ALLOC, an error message
   about the unexpected token YYTOKEN for the state stack whose top is
   YYSSP.

   Return 0 if *YYMSG was successfully written.  Return -1 if *YYMSG is
   not large enough to hold the message.  In that case, also set
   *YYMSG_ALLOC to the required number of bytes.  Return YYENOMEM if the
   required number of bytes is too large to store.  */
static int
yysyntax_error (YYPTRDIFF_T *yymsg_alloc, char **yymsg,
                const yypcontext_t *yyctx)
{
  enum { YYARGS_MAX = 5 };
  /* Internationalized format string. */
  const char *yyformat = YY_NULLPTR;
  /* Arguments of yyformat: reported tokens (one for the "unexpected",
     one per "expected"). */
  yysymbol_kind_t yyarg[YYARGS_MAX];
  /* Cumulated lengths of YYARG.  */
  YYPTRDIFF_T yysize = 0;

  /* Actual size of YYARG. */
  int yycount = yy_syntax_error_arguments (yyctx, yyarg, YYARGS_MAX);
  if (yycount == YYENOMEM)
    return YYENOMEM;

  switch (yycount)
    {
#define YYCASE_(N, S)                       \
      case N:                               \
        yyformat = S;                       \
        break
    default: /* Avoid compiler warnings. */
      YYCASE_(0, YY_("syntax error"));
      YYCASE_(1, YY_("syntax error, unexpected %s"));
      YYCASE_(2, YY_("syntax error, unexpected %s, expecting %s"));
      YYCASE_(3, YY_("syntax error, unexpected %s, expecting %s or %s"));
      YYCASE_(4, YY_("syntax error, unexpected %s, expecting %s or %s or %s"));
      YYCASE_(5, YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s"));
#undef YYCASE_
    }

  /* Compute error message size.  Don't count the "%s"s, but reserve
     room for the terminator.  */
  yysize = yystrlen (yyformat) - 2 * yycount + 1;
  {
    int yyi;
    for (yyi = 0; yyi < yycount; ++yyi)
      {
        YYPTRDIFF_T yysize1
          = yysize + yytnamerr (YY_NULLPTR, yytname[yyarg[yyi]]);
        if (yysize <= yysize1 && yysize1 <= YYSTACK_ALLOC_MAXIMUM)
          yysize = yysize1;
        else
          return YYENOMEM;
      }
  }

  if (*yymsg_alloc < yysize)
    {
      *yymsg_alloc = 2 * yysize;
      if (! (yysize <= *yymsg_alloc
             && *yymsg_alloc <= YYSTACK_ALLOC_MAXIMUM))
        *yymsg_alloc = YYSTACK_ALLOC_MAXIMUM;
      return -1;
    }

  /* Avoid sprintf, as that infringes on the user's name space.
     Don't have undefined behavior even if the translation
     produced a string with the wrong number of "%s"s.  */
  {
    char *yyp = *yymsg;
    int yyi = 0;
    while ((*yyp = *yyformat) != '\0')
      if (*yyp == '%' && yyformat[1] == 's' && yyi < yycount)
        {
          yyp += yytnamerr (yyp, yytname[yyarg[yyi++]]);
          yyformat += 2;
        }
      else
        {
          ++yyp;
          ++yyformat;
        }
  }
  return 0;
}


/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

static void
yydestruct (const char *yymsg,
            yysymbol_kind_t yykind, YYSTYPE *yyvaluep, YYLTYPE *yylocationp, arangodb::aql::Parser* parser)
{
  YY_USE (yyvaluep);
  YY_USE (yylocationp);
  YY_USE (parser);
  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yykind, yyvaluep, yylocationp);

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  YY_USE (yykind);
  YY_IGNORE_MAYBE_UNINITIALIZED_END
}






/*----------.
| yyparse.  |
`----------*/

int
yyparse (arangodb::aql::Parser* parser)
{
/* Lookahead token kind.  */
int yychar;


/* The semantic value of the lookahead symbol.  */
/* Default value used for initialization, for pacifying older GCCs
   or non-GCC compilers.  */
YY_INITIAL_VALUE (static YYSTYPE yyval_default;)
YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);

/* Location data for the lookahead symbol.  */
static YYLTYPE yyloc_default
# if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL
  = { 1, 1, 1, 1 }
# endif
;
YYLTYPE yylloc = yyloc_default;

    /* Number of syntax errors so far.  */
    int yynerrs = 0;

    yy_state_fast_t yystate = 0;
    /* Number of tokens to shift before error messages enabled.  */
    int yyerrstatus = 0;

    /* Refer to the stacks through separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */

    /* Their size.  */
    YYPTRDIFF_T yystacksize = YYINITDEPTH;

    /* The state stack: array, bottom, top.  */
    yy_state_t yyssa[YYINITDEPTH];
    yy_state_t *yyss = yyssa;
    yy_state_t *yyssp = yyss;

    /* The semantic value stack: array, bottom, top.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE *yyvs = yyvsa;
    YYSTYPE *yyvsp = yyvs;

    /* The location stack: array, bottom, top.  */
    YYLTYPE yylsa[YYINITDEPTH];
    YYLTYPE *yyls = yylsa;
    YYLTYPE *yylsp = yyls;

  int yyn;
  /* The return value of yyparse.  */
  int yyresult;
  /* Lookahead symbol kind.  */
  yysymbol_kind_t yytoken = YYSYMBOL_YYEMPTY;
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;
  YYLTYPE yyloc;

  /* The locations where the error started and ended.  */
  YYLTYPE yyerror_range[3];

  /* Buffer for error messages, and its allocated size.  */
  char yymsgbuf[128];
  char *yymsg = yymsgbuf;
  YYPTRDIFF_T yymsg_alloc = sizeof yymsgbuf;

#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N), yylsp -= (N))

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yychar = YYEMPTY; /* Cause a token to be read.  */
  yylsp[0] = yylloc;
  goto yysetstate;


/*------------------------------------------------------------.
| yynewstate -- push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;


/*--------------------------------------------------------------------.
| yysetstate -- set current state (the top of the stack) to yystate.  |
`--------------------------------------------------------------------*/
yysetstate:
  YYDPRINTF ((stderr, "Entering state %d\n", yystate));
  YY_ASSERT (0 <= yystate && yystate < YYNSTATES);
  YY_IGNORE_USELESS_CAST_BEGIN
  *yyssp = YY_CAST (yy_state_t, yystate);
  YY_IGNORE_USELESS_CAST_END
  YY_STACK_PRINT (yyss, yyssp);

  if (yyss + yystacksize - 1 <= yyssp)
#if !defined yyoverflow && !defined YYSTACK_RELOCATE
    goto yyexhaustedlab;
#else
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYPTRDIFF_T yysize = yyssp - yyss + 1;

# if defined yyoverflow
      {
        /* Give user a chance to reallocate the stack.  Use copies of
           these so that the &'s don't force the real ones into
           memory.  */
        yy_state_t *yyss1 = yyss;
        YYSTYPE *yyvs1 = yyvs;
        YYLTYPE *yyls1 = yyls;

        /* Each stack pointer address is followed by the size of the
           data in use in that stack, in bytes.  This used to be a
           conditional around just the two extra args, but that might
           be undefined if yyoverflow is a macro.  */
        yyoverflow (YY_("memory exhausted"),
                    &yyss1, yysize * YYSIZEOF (*yyssp),
                    &yyvs1, yysize * YYSIZEOF (*yyvsp),
                    &yyls1, yysize * YYSIZEOF (*yylsp),
                    &yystacksize);
        yyss = yyss1;
        yyvs = yyvs1;
        yyls = yyls1;
      }
# else /* defined YYSTACK_RELOCATE */
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
        goto yyexhaustedlab;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
        yystacksize = YYMAXDEPTH;

      {
        yy_state_t *yyss1 = yyss;
        union yyalloc *yyptr =
          YY_CAST (union yyalloc *,
                   YYSTACK_ALLOC (YY_CAST (YYSIZE_T, YYSTACK_BYTES (yystacksize))));
        if (! yyptr)
          goto yyexhaustedlab;
        YYSTACK_RELOCATE (yyss_alloc, yyss);
        YYSTACK_RELOCATE (yyvs_alloc, yyvs);
        YYSTACK_RELOCATE (yyls_alloc, yyls);
#  undef YYSTACK_RELOCATE
        if (yyss1 != yyssa)
          YYSTACK_FREE (yyss1);
      }
# endif

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;
      yylsp = yyls + yysize - 1;

      YY_IGNORE_USELESS_CAST_BEGIN
      YYDPRINTF ((stderr, "Stack size increased to %ld\n",
                  YY_CAST (long, yystacksize)));
      YY_IGNORE_USELESS_CAST_END

      if (yyss + yystacksize - 1 <= yyssp)
        YYABORT;
    }
#endif /* !defined yyoverflow && !defined YYSTACK_RELOCATE */

  if (yystate == YYFINAL)
    YYACCEPT;

  goto yybackup;


/*-----------.
| yybackup.  |
`-----------*/
yybackup:
  /* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to lookahead token.  */
  yyn = yypact[yystate];
  if (yypact_value_is_default (yyn))
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either empty, or end-of-input, or a valid lookahead.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token\n"));
      yychar = yylex (&yylval, &yylloc, scanner);
    }

  if (yychar <= T_END)
    {
      yychar = T_END;
      yytoken = YYSYMBOL_YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else if (yychar == YYerror)
    {
      /* The scanner already issued an error message, process directly
         to error recovery.  But do not keep the error token as
         lookahead, it is too special and may lead us to an endless
         loop in error recovery. */
      yychar = YYUNDEF;
      yytoken = YYSYMBOL_YYerror;
      yyerror_range[1] = yylloc;
      goto yyerrlab1;
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yytable_value_is_error (yyn))
        goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the lookahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);
  yystate = yyn;
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END
  *++yylsp = yylloc;

  /* Discard the shifted token.  */
  yychar = YYEMPTY;
  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     '$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];

  /* Default location. */
  YYLLOC_DEFAULT (yyloc, (yylsp - yylen), yylen);
  yyerror_range[1] = yyloc;
  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
  case 2: /* optional_prune_variable: expression  */
#line 504 "Aql/grammar.y"
               {
      AstNode* node = parser->ast()->createNodeArray();
      node->addMember(parser->ast()->createNodeNop());
      node->addMember((yyvsp[0].node));
      (yyval.node) = node;
    }
#line 2547 "Aql/grammar.cpp"
    break;

  case 3: /* optional_prune_variable: variable_name "assignment" expression  */
#line 510 "Aql/grammar.y"
                                      {
      AstNode* node = parser->ast()->createNodeArray();
      AstNode* variableNode = parser->ast()->createNodeLet((yyvsp[-2].strval).value, (yyvsp[-2].strval).length, (yyvsp[0].node), true);
      node->addMember(variableNode);
      node->addMember((yyvsp[0].node));
      (yyval.node) = node;    
  }
#line 2559 "Aql/grammar.cpp"
    break;

  case 4: /* with_collection: "identifier"  */
#line 520 "Aql/grammar.y"
             {
      (yyval.node) = parser->ast()->createNodeValueString((yyvsp[0].strval).value, (yyvsp[0].strval).length);
    }
#line 2567 "Aql/grammar.cpp"
    break;

  case 5: /* with_collection: bind_parameter_datasource_expected  */
#line 523 "Aql/grammar.y"
                                       {
      (yyval.node) = (yyvsp[0].node);
    }
#line 2575 "Aql/grammar.cpp"
    break;

  case 6: /* with_collection_list: with_collection  */
#line 529 "Aql/grammar.y"
                     {
       auto node = static_cast<AstNode*>(parser->peekStack());
       node->addMember((yyvsp[0].node));
     }
#line 2584 "Aql/grammar.cpp"
    break;

  case 7: /* with_collection_list: with_collection_list "," with_collection  */
#line 533 "Aql/grammar.y"
                                                  {
       auto node = static_cast<AstNode*>(parser->peekStack());
       node->addMember((yyvsp[0].node));
     }
#line 2593 "Aql/grammar.cpp"
    break;

  case 8: /* with_collection_list: with_collection_list with_collection  */
#line 537 "Aql/grammar.y"
                                          {
       auto node = static_cast<AstNode*>(parser->peekStack());
       node->addMember((yyvsp[0].node));
     }
#line 2602 "Aql/grammar.cpp"
    break;

  case 9: /* optional_with: %empty  */
#line 544 "Aql/grammar.y"
                 {
     }
#line 2609 "Aql/grammar.cpp"
    break;

  case 10: /* $@1: %empty  */
#line 546 "Aql/grammar.y"
            {
      auto node = parser->ast()->createNodeArray();
      parser->pushStack(node);
     }
#line 2618 "Aql/grammar.cpp"
    break;

  case 11: /* optional_with: "WITH keyword" $@1 with_collection_list  */
#line 549 "Aql/grammar.y"
                            {
      auto node = static_cast<AstNode*>(parser->popStack());
      auto const& resolver = parser->query().resolver();
      auto withNode = parser->ast()->createNodeWithCollections(node, resolver);
      parser->ast()->addOperation(withNode);
     }
#line 2629 "Aql/grammar.cpp"
    break;

  case 12: /* queryStart: optional_with query  */
#line 558 "Aql/grammar.y"
                        {
    }
#line 2636 "Aql/grammar.cpp"
    break;

  case 13: /* query: optional_statement_block_statements final_statement  */
#line 563 "Aql/grammar.y"
                                                        {
    }
#line 2643 "Aql/grammar.cpp"
    break;

  case 14: /* final_statement: return_statement  */
#line 568 "Aql/grammar.y"
                     {
    }
#line 2650 "Aql/grammar.cpp"
    break;

  case 15: /* final_statement: remove_statement  */
#line 570 "Aql/grammar.y"
                     {
      parser->ast()->scopes()->endNested();
    }
#line 2658 "Aql/grammar.cpp"
    break;

  case 16: /* final_statement: insert_statement  */
#line 573 "Aql/grammar.y"
                     {
      parser->ast()->scopes()->endNested();
    }
#line 2666 "Aql/grammar.cpp"
    break;

  case 17: /* final_statement: update_statement  */
#line 576 "Aql/grammar.y"
                     {
      parser->ast()->scopes()->endNested();
    }
#line 2674 "Aql/grammar.cpp"
    break;

  case 18: /* final_statement: replace_statement  */
#line 579 "Aql/grammar.y"
                      {
      parser->ast()->scopes()->endNested();
    }
#line 2682 "Aql/grammar.cpp"
    break;

  case 19: /* final_statement: upsert_statement  */
#line 582 "Aql/grammar.y"
                     {
      parser->ast()->scopes()->endNested();
    }
#line 2690 "Aql/grammar.cpp"
    break;

  case 20: /* optional_statement_block_statements: %empty  */
#line 588 "Aql/grammar.y"
                {
    }
#line 2697 "Aql/grammar.cpp"
    break;

  case 21: /* optional_statement_block_statements: optional_statement_block_statements statement_block_statement  */
#line 590 "Aql/grammar.y"
                                                                  {
    }
#line 2704 "Aql/grammar.cpp"
    break;

  case 22: /* statement_block_statement: for_statement  */
#line 595 "Aql/grammar.y"
                  {
    }
#line 2711 "Aql/grammar.cpp"
    break;

  case 23: /* statement_block_statement: let_statement  */
#line 597 "Aql/grammar.y"
                  {
    }
#line 2718 "Aql/grammar.cpp"
    break;

  case 24: /* statement_block_statement: filter_statement  */
#line 599 "Aql/grammar.y"
                     {
    }
#line 2725 "Aql/grammar.cpp"
    break;

  case 25: /* statement_block_statement: collect_statement  */
#line 601 "Aql/grammar.y"
                      {
    }
#line 2732 "Aql/grammar.cpp"
    break;

  case 26: /* statement_block_statement: sort_statement  */
#line 603 "Aql/grammar.y"
                   {
    }
#line 2739 "Aql/grammar.cpp"
    break;

  case 27: /* statement_block_statement: limit_statement  */
#line 605 "Aql/grammar.y"
                    {
    }
#line 2746 "Aql/grammar.cpp"
    break;

  case 28: /* statement_block_statement: window_statement  */
#line 607 "Aql/grammar.y"
                     {
    }
#line 2753 "Aql/grammar.cpp"
    break;

  case 29: /* statement_block_statement: remove_statement  */
#line 609 "Aql/grammar.y"
                     {
    }
#line 2760 "Aql/grammar.cpp"
    break;

  case 30: /* statement_block_statement: insert_statement  */
#line 611 "Aql/grammar.y"
                     {
    }
#line 2767 "Aql/grammar.cpp"
    break;

  case 31: /* statement_block_statement: update_statement  */
#line 613 "Aql/grammar.y"
                     {
    }
#line 2774 "Aql/grammar.cpp"
    break;

  case 32: /* statement_block_statement: replace_statement  */
#line 615 "Aql/grammar.y"
                      {
    }
#line 2781 "Aql/grammar.cpp"
    break;

  case 33: /* statement_block_statement: upsert_statement  */
#line 617 "Aql/grammar.y"
                     {
    }
#line 2788 "Aql/grammar.cpp"
    break;

  case 34: /* more_output_variables: variable_name  */
#line 622 "Aql/grammar.y"
                  {
      auto wrapperNode = parser->ast()->createNodeArray();
      parser->pushArray(wrapperNode);
      // This is guaranteed to be called on the first variable
      AstNode* node = parser->ast()->createNodeValueString((yyvsp[0].strval).value, (yyvsp[0].strval).length);
      parser->pushArrayElement(node);
    }
#line 2800 "Aql/grammar.cpp"
    break;

  case 35: /* more_output_variables: more_output_variables "," variable_name  */
#line 629 "Aql/grammar.y"
                                                  {
      AstNode* node = parser->ast()->createNodeValueString((yyvsp[0].strval).value, (yyvsp[0].strval).length);
      parser->pushArrayElement(node);
    }
#line 2809 "Aql/grammar.cpp"
    break;

  case 36: /* for_output_variables: more_output_variables  */
#line 636 "Aql/grammar.y"
                          {
      (yyval.node) = parser->popArray();
    }
#line 2817 "Aql/grammar.cpp"
    break;

  case 37: /* prune_and_options: %empty  */
#line 642 "Aql/grammar.y"
                                                   {
      auto node = static_cast<AstNode*>(parser->peekStack());
      // Prune
      node->addMember(parser->ast()->createNodeNop());
      // Options
      node->addMember(parser->ast()->createNodeNop());
    }
#line 2829 "Aql/grammar.cpp"
    break;

  case 38: /* prune_and_options: "identifier" optional_prune_variable  */
#line 649 "Aql/grammar.y"
                                     {
      std::string_view operation((yyvsp[-1].strval).value, (yyvsp[-1].strval).length);

      auto node = static_cast<AstNode*>(parser->peekStack());
      if (::caseInsensitiveEqual(operation, "PRUNE")) {
        /* Only Prune */
        TRI_ASSERT((yyvsp[0].node) != nullptr);
        // Prune
        node->addMember((yyvsp[0].node));
        // Options
        node->addMember(parser->ast()->createNodeNop());
      } else if (::caseInsensitiveEqual(operation, "OPTIONS")) {
        auto const* optionsArgument = (yyvsp[0].node)->getMember(1);
        /* Only Options */
        TRI_ASSERT(optionsArgument != nullptr);
        ::validateOptions(parser, optionsArgument, yylloc.first_line, yylloc.first_column);
        // Prune
        node->addMember(parser->ast()->createNodeNop());
        // Options
        node->addMember(optionsArgument);
      } else {
        parser->registerParseError(TRI_ERROR_QUERY_PARSE, "unexpected qualifier '%s', expecting 'PRUNE' or 'OPTIONS'", operation, yylloc.first_line, yylloc.first_column);
      }
    }
#line 2858 "Aql/grammar.cpp"
    break;

  case 39: /* prune_and_options: "identifier" optional_prune_variable "identifier" object  */
#line 673 "Aql/grammar.y"
                                                     {
      /* prune and options */
      std::string_view operation((yyvsp[-3].strval).value, (yyvsp[-3].strval).length);
      auto node = static_cast<AstNode*>(parser->peekStack());
      if (!::caseInsensitiveEqual(operation, "PRUNE")) {
        parser->registerParseError(TRI_ERROR_QUERY_PARSE, "unexpected qualifier '%s', expecting 'PRUNE'", operation, yylloc.first_line, yylloc.first_column);
      }
      TRI_ASSERT((yyvsp[-2].node) != nullptr);
      operation = {(yyvsp[-1].strval).value, (yyvsp[-1].strval).length};
      if (!::caseInsensitiveEqual(operation, "OPTIONS")) {
        parser->registerParseError(TRI_ERROR_QUERY_PARSE, "unexpected qualifier '%s', expecting 'OPTIONS'", operation, yylloc.first_line, yylloc.first_column);
      }
      TRI_ASSERT((yyvsp[0].node) != nullptr);
      ::validateOptions(parser, (yyvsp[0].node), yylloc.first_line, yylloc.first_column);

      // Prune
      node->addMember((yyvsp[-2].node));
      // Options
      node->addMember((yyvsp[0].node));
    }
#line 2883 "Aql/grammar.cpp"
    break;

  case 40: /* traversal_graph_info: graph_direction_steps expression graph_subject  */
#line 696 "Aql/grammar.y"
                                                   {
      auto infoNode = parser->ast()->createNodeArray();
      // Direction
      infoNode->addMember((yyvsp[-2].node));
      // Source
      infoNode->addMember((yyvsp[-1].node));
      // Graph
      infoNode->addMember((yyvsp[0].node));
      (yyval.node) = infoNode;
    }
#line 2898 "Aql/grammar.cpp"
    break;

  case 41: /* shortest_path_graph_info: graph_direction "SHORTEST_PATH keyword" expression "identifier" expression graph_subject options  */
#line 709 "Aql/grammar.y"
                                                                                         {
      (yyval.node) = ::buildShortestPathInfo(parser, (yyvsp[-3].strval).value, parser->ast()->createNodeDirection((yyvsp[-6].intval), 1), (yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node), yyloc);
    }
#line 2906 "Aql/grammar.cpp"
    break;

  case 42: /* k_shortest_paths_graph_info: graph_direction_steps "K_SHORTEST_PATHS keyword" expression "identifier" expression graph_subject options  */
#line 715 "Aql/grammar.y"
                                                                                                  {
      (yyval.node) = ::buildShortestPathInfo(parser, (yyvsp[-3].strval).value, (yyvsp[-6].node), (yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node), yyloc);
    }
#line 2914 "Aql/grammar.cpp"
    break;

  case 43: /* k_paths_graph_info: graph_direction_steps "K_PATHS keyword" expression "identifier" expression graph_subject options  */
#line 721 "Aql/grammar.y"
                                                                                         {
      (yyval.node) = ::buildShortestPathInfo(parser, (yyvsp[-3].strval).value, (yyvsp[-6].node), (yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node), yyloc);
    }
#line 2922 "Aql/grammar.cpp"
    break;

  case 44: /* $@2: %empty  */
#line 727 "Aql/grammar.y"
                                               {
      AstNode* variablesNode = static_cast<AstNode*>((yyvsp[-2].node));
      ::checkOutVariables(parser, variablesNode, 1, 1, "Collections and views FOR loops only allow a single return variable", yyloc);
      parser->ast()->scopes()->start(arangodb::aql::AQL_SCOPE_FOR);
      // now create an out variable for the FOR statement
      // this prepares us to handle the optional SEARCH condition, which may
      // or may not refer to the FOR's variable
      AstNode* variableNameNode = variablesNode->getMemberUnchecked(0);
      TRI_ASSERT(variableNameNode->isStringValue());
      AstNode* variableNode = parser->ast()->createNodeVariable(variableNameNode->getStringView(), true);
      parser->pushStack(variableNode);
    }
#line 2939 "Aql/grammar.cpp"
    break;

  case 45: /* for_statement: "FOR declaration" for_output_variables "IN keyword" expression $@2 for_options  */
#line 738 "Aql/grammar.y"
                  {
      // now we can handle the optional SEARCH condition and OPTIONS.
      AstNode* variableNode = static_cast<AstNode*>(parser->popStack());

      Variable* variable = static_cast<Variable*>(variableNode->getData());

      AstNode* node = nullptr;
      AstNode* search = nullptr;
      AstNode* options = nullptr;

      if ((yyvsp[0].node) != nullptr) {
        // we got a SEARCH and/or OPTIONS clause
        TRI_ASSERT((yyvsp[0].node)->type == NODE_TYPE_ARRAY);
        TRI_ASSERT((yyvsp[0].node)->numMembers() == 2);

        search = (yyvsp[0].node)->getMemberUnchecked(0);
        if (search->type == NODE_TYPE_NOP) {
          search = nullptr;
        }
        options = (yyvsp[0].node)->getMemberUnchecked(1);
        if (options->type == NODE_TYPE_NOP) {
          options = nullptr;
        }
      }

      if (search != nullptr) {
        // we got a SEARCH clause. this is always a view.
        node = parser->ast()->createNodeForView(variable, (yyvsp[-2].node), search, options);

        if ((yyvsp[-2].node)->type != NODE_TYPE_PARAMETER_DATASOURCE &&
            (yyvsp[-2].node)->type != NODE_TYPE_VIEW &&
            (yyvsp[-2].node)->type != NODE_TYPE_COLLECTION) {
          parser->registerParseError(TRI_ERROR_QUERY_PARSE, "SEARCH condition used on non-view", yylloc.first_line, yylloc.first_column);
        }
      } else {
        node = parser->ast()->createNodeFor(variable, (yyvsp[-2].node), options);
      }

      parser->ast()->addOperation(node);
    }
#line 2984 "Aql/grammar.cpp"
    break;

  case 46: /* $@3: %empty  */
#line 778 "Aql/grammar.y"
                                                         {
      // Traversal
      auto variableNamesNode = static_cast<AstNode*>((yyvsp[-2].node));
      ::checkOutVariables(parser, variableNamesNode, 1, 3, "Traversals only have one, two or three return variables", yyloc);
      parser->ast()->scopes()->start(arangodb::aql::AQL_SCOPE_FOR);
      auto variablesNode = ::transformOutputVariables(parser, variableNamesNode);
      auto graphInfoNode = static_cast<AstNode*>((yyvsp[0].node));
      TRI_ASSERT(graphInfoNode != nullptr);
      TRI_ASSERT(graphInfoNode->type == NODE_TYPE_ARRAY);
      parser->pushStack(variablesNode);
      parser->pushStack(graphInfoNode);
      // This stack push/pop magic is necessary to allow v, e, and p in the prune condition
    }
#line 3002 "Aql/grammar.cpp"
    break;

  case 47: /* for_statement: "FOR declaration" for_output_variables "IN keyword" traversal_graph_info $@3 prune_and_options  */
#line 790 "Aql/grammar.y"
                        {
      auto graphInfoNode = static_cast<AstNode*>(parser->popStack());
      auto variablesNode = static_cast<AstNode*>(parser->popStack());

      auto prune = graphInfoNode->getMember(3);
      TRI_ASSERT(prune != nullptr);
      if (prune->type == NODE_TYPE_ARRAY) {
        TRI_ASSERT(prune->numMembers() == 2);
        Ast::traverseReadOnly(prune->getMember(1), [&](AstNode const* node) {
          if (node->type == NODE_TYPE_REFERENCE && node->hasFlag(AstNodeFlagType::FLAG_SUBQUERY_REFERENCE)) {
            parser->registerParseError(TRI_ERROR_QUERY_PARSE, "prune condition must not use a subquery", yylloc.first_line, yylloc.first_column);
          }
        });
        graphInfoNode->changeMember(3, prune->getMember(1));
      }
      auto node = parser->ast()->createNodeTraversal(variablesNode, graphInfoNode);
      parser->ast()->addOperation(node);
      if(prune->type == NODE_TYPE_ARRAY && prune->getMember(0)->type != NODE_TYPE_NOP) {
        auto pruneLetVariableName = prune->getMember(0);
        parser->ast()->addOperation(pruneLetVariableName);
      }
    }
#line 3029 "Aql/grammar.cpp"
    break;

  case 48: /* for_statement: "FOR declaration" for_output_variables "IN keyword" shortest_path_graph_info  */
#line 812 "Aql/grammar.y"
                                                             {
      // Shortest Path
      auto variableNamesNode = static_cast<AstNode*>((yyvsp[-2].node));
      ::checkOutVariables(parser, variableNamesNode, 1, 2, "SHORTEST_PATH only has one or two return variables", yyloc);
      parser->ast()->scopes()->start(arangodb::aql::AQL_SCOPE_FOR);
      auto variablesNode = ::transformOutputVariables(parser, variableNamesNode);
      auto graphInfoNode = static_cast<AstNode*>((yyvsp[0].node));
      TRI_ASSERT(graphInfoNode != nullptr);
      TRI_ASSERT(graphInfoNode->type == NODE_TYPE_ARRAY);
      auto node = parser->ast()->createNodeShortestPath(variablesNode, graphInfoNode);
      parser->ast()->addOperation(node);
    }
#line 3046 "Aql/grammar.cpp"
    break;

  case 49: /* for_statement: "FOR declaration" for_output_variables "IN keyword" k_shortest_paths_graph_info  */
#line 824 "Aql/grammar.y"
                                                                {
      // K Shortest Paths
      auto variableNamesNode = static_cast<AstNode*>((yyvsp[-2].node));
      ::checkOutVariables(parser, variableNamesNode, 1, 1, "K_SHORTEST_PATHS only has one return variable", yyloc);
      parser->ast()->scopes()->start(arangodb::aql::AQL_SCOPE_FOR);
      auto variablesNode = ::transformOutputVariables(parser, variableNamesNode);
      auto graphInfoNode = static_cast<AstNode*>((yyvsp[0].node));
      TRI_ASSERT(graphInfoNode != nullptr);
      TRI_ASSERT(graphInfoNode->type == NODE_TYPE_ARRAY);
      auto node = parser->ast()->createNodeKShortestPaths(arangodb::graph::ShortestPathType::Type::KShortestPaths, variablesNode, graphInfoNode);
      parser->ast()->addOperation(node);
    }
#line 3063 "Aql/grammar.cpp"
    break;

  case 50: /* for_statement: "FOR declaration" for_output_variables "IN keyword" k_paths_graph_info  */
#line 836 "Aql/grammar.y"
                                                       {
      // K Paths
      auto variableNamesNode = static_cast<AstNode*>((yyvsp[-2].node));
      ::checkOutVariables(parser, variableNamesNode, 1, 1, "K_PATHS only has one return variable", yyloc);
      parser->ast()->scopes()->start(arangodb::aql::AQL_SCOPE_FOR);
      auto variablesNode = ::transformOutputVariables(parser, variableNamesNode);
      auto graphInfoNode = static_cast<AstNode*>((yyvsp[0].node));
      TRI_ASSERT(graphInfoNode != nullptr);
      TRI_ASSERT(graphInfoNode->type == NODE_TYPE_ARRAY);
      auto node = parser->ast()->createNodeKShortestPaths(arangodb::graph::ShortestPathType::Type::KPaths, variablesNode, graphInfoNode);
      parser->ast()->addOperation(node);
    }
#line 3080 "Aql/grammar.cpp"
    break;

  case 51: /* filter_statement: "FILTER declaration" expression  */
#line 851 "Aql/grammar.y"
                        {
      // operand is a reference. can use it directly
      auto node = parser->ast()->createNodeFilter((yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 3090 "Aql/grammar.cpp"
    break;

  case 52: /* let_statement: "LET declaration" let_list  */
#line 859 "Aql/grammar.y"
                   {
    }
#line 3097 "Aql/grammar.cpp"
    break;

  case 53: /* let_list: let_element  */
#line 864 "Aql/grammar.y"
                {
    }
#line 3104 "Aql/grammar.cpp"
    break;

  case 54: /* let_list: let_list "," let_element  */
#line 866 "Aql/grammar.y"
                                 {
    }
#line 3111 "Aql/grammar.cpp"
    break;

  case 55: /* let_element: variable_name "assignment" expression  */
#line 871 "Aql/grammar.y"
                                      {
      auto node = parser->ast()->createNodeLet((yyvsp[-2].strval).value, (yyvsp[-2].strval).length, (yyvsp[0].node), true);
      parser->ast()->addOperation(node);
    }
#line 3120 "Aql/grammar.cpp"
    break;

  case 56: /* count_into: "WITH keyword" "identifier" "INTO keyword" variable_name  */
#line 878 "Aql/grammar.y"
                                         {
      std::string_view operation((yyvsp[-2].strval).value, (yyvsp[-2].strval).length);
      if (!::caseInsensitiveEqual(operation, "COUNT")) {
        parser->registerParseError(TRI_ERROR_QUERY_PARSE, "unexpected qualifier '%s', expecting 'COUNT'", operation, yylloc.first_line, yylloc.first_column);
      }

      (yyval.strval) = (yyvsp[0].strval);
    }
#line 3133 "Aql/grammar.cpp"
    break;

  case 57: /* $@4: %empty  */
#line 889 "Aql/grammar.y"
              {
      auto node = parser->ast()->createNodeArray();
      parser->pushStack(node);
    }
#line 3142 "Aql/grammar.cpp"
    break;

  case 58: /* collect_variable_list: "COLLECT declaration" $@4 collect_list  */
#line 892 "Aql/grammar.y"
                   {
      auto list = static_cast<AstNode*>(parser->popStack());
      TRI_ASSERT(list != nullptr);
      (yyval.node) = list;
    }
#line 3152 "Aql/grammar.cpp"
    break;

  case 59: /* collect_statement: "COLLECT declaration" count_into options  */
#line 900 "Aql/grammar.y"
                                 {
      /* COLLECT WITH COUNT INTO var OPTIONS ... */
      auto scopes = parser->ast()->scopes();

      ::startCollectScope(scopes);

      // in the AST this is transformed to COLLECT AGGREGATE var = COUNT()
      auto node = parser->ast()->createNodeCollectCount(parser->ast()->createNodeArray(), (yyvsp[-1].strval).value, (yyvsp[-1].strval).length, (yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 3167 "Aql/grammar.cpp"
    break;

  case 60: /* collect_statement: collect_variable_list count_into options  */
#line 910 "Aql/grammar.y"
                                             {
      /* COLLECT var = expr WITH COUNT INTO var OPTIONS ... */
      auto scopes = parser->ast()->scopes();

      if (::startCollectScope(scopes)) {
        VarSet variables{};
        ::registerAssignVariables(parser, scopes, yylloc.first_line, yylloc.first_column, variables, (yyvsp[-2].node));
      }

      // in the AST this is transformed to COLLECT var = expr AGGREGATE var = COUNT()
      auto node = parser->ast()->createNodeCollectCount((yyvsp[-2].node), (yyvsp[-1].strval).value, (yyvsp[-1].strval).length, (yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 3185 "Aql/grammar.cpp"
    break;

  case 61: /* collect_statement: "COLLECT declaration" aggregate collect_optional_into options  */
#line 923 "Aql/grammar.y"
                                                      {
      /* AGGREGATE var = expr OPTIONS ... */
      VarSet variablesIntroduced{};
      auto scopes = parser->ast()->scopes();

      if (::startCollectScope(scopes)) {
        ::registerAssignVariables(parser, scopes, yylloc.first_line, yylloc.first_column, variablesIntroduced, (yyvsp[-2].node));
      }

      // validate aggregates
      if (!::validateAggregates(parser, (yyvsp[-2].node), yylloc.first_line, yylloc.first_column)) {
        YYABORT;
      }

      if ((yyvsp[-1].node) != nullptr && (yyvsp[-1].node)->type == NODE_TYPE_ARRAY) {
        ::checkIntoVariables(parser, (yyvsp[-1].node)->getMember(1), yylloc.first_line, yylloc.first_column, variablesIntroduced);
      }

      AstNode const* into = ::getIntoVariable(parser, (yyvsp[-1].node));
      AstNode const* intoExpression = ::getIntoExpression((yyvsp[-1].node));

      auto node = parser->ast()->createNodeCollect(parser->ast()->createNodeArray(), (yyvsp[-2].node), into, intoExpression, nullptr, (yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 3214 "Aql/grammar.cpp"
    break;

  case 62: /* collect_statement: collect_variable_list aggregate collect_optional_into options  */
#line 947 "Aql/grammar.y"
                                                                  {
      /* COLLECT var = expr AGGREGATE var = expr OPTIONS ... */
      VarSet variablesIntroduced{};
      auto scopes = parser->ast()->scopes();

      if (::startCollectScope(scopes)) {
        ::registerAssignVariables(parser, scopes, yylloc.first_line, yylloc.first_column, variablesIntroduced, (yyvsp[-3].node));
        ::registerAssignVariables(parser, scopes, yylloc.first_line, yylloc.first_column, variablesIntroduced, (yyvsp[-2].node));
      }

      if (!::validateAggregates(parser, (yyvsp[-2].node), yylloc.first_line, yylloc.first_column)) {
        YYABORT;
      }

      if ((yyvsp[-1].node) != nullptr && (yyvsp[-1].node)->type == NODE_TYPE_ARRAY) {
        ::checkIntoVariables(parser, (yyvsp[-1].node)->getMember(1), yylloc.first_line, yylloc.first_column, variablesIntroduced);
      }

      // note all group variables
      VarSet groupVars{};
      size_t n = (yyvsp[-3].node)->numMembers();
      for (size_t i = 0; i < n; ++i) {
        auto member = (yyvsp[-3].node)->getMember(i);

        if (member != nullptr) {
          TRI_ASSERT(member->type == NODE_TYPE_ASSIGN);
          groupVars.emplace(static_cast<Variable const*>(member->getMember(0)->getData()));
        }
      }

      // now validate if any aggregate refers to one of the group variables
      n = (yyvsp[-2].node)->numMembers();
      for (size_t i = 0; i < n; ++i) {
        auto member = (yyvsp[-2].node)->getMember(i);

        if (member != nullptr) {
          TRI_ASSERT(member->type == NODE_TYPE_ASSIGN);
          VarSet variablesUsed{};
          Ast::getReferencedVariables(member->getMember(1), variablesUsed);

          for (auto& it : groupVars) {
            if (variablesUsed.find(it) != variablesUsed.end()) {
              parser->registerParseError(TRI_ERROR_QUERY_VARIABLE_NAME_UNKNOWN,
                "use of unknown variable '%s' in AGGREGATE expression", it->name, yylloc.first_line, yylloc.first_column);
              break;
            }
          }
        }
      }

      AstNode const* into = ::getIntoVariable(parser, (yyvsp[-1].node));
      AstNode const* intoExpression = ::getIntoExpression((yyvsp[-1].node));

      auto node = parser->ast()->createNodeCollect((yyvsp[-3].node), (yyvsp[-2].node), into, intoExpression, nullptr, (yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 3275 "Aql/grammar.cpp"
    break;

  case 63: /* collect_statement: collect_variable_list collect_optional_into options  */
#line 1003 "Aql/grammar.y"
                                                        {
      /* COLLECT var = expr INTO var OPTIONS ... */
      VarSet variablesIntroduced{};
      auto scopes = parser->ast()->scopes();

      if (::startCollectScope(scopes)) {
        ::registerAssignVariables(parser, scopes, yylloc.first_line, yylloc.first_column, variablesIntroduced, (yyvsp[-2].node));
      }

      if ((yyvsp[-1].node) != nullptr && (yyvsp[-1].node)->type == NODE_TYPE_ARRAY) {
        ::checkIntoVariables(parser, (yyvsp[-1].node)->getMember(1), yylloc.first_line, yylloc.first_column, variablesIntroduced);
      }

      AstNode const* into = ::getIntoVariable(parser, (yyvsp[-1].node));
      AstNode const* intoExpression = ::getIntoExpression((yyvsp[-1].node));

      auto node = parser->ast()->createNodeCollect((yyvsp[-2].node), parser->ast()->createNodeArray(), into, intoExpression, nullptr, (yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 3299 "Aql/grammar.cpp"
    break;

  case 64: /* collect_statement: collect_variable_list collect_optional_into keep options  */
#line 1022 "Aql/grammar.y"
                                                             {
      /* COLLECT var = expr INTO var KEEP ... OPTIONS ... */
      VarSet variablesIntroduced{};
      auto scopes = parser->ast()->scopes();

      if (::startCollectScope(scopes)) {
        ::registerAssignVariables(parser, scopes, yylloc.first_line, yylloc.first_column, variablesIntroduced, (yyvsp[-3].node));
      }

      if ((yyvsp[-2].node) == nullptr &&
          (yyvsp[-1].node) != nullptr) {
        parser->registerParseError(TRI_ERROR_QUERY_PARSE, "use of 'KEEP' without 'INTO'", yylloc.first_line, yylloc.first_column);
      }

      if ((yyvsp[-2].node) != nullptr && (yyvsp[-2].node)->type == NODE_TYPE_ARRAY) {
        ::checkIntoVariables(parser, (yyvsp[-2].node)->getMember(1), yylloc.first_line, yylloc.first_column, variablesIntroduced);
      }

      AstNode const* into = ::getIntoVariable(parser, (yyvsp[-2].node));
      AstNode const* intoExpression = ::getIntoExpression((yyvsp[-2].node));

      auto node = parser->ast()->createNodeCollect((yyvsp[-3].node), parser->ast()->createNodeArray(), into, intoExpression, (yyvsp[-1].node), (yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 3328 "Aql/grammar.cpp"
    break;

  case 65: /* collect_list: collect_element  */
#line 1049 "Aql/grammar.y"
                    {
    }
#line 3335 "Aql/grammar.cpp"
    break;

  case 66: /* collect_list: collect_list "," collect_element  */
#line 1051 "Aql/grammar.y"
                                         {
    }
#line 3342 "Aql/grammar.cpp"
    break;

  case 67: /* collect_element: variable_name "assignment" expression  */
#line 1056 "Aql/grammar.y"
                                      {
      auto node = parser->ast()->createNodeAssign((yyvsp[-2].strval).value, (yyvsp[-2].strval).length, (yyvsp[0].node));
      parser->pushArrayElement(node);
    }
#line 3351 "Aql/grammar.cpp"
    break;

  case 68: /* collect_optional_into: %empty  */
#line 1063 "Aql/grammar.y"
                {
      (yyval.node) = nullptr;
    }
#line 3359 "Aql/grammar.cpp"
    break;

  case 69: /* collect_optional_into: "INTO keyword" variable_name  */
#line 1066 "Aql/grammar.y"
                         {
      (yyval.node) = parser->ast()->createNodeValueString((yyvsp[0].strval).value, (yyvsp[0].strval).length);
    }
#line 3367 "Aql/grammar.cpp"
    break;

  case 70: /* collect_optional_into: "INTO keyword" variable_name "assignment" expression  */
#line 1069 "Aql/grammar.y"
                                             {
      auto node = parser->ast()->createNodeArray();
      node->addMember(parser->ast()->createNodeValueString((yyvsp[-2].strval).value, (yyvsp[-2].strval).length));
      node->addMember((yyvsp[0].node));
      (yyval.node) = node;
    }
#line 3378 "Aql/grammar.cpp"
    break;

  case 71: /* variable_list: variable_name  */
#line 1078 "Aql/grammar.y"
                  {
      std::string_view variableName((yyvsp[0].strval).value, (yyvsp[0].strval).length);
      if (! parser->ast()->scopes()->existsVariable(variableName)) {
        parser->registerParseError(TRI_ERROR_QUERY_PARSE, "use of unknown variable '%s' for KEEP", variableName, yylloc.first_line, yylloc.first_column);
      }

      auto node = parser->ast()->createNodeReference(variableName);
      TRI_ASSERT(node != nullptr);

      // indicate the this node is a reference to the variable name, not the variable value
      node->setFlag(FLAG_KEEP_VARIABLENAME);
      parser->pushArrayElement(node);
    }
#line 3396 "Aql/grammar.cpp"
    break;

  case 72: /* variable_list: variable_list "," variable_name  */
#line 1091 "Aql/grammar.y"
                                        {
      std::string_view variableName((yyvsp[0].strval).value, (yyvsp[0].strval).length);
      if (! parser->ast()->scopes()->existsVariable(variableName)) {
        parser->registerParseError(TRI_ERROR_QUERY_PARSE, "use of unknown variable '%s' for KEEP", variableName, yylloc.first_line, yylloc.first_column);
      }

      auto node = parser->ast()->createNodeReference(variableName);
      TRI_ASSERT(node != nullptr);

      // indicate the this node is a reference to the variable name, not the variable value
      node->setFlag(FLAG_KEEP_VARIABLENAME);
      parser->pushArrayElement(node);
    }
#line 3414 "Aql/grammar.cpp"
    break;

  case 73: /* $@5: %empty  */
#line 1107 "Aql/grammar.y"
             {
      std::string_view operation((yyvsp[0].strval).value, (yyvsp[0].strval).length);
      if (!::caseInsensitiveEqual(operation, "KEEP")) {
        parser->registerParseError(TRI_ERROR_QUERY_PARSE, "unexpected qualifier '%s', expecting 'KEEP'", operation, yylloc.first_line, yylloc.first_column);
      }

      auto node = parser->ast()->createNodeArray();
      parser->pushStack(node);
    }
#line 3428 "Aql/grammar.cpp"
    break;

  case 74: /* keep: "identifier" $@5 variable_list  */
#line 1115 "Aql/grammar.y"
                    {
      auto list = static_cast<AstNode*>(parser->popStack());
      (yyval.node) = list;
    }
#line 3437 "Aql/grammar.cpp"
    break;

  case 75: /* $@6: %empty  */
#line 1122 "Aql/grammar.y"
                {
      auto node = parser->ast()->createNodeArray();
      parser->pushStack(node);
    }
#line 3446 "Aql/grammar.cpp"
    break;

  case 76: /* aggregate: "AGGREGATE keyword" $@6 aggregate_list  */
#line 1125 "Aql/grammar.y"
                     {
      auto list = static_cast<AstNode*>(parser->popStack());
      (yyval.node) = list;
    }
#line 3455 "Aql/grammar.cpp"
    break;

  case 77: /* aggregate_list: aggregate_element  */
#line 1132 "Aql/grammar.y"
                      {
    }
#line 3462 "Aql/grammar.cpp"
    break;

  case 78: /* aggregate_list: aggregate_list "," aggregate_element  */
#line 1134 "Aql/grammar.y"
                                             {
    }
#line 3469 "Aql/grammar.cpp"
    break;

  case 79: /* aggregate_element: variable_name "assignment" aggregate_function_call  */
#line 1139 "Aql/grammar.y"
                                                   {
      auto node = parser->ast()->createNodeAssign((yyvsp[-2].strval).value, (yyvsp[-2].strval).length, (yyvsp[0].node));
      parser->pushArrayElement(node);
    }
#line 3478 "Aql/grammar.cpp"
    break;

  case 80: /* $@7: %empty  */
#line 1146 "Aql/grammar.y"
                         {
      parser->pushStack((yyvsp[-1].strval).value);
      auto node = parser->ast()->createNodeArray();
      parser->pushStack(node);
    }
#line 3488 "Aql/grammar.cpp"
    break;

  case 81: /* aggregate_function_call: function_name "(" $@7 optional_function_call_arguments ")"  */
#line 1150 "Aql/grammar.y"
                                                              {
      auto list = static_cast<AstNode const*>(parser->popStack());
      // this works because the function name here is always NUL-terminated
      (yyval.node) = parser->ast()->createNodeAggregateFunctionCall(static_cast<char const*>(parser->popStack()), list);
    }
#line 3498 "Aql/grammar.cpp"
    break;

  case 82: /* $@8: %empty  */
#line 1158 "Aql/grammar.y"
           {
      auto node = parser->ast()->createNodeArray();
      parser->pushStack(node);
    }
#line 3507 "Aql/grammar.cpp"
    break;

  case 83: /* sort_statement: "SORT declaration" $@8 sort_list  */
#line 1161 "Aql/grammar.y"
                {
      auto list = static_cast<AstNode const*>(parser->popStack());
      auto node = parser->ast()->createNodeSort(list);
      parser->ast()->addOperation(node);
    }
#line 3517 "Aql/grammar.cpp"
    break;

  case 84: /* sort_list: sort_element  */
#line 1169 "Aql/grammar.y"
                 {
      parser->pushArrayElement((yyvsp[0].node));
    }
#line 3525 "Aql/grammar.cpp"
    break;

  case 85: /* sort_list: sort_list "," sort_element  */
#line 1172 "Aql/grammar.y"
                                   {
      parser->pushArrayElement((yyvsp[0].node));
    }
#line 3533 "Aql/grammar.cpp"
    break;

  case 86: /* sort_element: expression sort_direction  */
#line 1178 "Aql/grammar.y"
                              {
      (yyval.node) = parser->ast()->createNodeSortElement((yyvsp[-1].node), (yyvsp[0].node));
    }
#line 3541 "Aql/grammar.cpp"
    break;

  case 87: /* sort_direction: %empty  */
#line 1184 "Aql/grammar.y"
                {
      (yyval.node) = parser->ast()->createNodeValueBool(true);
    }
#line 3549 "Aql/grammar.cpp"
    break;

  case 88: /* sort_direction: "ASC keyword"  */
#line 1187 "Aql/grammar.y"
          {
      (yyval.node) = parser->ast()->createNodeValueBool(true);
    }
#line 3557 "Aql/grammar.cpp"
    break;

  case 89: /* sort_direction: "DESC keyword"  */
#line 1190 "Aql/grammar.y"
           {
      (yyval.node) = parser->ast()->createNodeValueBool(false);
    }
#line 3565 "Aql/grammar.cpp"
    break;

  case 90: /* sort_direction: simple_value  */
#line 1193 "Aql/grammar.y"
                 {
      (yyval.node) = (yyvsp[0].node);
    }
#line 3573 "Aql/grammar.cpp"
    break;

  case 91: /* limit_statement: "LIMIT declaration" expression  */
#line 1199 "Aql/grammar.y"
                       {
      auto offset = parser->ast()->createNodeValueInt(0);
      auto node = parser->ast()->createNodeLimit(offset, (yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 3583 "Aql/grammar.cpp"
    break;

  case 92: /* limit_statement: "LIMIT declaration" expression "," expression  */
#line 1204 "Aql/grammar.y"
                                          {
      auto node = parser->ast()->createNodeLimit((yyvsp[-2].node), (yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 3592 "Aql/grammar.cpp"
    break;

  case 93: /* window_statement: "WINDOW declaration" object aggregate  */
#line 1211 "Aql/grammar.y"
                              {
      /* WINDOW {preceding:2, following:2} AGGREGATE x = AVG(x) */
      
      // validate aggregates
      if (!::validateAggregates(parser, (yyvsp[0].node), yylloc.first_line, yylloc.first_column)) {
        YYABORT;
      }
      
      if (!::validateWindowSpec(parser, (yyvsp[-1].node), yylloc.first_line, yylloc.first_column)) {
        YYABORT;
      }
      
      auto node = parser->ast()->createNodeWindow(/*spec*/(yyvsp[-1].node), /*range*/nullptr, /*aggrs*/(yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 3612 "Aql/grammar.cpp"
    break;

  case 94: /* window_statement: "WINDOW declaration" expression "WITH keyword" object aggregate  */
#line 1226 "Aql/grammar.y"
                                                {
    /* WINDOW rangeVar WITH {preceding:"1d", following:"1d"} AGGREGATE x = AVG(x) */
    
    // validate aggregates
    if (!::validateAggregates(parser, (yyvsp[0].node), yylloc.first_line, yylloc.first_column)) {
      YYABORT;
    }
    
    if (!::validateWindowSpec(parser, (yyvsp[-1].node), yylloc.first_line, yylloc.first_column)) {
      YYABORT;
    }
    
    auto node = parser->ast()->createNodeWindow(/*spec*/(yyvsp[-1].node), /*range*/(yyvsp[-3].node), /*aggrs*/(yyvsp[0].node));
    parser->ast()->addOperation(node);
  }
#line 3632 "Aql/grammar.cpp"
    break;

  case 95: /* return_statement: "RETURN declaration" distinct_expression  */
#line 1244 "Aql/grammar.y"
                                 {
      auto node = parser->ast()->createNodeReturn((yyvsp[0].node));
      parser->ast()->addOperation(node);
      parser->ast()->scopes()->endNested();
    }
#line 3642 "Aql/grammar.cpp"
    break;

  case 96: /* in_or_into_collection: "IN keyword" in_or_into_collection_name  */
#line 1252 "Aql/grammar.y"
                                    {
      (yyval.node) = (yyvsp[0].node);
    }
#line 3650 "Aql/grammar.cpp"
    break;

  case 97: /* in_or_into_collection: "INTO keyword" in_or_into_collection_name  */
#line 1255 "Aql/grammar.y"
                                      {
       (yyval.node) = (yyvsp[0].node);
     }
#line 3658 "Aql/grammar.cpp"
    break;

  case 98: /* remove_statement: "REMOVE command" expression in_or_into_collection options  */
#line 1261 "Aql/grammar.y"
                                                      {
      if (!parser->configureWriteQuery((yyvsp[-1].node), (yyvsp[0].node))) {
        YYABORT;
      }
      auto node = parser->ast()->createNodeRemove((yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 3670 "Aql/grammar.cpp"
    break;

  case 99: /* insert_statement: "INSERT command" expression in_or_into_collection options  */
#line 1271 "Aql/grammar.y"
                                                      {
      if (!parser->configureWriteQuery((yyvsp[-1].node), (yyvsp[0].node))) {
        YYABORT;
      }
      auto node = parser->ast()->createNodeInsert((yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 3682 "Aql/grammar.cpp"
    break;

  case 100: /* update_parameters: expression in_or_into_collection options  */
#line 1281 "Aql/grammar.y"
                                             {
      if (!parser->configureWriteQuery((yyvsp[-1].node), (yyvsp[0].node))) {
        YYABORT;
      }

      AstNode* node = parser->ast()->createNodeUpdate(nullptr, (yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 3695 "Aql/grammar.cpp"
    break;

  case 101: /* update_parameters: expression "WITH keyword" expression in_or_into_collection options  */
#line 1289 "Aql/grammar.y"
                                                               {
      if (!parser->configureWriteQuery((yyvsp[-1].node), (yyvsp[0].node))) {
        YYABORT;
      }

      AstNode* node = parser->ast()->createNodeUpdate((yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 3708 "Aql/grammar.cpp"
    break;

  case 102: /* update_statement: "UPDATE command" update_parameters  */
#line 1300 "Aql/grammar.y"
                               {
    }
#line 3715 "Aql/grammar.cpp"
    break;

  case 103: /* replace_parameters: expression in_or_into_collection options  */
#line 1305 "Aql/grammar.y"
                                             {
      if (!parser->configureWriteQuery((yyvsp[-1].node), (yyvsp[0].node))) {
        YYABORT;
      }

      AstNode* node = parser->ast()->createNodeReplace(nullptr, (yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 3728 "Aql/grammar.cpp"
    break;

  case 104: /* replace_parameters: expression "WITH keyword" expression in_or_into_collection options  */
#line 1313 "Aql/grammar.y"
                                                               {
      if (!parser->configureWriteQuery((yyvsp[-1].node), (yyvsp[0].node))) {
        YYABORT;
      }

      AstNode* node = parser->ast()->createNodeReplace((yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 3741 "Aql/grammar.cpp"
    break;

  case 105: /* replace_statement: "REPLACE command" replace_parameters  */
#line 1324 "Aql/grammar.y"
                                 {
    }
#line 3748 "Aql/grammar.cpp"
    break;

  case 106: /* update_or_replace: "UPDATE command"  */
#line 1329 "Aql/grammar.y"
             {
      (yyval.intval) = static_cast<int64_t>(NODE_TYPE_UPDATE);
    }
#line 3756 "Aql/grammar.cpp"
    break;

  case 107: /* update_or_replace: "REPLACE command"  */
#line 1332 "Aql/grammar.y"
              {
      (yyval.intval) = static_cast<int64_t>(NODE_TYPE_REPLACE);
    }
#line 3764 "Aql/grammar.cpp"
    break;

  case 108: /* $@9: %empty  */
#line 1338 "Aql/grammar.y"
             {
      // reserve a variable named "$OLD", we might need it in the update expression
      // and in a later return thing
      parser->pushStack(parser->ast()->createNodeVariable(Variable::NAME_OLD, true));
    }
#line 3774 "Aql/grammar.cpp"
    break;

  case 109: /* $@10: %empty  */
#line 1342 "Aql/grammar.y"
                 {
      AstNode* variableNode = static_cast<AstNode*>(parser->popStack());

      auto scopes = parser->ast()->scopes();

      scopes->start(arangodb::aql::AQL_SCOPE_SUBQUERY);
      parser->ast()->startSubQuery();

      scopes->start(arangodb::aql::AQL_SCOPE_FOR);
      std::string const variableName = parser->ast()->variables()->nextName();
      auto forNode = parser->ast()->createNodeForUpsert(variableName.c_str(), variableName.size(), parser->ast()->createNodeArray(), false);
      parser->ast()->addOperation(forNode);

      auto filterNode = parser->ast()->createNodeUpsertFilter(parser->ast()->createNodeReference(variableName), (yyvsp[0].node));
      parser->ast()->addOperation(filterNode);

      auto offsetValue = parser->ast()->createNodeValueInt(0);
      auto limitValue = parser->ast()->createNodeValueInt(1);
      auto limitNode = parser->ast()->createNodeLimit(offsetValue, limitValue);
      parser->ast()->addOperation(limitNode);

      auto refNode = parser->ast()->createNodeReference(variableName);
      auto returnNode = parser->ast()->createNodeReturn(refNode);
      parser->ast()->addOperation(returnNode);
      scopes->endNested();

      AstNode* subqueryNode = parser->ast()->endSubQuery();
      scopes->endCurrent();

      std::string const subqueryName = parser->ast()->variables()->nextName();
      auto subQuery = parser->ast()->createNodeLet(subqueryName.c_str(), subqueryName.size(), subqueryNode, false);
      parser->ast()->addOperation(subQuery);

      auto index = parser->ast()->createNodeValueInt(0);
      auto firstDoc = parser->ast()->createNodeLet(variableNode, parser->ast()->createNodeIndexedAccess(parser->ast()->createNodeReference(subqueryName), index));
      parser->ast()->addOperation(firstDoc);

      parser->pushStack(forNode);
    }
#line 3818 "Aql/grammar.cpp"
    break;

  case 110: /* upsert_statement: "UPSERT command" $@9 expression $@10 "INSERT command" expression update_or_replace expression in_or_into_collection options  */
#line 1380 "Aql/grammar.y"
                                                                                     {
      AstNode* forNode = static_cast<AstNode*>(parser->popStack());
      forNode->changeMember(1, (yyvsp[-1].node));
      auto* forOptionsNode = parser->ast()->createNodeObject();
      auto* upsertOptionsNode = parser->ast()->createNodeObject();
      if ((yyvsp[0].node) != nullptr && (yyvsp[0].node)->type == NODE_TYPE_OBJECT) {
        for (size_t i = 0; i < (yyvsp[0].node)->numMembers(); ++i) {
          auto nodeMember = (yyvsp[0].node)->getMember(i);
          if (nodeMember->type == NODE_TYPE_OBJECT_ELEMENT) {
            std::string_view nodeMemberName = nodeMember->getStringView();
            if (nodeMemberName == "indexHint" || nodeMemberName == "forceIndexHint") {
              forOptionsNode->addMember(nodeMember);
            } else {
              upsertOptionsNode->addMember(nodeMember);
            }
          }
        }
        forNode->changeMember(2, forOptionsNode);
      }
      if (!parser->configureWriteQuery((yyvsp[-1].node), (yyvsp[0].node))) {
        YYABORT;
      }

      auto node = parser->ast()->createNodeUpsert(static_cast<AstNodeType>((yyvsp[-3].intval)), parser->ast()->createNodeReference(Variable::NAME_OLD), (yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[-1].node), upsertOptionsNode);
      parser->ast()->addOperation(node);
    }
#line 3849 "Aql/grammar.cpp"
    break;

  case 111: /* quantifier: "all modifier"  */
#line 1409 "Aql/grammar.y"
          {
      (yyval.node) = parser->ast()->createNodeQuantifier(Quantifier::ALL);
    }
#line 3857 "Aql/grammar.cpp"
    break;

  case 112: /* quantifier: "any modifier"  */
#line 1412 "Aql/grammar.y"
          {
      (yyval.node) = parser->ast()->createNodeQuantifier(Quantifier::ANY);
    }
#line 3865 "Aql/grammar.cpp"
    break;

  case 113: /* quantifier: "none modifier"  */
#line 1415 "Aql/grammar.y"
           {
      (yyval.node) = parser->ast()->createNodeQuantifier(Quantifier::NONE);
    }
#line 3873 "Aql/grammar.cpp"
    break;

  case 114: /* $@11: %empty  */
#line 1421 "Aql/grammar.y"
               {
      auto const scopeType = parser->ast()->scopes()->type();

      if (scopeType == AQL_SCOPE_MAIN ||
          scopeType == AQL_SCOPE_SUBQUERY) {
        parser->registerParseError(TRI_ERROR_QUERY_PARSE, "cannot use DISTINCT modifier on top-level query element", yylloc.first_line, yylloc.first_column);
      }
    }
#line 3886 "Aql/grammar.cpp"
    break;

  case 115: /* distinct_expression: "DISTINCT modifier" $@11 expression  */
#line 1428 "Aql/grammar.y"
                 {
      (yyval.node) = parser->ast()->createNodeDistinct((yyvsp[0].node));
    }
#line 3894 "Aql/grammar.cpp"
    break;

  case 116: /* distinct_expression: expression  */
#line 1431 "Aql/grammar.y"
               {
      (yyval.node) = (yyvsp[0].node);
    }
#line 3902 "Aql/grammar.cpp"
    break;

  case 117: /* expression: operator_unary  */
#line 1437 "Aql/grammar.y"
                   {
      (yyval.node) = (yyvsp[0].node);
    }
#line 3910 "Aql/grammar.cpp"
    break;

  case 118: /* expression: operator_binary  */
#line 1440 "Aql/grammar.y"
                    {
      (yyval.node) = (yyvsp[0].node);
    }
#line 3918 "Aql/grammar.cpp"
    break;

  case 119: /* expression: operator_ternary  */
#line 1443 "Aql/grammar.y"
                     {
      (yyval.node) = (yyvsp[0].node);
    }
#line 3926 "Aql/grammar.cpp"
    break;

  case 120: /* expression: value_literal  */
#line 1446 "Aql/grammar.y"
                  {
      (yyval.node) = (yyvsp[0].node);
    }
#line 3934 "Aql/grammar.cpp"
    break;

  case 121: /* expression: reference  */
#line 1449 "Aql/grammar.y"
              {
      (yyval.node) = (yyvsp[0].node);
    }
#line 3942 "Aql/grammar.cpp"
    break;

  case 122: /* expression: expression ".." expression  */
#line 1452 "Aql/grammar.y"
                                  {
      (yyval.node) = parser->ast()->createNodeRange((yyvsp[-2].node), (yyvsp[0].node));
    }
#line 3950 "Aql/grammar.cpp"
    break;

  case 123: /* function_name: "identifier"  */
#line 1458 "Aql/grammar.y"
             {
      (yyval.strval) = (yyvsp[0].strval);
    }
#line 3958 "Aql/grammar.cpp"
    break;

  case 124: /* function_name: function_name "::" "identifier"  */
#line 1461 "Aql/grammar.y"
                                   {
      std::string temp((yyvsp[-2].strval).value, (yyvsp[-2].strval).length);
      temp.append("::");
      temp.append((yyvsp[0].strval).value, (yyvsp[0].strval).length);
      auto p = parser->ast()->resources().registerString(temp);
      TRI_ASSERT(p != nullptr);

      (yyval.strval).value = p;
      (yyval.strval).length = temp.size();
    }
#line 3973 "Aql/grammar.cpp"
    break;

  case 125: /* $@12: %empty  */
#line 1474 "Aql/grammar.y"
                         {
      parser->pushStack((yyvsp[-1].strval).value);

      auto node = parser->ast()->createNodeArray();
      parser->pushStack(node);
    }
#line 3984 "Aql/grammar.cpp"
    break;

  case 126: /* function_call: function_name "(" $@12 optional_function_call_arguments ")"  */
#line 1479 "Aql/grammar.y"
                                                              {
      auto list = static_cast<AstNode const*>(parser->popStack());
      (yyval.node) = parser->ast()->createNodeFunctionCall(static_cast<char const*>(parser->popStack()), list, false);
    }
#line 3993 "Aql/grammar.cpp"
    break;

  case 127: /* $@13: %empty  */
#line 1483 "Aql/grammar.y"
                  {
      auto node = parser->ast()->createNodeArray();
      parser->pushStack(node);
    }
#line 4002 "Aql/grammar.cpp"
    break;

  case 128: /* function_call: "like operator" "(" $@13 optional_function_call_arguments ")"  */
#line 1486 "Aql/grammar.y"
                                                              {
      auto list = static_cast<AstNode const*>(parser->popStack());
      (yyval.node) = parser->ast()->createNodeFunctionCall("LIKE", list, false);
    }
#line 4011 "Aql/grammar.cpp"
    break;

  case 129: /* operator_unary: "+ operator" expression  */
#line 1493 "Aql/grammar.y"
                                  {
      (yyval.node) = parser->ast()->optimizeUnaryOperatorArithmetic(parser->ast()->createNodeUnaryOperator(NODE_TYPE_OPERATOR_UNARY_PLUS, (yyvsp[0].node)));
    }
#line 4019 "Aql/grammar.cpp"
    break;

  case 130: /* operator_unary: "- operator" expression  */
#line 1496 "Aql/grammar.y"
                                    {
      (yyval.node) = parser->ast()->optimizeUnaryOperatorArithmetic(parser->ast()->createNodeUnaryOperator(NODE_TYPE_OPERATOR_UNARY_MINUS, (yyvsp[0].node)));
    }
#line 4027 "Aql/grammar.cpp"
    break;

  case 131: /* operator_unary: "not operator" expression  */
#line 1499 "Aql/grammar.y"
                                     {
      (yyval.node) = parser->ast()->createNodeUnaryOperator(NODE_TYPE_OPERATOR_UNARY_NOT, (yyvsp[0].node));
    }
#line 4035 "Aql/grammar.cpp"
    break;

  case 132: /* operator_binary: expression "or operator" expression  */
#line 1505 "Aql/grammar.y"
                               {
      (yyval.node) = parser->ast()->createNodeBinaryOperator(NODE_TYPE_OPERATOR_BINARY_OR, (yyvsp[-2].node), (yyvsp[0].node));
    }
#line 4043 "Aql/grammar.cpp"
    break;

  case 133: /* operator_binary: expression "and operator" expression  */
#line 1508 "Aql/grammar.y"
                                {
      (yyval.node) = parser->ast()->createNodeBinaryOperator(NODE_TYPE_OPERATOR_BINARY_AND, (yyvsp[-2].node), (yyvsp[0].node));
    }
#line 4051 "Aql/grammar.cpp"
    break;

  case 134: /* operator_binary: expression "+ operator" expression  */
#line 1511 "Aql/grammar.y"
                                 {
      (yyval.node) = parser->ast()->createNodeBinaryOperator(NODE_TYPE_OPERATOR_BINARY_PLUS, (yyvsp[-2].node), (yyvsp[0].node));
    }
#line 4059 "Aql/grammar.cpp"
    break;

  case 135: /* operator_binary: expression "- operator" expression  */
#line 1514 "Aql/grammar.y"
                                  {
      (yyval.node) = parser->ast()->createNodeBinaryOperator(NODE_TYPE_OPERATOR_BINARY_MINUS, (yyvsp[-2].node), (yyvsp[0].node));
    }
#line 4067 "Aql/grammar.cpp"
    break;

  case 136: /* operator_binary: expression "* operator" expression  */
#line 1517 "Aql/grammar.y"
                                  {
      (yyval.node) = parser->ast()->createNodeBinaryOperator(NODE_TYPE_OPERATOR_BINARY_TIMES, (yyvsp[-2].node), (yyvsp[0].node));
    }
#line 4075 "Aql/grammar.cpp"
    break;

  case 137: /* operator_binary: expression "/ operator" expression  */
#line 1520 "Aql/grammar.y"
                                {
      (yyval.node) = parser->ast()->createNodeBinaryOperator(NODE_TYPE_OPERATOR_BINARY_DIV, (yyvsp[-2].node), (yyvsp[0].node));
    }
#line 4083 "Aql/grammar.cpp"
    break;

  case 138: /* operator_binary: expression "% operator" expression  */
#line 1523 "Aql/grammar.y"
                                {
      (yyval.node) = parser->ast()->createNodeBinaryOperator(NODE_TYPE_OPERATOR_BINARY_MOD, (yyvsp[-2].node), (yyvsp[0].node));
    }
#line 4091 "Aql/grammar.cpp"
    break;

  case 139: /* operator_binary: expression "== operator" expression  */
#line 1526 "Aql/grammar.y"
                               {
      (yyval.node) = parser->ast()->createNodeBinaryOperator(NODE_TYPE_OPERATOR_BINARY_EQ, (yyvsp[-2].node), (yyvsp[0].node));
    }
#line 4099 "Aql/grammar.cpp"
    break;

  case 140: /* operator_binary: expression "!= operator" expression  */
#line 1529 "Aql/grammar.y"
                               {
      (yyval.node) = parser->ast()->createNodeBinaryOperator(NODE_TYPE_OPERATOR_BINARY_NE, (yyvsp[-2].node), (yyvsp[0].node));
    }
#line 4107 "Aql/grammar.cpp"
    break;

  case 141: /* operator_binary: expression "< operator" expression  */
#line 1532 "Aql/grammar.y"
                               {
      (yyval.node) = parser->ast()->createNodeBinaryOperator(NODE_TYPE_OPERATOR_BINARY_LT, (yyvsp[-2].node), (yyvsp[0].node));
    }
#line 4115 "Aql/grammar.cpp"
    break;

  case 142: /* operator_binary: expression "> operator" expression  */
#line 1535 "Aql/grammar.y"
                               {
      (yyval.node) = parser->ast()->createNodeBinaryOperator(NODE_TYPE_OPERATOR_BINARY_GT, (yyvsp[-2].node), (yyvsp[0].node));
    }
#line 4123 "Aql/grammar.cpp"
    break;

  case 143: /* operator_binary: expression "<= operator" expression  */
#line 1538 "Aql/grammar.y"
                               {
      (yyval.node) = parser->ast()->createNodeBinaryOperator(NODE_TYPE_OPERATOR_BINARY_LE, (yyvsp[-2].node), (yyvsp[0].node));
    }
#line 4131 "Aql/grammar.cpp"
    break;

  case 144: /* operator_binary: expression ">= operator" expression  */
#line 1541 "Aql/grammar.y"
                               {
      (yyval.node) = parser->ast()->createNodeBinaryOperator(NODE_TYPE_OPERATOR_BINARY_GE, (yyvsp[-2].node), (yyvsp[0].node));
    }
#line 4139 "Aql/grammar.cpp"
    break;

  case 145: /* operator_binary: expression "IN keyword" expression  */
#line 1544 "Aql/grammar.y"
                               {
      (yyval.node) = parser->ast()->createNodeBinaryOperator(NODE_TYPE_OPERATOR_BINARY_IN, (yyvsp[-2].node), (yyvsp[0].node));
    }
#line 4147 "Aql/grammar.cpp"
    break;

  case 146: /* operator_binary: expression "not operator" "IN keyword" expression  */
#line 1547 "Aql/grammar.y"
                                     {
      (yyval.node) = parser->ast()->createNodeBinaryOperator(NODE_TYPE_OPERATOR_BINARY_NIN, (yyvsp[-3].node), (yyvsp[0].node));
    }
#line 4155 "Aql/grammar.cpp"
    break;

  case 147: /* operator_binary: expression "not operator" "like operator" expression  */
#line 1550 "Aql/grammar.y"
                                       {
      AstNode* arguments = parser->ast()->createNodeArray(2);
      arguments->addMember((yyvsp[-3].node));
      arguments->addMember((yyvsp[0].node));
      AstNode* expression = parser->ast()->createNodeFunctionCall("LIKE", arguments, false);
      (yyval.node) = parser->ast()->createNodeUnaryOperator(NODE_TYPE_OPERATOR_UNARY_NOT, expression);
    }
#line 4167 "Aql/grammar.cpp"
    break;

  case 148: /* operator_binary: expression "not operator" "~= operator" expression  */
#line 1557 "Aql/grammar.y"
                                              {
      AstNode* arguments = parser->ast()->createNodeArray(2);
      arguments->addMember((yyvsp[-3].node));
      arguments->addMember((yyvsp[0].node));
      AstNode* expression = parser->ast()->createNodeFunctionCall("REGEX_TEST", arguments, false);
      (yyval.node) = parser->ast()->createNodeUnaryOperator(NODE_TYPE_OPERATOR_UNARY_NOT, expression);
    }
#line 4179 "Aql/grammar.cpp"
    break;

  case 149: /* operator_binary: expression "not operator" "~! operator" expression  */
#line 1564 "Aql/grammar.y"
                                                  {
      AstNode* arguments = parser->ast()->createNodeArray(2);
      arguments->addMember((yyvsp[-3].node));
      arguments->addMember((yyvsp[0].node));
      (yyval.node) = parser->ast()->createNodeFunctionCall("REGEX_TEST", arguments, false);
    }
#line 4190 "Aql/grammar.cpp"
    break;

  case 150: /* operator_binary: expression "like operator" expression  */
#line 1570 "Aql/grammar.y"
                                 {
      AstNode* arguments = parser->ast()->createNodeArray(2);
      arguments->addMember((yyvsp[-2].node));
      arguments->addMember((yyvsp[0].node));
      (yyval.node) = parser->ast()->createNodeFunctionCall("LIKE", arguments, false);
    }
#line 4201 "Aql/grammar.cpp"
    break;

  case 151: /* operator_binary: expression "~= operator" expression  */
#line 1576 "Aql/grammar.y"
                                        {
      AstNode* arguments = parser->ast()->createNodeArray(2);
      arguments->addMember((yyvsp[-2].node));
      arguments->addMember((yyvsp[0].node));
      (yyval.node) = parser->ast()->createNodeFunctionCall("REGEX_TEST", arguments, false);
    }
#line 4212 "Aql/grammar.cpp"
    break;

  case 152: /* operator_binary: expression "~! operator" expression  */
#line 1582 "Aql/grammar.y"
                                            {
      AstNode* arguments = parser->ast()->createNodeArray(2);
      arguments->addMember((yyvsp[-2].node));
      arguments->addMember((yyvsp[0].node));
      AstNode* node = parser->ast()->createNodeFunctionCall("REGEX_TEST", arguments, false);
      (yyval.node) = parser->ast()->createNodeUnaryOperator(NODE_TYPE_OPERATOR_UNARY_NOT, node);
    }
#line 4224 "Aql/grammar.cpp"
    break;

  case 153: /* operator_binary: expression quantifier "== operator" expression  */
#line 1589 "Aql/grammar.y"
                                          {
      (yyval.node) = parser->ast()->createNodeBinaryArrayOperator(NODE_TYPE_OPERATOR_BINARY_ARRAY_EQ, (yyvsp[-3].node), (yyvsp[0].node), (yyvsp[-2].node));
    }
#line 4232 "Aql/grammar.cpp"
    break;

  case 154: /* operator_binary: expression quantifier "!= operator" expression  */
#line 1592 "Aql/grammar.y"
                                          {
      (yyval.node) = parser->ast()->createNodeBinaryArrayOperator(NODE_TYPE_OPERATOR_BINARY_ARRAY_NE, (yyvsp[-3].node), (yyvsp[0].node), (yyvsp[-2].node));
    }
#line 4240 "Aql/grammar.cpp"
    break;

  case 155: /* operator_binary: expression quantifier "< operator" expression  */
#line 1595 "Aql/grammar.y"
                                          {
      (yyval.node) = parser->ast()->createNodeBinaryArrayOperator(NODE_TYPE_OPERATOR_BINARY_ARRAY_LT, (yyvsp[-3].node), (yyvsp[0].node), (yyvsp[-2].node));
    }
#line 4248 "Aql/grammar.cpp"
    break;

  case 156: /* operator_binary: expression quantifier "> operator" expression  */
#line 1598 "Aql/grammar.y"
                                          {
      (yyval.node) = parser->ast()->createNodeBinaryArrayOperator(NODE_TYPE_OPERATOR_BINARY_ARRAY_GT, (yyvsp[-3].node), (yyvsp[0].node), (yyvsp[-2].node));
    }
#line 4256 "Aql/grammar.cpp"
    break;

  case 157: /* operator_binary: expression quantifier "<= operator" expression  */
#line 1601 "Aql/grammar.y"
                                          {
      (yyval.node) = parser->ast()->createNodeBinaryArrayOperator(NODE_TYPE_OPERATOR_BINARY_ARRAY_LE, (yyvsp[-3].node), (yyvsp[0].node), (yyvsp[-2].node));
    }
#line 4264 "Aql/grammar.cpp"
    break;

  case 158: /* operator_binary: expression quantifier ">= operator" expression  */
#line 1604 "Aql/grammar.y"
                                          {
      (yyval.node) = parser->ast()->createNodeBinaryArrayOperator(NODE_TYPE_OPERATOR_BINARY_ARRAY_GE, (yyvsp[-3].node), (yyvsp[0].node), (yyvsp[-2].node));
    }
#line 4272 "Aql/grammar.cpp"
    break;

  case 159: /* operator_binary: expression quantifier "IN keyword" expression  */
#line 1607 "Aql/grammar.y"
                                          {
      (yyval.node) = parser->ast()->createNodeBinaryArrayOperator(NODE_TYPE_OPERATOR_BINARY_ARRAY_IN, (yyvsp[-3].node), (yyvsp[0].node), (yyvsp[-2].node));
    }
#line 4280 "Aql/grammar.cpp"
    break;

  case 160: /* operator_binary: expression "all modifier" "not operator" "IN keyword" expression  */
#line 1610 "Aql/grammar.y"
                                           {
      auto quantifier = parser->ast()->createNodeQuantifier(Quantifier::ALL);
      (yyval.node) = parser->ast()->createNodeBinaryArrayOperator(NODE_TYPE_OPERATOR_BINARY_ARRAY_NIN, (yyvsp[-4].node), (yyvsp[0].node), quantifier);
    }
#line 4289 "Aql/grammar.cpp"
    break;

  case 161: /* operator_binary: expression "any modifier" "not operator" "IN keyword" expression  */
#line 1614 "Aql/grammar.y"
                                           {
      auto quantifier = parser->ast()->createNodeQuantifier(Quantifier::ANY);
      (yyval.node) = parser->ast()->createNodeBinaryArrayOperator(NODE_TYPE_OPERATOR_BINARY_ARRAY_NIN, (yyvsp[-4].node), (yyvsp[0].node), quantifier);
    }
#line 4298 "Aql/grammar.cpp"
    break;

  case 162: /* operator_binary: expression "none modifier" "not operator" "IN keyword" expression  */
#line 1618 "Aql/grammar.y"
                                            {
      auto quantifier = parser->ast()->createNodeQuantifier(Quantifier::NONE);
      (yyval.node) = parser->ast()->createNodeBinaryArrayOperator(NODE_TYPE_OPERATOR_BINARY_ARRAY_NIN, (yyvsp[-4].node), (yyvsp[0].node), quantifier);
    }
#line 4307 "Aql/grammar.cpp"
    break;

  case 163: /* operator_ternary: expression "?" expression ":" expression  */
#line 1625 "Aql/grammar.y"
                                                        {
      (yyval.node) = parser->ast()->createNodeTernaryOperator((yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[0].node));
    }
#line 4315 "Aql/grammar.cpp"
    break;

  case 164: /* operator_ternary: expression "?" ":" expression  */
#line 1628 "Aql/grammar.y"
                                             {
      (yyval.node) = parser->ast()->createNodeTernaryOperator((yyvsp[-3].node), (yyvsp[0].node));
    }
#line 4323 "Aql/grammar.cpp"
    break;

  case 165: /* optional_function_call_arguments: %empty  */
#line 1634 "Aql/grammar.y"
                {
    }
#line 4330 "Aql/grammar.cpp"
    break;

  case 166: /* optional_function_call_arguments: function_arguments_list  */
#line 1636 "Aql/grammar.y"
                            {
    }
#line 4337 "Aql/grammar.cpp"
    break;

  case 167: /* expression_or_query: expression  */
#line 1641 "Aql/grammar.y"
               {
      (yyval.node) = (yyvsp[0].node);
    }
#line 4345 "Aql/grammar.cpp"
    break;

  case 168: /* $@14: %empty  */
#line 1644 "Aql/grammar.y"
    {
      parser->ast()->scopes()->start(arangodb::aql::AQL_SCOPE_SUBQUERY);
      parser->ast()->startSubQuery();
    }
#line 4354 "Aql/grammar.cpp"
    break;

  case 169: /* expression_or_query: $@14 query  */
#line 1647 "Aql/grammar.y"
            {
      AstNode* node = parser->ast()->endSubQuery();
      parser->ast()->scopes()->endCurrent();

      std::string const variableName = parser->ast()->variables()->nextName();
      auto subQuery = parser->ast()->createNodeLet(variableName.c_str(), variableName.size(), node, false);
      parser->ast()->addOperation(subQuery);

      (yyval.node) = parser->ast()->createNodeSubqueryReference(variableName);
    }
#line 4369 "Aql/grammar.cpp"
    break;

  case 170: /* function_arguments_list: expression_or_query  */
#line 1660 "Aql/grammar.y"
                        {
      parser->pushArrayElement((yyvsp[0].node));
    }
#line 4377 "Aql/grammar.cpp"
    break;

  case 171: /* function_arguments_list: function_arguments_list "," expression_or_query  */
#line 1663 "Aql/grammar.y"
                                                        {
      parser->pushArrayElement((yyvsp[0].node));
    }
#line 4385 "Aql/grammar.cpp"
    break;

  case 172: /* compound_value: array  */
#line 1669 "Aql/grammar.y"
          {
      (yyval.node) = (yyvsp[0].node);
    }
#line 4393 "Aql/grammar.cpp"
    break;

  case 173: /* compound_value: object  */
#line 1672 "Aql/grammar.y"
           {
      (yyval.node) = (yyvsp[0].node);
    }
#line 4401 "Aql/grammar.cpp"
    break;

  case 174: /* $@15: %empty  */
#line 1678 "Aql/grammar.y"
                 {
      auto node = parser->ast()->createNodeArray();
      parser->pushArray(node);
    }
#line 4410 "Aql/grammar.cpp"
    break;

  case 175: /* array: "[" $@15 optional_array_elements "]"  */
#line 1681 "Aql/grammar.y"
                                            {
      (yyval.node) = parser->popArray();
    }
#line 4418 "Aql/grammar.cpp"
    break;

  case 176: /* optional_array_elements: %empty  */
#line 1687 "Aql/grammar.y"
                {
    }
#line 4425 "Aql/grammar.cpp"
    break;

  case 177: /* optional_array_elements: array_elements_list  */
#line 1689 "Aql/grammar.y"
                        {
    }
#line 4432 "Aql/grammar.cpp"
    break;

  case 178: /* optional_array_elements: array_elements_list ","  */
#line 1691 "Aql/grammar.y"
                                {
    }
#line 4439 "Aql/grammar.cpp"
    break;

  case 179: /* array_elements_list: array_element  */
#line 1696 "Aql/grammar.y"
                  {
    }
#line 4446 "Aql/grammar.cpp"
    break;

  case 180: /* array_elements_list: array_elements_list "," array_element  */
#line 1698 "Aql/grammar.y"
                                              {
    }
#line 4453 "Aql/grammar.cpp"
    break;

  case 181: /* array_element: expression  */
#line 1703 "Aql/grammar.y"
               {
      parser->pushArrayElement((yyvsp[0].node));
    }
#line 4461 "Aql/grammar.cpp"
    break;

  case 182: /* for_options: %empty  */
#line 1709 "Aql/grammar.y"
                {
      (yyval.node) = nullptr;
    }
#line 4469 "Aql/grammar.cpp"
    break;

  case 183: /* for_options: "identifier" expression  */
#line 1712 "Aql/grammar.y"
                        {
      std::string_view operation((yyvsp[-1].strval).value, (yyvsp[-1].strval).length);
      TRI_ASSERT((yyvsp[0].node) != nullptr);
      // we always return an array with two values: SEARCH and OPTIONS
      // as only one of these values will be set here, the other value is NOP
      auto node = parser->ast()->createNodeArray(2);
      // only one extra qualifier. now we need to check if it is SEARCH or OPTIONS

      if (::caseInsensitiveEqual(operation, "SEARCH")) {
        // found SEARCH
        node->addMember((yyvsp[0].node));
        node->addMember(parser->ast()->createNodeNop());
      } else {
        // everything else must be OPTIONS
        if (!::caseInsensitiveEqual(operation, "OPTIONS")) {
          parser->registerParseError(TRI_ERROR_QUERY_PARSE, "unexpected qualifier '%s', expecting 'SEARCH' or 'OPTIONS'", operation, yylloc.first_line, yylloc.first_column);
        }
        ::validateOptions(parser, (yyvsp[0].node), yylloc.first_line, yylloc.first_column);

        node->addMember(parser->ast()->createNodeNop());
        node->addMember((yyvsp[0].node));
      }

      (yyval.node) = node;
    }
#line 4499 "Aql/grammar.cpp"
    break;

  case 184: /* for_options: "identifier" expression "identifier" expression  */
#line 1737 "Aql/grammar.y"
                                            {
      std::string_view operation((yyvsp[-3].strval).value, (yyvsp[-3].strval).length);
      TRI_ASSERT((yyvsp[-2].node) != nullptr);
      // two extra qualifiers. we expect them in the order: SEARCH, then OPTIONS

      if (!::caseInsensitiveEqual(operation, "SEARCH") ||
          !::caseInsensitiveEqual({(yyvsp[-1].strval).value, (yyvsp[-1].strval).length}, "OPTIONS")) {
        parser->registerParseError(TRI_ERROR_QUERY_PARSE, "unexpected qualifier '%s', expecting 'SEARCH' and 'OPTIONS'", operation, yylloc.first_line, yylloc.first_column);
      }
     
      ::validateOptions(parser, (yyvsp[0].node), yylloc.first_line, yylloc.first_column);

      auto node = parser->ast()->createNodeArray(2);
      node->addMember((yyvsp[-2].node));
      node->addMember((yyvsp[0].node));
      (yyval.node) = node;
    }
#line 4521 "Aql/grammar.cpp"
    break;

  case 185: /* options: %empty  */
#line 1757 "Aql/grammar.y"
                {
      (yyval.node) = nullptr;
    }
#line 4529 "Aql/grammar.cpp"
    break;

  case 186: /* options: "identifier" object  */
#line 1760 "Aql/grammar.y"
                    {
      std::string_view operation((yyvsp[-1].strval).value, (yyvsp[-1].strval).length);
      TRI_ASSERT((yyvsp[0].node) != nullptr);

      if (!::caseInsensitiveEqual(operation, "OPTIONS")) {
        parser->registerParseError(TRI_ERROR_QUERY_PARSE, "unexpected qualifier '%s', expecting 'OPTIONS'", operation, yylloc.first_line, yylloc.first_column);
      }
     
      ::validateOptions(parser, (yyvsp[0].node), yylloc.first_line, yylloc.first_column);

      (yyval.node) = (yyvsp[0].node);
    }
#line 4546 "Aql/grammar.cpp"
    break;

  case 187: /* $@16: %empty  */
#line 1775 "Aql/grammar.y"
                  {
      auto node = parser->ast()->createNodeObject();
      parser->pushStack(node);
    }
#line 4555 "Aql/grammar.cpp"
    break;

  case 188: /* object: "{" $@16 optional_object_elements "}"  */
#line 1778 "Aql/grammar.y"
                                              {
      (yyval.node) = static_cast<AstNode*>(parser->popStack());
    }
#line 4563 "Aql/grammar.cpp"
    break;

  case 189: /* optional_object_elements: %empty  */
#line 1784 "Aql/grammar.y"
                {
    }
#line 4570 "Aql/grammar.cpp"
    break;

  case 190: /* optional_object_elements: object_elements_list  */
#line 1786 "Aql/grammar.y"
                         {
    }
#line 4577 "Aql/grammar.cpp"
    break;

  case 191: /* optional_object_elements: object_elements_list ","  */
#line 1788 "Aql/grammar.y"
                                 {
    }
#line 4584 "Aql/grammar.cpp"
    break;

  case 192: /* object_elements_list: object_element  */
#line 1793 "Aql/grammar.y"
                   {
    }
#line 4591 "Aql/grammar.cpp"
    break;

  case 193: /* object_elements_list: object_elements_list "," object_element  */
#line 1795 "Aql/grammar.y"
                                                {
    }
#line 4598 "Aql/grammar.cpp"
    break;

  case 194: /* object_element: "identifier"  */
#line 1800 "Aql/grammar.y"
             {
      // attribute-name-only (comparable to JS enhanced object literals, e.g. { foo, bar })
      std::string_view name((yyvsp[0].strval).value, (yyvsp[0].strval).length);

      auto ast = parser->ast();
      auto variable = ast->scopes()->getVariable(name, true);

      if (variable == nullptr) {
        // variable does not exist
        parser->registerParseError(TRI_ERROR_QUERY_VARIABLE_NAME_UNKNOWN, "use of unknown variable '%s' in object literal", name, yylloc.first_line, yylloc.first_column);
      }

      // create a reference to the variable
      auto node = ast->createNodeReference(variable);
      parser->pushObjectElement((yyvsp[0].strval).value, (yyvsp[0].strval).length, node);
    }
#line 4619 "Aql/grammar.cpp"
    break;

  case 195: /* object_element: object_element_name ":" expression  */
#line 1816 "Aql/grammar.y"
                                           {
      // attribute-name : attribute-value
      parser->pushObjectElement((yyvsp[-2].strval).value, (yyvsp[-2].strval).length, (yyvsp[0].node));
    }
#line 4628 "Aql/grammar.cpp"
    break;

  case 196: /* object_element: "bind parameter" ":" expression  */
#line 1820 "Aql/grammar.y"
                                   {
      // bind-parameter : attribute-value
      std::string_view name((yyvsp[-2].strval).value, (yyvsp[-2].strval).length);
      if ((yyvsp[-2].strval).length < 1 || (yyvsp[-2].strval).value[0] == '@') {
        parser->registerParseError(TRI_ERROR_QUERY_BIND_PARAMETER_TYPE, TRI_errno_string(TRI_ERROR_QUERY_BIND_PARAMETER_TYPE).data(), name, yylloc.first_line, yylloc.first_column);
      }

      auto param = parser->ast()->createNodeParameter(name);
      parser->pushObjectElement(param, (yyvsp[0].node));
    }
#line 4643 "Aql/grammar.cpp"
    break;

  case 197: /* object_element: "[" expression "]" ":" expression  */
#line 1830 "Aql/grammar.y"
                                                             {
      // [ attribute-name-expression ] : attribute-value
      parser->pushObjectElement((yyvsp[-3].node), (yyvsp[0].node));
    }
#line 4652 "Aql/grammar.cpp"
    break;

  case 198: /* array_filter_operator: "* operator"  */
#line 1837 "Aql/grammar.y"
            {
      (yyval.intval) = 1;
    }
#line 4660 "Aql/grammar.cpp"
    break;

  case 199: /* array_filter_operator: array_filter_operator "* operator"  */
#line 1840 "Aql/grammar.y"
                                  {
      (yyval.intval) = (yyvsp[-1].intval) + 1;
    }
#line 4668 "Aql/grammar.cpp"
    break;

  case 200: /* optional_array_filter: %empty  */
#line 1846 "Aql/grammar.y"
                {
      (yyval.node) = nullptr;
    }
#line 4676 "Aql/grammar.cpp"
    break;

  case 201: /* optional_array_filter: "FILTER declaration" expression  */
#line 1849 "Aql/grammar.y"
                        {
      (yyval.node) = (yyvsp[0].node);
    }
#line 4684 "Aql/grammar.cpp"
    break;

  case 202: /* optional_array_limit: %empty  */
#line 1855 "Aql/grammar.y"
                {
      (yyval.node) = nullptr;
    }
#line 4692 "Aql/grammar.cpp"
    break;

  case 203: /* optional_array_limit: "LIMIT declaration" expression  */
#line 1858 "Aql/grammar.y"
                       {
      (yyval.node) = parser->ast()->createNodeArrayLimit(nullptr, (yyvsp[0].node));
    }
#line 4700 "Aql/grammar.cpp"
    break;

  case 204: /* optional_array_limit: "LIMIT declaration" expression "," expression  */
#line 1861 "Aql/grammar.y"
                                          {
      (yyval.node) = parser->ast()->createNodeArrayLimit((yyvsp[-2].node), (yyvsp[0].node));
    }
#line 4708 "Aql/grammar.cpp"
    break;

  case 205: /* optional_array_return: %empty  */
#line 1867 "Aql/grammar.y"
                {
      (yyval.node) = nullptr;
    }
#line 4716 "Aql/grammar.cpp"
    break;

  case 206: /* optional_array_return: "RETURN declaration" expression  */
#line 1870 "Aql/grammar.y"
                        {
      (yyval.node) = (yyvsp[0].node);
    }
#line 4724 "Aql/grammar.cpp"
    break;

  case 207: /* graph_collection: "identifier"  */
#line 1876 "Aql/grammar.y"
             {
      (yyval.node) = parser->ast()->createNodeValueString((yyvsp[0].strval).value, (yyvsp[0].strval).length);
    }
#line 4732 "Aql/grammar.cpp"
    break;

  case 208: /* graph_collection: bind_parameter_datasource_expected  */
#line 1879 "Aql/grammar.y"
                                       {
      (yyval.node) = (yyvsp[0].node);
    }
#line 4740 "Aql/grammar.cpp"
    break;

  case 209: /* graph_collection: graph_direction "identifier"  */
#line 1882 "Aql/grammar.y"
                             {
      auto tmp = parser->ast()->createNodeValueString((yyvsp[0].strval).value, (yyvsp[0].strval).length);
      (yyval.node) = parser->ast()->createNodeCollectionDirection((yyvsp[-1].intval), tmp);
    }
#line 4749 "Aql/grammar.cpp"
    break;

  case 210: /* graph_collection: graph_direction bind_parameter  */
#line 1886 "Aql/grammar.y"
                                   {
      (yyval.node) = parser->ast()->createNodeCollectionDirection((yyvsp[-1].intval), (yyvsp[0].node));
    }
#line 4757 "Aql/grammar.cpp"
    break;

  case 211: /* graph_collection_list: graph_collection  */
#line 1892 "Aql/grammar.y"
                      {
       auto node = static_cast<AstNode*>(parser->peekStack());
       node->addMember((yyvsp[0].node));
     }
#line 4766 "Aql/grammar.cpp"
    break;

  case 212: /* graph_collection_list: graph_collection_list "," graph_collection  */
#line 1896 "Aql/grammar.y"
                                                    {
       auto node = static_cast<AstNode*>(parser->peekStack());
       node->addMember((yyvsp[0].node));
     }
#line 4775 "Aql/grammar.cpp"
    break;

  case 213: /* graph_subject: graph_collection  */
#line 1903 "Aql/grammar.y"
                     {
      auto node = parser->ast()->createNodeArray();
      node->addMember((yyvsp[0].node));
      auto const& resolver = parser->query().resolver();
      (yyval.node) = parser->ast()->createNodeCollectionList(node, resolver);
    }
#line 4786 "Aql/grammar.cpp"
    break;

  case 214: /* $@17: %empty  */
#line 1909 "Aql/grammar.y"
                             {
      auto node = parser->ast()->createNodeArray();
      parser->pushStack(node);
      node->addMember((yyvsp[-1].node));
    }
#line 4796 "Aql/grammar.cpp"
    break;

  case 215: /* graph_subject: graph_collection "," $@17 graph_collection_list  */
#line 1913 "Aql/grammar.y"
                            {
      auto node = static_cast<AstNode*>(parser->popStack());
      auto const& resolver = parser->query().resolver();
      (yyval.node) = parser->ast()->createNodeCollectionList(node, resolver);
    }
#line 4806 "Aql/grammar.cpp"
    break;

  case 216: /* graph_subject: "GRAPH keyword" bind_parameter  */
#line 1918 "Aql/grammar.y"
                           {
      // graph name
      (yyval.node) = (yyvsp[0].node);
    }
#line 4815 "Aql/grammar.cpp"
    break;

  case 217: /* graph_subject: "GRAPH keyword" "quoted string"  */
#line 1922 "Aql/grammar.y"
                            {
      // graph name
      (yyval.node) = parser->ast()->createNodeValueString((yyvsp[0].strval).value, (yyvsp[0].strval).length);
    }
#line 4824 "Aql/grammar.cpp"
    break;

  case 218: /* graph_subject: "GRAPH keyword" "identifier"  */
#line 1926 "Aql/grammar.y"
                     {
      // graph name
      (yyval.node) = parser->ast()->createNodeValueString((yyvsp[0].strval).value, (yyvsp[0].strval).length);
    }
#line 4833 "Aql/grammar.cpp"
    break;

  case 219: /* graph_direction: "outbound modifier"  */
#line 1935 "Aql/grammar.y"
               {
      (yyval.intval) = 2;
    }
#line 4841 "Aql/grammar.cpp"
    break;

  case 220: /* graph_direction: "inbound modifier"  */
#line 1938 "Aql/grammar.y"
              {
      (yyval.intval) = 1;
    }
#line 4849 "Aql/grammar.cpp"
    break;

  case 221: /* graph_direction: "any modifier"  */
#line 1941 "Aql/grammar.y"
          {
      (yyval.intval) = 0;
    }
#line 4857 "Aql/grammar.cpp"
    break;

  case 222: /* graph_direction_steps: graph_direction  */
#line 1947 "Aql/grammar.y"
                    {
      (yyval.node) = parser->ast()->createNodeDirection((yyvsp[0].intval), 1);
    }
#line 4865 "Aql/grammar.cpp"
    break;

  case 223: /* graph_direction_steps: expression graph_direction  */
#line 1950 "Aql/grammar.y"
                                                {
      (yyval.node) = parser->ast()->createNodeDirection((yyvsp[0].intval), (yyvsp[-1].node));
    }
#line 4873 "Aql/grammar.cpp"
    break;

  case 224: /* reference: "identifier"  */
#line 1956 "Aql/grammar.y"
             {
      // variable or collection or view
      auto ast = parser->ast();
      AstNode* node = nullptr;

      std::string_view variableName((yyvsp[0].strval).value, (yyvsp[0].strval).length);
      auto variable = ast->scopes()->getVariable(variableName, true);

      if (variable == nullptr) {
        // variable does not exist
        // now try special variables
        if (ast->scopes()->canUseCurrentVariable() && variableName == "CURRENT") {
          variable = ast->scopes()->getCurrentVariable();
        } else if (variableName == Variable::NAME_CURRENT) {
          variable = ast->scopes()->getCurrentVariable();
        }
      }

      if (variable != nullptr) {
        // variable alias exists, now use it
        node = ast->createNodeReference(variable);
      }

      if (node == nullptr) {
        // variable not found. so it must have been a collection or view
        auto const& resolver = parser->query().resolver();
        node = ast->createNodeDataSource(resolver, variableName, arangodb::AccessMode::Type::READ, true, false);
      }

      TRI_ASSERT(node != nullptr);

      (yyval.node) = node;
    }
#line 4911 "Aql/grammar.cpp"
    break;

  case 225: /* reference: compound_value  */
#line 1989 "Aql/grammar.y"
                   {
      (yyval.node) = (yyvsp[0].node);
    }
#line 4919 "Aql/grammar.cpp"
    break;

  case 226: /* reference: bind_parameter  */
#line 1992 "Aql/grammar.y"
                   {
      (yyval.node) = (yyvsp[0].node);
    }
#line 4927 "Aql/grammar.cpp"
    break;

  case 227: /* reference: function_call  */
#line 1995 "Aql/grammar.y"
                  {
      TRI_ASSERT((yyvsp[0].node) != nullptr);
      (yyval.node) = (yyvsp[0].node);
    }
#line 4936 "Aql/grammar.cpp"
    break;

  case 228: /* reference: "(" expression ")"  */
#line 1999 "Aql/grammar.y"
                              {
      if ((yyvsp[-1].node)->type == NODE_TYPE_EXPANSION) {
        // create a dummy passthru node that reduces and evaluates the expansion first
        // and the expansion on top of the stack won't be chained with any other expansions
        (yyval.node) = parser->ast()->createNodePassthru((yyvsp[-1].node));
      } else {
        (yyval.node) = (yyvsp[-1].node);
      }
    }
#line 4950 "Aql/grammar.cpp"
    break;

  case 229: /* $@18: %empty  */
#line 2008 "Aql/grammar.y"
           {
      parser->ast()->scopes()->start(arangodb::aql::AQL_SCOPE_SUBQUERY);
      parser->ast()->startSubQuery();
    }
#line 4959 "Aql/grammar.cpp"
    break;

  case 230: /* reference: "(" $@18 query ")"  */
#line 2011 "Aql/grammar.y"
                    {
      AstNode* node = parser->ast()->endSubQuery();
      parser->ast()->scopes()->endCurrent();

      std::string const variableName = parser->ast()->variables()->nextName();
      auto subQuery = parser->ast()->createNodeLet(variableName.c_str(), variableName.size(), node, false);
      parser->ast()->addOperation(subQuery);

      (yyval.node) = parser->ast()->createNodeSubqueryReference(variableName);
    }
#line 4974 "Aql/grammar.cpp"
    break;

  case 231: /* reference: reference '.' "identifier"  */
#line 2021 "Aql/grammar.y"
                                           {
      std::string_view name((yyvsp[0].strval).value, (yyvsp[0].strval).length);
      // named variable access, e.g. variable.reference
      if ((yyvsp[-2].node)->type == NODE_TYPE_EXPANSION) {
        // if left operand is an expansion already...
        // dive into the expansion's right-hand child nodes for further expansion and
        // patch the bottom-most one
        auto current = const_cast<AstNode*>(parser->ast()->findExpansionSubNode((yyvsp[-2].node)));
        TRI_ASSERT(current->type == NODE_TYPE_EXPANSION);
        current->changeMember(1, parser->ast()->createNodeAttributeAccess(current->getMember(1), name));
        (yyval.node) = (yyvsp[-2].node);
      } else {
        (yyval.node) = parser->ast()->createNodeAttributeAccess((yyvsp[-2].node), name);
      }
    }
#line 4994 "Aql/grammar.cpp"
    break;

  case 232: /* reference: reference '.' bind_parameter  */
#line 2036 "Aql/grammar.y"
                                                 {
      // named variable access, e.g. variable.@reference
      if ((yyvsp[-2].node)->type == NODE_TYPE_EXPANSION) {
        // if left operand is an expansion already...
        // patch the existing expansion
        auto current = const_cast<AstNode*>(parser->ast()->findExpansionSubNode((yyvsp[-2].node)));
        TRI_ASSERT(current->type == NODE_TYPE_EXPANSION);
        current->changeMember(1, parser->ast()->createNodeBoundAttributeAccess(current->getMember(1), (yyvsp[0].node)));
        (yyval.node) = (yyvsp[-2].node);
      } else {
        (yyval.node) = parser->ast()->createNodeBoundAttributeAccess((yyvsp[-2].node), (yyvsp[0].node));
      }
    }
#line 5012 "Aql/grammar.cpp"
    break;

  case 233: /* reference: reference "[" expression "]"  */
#line 2049 "Aql/grammar.y"
                                                                  {
      // indexed variable access, e.g. variable[index]
      if ((yyvsp[-3].node)->type == NODE_TYPE_EXPANSION) {
        // if left operand is an expansion already...
        // patch the existing expansion
        auto current = const_cast<AstNode*>(parser->ast()->findExpansionSubNode((yyvsp[-3].node)));
        TRI_ASSERT(current->type == NODE_TYPE_EXPANSION);
        current->changeMember(1, parser->ast()->createNodeIndexedAccess(current->getMember(1), (yyvsp[-1].node)));
        (yyval.node) = (yyvsp[-3].node);
      } else {
        (yyval.node) = parser->ast()->createNodeIndexedAccess((yyvsp[-3].node), (yyvsp[-1].node));
      }
    }
#line 5030 "Aql/grammar.cpp"
    break;

  case 234: /* $@19: %empty  */
#line 2062 "Aql/grammar.y"
                                                 {
      // variable expansion, e.g. variable[*], with optional FILTER, LIMIT and RETURN clauses
      if ((yyvsp[0].intval) > 1 && (yyvsp[-2].node)->type == NODE_TYPE_EXPANSION) {
        // create a dummy passthru node that reduces and evaluates the expansion first
        // and the expansion on top of the stack won't be chained with any other expansions
        (yyvsp[-2].node) = parser->ast()->createNodePassthru((yyvsp[-2].node));
      }

      // create a temporary iterator variable
      std::string const nextName = parser->ast()->variables()->nextName() + "_";

      if ((yyvsp[-2].node)->type == NODE_TYPE_EXPANSION) {
        auto iterator = parser->ast()->createNodeIterator(nextName.c_str(), nextName.size(), (yyvsp[-2].node)->getMember(1));
        parser->pushStack(iterator);
      } else {
        auto iterator = parser->ast()->createNodeIterator(nextName.c_str(), nextName.size(), (yyvsp[-2].node));
        parser->pushStack(iterator);
      }

      auto scopes = parser->ast()->scopes();
      scopes->stackCurrentVariable(scopes->getVariable(nextName));
    }
#line 5057 "Aql/grammar.cpp"
    break;

  case 235: /* reference: reference "[" array_filter_operator $@19 optional_array_filter optional_array_limit optional_array_return "]"  */
#line 2083 "Aql/grammar.y"
                                                                                                     {
      auto scopes = parser->ast()->scopes();
      scopes->unstackCurrentVariable();

      auto iterator = static_cast<AstNode const*>(parser->popStack());
      auto variableNode = iterator->getMember(0);
      TRI_ASSERT(variableNode->type == NODE_TYPE_VARIABLE);
      auto variable = static_cast<Variable const*>(variableNode->getData());

      if ((yyvsp[-7].node)->type == NODE_TYPE_EXPANSION) {
        auto expand = parser->ast()->createNodeExpansion((yyvsp[-5].intval), iterator, parser->ast()->createNodeReference(variable->name), (yyvsp[-3].node), (yyvsp[-2].node), (yyvsp[-1].node));
        (yyvsp[-7].node)->changeMember(1, expand);
        (yyval.node) = (yyvsp[-7].node);
      } else {
        (yyval.node) = parser->ast()->createNodeExpansion((yyvsp[-5].intval), iterator, parser->ast()->createNodeReference(variable->name), (yyvsp[-3].node), (yyvsp[-2].node), (yyvsp[-1].node));
      }
    }
#line 5079 "Aql/grammar.cpp"
    break;

  case 236: /* simple_value: value_literal  */
#line 2103 "Aql/grammar.y"
                  {
      (yyval.node) = (yyvsp[0].node);
    }
#line 5087 "Aql/grammar.cpp"
    break;

  case 237: /* simple_value: bind_parameter  */
#line 2106 "Aql/grammar.y"
                   {
      (yyval.node) = (yyvsp[0].node);
    }
#line 5095 "Aql/grammar.cpp"
    break;

  case 238: /* numeric_value: "integer number"  */
#line 2112 "Aql/grammar.y"
              {
      TRI_ASSERT((yyvsp[0].node) != nullptr);
      (yyval.node) = (yyvsp[0].node);
    }
#line 5104 "Aql/grammar.cpp"
    break;

  case 239: /* numeric_value: "number"  */
#line 2116 "Aql/grammar.y"
             {
      TRI_ASSERT((yyvsp[0].node) != nullptr);
      (yyval.node) = (yyvsp[0].node);
    }
#line 5113 "Aql/grammar.cpp"
    break;

  case 240: /* value_literal: "quoted string"  */
#line 2123 "Aql/grammar.y"
                    {
      (yyval.node) = parser->ast()->createNodeValueString((yyvsp[0].strval).value, (yyvsp[0].strval).length);
    }
#line 5121 "Aql/grammar.cpp"
    break;

  case 241: /* value_literal: numeric_value  */
#line 2126 "Aql/grammar.y"
                  {
      (yyval.node) = (yyvsp[0].node);
    }
#line 5129 "Aql/grammar.cpp"
    break;

  case 242: /* value_literal: "null"  */
#line 2129 "Aql/grammar.y"
           {
      (yyval.node) = parser->ast()->createNodeValueNull();
    }
#line 5137 "Aql/grammar.cpp"
    break;

  case 243: /* value_literal: "true"  */
#line 2132 "Aql/grammar.y"
           {
      (yyval.node) = parser->ast()->createNodeValueBool(true);
    }
#line 5145 "Aql/grammar.cpp"
    break;

  case 244: /* value_literal: "false"  */
#line 2135 "Aql/grammar.y"
            {
      (yyval.node) = parser->ast()->createNodeValueBool(false);
    }
#line 5153 "Aql/grammar.cpp"
    break;

  case 245: /* in_or_into_collection_name: "identifier"  */
#line 2141 "Aql/grammar.y"
             {
      std::string_view name((yyvsp[0].strval).value, (yyvsp[0].strval).length);
      auto const& resolver = parser->query().resolver();
      (yyval.node) = parser->ast()->createNodeCollection(resolver, name, arangodb::AccessMode::Type::WRITE);
    }
#line 5163 "Aql/grammar.cpp"
    break;

  case 246: /* in_or_into_collection_name: "quoted string"  */
#line 2146 "Aql/grammar.y"
                    {
      std::string_view name((yyvsp[0].strval).value, (yyvsp[0].strval).length);
      auto const& resolver = parser->query().resolver();
      (yyval.node) = parser->ast()->createNodeCollection(resolver, name, arangodb::AccessMode::Type::WRITE);
    }
#line 5173 "Aql/grammar.cpp"
    break;

  case 247: /* in_or_into_collection_name: "bind data source parameter"  */
#line 2151 "Aql/grammar.y"
                            {
      std::string_view name((yyvsp[0].strval).value, (yyvsp[0].strval).length);
      if (name.size() < 2 || name.front() != '@') {
        parser->registerParseError(TRI_ERROR_QUERY_BIND_PARAMETER_TYPE, TRI_errno_string(TRI_ERROR_QUERY_BIND_PARAMETER_TYPE).data(), name, yylloc.first_line, yylloc.first_column);
      }

      (yyval.node) = parser->ast()->createNodeParameterDatasource(name);
    }
#line 5186 "Aql/grammar.cpp"
    break;

  case 248: /* bind_parameter: "bind data source parameter"  */
#line 2162 "Aql/grammar.y"
                            {
      std::string_view name((yyvsp[0].strval).value, (yyvsp[0].strval).length);
      if (name.size() < 2 || name.front() != '@') {
        parser->registerParseError(TRI_ERROR_QUERY_BIND_PARAMETER_TYPE, TRI_errno_string(TRI_ERROR_QUERY_BIND_PARAMETER_TYPE).data(), name, yylloc.first_line, yylloc.first_column);
      }

      (yyval.node) = parser->ast()->createNodeParameterDatasource(name);
    }
#line 5199 "Aql/grammar.cpp"
    break;

  case 249: /* bind_parameter: "bind parameter"  */
#line 2170 "Aql/grammar.y"
                {
      std::string_view name((yyvsp[0].strval).value, (yyvsp[0].strval).length);
      (yyval.node) = parser->ast()->createNodeParameter(name);
    }
#line 5208 "Aql/grammar.cpp"
    break;

  case 250: /* bind_parameter_datasource_expected: "bind data source parameter"  */
#line 2177 "Aql/grammar.y"
                            {
      std::string_view name((yyvsp[0].strval).value, (yyvsp[0].strval).length);
      if (name.size() < 2 || name.front() != '@') {
        parser->registerParseError(TRI_ERROR_QUERY_BIND_PARAMETER_TYPE, TRI_errno_string(TRI_ERROR_QUERY_BIND_PARAMETER_TYPE).data(), (yyvsp[0].strval).value, yylloc.first_line, yylloc.first_column);
      }

      (yyval.node) = parser->ast()->createNodeParameterDatasource(name);
    }
#line 5221 "Aql/grammar.cpp"
    break;

  case 251: /* bind_parameter_datasource_expected: "bind parameter"  */
#line 2185 "Aql/grammar.y"
                {
      std::string_view name((yyvsp[0].strval).value, (yyvsp[0].strval).length);
      (yyval.node) = parser->ast()->createNodeParameterDatasource(name);
    }
#line 5230 "Aql/grammar.cpp"
    break;

  case 252: /* object_element_name: "identifier"  */
#line 2192 "Aql/grammar.y"
             {
      (yyval.strval) = (yyvsp[0].strval);
    }
#line 5238 "Aql/grammar.cpp"
    break;

  case 253: /* object_element_name: "quoted string"  */
#line 2195 "Aql/grammar.y"
                    {
      (yyval.strval) = (yyvsp[0].strval);
    }
#line 5246 "Aql/grammar.cpp"
    break;

  case 254: /* variable_name: "identifier"  */
#line 2200 "Aql/grammar.y"
             {
      (yyval.strval) = (yyvsp[0].strval);
    }
#line 5254 "Aql/grammar.cpp"
    break;


#line 5258 "Aql/grammar.cpp"

      default: break;
    }
  /* User semantic actions sometimes alter yychar, and that requires
     that yytoken be updated with the new translation.  We take the
     approach of translating immediately before every use of yytoken.
     One alternative is translating here after every semantic action,
     but that translation would be missed if the semantic action invokes
     YYABORT, YYACCEPT, or YYERROR immediately after altering yychar or
     if it invokes YYBACKUP.  In the case of YYABORT or YYACCEPT, an
     incorrect destructor might then be invoked immediately.  In the
     case of YYERROR or YYBACKUP, subsequent parser actions might lead
     to an incorrect destructor call or verbose syntax error message
     before the lookahead is translated.  */
  YY_SYMBOL_PRINT ("-> $$ =", YY_CAST (yysymbol_kind_t, yyr1[yyn]), &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;

  *++yyvsp = yyval;
  *++yylsp = yyloc;

  /* Now 'shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */
  {
    const int yylhs = yyr1[yyn] - YYNTOKENS;
    const int yyi = yypgoto[yylhs] + *yyssp;
    yystate = (0 <= yyi && yyi <= YYLAST && yycheck[yyi] == *yyssp
               ? yytable[yyi]
               : yydefgoto[yylhs]);
  }

  goto yynewstate;


/*--------------------------------------.
| yyerrlab -- here on detecting error.  |
`--------------------------------------*/
yyerrlab:
  /* Make sure we have latest lookahead translation.  See comments at
     user semantic actions for why this is necessary.  */
  yytoken = yychar == YYEMPTY ? YYSYMBOL_YYEMPTY : YYTRANSLATE (yychar);
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
      {
        yypcontext_t yyctx
          = {yyssp, yytoken, &yylloc};
        char const *yymsgp = YY_("syntax error");
        int yysyntax_error_status;
        yysyntax_error_status = yysyntax_error (&yymsg_alloc, &yymsg, &yyctx);
        if (yysyntax_error_status == 0)
          yymsgp = yymsg;
        else if (yysyntax_error_status == -1)
          {
            if (yymsg != yymsgbuf)
              YYSTACK_FREE (yymsg);
            yymsg = YY_CAST (char *,
                             YYSTACK_ALLOC (YY_CAST (YYSIZE_T, yymsg_alloc)));
            if (yymsg)
              {
                yysyntax_error_status
                  = yysyntax_error (&yymsg_alloc, &yymsg, &yyctx);
                yymsgp = yymsg;
              }
            else
              {
                yymsg = yymsgbuf;
                yymsg_alloc = sizeof yymsgbuf;
                yysyntax_error_status = YYENOMEM;
              }
          }
        yyerror (&yylloc, parser, yymsgp);
        if (yysyntax_error_status == YYENOMEM)
          goto yyexhaustedlab;
      }
    }

  yyerror_range[1] = yylloc;
  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
         error, discard it.  */

      if (yychar <= T_END)
        {
          /* Return failure if at end of input.  */
          if (yychar == T_END)
            YYABORT;
        }
      else
        {
          yydestruct ("Error: discarding",
                      yytoken, &yylval, &yylloc, parser);
          yychar = YYEMPTY;
        }
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:
  /* Pacify compilers when the user code never invokes YYERROR and the
     label yyerrorlab therefore never appears in user code.  */
  if (0)
    YYERROR;

  /* Do not reclaim the symbols of the rule whose action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;      /* Each real token shifted decrements this.  */

  /* Pop stack until we find a state that shifts the error token.  */
  for (;;)
    {
      yyn = yypact[yystate];
      if (!yypact_value_is_default (yyn))
        {
          yyn += YYSYMBOL_YYerror;
          if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYSYMBOL_YYerror)
            {
              yyn = yytable[yyn];
              if (0 < yyn)
                break;
            }
        }

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
        YYABORT;

      yyerror_range[1] = *yylsp;
      yydestruct ("Error: popping",
                  YY_ACCESSING_SYMBOL (yystate), yyvsp, yylsp, parser);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END

  yyerror_range[2] = yylloc;
  ++yylsp;
  YYLLOC_DEFAULT (*yylsp, yyerror_range, 2);

  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", YY_ACCESSING_SYMBOL (yyn), yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;


/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;


#if 1
/*-------------------------------------------------.
| yyexhaustedlab -- memory exhaustion comes here.  |
`-------------------------------------------------*/
yyexhaustedlab:
  yyerror (&yylloc, parser, YY_("memory exhausted"));
  yyresult = 2;
  goto yyreturn;
#endif


/*-------------------------------------------------------.
| yyreturn -- parsing is finished, clean up and return.  |
`-------------------------------------------------------*/
yyreturn:
  if (yychar != YYEMPTY)
    {
      /* Make sure we have latest lookahead translation.  See comments at
         user semantic actions for why this is necessary.  */
      yytoken = YYTRANSLATE (yychar);
      yydestruct ("Cleanup: discarding lookahead",
                  yytoken, &yylval, &yylloc, parser);
    }
  /* Do not reclaim the symbols of the rule whose action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
                  YY_ACCESSING_SYMBOL (+*yyssp), yyvsp, yylsp, parser);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
  if (yymsg != yymsgbuf)
    YYSTACK_FREE (yymsg);
  return yyresult;
}

