/* A Bison parser, made by GNU Bison 3.3.2.  */

/* Bison implementation for Yacc-like parsers in C

   Copyright (C) 1984, 1989-1990, 2000-2015, 2018-2019 Free Software Foundation,
   Inc.

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.

   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Undocumented macros, especially those whose name start with YY_,
   are private implementation details.  Do not rely on them.  */

/* Identify Bison output.  */
#define YYBISON 1

/* Bison version.  */
#define YYBISON_VERSION "3.3.2"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 1

/* Push parsers.  */
#define YYPUSH 0

/* Pull parsers.  */
#define YYPULL 1


/* Substitute the variable and function names.  */
#define yyparse         Aqlparse
#define yylex           Aqllex
#define yyerror         Aqlerror
#define yydebug         Aqldebug
#define yynerrs         Aqlnerrs


/* First part of user prologue.  */
#line 9 "Aql/grammar.y" /* yacc.c:337  */

// we are using alloca here explicitly because we may
// otherwise leak error messages that are generated by Bison.
// Bison reports all its errors via the function `Aqlerror`, which
// will receive the error message as a constant string. So we
// must not free the string inside `Aqlerror`, and we cannot even
// tell if the error message is a dynamically allocated error
// message or a hard-coded error message that resides in some
// static part of the program.
// Even worse, `Aqlerror` does not return control to Bison but throws
// an exception... So the best thing we can do here is to not use
// dynamically memory allocation by Bison, but make it use alloca.
#define YYSTACK_USE_ALLOCA 1

#include "Aql/Aggregator.h"
#include "Aql/AstNode.h"
#include "Aql/Function.h"
#include "Aql/Parser.h"
#include "Aql/Quantifier.h"
#include "Aql/Query.h"
#include "Aql/types.h"
#include "Basics/StringUtils.h"
#include "Basics/tri-strings.h"
#include "Transaction/Context.h"
#include "VocBase/AccessMode.h"

#line 103 "Aql/grammar.cpp" /* yacc.c:337  */
# ifndef YY_NULLPTR
#  if defined __cplusplus
#   if 201103L <= __cplusplus
#    define YY_NULLPTR nullptr
#   else
#    define YY_NULLPTR 0
#   endif
#  else
#   define YY_NULLPTR ((void*)0)
#  endif
# endif

/* Enabling verbose error messages.  */
#ifdef YYERROR_VERBOSE
# undef YYERROR_VERBOSE
# define YYERROR_VERBOSE 1
#else
# define YYERROR_VERBOSE 1
#endif

/* In a future release of Bison, this section will be replaced
   by #include "grammar.hpp".  */
#ifndef YY_AQL_AQL_GRAMMAR_HPP_INCLUDED
# define YY_AQL_AQL_GRAMMAR_HPP_INCLUDED
/* Debug traces.  */
#ifndef YYDEBUG
# define YYDEBUG 0
#endif
#if YYDEBUG
extern int Aqldebug;
#endif

/* Token type.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
  enum yytokentype
  {
    T_END = 0,
    T_FOR = 258,
    T_LET = 259,
    T_FILTER = 260,
    T_RETURN = 261,
    T_COLLECT = 262,
    T_SORT = 263,
    T_LIMIT = 264,
    T_ASC = 265,
    T_DESC = 266,
    T_IN = 267,
    T_WITH = 268,
    T_INTO = 269,
    T_AGGREGATE = 270,
    T_GRAPH = 271,
    T_SHORTEST_PATH = 272,
    T_K_SHORTEST_PATHS = 273,
    T_DISTINCT = 274,
    T_REMOVE = 275,
    T_INSERT = 276,
    T_UPDATE = 277,
    T_REPLACE = 278,
    T_UPSERT = 279,
    T_NULL = 280,
    T_TRUE = 281,
    T_FALSE = 282,
    T_STRING = 283,
    T_QUOTED_STRING = 284,
    T_INTEGER = 285,
    T_DOUBLE = 286,
    T_PARAMETER = 287,
    T_DATA_SOURCE_PARAMETER = 288,
    T_ASSIGN = 289,
    T_NOT = 290,
    T_AND = 291,
    T_OR = 292,
    T_REGEX_MATCH = 293,
    T_REGEX_NON_MATCH = 294,
    T_EQ = 295,
    T_NE = 296,
    T_LT = 297,
    T_GT = 298,
    T_LE = 299,
    T_GE = 300,
    T_LIKE = 301,
    T_PLUS = 302,
    T_MINUS = 303,
    T_TIMES = 304,
    T_DIV = 305,
    T_MOD = 306,
    T_QUESTION = 307,
    T_COLON = 308,
    T_SCOPE = 309,
    T_RANGE = 310,
    T_COMMA = 311,
    T_OPEN = 312,
    T_CLOSE = 313,
    T_OBJECT_OPEN = 314,
    T_OBJECT_CLOSE = 315,
    T_ARRAY_OPEN = 316,
    T_ARRAY_CLOSE = 317,
    T_OUTBOUND = 318,
    T_INBOUND = 319,
    T_ANY = 320,
    T_ALL = 321,
    T_NONE = 322,
    UMINUS = 323,
    UPLUS = 324,
    UNEGATION = 325,
    FUNCCALL = 326,
    REFERENCE = 327,
    INDEXED = 328,
    EXPANSION = 329
  };
#endif

/* Value type.  */
#if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED

union YYSTYPE
{
#line 36 "Aql/grammar.y" /* yacc.c:352  */

  arangodb::aql::AstNode*  node;
  struct {
    char*                  value;
    size_t                 length;
  }                        strval;
  bool                     boolval;
  int64_t                  intval;

#line 232 "Aql/grammar.cpp" /* yacc.c:352  */
};

typedef union YYSTYPE YYSTYPE;
# define YYSTYPE_IS_TRIVIAL 1
# define YYSTYPE_IS_DECLARED 1
#endif

/* Location type.  */
#if ! defined YYLTYPE && ! defined YYLTYPE_IS_DECLARED
typedef struct YYLTYPE YYLTYPE;
struct YYLTYPE
{
  int first_line;
  int first_column;
  int last_line;
  int last_column;
};
# define YYLTYPE_IS_DECLARED 1
# define YYLTYPE_IS_TRIVIAL 1
#endif



int Aqlparse (arangodb::aql::Parser* parser);

#endif /* !YY_AQL_AQL_GRAMMAR_HPP_INCLUDED  */

/* Second part of user prologue.  */
#line 46 "Aql/grammar.y" /* yacc.c:354  */


using namespace arangodb::aql;

/// @brief shortcut macro for signaling out of memory
#define ABORT_OOM                                   \
  parser->registerError(TRI_ERROR_OUT_OF_MEMORY);   \
  YYABORT;

#define scanner parser->scanner()

/// @brief forward for lexer function defined in Aql/tokens.ll
int Aqllex(YYSTYPE*, YYLTYPE*, void*);

/// @brief register parse error (this will also abort the currently running query)
void Aqlerror(YYLTYPE* locp,
              arangodb::aql::Parser* parser,
              char const* message) {
  parser->registerParseError(TRI_ERROR_QUERY_PARSE, message, locp->first_line, locp->first_column);
}

/// @brief check if any of the variables used in the INTO expression were
/// introduced by the COLLECT itself, in which case it would fail
static void CheckIntoVariables(Parser* parser, AstNode const* expression,
                               int line, int column,
                               ::arangodb::containers::HashSet<Variable const*> const& variablesIntroduced) {
  if (expression == nullptr) {
    return;
  }

  ::arangodb::containers::HashSet<Variable const*> varsInAssignment;
  Ast::getReferencedVariables(expression, varsInAssignment);

  for (auto const& it : varsInAssignment) {
    if (variablesIntroduced.find(it) != variablesIntroduced.end()) {
      std::string msg("use of COLLECT variable '" + it->name + "' inside same COLLECT's INTO expression");
      parser->registerParseError(TRI_ERROR_QUERY_VARIABLE_NAME_UNKNOWN, msg.c_str(), it->name.c_str(), line, column);
      return;
    }
  }
}

/// @brief register variables in the scope
static void RegisterAssignVariables(Parser* parser, arangodb::aql::Scopes* scopes,
                                    int line, int column,
                                    ::arangodb::containers::HashSet<Variable const*>& variablesIntroduced,
                                    AstNode const* vars) {
  ::arangodb::containers::HashSet<Variable const*> varsInAssignment;

  size_t const n = vars->numMembers();

  for (size_t i = 0; i < n; ++i) {
    auto member = vars->getMemberUnchecked(i);

    if (member != nullptr) {
      TRI_ASSERT(member->type == NODE_TYPE_ASSIGN);
      // check if any of the assignment refers to a variable introduced by this very
      // same COLLECT, e.g. COLLECT aggregate x = .., y = x
      varsInAssignment.clear();
      Ast::getReferencedVariables(member->getMember(1), varsInAssignment);
      for (auto const& it : varsInAssignment) {
        if (variablesIntroduced.find(it) != variablesIntroduced.end()) {
          std::string msg("use of COLLECT variable '" + it->name + "' inside same COLLECT");
          parser->registerParseError(TRI_ERROR_QUERY_VARIABLE_NAME_UNKNOWN, msg.c_str(), it->name.c_str(), line, column);
          return;
        }
      }

      // keep track of the variable for our assignment
      auto v = static_cast<Variable*>(member->getMember(0)->getData());
      scopes->addVariable(v);
      variablesIntroduced.emplace(v);
    }
  }
}

/// @brief validate the aggregate variables expressions
static bool ValidateAggregates(Parser* parser, AstNode const* aggregates) {
  size_t const n = aggregates->numMembers();

  for (size_t i = 0; i < n; ++i) {
    auto member = aggregates->getMemberUnchecked(i);

    if (member != nullptr) {
      TRI_ASSERT(member->type == NODE_TYPE_ASSIGN);

      auto func = member->getMember(1);

      bool isValid = true;
      if (func->type != NODE_TYPE_FCALL) {
        // aggregate expression must be a function call
        isValid = false;
      }
      else {
        auto f = static_cast<arangodb::aql::Function*>(func->getData());
        if (!Aggregator::isValid(f->name)) {
          // aggregate expression must be a call to MIN|MAX|LENGTH...
          isValid = false;
        }
      }

      if (!isValid) {
        parser->registerError(TRI_ERROR_QUERY_INVALID_AGGREGATE_EXPRESSION);
        return false;
      }
    }
  }

  return true;
}

/// @brief start a new scope for the collect
static bool StartCollectScope(arangodb::aql::Scopes* scopes) {
  // check if we are in the main scope
  if (scopes->type() == arangodb::aql::AQL_SCOPE_MAIN) {
    return false;
  }

  // end the active scopes
  scopes->endNested();
  // start a new scope
  scopes->start(arangodb::aql::AQL_SCOPE_COLLECT);
  return true;
}

/// @brief get the INTO variable stored in a node (may not exist)
static AstNode const* GetIntoVariable(Parser* parser, AstNode const* node) {
  if (node == nullptr) {
    return nullptr;
  }

  if (node->type == NODE_TYPE_VALUE) {
    // node is a string containing the variable name
    return parser->ast()->createNodeVariable(node->getStringValue(), node->getStringLength(), true);
  }

  // node is an array with the variable name as the first member
  TRI_ASSERT(node->type == NODE_TYPE_ARRAY);
  TRI_ASSERT(node->numMembers() == 2);

  auto v = node->getMember(0);
  TRI_ASSERT(v->type == NODE_TYPE_VALUE);
  return parser->ast()->createNodeVariable(v->getStringValue(), v->getStringLength(), true);
}

/// @brief get the INTO variable = expression stored in a node (may not exist)
static AstNode const* GetIntoExpression(AstNode const* node) {
  if (node == nullptr || node->type == NODE_TYPE_VALUE) {
    return nullptr;
  }

  // node is an array with the expression as the second member
  TRI_ASSERT(node->type == NODE_TYPE_ARRAY);
  TRI_ASSERT(node->numMembers() == 2);

  return node->getMember(1);
}

static AstNode* TransformOutputVariables(Parser* parser, AstNode const* names) {
  auto wrapperNode = parser->ast()->createNodeArray();
  for (size_t i = 0; i < names->numMembers(); ++i) {
    AstNode* variableNameNode = names->getMemberUnchecked(i);
    TRI_ASSERT(variableNameNode->isStringValue());
    AstNode* variableNode = parser->ast()->createNodeVariable(variableNameNode->getStringValue(), variableNameNode->getStringLength(), true);
    wrapperNode->addMember(variableNode);
  }
  return wrapperNode;
}


#line 432 "Aql/grammar.cpp" /* yacc.c:354  */

#ifdef short
# undef short
#endif

#ifdef YYTYPE_UINT8
typedef YYTYPE_UINT8 yytype_uint8;
#else
typedef unsigned char yytype_uint8;
#endif

#ifdef YYTYPE_INT8
typedef YYTYPE_INT8 yytype_int8;
#else
typedef signed char yytype_int8;
#endif

#ifdef YYTYPE_UINT16
typedef YYTYPE_UINT16 yytype_uint16;
#else
typedef unsigned short yytype_uint16;
#endif

#ifdef YYTYPE_INT16
typedef YYTYPE_INT16 yytype_int16;
#else
typedef short yytype_int16;
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif ! defined YYSIZE_T
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned
# endif
#endif

#define YYSIZE_MAXIMUM ((YYSIZE_T) -1)

#ifndef YY_
# if defined YYENABLE_NLS && YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(Msgid) dgettext ("bison-runtime", Msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(Msgid) Msgid
# endif
#endif

#ifndef YY_ATTRIBUTE
# if (defined __GNUC__                                               \
      && (2 < __GNUC__ || (__GNUC__ == 2 && 96 <= __GNUC_MINOR__)))  \
     || defined __SUNPRO_C && 0x5110 <= __SUNPRO_C
#  define YY_ATTRIBUTE(Spec) __attribute__(Spec)
# else
#  define YY_ATTRIBUTE(Spec) /* empty */
# endif
#endif

#ifndef YY_ATTRIBUTE_PURE
# define YY_ATTRIBUTE_PURE   YY_ATTRIBUTE ((__pure__))
#endif

#ifndef YY_ATTRIBUTE_UNUSED
# define YY_ATTRIBUTE_UNUSED YY_ATTRIBUTE ((__unused__))
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YYUSE(E) ((void) (E))
#else
# define YYUSE(E) /* empty */
#endif

#if defined __GNUC__ && ! defined __ICC && 407 <= __GNUC__ * 100 + __GNUC_MINOR__
/* Suppress an incorrect diagnostic about yylval being uninitialized.  */
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN \
    _Pragma ("GCC diagnostic push") \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")\
    _Pragma ("GCC diagnostic ignored \"-Wmaybe-uninitialized\"")
# define YY_IGNORE_MAYBE_UNINITIALIZED_END \
    _Pragma ("GCC diagnostic pop")
#else
# define YY_INITIAL_VALUE(Value) Value
#endif
#ifndef YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_END
#endif
#ifndef YY_INITIAL_VALUE
# define YY_INITIAL_VALUE(Value) /* Nothing. */
#endif


#if ! defined yyoverflow || YYERROR_VERBOSE

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined EXIT_SUCCESS
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
      /* Use EXIT_SUCCESS as a witness for stdlib.h.  */
#     ifndef EXIT_SUCCESS
#      define EXIT_SUCCESS 0
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's 'empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined EXIT_SUCCESS \
       && ! ((defined YYMALLOC || defined malloc) \
             && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef EXIT_SUCCESS
#    define EXIT_SUCCESS 0
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined EXIT_SUCCESS
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined EXIT_SUCCESS
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* ! defined yyoverflow || YYERROR_VERBOSE */


#if (! defined yyoverflow \
     && (! defined __cplusplus \
         || (defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL \
             && defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yytype_int16 yyss_alloc;
  YYSTYPE yyvs_alloc;
  YYLTYPE yyls_alloc;
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (sizeof (yytype_int16) + sizeof (YYSTYPE) + sizeof (YYLTYPE)) \
      + 2 * YYSTACK_GAP_MAXIMUM)

# define YYCOPY_NEEDED 1

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack_alloc, Stack)                           \
    do                                                                  \
      {                                                                 \
        YYSIZE_T yynewbytes;                                            \
        YYCOPY (&yyptr->Stack_alloc, Stack, yysize);                    \
        Stack = &yyptr->Stack_alloc;                                    \
        yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
        yyptr += yynewbytes / sizeof (*yyptr);                          \
      }                                                                 \
    while (0)

#endif

#if defined YYCOPY_NEEDED && YYCOPY_NEEDED
/* Copy COUNT objects from SRC to DST.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(Dst, Src, Count) \
      __builtin_memcpy (Dst, Src, (Count) * sizeof (*(Src)))
#  else
#   define YYCOPY(Dst, Src, Count)              \
      do                                        \
        {                                       \
          YYSIZE_T yyi;                         \
          for (yyi = 0; yyi < (Count); yyi++)   \
            (Dst)[yyi] = (Src)[yyi];            \
        }                                       \
      while (0)
#  endif
# endif
#endif /* !YYCOPY_NEEDED */

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  7
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   1496

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  76
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  100
/* YYNRULES -- Number of rules.  */
#define YYNRULES  236
/* YYNSTATES -- Number of states.  */
#define YYNSTATES  393

#define YYUNDEFTOK  2
#define YYMAXUTOK   329

/* YYTRANSLATE(TOKEN-NUM) -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex, with out-of-bounds checking.  */
#define YYTRANSLATE(YYX)                                                \
  ((unsigned) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)

/* YYTRANSLATE[TOKEN-NUM] -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex.  */
static const yytype_uint8 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,    75,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74
};

#if YYDEBUG
  /* YYRLINE[YYN] -- Source line where rule number YYN was defined.  */
static const yytype_uint16 yyrline[] =
{
       0,   392,   392,   395,   408,   412,   416,   423,   425,   425,
     437,   442,   447,   449,   452,   455,   458,   461,   467,   469,
     474,   476,   478,   480,   482,   484,   486,   488,   490,   492,
     494,   499,   506,   513,   519,   526,   553,   576,   589,   612,
     635,   635,   693,   693,   725,   743,   765,   773,   778,   780,
     785,   792,   802,   802,   816,   825,   837,   861,   917,   936,
     963,   965,   970,   977,   980,   983,   992,  1006,  1023,  1023,
    1037,  1037,  1047,  1047,  1058,  1061,  1067,  1073,  1076,  1079,
    1082,  1088,  1093,  1100,  1108,  1111,  1117,  1127,  1137,  1145,
    1156,  1161,  1169,  1180,  1185,  1188,  1194,  1198,  1194,  1250,
    1253,  1256,  1262,  1262,  1272,  1278,  1281,  1284,  1287,  1290,
    1293,  1299,  1302,  1318,  1318,  1327,  1327,  1337,  1340,  1343,
    1349,  1352,  1355,  1358,  1361,  1364,  1367,  1370,  1373,  1376,
    1379,  1382,  1385,  1388,  1391,  1394,  1401,  1408,  1414,  1420,
    1426,  1433,  1436,  1439,  1442,  1445,  1448,  1451,  1454,  1458,
    1462,  1469,  1472,  1478,  1480,  1485,  1488,  1488,  1504,  1507,
    1513,  1516,  1522,  1522,  1531,  1533,  1538,  1541,  1547,  1550,
    1576,  1596,  1599,  1613,  1613,  1622,  1624,  1629,  1631,  1636,
    1650,  1654,  1663,  1670,  1673,  1679,  1682,  1688,  1691,  1694,
    1700,  1703,  1709,  1712,  1715,  1719,  1725,  1729,  1736,  1742,
    1742,  1751,  1755,  1764,  1767,  1770,  1776,  1779,  1785,  1817,
    1820,  1823,  1830,  1840,  1840,  1853,  1868,  1882,  1896,  1896,
    1939,  1942,  1948,  1955,  1965,  1968,  1971,  1974,  1977,  1983,
    1987,  1991,  2001,  2008,  2014,  2017,  2022
};
#endif

#if YYDEBUG || YYERROR_VERBOSE || 1
/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "\"end of query string\"", "error", "$undefined", "\"FOR declaration\"",
  "\"LET declaration\"", "\"FILTER declaration\"",
  "\"RETURN declaration\"", "\"COLLECT declaration\"",
  "\"SORT declaration\"", "\"LIMIT declaration\"", "\"ASC keyword\"",
  "\"DESC keyword\"", "\"IN keyword\"", "\"WITH keyword\"",
  "\"INTO keyword\"", "\"AGGREGATE keyword\"", "\"GRAPH keyword\"",
  "\"SHORTEST_PATH keyword\"", "\"K_SHORTEST_PATHS keyword\"",
  "\"DISTINCT modifier\"", "\"REMOVE command\"", "\"INSERT command\"",
  "\"UPDATE command\"", "\"REPLACE command\"", "\"UPSERT command\"",
  "\"null\"", "\"true\"", "\"false\"", "\"identifier\"",
  "\"quoted string\"", "\"integer number\"", "\"number\"",
  "\"bind parameter\"", "\"bind data source parameter\"", "\"assignment\"",
  "\"not operator\"", "\"and operator\"", "\"or operator\"",
  "\"~= operator\"", "\"~! operator\"", "\"== operator\"",
  "\"!= operator\"", "\"< operator\"", "\"> operator\"", "\"<= operator\"",
  "\">= operator\"", "\"like operator\"", "\"+ operator\"",
  "\"- operator\"", "\"* operator\"", "\"/ operator\"", "\"% operator\"",
  "\"?\"", "\":\"", "\"::\"", "\"..\"", "\",\"", "\"(\"", "\")\"", "\"{\"",
  "\"}\"", "\"[\"", "\"]\"", "\"outbound modifier\"",
  "\"inbound modifier\"", "\"any modifier\"", "\"all modifier\"",
  "\"none modifier\"", "UMINUS", "UPLUS", "UNEGATION", "FUNCCALL",
  "REFERENCE", "INDEXED", "EXPANSION", "'.'", "$accept", "with_collection",
  "with_collection_list", "optional_with", "$@1", "queryStart", "query",
  "final_statement", "optional_statement_block_statements",
  "statement_block_statement", "more_output_variables",
  "for_output_variables", "prune_and_options", "traversal_graph_info",
  "shortest_path_graph_info", "k_shortest_paths_graph_info",
  "for_statement", "$@2", "$@3", "filter_statement", "let_statement",
  "let_list", "let_element", "count_into", "collect_variable_list", "$@4",
  "collect_statement", "collect_list", "collect_element",
  "collect_optional_into", "variable_list", "keep", "$@5", "aggregate",
  "$@6", "sort_statement", "$@7", "sort_list", "sort_element",
  "sort_direction", "limit_statement", "return_statement",
  "in_or_into_collection", "remove_statement", "insert_statement",
  "update_parameters", "update_statement", "replace_parameters",
  "replace_statement", "update_or_replace", "upsert_statement", "$@8",
  "$@9", "quantifier", "distinct_expression", "$@10", "expression",
  "function_name", "function_call", "$@11", "$@12", "operator_unary",
  "operator_binary", "operator_ternary",
  "optional_function_call_arguments", "expression_or_query", "$@13",
  "function_arguments_list", "compound_value", "array", "$@14",
  "optional_array_elements", "array_elements_list", "for_options",
  "options", "object", "$@15", "optional_object_elements",
  "object_elements_list", "object_element", "array_filter_operator",
  "optional_array_filter", "optional_array_limit", "optional_array_return",
  "graph_collection", "graph_collection_list", "graph_subject", "$@16",
  "graph_direction", "graph_direction_steps", "reference", "$@17", "$@18",
  "simple_value", "numeric_value", "value_literal",
  "in_or_into_collection_name", "bind_parameter", "object_element_name",
  "variable_name", YY_NULLPTR
};
#endif

# ifdef YYPRINT
/* YYTOKNUM[NUM] -- (External) token number corresponding to the
   (internal) symbol number NUM (which must be that of a token).  */
static const yytype_uint16 yytoknum[] =
{
       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,    46
};
# endif

#define YYPACT_NINF -361

#define yypact_value_is_default(Yystate) \
  (!!((Yystate) == (-361)))

#define YYTABLE_NINF -235

#define yytable_value_is_error(Yytable_value) \
  0

  /* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
     STATE-NUM.  */
static const yytype_int16 yypact[] =
{
       4,  -361,  -361,    32,   111,  -361,   384,  -361,  -361,  -361,
    -361,  -361,     2,  -361,    10,    10,  1398,  1246,    44,  -361,
    1398,  1398,  1398,  1398,  1398,  -361,  -361,  -361,  -361,  -361,
    -361,   143,  -361,  -361,  -361,  -361,    31,    39,    43,    79,
      91,   111,  -361,  -361,     5,    53,  -361,    15,  -361,    48,
    -361,  -361,  -361,    18,  -361,  -361,  -361,  1398,    20,  1398,
    1398,  1398,  -361,  -361,  1122,    58,  -361,  -361,  -361,  -361,
    -361,  -361,  -361,   -19,  -361,  -361,  -361,  -361,  -361,  1122,
      56,  -361,   108,    10,    72,  1398,   666,   711,   711,  -361,
     494,  -361,   538,  1398,    10,   108,   110,    72,  -361,    10,
    1283,    10,  1398,  -361,  -361,  -361,  -361,   752,  -361,   -17,
    1398,  1398,   168,  1398,  1398,  1398,  1398,  1398,  1398,  1398,
    1398,  1398,  1398,  1398,  1398,  1398,  1398,  1398,  1398,  1324,
    1398,    59,   106,   115,    66,   117,  -361,   302,   120,  1398,
     137,    10,   116,  -361,   125,  -361,   155,   108,   140,  -361,
     409,  1398,  1435,    12,   108,   108,  1398,   108,  1398,   108,
    1122,   177,  -361,   116,   108,  -361,   108,  -361,  -361,  -361,
    -361,  -361,  -361,  -361,   579,    30,  1398,  -361,  1122,  1361,
    -361,   157,   160,  -361,   178,  1398,   152,   165,  -361,   180,
    1122,   173,   174,   367,  1398,  1398,  1398,  1398,  1203,  1163,
     210,   210,   210,   210,   253,   253,   253,   253,   210,   144,
     144,  -361,  -361,  -361,  1398,   793,   154,   224,   225,   228,
    1398,  1398,  1398,  1398,  1398,  1398,  1398,  -361,  1361,  -361,
     835,   192,  -361,  -361,  1122,    10,   125,  -361,    10,  1398,
    -361,  1398,  -361,  -361,  -361,  -361,  -361,  -361,  1122,   162,
      46,   375,  -361,  -361,  -361,  -361,  -361,  -361,  -361,   711,
    -361,   711,  -361,   222,  1398,    10,  -361,  -361,   218,   237,
     219,  -361,  1398,  1398,   450,  1122,   190,  -361,  -361,   194,
    -361,  1398,   876,  -361,   -17,  1398,  -361,  1398,   367,   210,
     210,   210,  1122,  1398,  1398,  1398,  1398,   367,   210,   210,
     253,   253,   253,   253,   193,  -361,  -361,   251,  -361,  -361,
    1122,  -361,   108,   108,  1398,  1122,   206,  -361,  1398,  -361,
    1398,  -361,   917,   958,   131,  -361,   207,  -361,   159,  -361,
    -361,  -361,  1398,  1122,   213,  -361,  1122,  1122,  1122,   367,
     367,   367,  -361,  1398,   259,  -361,  -361,   625,    10,   999,
    1040,  1398,  1398,  -361,  -361,  -361,  -361,  -361,  -361,  1398,
    1122,  1398,   263,  -361,  -361,  1398,  -361,   116,  1398,   450,
     450,   145,  1122,  1081,  1398,   209,   711,  -361,  1122,   108,
     108,  -361,   217,  1398,  1122,  -361,   108,  -361,  -361,   145,
    1122,  -361,  -361
};

  /* YYDEFACT[STATE-NUM] -- Default reduction number in state STATE-NUM.
     Performed when YYTABLE does not specify something else to do.  Zero
     means the default is an error.  */
static const yytype_uint8 yydefact[] =
{
       7,     8,    18,     0,     0,    10,     0,     1,     2,   233,
     232,     4,     9,     3,     0,     0,     0,     0,    52,    72,
       0,     0,     0,     0,     0,    96,    11,    19,    20,    22,
      21,    63,    23,    24,    25,    12,    26,    27,    28,    29,
      30,     0,     6,   236,    33,     0,    31,    47,    48,     0,
     226,   227,   228,   208,   224,   222,   223,     0,     0,     0,
       0,   213,   173,   162,    46,     0,   211,   105,   106,   107,
     209,   160,   161,   109,   225,   108,   210,   102,    83,   104,
       0,    70,   171,     0,    63,     0,    81,     0,     0,    90,
       0,    93,     0,     0,     0,   171,   171,    63,     5,     0,
       0,     0,     0,   119,   115,   117,   118,     0,    18,   175,
     164,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   100,    99,   101,     0,     0,   113,     0,     0,     0,
       0,     0,     0,    54,    53,    60,     0,   171,    73,    74,
      77,     0,     0,     0,   171,   171,     0,   171,     0,   171,
      97,    64,    55,    68,   171,    58,   171,    32,   203,   204,
     205,    42,    44,    45,    40,   206,     0,    49,    50,   156,
     212,     0,   179,   235,     0,     0,     0,   176,   177,     0,
     166,     0,   165,   133,     0,     0,     0,     0,   121,   120,
     139,   140,   127,   128,   129,   130,   131,   132,   138,   122,
     123,   124,   125,   126,     0,     0,   110,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   112,   156,   183,
       0,   218,   215,   216,   103,     0,    71,   172,     0,     0,
      56,     0,    78,    79,    76,    80,   220,   221,    82,   208,
     224,   232,    84,   229,   230,   231,    85,    86,    87,     0,
      88,     0,    91,     0,     0,     0,    59,    57,    34,   205,
     168,   207,     0,     0,     0,   155,     0,   158,    18,   154,
     214,     0,     0,   174,     0,     0,   163,     0,   134,   136,
     137,   135,   152,     0,     0,     0,     0,   147,   141,   142,
     143,   144,   145,   146,     0,   217,   184,   185,    51,    61,
      62,    75,   171,   171,     0,    65,    69,    66,     0,    43,
       0,    41,     0,     0,     0,   192,   198,    37,     0,   193,
     116,   157,   156,   181,     0,   178,   180,   167,   151,   149,
     148,   150,   114,     0,   187,    89,    92,     0,     0,    35,
     169,     0,     0,   202,   201,   199,   194,   195,   159,     0,
     186,     0,   190,    94,    95,     0,    67,     0,     0,     0,
       0,     0,   182,   188,     0,     0,     0,    36,   170,   171,
     171,   196,   200,     0,   191,   219,   171,    38,    39,     0,
     189,    98,   197
};

  /* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
    -361,    -8,  -361,  -361,  -361,  -361,  -102,  -361,  -361,  -361,
    -361,  -361,  -361,  -361,  -361,  -361,  -361,  -361,  -361,  -361,
    -361,  -361,   182,   243,  -361,  -361,  -361,   146,    47,   -68,
    -361,  -361,  -361,   255,  -361,  -361,  -361,  -361,    50,  -361,
    -361,  -361,   -87,  -361,  -361,  -361,  -361,  -361,  -361,  -361,
    -361,  -361,  -361,  -361,  -361,  -361,     3,  -361,  -361,  -361,
    -361,  -361,  -361,  -361,    64,   -39,  -361,  -361,  -361,  -361,
    -361,  -361,  -361,  -361,   -74,  -135,  -361,  -361,  -361,    11,
    -361,  -361,  -361,  -361,  -353,  -361,  -360,  -361,   -98,  -361,
    -361,  -361,  -361,  -361,  -361,   161,   141,    -4,  -361,    -1
};

  /* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
      -1,    11,    12,     2,     4,     3,     5,    26,     6,    27,
      44,    45,   319,   171,   172,   173,    28,   270,   268,    29,
      30,    47,    48,    82,    31,    83,    32,   144,   145,    96,
     316,   164,   265,    84,   141,    33,    85,   148,   149,   244,
      34,    35,   154,    36,    37,    89,    38,    91,    39,   365,
      40,    93,   263,   134,    78,   139,   275,    65,    66,   228,
     179,    67,    68,    69,   276,   277,   278,   279,    70,    71,
     110,   191,   192,   321,   143,    72,   109,   186,   187,   188,
     231,   344,   362,   375,   326,   382,   327,   371,   328,   176,
      73,   108,   307,   245,    74,    75,   252,    76,   189,   146
};

  /* YYTABLE[YYPACT[STATE-NUM]] -- What to do in state STATE-NUM.  If
     positive, shift that token.  If negative, reduce the rule whose
     number is the opposite.  If YYTABLE_NINF, syntax error.  */
static const yytype_int16 yytable[] =
{
      13,   155,   175,   157,    42,   159,   181,   237,    13,   379,
     380,   182,   183,    46,    49,   184,   147,     1,   381,    64,
      79,   162,   165,    86,    87,    88,    90,    92,   237,   166,
       8,   -13,     7,    98,     9,    10,   392,    13,    43,   -14,
     253,   254,   137,   -15,   185,   255,  -230,   272,   273,  -230,
    -230,  -230,  -230,  -230,  -230,  -230,   138,    80,    41,    81,
     103,    99,   105,   106,   107,   100,  -230,  -230,  -230,  -230,
    -230,   101,  -111,   240,  -230,  -111,   271,   104,   220,   -16,
     257,   258,   102,   260,   140,   262,    94,   -13,   150,   -13,
     266,   -17,   267,   161,   217,   -14,   160,   -14,   167,   -15,
      49,   -15,  -230,   174,  -230,   178,   221,   222,   223,   224,
     225,   226,   135,   190,   193,   136,   198,   199,   200,   201,
     202,   203,   204,   205,   206,   207,   208,   209,   210,   211,
     212,   213,   215,   216,   233,   -16,   142,   -16,   163,     8,
     230,   218,   234,     9,    10,   227,   247,   -17,   232,   -17,
     219,   235,     9,    10,   248,   193,    80,    94,    81,   259,
     353,   261,  -229,     9,    10,  -229,  -229,  -229,  -229,  -229,
    -229,  -229,   312,   325,   313,    62,   331,     9,    10,   274,
     194,   238,  -229,  -229,  -229,  -229,  -229,   356,   282,   239,
    -229,     9,    10,   126,   127,   128,   241,   288,   289,   290,
     291,   124,   125,   126,   127,   128,   195,   196,   168,   169,
     170,   264,   283,  -234,   197,   280,  -111,   292,  -229,  -111,
    -229,   284,   111,   297,   298,   299,   300,   301,   302,   303,
     287,   281,   377,   285,   308,   286,   294,   295,   345,   346,
     296,   306,   310,   314,   150,   112,   318,   320,   330,  -100,
     332,   342,   119,   120,   121,   122,   343,   124,   125,   126,
     127,   128,   348,   355,   317,   130,   359,   315,   361,   374,
     329,   385,   217,   389,    95,   322,   323,  -100,  -100,  -100,
    -100,  -100,  -100,   177,   333,   309,    97,   236,   336,   386,
     337,   311,   304,   358,   256,   335,   338,   339,   340,   341,
     124,   125,   126,   127,   128,   387,   388,     0,   130,     0,
       0,   246,   391,     0,     0,     0,     0,   347,     0,     0,
     354,   349,     0,   350,   357,     0,     0,    50,    51,    52,
      53,    54,    55,    56,     9,    10,     0,    57,     0,     0,
       0,     0,     0,     0,     0,     0,   360,   366,    58,    59,
      60,   229,     0,     0,   369,   370,     0,     0,     0,    61,
       0,    62,   372,    63,   373,   329,   329,   329,   376,     0,
       0,   378,     0,     0,     0,  -231,     0,   384,  -231,  -231,
    -231,  -231,  -231,  -231,  -231,   329,   390,    14,    15,    16,
      17,    18,    19,    20,     0,  -231,  -231,  -231,  -231,  -231,
       0,     0,     0,  -231,    21,    22,    23,    24,    25,   119,
     120,   121,   122,     0,   124,   125,   126,   127,   128,   242,
     243,   111,   130,     0,     0,     0,     0,     0,     0,     0,
       0,  -231,     0,  -231,    50,    51,    52,     0,    54,    55,
      56,     9,    10,     0,   112,   113,   114,   115,   116,   117,
     118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
     128,   129,   111,     0,   130,     0,   324,     0,     0,     0,
       0,     0,     0,     0,   131,   132,   133,     0,   325,     0,
       0,     0,     9,    10,     0,   112,   113,   114,   115,   116,
     117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
     127,   128,   129,     0,     0,   130,   152,   156,   153,     0,
       0,     0,     0,   168,   169,   269,   132,   133,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   112,
     113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
     123,   124,   125,   126,   127,   128,   129,     0,     0,   130,
     152,   158,   153,     0,     0,     0,     0,     0,     0,   131,
     132,   133,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   112,   113,   114,   115,   116,   117,   118,
     119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
     129,   111,     0,   130,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   131,   132,   133,     0,     0,     0,     0,
       0,     0,     0,     0,   112,   113,   114,   115,   116,   117,
     118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
     128,   129,     0,     0,   130,     0,     0,   111,     0,     0,
       0,     0,   168,   169,   269,   132,   133,   363,   364,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
     122,   123,   124,   125,   126,   127,   128,   129,   111,     0,
     130,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     131,   132,   133,     0,     0,     0,     0,     0,     0,     0,
       0,   112,   113,   114,   115,   116,   117,   118,   119,   120,
     121,   122,   123,   124,   125,   126,   127,   128,   129,     0,
       0,   130,   151,   152,     0,   153,     0,     0,     0,     0,
       0,   131,   132,   133,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
     126,   127,   128,   129,   111,     0,   130,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   131,   132,   133,     0,
       0,     0,     0,     0,     0,     0,     0,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   111,     0,   130,     0,     0,
     180,     0,     0,     0,     0,     0,     0,   131,   132,   133,
       0,     0,     0,     0,     0,     0,     0,     0,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
     124,   125,   126,   127,   128,   129,   293,   111,   130,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   131,   132,
     133,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
     122,   123,   124,   125,   126,   127,   128,   129,   111,     0,
     130,     0,     0,     0,     0,     0,     0,   305,     0,     0,
     131,   132,   133,     0,     0,     0,     0,     0,     0,     0,
       0,   112,   113,   114,   115,   116,   117,   118,   119,   120,
     121,   122,   123,   124,   125,   126,   127,   128,   129,   111,
       0,   130,     0,     0,     0,     0,     0,     0,   334,     0,
       0,   131,   132,   133,     0,   351,     0,     0,     0,     0,
       0,     0,   112,   113,   114,   115,   116,   117,   118,   119,
     120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
     111,     0,   130,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   131,   132,   133,     0,   352,     0,     0,     0,
       0,     0,     0,   112,   113,   114,   115,   116,   117,   118,
     119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
     129,   111,     0,   130,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   131,   132,   133,     0,   367,     0,     0,
       0,     0,     0,     0,   112,   113,   114,   115,   116,   117,
     118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
     128,   129,   111,     0,   130,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   131,   132,   133,     0,   368,     0,
       0,     0,     0,     0,     0,   112,   113,   114,   115,   116,
     117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
     127,   128,   129,   111,     0,   130,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   131,   132,   133,     0,     0,
       0,     0,     0,     0,     0,     0,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
     126,   127,   128,   129,   111,     0,   130,   383,     0,     0,
       0,     0,     0,     0,     0,     0,   131,   132,   133,     0,
       0,     0,     0,     0,     0,     0,     0,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   111,     0,   130,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   131,   132,   133,
       0,     0,     0,     0,     0,     0,     0,     0,   112,   113,
       0,   115,   116,   117,   118,   119,   120,   121,   122,   123,
     124,   125,   126,   127,   128,   111,     0,     0,   130,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   131,   132,
     133,     0,     0,     0,     0,     0,     0,     0,   112,     0,
       0,   115,   116,   117,   118,   119,   120,   121,   122,   123,
     124,   125,   126,   127,   128,     0,     0,     0,   130,     0,
       0,     0,     0,     0,     0,    77,     0,     0,   131,   132,
     133,    50,    51,    52,    53,    54,    55,    56,     9,    10,
       0,    57,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    58,    59,    60,     0,     0,     0,     0,     0,
       0,     0,     0,    61,     0,    62,     0,    63,    50,    51,
      52,    53,    54,    55,    56,     9,    10,     0,    57,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    58,
      59,    60,     0,     0,     0,     0,     0,     0,     0,     0,
      61,     0,    62,     0,    63,     0,   168,   169,   170,    50,
      51,    52,    53,    54,    55,    56,     9,    10,     0,    57,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      58,    59,    60,     0,     0,     0,     0,   214,     0,     0,
       0,    61,     0,    62,     0,    63,    50,    51,    52,    53,
      54,    55,    56,     9,    10,     0,    57,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    58,    59,    60,
       0,     0,     0,     0,     0,     0,     0,     0,    61,  -153,
      62,     0,    63,    50,    51,    52,    53,    54,    55,    56,
       9,    10,     0,    57,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    58,    59,    60,     0,     0,     0,
       0,     0,     0,     0,     0,    61,     0,    62,     0,    63,
      50,    51,    52,   249,   250,    55,    56,     9,   251,     0,
      57,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    58,    59,    60,     0,     0,     0,     0,     0,     0,
       0,     0,    61,     0,    62,     0,    63
};

static const yytype_int16 yycheck[] =
{
       4,    88,   100,    90,    12,    92,   108,   142,    12,   369,
     370,    28,    29,    14,    15,    32,    84,    13,   371,    16,
      17,    95,    96,    20,    21,    22,    23,    24,   163,    97,
      28,     0,     0,    41,    32,    33,   389,    41,    28,     0,
      28,    29,    61,     0,    61,    33,     0,    17,    18,     3,
       4,     5,     6,     7,     8,     9,    75,    13,    56,    15,
      57,    56,    59,    60,    61,    12,    20,    21,    22,    23,
      24,    56,    54,   147,    28,    57,   174,    57,    12,     0,
     154,   155,    34,   157,    28,   159,    14,    56,    85,    58,
     164,     0,   166,    94,    35,    56,    93,    58,    99,    56,
     101,    58,    56,   100,    58,   102,    40,    41,    42,    43,
      44,    45,    54,   110,   111,    57,   113,   114,   115,   116,
     117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
     127,   128,   129,   130,   138,    56,    28,    58,    28,    28,
     137,    35,   139,    32,    33,    28,   150,    56,    28,    58,
      35,    14,    32,    33,   151,   152,    13,    14,    15,   156,
      29,   158,     0,    32,    33,     3,     4,     5,     6,     7,
       8,     9,   259,    28,   261,    59,   278,    32,    33,   176,
      12,    56,    20,    21,    22,    23,    24,    28,   185,    34,
      28,    32,    33,    49,    50,    51,    56,   194,   195,   196,
     197,    47,    48,    49,    50,    51,    38,    39,    63,    64,
      65,    34,    60,    53,    46,    58,    54,   214,    56,    57,
      58,    56,    12,   220,   221,   222,   223,   224,   225,   226,
      56,    53,   367,    53,   235,    62,    12,    12,   312,   313,
      12,    49,   239,    21,   241,    35,    28,    28,    58,    12,
      56,    58,    42,    43,    44,    45,     5,    47,    48,    49,
      50,    51,    56,    56,   265,    55,    53,   264,     9,     6,
     274,    62,    35,    56,    31,   272,   273,    40,    41,    42,
      43,    44,    45,   101,   281,   238,    31,   141,   285,   376,
     287,   241,   228,   332,   153,   284,   293,   294,   295,   296,
      47,    48,    49,    50,    51,   379,   380,    -1,    55,    -1,
      -1,   150,   386,    -1,    -1,    -1,    -1,   314,    -1,    -1,
     324,   318,    -1,   320,   328,    -1,    -1,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    -1,    35,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   343,   348,    46,    47,
      48,    49,    -1,    -1,   351,   352,    -1,    -1,    -1,    57,
      -1,    59,   359,    61,   361,   369,   370,   371,   365,    -1,
      -1,   368,    -1,    -1,    -1,     0,    -1,   374,     3,     4,
       5,     6,     7,     8,     9,   389,   383,     3,     4,     5,
       6,     7,     8,     9,    -1,    20,    21,    22,    23,    24,
      -1,    -1,    -1,    28,    20,    21,    22,    23,    24,    42,
      43,    44,    45,    -1,    47,    48,    49,    50,    51,    10,
      11,    12,    55,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    56,    -1,    58,    25,    26,    27,    -1,    29,    30,
      31,    32,    33,    -1,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    12,    -1,    55,    -1,    16,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    65,    66,    67,    -1,    28,    -1,
      -1,    -1,    32,    33,    -1,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    -1,    -1,    55,    12,    13,    14,    -1,
      -1,    -1,    -1,    63,    64,    65,    66,    67,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    -1,    -1,    55,
      12,    13,    14,    -1,    -1,    -1,    -1,    -1,    -1,    65,
      66,    67,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    12,    -1,    55,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    65,    66,    67,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    -1,    -1,    55,    -1,    -1,    12,    -1,    -1,
      -1,    -1,    63,    64,    65,    66,    67,    22,    23,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    12,    -1,
      55,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      65,    66,    67,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    -1,
      -1,    55,    56,    12,    -1,    14,    -1,    -1,    -1,    -1,
      -1,    65,    66,    67,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    12,    -1,    55,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    67,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    12,    -1,    55,    -1,    -1,
      58,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    67,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    12,    55,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,
      67,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    12,    -1,
      55,    -1,    -1,    -1,    -1,    -1,    -1,    62,    -1,    -1,
      65,    66,    67,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    12,
      -1,    55,    -1,    -1,    -1,    -1,    -1,    -1,    62,    -1,
      -1,    65,    66,    67,    -1,    28,    -1,    -1,    -1,    -1,
      -1,    -1,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      12,    -1,    55,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    65,    66,    67,    -1,    28,    -1,    -1,    -1,
      -1,    -1,    -1,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    12,    -1,    55,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    65,    66,    67,    -1,    28,    -1,    -1,
      -1,    -1,    -1,    -1,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    12,    -1,    55,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    65,    66,    67,    -1,    28,    -1,
      -1,    -1,    -1,    -1,    -1,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    12,    -1,    55,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    65,    66,    67,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    12,    -1,    55,    56,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    67,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    12,    -1,    55,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    67,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    35,    36,
      -1,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    12,    -1,    -1,    55,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,
      67,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    35,    -1,
      -1,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    -1,    -1,    -1,    55,    -1,
      -1,    -1,    -1,    -1,    -1,    19,    -1,    -1,    65,    66,
      67,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      -1,    35,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    46,    47,    48,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    57,    -1,    59,    -1,    61,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    -1,    35,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    46,
      47,    48,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      57,    -1,    59,    -1,    61,    -1,    63,    64,    65,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    -1,    35,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      46,    47,    48,    -1,    -1,    -1,    -1,    53,    -1,    -1,
      -1,    57,    -1,    59,    -1,    61,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    -1,    35,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    46,    47,    48,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    57,    58,
      59,    -1,    61,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    -1,    35,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    46,    47,    48,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    57,    -1,    59,    -1,    61,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    -1,
      35,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    46,    47,    48,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    57,    -1,    59,    -1,    61
};

  /* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
     symbol of state STATE-NUM.  */
static const yytype_uint8 yystos[] =
{
       0,    13,    79,    81,    80,    82,    84,     0,    28,    32,
      33,    77,    78,   173,     3,     4,     5,     6,     7,     8,
       9,    20,    21,    22,    23,    24,    83,    85,    92,    95,
      96,   100,   102,   111,   116,   117,   119,   120,   122,   124,
     126,    56,    77,    28,    86,    87,   175,    97,    98,   175,
      25,    26,    27,    28,    29,    30,    31,    35,    46,    47,
      48,    57,    59,    61,   132,   133,   134,   137,   138,   139,
     144,   145,   151,   166,   170,   171,   173,    19,   130,   132,
      13,    15,    99,   101,   109,   112,   132,   132,   132,   121,
     132,   123,   132,   127,    14,    99,   105,   109,    77,    56,
      12,    56,    34,   132,    57,   132,   132,   132,   167,   152,
     146,    12,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      55,    65,    66,    67,   129,    54,    57,    61,    75,   131,
      28,   110,    28,   150,   103,   104,   175,   105,   113,   114,
     132,    56,    12,    14,   118,   118,    13,   118,    13,   118,
     132,   175,   150,    28,   107,   150,   105,   175,    63,    64,
      65,    89,    90,    91,   132,   164,   165,    98,   132,   136,
      58,    82,    28,    29,    32,    61,   153,   154,   155,   174,
     132,   147,   148,   132,    12,    38,    39,    46,   132,   132,
     132,   132,   132,   132,   132,   132,   132,   132,   132,   132,
     132,   132,   132,   132,    53,   132,   132,    35,    35,    35,
      12,    40,    41,    42,    43,    44,    45,    28,   135,    49,
     132,   156,    28,   173,   132,    14,   103,   151,    56,    34,
     150,    56,    10,    11,   115,   169,   171,   173,   132,    28,
      29,    33,   172,    28,    29,    33,   172,   150,   150,   132,
     150,   132,   150,   128,    34,   108,   150,   150,    94,    65,
      93,   164,    17,    18,   132,   132,   140,   141,   142,   143,
      58,    53,   132,    60,    56,    53,    62,    56,   132,   132,
     132,   132,   132,    53,    12,    12,    12,   132,   132,   132,
     132,   132,   132,   132,   140,    62,    49,   168,   175,   104,
     132,   114,   118,   118,    21,   132,   106,   175,    28,    88,
      28,   149,   132,   132,    16,    28,   160,   162,   164,   173,
      58,    82,    56,   132,    62,   155,   132,   132,   132,   132,
     132,   132,    58,     5,   157,   150,   150,   132,    56,   132,
     132,    28,    28,    29,   173,    56,    28,   173,   141,    53,
     132,     9,   158,    22,    23,   125,   175,    28,    28,   132,
     132,   163,   132,   132,     6,   159,   132,   151,   132,   162,
     162,   160,   161,    56,   132,    62,   118,   150,   150,    56,
     132,   150,   160
};

  /* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const yytype_uint8 yyr1[] =
{
       0,    76,    77,    77,    78,    78,    78,    79,    80,    79,
      81,    82,    83,    83,    83,    83,    83,    83,    84,    84,
      85,    85,    85,    85,    85,    85,    85,    85,    85,    85,
      85,    86,    86,    87,    88,    88,    88,    89,    90,    91,
      93,    92,    94,    92,    92,    92,    95,    96,    97,    97,
      98,    99,   101,   100,   102,   102,   102,   102,   102,   102,
     103,   103,   104,   105,   105,   105,   106,   106,   108,   107,
     110,   109,   112,   111,   113,   113,   114,   115,   115,   115,
     115,   116,   116,   117,   118,   118,   119,   120,   121,   121,
     122,   123,   123,   124,   125,   125,   127,   128,   126,   129,
     129,   129,   131,   130,   130,   132,   132,   132,   132,   132,
     132,   133,   133,   135,   134,   136,   134,   137,   137,   137,
     138,   138,   138,   138,   138,   138,   138,   138,   138,   138,
     138,   138,   138,   138,   138,   138,   138,   138,   138,   138,
     138,   138,   138,   138,   138,   138,   138,   138,   138,   138,
     138,   139,   139,   140,   140,   141,   142,   141,   143,   143,
     144,   144,   146,   145,   147,   147,   148,   148,   149,   149,
     149,   150,   150,   152,   151,   153,   153,   154,   154,   155,
     155,   155,   155,   156,   156,   157,   157,   158,   158,   158,
     159,   159,   160,   160,   160,   160,   161,   161,   162,   163,
     162,   162,   162,   164,   164,   164,   165,   165,   166,   166,
     166,   166,   166,   167,   166,   166,   166,   166,   168,   166,
     169,   169,   170,   170,   171,   171,   171,   171,   171,   172,
     172,   172,   173,   173,   174,   174,   175
};

  /* YYR2[YYN] -- Number of symbols on the right hand side of rule YYN.  */
static const yytype_uint8 yyr2[] =
{
       0,     2,     1,     1,     1,     3,     2,     0,     0,     3,
       2,     2,     1,     1,     1,     1,     1,     1,     0,     2,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     3,     1,     0,     2,     4,     3,     7,     7,
       0,     6,     0,     6,     4,     4,     2,     2,     1,     3,
       3,     4,     0,     3,     3,     3,     4,     4,     3,     4,
       1,     3,     3,     0,     2,     4,     1,     3,     0,     3,
       0,     3,     0,     3,     1,     3,     2,     0,     1,     1,
       1,     2,     4,     2,     2,     2,     4,     4,     3,     5,
       2,     3,     5,     2,     1,     1,     0,     0,    10,     1,
       1,     1,     0,     3,     1,     1,     1,     1,     1,     1,
       3,     1,     3,     0,     5,     0,     5,     2,     2,     2,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     4,     4,     4,     4,     3,     3,
       3,     4,     4,     4,     4,     4,     4,     4,     5,     5,
       5,     5,     4,     0,     1,     1,     0,     2,     1,     3,
       1,     1,     0,     4,     0,     1,     1,     3,     0,     2,
       4,     0,     2,     0,     4,     0,     1,     1,     3,     1,
       3,     3,     5,     1,     2,     0,     2,     0,     2,     4,
       0,     2,     1,     1,     2,     2,     1,     3,     1,     0,
       4,     2,     2,     1,     1,     1,     1,     2,     1,     1,
       1,     1,     3,     0,     4,     3,     3,     4,     0,     8,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1
};


#define yyerrok         (yyerrstatus = 0)
#define yyclearin       (yychar = YYEMPTY)
#define YYEMPTY         (-2)
#define YYEOF           0

#define YYACCEPT        goto yyacceptlab
#define YYABORT         goto yyabortlab
#define YYERROR         goto yyerrorlab


#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)                                    \
  do                                                              \
    if (yychar == YYEMPTY)                                        \
      {                                                           \
        yychar = (Token);                                         \
        yylval = (Value);                                         \
        YYPOPSTACK (yylen);                                       \
        yystate = *yyssp;                                         \
        goto yybackup;                                            \
      }                                                           \
    else                                                          \
      {                                                           \
        yyerror (&yylloc, parser, YY_("syntax error: cannot back up")); \
        YYERROR;                                                  \
      }                                                           \
  while (0)

/* Error token number */
#define YYTERROR        1
#define YYERRCODE       256


/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)                                \
    do                                                                  \
      if (N)                                                            \
        {                                                               \
          (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;        \
          (Current).first_column = YYRHSLOC (Rhs, 1).first_column;      \
          (Current).last_line    = YYRHSLOC (Rhs, N).last_line;         \
          (Current).last_column  = YYRHSLOC (Rhs, N).last_column;       \
        }                                                               \
      else                                                              \
        {                                                               \
          (Current).first_line   = (Current).last_line   =              \
            YYRHSLOC (Rhs, 0).last_line;                                \
          (Current).first_column = (Current).last_column =              \
            YYRHSLOC (Rhs, 0).last_column;                              \
        }                                                               \
    while (0)
#endif

#define YYRHSLOC(Rhs, K) ((Rhs)[K])


/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)                        \
do {                                            \
  if (yydebug)                                  \
    YYFPRINTF Args;                             \
} while (0)


/* YY_LOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */

#ifndef YY_LOCATION_PRINT
# if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL

/* Print *YYLOCP on YYO.  Private, do not rely on its existence. */

YY_ATTRIBUTE_UNUSED
static int
yy_location_print_ (FILE *yyo, YYLTYPE const * const yylocp)
{
  int res = 0;
  int end_col = 0 != yylocp->last_column ? yylocp->last_column - 1 : 0;
  if (0 <= yylocp->first_line)
    {
      res += YYFPRINTF (yyo, "%d", yylocp->first_line);
      if (0 <= yylocp->first_column)
        res += YYFPRINTF (yyo, ".%d", yylocp->first_column);
    }
  if (0 <= yylocp->last_line)
    {
      if (yylocp->first_line < yylocp->last_line)
        {
          res += YYFPRINTF (yyo, "-%d", yylocp->last_line);
          if (0 <= end_col)
            res += YYFPRINTF (yyo, ".%d", end_col);
        }
      else if (0 <= end_col && yylocp->first_column < end_col)
        res += YYFPRINTF (yyo, "-%d", end_col);
    }
  return res;
 }

#  define YY_LOCATION_PRINT(File, Loc)          \
  yy_location_print_ (File, &(Loc))

# else
#  define YY_LOCATION_PRINT(File, Loc) ((void) 0)
# endif
#endif


# define YY_SYMBOL_PRINT(Title, Type, Value, Location)                    \
do {                                                                      \
  if (yydebug)                                                            \
    {                                                                     \
      YYFPRINTF (stderr, "%s ", Title);                                   \
      yy_symbol_print (stderr,                                            \
                  Type, Value, Location, parser); \
      YYFPRINTF (stderr, "\n");                                           \
    }                                                                     \
} while (0)


/*-----------------------------------.
| Print this symbol's value on YYO.  |
`-----------------------------------*/

static void
yy_symbol_value_print (FILE *yyo, int yytype, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp, arangodb::aql::Parser* parser)
{
  FILE *yyoutput = yyo;
  YYUSE (yyoutput);
  YYUSE (yylocationp);
  YYUSE (parser);
  if (!yyvaluep)
    return;
# ifdef YYPRINT
  if (yytype < YYNTOKENS)
    YYPRINT (yyo, yytoknum[yytype], *yyvaluep);
# endif
  YYUSE (yytype);
}


/*---------------------------.
| Print this symbol on YYO.  |
`---------------------------*/

static void
yy_symbol_print (FILE *yyo, int yytype, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp, arangodb::aql::Parser* parser)
{
  YYFPRINTF (yyo, "%s %s (",
             yytype < YYNTOKENS ? "token" : "nterm", yytname[yytype]);

  YY_LOCATION_PRINT (yyo, *yylocationp);
  YYFPRINTF (yyo, ": ");
  yy_symbol_value_print (yyo, yytype, yyvaluep, yylocationp, parser);
  YYFPRINTF (yyo, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

static void
yy_stack_print (yytype_int16 *yybottom, yytype_int16 *yytop)
{
  YYFPRINTF (stderr, "Stack now");
  for (; yybottom <= yytop; yybottom++)
    {
      int yybot = *yybottom;
      YYFPRINTF (stderr, " %d", yybot);
    }
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)                            \
do {                                                            \
  if (yydebug)                                                  \
    yy_stack_print ((Bottom), (Top));                           \
} while (0)


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

static void
yy_reduce_print (yytype_int16 *yyssp, YYSTYPE *yyvsp, YYLTYPE *yylsp, int yyrule, arangodb::aql::Parser* parser)
{
  unsigned long yylno = yyrline[yyrule];
  int yynrhs = yyr2[yyrule];
  int yyi;
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %lu):\n",
             yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr,
                       yystos[yyssp[yyi + 1 - yynrhs]],
                       &yyvsp[(yyi + 1) - (yynrhs)]
                       , &(yylsp[(yyi + 1) - (yynrhs)])                       , parser);
      YYFPRINTF (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)          \
do {                                    \
  if (yydebug)                          \
    yy_reduce_print (yyssp, yyvsp, yylsp, Rule, parser); \
} while (0)

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
# define YY_SYMBOL_PRINT(Title, Type, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif


#if YYERROR_VERBOSE

# ifndef yystrlen
#  if defined __GLIBC__ && defined _STRING_H
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
static YYSIZE_T
yystrlen (const char *yystr)
{
  YYSIZE_T yylen;
  for (yylen = 0; yystr[yylen]; yylen++)
    continue;
  return yylen;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
static char *
yystpcpy (char *yydest, const char *yysrc)
{
  char *yyd = yydest;
  const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif

# ifndef yytnamerr
/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
   quotes and backslashes, so that it's suitable for yyerror.  The
   heuristic is that double-quoting is unnecessary unless the string
   contains an apostrophe, a comma, or backslash (other than
   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
   null, do not copy; instead, return the length of what the result
   would have been.  */
static YYSIZE_T
yytnamerr (char *yyres, const char *yystr)
{
  if (*yystr == '"')
    {
      YYSIZE_T yyn = 0;
      char const *yyp = yystr;

      for (;;)
        switch (*++yyp)
          {
          case '\'':
          case ',':
            goto do_not_strip_quotes;

          case '\\':
            if (*++yyp != '\\')
              goto do_not_strip_quotes;
            else
              goto append;

          append:
          default:
            if (yyres)
              yyres[yyn] = *yyp;
            yyn++;
            break;

          case '"':
            if (yyres)
              yyres[yyn] = '\0';
            return yyn;
          }
    do_not_strip_quotes: ;
    }

  if (! yyres)
    return yystrlen (yystr);

  return (YYSIZE_T) (yystpcpy (yyres, yystr) - yyres);
}
# endif

/* Copy into *YYMSG, which is of size *YYMSG_ALLOC, an error message
   about the unexpected token YYTOKEN for the state stack whose top is
   YYSSP.

   Return 0 if *YYMSG was successfully written.  Return 1 if *YYMSG is
   not large enough to hold the message.  In that case, also set
   *YYMSG_ALLOC to the required number of bytes.  Return 2 if the
   required number of bytes is too large to store.  */
static int
yysyntax_error (YYSIZE_T *yymsg_alloc, char **yymsg,
                yytype_int16 *yyssp, int yytoken)
{
  YYSIZE_T yysize0 = yytnamerr (YY_NULLPTR, yytname[yytoken]);
  YYSIZE_T yysize = yysize0;
  enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
  /* Internationalized format string. */
  const char *yyformat = YY_NULLPTR;
  /* Arguments of yyformat. */
  char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
  /* Number of reported tokens (one for the "unexpected", one per
     "expected"). */
  int yycount = 0;

  /* There are many possibilities here to consider:
     - If this state is a consistent state with a default action, then
       the only way this function was invoked is if the default action
       is an error action.  In that case, don't check for expected
       tokens because there are none.
     - The only way there can be no lookahead present (in yychar) is if
       this state is a consistent state with a default action.  Thus,
       detecting the absence of a lookahead is sufficient to determine
       that there is no unexpected or expected token to report.  In that
       case, just report a simple "syntax error".
     - Don't assume there isn't a lookahead just because this state is a
       consistent state with a default action.  There might have been a
       previous inconsistent state, consistent state with a non-default
       action, or user semantic action that manipulated yychar.
     - Of course, the expected token list depends on states to have
       correct lookahead information, and it depends on the parser not
       to perform extra reductions after fetching a lookahead from the
       scanner and before detecting a syntax error.  Thus, state merging
       (from LALR or IELR) and default reductions corrupt the expected
       token list.  However, the list is correct for canonical LR with
       one exception: it will still contain any token that will not be
       accepted due to an error action in a later state.
  */
  if (yytoken != YYEMPTY)
    {
      int yyn = yypact[*yyssp];
      yyarg[yycount++] = yytname[yytoken];
      if (!yypact_value_is_default (yyn))
        {
          /* Start YYX at -YYN if negative to avoid negative indexes in
             YYCHECK.  In other words, skip the first -YYN actions for
             this state because they are default actions.  */
          int yyxbegin = yyn < 0 ? -yyn : 0;
          /* Stay within bounds of both yycheck and yytname.  */
          int yychecklim = YYLAST - yyn + 1;
          int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
          int yyx;

          for (yyx = yyxbegin; yyx < yyxend; ++yyx)
            if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR
                && !yytable_value_is_error (yytable[yyx + yyn]))
              {
                if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
                  {
                    yycount = 1;
                    yysize = yysize0;
                    break;
                  }
                yyarg[yycount++] = yytname[yyx];
                {
                  YYSIZE_T yysize1 = yysize + yytnamerr (YY_NULLPTR, yytname[yyx]);
                  if (yysize <= yysize1 && yysize1 <= YYSTACK_ALLOC_MAXIMUM)
                    yysize = yysize1;
                  else
                    return 2;
                }
              }
        }
    }

  switch (yycount)
    {
# define YYCASE_(N, S)                      \
      case N:                               \
        yyformat = S;                       \
      break
    default: /* Avoid compiler warnings. */
      YYCASE_(0, YY_("syntax error"));
      YYCASE_(1, YY_("syntax error, unexpected %s"));
      YYCASE_(2, YY_("syntax error, unexpected %s, expecting %s"));
      YYCASE_(3, YY_("syntax error, unexpected %s, expecting %s or %s"));
      YYCASE_(4, YY_("syntax error, unexpected %s, expecting %s or %s or %s"));
      YYCASE_(5, YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s"));
# undef YYCASE_
    }

  {
    YYSIZE_T yysize1 = yysize + yystrlen (yyformat);
    if (yysize <= yysize1 && yysize1 <= YYSTACK_ALLOC_MAXIMUM)
      yysize = yysize1;
    else
      return 2;
  }

  if (*yymsg_alloc < yysize)
    {
      *yymsg_alloc = 2 * yysize;
      if (! (yysize <= *yymsg_alloc
             && *yymsg_alloc <= YYSTACK_ALLOC_MAXIMUM))
        *yymsg_alloc = YYSTACK_ALLOC_MAXIMUM;
      return 1;
    }

  /* Avoid sprintf, as that infringes on the user's name space.
     Don't have undefined behavior even if the translation
     produced a string with the wrong number of "%s"s.  */
  {
    char *yyp = *yymsg;
    int yyi = 0;
    while ((*yyp = *yyformat) != '\0')
      if (*yyp == '%' && yyformat[1] == 's' && yyi < yycount)
        {
          yyp += yytnamerr (yyp, yyarg[yyi++]);
          yyformat += 2;
        }
      else
        {
          yyp++;
          yyformat++;
        }
  }
  return 0;
}
#endif /* YYERROR_VERBOSE */

/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

static void
yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep, YYLTYPE *yylocationp, arangodb::aql::Parser* parser)
{
  YYUSE (yyvaluep);
  YYUSE (yylocationp);
  YYUSE (parser);
  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  YYUSE (yytype);
  YY_IGNORE_MAYBE_UNINITIALIZED_END
}




/*----------.
| yyparse.  |
`----------*/

int
yyparse (arangodb::aql::Parser* parser)
{
/* The lookahead symbol.  */
int yychar;


/* The semantic value of the lookahead symbol.  */
/* Default value used for initialization, for pacifying older GCCs
   or non-GCC compilers.  */
YY_INITIAL_VALUE (static YYSTYPE yyval_default;)
YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);

/* Location data for the lookahead symbol.  */
static YYLTYPE yyloc_default
# if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL
  = { 1, 1, 1, 1 }
# endif
;
YYLTYPE yylloc = yyloc_default;

    /* Number of syntax errors so far.  */
    int yynerrs;

    int yystate;
    /* Number of tokens to shift before error messages enabled.  */
    int yyerrstatus;

    /* The stacks and their tools:
       'yyss': related to states.
       'yyvs': related to semantic values.
       'yyls': related to locations.

       Refer to the stacks through separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */

    /* The state stack.  */
    yytype_int16 yyssa[YYINITDEPTH];
    yytype_int16 *yyss;
    yytype_int16 *yyssp;

    /* The semantic value stack.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE *yyvs;
    YYSTYPE *yyvsp;

    /* The location stack.  */
    YYLTYPE yylsa[YYINITDEPTH];
    YYLTYPE *yyls;
    YYLTYPE *yylsp;

    /* The locations where the error started and ended.  */
    YYLTYPE yyerror_range[3];

    YYSIZE_T yystacksize;

  int yyn;
  int yyresult;
  /* Lookahead token as an internal (translated) token number.  */
  int yytoken = 0;
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;
  YYLTYPE yyloc;

#if YYERROR_VERBOSE
  /* Buffer for error messages, and its allocated size.  */
  char yymsgbuf[128];
  char *yymsg = yymsgbuf;
  YYSIZE_T yymsg_alloc = sizeof yymsgbuf;
#endif

#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N), yylsp -= (N))

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  yyssp = yyss = yyssa;
  yyvsp = yyvs = yyvsa;
  yylsp = yyls = yylsa;
  yystacksize = YYINITDEPTH;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY; /* Cause a token to be read.  */
  yylsp[0] = yylloc;
  goto yysetstate;


/*------------------------------------------------------------.
| yynewstate -- push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;


/*--------------------------------------------------------------------.
| yynewstate -- set current state (the top of the stack) to yystate.  |
`--------------------------------------------------------------------*/
yysetstate:
  *yyssp = (yytype_int16) yystate;

  if (yyss + yystacksize - 1 <= yyssp)
#if !defined yyoverflow && !defined YYSTACK_RELOCATE
    goto yyexhaustedlab;
#else
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = (YYSIZE_T) (yyssp - yyss + 1);

# if defined yyoverflow
      {
        /* Give user a chance to reallocate the stack.  Use copies of
           these so that the &'s don't force the real ones into
           memory.  */
        YYSTYPE *yyvs1 = yyvs;
        yytype_int16 *yyss1 = yyss;
        YYLTYPE *yyls1 = yyls;

        /* Each stack pointer address is followed by the size of the
           data in use in that stack, in bytes.  This used to be a
           conditional around just the two extra args, but that might
           be undefined if yyoverflow is a macro.  */
        yyoverflow (YY_("memory exhausted"),
                    &yyss1, yysize * sizeof (*yyssp),
                    &yyvs1, yysize * sizeof (*yyvsp),
                    &yyls1, yysize * sizeof (*yylsp),
                    &yystacksize);
        yyss = yyss1;
        yyvs = yyvs1;
        yyls = yyls1;
      }
# else /* defined YYSTACK_RELOCATE */
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
        goto yyexhaustedlab;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
        yystacksize = YYMAXDEPTH;

      {
        yytype_int16 *yyss1 = yyss;
        union yyalloc *yyptr =
          (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
        if (! yyptr)
          goto yyexhaustedlab;
        YYSTACK_RELOCATE (yyss_alloc, yyss);
        YYSTACK_RELOCATE (yyvs_alloc, yyvs);
        YYSTACK_RELOCATE (yyls_alloc, yyls);
# undef YYSTACK_RELOCATE
        if (yyss1 != yyssa)
          YYSTACK_FREE (yyss1);
      }
# endif

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;
      yylsp = yyls + yysize - 1;

      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
                  (unsigned long) yystacksize));

      if (yyss + yystacksize - 1 <= yyssp)
        YYABORT;
    }
#endif /* !defined yyoverflow && !defined YYSTACK_RELOCATE */

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  if (yystate == YYFINAL)
    YYACCEPT;

  goto yybackup;


/*-----------.
| yybackup.  |
`-----------*/
yybackup:
  /* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to lookahead token.  */
  yyn = yypact[yystate];
  if (yypact_value_is_default (yyn))
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = yylex (&yylval, &yylloc, scanner);
    }

  if (yychar <= YYEOF)
    {
      yychar = yytoken = YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yytable_value_is_error (yyn))
        goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the lookahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);

  /* Discard the shifted token.  */
  yychar = YYEMPTY;

  yystate = yyn;
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END
  *++yylsp = yylloc;
  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     '$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];

  /* Default location. */
  YYLLOC_DEFAULT (yyloc, (yylsp - yylen), yylen);
  yyerror_range[1] = yyloc;
  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
        case 2:
#line 392 "Aql/grammar.y" /* yacc.c:1652  */
    {
      (yyval.node) = parser->ast()->createNodeValueString((yyvsp[0].strval).value, (yyvsp[0].strval).length);
    }
#line 2167 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 3:
#line 395 "Aql/grammar.y" /* yacc.c:1652  */
    {
      char const* p = (yyvsp[0].node)->getStringValue();
      size_t const len = (yyvsp[0].node)->getStringLength();

      if (len < 2 || *p != '@') {
        parser->registerParseError(TRI_ERROR_QUERY_BIND_PARAMETER_TYPE, TRI_errno_string(TRI_ERROR_QUERY_BIND_PARAMETER_TYPE), p, yylloc.first_line, yylloc.first_column);
      }

      (yyval.node) = (yyvsp[0].node);
    }
#line 2182 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 4:
#line 408 "Aql/grammar.y" /* yacc.c:1652  */
    {
       auto node = static_cast<AstNode*>(parser->peekStack());
       node->addMember((yyvsp[0].node));
     }
#line 2191 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 5:
#line 412 "Aql/grammar.y" /* yacc.c:1652  */
    {
       auto node = static_cast<AstNode*>(parser->peekStack());
       node->addMember((yyvsp[0].node));
     }
#line 2200 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 6:
#line 416 "Aql/grammar.y" /* yacc.c:1652  */
    {
       auto node = static_cast<AstNode*>(parser->peekStack());
       node->addMember((yyvsp[0].node));
     }
#line 2209 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 7:
#line 423 "Aql/grammar.y" /* yacc.c:1652  */
    {
     }
#line 2216 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 8:
#line 425 "Aql/grammar.y" /* yacc.c:1652  */
    {
      auto node = parser->ast()->createNodeArray();
      parser->pushStack(node);
     }
#line 2225 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 9:
#line 428 "Aql/grammar.y" /* yacc.c:1652  */
    {
      auto node = static_cast<AstNode*>(parser->popStack());
      auto const& resolver = parser->query()->resolver();
      auto withNode = parser->ast()->createNodeWithCollections(node, resolver);
      parser->ast()->addOperation(withNode);
     }
#line 2236 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 10:
#line 437 "Aql/grammar.y" /* yacc.c:1652  */
    {
    }
#line 2243 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 11:
#line 442 "Aql/grammar.y" /* yacc.c:1652  */
    {
    }
#line 2250 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 12:
#line 447 "Aql/grammar.y" /* yacc.c:1652  */
    {
    }
#line 2257 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 13:
#line 449 "Aql/grammar.y" /* yacc.c:1652  */
    {
      parser->ast()->scopes()->endNested();
    }
#line 2265 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 14:
#line 452 "Aql/grammar.y" /* yacc.c:1652  */
    {
      parser->ast()->scopes()->endNested();
    }
#line 2273 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 15:
#line 455 "Aql/grammar.y" /* yacc.c:1652  */
    {
      parser->ast()->scopes()->endNested();
    }
#line 2281 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 16:
#line 458 "Aql/grammar.y" /* yacc.c:1652  */
    {
      parser->ast()->scopes()->endNested();
    }
#line 2289 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 17:
#line 461 "Aql/grammar.y" /* yacc.c:1652  */
    {
      parser->ast()->scopes()->endNested();
    }
#line 2297 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 18:
#line 467 "Aql/grammar.y" /* yacc.c:1652  */
    {
    }
#line 2304 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 19:
#line 469 "Aql/grammar.y" /* yacc.c:1652  */
    {
    }
#line 2311 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 20:
#line 474 "Aql/grammar.y" /* yacc.c:1652  */
    {
    }
#line 2318 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 21:
#line 476 "Aql/grammar.y" /* yacc.c:1652  */
    {
    }
#line 2325 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 22:
#line 478 "Aql/grammar.y" /* yacc.c:1652  */
    {
    }
#line 2332 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 23:
#line 480 "Aql/grammar.y" /* yacc.c:1652  */
    {
    }
#line 2339 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 24:
#line 482 "Aql/grammar.y" /* yacc.c:1652  */
    {
    }
#line 2346 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 25:
#line 484 "Aql/grammar.y" /* yacc.c:1652  */
    {
    }
#line 2353 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 26:
#line 486 "Aql/grammar.y" /* yacc.c:1652  */
    {
    }
#line 2360 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 27:
#line 488 "Aql/grammar.y" /* yacc.c:1652  */
    {
    }
#line 2367 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 28:
#line 490 "Aql/grammar.y" /* yacc.c:1652  */
    {
    }
#line 2374 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 29:
#line 492 "Aql/grammar.y" /* yacc.c:1652  */
    {
    }
#line 2381 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 30:
#line 494 "Aql/grammar.y" /* yacc.c:1652  */
    {
    }
#line 2388 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 31:
#line 499 "Aql/grammar.y" /* yacc.c:1652  */
    {
      auto wrapperNode = parser->ast()->createNodeArray();
      parser->pushArray(wrapperNode);
      // This is guaranteed to be called on the first variable
      AstNode* node = parser->ast()->createNodeValueString((yyvsp[0].strval).value, (yyvsp[0].strval).length);
      parser->pushArrayElement(node);
    }
#line 2400 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 32:
#line 506 "Aql/grammar.y" /* yacc.c:1652  */
    {
      AstNode* node = parser->ast()->createNodeValueString((yyvsp[0].strval).value, (yyvsp[0].strval).length);
      parser->pushArrayElement(node);
    }
#line 2409 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 33:
#line 513 "Aql/grammar.y" /* yacc.c:1652  */
    {
      (yyval.node) = parser->popArray();
    }
#line 2417 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 34:
#line 519 "Aql/grammar.y" /* yacc.c:1652  */
    {
      auto node = static_cast<AstNode*>(parser->peekStack());
      // Prune
      node->addMember(parser->ast()->createNodeNop());
      // Options
      node->addMember(parser->ast()->createNodeNop());
    }
#line 2429 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 35:
#line 526 "Aql/grammar.y" /* yacc.c:1652  */
    {
      auto node = static_cast<AstNode*>(parser->peekStack());
      if (TRI_CaseEqualString((yyvsp[-1].strval).value, "PRUNE")) {
        /* Only Prune */
        if ((yyvsp[0].node) == nullptr) {
          ABORT_OOM
        }
        // Prune
        node->addMember((yyvsp[0].node));
        // Options
        node->addMember(parser->ast()->createNodeNop());
      } else if (TRI_CaseEqualString((yyvsp[-1].strval).value, "OPTIONS")) {
        /* Only Options */
        if ((yyvsp[0].node) == nullptr) {
          ABORT_OOM
        }
        if (!(yyvsp[0].node)->isObject()) {
          parser->registerParseError(TRI_ERROR_QUERY_PARSE, "traversal 'OPTIONS' have to be an object", (yyvsp[-1].strval).value, yylloc.first_line, yylloc.first_column);
        }
        // Prune
        node->addMember(parser->ast()->createNodeNop());
        // Options
        node->addMember((yyvsp[0].node));
      } else {
        parser->registerParseError(TRI_ERROR_QUERY_PARSE, "unexpected qualifier '%s', expecting 'PRUNE' or 'OPTIONS'", (yyvsp[-1].strval).value, yylloc.first_line, yylloc.first_column);
      }
    }
#line 2461 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 36:
#line 553 "Aql/grammar.y" /* yacc.c:1652  */
    {
      /* prune and options */
      auto node = static_cast<AstNode*>(parser->peekStack());
      if (!TRI_CaseEqualString((yyvsp[-3].strval).value, "PRUNE")) {
        parser->registerParseError(TRI_ERROR_QUERY_PARSE, "unexpected qualifier '%s', expecting 'PRUNE'", (yyvsp[-3].strval).value, yylloc.first_line, yylloc.first_column);
      }
      if ((yyvsp[-2].node) == nullptr) {
        ABORT_OOM
      }
      if (!TRI_CaseEqualString((yyvsp[-1].strval).value, "OPTIONS")) {
        parser->registerParseError(TRI_ERROR_QUERY_PARSE, "unexpected qualifier '%s', expecting 'OPTIONS'", (yyvsp[-1].strval).value, yylloc.first_line, yylloc.first_column);
      }
      if ((yyvsp[0].node) == nullptr) {
        ABORT_OOM
      }
      // Prune
      node->addMember((yyvsp[-2].node));
      // Options
      node->addMember((yyvsp[0].node));
    }
#line 2486 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 37:
#line 576 "Aql/grammar.y" /* yacc.c:1652  */
    {
      auto infoNode = parser->ast()->createNodeArray();
      // Direction
      infoNode->addMember((yyvsp[-2].node));
      // Source
      infoNode->addMember((yyvsp[-1].node));
      // Graph
      infoNode->addMember((yyvsp[0].node));
      (yyval.node) = infoNode;
    }
#line 2501 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 38:
#line 589 "Aql/grammar.y" /* yacc.c:1652  */
    {
      if (!TRI_CaseEqualString((yyvsp[-3].strval).value, "TO")) {
        parser->registerParseError(TRI_ERROR_QUERY_PARSE, "unexpected qualifier '%s', expecting 'TO'", (yyvsp[-3].strval).value, yylloc.first_line, yylloc.first_column);
      }
      auto infoNode = parser->ast()->createNodeArray();
      auto dirNode = parser->ast()->createNodeValueInt((yyvsp[-6].intval));
      // Direction
      infoNode->addMember(dirNode);
      // Source
      infoNode->addMember((yyvsp[-4].node));
      // Target
      infoNode->addMember((yyvsp[-2].node));
      // Graph
      infoNode->addMember((yyvsp[-1].node));
      // Opts
      auto opts = parser->ast()->createNodeOptions((yyvsp[0].node));
      TRI_ASSERT(opts != nullptr);
      infoNode->addMember(opts);
      (yyval.node) = infoNode;
    }
#line 2526 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 39:
#line 612 "Aql/grammar.y" /* yacc.c:1652  */
    {
      if (!TRI_CaseEqualString((yyvsp[-3].strval).value, "TO")) {
        parser->registerParseError(TRI_ERROR_QUERY_PARSE, "unexpected qualifier '%s', expecting 'TO'", (yyvsp[-3].strval).value, yylloc.first_line, yylloc.first_column);
      }
      auto infoNode = parser->ast()->createNodeArray();
      auto dirNode = parser->ast()->createNodeValueInt((yyvsp[-6].intval));
      // Direction
      infoNode->addMember(dirNode);
      // Source
      infoNode->addMember((yyvsp[-4].node));
      // Target
      infoNode->addMember((yyvsp[-2].node));
      // Graph
      infoNode->addMember((yyvsp[-1].node));
      // Opts
      auto opts = parser->ast()->createNodeOptions((yyvsp[0].node));
      TRI_ASSERT(opts != nullptr);
      infoNode->addMember(opts);
      (yyval.node) = infoNode;
    }
#line 2551 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 40:
#line 635 "Aql/grammar.y" /* yacc.c:1652  */
    {
      // first open a new scope (after expression is evaluated)
      parser->ast()->scopes()->start(arangodb::aql::AQL_SCOPE_FOR);
      AstNode* variablesNode = static_cast<AstNode*>((yyvsp[-2].node));
      TRI_ASSERT(variablesNode != nullptr);
      TRI_ASSERT(variablesNode->type == NODE_TYPE_ARRAY);
      if (variablesNode->numMembers() != 1) {
        parser->registerParseError(TRI_ERROR_QUERY_PARSE, "Collections and Views only have one return variable", yylloc.first_line, yylloc.first_column);
      }

      // now create an out variable for the FOR statement
      // this prepares us to handle the optional SEARCH condition, which may
      // or may not refer to the FOR's variable
      AstNode* variableNameNode = variablesNode->getMemberUnchecked(0);
      TRI_ASSERT(variableNameNode->isStringValue());
      AstNode* variableNode = parser->ast()->createNodeVariable(variableNameNode->getStringValue(), variableNameNode->getStringLength(), true);

      parser->pushStack(variableNode);
    }
#line 2575 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 41:
#line 653 "Aql/grammar.y" /* yacc.c:1652  */
    {
      // now we can handle the optional SEARCH condition and OPTIONS.
      AstNode* variableNode = static_cast<AstNode*>(parser->popStack());

      Variable* variable = static_cast<Variable*>(variableNode->getData());

      AstNode* node = nullptr;
      AstNode* search = nullptr;
      AstNode* options = nullptr;

      if ((yyvsp[0].node) != nullptr) {
        // we got a SEARCH and/or OPTIONS clause
        TRI_ASSERT((yyvsp[0].node)->type == NODE_TYPE_ARRAY);
        TRI_ASSERT((yyvsp[0].node)->numMembers() == 2);

        search = (yyvsp[0].node)->getMemberUnchecked(0);
        if (search->type == NODE_TYPE_NOP) {
          search = nullptr;
        }
        options = (yyvsp[0].node)->getMemberUnchecked(1);
        if (options->type == NODE_TYPE_NOP) {
          options = nullptr;
        }
      }

      if (search != nullptr) {
        // we got a SEARCH clause. this is always a view.
        node = parser->ast()->createNodeForView(variable, (yyvsp[-2].node), search, options);

        if ((yyvsp[-2].node)->type != NODE_TYPE_PARAMETER_DATASOURCE &&
            (yyvsp[-2].node)->type != NODE_TYPE_VIEW &&
            (yyvsp[-2].node)->type != NODE_TYPE_COLLECTION) {
          parser->registerParseError(TRI_ERROR_QUERY_PARSE, "SEARCH condition used on non-view", yylloc.first_line, yylloc.first_column);
        }
      } else {
        node = parser->ast()->createNodeFor(variable, (yyvsp[-2].node), options);
      }

      parser->ast()->addOperation(node);
    }
#line 2620 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 42:
#line 693 "Aql/grammar.y" /* yacc.c:1652  */
    {
      // first open a new scope (after expression is evaluated)
      parser->ast()->scopes()->start(arangodb::aql::AQL_SCOPE_FOR);
      // Traversal
      auto variableNamesNode = static_cast<AstNode*>((yyvsp[-2].node));
      TRI_ASSERT(variableNamesNode != nullptr);
      TRI_ASSERT(variableNamesNode->type == NODE_TYPE_ARRAY);
      if (variableNamesNode->numMembers() > 3) {
        parser->registerParseError(TRI_ERROR_QUERY_PARSE, "Traversals only have one, two or three return variables", yylloc.first_line, yylloc.first_column);
      }
      auto variablesNode = TransformOutputVariables(parser, variableNamesNode);
      auto graphInfoNode = static_cast<AstNode*>((yyvsp[0].node));
      TRI_ASSERT(graphInfoNode != nullptr);
      TRI_ASSERT(graphInfoNode->type == NODE_TYPE_ARRAY);
      parser->pushStack(variablesNode);
      parser->pushStack(graphInfoNode);
      // This stack push/pop magic is necessary to allow v, e, and p in the prune condition
    }
#line 2643 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 43:
#line 710 "Aql/grammar.y" /* yacc.c:1652  */
    {
      auto graphInfoNode = static_cast<AstNode*>(parser->popStack());
      auto variablesNode = static_cast<AstNode*>(parser->popStack());

      auto prune = graphInfoNode->getMember(3);
      if (prune != nullptr) {
        Ast::traverseReadOnly(prune, [&](AstNode const* node) {
          if (node->type == NODE_TYPE_REFERENCE && node->hasFlag(AstNodeFlagType::FLAG_SUBQUERY_REFERENCE)) {
            parser->registerParseError(TRI_ERROR_QUERY_PARSE, "prune condition must not use a subquery", yylloc.first_line, yylloc.first_column);
          }
        });
      }
      auto node = parser->ast()->createNodeTraversal(variablesNode, graphInfoNode);
      parser->ast()->addOperation(node);
    }
#line 2663 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 44:
#line 725 "Aql/grammar.y" /* yacc.c:1652  */
    {
      // first open a new scope (after expression is evaluated)
      parser->ast()->scopes()->start(arangodb::aql::AQL_SCOPE_FOR);
      // Shortest Path
      auto variableNamesNode = static_cast<AstNode*>((yyvsp[-2].node));
      TRI_ASSERT(variableNamesNode != nullptr);
      TRI_ASSERT(variableNamesNode->type == NODE_TYPE_ARRAY);
      if (variableNamesNode->numMembers() > 2) {
        parser->registerParseError(TRI_ERROR_QUERY_PARSE, "ShortestPath only has one or two return variables", yylloc.first_line, yylloc.first_column);
      }
      auto variablesNode = TransformOutputVariables(parser, variableNamesNode);
      auto graphInfoNode = static_cast<AstNode*>((yyvsp[0].node));
      TRI_ASSERT(graphInfoNode != nullptr);
      TRI_ASSERT(graphInfoNode->type == NODE_TYPE_ARRAY);
      auto node = parser->ast()->createNodeShortestPath(variablesNode, graphInfoNode);
      parser->ast()->addOperation(node);

    }
#line 2686 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 45:
#line 743 "Aql/grammar.y" /* yacc.c:1652  */
    {
      // first open a new scope (after expression is evaluated)
      parser->ast()->scopes()->start(arangodb::aql::AQL_SCOPE_FOR);
      // K Shortest Paths
      auto variableNamesNode = static_cast<AstNode*>((yyvsp[-2].node));
      TRI_ASSERT(variableNamesNode != nullptr);
      TRI_ASSERT(variableNamesNode->type == NODE_TYPE_ARRAY);
      if (variableNamesNode->numMembers() > 1) {
          parser->registerParseError(TRI_ERROR_QUERY_PARSE, "k Shortest Paths only has one return variable", yylloc.first_line, yylloc.first_column);
      }
      auto variablesNode = TransformOutputVariables(parser, variableNamesNode);
      auto graphInfoNode = static_cast<AstNode*>((yyvsp[0].node));
      TRI_ASSERT(graphInfoNode != nullptr);
      TRI_ASSERT(graphInfoNode->type == NODE_TYPE_ARRAY);
      auto node = parser->ast()->createNodeKShortestPaths(variablesNode, graphInfoNode);
      parser->ast()->addOperation(node);

    }
#line 2709 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 46:
#line 765 "Aql/grammar.y" /* yacc.c:1652  */
    {
      // operand is a reference. can use it directly
      auto node = parser->ast()->createNodeFilter((yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 2719 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 47:
#line 773 "Aql/grammar.y" /* yacc.c:1652  */
    {
    }
#line 2726 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 48:
#line 778 "Aql/grammar.y" /* yacc.c:1652  */
    {
    }
#line 2733 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 49:
#line 780 "Aql/grammar.y" /* yacc.c:1652  */
    {
    }
#line 2740 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 50:
#line 785 "Aql/grammar.y" /* yacc.c:1652  */
    {
      auto node = parser->ast()->createNodeLet((yyvsp[-2].strval).value, (yyvsp[-2].strval).length, (yyvsp[0].node), true);
      parser->ast()->addOperation(node);
    }
#line 2749 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 51:
#line 792 "Aql/grammar.y" /* yacc.c:1652  */
    {
      if (!TRI_CaseEqualString((yyvsp[-2].strval).value, "COUNT")) {
        parser->registerParseError(TRI_ERROR_QUERY_PARSE, "unexpected qualifier '%s', expecting 'COUNT'", (yyvsp[-2].strval).value, yylloc.first_line, yylloc.first_column);
      }

      (yyval.strval) = (yyvsp[0].strval);
    }
#line 2761 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 52:
#line 802 "Aql/grammar.y" /* yacc.c:1652  */
    {
      auto node = parser->ast()->createNodeArray();
      parser->pushStack(node);
    }
#line 2770 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 53:
#line 805 "Aql/grammar.y" /* yacc.c:1652  */
    {
      auto list = static_cast<AstNode*>(parser->popStack());

      if (list == nullptr) {
        ABORT_OOM
      }
      (yyval.node) = list;
    }
#line 2783 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 54:
#line 816 "Aql/grammar.y" /* yacc.c:1652  */
    {
      /* COLLECT WITH COUNT INTO var OPTIONS ... */
      auto scopes = parser->ast()->scopes();

      StartCollectScope(scopes);

      auto node = parser->ast()->createNodeCollectCount(parser->ast()->createNodeArray(), (yyvsp[-1].strval).value, (yyvsp[-1].strval).length, (yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 2797 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 55:
#line 825 "Aql/grammar.y" /* yacc.c:1652  */
    {
      /* COLLECT var = expr WITH COUNT INTO var OPTIONS ... */
      auto scopes = parser->ast()->scopes();

      if (StartCollectScope(scopes)) {
        ::arangodb::containers::HashSet<Variable const*> variables;
        RegisterAssignVariables(parser, scopes, yylloc.first_line, yylloc.first_column, variables, (yyvsp[-2].node));
      }

      auto node = parser->ast()->createNodeCollectCount((yyvsp[-2].node), (yyvsp[-1].strval).value, (yyvsp[-1].strval).length, (yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 2814 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 56:
#line 837 "Aql/grammar.y" /* yacc.c:1652  */
    {
      /* AGGREGATE var = expr OPTIONS ... */
      ::arangodb::containers::HashSet<Variable const*> variablesIntroduced;
      auto scopes = parser->ast()->scopes();

      if (StartCollectScope(scopes)) {
        RegisterAssignVariables(parser, scopes, yylloc.first_line, yylloc.first_column, variablesIntroduced, (yyvsp[-2].node));
      }

      // validate aggregates
      if (!ValidateAggregates(parser, (yyvsp[-2].node))) {
        YYABORT;
      }

      if ((yyvsp[-1].node) != nullptr && (yyvsp[-1].node)->type == NODE_TYPE_ARRAY) {
        CheckIntoVariables(parser, (yyvsp[-1].node)->getMember(1), yylloc.first_line, yylloc.first_column, variablesIntroduced);
      }

      AstNode const* into = GetIntoVariable(parser, (yyvsp[-1].node));
      AstNode const* intoExpression = GetIntoExpression((yyvsp[-1].node));

      auto node = parser->ast()->createNodeCollect(parser->ast()->createNodeArray(), (yyvsp[-2].node), into, intoExpression, nullptr, (yyvsp[-1].node));
      parser->ast()->addOperation(node);
    }
#line 2843 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 57:
#line 861 "Aql/grammar.y" /* yacc.c:1652  */
    {
      /* COLLECT var = expr AGGREGATE var = expr OPTIONS ... */
      ::arangodb::containers::HashSet<Variable const*> variablesIntroduced;
      auto scopes = parser->ast()->scopes();

      if (StartCollectScope(scopes)) {
        RegisterAssignVariables(parser, scopes, yylloc.first_line, yylloc.first_column, variablesIntroduced, (yyvsp[-3].node));
        RegisterAssignVariables(parser, scopes, yylloc.first_line, yylloc.first_column, variablesIntroduced, (yyvsp[-2].node));
      }

      if (! ValidateAggregates(parser, (yyvsp[-2].node))) {
        YYABORT;
      }

      if ((yyvsp[-1].node) != nullptr && (yyvsp[-1].node)->type == NODE_TYPE_ARRAY) {
        CheckIntoVariables(parser, (yyvsp[-1].node)->getMember(1), yylloc.first_line, yylloc.first_column, variablesIntroduced);
      }

      // note all group variables
      ::arangodb::containers::HashSet<Variable const*> groupVars;
      size_t n = (yyvsp[-3].node)->numMembers();
      for (size_t i = 0; i < n; ++i) {
        auto member = (yyvsp[-3].node)->getMember(i);

        if (member != nullptr) {
          TRI_ASSERT(member->type == NODE_TYPE_ASSIGN);
          groupVars.emplace(static_cast<Variable const*>(member->getMember(0)->getData()));
        }
      }

      // now validate if any aggregate refers to one of the group variables
      n = (yyvsp[-2].node)->numMembers();
      for (size_t i = 0; i < n; ++i) {
        auto member = (yyvsp[-2].node)->getMember(i);

        if (member != nullptr) {
          TRI_ASSERT(member->type == NODE_TYPE_ASSIGN);
          ::arangodb::containers::HashSet<Variable const*> variablesUsed;
          Ast::getReferencedVariables(member->getMember(1), variablesUsed);

          for (auto& it : groupVars) {
            if (variablesUsed.find(it) != variablesUsed.end()) {
              parser->registerParseError(TRI_ERROR_QUERY_VARIABLE_NAME_UNKNOWN,
                "use of unknown variable '%s' in AGGREGATE expression", it->name.c_str(), yylloc.first_line, yylloc.first_column);
              break;
            }
          }
        }
      }

      AstNode const* into = GetIntoVariable(parser, (yyvsp[-1].node));
      AstNode const* intoExpression = GetIntoExpression((yyvsp[-1].node));

      auto node = parser->ast()->createNodeCollect((yyvsp[-3].node), (yyvsp[-2].node), into, intoExpression, nullptr, (yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 2904 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 58:
#line 917 "Aql/grammar.y" /* yacc.c:1652  */
    {
      /* COLLECT var = expr INTO var OPTIONS ... */
      ::arangodb::containers::HashSet<Variable const*> variablesIntroduced;
      auto scopes = parser->ast()->scopes();

      if (StartCollectScope(scopes)) {
        RegisterAssignVariables(parser, scopes, yylloc.first_line, yylloc.first_column, variablesIntroduced, (yyvsp[-2].node));
      }

      if ((yyvsp[-1].node) != nullptr && (yyvsp[-1].node)->type == NODE_TYPE_ARRAY) {
        CheckIntoVariables(parser, (yyvsp[-1].node)->getMember(1), yylloc.first_line, yylloc.first_column, variablesIntroduced);
      }

      AstNode const* into = GetIntoVariable(parser, (yyvsp[-1].node));
      AstNode const* intoExpression = GetIntoExpression((yyvsp[-1].node));

      auto node = parser->ast()->createNodeCollect((yyvsp[-2].node), parser->ast()->createNodeArray(), into, intoExpression, nullptr, (yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 2928 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 59:
#line 936 "Aql/grammar.y" /* yacc.c:1652  */
    {
      /* COLLECT var = expr INTO var KEEP ... OPTIONS ... */
      ::arangodb::containers::HashSet<Variable const*> variablesIntroduced;
      auto scopes = parser->ast()->scopes();

      if (StartCollectScope(scopes)) {
        RegisterAssignVariables(parser, scopes, yylloc.first_line, yylloc.first_column, variablesIntroduced, (yyvsp[-3].node));
      }

      if ((yyvsp[-2].node) == nullptr &&
          (yyvsp[-1].node) != nullptr) {
        parser->registerParseError(TRI_ERROR_QUERY_PARSE, "use of 'KEEP' without 'INTO'", yylloc.first_line, yylloc.first_column);
      }

      if ((yyvsp[-2].node) != nullptr && (yyvsp[-2].node)->type == NODE_TYPE_ARRAY) {
        CheckIntoVariables(parser, (yyvsp[-2].node)->getMember(1), yylloc.first_line, yylloc.first_column, variablesIntroduced);
      }

      AstNode const* into = GetIntoVariable(parser, (yyvsp[-2].node));
      AstNode const* intoExpression = GetIntoExpression((yyvsp[-2].node));

      auto node = parser->ast()->createNodeCollect((yyvsp[-3].node), parser->ast()->createNodeArray(), into, intoExpression, (yyvsp[-1].node), (yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 2957 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 60:
#line 963 "Aql/grammar.y" /* yacc.c:1652  */
    {
    }
#line 2964 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 61:
#line 965 "Aql/grammar.y" /* yacc.c:1652  */
    {
    }
#line 2971 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 62:
#line 970 "Aql/grammar.y" /* yacc.c:1652  */
    {
      auto node = parser->ast()->createNodeAssign((yyvsp[-2].strval).value, (yyvsp[-2].strval).length, (yyvsp[0].node));
      parser->pushArrayElement(node);
    }
#line 2980 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 63:
#line 977 "Aql/grammar.y" /* yacc.c:1652  */
    {
      (yyval.node) = nullptr;
    }
#line 2988 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 64:
#line 980 "Aql/grammar.y" /* yacc.c:1652  */
    {
      (yyval.node) = parser->ast()->createNodeValueString((yyvsp[0].strval).value, (yyvsp[0].strval).length);
    }
#line 2996 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 65:
#line 983 "Aql/grammar.y" /* yacc.c:1652  */
    {
      auto node = parser->ast()->createNodeArray();
      node->addMember(parser->ast()->createNodeValueString((yyvsp[-2].strval).value, (yyvsp[-2].strval).length));
      node->addMember((yyvsp[0].node));
      (yyval.node) = node;
    }
#line 3007 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 66:
#line 992 "Aql/grammar.y" /* yacc.c:1652  */
    {
      if (! parser->ast()->scopes()->existsVariable((yyvsp[0].strval).value, (yyvsp[0].strval).length)) {
        parser->registerParseError(TRI_ERROR_QUERY_PARSE, "use of unknown variable '%s' for KEEP", (yyvsp[0].strval).value, yylloc.first_line, yylloc.first_column);
      }

      auto node = parser->ast()->createNodeReference((yyvsp[0].strval).value, (yyvsp[0].strval).length);
      if (node == nullptr) {
        ABORT_OOM
      }

      // indicate the this node is a reference to the variable name, not the variable value
      node->setFlag(FLAG_KEEP_VARIABLENAME);
      parser->pushArrayElement(node);
    }
#line 3026 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 67:
#line 1006 "Aql/grammar.y" /* yacc.c:1652  */
    {
      if (! parser->ast()->scopes()->existsVariable((yyvsp[0].strval).value, (yyvsp[0].strval).length)) {
        parser->registerParseError(TRI_ERROR_QUERY_PARSE, "use of unknown variable '%s' for KEEP", (yyvsp[0].strval).value, yylloc.first_line, yylloc.first_column);
      }

      auto node = parser->ast()->createNodeReference((yyvsp[0].strval).value, (yyvsp[0].strval).length);
      if (node == nullptr) {
        ABORT_OOM
      }

      // indicate the this node is a reference to the variable name, not the variable value
      node->setFlag(FLAG_KEEP_VARIABLENAME);
      parser->pushArrayElement(node);
    }
#line 3045 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 68:
#line 1023 "Aql/grammar.y" /* yacc.c:1652  */
    {
      if (!TRI_CaseEqualString((yyvsp[0].strval).value, "KEEP")) {
        parser->registerParseError(TRI_ERROR_QUERY_PARSE, "unexpected qualifier '%s', expecting 'KEEP'", (yyvsp[0].strval).value, yylloc.first_line, yylloc.first_column);
      }

      auto node = parser->ast()->createNodeArray();
      parser->pushStack(node);
    }
#line 3058 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 69:
#line 1030 "Aql/grammar.y" /* yacc.c:1652  */
    {
      auto list = static_cast<AstNode*>(parser->popStack());
      (yyval.node) = list;
    }
#line 3067 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 70:
#line 1037 "Aql/grammar.y" /* yacc.c:1652  */
    {
      auto node = parser->ast()->createNodeArray();
      parser->pushStack(node);
    }
#line 3076 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 71:
#line 1040 "Aql/grammar.y" /* yacc.c:1652  */
    {
      auto list = static_cast<AstNode*>(parser->popStack());
      (yyval.node) = list;
    }
#line 3085 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 72:
#line 1047 "Aql/grammar.y" /* yacc.c:1652  */
    {
      auto node = parser->ast()->createNodeArray();
      parser->pushStack(node);
    }
#line 3094 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 73:
#line 1050 "Aql/grammar.y" /* yacc.c:1652  */
    {
      auto list = static_cast<AstNode const*>(parser->popStack());
      auto node = parser->ast()->createNodeSort(list);
      parser->ast()->addOperation(node);
    }
#line 3104 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 74:
#line 1058 "Aql/grammar.y" /* yacc.c:1652  */
    {
      parser->pushArrayElement((yyvsp[0].node));
    }
#line 3112 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 75:
#line 1061 "Aql/grammar.y" /* yacc.c:1652  */
    {
      parser->pushArrayElement((yyvsp[0].node));
    }
#line 3120 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 76:
#line 1067 "Aql/grammar.y" /* yacc.c:1652  */
    {
      (yyval.node) = parser->ast()->createNodeSortElement((yyvsp[-1].node), (yyvsp[0].node));
    }
#line 3128 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 77:
#line 1073 "Aql/grammar.y" /* yacc.c:1652  */
    {
      (yyval.node) = parser->ast()->createNodeValueBool(true);
    }
#line 3136 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 78:
#line 1076 "Aql/grammar.y" /* yacc.c:1652  */
    {
      (yyval.node) = parser->ast()->createNodeValueBool(true);
    }
#line 3144 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 79:
#line 1079 "Aql/grammar.y" /* yacc.c:1652  */
    {
      (yyval.node) = parser->ast()->createNodeValueBool(false);
    }
#line 3152 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 80:
#line 1082 "Aql/grammar.y" /* yacc.c:1652  */
    {
      (yyval.node) = (yyvsp[0].node);
    }
#line 3160 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 81:
#line 1088 "Aql/grammar.y" /* yacc.c:1652  */
    {
      auto offset = parser->ast()->createNodeValueInt(0);
      auto node = parser->ast()->createNodeLimit(offset, (yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 3170 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 82:
#line 1093 "Aql/grammar.y" /* yacc.c:1652  */
    {
      auto node = parser->ast()->createNodeLimit((yyvsp[-2].node), (yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 3179 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 83:
#line 1100 "Aql/grammar.y" /* yacc.c:1652  */
    {
      auto node = parser->ast()->createNodeReturn((yyvsp[0].node));
      parser->ast()->addOperation(node);
      parser->ast()->scopes()->endNested();
    }
#line 3189 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 84:
#line 1108 "Aql/grammar.y" /* yacc.c:1652  */
    {
      (yyval.node) = (yyvsp[0].node);
    }
#line 3197 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 85:
#line 1111 "Aql/grammar.y" /* yacc.c:1652  */
    {
       (yyval.node) = (yyvsp[0].node);
     }
#line 3205 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 86:
#line 1117 "Aql/grammar.y" /* yacc.c:1652  */
    {
      if (!parser->configureWriteQuery((yyvsp[-1].node), (yyvsp[0].node))) {
        YYABORT;
      }
      auto node = parser->ast()->createNodeRemove((yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 3217 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 87:
#line 1127 "Aql/grammar.y" /* yacc.c:1652  */
    {
      if (!parser->configureWriteQuery((yyvsp[-1].node), (yyvsp[0].node))) {
        YYABORT;
      }
      auto node = parser->ast()->createNodeInsert((yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 3229 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 88:
#line 1137 "Aql/grammar.y" /* yacc.c:1652  */
    {
      if (!parser->configureWriteQuery((yyvsp[-1].node), (yyvsp[0].node))) {
        YYABORT;
      }

      AstNode* node = parser->ast()->createNodeUpdate(nullptr, (yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 3242 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 89:
#line 1145 "Aql/grammar.y" /* yacc.c:1652  */
    {
      if (!parser->configureWriteQuery((yyvsp[-1].node), (yyvsp[0].node))) {
        YYABORT;
      }

      AstNode* node = parser->ast()->createNodeUpdate((yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 3255 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 90:
#line 1156 "Aql/grammar.y" /* yacc.c:1652  */
    {
    }
#line 3262 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 91:
#line 1161 "Aql/grammar.y" /* yacc.c:1652  */
    {
      if (!parser->configureWriteQuery((yyvsp[-1].node), (yyvsp[0].node))) {
        YYABORT;
      }

      AstNode* node = parser->ast()->createNodeReplace(nullptr, (yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 3275 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 92:
#line 1169 "Aql/grammar.y" /* yacc.c:1652  */
    {
      if (!parser->configureWriteQuery((yyvsp[-1].node), (yyvsp[0].node))) {
        YYABORT;
      }

      AstNode* node = parser->ast()->createNodeReplace((yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 3288 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 93:
#line 1180 "Aql/grammar.y" /* yacc.c:1652  */
    {
    }
#line 3295 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 94:
#line 1185 "Aql/grammar.y" /* yacc.c:1652  */
    {
      (yyval.intval) = static_cast<int64_t>(NODE_TYPE_UPDATE);
    }
#line 3303 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 95:
#line 1188 "Aql/grammar.y" /* yacc.c:1652  */
    {
      (yyval.intval) = static_cast<int64_t>(NODE_TYPE_REPLACE);
    }
#line 3311 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 96:
#line 1194 "Aql/grammar.y" /* yacc.c:1652  */
    {
      // reserve a variable named "$OLD", we might need it in the update expression
      // and in a later return thing
      parser->pushStack(parser->ast()->createNodeVariable(TRI_CHAR_LENGTH_PAIR(Variable::NAME_OLD), true));
    }
#line 3321 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 97:
#line 1198 "Aql/grammar.y" /* yacc.c:1652  */
    {
      AstNode* variableNode = static_cast<AstNode*>(parser->popStack());

      auto scopes = parser->ast()->scopes();

      scopes->start(arangodb::aql::AQL_SCOPE_SUBQUERY);
      parser->ast()->startSubQuery();

      scopes->start(arangodb::aql::AQL_SCOPE_FOR);
      std::string const variableName = parser->ast()->variables()->nextName();
      auto forNode = parser->ast()->createNodeFor(variableName.c_str(), variableName.size(), parser->ast()->createNodeArray(), false);
      parser->ast()->addOperation(forNode);

      auto filterNode = parser->ast()->createNodeUpsertFilter(parser->ast()->createNodeReference(variableName), (yyvsp[0].node));
      parser->ast()->addOperation(filterNode);

      auto offsetValue = parser->ast()->createNodeValueInt(0);
      auto limitValue = parser->ast()->createNodeValueInt(1);
      auto limitNode = parser->ast()->createNodeLimit(offsetValue, limitValue);
      parser->ast()->addOperation(limitNode);

      auto refNode = parser->ast()->createNodeReference(variableName);
      auto returnNode = parser->ast()->createNodeReturn(refNode);
      parser->ast()->addOperation(returnNode);
      scopes->endNested();

      AstNode* subqueryNode = parser->ast()->endSubQuery();
      scopes->endCurrent();

      std::string const subqueryName = parser->ast()->variables()->nextName();
      auto subQuery = parser->ast()->createNodeLet(subqueryName.c_str(), subqueryName.size(), subqueryNode, false);
      parser->ast()->addOperation(subQuery);

      auto index = parser->ast()->createNodeValueInt(0);
      auto firstDoc = parser->ast()->createNodeLet(variableNode, parser->ast()->createNodeIndexedAccess(parser->ast()->createNodeReference(subqueryName), index));
      parser->ast()->addOperation(firstDoc);

      parser->pushStack(forNode);
    }
#line 3365 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 98:
#line 1236 "Aql/grammar.y" /* yacc.c:1652  */
    {
      AstNode* forNode = static_cast<AstNode*>(parser->popStack());
      forNode->changeMember(1, (yyvsp[-1].node));

      if (!parser->configureWriteQuery((yyvsp[-1].node), (yyvsp[0].node))) {
        YYABORT;
      }

      auto node = parser->ast()->createNodeUpsert(static_cast<AstNodeType>((yyvsp[-3].intval)), parser->ast()->createNodeReference(TRI_CHAR_LENGTH_PAIR(Variable::NAME_OLD)), (yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 3381 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 99:
#line 1250 "Aql/grammar.y" /* yacc.c:1652  */
    {
      (yyval.node) = parser->ast()->createNodeQuantifier(Quantifier::ALL);
    }
#line 3389 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 100:
#line 1253 "Aql/grammar.y" /* yacc.c:1652  */
    {
      (yyval.node) = parser->ast()->createNodeQuantifier(Quantifier::ANY);
    }
#line 3397 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 101:
#line 1256 "Aql/grammar.y" /* yacc.c:1652  */
    {
      (yyval.node) = parser->ast()->createNodeQuantifier(Quantifier::NONE);
    }
#line 3405 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 102:
#line 1262 "Aql/grammar.y" /* yacc.c:1652  */
    {
      auto const scopeType = parser->ast()->scopes()->type();

      if (scopeType == AQL_SCOPE_MAIN ||
          scopeType == AQL_SCOPE_SUBQUERY) {
        parser->registerParseError(TRI_ERROR_QUERY_PARSE, "cannot use DISTINCT modifier on top-level query element", yylloc.first_line, yylloc.first_column);
      }
    }
#line 3418 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 103:
#line 1269 "Aql/grammar.y" /* yacc.c:1652  */
    {
      (yyval.node) = parser->ast()->createNodeDistinct((yyvsp[0].node));
    }
#line 3426 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 104:
#line 1272 "Aql/grammar.y" /* yacc.c:1652  */
    {
      (yyval.node) = (yyvsp[0].node);
    }
#line 3434 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 105:
#line 1278 "Aql/grammar.y" /* yacc.c:1652  */
    {
      (yyval.node) = (yyvsp[0].node);
    }
#line 3442 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 106:
#line 1281 "Aql/grammar.y" /* yacc.c:1652  */
    {
      (yyval.node) = (yyvsp[0].node);
    }
#line 3450 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 107:
#line 1284 "Aql/grammar.y" /* yacc.c:1652  */
    {
      (yyval.node) = (yyvsp[0].node);
    }
#line 3458 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 108:
#line 1287 "Aql/grammar.y" /* yacc.c:1652  */
    {
      (yyval.node) = (yyvsp[0].node);
    }
#line 3466 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 109:
#line 1290 "Aql/grammar.y" /* yacc.c:1652  */
    {
      (yyval.node) = (yyvsp[0].node);
    }
#line 3474 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 110:
#line 1293 "Aql/grammar.y" /* yacc.c:1652  */
    {
      (yyval.node) = parser->ast()->createNodeRange((yyvsp[-2].node), (yyvsp[0].node));
    }
#line 3482 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 111:
#line 1299 "Aql/grammar.y" /* yacc.c:1652  */
    {
      (yyval.strval) = (yyvsp[0].strval);
    }
#line 3490 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 112:
#line 1302 "Aql/grammar.y" /* yacc.c:1652  */
    {
      std::string temp((yyvsp[-2].strval).value, (yyvsp[-2].strval).length);
      temp.append("::");
      temp.append((yyvsp[0].strval).value, (yyvsp[0].strval).length);
      auto p = parser->query()->registerString(temp);

      if (p == nullptr) {
        ABORT_OOM
      }

      (yyval.strval).value = p;
      (yyval.strval).length = temp.size();
    }
#line 3508 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 113:
#line 1318 "Aql/grammar.y" /* yacc.c:1652  */
    {
      parser->pushStack((yyvsp[-1].strval).value);

      auto node = parser->ast()->createNodeArray();
      parser->pushStack(node);
    }
#line 3519 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 114:
#line 1323 "Aql/grammar.y" /* yacc.c:1652  */
    {
      auto list = static_cast<AstNode const*>(parser->popStack());
      (yyval.node) = parser->ast()->createNodeFunctionCall(static_cast<char const*>(parser->popStack()), list);
    }
#line 3528 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 115:
#line 1327 "Aql/grammar.y" /* yacc.c:1652  */
    {
      auto node = parser->ast()->createNodeArray();
      parser->pushStack(node);
    }
#line 3537 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 116:
#line 1330 "Aql/grammar.y" /* yacc.c:1652  */
    {
      auto list = static_cast<AstNode const*>(parser->popStack());
      (yyval.node) = parser->ast()->createNodeFunctionCall(TRI_CHAR_LENGTH_PAIR("LIKE"), list);
    }
#line 3546 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 117:
#line 1337 "Aql/grammar.y" /* yacc.c:1652  */
    {
      (yyval.node) = parser->ast()->createNodeUnaryOperator(NODE_TYPE_OPERATOR_UNARY_PLUS, (yyvsp[0].node));
    }
#line 3554 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 118:
#line 1340 "Aql/grammar.y" /* yacc.c:1652  */
    {
      (yyval.node) = parser->ast()->createNodeUnaryOperator(NODE_TYPE_OPERATOR_UNARY_MINUS, (yyvsp[0].node));
    }
#line 3562 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 119:
#line 1343 "Aql/grammar.y" /* yacc.c:1652  */
    {
      (yyval.node) = parser->ast()->createNodeUnaryOperator(NODE_TYPE_OPERATOR_UNARY_NOT, (yyvsp[0].node));
    }
#line 3570 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 120:
#line 1349 "Aql/grammar.y" /* yacc.c:1652  */
    {
      (yyval.node) = parser->ast()->createNodeBinaryOperator(NODE_TYPE_OPERATOR_BINARY_OR, (yyvsp[-2].node), (yyvsp[0].node));
    }
#line 3578 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 121:
#line 1352 "Aql/grammar.y" /* yacc.c:1652  */
    {
      (yyval.node) = parser->ast()->createNodeBinaryOperator(NODE_TYPE_OPERATOR_BINARY_AND, (yyvsp[-2].node), (yyvsp[0].node));
    }
#line 3586 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 122:
#line 1355 "Aql/grammar.y" /* yacc.c:1652  */
    {
      (yyval.node) = parser->ast()->createNodeBinaryOperator(NODE_TYPE_OPERATOR_BINARY_PLUS, (yyvsp[-2].node), (yyvsp[0].node));
    }
#line 3594 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 123:
#line 1358 "Aql/grammar.y" /* yacc.c:1652  */
    {
      (yyval.node) = parser->ast()->createNodeBinaryOperator(NODE_TYPE_OPERATOR_BINARY_MINUS, (yyvsp[-2].node), (yyvsp[0].node));
    }
#line 3602 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 124:
#line 1361 "Aql/grammar.y" /* yacc.c:1652  */
    {
      (yyval.node) = parser->ast()->createNodeBinaryOperator(NODE_TYPE_OPERATOR_BINARY_TIMES, (yyvsp[-2].node), (yyvsp[0].node));
    }
#line 3610 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 125:
#line 1364 "Aql/grammar.y" /* yacc.c:1652  */
    {
      (yyval.node) = parser->ast()->createNodeBinaryOperator(NODE_TYPE_OPERATOR_BINARY_DIV, (yyvsp[-2].node), (yyvsp[0].node));
    }
#line 3618 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 126:
#line 1367 "Aql/grammar.y" /* yacc.c:1652  */
    {
      (yyval.node) = parser->ast()->createNodeBinaryOperator(NODE_TYPE_OPERATOR_BINARY_MOD, (yyvsp[-2].node), (yyvsp[0].node));
    }
#line 3626 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 127:
#line 1370 "Aql/grammar.y" /* yacc.c:1652  */
    {
      (yyval.node) = parser->ast()->createNodeBinaryOperator(NODE_TYPE_OPERATOR_BINARY_EQ, (yyvsp[-2].node), (yyvsp[0].node));
    }
#line 3634 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 128:
#line 1373 "Aql/grammar.y" /* yacc.c:1652  */
    {
      (yyval.node) = parser->ast()->createNodeBinaryOperator(NODE_TYPE_OPERATOR_BINARY_NE, (yyvsp[-2].node), (yyvsp[0].node));
    }
#line 3642 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 129:
#line 1376 "Aql/grammar.y" /* yacc.c:1652  */
    {
      (yyval.node) = parser->ast()->createNodeBinaryOperator(NODE_TYPE_OPERATOR_BINARY_LT, (yyvsp[-2].node), (yyvsp[0].node));
    }
#line 3650 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 130:
#line 1379 "Aql/grammar.y" /* yacc.c:1652  */
    {
      (yyval.node) = parser->ast()->createNodeBinaryOperator(NODE_TYPE_OPERATOR_BINARY_GT, (yyvsp[-2].node), (yyvsp[0].node));
    }
#line 3658 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 131:
#line 1382 "Aql/grammar.y" /* yacc.c:1652  */
    {
      (yyval.node) = parser->ast()->createNodeBinaryOperator(NODE_TYPE_OPERATOR_BINARY_LE, (yyvsp[-2].node), (yyvsp[0].node));
    }
#line 3666 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 132:
#line 1385 "Aql/grammar.y" /* yacc.c:1652  */
    {
      (yyval.node) = parser->ast()->createNodeBinaryOperator(NODE_TYPE_OPERATOR_BINARY_GE, (yyvsp[-2].node), (yyvsp[0].node));
    }
#line 3674 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 133:
#line 1388 "Aql/grammar.y" /* yacc.c:1652  */
    {
      (yyval.node) = parser->ast()->createNodeBinaryOperator(NODE_TYPE_OPERATOR_BINARY_IN, (yyvsp[-2].node), (yyvsp[0].node));
    }
#line 3682 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 134:
#line 1391 "Aql/grammar.y" /* yacc.c:1652  */
    {
      (yyval.node) = parser->ast()->createNodeBinaryOperator(NODE_TYPE_OPERATOR_BINARY_NIN, (yyvsp[-3].node), (yyvsp[0].node));
    }
#line 3690 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 135:
#line 1394 "Aql/grammar.y" /* yacc.c:1652  */
    {
      AstNode* arguments = parser->ast()->createNodeArray(2);
      arguments->addMember((yyvsp[-3].node));
      arguments->addMember((yyvsp[0].node));
      AstNode* expression = parser->ast()->createNodeFunctionCall(TRI_CHAR_LENGTH_PAIR("LIKE"), arguments);
      (yyval.node) = parser->ast()->createNodeUnaryOperator(NODE_TYPE_OPERATOR_UNARY_NOT, expression);
    }
#line 3702 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 136:
#line 1401 "Aql/grammar.y" /* yacc.c:1652  */
    {
      AstNode* arguments = parser->ast()->createNodeArray(2);
      arguments->addMember((yyvsp[-3].node));
      arguments->addMember((yyvsp[0].node));
      AstNode* expression = parser->ast()->createNodeFunctionCall(TRI_CHAR_LENGTH_PAIR("REGEX_TEST"), arguments);
      (yyval.node) = parser->ast()->createNodeUnaryOperator(NODE_TYPE_OPERATOR_UNARY_NOT, expression);
    }
#line 3714 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 137:
#line 1408 "Aql/grammar.y" /* yacc.c:1652  */
    {
      AstNode* arguments = parser->ast()->createNodeArray(2);
      arguments->addMember((yyvsp[-3].node));
      arguments->addMember((yyvsp[0].node));
      (yyval.node) = parser->ast()->createNodeFunctionCall(TRI_CHAR_LENGTH_PAIR("REGEX_TEST"), arguments);
    }
#line 3725 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 138:
#line 1414 "Aql/grammar.y" /* yacc.c:1652  */
    {
      AstNode* arguments = parser->ast()->createNodeArray(2);
      arguments->addMember((yyvsp[-2].node));
      arguments->addMember((yyvsp[0].node));
      (yyval.node) = parser->ast()->createNodeFunctionCall(TRI_CHAR_LENGTH_PAIR("LIKE"), arguments);
    }
#line 3736 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 139:
#line 1420 "Aql/grammar.y" /* yacc.c:1652  */
    {
      AstNode* arguments = parser->ast()->createNodeArray(2);
      arguments->addMember((yyvsp[-2].node));
      arguments->addMember((yyvsp[0].node));
      (yyval.node) = parser->ast()->createNodeFunctionCall(TRI_CHAR_LENGTH_PAIR("REGEX_TEST"), arguments);
    }
#line 3747 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 140:
#line 1426 "Aql/grammar.y" /* yacc.c:1652  */
    {
      AstNode* arguments = parser->ast()->createNodeArray(2);
      arguments->addMember((yyvsp[-2].node));
      arguments->addMember((yyvsp[0].node));
      AstNode* node = parser->ast()->createNodeFunctionCall(TRI_CHAR_LENGTH_PAIR("REGEX_TEST"), arguments);
      (yyval.node) = parser->ast()->createNodeUnaryOperator(NODE_TYPE_OPERATOR_UNARY_NOT, node);
    }
#line 3759 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 141:
#line 1433 "Aql/grammar.y" /* yacc.c:1652  */
    {
      (yyval.node) = parser->ast()->createNodeBinaryArrayOperator(NODE_TYPE_OPERATOR_BINARY_ARRAY_EQ, (yyvsp[-3].node), (yyvsp[0].node), (yyvsp[-2].node));
    }
#line 3767 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 142:
#line 1436 "Aql/grammar.y" /* yacc.c:1652  */
    {
      (yyval.node) = parser->ast()->createNodeBinaryArrayOperator(NODE_TYPE_OPERATOR_BINARY_ARRAY_NE, (yyvsp[-3].node), (yyvsp[0].node), (yyvsp[-2].node));
    }
#line 3775 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 143:
#line 1439 "Aql/grammar.y" /* yacc.c:1652  */
    {
      (yyval.node) = parser->ast()->createNodeBinaryArrayOperator(NODE_TYPE_OPERATOR_BINARY_ARRAY_LT, (yyvsp[-3].node), (yyvsp[0].node), (yyvsp[-2].node));
    }
#line 3783 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 144:
#line 1442 "Aql/grammar.y" /* yacc.c:1652  */
    {
      (yyval.node) = parser->ast()->createNodeBinaryArrayOperator(NODE_TYPE_OPERATOR_BINARY_ARRAY_GT, (yyvsp[-3].node), (yyvsp[0].node), (yyvsp[-2].node));
    }
#line 3791 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 145:
#line 1445 "Aql/grammar.y" /* yacc.c:1652  */
    {
      (yyval.node) = parser->ast()->createNodeBinaryArrayOperator(NODE_TYPE_OPERATOR_BINARY_ARRAY_LE, (yyvsp[-3].node), (yyvsp[0].node), (yyvsp[-2].node));
    }
#line 3799 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 146:
#line 1448 "Aql/grammar.y" /* yacc.c:1652  */
    {
      (yyval.node) = parser->ast()->createNodeBinaryArrayOperator(NODE_TYPE_OPERATOR_BINARY_ARRAY_GE, (yyvsp[-3].node), (yyvsp[0].node), (yyvsp[-2].node));
    }
#line 3807 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 147:
#line 1451 "Aql/grammar.y" /* yacc.c:1652  */
    {
      (yyval.node) = parser->ast()->createNodeBinaryArrayOperator(NODE_TYPE_OPERATOR_BINARY_ARRAY_IN, (yyvsp[-3].node), (yyvsp[0].node), (yyvsp[-2].node));
    }
#line 3815 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 148:
#line 1454 "Aql/grammar.y" /* yacc.c:1652  */
    {
      auto quantifier = parser->ast()->createNodeQuantifier(Quantifier::ALL);
      (yyval.node) = parser->ast()->createNodeBinaryArrayOperator(NODE_TYPE_OPERATOR_BINARY_ARRAY_NIN, (yyvsp[-4].node), (yyvsp[0].node), quantifier);
    }
#line 3824 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 149:
#line 1458 "Aql/grammar.y" /* yacc.c:1652  */
    {
      auto quantifier = parser->ast()->createNodeQuantifier(Quantifier::ANY);
      (yyval.node) = parser->ast()->createNodeBinaryArrayOperator(NODE_TYPE_OPERATOR_BINARY_ARRAY_NIN, (yyvsp[-4].node), (yyvsp[0].node), quantifier);
    }
#line 3833 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 150:
#line 1462 "Aql/grammar.y" /* yacc.c:1652  */
    {
      auto quantifier = parser->ast()->createNodeQuantifier(Quantifier::NONE);
      (yyval.node) = parser->ast()->createNodeBinaryArrayOperator(NODE_TYPE_OPERATOR_BINARY_ARRAY_NIN, (yyvsp[-4].node), (yyvsp[0].node), quantifier);
    }
#line 3842 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 151:
#line 1469 "Aql/grammar.y" /* yacc.c:1652  */
    {
      (yyval.node) = parser->ast()->createNodeTernaryOperator((yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[0].node));
    }
#line 3850 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 152:
#line 1472 "Aql/grammar.y" /* yacc.c:1652  */
    {
      (yyval.node) = parser->ast()->createNodeTernaryOperator((yyvsp[-3].node), (yyvsp[-3].node), (yyvsp[0].node));
    }
#line 3858 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 153:
#line 1478 "Aql/grammar.y" /* yacc.c:1652  */
    {
    }
#line 3865 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 154:
#line 1480 "Aql/grammar.y" /* yacc.c:1652  */
    {
    }
#line 3872 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 155:
#line 1485 "Aql/grammar.y" /* yacc.c:1652  */
    {
      (yyval.node) = (yyvsp[0].node);
    }
#line 3880 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 156:
#line 1488 "Aql/grammar.y" /* yacc.c:1652  */
    {
      parser->ast()->scopes()->start(arangodb::aql::AQL_SCOPE_SUBQUERY);
      parser->ast()->startSubQuery();
    }
#line 3889 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 157:
#line 1491 "Aql/grammar.y" /* yacc.c:1652  */
    {
      AstNode* node = parser->ast()->endSubQuery();
      parser->ast()->scopes()->endCurrent();

      std::string const variableName = parser->ast()->variables()->nextName();
      auto subQuery = parser->ast()->createNodeLet(variableName.c_str(), variableName.size(), node, false);
      parser->ast()->addOperation(subQuery);

      (yyval.node) = parser->ast()->createNodeSubqueryReference(variableName);
    }
#line 3904 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 158:
#line 1504 "Aql/grammar.y" /* yacc.c:1652  */
    {
      parser->pushArrayElement((yyvsp[0].node));
    }
#line 3912 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 159:
#line 1507 "Aql/grammar.y" /* yacc.c:1652  */
    {
      parser->pushArrayElement((yyvsp[0].node));
    }
#line 3920 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 160:
#line 1513 "Aql/grammar.y" /* yacc.c:1652  */
    {
      (yyval.node) = (yyvsp[0].node);
    }
#line 3928 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 161:
#line 1516 "Aql/grammar.y" /* yacc.c:1652  */
    {
      (yyval.node) = (yyvsp[0].node);
    }
#line 3936 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 162:
#line 1522 "Aql/grammar.y" /* yacc.c:1652  */
    {
      auto node = parser->ast()->createNodeArray();
      parser->pushArray(node);
    }
#line 3945 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 163:
#line 1525 "Aql/grammar.y" /* yacc.c:1652  */
    {
      (yyval.node) = parser->popArray();
    }
#line 3953 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 164:
#line 1531 "Aql/grammar.y" /* yacc.c:1652  */
    {
    }
#line 3960 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 165:
#line 1533 "Aql/grammar.y" /* yacc.c:1652  */
    {
    }
#line 3967 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 166:
#line 1538 "Aql/grammar.y" /* yacc.c:1652  */
    {
      parser->pushArrayElement((yyvsp[0].node));
    }
#line 3975 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 167:
#line 1541 "Aql/grammar.y" /* yacc.c:1652  */
    {
      parser->pushArrayElement((yyvsp[0].node));
    }
#line 3983 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 168:
#line 1547 "Aql/grammar.y" /* yacc.c:1652  */
    {
      (yyval.node) = nullptr;
    }
#line 3991 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 169:
#line 1550 "Aql/grammar.y" /* yacc.c:1652  */
    {
      if ((yyvsp[0].node) == nullptr) {
        ABORT_OOM
      }

      // we always return an array with two values: SEARCH and OPTIONS
      // as only one of these values will be set here, the other value is NOP
      auto node = parser->ast()->createNodeArray(2);
      // only one extra qualifier. now we need to check if it is SEARCH or OPTIONS

      if (TRI_CaseEqualString((yyvsp[-1].strval).value, "SEARCH")) {
        // found SEARCH
        node->addMember((yyvsp[0].node));
        node->addMember(parser->ast()->createNodeNop());
      } else {
        // everything else must be OPTIONS
        if (!TRI_CaseEqualString((yyvsp[-1].strval).value, "OPTIONS")) {
          parser->registerParseError(TRI_ERROR_QUERY_PARSE, "unexpected qualifier '%s', expecting 'SEARCH' or 'OPTIONS'", (yyvsp[-1].strval).value, yylloc.first_line, yylloc.first_column);
        }

        node->addMember(parser->ast()->createNodeNop());
        node->addMember((yyvsp[0].node));
      }

      (yyval.node) = node;
    }
#line 4022 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 170:
#line 1576 "Aql/grammar.y" /* yacc.c:1652  */
    {
      if ((yyvsp[-2].node) == nullptr) {
        ABORT_OOM
      }

      // two extra qualifiers. we expect them in the order: SEARCH, then OPTIONS

      if (!TRI_CaseEqualString((yyvsp[-3].strval).value, "SEARCH") ||
          !TRI_CaseEqualString((yyvsp[-1].strval).value, "OPTIONS")) {
        parser->registerParseError(TRI_ERROR_QUERY_PARSE, "unexpected qualifier '%s', expecting 'SEARCH' and 'OPTIONS'", (yyvsp[-3].strval).value, yylloc.first_line, yylloc.first_column);
      }

      auto node = parser->ast()->createNodeArray(2);
      node->addMember((yyvsp[-2].node));
      node->addMember((yyvsp[0].node));
      (yyval.node) = node;
    }
#line 4044 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 171:
#line 1596 "Aql/grammar.y" /* yacc.c:1652  */
    {
      (yyval.node) = nullptr;
    }
#line 4052 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 172:
#line 1599 "Aql/grammar.y" /* yacc.c:1652  */
    {
      if ((yyvsp[0].node) == nullptr) {
        ABORT_OOM
      }

      if (!TRI_CaseEqualString((yyvsp[-1].strval).value, "OPTIONS")) {
        parser->registerParseError(TRI_ERROR_QUERY_PARSE, "unexpected qualifier '%s', expecting 'OPTIONS'", (yyvsp[-1].strval).value, yylloc.first_line, yylloc.first_column);
      }

      (yyval.node) = (yyvsp[0].node);
    }
#line 4068 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 173:
#line 1613 "Aql/grammar.y" /* yacc.c:1652  */
    {
      auto node = parser->ast()->createNodeObject();
      parser->pushStack(node);
    }
#line 4077 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 174:
#line 1616 "Aql/grammar.y" /* yacc.c:1652  */
    {
      (yyval.node) = static_cast<AstNode*>(parser->popStack());
    }
#line 4085 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 175:
#line 1622 "Aql/grammar.y" /* yacc.c:1652  */
    {
    }
#line 4092 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 176:
#line 1624 "Aql/grammar.y" /* yacc.c:1652  */
    {
    }
#line 4099 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 177:
#line 1629 "Aql/grammar.y" /* yacc.c:1652  */
    {
    }
#line 4106 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 178:
#line 1631 "Aql/grammar.y" /* yacc.c:1652  */
    {
    }
#line 4113 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 179:
#line 1636 "Aql/grammar.y" /* yacc.c:1652  */
    {
      // attribute-name-only (comparable to JS enhanced object literals, e.g. { foo, bar })
      auto ast = parser->ast();
      auto variable = ast->scopes()->getVariable((yyvsp[0].strval).value, (yyvsp[0].strval).length, true);

      if (variable == nullptr) {
        // variable does not exist
        parser->registerParseError(TRI_ERROR_QUERY_VARIABLE_NAME_UNKNOWN, "use of unknown variable '%s' in object literal", (yyvsp[0].strval).value, yylloc.first_line, yylloc.first_column);
      }

      // create a reference to the variable
      auto node = ast->createNodeReference(variable);
      parser->pushObjectElement((yyvsp[0].strval).value, (yyvsp[0].strval).length, node);
    }
#line 4132 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 180:
#line 1650 "Aql/grammar.y" /* yacc.c:1652  */
    {
      // attribute-name : attribute-value
      parser->pushObjectElement((yyvsp[-2].strval).value, (yyvsp[-2].strval).length, (yyvsp[0].node));
    }
#line 4141 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 181:
#line 1654 "Aql/grammar.y" /* yacc.c:1652  */
    {
      // bind-parameter : attribute-value
      if ((yyvsp[-2].strval).length < 1 || (yyvsp[-2].strval).value[0] == '@') {
        parser->registerParseError(TRI_ERROR_QUERY_BIND_PARAMETER_TYPE, TRI_errno_string(TRI_ERROR_QUERY_BIND_PARAMETER_TYPE), (yyvsp[-2].strval).value, yylloc.first_line, yylloc.first_column);
      }

      auto param = parser->ast()->createNodeParameter((yyvsp[-2].strval).value, (yyvsp[-2].strval).length);
      parser->pushObjectElement(param, (yyvsp[0].node));
    }
#line 4155 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 182:
#line 1663 "Aql/grammar.y" /* yacc.c:1652  */
    {
      // [ attribute-name-expression ] : attribute-value
      parser->pushObjectElement((yyvsp[-3].node), (yyvsp[0].node));
    }
#line 4164 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 183:
#line 1670 "Aql/grammar.y" /* yacc.c:1652  */
    {
      (yyval.intval) = 1;
    }
#line 4172 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 184:
#line 1673 "Aql/grammar.y" /* yacc.c:1652  */
    {
      (yyval.intval) = (yyvsp[-1].intval) + 1;
    }
#line 4180 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 185:
#line 1679 "Aql/grammar.y" /* yacc.c:1652  */
    {
      (yyval.node) = nullptr;
    }
#line 4188 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 186:
#line 1682 "Aql/grammar.y" /* yacc.c:1652  */
    {
      (yyval.node) = (yyvsp[0].node);
    }
#line 4196 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 187:
#line 1688 "Aql/grammar.y" /* yacc.c:1652  */
    {
      (yyval.node) = nullptr;
    }
#line 4204 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 188:
#line 1691 "Aql/grammar.y" /* yacc.c:1652  */
    {
      (yyval.node) = parser->ast()->createNodeArrayLimit(nullptr, (yyvsp[0].node));
    }
#line 4212 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 189:
#line 1694 "Aql/grammar.y" /* yacc.c:1652  */
    {
      (yyval.node) = parser->ast()->createNodeArrayLimit((yyvsp[-2].node), (yyvsp[0].node));
    }
#line 4220 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 190:
#line 1700 "Aql/grammar.y" /* yacc.c:1652  */
    {
      (yyval.node) = nullptr;
    }
#line 4228 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 191:
#line 1703 "Aql/grammar.y" /* yacc.c:1652  */
    {
      (yyval.node) = (yyvsp[0].node);
    }
#line 4236 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 192:
#line 1709 "Aql/grammar.y" /* yacc.c:1652  */
    {
      (yyval.node) = parser->ast()->createNodeValueString((yyvsp[0].strval).value, (yyvsp[0].strval).length);
    }
#line 4244 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 193:
#line 1712 "Aql/grammar.y" /* yacc.c:1652  */
    {
      (yyval.node) = (yyvsp[0].node);
    }
#line 4252 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 194:
#line 1715 "Aql/grammar.y" /* yacc.c:1652  */
    {
      auto tmp = parser->ast()->createNodeValueString((yyvsp[0].strval).value, (yyvsp[0].strval).length);
      (yyval.node) = parser->ast()->createNodeCollectionDirection((yyvsp[-1].intval), tmp);
    }
#line 4261 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 195:
#line 1719 "Aql/grammar.y" /* yacc.c:1652  */
    {
      (yyval.node) = parser->ast()->createNodeCollectionDirection((yyvsp[-1].intval), (yyvsp[0].node));
    }
#line 4269 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 196:
#line 1725 "Aql/grammar.y" /* yacc.c:1652  */
    {
       auto node = static_cast<AstNode*>(parser->peekStack());
       node->addMember((yyvsp[0].node));
     }
#line 4278 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 197:
#line 1729 "Aql/grammar.y" /* yacc.c:1652  */
    {
       auto node = static_cast<AstNode*>(parser->peekStack());
       node->addMember((yyvsp[0].node));
     }
#line 4287 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 198:
#line 1736 "Aql/grammar.y" /* yacc.c:1652  */
    {
      auto node = parser->ast()->createNodeArray();
      node->addMember((yyvsp[0].node));
      auto const& resolver = parser->query()->resolver();
      (yyval.node) = parser->ast()->createNodeCollectionList(node, resolver);
    }
#line 4298 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 199:
#line 1742 "Aql/grammar.y" /* yacc.c:1652  */
    {
      auto node = parser->ast()->createNodeArray();
      parser->pushStack(node);
      node->addMember((yyvsp[-1].node));
    }
#line 4308 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 200:
#line 1746 "Aql/grammar.y" /* yacc.c:1652  */
    {
      auto node = static_cast<AstNode*>(parser->popStack());
      auto const& resolver = parser->query()->resolver();
      (yyval.node) = parser->ast()->createNodeCollectionList(node, resolver);
    }
#line 4318 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 201:
#line 1751 "Aql/grammar.y" /* yacc.c:1652  */
    {
      // graph name
      (yyval.node) = (yyvsp[0].node);
    }
#line 4327 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 202:
#line 1755 "Aql/grammar.y" /* yacc.c:1652  */
    {
      // graph name
      (yyval.node) = parser->ast()->createNodeValueString((yyvsp[0].strval).value, (yyvsp[0].strval).length);
    }
#line 4336 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 203:
#line 1764 "Aql/grammar.y" /* yacc.c:1652  */
    {
      (yyval.intval) = 2;
    }
#line 4344 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 204:
#line 1767 "Aql/grammar.y" /* yacc.c:1652  */
    {
      (yyval.intval) = 1;
    }
#line 4352 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 205:
#line 1770 "Aql/grammar.y" /* yacc.c:1652  */
    {
      (yyval.intval) = 0;
    }
#line 4360 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 206:
#line 1776 "Aql/grammar.y" /* yacc.c:1652  */
    {
      (yyval.node) = parser->ast()->createNodeDirection((yyvsp[0].intval), 1);
    }
#line 4368 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 207:
#line 1779 "Aql/grammar.y" /* yacc.c:1652  */
    {
      (yyval.node) = parser->ast()->createNodeDirection((yyvsp[0].intval), (yyvsp[-1].node));
    }
#line 4376 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 208:
#line 1785 "Aql/grammar.y" /* yacc.c:1652  */
    {
      // variable or collection or view
      auto ast = parser->ast();
      AstNode* node = nullptr;

      auto variable = ast->scopes()->getVariable((yyvsp[0].strval).value, (yyvsp[0].strval).length, true);

      if (variable == nullptr) {
        // variable does not exist
        // now try special variables
        if (ast->scopes()->canUseCurrentVariable() && strcmp((yyvsp[0].strval).value, "CURRENT") == 0) {
          variable = ast->scopes()->getCurrentVariable();
        } else if (strcmp((yyvsp[0].strval).value, Variable::NAME_CURRENT) == 0) {
          variable = ast->scopes()->getCurrentVariable();
        }
      }

      if (variable != nullptr) {
        // variable alias exists, now use it
        node = ast->createNodeReference(variable);
      }

      if (node == nullptr) {
        // variable not found. so it must have been a collection or view
        auto const& resolver = parser->query()->resolver();
        node = ast->createNodeDataSource(resolver, (yyvsp[0].strval).value, (yyvsp[0].strval).length, arangodb::AccessMode::Type::READ, true, false);
      }

      TRI_ASSERT(node != nullptr);

      (yyval.node) = node;
    }
#line 4413 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 209:
#line 1817 "Aql/grammar.y" /* yacc.c:1652  */
    {
      (yyval.node) = (yyvsp[0].node);
    }
#line 4421 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 210:
#line 1820 "Aql/grammar.y" /* yacc.c:1652  */
    {
      (yyval.node) = (yyvsp[0].node);
    }
#line 4429 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 211:
#line 1823 "Aql/grammar.y" /* yacc.c:1652  */
    {
      (yyval.node) = (yyvsp[0].node);

      if ((yyval.node) == nullptr) {
        ABORT_OOM
      }
    }
#line 4441 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 212:
#line 1830 "Aql/grammar.y" /* yacc.c:1652  */
    {
      if ((yyvsp[-1].node)->type == NODE_TYPE_EXPANSION) {
        // create a dummy passthru node that reduces and evaluates the expansion first
        // and the expansion on top of the stack won't be chained with any other expansions
        (yyval.node) = parser->ast()->createNodePassthru((yyvsp[-1].node));
      }
      else {
        (yyval.node) = (yyvsp[-1].node);
      }
    }
#line 4456 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 213:
#line 1840 "Aql/grammar.y" /* yacc.c:1652  */
    {
      parser->ast()->scopes()->start(arangodb::aql::AQL_SCOPE_SUBQUERY);
      parser->ast()->startSubQuery();
    }
#line 4465 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 214:
#line 1843 "Aql/grammar.y" /* yacc.c:1652  */
    {
      AstNode* node = parser->ast()->endSubQuery();
      parser->ast()->scopes()->endCurrent();

      std::string const variableName = parser->ast()->variables()->nextName();
      auto subQuery = parser->ast()->createNodeLet(variableName.c_str(), variableName.size(), node, false);
      parser->ast()->addOperation(subQuery);

      (yyval.node) = parser->ast()->createNodeReference(variableName);
    }
#line 4480 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 215:
#line 1853 "Aql/grammar.y" /* yacc.c:1652  */
    {
      // named variable access, e.g. variable.reference
      if ((yyvsp[-2].node)->type == NODE_TYPE_EXPANSION) {
        // if left operand is an expansion already...
        // dive into the expansion's right-hand child nodes for further expansion and
        // patch the bottom-most one
        auto current = const_cast<AstNode*>(parser->ast()->findExpansionSubNode((yyvsp[-2].node)));
        TRI_ASSERT(current->type == NODE_TYPE_EXPANSION);
        current->changeMember(1, parser->ast()->createNodeAttributeAccess(current->getMember(1), (yyvsp[0].strval).value, (yyvsp[0].strval).length));
        (yyval.node) = (yyvsp[-2].node);
      }
      else {
        (yyval.node) = parser->ast()->createNodeAttributeAccess((yyvsp[-2].node), (yyvsp[0].strval).value, (yyvsp[0].strval).length);
      }
    }
#line 4500 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 216:
#line 1868 "Aql/grammar.y" /* yacc.c:1652  */
    {
      // named variable access, e.g. variable.@reference
      if ((yyvsp[-2].node)->type == NODE_TYPE_EXPANSION) {
        // if left operand is an expansion already...
        // patch the existing expansion
        auto current = const_cast<AstNode*>(parser->ast()->findExpansionSubNode((yyvsp[-2].node)));
        TRI_ASSERT(current->type == NODE_TYPE_EXPANSION);
        current->changeMember(1, parser->ast()->createNodeBoundAttributeAccess(current->getMember(1), (yyvsp[0].node)));
        (yyval.node) = (yyvsp[-2].node);
      }
      else {
        (yyval.node) = parser->ast()->createNodeBoundAttributeAccess((yyvsp[-2].node), (yyvsp[0].node));
      }
    }
#line 4519 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 217:
#line 1882 "Aql/grammar.y" /* yacc.c:1652  */
    {
      // indexed variable access, e.g. variable[index]
      if ((yyvsp[-3].node)->type == NODE_TYPE_EXPANSION) {
        // if left operand is an expansion already...
        // patch the existing expansion
        auto current = const_cast<AstNode*>(parser->ast()->findExpansionSubNode((yyvsp[-3].node)));
        TRI_ASSERT(current->type == NODE_TYPE_EXPANSION);
        current->changeMember(1, parser->ast()->createNodeIndexedAccess(current->getMember(1), (yyvsp[-1].node)));
        (yyval.node) = (yyvsp[-3].node);
      }
      else {
        (yyval.node) = parser->ast()->createNodeIndexedAccess((yyvsp[-3].node), (yyvsp[-1].node));
      }
    }
#line 4538 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 218:
#line 1896 "Aql/grammar.y" /* yacc.c:1652  */
    {
      // variable expansion, e.g. variable[*], with optional FILTER, LIMIT and RETURN clauses
      if ((yyvsp[0].intval) > 1 && (yyvsp[-2].node)->type == NODE_TYPE_EXPANSION) {
        // create a dummy passthru node that reduces and evaluates the expansion first
        // and the expansion on top of the stack won't be chained with any other expansions
        (yyvsp[-2].node) = parser->ast()->createNodePassthru((yyvsp[-2].node));
      }

      // create a temporary iterator variable
      std::string const nextName = parser->ast()->variables()->nextName() + "_";

      if ((yyvsp[-2].node)->type == NODE_TYPE_EXPANSION) {
        auto iterator = parser->ast()->createNodeIterator(nextName.c_str(), nextName.size(), (yyvsp[-2].node)->getMember(1));
        parser->pushStack(iterator);
      }
      else {
        auto iterator = parser->ast()->createNodeIterator(nextName.c_str(), nextName.size(), (yyvsp[-2].node));
        parser->pushStack(iterator);
      }

      auto scopes = parser->ast()->scopes();
      scopes->stackCurrentVariable(scopes->getVariable(nextName));
    }
#line 4566 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 219:
#line 1918 "Aql/grammar.y" /* yacc.c:1652  */
    {
      auto scopes = parser->ast()->scopes();
      scopes->unstackCurrentVariable();

      auto iterator = static_cast<AstNode const*>(parser->popStack());
      auto variableNode = iterator->getMember(0);
      TRI_ASSERT(variableNode->type == NODE_TYPE_VARIABLE);
      auto variable = static_cast<Variable const*>(variableNode->getData());

      if ((yyvsp[-7].node)->type == NODE_TYPE_EXPANSION) {
        auto expand = parser->ast()->createNodeExpansion((yyvsp[-5].intval), iterator, parser->ast()->createNodeReference(variable->name), (yyvsp[-3].node), (yyvsp[-2].node), (yyvsp[-1].node));
        (yyvsp[-7].node)->changeMember(1, expand);
        (yyval.node) = (yyvsp[-7].node);
      }
      else {
        (yyval.node) = parser->ast()->createNodeExpansion((yyvsp[-5].intval), iterator, parser->ast()->createNodeReference(variable->name), (yyvsp[-3].node), (yyvsp[-2].node), (yyvsp[-1].node));
      }
    }
#line 4589 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 220:
#line 1939 "Aql/grammar.y" /* yacc.c:1652  */
    {
      (yyval.node) = (yyvsp[0].node);
    }
#line 4597 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 221:
#line 1942 "Aql/grammar.y" /* yacc.c:1652  */
    {
      (yyval.node) = (yyvsp[0].node);
    }
#line 4605 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 222:
#line 1948 "Aql/grammar.y" /* yacc.c:1652  */
    {
      if ((yyvsp[0].node) == nullptr) {
        ABORT_OOM
      }

      (yyval.node) = (yyvsp[0].node);
    }
#line 4617 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 223:
#line 1955 "Aql/grammar.y" /* yacc.c:1652  */
    {
      if ((yyvsp[0].node) == nullptr) {
        ABORT_OOM
      }

      (yyval.node) = (yyvsp[0].node);
    }
#line 4629 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 224:
#line 1965 "Aql/grammar.y" /* yacc.c:1652  */
    {
      (yyval.node) = parser->ast()->createNodeValueString((yyvsp[0].strval).value, (yyvsp[0].strval).length);
    }
#line 4637 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 225:
#line 1968 "Aql/grammar.y" /* yacc.c:1652  */
    {
      (yyval.node) = (yyvsp[0].node);
    }
#line 4645 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 226:
#line 1971 "Aql/grammar.y" /* yacc.c:1652  */
    {
      (yyval.node) = parser->ast()->createNodeValueNull();
    }
#line 4653 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 227:
#line 1974 "Aql/grammar.y" /* yacc.c:1652  */
    {
      (yyval.node) = parser->ast()->createNodeValueBool(true);
    }
#line 4661 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 228:
#line 1977 "Aql/grammar.y" /* yacc.c:1652  */
    {
      (yyval.node) = parser->ast()->createNodeValueBool(false);
    }
#line 4669 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 229:
#line 1983 "Aql/grammar.y" /* yacc.c:1652  */
    {
      auto const& resolver = parser->query()->resolver();
      (yyval.node) = parser->ast()->createNodeCollection(resolver, (yyvsp[0].strval).value, (yyvsp[0].strval).length, arangodb::AccessMode::Type::WRITE);
    }
#line 4678 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 230:
#line 1987 "Aql/grammar.y" /* yacc.c:1652  */
    {
      auto const& resolver = parser->query()->resolver();
      (yyval.node) = parser->ast()->createNodeCollection(resolver, (yyvsp[0].strval).value, (yyvsp[0].strval).length, arangodb::AccessMode::Type::WRITE);
    }
#line 4687 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 231:
#line 1991 "Aql/grammar.y" /* yacc.c:1652  */
    {
      if ((yyvsp[0].strval).length < 2 || (yyvsp[0].strval).value[0] != '@') {
        parser->registerParseError(TRI_ERROR_QUERY_BIND_PARAMETER_TYPE, TRI_errno_string(TRI_ERROR_QUERY_BIND_PARAMETER_TYPE), (yyvsp[0].strval).value, yylloc.first_line, yylloc.first_column);
      }

      (yyval.node) = parser->ast()->createNodeParameterDatasource((yyvsp[0].strval).value, (yyvsp[0].strval).length);
    }
#line 4699 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 232:
#line 2001 "Aql/grammar.y" /* yacc.c:1652  */
    {
      if ((yyvsp[0].strval).length < 2 || (yyvsp[0].strval).value[0] != '@') {
        parser->registerParseError(TRI_ERROR_QUERY_BIND_PARAMETER_TYPE, TRI_errno_string(TRI_ERROR_QUERY_BIND_PARAMETER_TYPE), (yyvsp[0].strval).value, yylloc.first_line, yylloc.first_column);
      }

      (yyval.node) = parser->ast()->createNodeParameterDatasource((yyvsp[0].strval).value, (yyvsp[0].strval).length);
    }
#line 4711 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 233:
#line 2008 "Aql/grammar.y" /* yacc.c:1652  */
    {
      (yyval.node) = parser->ast()->createNodeParameter((yyvsp[0].strval).value, (yyvsp[0].strval).length);
    }
#line 4719 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 234:
#line 2014 "Aql/grammar.y" /* yacc.c:1652  */
    {
      (yyval.strval) = (yyvsp[0].strval);
    }
#line 4727 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 235:
#line 2017 "Aql/grammar.y" /* yacc.c:1652  */
    {
      (yyval.strval) = (yyvsp[0].strval);
    }
#line 4735 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;

  case 236:
#line 2022 "Aql/grammar.y" /* yacc.c:1652  */
    {
      (yyval.strval) = (yyvsp[0].strval);
    }
#line 4743 "Aql/grammar.cpp" /* yacc.c:1652  */
    break;


#line 4747 "Aql/grammar.cpp" /* yacc.c:1652  */
      default: break;
    }
  /* User semantic actions sometimes alter yychar, and that requires
     that yytoken be updated with the new translation.  We take the
     approach of translating immediately before every use of yytoken.
     One alternative is translating here after every semantic action,
     but that translation would be missed if the semantic action invokes
     YYABORT, YYACCEPT, or YYERROR immediately after altering yychar or
     if it invokes YYBACKUP.  In the case of YYABORT or YYACCEPT, an
     incorrect destructor might then be invoked immediately.  In the
     case of YYERROR or YYBACKUP, subsequent parser actions might lead
     to an incorrect destructor call or verbose syntax error message
     before the lookahead is translated.  */
  YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyn], &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);

  *++yyvsp = yyval;
  *++yylsp = yyloc;

  /* Now 'shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */
  {
    const int yylhs = yyr1[yyn] - YYNTOKENS;
    const int yyi = yypgoto[yylhs] + *yyssp;
    yystate = (0 <= yyi && yyi <= YYLAST && yycheck[yyi] == *yyssp
               ? yytable[yyi]
               : yydefgoto[yylhs]);
  }

  goto yynewstate;


/*--------------------------------------.
| yyerrlab -- here on detecting error.  |
`--------------------------------------*/
yyerrlab:
  /* Make sure we have latest lookahead translation.  See comments at
     user semantic actions for why this is necessary.  */
  yytoken = yychar == YYEMPTY ? YYEMPTY : YYTRANSLATE (yychar);

  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
#if ! YYERROR_VERBOSE
      yyerror (&yylloc, parser, YY_("syntax error"));
#else
# define YYSYNTAX_ERROR yysyntax_error (&yymsg_alloc, &yymsg, \
                                        yyssp, yytoken)
      {
        char const *yymsgp = YY_("syntax error");
        int yysyntax_error_status;
        yysyntax_error_status = YYSYNTAX_ERROR;
        if (yysyntax_error_status == 0)
          yymsgp = yymsg;
        else if (yysyntax_error_status == 1)
          {
            if (yymsg != yymsgbuf)
              YYSTACK_FREE (yymsg);
            yymsg = (char *) YYSTACK_ALLOC (yymsg_alloc);
            if (!yymsg)
              {
                yymsg = yymsgbuf;
                yymsg_alloc = sizeof yymsgbuf;
                yysyntax_error_status = 2;
              }
            else
              {
                yysyntax_error_status = YYSYNTAX_ERROR;
                yymsgp = yymsg;
              }
          }
        yyerror (&yylloc, parser, yymsgp);
        if (yysyntax_error_status == 2)
          goto yyexhaustedlab;
      }
# undef YYSYNTAX_ERROR
#endif
    }

  yyerror_range[1] = yylloc;

  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
         error, discard it.  */

      if (yychar <= YYEOF)
        {
          /* Return failure if at end of input.  */
          if (yychar == YYEOF)
            YYABORT;
        }
      else
        {
          yydestruct ("Error: discarding",
                      yytoken, &yylval, &yylloc, parser);
          yychar = YYEMPTY;
        }
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:
  /* Pacify compilers when the user code never invokes YYERROR and the
     label yyerrorlab therefore never appears in user code.  */
  if (0)
    YYERROR;

  /* Do not reclaim the symbols of the rule whose action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;      /* Each real token shifted decrements this.  */

  for (;;)
    {
      yyn = yypact[yystate];
      if (!yypact_value_is_default (yyn))
        {
          yyn += YYTERROR;
          if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
            {
              yyn = yytable[yyn];
              if (0 < yyn)
                break;
            }
        }

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
        YYABORT;

      yyerror_range[1] = *yylsp;
      yydestruct ("Error: popping",
                  yystos[yystate], yyvsp, yylsp, parser);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END

  yyerror_range[2] = yylloc;
  /* Using YYLLOC is tempting, but would change the location of
     the lookahead.  YYLOC is available though.  */
  YYLLOC_DEFAULT (yyloc, yyerror_range, 2);
  *++yylsp = yyloc;

  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", yystos[yyn], yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;


/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;


#if !defined yyoverflow || YYERROR_VERBOSE
/*-------------------------------------------------.
| yyexhaustedlab -- memory exhaustion comes here.  |
`-------------------------------------------------*/
yyexhaustedlab:
  yyerror (&yylloc, parser, YY_("memory exhausted"));
  yyresult = 2;
  /* Fall through.  */
#endif


/*-----------------------------------------------------.
| yyreturn -- parsing is finished, return the result.  |
`-----------------------------------------------------*/
yyreturn:
  if (yychar != YYEMPTY)
    {
      /* Make sure we have latest lookahead translation.  See comments at
         user semantic actions for why this is necessary.  */
      yytoken = YYTRANSLATE (yychar);
      yydestruct ("Cleanup: discarding lookahead",
                  yytoken, &yylval, &yylloc, parser);
    }
  /* Do not reclaim the symbols of the rule whose action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
                  yystos[*yyssp], yyvsp, yylsp, parser);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
#if YYERROR_VERBOSE
  if (yymsg != yymsgbuf)
    YYSTACK_FREE (yymsg);
#endif
  return yyresult;
}
