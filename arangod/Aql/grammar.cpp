/* clang-format off */
/* A Bison parser, made by GNU Bison 3.8.2.  */

/* Bison implementation for Yacc-like parsers in C

   Copyright (C) 1984, 1989-1990, 2000-2015, 2018-2021 Free Software Foundation,
   Inc.

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <https://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.

   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* DO NOT RELY ON FEATURES THAT ARE NOT DOCUMENTED in the manual,
   especially those whose name start with YY_ or yy_.  They are
   private implementation details that can be changed or removed.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output, and Bison version.  */
#define YYBISON 30802

/* Bison version string.  */
#define YYBISON_VERSION "3.8.2"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 1

/* Push parsers.  */
#define YYPUSH 0

/* Pull parsers.  */
#define YYPULL 1


/* Substitute the variable and function names.  */
#define yyparse         Aqlparse
#define yylex           Aqllex
#define yyerror         Aqlerror
#define yydebug         Aqldebug
#define yynerrs         Aqlnerrs

/* First part of user prologue.  */
#line 9 "Aql/grammar.y"

// we are using alloca here explicitly because we may
// otherwise leak error messages that are generated by Bison.
// Bison reports all its errors via the function `Aqlerror`, which
// will receive the error message as a constant string. So we
// must not free the string inside `Aqlerror`, and we cannot even
// tell if the error message is a dynamically allocated error
// message or a hard-coded error message that resides in some
// static part of the program.
// Even worse, `Aqlerror` does not return control to Bison but throws
// an exception... So the best thing we can do here is to not use
// dynamically memory allocation by Bison, but make it use alloca.
#define YYSTACK_USE_ALLOCA 1

#include "Aql/Aggregator.h"
#include "Aql/AstNode.h"
#include "Aql/Function.h"
#include "Aql/Parser.h"
#include "Aql/Quantifier.h"
#include "Aql/QueryContext.h"
#include "Aql/types.h"
#include "Basics/StaticStrings.h"
#include "Basics/StringUtils.h"
#include "Graph/PathType.h"
#include "Transaction/Context.h"
#include "VocBase/AccessMode.h"

#include <algorithm>
#include <cstdint>
#include <string>
#include <string_view>


#line 110 "Aql/grammar.cpp"

# ifndef YY_CAST
#  ifdef __cplusplus
#   define YY_CAST(Type, Val) static_cast<Type> (Val)
#   define YY_REINTERPRET_CAST(Type, Val) reinterpret_cast<Type> (Val)
#  else
#   define YY_CAST(Type, Val) ((Type) (Val))
#   define YY_REINTERPRET_CAST(Type, Val) ((Type) (Val))
#  endif
# endif
# ifndef YY_NULLPTR
#  if defined __cplusplus
#   if 201103L <= __cplusplus
#    define YY_NULLPTR nullptr
#   else
#    define YY_NULLPTR 0
#   endif
#  else
#   define YY_NULLPTR ((void*)0)
#  endif
# endif

#include "grammar.hpp"
/* Symbol kind.  */
enum yysymbol_kind_t
{
  YYSYMBOL_YYEMPTY = -2,
  YYSYMBOL_YYEOF = 0,                      /* "end of query string"  */
  YYSYMBOL_YYerror = 1,                    /* error  */
  YYSYMBOL_YYUNDEF = 2,                    /* "invalid token"  */
  YYSYMBOL_T_FOR = 3,                      /* "FOR declaration"  */
  YYSYMBOL_T_LET = 4,                      /* "LET declaration"  */
  YYSYMBOL_T_FILTER = 5,                   /* "FILTER declaration"  */
  YYSYMBOL_T_RETURN = 6,                   /* "RETURN declaration"  */
  YYSYMBOL_T_COLLECT = 7,                  /* "COLLECT declaration"  */
  YYSYMBOL_T_SORT = 8,                     /* "SORT declaration"  */
  YYSYMBOL_T_LIMIT = 9,                    /* "LIMIT declaration"  */
  YYSYMBOL_T_WINDOW = 10,                  /* "WINDOW declaration"  */
  YYSYMBOL_T_ASC = 11,                     /* "ASC keyword"  */
  YYSYMBOL_T_DESC = 12,                    /* "DESC keyword"  */
  YYSYMBOL_T_IN = 13,                      /* "IN keyword"  */
  YYSYMBOL_T_WITH = 14,                    /* "WITH keyword"  */
  YYSYMBOL_T_INTO = 15,                    /* "INTO keyword"  */
  YYSYMBOL_T_AGGREGATE = 16,               /* "AGGREGATE keyword"  */
  YYSYMBOL_T_GRAPH = 17,                   /* "GRAPH keyword"  */
  YYSYMBOL_T_SHORTEST_PATH = 18,           /* "SHORTEST_PATH keyword"  */
  YYSYMBOL_T_K_SHORTEST_PATHS = 19,        /* "K_SHORTEST_PATHS keyword"  */
  YYSYMBOL_T_K_PATHS = 20,                 /* "K_PATHS keyword"  */
  YYSYMBOL_T_DISTINCT = 21,                /* "DISTINCT modifier"  */
  YYSYMBOL_T_REMOVE = 22,                  /* "REMOVE command"  */
  YYSYMBOL_T_INSERT = 23,                  /* "INSERT command"  */
  YYSYMBOL_T_UPDATE = 24,                  /* "UPDATE command"  */
  YYSYMBOL_T_REPLACE = 25,                 /* "REPLACE command"  */
  YYSYMBOL_T_UPSERT = 26,                  /* "UPSERT command"  */
  YYSYMBOL_T_NULL = 27,                    /* "null"  */
  YYSYMBOL_T_TRUE = 28,                    /* "true"  */
  YYSYMBOL_T_FALSE = 29,                   /* "false"  */
  YYSYMBOL_T_STRING = 30,                  /* "identifier"  */
  YYSYMBOL_T_QUOTED_STRING = 31,           /* "quoted string"  */
  YYSYMBOL_T_INTEGER = 32,                 /* "integer number"  */
  YYSYMBOL_T_DOUBLE = 33,                  /* "number"  */
  YYSYMBOL_T_PARAMETER = 34,               /* "bind parameter"  */
  YYSYMBOL_T_DATA_SOURCE_PARAMETER = 35,   /* "bind data source parameter"  */
  YYSYMBOL_T_ASSIGN = 36,                  /* "assignment"  */
  YYSYMBOL_T_NOT = 37,                     /* "not operator"  */
  YYSYMBOL_T_AND = 38,                     /* "and operator"  */
  YYSYMBOL_T_OR = 39,                      /* "or operator"  */
  YYSYMBOL_T_NOT_IN = 40,                  /* "not in operator"  */
  YYSYMBOL_T_REGEX_MATCH = 41,             /* "~= operator"  */
  YYSYMBOL_T_REGEX_NON_MATCH = 42,         /* "~! operator"  */
  YYSYMBOL_T_EQ = 43,                      /* "== operator"  */
  YYSYMBOL_T_NE = 44,                      /* "!= operator"  */
  YYSYMBOL_T_LT = 45,                      /* "< operator"  */
  YYSYMBOL_T_GT = 46,                      /* "> operator"  */
  YYSYMBOL_T_LE = 47,                      /* "<= operator"  */
  YYSYMBOL_T_GE = 48,                      /* ">= operator"  */
  YYSYMBOL_T_LIKE = 49,                    /* "like operator"  */
  YYSYMBOL_T_PLUS = 50,                    /* "+ operator"  */
  YYSYMBOL_T_MINUS = 51,                   /* "- operator"  */
  YYSYMBOL_T_TIMES = 52,                   /* "* operator"  */
  YYSYMBOL_T_DIV = 53,                     /* "/ operator"  */
  YYSYMBOL_T_MOD = 54,                     /* "% operator"  */
  YYSYMBOL_T_QUESTION = 55,                /* "?"  */
  YYSYMBOL_T_COLON = 56,                   /* ":"  */
  YYSYMBOL_T_SCOPE = 57,                   /* "::"  */
  YYSYMBOL_T_RANGE = 58,                   /* ".."  */
  YYSYMBOL_T_COMMA = 59,                   /* ","  */
  YYSYMBOL_T_OPEN = 60,                    /* "("  */
  YYSYMBOL_T_CLOSE = 61,                   /* ")"  */
  YYSYMBOL_T_OBJECT_OPEN = 62,             /* "{"  */
  YYSYMBOL_T_OBJECT_CLOSE = 63,            /* "}"  */
  YYSYMBOL_T_ARRAY_OPEN = 64,              /* "["  */
  YYSYMBOL_T_ARRAY_CLOSE = 65,             /* "]"  */
  YYSYMBOL_T_OUTBOUND = 66,                /* "outbound modifier"  */
  YYSYMBOL_T_INBOUND = 67,                 /* "inbound modifier"  */
  YYSYMBOL_T_ANY = 68,                     /* "any modifier"  */
  YYSYMBOL_T_ALL = 69,                     /* "all modifier"  */
  YYSYMBOL_T_NONE = 70,                    /* "none modifier"  */
  YYSYMBOL_T_AT_LEAST = 71,                /* "at least modifier"  */
  YYSYMBOL_UMINUS = 72,                    /* UMINUS  */
  YYSYMBOL_UPLUS = 73,                     /* UPLUS  */
  YYSYMBOL_UNEGATION = 74,                 /* UNEGATION  */
  YYSYMBOL_FUNCCALL = 75,                  /* FUNCCALL  */
  YYSYMBOL_REFERENCE = 76,                 /* REFERENCE  */
  YYSYMBOL_INDEXED = 77,                   /* INDEXED  */
  YYSYMBOL_EXPANSION = 78,                 /* EXPANSION  */
  YYSYMBOL_79_ = 79,                       /* '.'  */
  YYSYMBOL_YYACCEPT = 80,                  /* $accept  */
  YYSYMBOL_optional_prune_variable = 81,   /* optional_prune_variable  */
  YYSYMBOL_with_collection = 82,           /* with_collection  */
  YYSYMBOL_with_collection_list = 83,      /* with_collection_list  */
  YYSYMBOL_optional_with = 84,             /* optional_with  */
  YYSYMBOL_85_1 = 85,                      /* $@1  */
  YYSYMBOL_queryStart = 86,                /* queryStart  */
  YYSYMBOL_query = 87,                     /* query  */
  YYSYMBOL_final_statement = 88,           /* final_statement  */
  YYSYMBOL_optional_statement_block_statements = 89, /* optional_statement_block_statements  */
  YYSYMBOL_statement_block_statement = 90, /* statement_block_statement  */
  YYSYMBOL_more_output_variables = 91,     /* more_output_variables  */
  YYSYMBOL_for_output_variables = 92,      /* for_output_variables  */
  YYSYMBOL_prune_and_options = 93,         /* prune_and_options  */
  YYSYMBOL_traversal_graph_info = 94,      /* traversal_graph_info  */
  YYSYMBOL_shortest_path_graph_info = 95,  /* shortest_path_graph_info  */
  YYSYMBOL_k_shortest_paths_graph_info = 96, /* k_shortest_paths_graph_info  */
  YYSYMBOL_k_paths_graph_info = 97,        /* k_paths_graph_info  */
  YYSYMBOL_for_statement = 98,             /* for_statement  */
  YYSYMBOL_99_2 = 99,                      /* $@2  */
  YYSYMBOL_100_3 = 100,                    /* $@3  */
  YYSYMBOL_filter_statement = 101,         /* filter_statement  */
  YYSYMBOL_let_statement = 102,            /* let_statement  */
  YYSYMBOL_let_list = 103,                 /* let_list  */
  YYSYMBOL_let_element = 104,              /* let_element  */
  YYSYMBOL_count_into = 105,               /* count_into  */
  YYSYMBOL_collect_variable_list = 106,    /* collect_variable_list  */
  YYSYMBOL_107_4 = 107,                    /* $@4  */
  YYSYMBOL_collect_statement = 108,        /* collect_statement  */
  YYSYMBOL_collect_list = 109,             /* collect_list  */
  YYSYMBOL_collect_element = 110,          /* collect_element  */
  YYSYMBOL_collect_optional_into = 111,    /* collect_optional_into  */
  YYSYMBOL_variable_list = 112,            /* variable_list  */
  YYSYMBOL_keep = 113,                     /* keep  */
  YYSYMBOL_114_5 = 114,                    /* $@5  */
  YYSYMBOL_aggregate = 115,                /* aggregate  */
  YYSYMBOL_116_6 = 116,                    /* $@6  */
  YYSYMBOL_aggregate_list = 117,           /* aggregate_list  */
  YYSYMBOL_aggregate_element = 118,        /* aggregate_element  */
  YYSYMBOL_aggregate_function_call = 119,  /* aggregate_function_call  */
  YYSYMBOL_120_7 = 120,                    /* $@7  */
  YYSYMBOL_sort_statement = 121,           /* sort_statement  */
  YYSYMBOL_122_8 = 122,                    /* $@8  */
  YYSYMBOL_sort_list = 123,                /* sort_list  */
  YYSYMBOL_sort_element = 124,             /* sort_element  */
  YYSYMBOL_sort_direction = 125,           /* sort_direction  */
  YYSYMBOL_limit_statement = 126,          /* limit_statement  */
  YYSYMBOL_window_statement = 127,         /* window_statement  */
  YYSYMBOL_return_statement = 128,         /* return_statement  */
  YYSYMBOL_in_or_into_collection = 129,    /* in_or_into_collection  */
  YYSYMBOL_remove_statement = 130,         /* remove_statement  */
  YYSYMBOL_insert_statement = 131,         /* insert_statement  */
  YYSYMBOL_update_parameters = 132,        /* update_parameters  */
  YYSYMBOL_update_statement = 133,         /* update_statement  */
  YYSYMBOL_replace_parameters = 134,       /* replace_parameters  */
  YYSYMBOL_replace_statement = 135,        /* replace_statement  */
  YYSYMBOL_update_or_replace = 136,        /* update_or_replace  */
  YYSYMBOL_upsert_statement = 137,         /* upsert_statement  */
  YYSYMBOL_138_9 = 138,                    /* $@9  */
  YYSYMBOL_139_10 = 139,                   /* $@10  */
  YYSYMBOL_quantifier = 140,               /* quantifier  */
  YYSYMBOL_distinct_expression = 141,      /* distinct_expression  */
  YYSYMBOL_142_11 = 142,                   /* $@11  */
  YYSYMBOL_expression = 143,               /* expression  */
  YYSYMBOL_function_name = 144,            /* function_name  */
  YYSYMBOL_function_call = 145,            /* function_call  */
  YYSYMBOL_146_12 = 146,                   /* $@12  */
  YYSYMBOL_147_13 = 147,                   /* $@13  */
  YYSYMBOL_operator_unary = 148,           /* operator_unary  */
  YYSYMBOL_operator_binary = 149,          /* operator_binary  */
  YYSYMBOL_operator_ternary = 150,         /* operator_ternary  */
  YYSYMBOL_optional_function_call_arguments = 151, /* optional_function_call_arguments  */
  YYSYMBOL_expression_or_query = 152,      /* expression_or_query  */
  YYSYMBOL_153_14 = 153,                   /* $@14  */
  YYSYMBOL_function_arguments_list = 154,  /* function_arguments_list  */
  YYSYMBOL_compound_value = 155,           /* compound_value  */
  YYSYMBOL_array = 156,                    /* array  */
  YYSYMBOL_157_15 = 157,                   /* $@15  */
  YYSYMBOL_optional_array_elements = 158,  /* optional_array_elements  */
  YYSYMBOL_array_elements_list = 159,      /* array_elements_list  */
  YYSYMBOL_array_element = 160,            /* array_element  */
  YYSYMBOL_for_options = 161,              /* for_options  */
  YYSYMBOL_options = 162,                  /* options  */
  YYSYMBOL_object = 163,                   /* object  */
  YYSYMBOL_164_16 = 164,                   /* $@16  */
  YYSYMBOL_optional_object_elements = 165, /* optional_object_elements  */
  YYSYMBOL_object_elements_list = 166,     /* object_elements_list  */
  YYSYMBOL_object_element = 167,           /* object_element  */
  YYSYMBOL_array_filter_operator = 168,    /* array_filter_operator  */
  YYSYMBOL_array_map_operator = 169,       /* array_map_operator  */
  YYSYMBOL_optional_array_filter = 170,    /* optional_array_filter  */
  YYSYMBOL_optional_array_limit = 171,     /* optional_array_limit  */
  YYSYMBOL_optional_array_return = 172,    /* optional_array_return  */
  YYSYMBOL_graph_collection = 173,         /* graph_collection  */
  YYSYMBOL_graph_collection_list = 174,    /* graph_collection_list  */
  YYSYMBOL_graph_subject = 175,            /* graph_subject  */
  YYSYMBOL_176_17 = 176,                   /* $@17  */
  YYSYMBOL_graph_direction = 177,          /* graph_direction  */
  YYSYMBOL_graph_direction_steps = 178,    /* graph_direction_steps  */
  YYSYMBOL_reference = 179,                /* reference  */
  YYSYMBOL_180_18 = 180,                   /* $@18  */
  YYSYMBOL_181_19 = 181,                   /* $@19  */
  YYSYMBOL_182_20 = 182,                   /* $@20  */
  YYSYMBOL_simple_value = 183,             /* simple_value  */
  YYSYMBOL_numeric_value = 184,            /* numeric_value  */
  YYSYMBOL_value_literal = 185,            /* value_literal  */
  YYSYMBOL_in_or_into_collection_name = 186, /* in_or_into_collection_name  */
  YYSYMBOL_bind_parameter = 187,           /* bind_parameter  */
  YYSYMBOL_bind_parameter_datasource_expected = 188, /* bind_parameter_datasource_expected  */
  YYSYMBOL_object_element_name = 189,      /* object_element_name  */
  YYSYMBOL_variable_name = 190             /* variable_name  */
};
typedef enum yysymbol_kind_t yysymbol_kind_t;


/* Second part of user prologue.  */
#line 53 "Aql/grammar.y"


using namespace arangodb::aql;

#define scanner parser->scanner()

/// @brief forward for lexer function defined in Aql/tokens.ll
int Aqllex(YYSTYPE*, YYLTYPE*, void*);

/// @brief register parse error (this will also abort the currently running query)
void Aqlerror(YYLTYPE* locp,
              arangodb::aql::Parser* parser,
              char const* message) {
  parser->registerParseError(TRI_ERROR_QUERY_PARSE, message, locp->first_line, locp->first_column);
}

namespace {

bool caseInsensitiveEqual(std::string_view lhs, std::string_view rhs) noexcept {
  return std::equal(lhs.begin(), lhs.end(), rhs.begin(), rhs.end(), [](char l, char r) {
    return arangodb::basics::StringUtils::tolower(l) == arangodb::basics::StringUtils::tolower(r);
  });
}

AstNode* buildShortestPathInfo(Parser* parser,
                               char const* seperator,
                               AstNode* direction,
                               AstNode* startNode,
                               AstNode* endNode,
                               AstNode* graph,
                               AstNode* options,
                               YYLTYPE const& yyloc) {
  if (!caseInsensitiveEqual(seperator, "TO")) {
    parser->registerParseError(TRI_ERROR_QUERY_PARSE, "unexpected qualifier '%s', expecting 'TO'", seperator, yyloc.first_line, yyloc.first_column);
  }
  auto infoNode = parser->ast()->createNodeArray();
  infoNode->addMember(direction);
  infoNode->addMember(startNode);
  infoNode->addMember(endNode);
  infoNode->addMember(graph);
  
  auto opts = parser->ast()->createNodeOptions(options);
  TRI_ASSERT(opts != nullptr);
  infoNode->addMember(opts);
  return infoNode;
}

void checkOutVariables(Parser* parser,
                       AstNode const* variableNamesNode,
                       size_t minVariables, size_t maxVariables,
                       char const* errorMessage,
                       YYLTYPE const& yyloc) {
  TRI_ASSERT(variableNamesNode != nullptr);
  TRI_ASSERT(variableNamesNode->type == NODE_TYPE_ARRAY);
  if (variableNamesNode->numMembers() < minVariables ||
      variableNamesNode->numMembers() > maxVariables) {
    parser->registerParseError(TRI_ERROR_QUERY_PARSE, errorMessage, yyloc.first_line, yyloc.first_column);
  }
}

void validateOptions(Parser* parser, AstNode const* node,
                     int line, int column) {
  TRI_ASSERT(node != nullptr);
  if (!node->isObject()) {
    parser->registerParseError(TRI_ERROR_QUERY_PARSE, "'OPTIONS' have to be an object", line, column);
  }
  if (!node->isConstant()) {
    parser->registerParseError(TRI_ERROR_QUERY_COMPILE_TIME_OPTIONS, "'OPTIONS' have to be known at query compile time", line, column);
  }
}

/// @brief check if any of the variables used in the INTO expression were
/// introduced by the COLLECT itself, in which case it would fail
void checkCollectVariables(Parser* parser, char const* context, 
                           AstNode const* expression,
                           int line, int column,
                           VarSet const& variablesIntroduced) {
  if (expression == nullptr) {
    return;
  }

  VarSet varsInAssignment{};
  Ast::getReferencedVariables(expression, varsInAssignment);

  for (auto const& it : varsInAssignment) {
    if (variablesIntroduced.find(it) != variablesIntroduced.end()) {
      std::string msg("use of COLLECT variable '" + it->name + "' inside same COLLECT's " + context + " expression");
      parser->registerParseError(TRI_ERROR_QUERY_VARIABLE_NAME_UNKNOWN, msg.c_str(), it->name, line, column);
      return;
    }
  }
}

/// @brief register variables in the scope
void registerAssignVariables(Parser* parser, arangodb::aql::Scopes* scopes,
                             int line, int column,
                             VarSet& variablesIntroduced,
                             AstNode const* vars) {
  size_t const n = vars->numMembers();

  for (size_t i = 0; i < n; ++i) {
    auto member = vars->getMemberUnchecked(i);

    if (member != nullptr) {
      TRI_ASSERT(member->type == NODE_TYPE_ASSIGN);
      // keep track of the variable for our assignment
      auto v = static_cast<Variable*>(member->getMember(0)->getData());
      scopes->addVariable(v);
      variablesIntroduced.emplace(v);
    }
  }
}

/// @brief validate the aggregate variables expressions
bool validateAggregates(Parser* parser, AstNode const* aggregates,
                        int line, int column) {
  VarSet variablesIntroduced{};
  VarSet varsInAssignment{};
  
  size_t const n = aggregates->numMembers();
  for (size_t i = 0; i < n; ++i) {
    auto member = aggregates->getMemberUnchecked(i);

    if (member != nullptr) {
      TRI_ASSERT(member->type == NODE_TYPE_ASSIGN);
      
      // keep track of the variable for our assignment
      auto v = static_cast<Variable*>(member->getMember(0)->getData());
      variablesIntroduced.emplace(v);

      auto func = member->getMember(1);
      if (func->type != NODE_TYPE_FCALL) {
        // aggregate expression must be a function call
        char const* error = "aggregate expression must be a function call";
        parser->registerParseError(TRI_ERROR_QUERY_INVALID_AGGREGATE_EXPRESSION, error, line, column);
        return false;
      } else {
        auto f = static_cast<arangodb::aql::Function*>(func->getData());
        if (!Aggregator::isValid(f->name)) {
          // aggregate expression must be a call to MIN|MAX|LENGTH...
          char const* error = "unknown aggregate function used";
          parser->registerParseError(TRI_ERROR_QUERY_INVALID_AGGREGATE_EXPRESSION, error, line, column);
          return false;
        }
      }
      
      // check if any of the assignment refers to a variable introduced by this very
      // same COLLECT, e.g. COLLECT aggregate x = .., y = x
      varsInAssignment.clear();
      Ast::getReferencedVariables(member->getMember(1), varsInAssignment);
      for (auto const& it : varsInAssignment) {
        if (variablesIntroduced.find(it) != variablesIntroduced.end()) {
          std::string msg("use of COLLECT variable '" + it->name + "' inside same COLLECT");
          parser->registerParseError(TRI_ERROR_QUERY_VARIABLE_NAME_UNKNOWN, msg.c_str(), it->name, line, column);
          return false;
        }
      }
    }
  }

  return true;
}


/// @brief validate the WINDOW specification
bool validateWindowSpec(Parser* parser, AstNode const* spec,
                        int line, int column) {
  bool preceding = false;
  bool following = false;
  
  size_t const n = spec->numMembers();
  if (n == 0) {
    parser->registerParseError(TRI_ERROR_QUERY_PARSE, "At least one WINDOW bound must be specified ('preceding'/'following')", line, column);
    return false;
  }
  
  for (size_t i = 0; i < n; ++i) {
    auto member = spec->getMemberUnchecked(i);

    if (member != nullptr) {
      TRI_ASSERT(member->type == NODE_TYPE_OBJECT_ELEMENT);
      bool* attr{};
      auto name = member->getString();
      if (name == "preceding") {
        attr = &preceding;
      } else if (name == "following") {
        attr = &following;
      } else  {
        char const* error = "Invalid WINDOW attribute '%s'; only \"preceding\" and \"following\" are supported";
        parser->registerParseError(TRI_ERROR_QUERY_PARSE, error, name, line, column);
        return false;
      }
      
      if (*attr) {
        char const* error = "WINDOW attribute '%s' is specified multiple times";
        parser->registerParseError(TRI_ERROR_QUERY_PARSE, error, name, line, column);
        return false;
      }
      
      // mark this attribute as "seen"
      *attr = true;
    }
  }
  return true;
}

/// @brief start a new scope for the collect
bool startCollectScope(arangodb::aql::Scopes* scopes) {
  // check if we are in the main scope
  if (scopes->type() == arangodb::aql::AQL_SCOPE_MAIN ||
      scopes->type() == arangodb::aql::AQL_SCOPE_SUBQUERY) {
    return false;
  }


  // end the active scopes
  scopes->endNested();
  // start a new scope
  scopes->start(arangodb::aql::AQL_SCOPE_COLLECT);
  return true;
}

/// @brief get the INTO variable stored in a node (may not exist)
AstNode const* getIntoVariable(Parser* parser, AstNode const* node) {
  if (node == nullptr) {
    return nullptr;
  }

  if (node->type == NODE_TYPE_VALUE) {
    // node is a string containing the variable name
    return parser->ast()->createNodeVariable(node->getStringView(), true);
  }

  // node is an array with the variable name as the first member
  TRI_ASSERT(node->type == NODE_TYPE_ARRAY);
  TRI_ASSERT(node->numMembers() == 2);

  auto v = node->getMember(0);
  TRI_ASSERT(v->type == NODE_TYPE_VALUE);
  return parser->ast()->createNodeVariable(v->getStringView(), true);
}

/// @brief get the INTO variable = expression stored in a node (may not exist)
AstNode const* getIntoExpression(AstNode const* node) {
  if (node == nullptr || node->type == NODE_TYPE_VALUE) {
    return nullptr;
  }

  // node is an array with the expression as the second member
  TRI_ASSERT(node->type == NODE_TYPE_ARRAY);
  TRI_ASSERT(node->numMembers() == 2);

  return node->getMember(1);
}

AstNode* transformOutputVariables(Parser* parser, AstNode const* names) {
  auto wrapperNode = parser->ast()->createNodeArray();
  for (size_t i = 0; i < names->numMembers(); ++i) {
    AstNode* variableNameNode = names->getMemberUnchecked(i);
    TRI_ASSERT(variableNameNode->isStringValue());
    AstNode* variableNode = parser->ast()->createNodeVariable(variableNameNode->getStringView(), true);
    wrapperNode->addMember(variableNode);
  }
  return wrapperNode;
}

} // namespace


#line 604 "Aql/grammar.cpp"


#ifdef short
# undef short
#endif

/* On compilers that do not define __PTRDIFF_MAX__ etc., make sure
   <limits.h> and (if available) <stdint.h> are included
   so that the code can choose integer types of a good width.  */

#ifndef __PTRDIFF_MAX__
# include <limits.h> /* INFRINGES ON USER NAME SPACE */
# if defined __STDC_VERSION__ && 199901 <= __STDC_VERSION__
#  include <stdint.h> /* INFRINGES ON USER NAME SPACE */
#  define YY_STDINT_H
# endif
#endif

/* Narrow types that promote to a signed type and that can represent a
   signed or unsigned integer of at least N bits.  In tables they can
   save space and decrease cache pressure.  Promoting to a signed type
   helps avoid bugs in integer arithmetic.  */

#ifdef __INT_LEAST8_MAX__
typedef __INT_LEAST8_TYPE__ yytype_int8;
#elif defined YY_STDINT_H
typedef int_least8_t yytype_int8;
#else
typedef signed char yytype_int8;
#endif

#ifdef __INT_LEAST16_MAX__
typedef __INT_LEAST16_TYPE__ yytype_int16;
#elif defined YY_STDINT_H
typedef int_least16_t yytype_int16;
#else
typedef short yytype_int16;
#endif

/* Work around bug in HP-UX 11.23, which defines these macros
   incorrectly for preprocessor constants.  This workaround can likely
   be removed in 2023, as HPE has promised support for HP-UX 11.23
   (aka HP-UX 11i v2) only through the end of 2022; see Table 2 of
   <https://h20195.www2.hpe.com/V2/getpdf.aspx/4AA4-7673ENW.pdf>.  */
#ifdef __hpux
# undef UINT_LEAST8_MAX
# undef UINT_LEAST16_MAX
# define UINT_LEAST8_MAX 255
# define UINT_LEAST16_MAX 65535
#endif

#if defined __UINT_LEAST8_MAX__ && __UINT_LEAST8_MAX__ <= __INT_MAX__
typedef __UINT_LEAST8_TYPE__ yytype_uint8;
#elif (!defined __UINT_LEAST8_MAX__ && defined YY_STDINT_H \
       && UINT_LEAST8_MAX <= INT_MAX)
typedef uint_least8_t yytype_uint8;
#elif !defined __UINT_LEAST8_MAX__ && UCHAR_MAX <= INT_MAX
typedef unsigned char yytype_uint8;
#else
typedef short yytype_uint8;
#endif

#if defined __UINT_LEAST16_MAX__ && __UINT_LEAST16_MAX__ <= __INT_MAX__
typedef __UINT_LEAST16_TYPE__ yytype_uint16;
#elif (!defined __UINT_LEAST16_MAX__ && defined YY_STDINT_H \
       && UINT_LEAST16_MAX <= INT_MAX)
typedef uint_least16_t yytype_uint16;
#elif !defined __UINT_LEAST16_MAX__ && USHRT_MAX <= INT_MAX
typedef unsigned short yytype_uint16;
#else
typedef int yytype_uint16;
#endif

#ifndef YYPTRDIFF_T
# if defined __PTRDIFF_TYPE__ && defined __PTRDIFF_MAX__
#  define YYPTRDIFF_T __PTRDIFF_TYPE__
#  define YYPTRDIFF_MAXIMUM __PTRDIFF_MAX__
# elif defined PTRDIFF_MAX
#  ifndef ptrdiff_t
#   include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  endif
#  define YYPTRDIFF_T ptrdiff_t
#  define YYPTRDIFF_MAXIMUM PTRDIFF_MAX
# else
#  define YYPTRDIFF_T long
#  define YYPTRDIFF_MAXIMUM LONG_MAX
# endif
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif defined __STDC_VERSION__ && 199901 <= __STDC_VERSION__
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned
# endif
#endif

#define YYSIZE_MAXIMUM                                  \
  YY_CAST (YYPTRDIFF_T,                                 \
           (YYPTRDIFF_MAXIMUM < YY_CAST (YYSIZE_T, -1)  \
            ? YYPTRDIFF_MAXIMUM                         \
            : YY_CAST (YYSIZE_T, -1)))

#define YYSIZEOF(X) YY_CAST (YYPTRDIFF_T, sizeof (X))


/* Stored state numbers (used for stacks). */
typedef yytype_int16 yy_state_t;

/* State numbers in computations.  */
typedef int yy_state_fast_t;

#ifndef YY_
# if defined YYENABLE_NLS && YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(Msgid) dgettext ("bison-runtime", Msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(Msgid) Msgid
# endif
#endif


#ifndef YY_ATTRIBUTE_PURE
# if defined __GNUC__ && 2 < __GNUC__ + (96 <= __GNUC_MINOR__)
#  define YY_ATTRIBUTE_PURE __attribute__ ((__pure__))
# else
#  define YY_ATTRIBUTE_PURE
# endif
#endif

#ifndef YY_ATTRIBUTE_UNUSED
# if defined __GNUC__ && 2 < __GNUC__ + (7 <= __GNUC_MINOR__)
#  define YY_ATTRIBUTE_UNUSED __attribute__ ((__unused__))
# else
#  define YY_ATTRIBUTE_UNUSED
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YY_USE(E) ((void) (E))
#else
# define YY_USE(E) /* empty */
#endif

/* Suppress an incorrect diagnostic about yylval being uninitialized.  */
#if defined __GNUC__ && ! defined __ICC && 406 <= __GNUC__ * 100 + __GNUC_MINOR__
# if __GNUC__ * 100 + __GNUC_MINOR__ < 407
#  define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN                           \
    _Pragma ("GCC diagnostic push")                                     \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")
# else
#  define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN                           \
    _Pragma ("GCC diagnostic push")                                     \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")              \
    _Pragma ("GCC diagnostic ignored \"-Wmaybe-uninitialized\"")
# endif
# define YY_IGNORE_MAYBE_UNINITIALIZED_END      \
    _Pragma ("GCC diagnostic pop")
#else
# define YY_INITIAL_VALUE(Value) Value
#endif
#ifndef YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_END
#endif
#ifndef YY_INITIAL_VALUE
# define YY_INITIAL_VALUE(Value) /* Nothing. */
#endif

#if defined __cplusplus && defined __GNUC__ && ! defined __ICC && 6 <= __GNUC__
# define YY_IGNORE_USELESS_CAST_BEGIN                          \
    _Pragma ("GCC diagnostic push")                            \
    _Pragma ("GCC diagnostic ignored \"-Wuseless-cast\"")
# define YY_IGNORE_USELESS_CAST_END            \
    _Pragma ("GCC diagnostic pop")
#endif
#ifndef YY_IGNORE_USELESS_CAST_BEGIN
# define YY_IGNORE_USELESS_CAST_BEGIN
# define YY_IGNORE_USELESS_CAST_END
#endif


#define YY_ASSERT(E) ((void) (0 && (E)))

#if 1

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined EXIT_SUCCESS
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
      /* Use EXIT_SUCCESS as a witness for stdlib.h.  */
#     ifndef EXIT_SUCCESS
#      define EXIT_SUCCESS 0
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's 'empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined EXIT_SUCCESS \
       && ! ((defined YYMALLOC || defined malloc) \
             && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef EXIT_SUCCESS
#    define EXIT_SUCCESS 0
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined EXIT_SUCCESS
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined EXIT_SUCCESS
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* 1 */

#if (! defined yyoverflow \
     && (! defined __cplusplus \
         || (defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL \
             && defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yy_state_t yyss_alloc;
  YYSTYPE yyvs_alloc;
  YYLTYPE yyls_alloc;
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (YYSIZEOF (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (YYSIZEOF (yy_state_t) + YYSIZEOF (YYSTYPE) \
             + YYSIZEOF (YYLTYPE)) \
      + 2 * YYSTACK_GAP_MAXIMUM)

# define YYCOPY_NEEDED 1

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack_alloc, Stack)                           \
    do                                                                  \
      {                                                                 \
        YYPTRDIFF_T yynewbytes;                                         \
        YYCOPY (&yyptr->Stack_alloc, Stack, yysize);                    \
        Stack = &yyptr->Stack_alloc;                                    \
        yynewbytes = yystacksize * YYSIZEOF (*Stack) + YYSTACK_GAP_MAXIMUM; \
        yyptr += yynewbytes / YYSIZEOF (*yyptr);                        \
      }                                                                 \
    while (0)

#endif

#if defined YYCOPY_NEEDED && YYCOPY_NEEDED
/* Copy COUNT objects from SRC to DST.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(Dst, Src, Count) \
      __builtin_memcpy (Dst, Src, YY_CAST (YYSIZE_T, (Count)) * sizeof (*(Src)))
#  else
#   define YYCOPY(Dst, Src, Count)              \
      do                                        \
        {                                       \
          YYPTRDIFF_T yyi;                      \
          for (yyi = 0; yyi < (Count); yyi++)   \
            (Dst)[yyi] = (Src)[yyi];            \
        }                                       \
      while (0)
#  endif
# endif
#endif /* !YYCOPY_NEEDED */

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  7
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   1910

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  80
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  111
/* YYNRULES -- Number of rules.  */
#define YYNRULES  267
/* YYNSTATES -- Number of states.  */
#define YYNSTATES  460

/* YYMAXUTOK -- Last valid token kind.  */
#define YYMAXUTOK   333


/* YYTRANSLATE(TOKEN-NUM) -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex, with out-of-bounds checking.  */
#define YYTRANSLATE(YYX)                                \
  (0 <= (YYX) && (YYX) <= YYMAXUTOK                     \
   ? YY_CAST (yysymbol_kind_t, yytranslate[YYX])        \
   : YYSYMBOL_YYUNDEF)

/* YYTRANSLATE[TOKEN-NUM] -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex.  */
static const yytype_int8 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,    79,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78
};

#if YYDEBUG
/* YYRLINE[YYN] -- Source line where rule number YYN was defined.  */
static const yytype_int16 yyrline[] =
{
       0,   511,   511,   517,   527,   530,   536,   540,   544,   551,
     553,   553,   565,   570,   575,   577,   580,   583,   586,   589,
     595,   597,   602,   604,   606,   608,   610,   612,   614,   616,
     618,   620,   622,   624,   629,   636,   643,   649,   656,   680,
     703,   716,   722,   728,   734,   734,   785,   785,   819,   831,
     843,   858,   866,   871,   873,   878,   885,   896,   896,   907,
     917,   930,   954,  1010,  1029,  1060,  1062,  1067,  1074,  1077,
    1080,  1089,  1102,  1118,  1118,  1133,  1133,  1143,  1145,  1150,
    1157,  1157,  1169,  1169,  1180,  1183,  1189,  1195,  1198,  1201,
    1204,  1210,  1215,  1222,  1237,  1255,  1263,  1266,  1272,  1282,
    1292,  1300,  1311,  1316,  1324,  1335,  1340,  1343,  1349,  1353,
    1349,  1423,  1426,  1429,  1435,  1435,  1445,  1451,  1454,  1457,
    1460,  1463,  1466,  1472,  1475,  1488,  1488,  1497,  1497,  1507,
    1510,  1513,  1519,  1522,  1525,  1528,  1531,  1534,  1537,  1540,
    1543,  1546,  1549,  1552,  1555,  1558,  1561,  1564,  1571,  1578,
    1584,  1590,  1596,  1603,  1606,  1609,  1612,  1615,  1618,  1621,
    1624,  1627,  1631,  1635,  1639,  1643,  1647,  1651,  1655,  1662,
    1665,  1671,  1673,  1678,  1681,  1681,  1697,  1700,  1706,  1709,
    1715,  1715,  1724,  1726,  1728,  1733,  1735,  1740,  1746,  1749,
    1774,  1794,  1797,  1812,  1812,  1821,  1823,  1825,  1830,  1832,
    1837,  1853,  1857,  1867,  1874,  1877,  1883,  1886,  1892,  1895,
    1899,  1903,  1907,  1915,  1918,  1921,  1927,  1930,  1936,  1939,
    1942,  1946,  1952,  1956,  1963,  1969,  1969,  1978,  1982,  1986,
    1995,  1998,  2001,  2007,  2010,  2016,  2048,  2051,  2054,  2058,
    2067,  2067,  2080,  2095,  2108,  2121,  2121,  2161,  2161,  2212,
    2215,  2221,  2225,  2232,  2235,  2238,  2241,  2244,  2250,  2255,
    2260,  2271,  2279,  2286,  2294,  2301,  2304,  2309
};
#endif

/** Accessing symbol of state STATE.  */
#define YY_ACCESSING_SYMBOL(State) YY_CAST (yysymbol_kind_t, yystos[State])

#if 1
/* The user-facing name of the symbol whose (internal) number is
   YYSYMBOL.  No bounds checking.  */
static const char *yysymbol_name (yysymbol_kind_t yysymbol) YY_ATTRIBUTE_UNUSED;

/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "\"end of query string\"", "error", "\"invalid token\"",
  "\"FOR declaration\"", "\"LET declaration\"", "\"FILTER declaration\"",
  "\"RETURN declaration\"", "\"COLLECT declaration\"",
  "\"SORT declaration\"", "\"LIMIT declaration\"",
  "\"WINDOW declaration\"", "\"ASC keyword\"", "\"DESC keyword\"",
  "\"IN keyword\"", "\"WITH keyword\"", "\"INTO keyword\"",
  "\"AGGREGATE keyword\"", "\"GRAPH keyword\"",
  "\"SHORTEST_PATH keyword\"", "\"K_SHORTEST_PATHS keyword\"",
  "\"K_PATHS keyword\"", "\"DISTINCT modifier\"", "\"REMOVE command\"",
  "\"INSERT command\"", "\"UPDATE command\"", "\"REPLACE command\"",
  "\"UPSERT command\"", "\"null\"", "\"true\"", "\"false\"",
  "\"identifier\"", "\"quoted string\"", "\"integer number\"",
  "\"number\"", "\"bind parameter\"", "\"bind data source parameter\"",
  "\"assignment\"", "\"not operator\"", "\"and operator\"",
  "\"or operator\"", "\"not in operator\"", "\"~= operator\"",
  "\"~! operator\"", "\"== operator\"", "\"!= operator\"",
  "\"< operator\"", "\"> operator\"", "\"<= operator\"", "\">= operator\"",
  "\"like operator\"", "\"+ operator\"", "\"- operator\"",
  "\"* operator\"", "\"/ operator\"", "\"% operator\"", "\"?\"", "\":\"",
  "\"::\"", "\"..\"", "\",\"", "\"(\"", "\")\"", "\"{\"", "\"}\"", "\"[\"",
  "\"]\"", "\"outbound modifier\"", "\"inbound modifier\"",
  "\"any modifier\"", "\"all modifier\"", "\"none modifier\"",
  "\"at least modifier\"", "UMINUS", "UPLUS", "UNEGATION", "FUNCCALL",
  "REFERENCE", "INDEXED", "EXPANSION", "'.'", "$accept",
  "optional_prune_variable", "with_collection", "with_collection_list",
  "optional_with", "$@1", "queryStart", "query", "final_statement",
  "optional_statement_block_statements", "statement_block_statement",
  "more_output_variables", "for_output_variables", "prune_and_options",
  "traversal_graph_info", "shortest_path_graph_info",
  "k_shortest_paths_graph_info", "k_paths_graph_info", "for_statement",
  "$@2", "$@3", "filter_statement", "let_statement", "let_list",
  "let_element", "count_into", "collect_variable_list", "$@4",
  "collect_statement", "collect_list", "collect_element",
  "collect_optional_into", "variable_list", "keep", "$@5", "aggregate",
  "$@6", "aggregate_list", "aggregate_element", "aggregate_function_call",
  "$@7", "sort_statement", "$@8", "sort_list", "sort_element",
  "sort_direction", "limit_statement", "window_statement",
  "return_statement", "in_or_into_collection", "remove_statement",
  "insert_statement", "update_parameters", "update_statement",
  "replace_parameters", "replace_statement", "update_or_replace",
  "upsert_statement", "$@9", "$@10", "quantifier", "distinct_expression",
  "$@11", "expression", "function_name", "function_call", "$@12", "$@13",
  "operator_unary", "operator_binary", "operator_ternary",
  "optional_function_call_arguments", "expression_or_query", "$@14",
  "function_arguments_list", "compound_value", "array", "$@15",
  "optional_array_elements", "array_elements_list", "array_element",
  "for_options", "options", "object", "$@16", "optional_object_elements",
  "object_elements_list", "object_element", "array_filter_operator",
  "array_map_operator", "optional_array_filter", "optional_array_limit",
  "optional_array_return", "graph_collection", "graph_collection_list",
  "graph_subject", "$@17", "graph_direction", "graph_direction_steps",
  "reference", "$@18", "$@19", "$@20", "simple_value", "numeric_value",
  "value_literal", "in_or_into_collection_name", "bind_parameter",
  "bind_parameter_datasource_expected", "object_element_name",
  "variable_name", YY_NULLPTR
};

static const char *
yysymbol_name (yysymbol_kind_t yysymbol)
{
  return yytname[yysymbol];
}
#endif

#define YYPACT_NINF (-398)

#define yypact_value_is_default(Yyn) \
  ((Yyn) == YYPACT_NINF)

#define YYTABLE_NINF (-268)

#define yytable_value_is_error(Yyn) \
  0

/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
   STATE-NUM.  */
static const yytype_int16 yypact[] =
{
      18,  -398,  -398,    40,   100,  -398,   253,  -398,  -398,  -398,
    -398,  -398,    -4,  -398,    16,    16,  1770,  1576,   122,  -398,
    1770,  1770,  1770,  1770,  1770,  1770,  -398,  -398,  -398,  -398,
    -398,  -398,   180,  -398,  -398,  -398,  -398,  -398,    13,    25,
      36,    64,    65,   100,  -398,  -398,     0,    58,  -398,    22,
    -398,    49,  -398,  -398,  -398,   -19,  -398,  -398,  -398,  -398,
    -398,  1770,    38,  1770,  1770,  1770,  -398,  -398,  1386,     9,
    -398,  -398,  -398,  -398,  -398,  -398,  -398,   -25,  -398,  -398,
    -398,  -398,  -398,  1386,    69,  -398,    72,    16,   107,  1770,
     782,   825,   131,   869,   869,  -398,   602,  -398,   648,  1770,
      16,    72,   118,   107,  -398,    16,  1614,    16,  1770,  -398,
    -398,  -398,  -398,   912,  -398,     3,  1770,  1770,     2,  1770,
    1770,  1770,  1770,  1770,  1770,  1770,  1770,  1770,  1770,  1770,
    1770,  1770,  1770,  1770,  1770,  1770,  1694,  1770,  -398,  -398,
    -398,    91,   120,   128,  -398,  1656,   177,  1770,   144,    16,
     108,  -398,   130,  -398,   143,    72,   146,  -398,   513,  1770,
     108,  -398,  1808,    97,    72,    72,  1770,    72,  1770,    72,
    1386,   173,  -398,   108,    72,  -398,    72,  -398,  -398,  -398,
    -398,  -398,  -398,  -398,  -398,   691,   205,  1516,  -398,  1386,
    1732,  -398,   163,   171,  -398,   186,  1770,   181,   175,  -398,
     198,  1386,   190,   206,  -398,   357,  1770,  1770,  1770,  1471,
    1429,   357,  1542,  1542,  1542,  1542,   103,   103,   103,   103,
    1542,   214,   214,  -398,  -398,  -398,  1770,   955,   199,  1770,
    1770,  1770,  1770,  1770,  1770,  1770,  1770,  1770,  -398,  1732,
    -398,  -398,   999,   215,   219,  -398,  -398,  1386,    16,   221,
    -398,   245,  -398,    16,  1770,  -398,  1770,  -398,  -398,  -398,
    -398,  -398,  -398,  1386,   131,   462,   178,   473,  -398,  -398,
    -398,  -398,  -398,  -398,  -398,   869,  -398,   869,  -398,   264,
    1770,    16,  -398,  -398,   259,   129,   260,  -398,  1770,  1770,
    1770,   556,  1386,   230,  -398,  -398,   233,  -398,  1770,  1042,
    -398,     3,  1770,  -398,  1770,  1542,  1542,  1542,  1386,  1770,
    1085,   357,   357,  1542,  1542,   103,   103,   103,   103,   235,
    -398,  -398,   390,  -398,   390,  -398,    16,   267,  -398,  1386,
    -398,  -398,    72,    72,  1770,  1386,   239,  -398,  1846,  -398,
    1770,  -398,  1128,  1171,  1214,   110,  -398,   240,  -398,   213,
    -398,  -398,  -398,  1770,  1386,   238,  -398,  1386,  -398,  1386,
     185,  -398,  1770,   241,   295,   290,   237,   296,  -398,  -398,
    -398,    19,  -398,  -398,   739,    16,    34,   274,  1386,   271,
    1257,  1770,  1770,  1770,  -398,  -398,  -398,  -398,  -398,  -398,
    -398,  1770,  1770,  1770,  1770,  1770,  1770,  1770,  1770,  1770,
    1386,  1770,  1770,  1770,  -398,  1770,   303,  -398,  -398,  -398,
    1770,  -398,   108,  1770,  1770,   556,   556,   556,    -6,  1386,
     357,   357,  1542,  1542,   103,   103,   103,   103,  1300,  1386,
    1386,  1343,  1770,   246,  1732,   869,  -398,  1386,  1386,    72,
      72,    72,  -398,   251,   307,  1770,  1386,  -398,   252,    72,
    -398,  -398,  -398,    -6,  1770,  1386,  -398,  -398,  -398,  1386
};

/* YYDEFACT[STATE-NUM] -- Default reduction number in state STATE-NUM.
   Performed when YYTABLE does not specify something else to do.  Zero
   means the default is an error.  */
static const yytype_int16 yydefact[] =
{
       9,    10,    20,     0,     0,    12,     0,     1,     4,   264,
     263,     6,    11,     5,     0,     0,     0,     0,    57,    82,
       0,     0,     0,     0,     0,     0,   108,    13,    21,    22,
      24,    23,    68,    25,    26,    27,    28,    14,    29,    30,
      31,    32,    33,     0,     8,   267,    36,     0,    34,    52,
      53,     0,   255,   256,   257,   235,   253,   251,   252,   262,
     261,     0,     0,     0,     0,   240,   193,   180,    51,     0,
     238,   117,   118,   119,   236,   178,   179,   121,   254,   120,
     237,   114,    95,   116,     0,    75,   191,     0,    68,     0,
      91,     0,   179,     0,     0,   102,     0,   105,     0,     0,
       0,   191,   191,    68,     7,     0,     0,     0,     0,   131,
     127,   129,   130,     0,    20,   195,   182,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   112,   111,
     113,     0,     0,     0,   125,     0,     0,     0,     0,     0,
       0,    59,    58,    65,     0,   191,    83,    84,    87,     0,
       0,    93,     0,     0,   191,   191,     0,   191,     0,   191,
     109,    69,    60,    73,   191,    63,   191,    35,   230,   231,
     232,    46,    48,    49,    50,    44,   233,     0,    54,    55,
     174,   239,     0,   200,   266,     0,     0,     0,   196,   198,
       0,   187,     0,   183,   185,   145,     0,     0,     0,   133,
     132,   146,   151,   152,   139,   140,   141,   142,   143,   144,
     150,   134,   135,   136,   137,   138,     0,     0,   122,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   124,   174,
     206,   204,     0,   245,   247,   242,   243,   115,     0,    76,
      77,     0,   192,     0,     0,    61,     0,    88,    89,    86,
      90,   249,   250,    92,     0,   235,   253,   261,    96,   258,
     259,   260,    97,    98,    99,     0,   100,     0,   103,     0,
       0,     0,    64,    62,    37,   232,   188,   234,     0,     0,
       0,     0,   173,     0,   176,    20,   172,   241,     0,     0,
     194,   197,     0,   181,   184,   148,   149,   147,   170,     0,
       0,   159,   160,   153,   154,   155,   156,   157,   158,     0,
     244,   205,   208,   207,   208,    56,     0,     0,    66,    67,
      85,    94,   191,   191,     0,    70,    74,    71,     0,    47,
       0,    45,     0,     0,     0,     0,   218,   224,    40,     0,
     219,   128,   175,   174,   202,     0,   199,   201,   186,   169,
       0,   126,     0,     0,     0,     0,     0,   213,    78,   123,
      79,     0,   101,   104,     0,     0,   235,    38,     2,     0,
     189,     0,     0,     0,   229,   228,   227,   225,   220,   221,
     177,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     209,     0,     0,     0,   246,     0,   216,    80,   106,   107,
       0,    72,     0,     0,     0,     0,     0,     0,     0,   203,
     167,   168,   161,   162,   163,   164,   165,   166,     0,   210,
     212,   214,     0,     0,   174,     0,    39,     3,   190,   191,
     191,   191,   222,   226,     0,     0,   217,   248,     0,   191,
      41,    42,    43,     0,     0,   215,    81,   110,   223,   211
};

/* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
    -398,  -398,    10,  -398,  -398,  -398,  -398,  -102,  -398,  -398,
    -398,  -398,  -398,  -398,  -398,  -398,  -398,  -398,  -398,  -398,
    -398,  -398,  -398,  -398,   208,   284,  -398,  -398,  -398,  -398,
      66,   -46,  -398,  -398,  -398,   -29,  -398,  -398,    -9,  -398,
    -398,  -398,  -398,  -398,    67,  -398,  -398,  -398,  -398,   -78,
    -398,  -398,  -398,  -398,  -398,  -398,  -398,  -398,  -398,  -398,
    -272,  -398,  -398,   -16,    -7,  -398,  -398,  -398,  -398,  -398,
    -398,  -228,   -32,  -398,  -398,  -398,  -398,  -398,  -398,  -398,
      21,  -398,   -87,   -11,  -398,  -398,  -398,    46,  -398,  -398,
      26,  -398,  -398,  -397,  -398,  -132,  -398,   -89,  -398,  -398,
    -398,  -398,  -398,  -398,  -398,   191,   188,  -123,    15,  -398,
     -12
};

/* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
       0,   377,    11,    12,     2,     4,     3,     5,    27,     6,
      28,    46,    47,   339,   181,   182,   183,   184,    29,   286,
     284,    30,    31,    49,    50,    86,    32,    87,    33,   152,
     153,   102,   336,   174,   281,    88,   149,   249,   250,   370,
     434,    34,    89,   156,   157,   259,    35,    36,    37,   164,
      38,    39,    95,    40,    97,    41,   410,    42,    99,   279,
     142,    82,   147,   292,    69,    70,   239,   190,    71,    72,
      73,   293,   294,   295,   296,    74,    75,   116,   202,   203,
     204,   341,   151,    76,   115,   197,   198,   199,   243,   244,
     366,   406,   433,   347,   443,   348,   418,   349,   187,    77,
     114,   322,   324,   260,    78,    79,   268,    80,   350,   200,
      51
};

/* YYTABLE[YYPACT[STATE-NUM]] -- What to do in state STATE-NUM.  If
   positive, shift that token.  If negative, reduce the rule whose
   number is the opposite.  If YYTABLE_NINF, syntax error.  */
static const yytype_int16 yytable[] =
{
      68,    83,    48,   103,    90,    91,    93,    94,    96,    98,
      92,   319,   192,   -15,   172,   175,   165,   186,   167,    13,
     169,   442,    44,   246,   346,   -16,     8,    13,     9,    10,
       9,    10,     1,   193,   194,   262,   -17,   195,  -123,   145,
       7,  -123,   155,   206,   207,   109,    45,   111,   112,   113,
     364,   208,   364,   104,   146,    43,   458,   176,    13,   105,
     178,   179,   180,   161,   -18,   -19,   143,   196,   255,   144,
    -267,   106,   -15,   158,   -15,   154,   143,   273,   274,   407,
     276,   107,   278,   170,   -16,   108,   -16,   282,   171,   283,
     185,  -123,   189,   177,  -123,   -17,   287,   -17,   110,   148,
     201,   205,   150,   209,   210,   211,   212,   213,   214,   215,
     216,   217,   218,   219,   220,   221,   222,   223,   224,   225,
     227,   228,   100,   -18,   -19,   -18,   -19,   269,   270,   242,
       8,   247,   271,   230,     9,    10,    84,   251,    85,   252,
     384,   385,  -112,   263,    59,    60,   205,    85,   173,   264,
     275,   229,   277,   131,   132,   133,   134,   135,   238,   248,
     231,   137,   252,   232,   233,   234,   235,   236,   237,  -112,
      66,   291,  -112,  -112,  -112,  -112,  -112,  -112,  -259,   254,
     299,  -259,  -259,  -259,  -259,  -259,  -259,  -259,  -259,   253,
     305,   306,   307,   352,    84,   100,    85,   332,   392,   333,
    -259,  -259,  -259,  -259,  -259,   256,   448,   245,  -259,   280,
     308,    59,    60,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   386,   288,   297,   393,   389,  -265,   394,   395,
     396,   397,   398,   399,   301,   331,   325,  -259,   329,  -259,
     158,   154,   298,   388,   300,   372,   373,    59,    60,   131,
     132,   133,   134,   135,   302,   303,    14,    15,    16,    17,
      18,    19,    20,    21,   335,   304,   133,   134,   135,   337,
     321,   323,   342,   343,   344,    22,    23,    24,    25,    26,
     326,   327,   354,   439,   440,   441,   357,   334,   201,   338,
     340,   351,   353,   359,   391,   403,   361,   369,   375,   387,
     402,   401,   404,   117,   412,   405,   365,   413,   365,   432,
     453,   447,   454,   456,   251,   188,   101,   368,   374,   328,
     371,   390,   378,   330,   380,   358,   379,   118,   119,   120,
     121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
     131,   132,   133,   134,   135,   136,   400,   356,   137,   261,
     367,   272,   450,   451,   452,     0,     0,   449,   138,   139,
     140,   141,   457,   411,     0,   415,   416,   417,     0,     0,
       0,     0,     0,     0,     0,   419,   420,   421,   422,   423,
     424,   425,   426,   427,     0,   428,   429,   430,     0,   431,
       0,     0,     0,     0,   435,   362,     0,   437,   438,     0,
       0,   436,   126,   127,   128,   129,     0,   131,   132,   133,
     134,   135,     0,     0,     0,   137,   446,    52,    53,    54,
      55,    56,    57,    58,    59,    60,     0,    61,     0,   455,
       0,     0,     0,     0,     0,     0,     0,     0,   459,    62,
      63,    64,     0,     0,     0,     0,     0,     0,     0,     0,
      65,     0,    66,     0,    67,     0,     0,     0,   138,   139,
     140,   363,  -258,     0,     0,  -258,  -258,  -258,  -258,  -258,
    -258,  -258,  -258,  -260,     0,     0,  -260,  -260,  -260,  -260,
    -260,  -260,  -260,  -260,  -258,  -258,  -258,  -258,  -258,     0,
       0,     0,  -258,     0,     0,  -260,  -260,  -260,  -260,  -260,
       0,     0,     0,  -260,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  -123,
       0,  -258,  -123,  -258,   257,   258,   117,     0,     0,     0,
       0,     0,  -260,     0,  -260,     0,     0,     0,     0,     0,
      52,    53,    54,     0,    56,    57,    58,    59,    60,     0,
     118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
     128,   129,   130,   131,   132,   133,   134,   135,   136,   117,
       0,   137,     0,   345,     0,     0,     0,     0,     0,     0,
       0,   138,   139,   140,   141,     0,   346,     0,     0,     0,
       9,    10,     0,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,     0,     0,   137,   162,   166,   163,     0,     0,
       0,     0,   178,   179,   285,   139,   140,   141,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   118,
     119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
     129,   130,   131,   132,   133,   134,   135,   136,     0,     0,
     137,   162,   168,   163,     0,     0,     0,     0,     0,     0,
     138,   139,   140,   141,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   118,   119,   120,   121,   122,
     123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
     133,   134,   135,   136,   117,     0,   137,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   138,   139,   140,   141,
       0,     0,     0,     0,     0,     0,     0,     0,   118,   119,
     120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
     130,   131,   132,   133,   134,   135,   136,     0,     0,   137,
       0,     0,   117,     0,     0,     0,     0,   178,   179,   285,
     139,   140,   141,   408,   409,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   118,   119,   120,   121,
     122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
     132,   133,   134,   135,   136,   117,     0,   137,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   138,   139,   140,
     141,     0,     0,     0,     0,     0,     0,     0,     0,   118,
     119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
     129,   130,   131,   132,   133,   134,   135,   136,   117,   160,
     137,   159,     0,     0,     0,     0,     0,     0,     0,     0,
     138,   139,   140,   141,     0,     0,     0,     0,     0,     0,
       0,     0,   118,   119,   120,   121,   122,   123,   124,   125,
     126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
     136,     0,   162,   137,   163,     0,     0,     0,     0,     0,
       0,     0,     0,   138,   139,   140,   141,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   118,   119,   120,   121,
     122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
     132,   133,   134,   135,   136,   117,     0,   137,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   138,   139,   140,
     141,     0,     0,     0,     0,     0,     0,     0,     0,   118,
     119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
     129,   130,   131,   132,   133,   134,   135,   136,   117,     0,
     137,     0,     0,   191,     0,     0,     0,     0,     0,     0,
     138,   139,   140,   141,     0,     0,     0,     0,     0,     0,
       0,     0,   118,   119,   120,   121,   122,   123,   124,   125,
     126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
     136,   309,   117,   137,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   138,   139,   140,   141,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   118,   119,   120,   121,
     122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
     132,   133,   134,   135,   136,   117,     0,   137,     0,     0,
       0,     0,     0,     0,   320,     0,     0,   138,   139,   140,
     141,     0,     0,     0,     0,     0,     0,     0,     0,   118,
     119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
     129,   130,   131,   132,   133,   134,   135,   136,   117,     0,
     137,     0,     0,     0,     0,     0,     0,   355,     0,     0,
     138,   139,   140,   141,     0,     0,     0,     0,     0,     0,
       0,     0,   118,   119,   120,   121,   122,   123,   124,   125,
     126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
     136,   117,     0,   137,     0,     0,   360,     0,     0,     0,
       0,     0,     0,   138,   139,   140,   141,     0,   381,     0,
       0,     0,     0,     0,     0,   118,   119,   120,   121,   122,
     123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
     133,   134,   135,   136,   117,     0,   137,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   138,   139,   140,   141,
       0,   382,     0,     0,     0,     0,     0,     0,   118,   119,
     120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
     130,   131,   132,   133,   134,   135,   136,   117,     0,   137,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   138,
     139,   140,   141,     0,   383,     0,     0,     0,     0,     0,
       0,   118,   119,   120,   121,   122,   123,   124,   125,   126,
     127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
     117,     0,   137,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   138,   139,   140,   141,     0,   414,     0,     0,
       0,     0,     0,     0,   118,   119,   120,   121,   122,   123,
     124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
     134,   135,   136,   117,     0,   137,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   138,   139,   140,   141,     0,
       0,     0,     0,     0,     0,     0,     0,   118,   119,   120,
     121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
     131,   132,   133,   134,   135,   136,   117,     0,   137,     0,
       0,   444,     0,     0,     0,     0,     0,     0,   138,   139,
     140,   141,     0,     0,     0,     0,     0,     0,     0,     0,
     118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
     128,   129,   130,   131,   132,   133,   134,   135,   136,   117,
       0,   137,   445,     0,     0,     0,     0,     0,     0,     0,
       0,   138,   139,   140,   141,     0,     0,     0,     0,     0,
       0,     0,     0,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   117,     0,   137,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   138,   139,   140,   141,     0,     0,
       0,     0,     0,     0,     0,     0,   118,   119,     0,   121,
     122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
     132,   133,   134,   135,   117,     0,     0,   137,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   138,   139,   140,
     141,     0,     0,     0,     0,     0,     0,     0,   118,     0,
       0,   121,   122,   123,   124,   125,   126,   127,   128,   129,
     130,   131,   132,   133,   134,   135,     0,     0,     0,   137,
       0,     0,     0,     0,     0,   289,   290,     0,     0,   138,
     139,   140,   141,    52,    53,    54,    55,    56,    57,    58,
      59,    60,     0,    61,     0,   117,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    62,    63,    64,     0,     0,
       0,     0,     0,     0,     0,     0,    65,     0,    66,   118,
      67,     0,   121,     0,     0,     0,     0,   126,   127,   128,
     129,     0,   131,   132,   133,   134,   135,    81,     0,     0,
     137,     0,     0,    52,    53,    54,    55,    56,    57,    58,
      59,    60,     0,    61,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    62,    63,    64,     0,     0,
       0,     0,     0,     0,     0,     0,    65,     0,    66,     0,
      67,    52,    53,    54,    55,    56,    57,    58,    59,    60,
       0,    61,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    62,    63,    64,     0,     0,     0,     0,
       0,     0,     0,     0,    65,     0,    66,     0,    67,     0,
     178,   179,   180,    52,    53,    54,    55,    56,    57,    58,
      59,    60,     0,    61,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    62,    63,    64,   240,     0,
       0,   241,     0,     0,     0,     0,    65,     0,    66,     0,
      67,    52,    53,    54,    55,    56,    57,    58,    59,    60,
       0,    61,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    62,    63,    64,     0,     0,     0,     0,
     226,     0,     0,     0,    65,     0,    66,     0,    67,    52,
      53,    54,    55,    56,    57,    58,    59,    60,     0,    61,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    62,    63,    64,     0,     0,     0,     0,     0,     0,
       0,     0,    65,  -171,    66,     0,    67,    52,    53,    54,
      55,    56,    57,    58,    59,    60,     0,    61,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    62,
      63,    64,     0,     0,     0,     0,     0,     0,     0,     0,
      65,     0,    66,     0,    67,    52,    53,    54,   265,   266,
      57,    58,    59,   267,     0,    61,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    62,    63,    64,
       0,     0,     0,     0,     0,     0,     0,     0,    65,     0,
      66,     0,    67,    52,    53,    54,   376,    56,    57,    58,
      59,    60,     0,    61,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    62,    63,    64,     0,     0,
       0,     0,     0,     0,     0,     0,    65,     0,    66,     0,
      67
};

static const yytype_int16 yycheck[] =
{
      16,    17,    14,    32,    20,    21,    22,    23,    24,    25,
      21,   239,   114,     0,   101,   102,    94,   106,    96,     4,
      98,   418,    12,   146,    30,     0,    30,    12,    34,    35,
      34,    35,    14,    30,    31,   158,     0,    34,    57,    64,
       0,    60,    88,    41,    42,    61,    30,    63,    64,    65,
     322,    49,   324,    43,    79,    59,   453,   103,    43,    59,
      66,    67,    68,    92,     0,     0,    57,    64,   155,    60,
      36,    13,    59,    89,    61,    87,    57,   164,   165,    60,
     167,    59,   169,    99,    59,    36,    61,   174,   100,   176,
     106,    57,   108,   105,    60,    59,   185,    61,    60,    30,
     116,   117,    30,   119,   120,   121,   122,   123,   124,   125,
     126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
     136,   137,    15,    59,    59,    61,    61,    30,    31,   145,
      30,   147,    35,    13,    34,    35,    14,   149,    16,   150,
      30,    31,    13,   159,    34,    35,   162,    16,    30,   160,
     166,    60,   168,    50,    51,    52,    53,    54,    30,    15,
      40,    58,   173,    43,    44,    45,    46,    47,    48,    40,
      62,   187,    43,    44,    45,    46,    47,    48,     0,    36,
     196,     3,     4,     5,     6,     7,     8,     9,    10,    59,
     206,   207,   208,   295,    14,    15,    16,   275,    13,   277,
      22,    23,    24,    25,    26,    59,   434,    30,    30,    36,
     226,    34,    35,   229,   230,   231,   232,   233,   234,   235,
     236,   237,   345,    18,    61,    40,   349,    56,    43,    44,
      45,    46,    47,    48,    59,   264,   248,    59,   254,    61,
     256,   253,    56,    30,    63,   332,   333,    34,    35,    50,
      51,    52,    53,    54,    56,    65,     3,     4,     5,     6,
       7,     8,     9,    10,   280,    59,    52,    53,    54,   281,
      55,    52,   288,   289,   290,    22,    23,    24,    25,    26,
      59,    36,   298,   415,   416,   417,   302,    23,   304,    30,
      30,    61,    59,   309,    56,     5,    61,    30,    59,    59,
       5,    60,    65,    13,    30,     9,   322,    36,   324,     6,
      59,    65,     5,    61,   326,   107,    32,   326,   334,   253,
     327,   353,   338,   256,   340,   304,   338,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,   362,   301,    58,   158,
     324,   163,   439,   440,   441,    -1,    -1,   435,    68,    69,
      70,    71,   449,   375,    -1,   381,   382,   383,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   391,   392,   393,   394,   395,
     396,   397,   398,   399,    -1,   401,   402,   403,    -1,   405,
      -1,    -1,    -1,    -1,   410,     5,    -1,   413,   414,    -1,
      -1,   412,    45,    46,    47,    48,    -1,    50,    51,    52,
      53,    54,    -1,    -1,    -1,    58,   432,    27,    28,    29,
      30,    31,    32,    33,    34,    35,    -1,    37,    -1,   445,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   454,    49,
      50,    51,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      60,    -1,    62,    -1,    64,    -1,    -1,    -1,    68,    69,
      70,    71,     0,    -1,    -1,     3,     4,     5,     6,     7,
       8,     9,    10,     0,    -1,    -1,     3,     4,     5,     6,
       7,     8,     9,    10,    22,    23,    24,    25,    26,    -1,
      -1,    -1,    30,    -1,    -1,    22,    23,    24,    25,    26,
      -1,    -1,    -1,    30,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    57,
      -1,    59,    60,    61,    11,    12,    13,    -1,    -1,    -1,
      -1,    -1,    59,    -1,    61,    -1,    -1,    -1,    -1,    -1,
      27,    28,    29,    -1,    31,    32,    33,    34,    35,    -1,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    13,
      -1,    58,    -1,    17,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    68,    69,    70,    71,    -1,    30,    -1,    -1,    -1,
      34,    35,    -1,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    -1,    -1,    58,    13,    14,    15,    -1,    -1,
      -1,    -1,    66,    67,    68,    69,    70,    71,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    -1,    -1,
      58,    13,    14,    15,    -1,    -1,    -1,    -1,    -1,    -1,
      68,    69,    70,    71,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    13,    -1,    58,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    68,    69,    70,    71,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    -1,    -1,    58,
      -1,    -1,    13,    -1,    -1,    -1,    -1,    66,    67,    68,
      69,    70,    71,    24,    25,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    13,    -1,    58,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,    69,    70,
      71,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    13,    14,
      58,    59,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      68,    69,    70,    71,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    -1,    13,    58,    15,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    68,    69,    70,    71,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    13,    -1,    58,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,    69,    70,
      71,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    13,    -1,
      58,    -1,    -1,    61,    -1,    -1,    -1,    -1,    -1,    -1,
      68,    69,    70,    71,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    13,    58,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    68,    69,    70,    71,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    13,    -1,    58,    -1,    -1,
      -1,    -1,    -1,    -1,    65,    -1,    -1,    68,    69,    70,
      71,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    13,    -1,
      58,    -1,    -1,    -1,    -1,    -1,    -1,    65,    -1,    -1,
      68,    69,    70,    71,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    13,    -1,    58,    -1,    -1,    61,    -1,    -1,    -1,
      -1,    -1,    -1,    68,    69,    70,    71,    -1,    30,    -1,
      -1,    -1,    -1,    -1,    -1,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    13,    -1,    58,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    68,    69,    70,    71,
      -1,    30,    -1,    -1,    -1,    -1,    -1,    -1,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    13,    -1,    58,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,
      69,    70,    71,    -1,    30,    -1,    -1,    -1,    -1,    -1,
      -1,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      13,    -1,    58,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    68,    69,    70,    71,    -1,    30,    -1,    -1,
      -1,    -1,    -1,    -1,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    13,    -1,    58,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    68,    69,    70,    71,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    13,    -1,    58,    -1,
      -1,    61,    -1,    -1,    -1,    -1,    -1,    -1,    68,    69,
      70,    71,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    13,
      -1,    58,    59,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    68,    69,    70,    71,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    13,    -1,    58,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    68,    69,    70,    71,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    37,    38,    -1,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    13,    -1,    -1,    58,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,    69,    70,
      71,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    37,    -1,
      -1,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    -1,    -1,    -1,    58,
      -1,    -1,    -1,    -1,    -1,    19,    20,    -1,    -1,    68,
      69,    70,    71,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    -1,    37,    -1,    13,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    49,    50,    51,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    60,    -1,    62,    37,
      64,    -1,    40,    -1,    -1,    -1,    -1,    45,    46,    47,
      48,    -1,    50,    51,    52,    53,    54,    21,    -1,    -1,
      58,    -1,    -1,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    -1,    37,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    49,    50,    51,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    60,    -1,    62,    -1,
      64,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      -1,    37,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    49,    50,    51,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    60,    -1,    62,    -1,    64,    -1,
      66,    67,    68,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    -1,    37,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    49,    50,    51,    52,    -1,
      -1,    55,    -1,    -1,    -1,    -1,    60,    -1,    62,    -1,
      64,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      -1,    37,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    49,    50,    51,    -1,    -1,    -1,    -1,
      56,    -1,    -1,    -1,    60,    -1,    62,    -1,    64,    27,
      28,    29,    30,    31,    32,    33,    34,    35,    -1,    37,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    49,    50,    51,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    60,    61,    62,    -1,    64,    27,    28,    29,
      30,    31,    32,    33,    34,    35,    -1,    37,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    49,
      50,    51,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      60,    -1,    62,    -1,    64,    27,    28,    29,    30,    31,
      32,    33,    34,    35,    -1,    37,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    49,    50,    51,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    60,    -1,
      62,    -1,    64,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    -1,    37,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    49,    50,    51,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    60,    -1,    62,    -1,
      64
};

/* YYSTOS[STATE-NUM] -- The symbol kind of the accessing symbol of
   state STATE-NUM.  */
static const yytype_uint8 yystos[] =
{
       0,    14,    84,    86,    85,    87,    89,     0,    30,    34,
      35,    82,    83,   188,     3,     4,     5,     6,     7,     8,
       9,    10,    22,    23,    24,    25,    26,    88,    90,    98,
     101,   102,   106,   108,   121,   126,   127,   128,   130,   131,
     133,   135,   137,    59,    82,    30,    91,    92,   190,   103,
     104,   190,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    37,    49,    50,    51,    60,    62,    64,   143,   144,
     145,   148,   149,   150,   155,   156,   163,   179,   184,   185,
     187,    21,   141,   143,    14,    16,   105,   107,   115,   122,
     143,   143,   163,   143,   143,   132,   143,   134,   143,   138,
      15,   105,   111,   115,    82,    59,    13,    59,    36,   143,
      60,   143,   143,   143,   180,   164,   157,    13,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    58,    68,    69,
      70,    71,   140,    57,    60,    64,    79,   142,    30,   116,
      30,   162,   109,   110,   190,   111,   123,   124,   143,    59,
      14,   115,    13,    15,   129,   129,    14,   129,    14,   129,
     143,   190,   162,    30,   113,   162,   111,   190,    66,    67,
      68,    94,    95,    96,    97,   143,   177,   178,   104,   143,
     147,    61,    87,    30,    31,    34,    64,   165,   166,   167,
     189,   143,   158,   159,   160,   143,    41,    42,    49,   143,
     143,   143,   143,   143,   143,   143,   143,   143,   143,   143,
     143,   143,   143,   143,   143,   143,    56,   143,   143,    60,
      13,    40,    43,    44,    45,    46,    47,    48,    30,   146,
      52,    55,   143,   168,   169,    30,   187,   143,    15,   117,
     118,   190,   163,    59,    36,   162,    59,    11,    12,   125,
     183,   185,   187,   143,   163,    30,    31,    35,   186,    30,
      31,    35,   186,   162,   162,   143,   162,   143,   162,   139,
      36,   114,   162,   162,   100,    68,    99,   177,    18,    19,
      20,   143,   143,   151,   152,   153,   154,    61,    56,   143,
      63,    59,    56,    65,    59,   143,   143,   143,   143,    56,
     143,   143,   143,   143,   143,   143,   143,   143,   143,   151,
      65,    55,   181,    52,   182,   190,    59,    36,   110,   143,
     124,   115,   129,   129,    23,   143,   112,   190,    30,    93,
      30,   161,   143,   143,   143,    17,    30,   173,   175,   177,
     188,    61,    87,    59,   143,    65,   167,   143,   160,   143,
      61,    61,     5,    71,   140,   143,   170,   170,   118,    30,
     119,   144,   162,   162,   143,    59,    30,    81,   143,   190,
     143,    30,    30,    30,    30,    31,   187,    59,    30,   187,
     152,    56,    13,    40,    43,    44,    45,    46,    47,    48,
     143,    60,     5,     5,    65,     9,   171,    60,    24,    25,
     136,   190,    30,    36,    30,   143,   143,   143,   176,   143,
     143,   143,   143,   143,   143,   143,   143,   143,   143,   143,
     143,   143,     6,   172,   120,   143,   163,   143,   143,   175,
     175,   175,   173,   174,    61,    59,   143,    65,   151,   129,
     162,   162,   162,    59,     5,   143,    61,   162,   173,   143
};

/* YYR1[RULE-NUM] -- Symbol kind of the left-hand side of rule RULE-NUM.  */
static const yytype_uint8 yyr1[] =
{
       0,    80,    81,    81,    82,    82,    83,    83,    83,    84,
      85,    84,    86,    87,    88,    88,    88,    88,    88,    88,
      89,    89,    90,    90,    90,    90,    90,    90,    90,    90,
      90,    90,    90,    90,    91,    91,    92,    93,    93,    93,
      94,    95,    96,    97,    99,    98,   100,    98,    98,    98,
      98,   101,   102,   103,   103,   104,   105,   107,   106,   108,
     108,   108,   108,   108,   108,   109,   109,   110,   111,   111,
     111,   112,   112,   114,   113,   116,   115,   117,   117,   118,
     120,   119,   122,   121,   123,   123,   124,   125,   125,   125,
     125,   126,   126,   127,   127,   128,   129,   129,   130,   131,
     132,   132,   133,   134,   134,   135,   136,   136,   138,   139,
     137,   140,   140,   140,   142,   141,   141,   143,   143,   143,
     143,   143,   143,   144,   144,   146,   145,   147,   145,   148,
     148,   148,   149,   149,   149,   149,   149,   149,   149,   149,
     149,   149,   149,   149,   149,   149,   149,   149,   149,   149,
     149,   149,   149,   149,   149,   149,   149,   149,   149,   149,
     149,   149,   149,   149,   149,   149,   149,   149,   149,   150,
     150,   151,   151,   152,   153,   152,   154,   154,   155,   155,
     157,   156,   158,   158,   158,   159,   159,   160,   161,   161,
     161,   162,   162,   164,   163,   165,   165,   165,   166,   166,
     167,   167,   167,   167,   168,   168,   169,   169,   170,   170,
     170,   170,   170,   171,   171,   171,   172,   172,   173,   173,
     173,   173,   174,   174,   175,   176,   175,   175,   175,   175,
     177,   177,   177,   178,   178,   179,   179,   179,   179,   179,
     180,   179,   179,   179,   179,   181,   179,   182,   179,   183,
     183,   184,   184,   185,   185,   185,   185,   185,   186,   186,
     186,   187,   187,   188,   188,   189,   189,   190
};

/* YYR2[RULE-NUM] -- Number of symbols on the right-hand side of rule RULE-NUM.  */
static const yytype_int8 yyr2[] =
{
       0,     2,     1,     3,     1,     1,     1,     3,     2,     0,
       0,     3,     2,     2,     1,     1,     1,     1,     1,     1,
       0,     2,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     3,     1,     0,     2,     4,
       3,     7,     7,     7,     0,     6,     0,     6,     4,     4,
       4,     2,     2,     1,     3,     3,     4,     0,     3,     3,
       3,     4,     4,     3,     4,     1,     3,     3,     0,     2,
       4,     1,     3,     0,     3,     0,     3,     1,     3,     3,
       0,     5,     0,     3,     1,     3,     2,     0,     1,     1,
       1,     2,     4,     3,     5,     2,     2,     2,     4,     4,
       3,     5,     2,     3,     5,     2,     1,     1,     0,     0,
      10,     1,     1,     1,     0,     3,     1,     1,     1,     1,
       1,     1,     3,     1,     3,     0,     5,     0,     5,     2,
       2,     2,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     4,     4,     4,
       3,     3,     3,     4,     4,     4,     4,     4,     4,     4,
       4,     7,     7,     7,     7,     7,     7,     7,     7,     5,
       4,     0,     1,     1,     0,     2,     1,     3,     1,     1,
       0,     4,     0,     1,     2,     1,     3,     1,     0,     2,
       4,     0,     2,     0,     4,     0,     1,     2,     1,     3,
       1,     3,     3,     5,     1,     2,     1,     2,     0,     2,
       3,     6,     3,     0,     2,     4,     0,     2,     1,     1,
       2,     2,     1,     3,     1,     0,     4,     2,     2,     2,
       1,     1,     1,     1,     2,     1,     1,     1,     1,     3,
       0,     4,     3,     3,     4,     0,     6,     0,     8,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1
};


enum { YYENOMEM = -2 };

#define yyerrok         (yyerrstatus = 0)
#define yyclearin       (yychar = YYEMPTY)

#define YYACCEPT        goto yyacceptlab
#define YYABORT         goto yyabortlab
#define YYERROR         goto yyerrorlab
#define YYNOMEM         goto yyexhaustedlab


#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)                                    \
  do                                                              \
    if (yychar == YYEMPTY)                                        \
      {                                                           \
        yychar = (Token);                                         \
        yylval = (Value);                                         \
        YYPOPSTACK (yylen);                                       \
        yystate = *yyssp;                                         \
        goto yybackup;                                            \
      }                                                           \
    else                                                          \
      {                                                           \
        yyerror (&yylloc, parser, YY_("syntax error: cannot back up")); \
        YYERROR;                                                  \
      }                                                           \
  while (0)

/* Backward compatibility with an undocumented macro.
   Use YYerror or YYUNDEF. */
#define YYERRCODE YYUNDEF

/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)                                \
    do                                                                  \
      if (N)                                                            \
        {                                                               \
          (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;        \
          (Current).first_column = YYRHSLOC (Rhs, 1).first_column;      \
          (Current).last_line    = YYRHSLOC (Rhs, N).last_line;         \
          (Current).last_column  = YYRHSLOC (Rhs, N).last_column;       \
        }                                                               \
      else                                                              \
        {                                                               \
          (Current).first_line   = (Current).last_line   =              \
            YYRHSLOC (Rhs, 0).last_line;                                \
          (Current).first_column = (Current).last_column =              \
            YYRHSLOC (Rhs, 0).last_column;                              \
        }                                                               \
    while (0)
#endif

#define YYRHSLOC(Rhs, K) ((Rhs)[K])


/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)                        \
do {                                            \
  if (yydebug)                                  \
    YYFPRINTF Args;                             \
} while (0)


/* YYLOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */

# ifndef YYLOCATION_PRINT

#  if defined YY_LOCATION_PRINT

   /* Temporary convenience wrapper in case some people defined the
      undocumented and private YY_LOCATION_PRINT macros.  */
#   define YYLOCATION_PRINT(File, Loc)  YY_LOCATION_PRINT(File, *(Loc))

#  elif defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL

/* Print *YYLOCP on YYO.  Private, do not rely on its existence. */

YY_ATTRIBUTE_UNUSED
static int
yy_location_print_ (FILE *yyo, YYLTYPE const * const yylocp)
{
  int res = 0;
  int end_col = 0 != yylocp->last_column ? yylocp->last_column - 1 : 0;
  if (0 <= yylocp->first_line)
    {
      res += YYFPRINTF (yyo, "%d", yylocp->first_line);
      if (0 <= yylocp->first_column)
        res += YYFPRINTF (yyo, ".%d", yylocp->first_column);
    }
  if (0 <= yylocp->last_line)
    {
      if (yylocp->first_line < yylocp->last_line)
        {
          res += YYFPRINTF (yyo, "-%d", yylocp->last_line);
          if (0 <= end_col)
            res += YYFPRINTF (yyo, ".%d", end_col);
        }
      else if (0 <= end_col && yylocp->first_column < end_col)
        res += YYFPRINTF (yyo, "-%d", end_col);
    }
  return res;
}

#   define YYLOCATION_PRINT  yy_location_print_

    /* Temporary convenience wrapper in case some people defined the
       undocumented and private YY_LOCATION_PRINT macros.  */
#   define YY_LOCATION_PRINT(File, Loc)  YYLOCATION_PRINT(File, &(Loc))

#  else

#   define YYLOCATION_PRINT(File, Loc) ((void) 0)
    /* Temporary convenience wrapper in case some people defined the
       undocumented and private YY_LOCATION_PRINT macros.  */
#   define YY_LOCATION_PRINT  YYLOCATION_PRINT

#  endif
# endif /* !defined YYLOCATION_PRINT */


# define YY_SYMBOL_PRINT(Title, Kind, Value, Location)                    \
do {                                                                      \
  if (yydebug)                                                            \
    {                                                                     \
      YYFPRINTF (stderr, "%s ", Title);                                   \
      yy_symbol_print (stderr,                                            \
                  Kind, Value, Location, parser); \
      YYFPRINTF (stderr, "\n");                                           \
    }                                                                     \
} while (0)


/*-----------------------------------.
| Print this symbol's value on YYO.  |
`-----------------------------------*/

static void
yy_symbol_value_print (FILE *yyo,
                       yysymbol_kind_t yykind, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp, arangodb::aql::Parser* parser)
{
  FILE *yyoutput = yyo;
  YY_USE (yyoutput);
  YY_USE (yylocationp);
  YY_USE (parser);
  if (!yyvaluep)
    return;
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  YY_USE (yykind);
  YY_IGNORE_MAYBE_UNINITIALIZED_END
}


/*---------------------------.
| Print this symbol on YYO.  |
`---------------------------*/

static void
yy_symbol_print (FILE *yyo,
                 yysymbol_kind_t yykind, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp, arangodb::aql::Parser* parser)
{
  YYFPRINTF (yyo, "%s %s (",
             yykind < YYNTOKENS ? "token" : "nterm", yysymbol_name (yykind));

  YYLOCATION_PRINT (yyo, yylocationp);
  YYFPRINTF (yyo, ": ");
  yy_symbol_value_print (yyo, yykind, yyvaluep, yylocationp, parser);
  YYFPRINTF (yyo, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

static void
yy_stack_print (yy_state_t *yybottom, yy_state_t *yytop)
{
  YYFPRINTF (stderr, "Stack now");
  for (; yybottom <= yytop; yybottom++)
    {
      int yybot = *yybottom;
      YYFPRINTF (stderr, " %d", yybot);
    }
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)                            \
do {                                                            \
  if (yydebug)                                                  \
    yy_stack_print ((Bottom), (Top));                           \
} while (0)


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

static void
yy_reduce_print (yy_state_t *yyssp, YYSTYPE *yyvsp, YYLTYPE *yylsp,
                 int yyrule, arangodb::aql::Parser* parser)
{
  int yylno = yyrline[yyrule];
  int yynrhs = yyr2[yyrule];
  int yyi;
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %d):\n",
             yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr,
                       YY_ACCESSING_SYMBOL (+yyssp[yyi + 1 - yynrhs]),
                       &yyvsp[(yyi + 1) - (yynrhs)],
                       &(yylsp[(yyi + 1) - (yynrhs)]), parser);
      YYFPRINTF (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)          \
do {                                    \
  if (yydebug)                          \
    yy_reduce_print (yyssp, yyvsp, yylsp, Rule, parser); \
} while (0)

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args) ((void) 0)
# define YY_SYMBOL_PRINT(Title, Kind, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif


/* Context of a parse error.  */
typedef struct
{
  yy_state_t *yyssp;
  yysymbol_kind_t yytoken;
  YYLTYPE *yylloc;
} yypcontext_t;

/* Put in YYARG at most YYARGN of the expected tokens given the
   current YYCTX, and return the number of tokens stored in YYARG.  If
   YYARG is null, return the number of expected tokens (guaranteed to
   be less than YYNTOKENS).  Return YYENOMEM on memory exhaustion.
   Return 0 if there are more than YYARGN expected tokens, yet fill
   YYARG up to YYARGN. */
static int
yypcontext_expected_tokens (const yypcontext_t *yyctx,
                            yysymbol_kind_t yyarg[], int yyargn)
{
  /* Actual size of YYARG. */
  int yycount = 0;
  int yyn = yypact[+*yyctx->yyssp];
  if (!yypact_value_is_default (yyn))
    {
      /* Start YYX at -YYN if negative to avoid negative indexes in
         YYCHECK.  In other words, skip the first -YYN actions for
         this state because they are default actions.  */
      int yyxbegin = yyn < 0 ? -yyn : 0;
      /* Stay within bounds of both yycheck and yytname.  */
      int yychecklim = YYLAST - yyn + 1;
      int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
      int yyx;
      for (yyx = yyxbegin; yyx < yyxend; ++yyx)
        if (yycheck[yyx + yyn] == yyx && yyx != YYSYMBOL_YYerror
            && !yytable_value_is_error (yytable[yyx + yyn]))
          {
            if (!yyarg)
              ++yycount;
            else if (yycount == yyargn)
              return 0;
            else
              yyarg[yycount++] = YY_CAST (yysymbol_kind_t, yyx);
          }
    }
  if (yyarg && yycount == 0 && 0 < yyargn)
    yyarg[0] = YYSYMBOL_YYEMPTY;
  return yycount;
}




#ifndef yystrlen
# if defined __GLIBC__ && defined _STRING_H
#  define yystrlen(S) (YY_CAST (YYPTRDIFF_T, strlen (S)))
# else
/* Return the length of YYSTR.  */
static YYPTRDIFF_T
yystrlen (const char *yystr)
{
  YYPTRDIFF_T yylen;
  for (yylen = 0; yystr[yylen]; yylen++)
    continue;
  return yylen;
}
# endif
#endif

#ifndef yystpcpy
# if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
#  define yystpcpy stpcpy
# else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
static char *
yystpcpy (char *yydest, const char *yysrc)
{
  char *yyd = yydest;
  const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
# endif
#endif

#ifndef yytnamerr
/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
   quotes and backslashes, so that it's suitable for yyerror.  The
   heuristic is that double-quoting is unnecessary unless the string
   contains an apostrophe, a comma, or backslash (other than
   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
   null, do not copy; instead, return the length of what the result
   would have been.  */
static YYPTRDIFF_T
yytnamerr (char *yyres, const char *yystr)
{
  if (*yystr == '"')
    {
      YYPTRDIFF_T yyn = 0;
      char const *yyp = yystr;
      for (;;)
        switch (*++yyp)
          {
          case '\'':
          case ',':
            goto do_not_strip_quotes;

          case '\\':
            if (*++yyp != '\\')
              goto do_not_strip_quotes;
            else
              goto append;

          append:
          default:
            if (yyres)
              yyres[yyn] = *yyp;
            yyn++;
            break;

          case '"':
            if (yyres)
              yyres[yyn] = '\0';
            return yyn;
          }
    do_not_strip_quotes: ;
    }

  if (yyres)
    return yystpcpy (yyres, yystr) - yyres;
  else
    return yystrlen (yystr);
}
#endif


static int
yy_syntax_error_arguments (const yypcontext_t *yyctx,
                           yysymbol_kind_t yyarg[], int yyargn)
{
  /* Actual size of YYARG. */
  int yycount = 0;
  /* There are many possibilities here to consider:
     - If this state is a consistent state with a default action, then
       the only way this function was invoked is if the default action
       is an error action.  In that case, don't check for expected
       tokens because there are none.
     - The only way there can be no lookahead present (in yychar) is if
       this state is a consistent state with a default action.  Thus,
       detecting the absence of a lookahead is sufficient to determine
       that there is no unexpected or expected token to report.  In that
       case, just report a simple "syntax error".
     - Don't assume there isn't a lookahead just because this state is a
       consistent state with a default action.  There might have been a
       previous inconsistent state, consistent state with a non-default
       action, or user semantic action that manipulated yychar.
     - Of course, the expected token list depends on states to have
       correct lookahead information, and it depends on the parser not
       to perform extra reductions after fetching a lookahead from the
       scanner and before detecting a syntax error.  Thus, state merging
       (from LALR or IELR) and default reductions corrupt the expected
       token list.  However, the list is correct for canonical LR with
       one exception: it will still contain any token that will not be
       accepted due to an error action in a later state.
  */
  if (yyctx->yytoken != YYSYMBOL_YYEMPTY)
    {
      int yyn;
      if (yyarg)
        yyarg[yycount] = yyctx->yytoken;
      ++yycount;
      yyn = yypcontext_expected_tokens (yyctx,
                                        yyarg ? yyarg + 1 : yyarg, yyargn - 1);
      if (yyn == YYENOMEM)
        return YYENOMEM;
      else
        yycount += yyn;
    }
  return yycount;
}

/* Copy into *YYMSG, which is of size *YYMSG_ALLOC, an error message
   about the unexpected token YYTOKEN for the state stack whose top is
   YYSSP.

   Return 0 if *YYMSG was successfully written.  Return -1 if *YYMSG is
   not large enough to hold the message.  In that case, also set
   *YYMSG_ALLOC to the required number of bytes.  Return YYENOMEM if the
   required number of bytes is too large to store.  */
static int
yysyntax_error (YYPTRDIFF_T *yymsg_alloc, char **yymsg,
                const yypcontext_t *yyctx)
{
  enum { YYARGS_MAX = 5 };
  /* Internationalized format string. */
  const char *yyformat = YY_NULLPTR;
  /* Arguments of yyformat: reported tokens (one for the "unexpected",
     one per "expected"). */
  yysymbol_kind_t yyarg[YYARGS_MAX];
  /* Cumulated lengths of YYARG.  */
  YYPTRDIFF_T yysize = 0;

  /* Actual size of YYARG. */
  int yycount = yy_syntax_error_arguments (yyctx, yyarg, YYARGS_MAX);
  if (yycount == YYENOMEM)
    return YYENOMEM;

  switch (yycount)
    {
#define YYCASE_(N, S)                       \
      case N:                               \
        yyformat = S;                       \
        break
    default: /* Avoid compiler warnings. */
      YYCASE_(0, YY_("syntax error"));
      YYCASE_(1, YY_("syntax error, unexpected %s"));
      YYCASE_(2, YY_("syntax error, unexpected %s, expecting %s"));
      YYCASE_(3, YY_("syntax error, unexpected %s, expecting %s or %s"));
      YYCASE_(4, YY_("syntax error, unexpected %s, expecting %s or %s or %s"));
      YYCASE_(5, YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s"));
#undef YYCASE_
    }

  /* Compute error message size.  Don't count the "%s"s, but reserve
     room for the terminator.  */
  yysize = yystrlen (yyformat) - 2 * yycount + 1;
  {
    int yyi;
    for (yyi = 0; yyi < yycount; ++yyi)
      {
        YYPTRDIFF_T yysize1
          = yysize + yytnamerr (YY_NULLPTR, yytname[yyarg[yyi]]);
        if (yysize <= yysize1 && yysize1 <= YYSTACK_ALLOC_MAXIMUM)
          yysize = yysize1;
        else
          return YYENOMEM;
      }
  }

  if (*yymsg_alloc < yysize)
    {
      *yymsg_alloc = 2 * yysize;
      if (! (yysize <= *yymsg_alloc
             && *yymsg_alloc <= YYSTACK_ALLOC_MAXIMUM))
        *yymsg_alloc = YYSTACK_ALLOC_MAXIMUM;
      return -1;
    }

  /* Avoid sprintf, as that infringes on the user's name space.
     Don't have undefined behavior even if the translation
     produced a string with the wrong number of "%s"s.  */
  {
    char *yyp = *yymsg;
    int yyi = 0;
    while ((*yyp = *yyformat) != '\0')
      if (*yyp == '%' && yyformat[1] == 's' && yyi < yycount)
        {
          yyp += yytnamerr (yyp, yytname[yyarg[yyi++]]);
          yyformat += 2;
        }
      else
        {
          ++yyp;
          ++yyformat;
        }
  }
  return 0;
}


/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

static void
yydestruct (const char *yymsg,
            yysymbol_kind_t yykind, YYSTYPE *yyvaluep, YYLTYPE *yylocationp, arangodb::aql::Parser* parser)
{
  YY_USE (yyvaluep);
  YY_USE (yylocationp);
  YY_USE (parser);
  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yykind, yyvaluep, yylocationp);

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  YY_USE (yykind);
  YY_IGNORE_MAYBE_UNINITIALIZED_END
}






/*----------.
| yyparse.  |
`----------*/

int
yyparse (arangodb::aql::Parser* parser)
{
/* Lookahead token kind.  */
int yychar;


/* The semantic value of the lookahead symbol.  */
/* Default value used for initialization, for pacifying older GCCs
   or non-GCC compilers.  */
YY_INITIAL_VALUE (static YYSTYPE yyval_default;)
YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);

/* Location data for the lookahead symbol.  */
static YYLTYPE yyloc_default
# if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL
  = { 1, 1, 1, 1 }
# endif
;
YYLTYPE yylloc = yyloc_default;

    /* Number of syntax errors so far.  */
    int yynerrs = 0;

    yy_state_fast_t yystate = 0;
    /* Number of tokens to shift before error messages enabled.  */
    int yyerrstatus = 0;

    /* Refer to the stacks through separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */

    /* Their size.  */
    YYPTRDIFF_T yystacksize = YYINITDEPTH;

    /* The state stack: array, bottom, top.  */
    yy_state_t yyssa[YYINITDEPTH];
    yy_state_t *yyss = yyssa;
    yy_state_t *yyssp = yyss;

    /* The semantic value stack: array, bottom, top.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE *yyvs = yyvsa;
    YYSTYPE *yyvsp = yyvs;

    /* The location stack: array, bottom, top.  */
    YYLTYPE yylsa[YYINITDEPTH];
    YYLTYPE *yyls = yylsa;
    YYLTYPE *yylsp = yyls;

  int yyn;
  /* The return value of yyparse.  */
  int yyresult;
  /* Lookahead symbol kind.  */
  yysymbol_kind_t yytoken = YYSYMBOL_YYEMPTY;
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;
  YYLTYPE yyloc;

  /* The locations where the error started and ended.  */
  YYLTYPE yyerror_range[3];

  /* Buffer for error messages, and its allocated size.  */
  char yymsgbuf[128];
  char *yymsg = yymsgbuf;
  YYPTRDIFF_T yymsg_alloc = sizeof yymsgbuf;

#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N), yylsp -= (N))

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yychar = YYEMPTY; /* Cause a token to be read.  */

  yylsp[0] = yylloc;
  goto yysetstate;


/*------------------------------------------------------------.
| yynewstate -- push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;


/*--------------------------------------------------------------------.
| yysetstate -- set current state (the top of the stack) to yystate.  |
`--------------------------------------------------------------------*/
yysetstate:
  YYDPRINTF ((stderr, "Entering state %d\n", yystate));
  YY_ASSERT (0 <= yystate && yystate < YYNSTATES);
  YY_IGNORE_USELESS_CAST_BEGIN
  *yyssp = YY_CAST (yy_state_t, yystate);
  YY_IGNORE_USELESS_CAST_END
  YY_STACK_PRINT (yyss, yyssp);

  if (yyss + yystacksize - 1 <= yyssp)
#if !defined yyoverflow && !defined YYSTACK_RELOCATE
    YYNOMEM;
#else
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYPTRDIFF_T yysize = yyssp - yyss + 1;

# if defined yyoverflow
      {
        /* Give user a chance to reallocate the stack.  Use copies of
           these so that the &'s don't force the real ones into
           memory.  */
        yy_state_t *yyss1 = yyss;
        YYSTYPE *yyvs1 = yyvs;
        YYLTYPE *yyls1 = yyls;

        /* Each stack pointer address is followed by the size of the
           data in use in that stack, in bytes.  This used to be a
           conditional around just the two extra args, but that might
           be undefined if yyoverflow is a macro.  */
        yyoverflow (YY_("memory exhausted"),
                    &yyss1, yysize * YYSIZEOF (*yyssp),
                    &yyvs1, yysize * YYSIZEOF (*yyvsp),
                    &yyls1, yysize * YYSIZEOF (*yylsp),
                    &yystacksize);
        yyss = yyss1;
        yyvs = yyvs1;
        yyls = yyls1;
      }
# else /* defined YYSTACK_RELOCATE */
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
        YYNOMEM;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
        yystacksize = YYMAXDEPTH;

      {
        yy_state_t *yyss1 = yyss;
        union yyalloc *yyptr =
          YY_CAST (union yyalloc *,
                   YYSTACK_ALLOC (YY_CAST (YYSIZE_T, YYSTACK_BYTES (yystacksize))));
        if (! yyptr)
          YYNOMEM;
        YYSTACK_RELOCATE (yyss_alloc, yyss);
        YYSTACK_RELOCATE (yyvs_alloc, yyvs);
        YYSTACK_RELOCATE (yyls_alloc, yyls);
#  undef YYSTACK_RELOCATE
        if (yyss1 != yyssa)
          YYSTACK_FREE (yyss1);
      }
# endif

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;
      yylsp = yyls + yysize - 1;

      YY_IGNORE_USELESS_CAST_BEGIN
      YYDPRINTF ((stderr, "Stack size increased to %ld\n",
                  YY_CAST (long, yystacksize)));
      YY_IGNORE_USELESS_CAST_END

      if (yyss + yystacksize - 1 <= yyssp)
        YYABORT;
    }
#endif /* !defined yyoverflow && !defined YYSTACK_RELOCATE */


  if (yystate == YYFINAL)
    YYACCEPT;

  goto yybackup;


/*-----------.
| yybackup.  |
`-----------*/
yybackup:
  /* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to lookahead token.  */
  yyn = yypact[yystate];
  if (yypact_value_is_default (yyn))
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either empty, or end-of-input, or a valid lookahead.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token\n"));
      yychar = yylex (&yylval, &yylloc, scanner);
    }

  if (yychar <= T_END)
    {
      yychar = T_END;
      yytoken = YYSYMBOL_YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else if (yychar == YYerror)
    {
      /* The scanner already issued an error message, process directly
         to error recovery.  But do not keep the error token as
         lookahead, it is too special and may lead us to an endless
         loop in error recovery. */
      yychar = YYUNDEF;
      yytoken = YYSYMBOL_YYerror;
      yyerror_range[1] = yylloc;
      goto yyerrlab1;
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yytable_value_is_error (yyn))
        goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the lookahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);
  yystate = yyn;
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END
  *++yylsp = yylloc;

  /* Discard the shifted token.  */
  yychar = YYEMPTY;
  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     '$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];

  /* Default location. */
  YYLLOC_DEFAULT (yyloc, (yylsp - yylen), yylen);
  yyerror_range[1] = yyloc;
  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
  case 2: /* optional_prune_variable: expression  */
#line 511 "Aql/grammar.y"
               {
      AstNode* node = parser->ast()->createNodeArray();
      node->addMember(parser->ast()->createNodeNop());
      node->addMember((yyvsp[0].node));
      (yyval.node) = node;
    }
#line 2625 "Aql/grammar.cpp"
    break;

  case 3: /* optional_prune_variable: variable_name "assignment" expression  */
#line 517 "Aql/grammar.y"
                                      {
      AstNode* node = parser->ast()->createNodeArray();
      AstNode* variableNode = parser->ast()->createNodeLet((yyvsp[-2].strval).value, (yyvsp[-2].strval).length, (yyvsp[0].node), true);
      node->addMember(variableNode);
      node->addMember((yyvsp[0].node));
      (yyval.node) = node;    
  }
#line 2637 "Aql/grammar.cpp"
    break;

  case 4: /* with_collection: "identifier"  */
#line 527 "Aql/grammar.y"
             {
      (yyval.node) = parser->ast()->createNodeValueString((yyvsp[0].strval).value, (yyvsp[0].strval).length);
    }
#line 2645 "Aql/grammar.cpp"
    break;

  case 5: /* with_collection: bind_parameter_datasource_expected  */
#line 530 "Aql/grammar.y"
                                       {
      (yyval.node) = (yyvsp[0].node);
    }
#line 2653 "Aql/grammar.cpp"
    break;

  case 6: /* with_collection_list: with_collection  */
#line 536 "Aql/grammar.y"
                     {
       auto node = static_cast<AstNode*>(parser->peekStack());
       node->addMember((yyvsp[0].node));
     }
#line 2662 "Aql/grammar.cpp"
    break;

  case 7: /* with_collection_list: with_collection_list "," with_collection  */
#line 540 "Aql/grammar.y"
                                                  {
       auto node = static_cast<AstNode*>(parser->peekStack());
       node->addMember((yyvsp[0].node));
     }
#line 2671 "Aql/grammar.cpp"
    break;

  case 8: /* with_collection_list: with_collection_list with_collection  */
#line 544 "Aql/grammar.y"
                                          {
       auto node = static_cast<AstNode*>(parser->peekStack());
       node->addMember((yyvsp[0].node));
     }
#line 2680 "Aql/grammar.cpp"
    break;

  case 9: /* optional_with: %empty  */
#line 551 "Aql/grammar.y"
                 {
     }
#line 2687 "Aql/grammar.cpp"
    break;

  case 10: /* $@1: %empty  */
#line 553 "Aql/grammar.y"
            {
      auto node = parser->ast()->createNodeArray();
      parser->pushStack(node);
     }
#line 2696 "Aql/grammar.cpp"
    break;

  case 11: /* optional_with: "WITH keyword" $@1 with_collection_list  */
#line 556 "Aql/grammar.y"
                            {
      auto node = static_cast<AstNode*>(parser->popStack());
      auto const& resolver = parser->query().resolver();
      auto withNode = parser->ast()->createNodeWithCollections(node, resolver);
      parser->ast()->addOperation(withNode);
     }
#line 2707 "Aql/grammar.cpp"
    break;

  case 12: /* queryStart: optional_with query  */
#line 565 "Aql/grammar.y"
                        {
    }
#line 2714 "Aql/grammar.cpp"
    break;

  case 13: /* query: optional_statement_block_statements final_statement  */
#line 570 "Aql/grammar.y"
                                                        {
    }
#line 2721 "Aql/grammar.cpp"
    break;

  case 14: /* final_statement: return_statement  */
#line 575 "Aql/grammar.y"
                     {
    }
#line 2728 "Aql/grammar.cpp"
    break;

  case 15: /* final_statement: remove_statement  */
#line 577 "Aql/grammar.y"
                     {
      parser->ast()->scopes()->endNested();
    }
#line 2736 "Aql/grammar.cpp"
    break;

  case 16: /* final_statement: insert_statement  */
#line 580 "Aql/grammar.y"
                     {
      parser->ast()->scopes()->endNested();
    }
#line 2744 "Aql/grammar.cpp"
    break;

  case 17: /* final_statement: update_statement  */
#line 583 "Aql/grammar.y"
                     {
      parser->ast()->scopes()->endNested();
    }
#line 2752 "Aql/grammar.cpp"
    break;

  case 18: /* final_statement: replace_statement  */
#line 586 "Aql/grammar.y"
                      {
      parser->ast()->scopes()->endNested();
    }
#line 2760 "Aql/grammar.cpp"
    break;

  case 19: /* final_statement: upsert_statement  */
#line 589 "Aql/grammar.y"
                     {
      parser->ast()->scopes()->endNested();
    }
#line 2768 "Aql/grammar.cpp"
    break;

  case 20: /* optional_statement_block_statements: %empty  */
#line 595 "Aql/grammar.y"
                {
    }
#line 2775 "Aql/grammar.cpp"
    break;

  case 21: /* optional_statement_block_statements: optional_statement_block_statements statement_block_statement  */
#line 597 "Aql/grammar.y"
                                                                  {
    }
#line 2782 "Aql/grammar.cpp"
    break;

  case 22: /* statement_block_statement: for_statement  */
#line 602 "Aql/grammar.y"
                  {
    }
#line 2789 "Aql/grammar.cpp"
    break;

  case 23: /* statement_block_statement: let_statement  */
#line 604 "Aql/grammar.y"
                  {
    }
#line 2796 "Aql/grammar.cpp"
    break;

  case 24: /* statement_block_statement: filter_statement  */
#line 606 "Aql/grammar.y"
                     {
    }
#line 2803 "Aql/grammar.cpp"
    break;

  case 25: /* statement_block_statement: collect_statement  */
#line 608 "Aql/grammar.y"
                      {
    }
#line 2810 "Aql/grammar.cpp"
    break;

  case 26: /* statement_block_statement: sort_statement  */
#line 610 "Aql/grammar.y"
                   {
    }
#line 2817 "Aql/grammar.cpp"
    break;

  case 27: /* statement_block_statement: limit_statement  */
#line 612 "Aql/grammar.y"
                    {
    }
#line 2824 "Aql/grammar.cpp"
    break;

  case 28: /* statement_block_statement: window_statement  */
#line 614 "Aql/grammar.y"
                     {
    }
#line 2831 "Aql/grammar.cpp"
    break;

  case 29: /* statement_block_statement: remove_statement  */
#line 616 "Aql/grammar.y"
                     {
    }
#line 2838 "Aql/grammar.cpp"
    break;

  case 30: /* statement_block_statement: insert_statement  */
#line 618 "Aql/grammar.y"
                     {
    }
#line 2845 "Aql/grammar.cpp"
    break;

  case 31: /* statement_block_statement: update_statement  */
#line 620 "Aql/grammar.y"
                     {
    }
#line 2852 "Aql/grammar.cpp"
    break;

  case 32: /* statement_block_statement: replace_statement  */
#line 622 "Aql/grammar.y"
                      {
    }
#line 2859 "Aql/grammar.cpp"
    break;

  case 33: /* statement_block_statement: upsert_statement  */
#line 624 "Aql/grammar.y"
                     {
    }
#line 2866 "Aql/grammar.cpp"
    break;

  case 34: /* more_output_variables: variable_name  */
#line 629 "Aql/grammar.y"
                  {
      auto wrapperNode = parser->ast()->createNodeArray();
      parser->pushArray(wrapperNode);
      // This is guaranteed to be called on the first variable
      AstNode* node = parser->ast()->createNodeValueString((yyvsp[0].strval).value, (yyvsp[0].strval).length);
      parser->pushArrayElement(node);
    }
#line 2878 "Aql/grammar.cpp"
    break;

  case 35: /* more_output_variables: more_output_variables "," variable_name  */
#line 636 "Aql/grammar.y"
                                                  {
      AstNode* node = parser->ast()->createNodeValueString((yyvsp[0].strval).value, (yyvsp[0].strval).length);
      parser->pushArrayElement(node);
    }
#line 2887 "Aql/grammar.cpp"
    break;

  case 36: /* for_output_variables: more_output_variables  */
#line 643 "Aql/grammar.y"
                          {
      (yyval.node) = parser->popArray();
    }
#line 2895 "Aql/grammar.cpp"
    break;

  case 37: /* prune_and_options: %empty  */
#line 649 "Aql/grammar.y"
                                                   {
      auto node = static_cast<AstNode*>(parser->peekStack());
      // Prune
      node->addMember(parser->ast()->createNodeNop());
      // Options
      node->addMember(parser->ast()->createNodeNop());
    }
#line 2907 "Aql/grammar.cpp"
    break;

  case 38: /* prune_and_options: "identifier" optional_prune_variable  */
#line 656 "Aql/grammar.y"
                                     {
      std::string_view operation((yyvsp[-1].strval).value, (yyvsp[-1].strval).length);

      auto node = static_cast<AstNode*>(parser->peekStack());
      if (::caseInsensitiveEqual(operation, "PRUNE")) {
        /* Only Prune */
        TRI_ASSERT((yyvsp[0].node) != nullptr);
        // Prune
        node->addMember((yyvsp[0].node));
        // Options
        node->addMember(parser->ast()->createNodeNop());
      } else if (::caseInsensitiveEqual(operation, "OPTIONS")) {
        auto const* optionsArgument = (yyvsp[0].node)->getMember(1);
        /* Only Options */
        TRI_ASSERT(optionsArgument != nullptr);
        ::validateOptions(parser, optionsArgument, yylloc.first_line, yylloc.first_column);
        // Prune
        node->addMember(parser->ast()->createNodeNop());
        // Options
        node->addMember(optionsArgument);
      } else {
        parser->registerParseError(TRI_ERROR_QUERY_PARSE, "unexpected qualifier '%s', expecting 'PRUNE' or 'OPTIONS'", operation, yylloc.first_line, yylloc.first_column);
      }
    }
#line 2936 "Aql/grammar.cpp"
    break;

  case 39: /* prune_and_options: "identifier" optional_prune_variable "identifier" object  */
#line 680 "Aql/grammar.y"
                                                     {
      /* prune and options */
      std::string_view operation((yyvsp[-3].strval).value, (yyvsp[-3].strval).length);
      auto node = static_cast<AstNode*>(parser->peekStack());
      if (!::caseInsensitiveEqual(operation, "PRUNE")) {
        parser->registerParseError(TRI_ERROR_QUERY_PARSE, "unexpected qualifier '%s', expecting 'PRUNE'", operation, yylloc.first_line, yylloc.first_column);
      }
      TRI_ASSERT((yyvsp[-2].node) != nullptr);
      operation = {(yyvsp[-1].strval).value, (yyvsp[-1].strval).length};
      if (!::caseInsensitiveEqual(operation, "OPTIONS")) {
        parser->registerParseError(TRI_ERROR_QUERY_PARSE, "unexpected qualifier '%s', expecting 'OPTIONS'", operation, yylloc.first_line, yylloc.first_column);
      }
      TRI_ASSERT((yyvsp[0].node) != nullptr);
      ::validateOptions(parser, (yyvsp[0].node), yylloc.first_line, yylloc.first_column);

      // Prune
      node->addMember((yyvsp[-2].node));
      // Options
      node->addMember((yyvsp[0].node));
    }
#line 2961 "Aql/grammar.cpp"
    break;

  case 40: /* traversal_graph_info: graph_direction_steps expression graph_subject  */
#line 703 "Aql/grammar.y"
                                                   {
      auto infoNode = parser->ast()->createNodeArray();
      // Direction
      infoNode->addMember((yyvsp[-2].node));
      // Source
      infoNode->addMember((yyvsp[-1].node));
      // Graph
      infoNode->addMember((yyvsp[0].node));
      (yyval.node) = infoNode;
    }
#line 2976 "Aql/grammar.cpp"
    break;

  case 41: /* shortest_path_graph_info: graph_direction "SHORTEST_PATH keyword" expression "identifier" expression graph_subject options  */
#line 716 "Aql/grammar.y"
                                                                                         {
      (yyval.node) = ::buildShortestPathInfo(parser, (yyvsp[-3].strval).value, parser->ast()->createNodeDirection((yyvsp[-6].intval), 1), (yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node), yyloc);
    }
#line 2984 "Aql/grammar.cpp"
    break;

  case 42: /* k_shortest_paths_graph_info: graph_direction_steps "K_SHORTEST_PATHS keyword" expression "identifier" expression graph_subject options  */
#line 722 "Aql/grammar.y"
                                                                                                  {
      (yyval.node) = ::buildShortestPathInfo(parser, (yyvsp[-3].strval).value, (yyvsp[-6].node), (yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node), yyloc);
    }
#line 2992 "Aql/grammar.cpp"
    break;

  case 43: /* k_paths_graph_info: graph_direction_steps "K_PATHS keyword" expression "identifier" expression graph_subject options  */
#line 728 "Aql/grammar.y"
                                                                                         {
      (yyval.node) = ::buildShortestPathInfo(parser, (yyvsp[-3].strval).value, (yyvsp[-6].node), (yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node), yyloc);
    }
#line 3000 "Aql/grammar.cpp"
    break;

  case 44: /* $@2: %empty  */
#line 734 "Aql/grammar.y"
                                               {
      AstNode* variablesNode = static_cast<AstNode*>((yyvsp[-2].node));
      ::checkOutVariables(parser, variablesNode, 1, 1, "Collections and views FOR loops only allow a single return variable", yyloc);
      parser->ast()->scopes()->start(arangodb::aql::AQL_SCOPE_FOR);
      // now create an out variable for the FOR statement
      // this prepares us to handle the optional SEARCH condition, which may
      // or may not refer to the FOR's variable
      AstNode* variableNameNode = variablesNode->getMemberUnchecked(0);
      TRI_ASSERT(variableNameNode->isStringValue());
      AstNode* variableNode = parser->ast()->createNodeVariable(variableNameNode->getStringView(), true);
      parser->pushStack(variableNode);
    }
#line 3017 "Aql/grammar.cpp"
    break;

  case 45: /* for_statement: "FOR declaration" for_output_variables "IN keyword" expression $@2 for_options  */
#line 745 "Aql/grammar.y"
                  {
      // now we can handle the optional SEARCH condition and OPTIONS.
      AstNode* variableNode = static_cast<AstNode*>(parser->popStack());

      Variable* variable = static_cast<Variable*>(variableNode->getData());

      AstNode* node = nullptr;
      AstNode* search = nullptr;
      AstNode* options = nullptr;

      if ((yyvsp[0].node) != nullptr) {
        // we got a SEARCH and/or OPTIONS clause
        TRI_ASSERT((yyvsp[0].node)->type == NODE_TYPE_ARRAY);
        TRI_ASSERT((yyvsp[0].node)->numMembers() == 2);

        search = (yyvsp[0].node)->getMemberUnchecked(0);
        if (search->type == NODE_TYPE_NOP) {
          search = nullptr;
        }
        options = (yyvsp[0].node)->getMemberUnchecked(1);
        if (options->type == NODE_TYPE_NOP) {
          options = nullptr;
        }
      }

      if (search != nullptr) {
        // we got a SEARCH clause. this is always a view.
        node = parser->ast()->createNodeForView(variable, (yyvsp[-2].node), search, options);

        if ((yyvsp[-2].node)->type != NODE_TYPE_PARAMETER_DATASOURCE &&
            (yyvsp[-2].node)->type != NODE_TYPE_VIEW &&
            (yyvsp[-2].node)->type != NODE_TYPE_COLLECTION) {
          parser->registerParseError(TRI_ERROR_QUERY_PARSE, "SEARCH condition used on non-view", yylloc.first_line, yylloc.first_column);
        }
      } else {
        node = parser->ast()->createNodeFor(variable, (yyvsp[-2].node), options);
      }

      parser->ast()->addOperation(node);
    }
#line 3062 "Aql/grammar.cpp"
    break;

  case 46: /* $@3: %empty  */
#line 785 "Aql/grammar.y"
                                                         {
      // Traversal
      auto variableNamesNode = static_cast<AstNode*>((yyvsp[-2].node));
      ::checkOutVariables(parser, variableNamesNode, 1, 3, "Traversals only have one, two or three return variables", yyloc);
      parser->ast()->scopes()->start(arangodb::aql::AQL_SCOPE_FOR);
      auto variablesNode = ::transformOutputVariables(parser, variableNamesNode);
      auto graphInfoNode = static_cast<AstNode*>((yyvsp[0].node));
      TRI_ASSERT(graphInfoNode != nullptr);
      TRI_ASSERT(graphInfoNode->type == NODE_TYPE_ARRAY);
      parser->pushStack(variablesNode);
      parser->pushStack(graphInfoNode);
      // This stack push/pop magic is necessary to allow v, e, and p in the prune condition
    }
#line 3080 "Aql/grammar.cpp"
    break;

  case 47: /* for_statement: "FOR declaration" for_output_variables "IN keyword" traversal_graph_info $@3 prune_and_options  */
#line 797 "Aql/grammar.y"
                        {
      auto graphInfoNode = static_cast<AstNode*>(parser->popStack());
      auto variablesNode = static_cast<AstNode*>(parser->popStack());

      auto prune = graphInfoNode->getMember(3);
      TRI_ASSERT(prune != nullptr);
      if (prune->type == NODE_TYPE_ARRAY) {
        TRI_ASSERT(prune->numMembers() == 2);
        Ast::traverseReadOnly(prune->getMember(1), [&](AstNode const* node) {
          if (node->type == NODE_TYPE_REFERENCE && node->hasFlag(AstNodeFlagType::FLAG_SUBQUERY_REFERENCE)) {
            parser->registerParseError(TRI_ERROR_QUERY_PARSE, "prune condition must not use a subquery", yylloc.first_line, yylloc.first_column);
          }
        });
        graphInfoNode->changeMember(3, prune->getMember(1));
      }
      auto node = parser->ast()->createNodeTraversal(variablesNode, graphInfoNode);
      parser->ast()->addOperation(node);
      if(prune->type == NODE_TYPE_ARRAY && prune->getMember(0)->type != NODE_TYPE_NOP) {
        auto pruneLetVariableName = prune->getMember(0);
        parser->ast()->addOperation(pruneLetVariableName);
      }
    }
#line 3107 "Aql/grammar.cpp"
    break;

  case 48: /* for_statement: "FOR declaration" for_output_variables "IN keyword" shortest_path_graph_info  */
#line 819 "Aql/grammar.y"
                                                             {
      // Shortest Path
      auto variableNamesNode = static_cast<AstNode*>((yyvsp[-2].node));
      ::checkOutVariables(parser, variableNamesNode, 1, 2, "SHORTEST_PATH only has one or two return variables", yyloc);
      parser->ast()->scopes()->start(arangodb::aql::AQL_SCOPE_FOR);
      auto variablesNode = ::transformOutputVariables(parser, variableNamesNode);
      auto graphInfoNode = static_cast<AstNode*>((yyvsp[0].node));
      TRI_ASSERT(graphInfoNode != nullptr);
      TRI_ASSERT(graphInfoNode->type == NODE_TYPE_ARRAY);
      auto node = parser->ast()->createNodeShortestPath(variablesNode, graphInfoNode);
      parser->ast()->addOperation(node);
    }
#line 3124 "Aql/grammar.cpp"
    break;

  case 49: /* for_statement: "FOR declaration" for_output_variables "IN keyword" k_shortest_paths_graph_info  */
#line 831 "Aql/grammar.y"
                                                                {
      // K Shortest Paths
      auto variableNamesNode = static_cast<AstNode*>((yyvsp[-2].node));
      ::checkOutVariables(parser, variableNamesNode, 1, 1, "K_SHORTEST_PATHS only has one return variable", yyloc);
      parser->ast()->scopes()->start(arangodb::aql::AQL_SCOPE_FOR);
      auto variablesNode = ::transformOutputVariables(parser, variableNamesNode);
      auto graphInfoNode = static_cast<AstNode*>((yyvsp[0].node));
      TRI_ASSERT(graphInfoNode != nullptr);
      TRI_ASSERT(graphInfoNode->type == NODE_TYPE_ARRAY);
      auto node = parser->ast()->createNodeEnumeratePaths(arangodb::graph::PathType::Type::KShortestPaths, variablesNode, graphInfoNode);
      parser->ast()->addOperation(node);
    }
#line 3141 "Aql/grammar.cpp"
    break;

  case 50: /* for_statement: "FOR declaration" for_output_variables "IN keyword" k_paths_graph_info  */
#line 843 "Aql/grammar.y"
                                                       {
      // K Paths
      auto variableNamesNode = static_cast<AstNode*>((yyvsp[-2].node));
      ::checkOutVariables(parser, variableNamesNode, 1, 1, "K_PATHS only has one return variable", yyloc);
      parser->ast()->scopes()->start(arangodb::aql::AQL_SCOPE_FOR);
      auto variablesNode = ::transformOutputVariables(parser, variableNamesNode);
      auto graphInfoNode = static_cast<AstNode*>((yyvsp[0].node));
      TRI_ASSERT(graphInfoNode != nullptr);
      TRI_ASSERT(graphInfoNode->type == NODE_TYPE_ARRAY);
      auto node = parser->ast()->createNodeEnumeratePaths(arangodb::graph::PathType::Type::KPaths, variablesNode, graphInfoNode);
      parser->ast()->addOperation(node);
    }
#line 3158 "Aql/grammar.cpp"
    break;

  case 51: /* filter_statement: "FILTER declaration" expression  */
#line 858 "Aql/grammar.y"
                        {
      // operand is a reference. can use it directly
      auto node = parser->ast()->createNodeFilter((yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 3168 "Aql/grammar.cpp"
    break;

  case 52: /* let_statement: "LET declaration" let_list  */
#line 866 "Aql/grammar.y"
                   {
    }
#line 3175 "Aql/grammar.cpp"
    break;

  case 53: /* let_list: let_element  */
#line 871 "Aql/grammar.y"
                {
    }
#line 3182 "Aql/grammar.cpp"
    break;

  case 54: /* let_list: let_list "," let_element  */
#line 873 "Aql/grammar.y"
                                 {
    }
#line 3189 "Aql/grammar.cpp"
    break;

  case 55: /* let_element: variable_name "assignment" expression  */
#line 878 "Aql/grammar.y"
                                      {
      auto node = parser->ast()->createNodeLet((yyvsp[-2].strval).value, (yyvsp[-2].strval).length, (yyvsp[0].node), true);
      parser->ast()->addOperation(node);
    }
#line 3198 "Aql/grammar.cpp"
    break;

  case 56: /* count_into: "WITH keyword" "identifier" "INTO keyword" variable_name  */
#line 885 "Aql/grammar.y"
                                         {
      std::string_view operation((yyvsp[-2].strval).value, (yyvsp[-2].strval).length);
      if (!::caseInsensitiveEqual(operation, "COUNT")) {
        parser->registerParseError(TRI_ERROR_QUERY_PARSE, "unexpected qualifier '%s', expecting 'COUNT'", operation, yylloc.first_line, yylloc.first_column);
      }

      (yyval.strval) = (yyvsp[0].strval);
    }
#line 3211 "Aql/grammar.cpp"
    break;

  case 57: /* $@4: %empty  */
#line 896 "Aql/grammar.y"
              {
      auto node = parser->ast()->createNodeArray();
      parser->pushStack(node);
    }
#line 3220 "Aql/grammar.cpp"
    break;

  case 58: /* collect_variable_list: "COLLECT declaration" $@4 collect_list  */
#line 899 "Aql/grammar.y"
                   {
      auto list = static_cast<AstNode*>(parser->popStack());
      TRI_ASSERT(list != nullptr);
      (yyval.node) = list;
    }
#line 3230 "Aql/grammar.cpp"
    break;

  case 59: /* collect_statement: "COLLECT declaration" count_into options  */
#line 907 "Aql/grammar.y"
                                 {
      /* COLLECT WITH COUNT INTO var OPTIONS ... */
      auto scopes = parser->ast()->scopes();

      ::startCollectScope(scopes);

      // in the AST this is transformed to COLLECT AGGREGATE var = COUNT()
      auto node = parser->ast()->createNodeCollectCount(parser->ast()->createNodeArray(), (yyvsp[-1].strval).value, (yyvsp[-1].strval).length, (yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 3245 "Aql/grammar.cpp"
    break;

  case 60: /* collect_statement: collect_variable_list count_into options  */
#line 917 "Aql/grammar.y"
                                             {
      /* COLLECT var = expr WITH COUNT INTO var OPTIONS ... */
      auto scopes = parser->ast()->scopes();

      if (::startCollectScope(scopes)) {
        VarSet variables{};
        ::registerAssignVariables(parser, scopes, yylloc.first_line, yylloc.first_column, variables, (yyvsp[-2].node));
      }

      // in the AST this is transformed to COLLECT var = expr AGGREGATE var = COUNT()
      auto node = parser->ast()->createNodeCollectCount((yyvsp[-2].node), (yyvsp[-1].strval).value, (yyvsp[-1].strval).length, (yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 3263 "Aql/grammar.cpp"
    break;

  case 61: /* collect_statement: "COLLECT declaration" aggregate collect_optional_into options  */
#line 930 "Aql/grammar.y"
                                                      {
      /* AGGREGATE var = expr OPTIONS ... */
      VarSet variablesIntroduced{};
      auto scopes = parser->ast()->scopes();

      if (::startCollectScope(scopes)) {
        ::registerAssignVariables(parser, scopes, yylloc.first_line, yylloc.first_column, variablesIntroduced, (yyvsp[-2].node));
      }

      // validate aggregates
      if (!::validateAggregates(parser, (yyvsp[-2].node), yylloc.first_line, yylloc.first_column)) {
        YYABORT;
      }

      if ((yyvsp[-1].node) != nullptr && (yyvsp[-1].node)->type == NODE_TYPE_ARRAY) {
        ::checkCollectVariables(parser, "INTO", (yyvsp[-1].node)->getMember(1), yylloc.first_line, yylloc.first_column, variablesIntroduced);
      }

      AstNode const* into = ::getIntoVariable(parser, (yyvsp[-1].node));
      AstNode const* intoExpression = ::getIntoExpression((yyvsp[-1].node));

      auto node = parser->ast()->createNodeCollect(parser->ast()->createNodeArray(), (yyvsp[-2].node), into, intoExpression, nullptr, (yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 3292 "Aql/grammar.cpp"
    break;

  case 62: /* collect_statement: collect_variable_list aggregate collect_optional_into options  */
#line 954 "Aql/grammar.y"
                                                                  {
      /* COLLECT var = expr AGGREGATE var = expr OPTIONS ... */
      VarSet variablesIntroduced{};
      auto scopes = parser->ast()->scopes();

      if (::startCollectScope(scopes)) {
        ::registerAssignVariables(parser, scopes, yylloc.first_line, yylloc.first_column, variablesIntroduced, (yyvsp[-3].node));
        ::registerAssignVariables(parser, scopes, yylloc.first_line, yylloc.first_column, variablesIntroduced, (yyvsp[-2].node));
      }

      if (!::validateAggregates(parser, (yyvsp[-2].node), yylloc.first_line, yylloc.first_column)) {
        YYABORT;
      }

      if ((yyvsp[-1].node) != nullptr && (yyvsp[-1].node)->type == NODE_TYPE_ARRAY) {
        ::checkCollectVariables(parser, "INTO", (yyvsp[-1].node)->getMember(1), yylloc.first_line, yylloc.first_column, variablesIntroduced);
      }

      // note all group variables
      VarSet groupVars{};
      size_t n = (yyvsp[-3].node)->numMembers();
      for (size_t i = 0; i < n; ++i) {
        auto member = (yyvsp[-3].node)->getMember(i);

        if (member != nullptr) {
          TRI_ASSERT(member->type == NODE_TYPE_ASSIGN);
          groupVars.emplace(static_cast<Variable const*>(member->getMember(0)->getData()));
        }
      }

      // now validate if any aggregate refers to one of the group variables
      n = (yyvsp[-2].node)->numMembers();
      for (size_t i = 0; i < n; ++i) {
        auto member = (yyvsp[-2].node)->getMember(i);

        if (member != nullptr) {
          TRI_ASSERT(member->type == NODE_TYPE_ASSIGN);
          VarSet variablesUsed{};
          Ast::getReferencedVariables(member->getMember(1), variablesUsed);

          for (auto& it : groupVars) {
            if (variablesUsed.find(it) != variablesUsed.end()) {
              parser->registerParseError(TRI_ERROR_QUERY_VARIABLE_NAME_UNKNOWN,
                "use of unknown variable '%s' in AGGREGATE expression", it->name, yylloc.first_line, yylloc.first_column);
              break;
            }
          }
        }
      }

      AstNode const* into = ::getIntoVariable(parser, (yyvsp[-1].node));
      AstNode const* intoExpression = ::getIntoExpression((yyvsp[-1].node));

      auto node = parser->ast()->createNodeCollect((yyvsp[-3].node), (yyvsp[-2].node), into, intoExpression, nullptr, (yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 3353 "Aql/grammar.cpp"
    break;

  case 63: /* collect_statement: collect_variable_list collect_optional_into options  */
#line 1010 "Aql/grammar.y"
                                                        {
      /* COLLECT var = expr INTO var OPTIONS ... */
      VarSet variablesIntroduced{};
      auto scopes = parser->ast()->scopes();

      if (::startCollectScope(scopes)) {
        ::registerAssignVariables(parser, scopes, yylloc.first_line, yylloc.first_column, variablesIntroduced, (yyvsp[-2].node));
      }

      if ((yyvsp[-1].node) != nullptr && (yyvsp[-1].node)->type == NODE_TYPE_ARRAY) {
        ::checkCollectVariables(parser, "INTO", (yyvsp[-1].node)->getMember(1), yylloc.first_line, yylloc.first_column, variablesIntroduced);
      }

      AstNode const* into = ::getIntoVariable(parser, (yyvsp[-1].node));
      AstNode const* intoExpression = ::getIntoExpression((yyvsp[-1].node));

      auto node = parser->ast()->createNodeCollect((yyvsp[-2].node), parser->ast()->createNodeArray(), into, intoExpression, nullptr, (yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 3377 "Aql/grammar.cpp"
    break;

  case 64: /* collect_statement: collect_variable_list collect_optional_into keep options  */
#line 1029 "Aql/grammar.y"
                                                             {
      /* COLLECT var = expr INTO var KEEP ... OPTIONS ... */
      VarSet variablesIntroduced{};
      auto scopes = parser->ast()->scopes();

      if (::startCollectScope(scopes)) {
        ::registerAssignVariables(parser, scopes, yylloc.first_line, yylloc.first_column, variablesIntroduced, (yyvsp[-3].node));
      }

      if ((yyvsp[-2].node) == nullptr &&
          (yyvsp[-1].node) != nullptr) {
        parser->registerParseError(TRI_ERROR_QUERY_PARSE, "use of 'KEEP' without 'INTO'", yylloc.first_line, yylloc.first_column);
      }

      if ((yyvsp[-2].node) != nullptr && (yyvsp[-2].node)->type == NODE_TYPE_ARRAY) {
        ::checkCollectVariables(parser, "INTO", (yyvsp[-2].node)->getMember(1), yylloc.first_line, yylloc.first_column, variablesIntroduced);
      }
        
      if ((yyvsp[-1].node) != nullptr && (yyvsp[-1].node)->type == NODE_TYPE_ARRAY) {
        ::checkCollectVariables(parser, "KEEP", (yyvsp[-1].node), yylloc.first_line, yylloc.first_column, variablesIntroduced);
      }

      AstNode const* into = ::getIntoVariable(parser, (yyvsp[-2].node));
      AstNode const* intoExpression = ::getIntoExpression((yyvsp[-2].node));

      auto node = parser->ast()->createNodeCollect((yyvsp[-3].node), parser->ast()->createNodeArray(), into, intoExpression, (yyvsp[-1].node), (yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 3410 "Aql/grammar.cpp"
    break;

  case 65: /* collect_list: collect_element  */
#line 1060 "Aql/grammar.y"
                    {
    }
#line 3417 "Aql/grammar.cpp"
    break;

  case 66: /* collect_list: collect_list "," collect_element  */
#line 1062 "Aql/grammar.y"
                                         {
    }
#line 3424 "Aql/grammar.cpp"
    break;

  case 67: /* collect_element: variable_name "assignment" expression  */
#line 1067 "Aql/grammar.y"
                                      {
      auto node = parser->ast()->createNodeAssign((yyvsp[-2].strval).value, (yyvsp[-2].strval).length, (yyvsp[0].node));
      parser->pushArrayElement(node);
    }
#line 3433 "Aql/grammar.cpp"
    break;

  case 68: /* collect_optional_into: %empty  */
#line 1074 "Aql/grammar.y"
                {
      (yyval.node) = nullptr;
    }
#line 3441 "Aql/grammar.cpp"
    break;

  case 69: /* collect_optional_into: "INTO keyword" variable_name  */
#line 1077 "Aql/grammar.y"
                         {
      (yyval.node) = parser->ast()->createNodeValueString((yyvsp[0].strval).value, (yyvsp[0].strval).length);
    }
#line 3449 "Aql/grammar.cpp"
    break;

  case 70: /* collect_optional_into: "INTO keyword" variable_name "assignment" expression  */
#line 1080 "Aql/grammar.y"
                                             {
      auto node = parser->ast()->createNodeArray();
      node->addMember(parser->ast()->createNodeValueString((yyvsp[-2].strval).value, (yyvsp[-2].strval).length));
      node->addMember((yyvsp[0].node));
      (yyval.node) = node;
    }
#line 3460 "Aql/grammar.cpp"
    break;

  case 71: /* variable_list: variable_name  */
#line 1089 "Aql/grammar.y"
                  {
      std::string_view variableName((yyvsp[0].strval).value, (yyvsp[0].strval).length);
      if (! parser->ast()->scopes()->existsVariable(variableName)) {
        parser->registerParseError(TRI_ERROR_QUERY_PARSE, "use of unknown variable '%s' for KEEP", variableName, yylloc.first_line, yylloc.first_column);
      }

      auto node = parser->ast()->createNodeReference(variableName);
      TRI_ASSERT(node != nullptr);

      // indicate the this node is a reference to the variable name, not the variable value
      node->setFlag(FLAG_KEEP_VARIABLENAME);
      parser->pushArrayElement(node);
    }
#line 3478 "Aql/grammar.cpp"
    break;

  case 72: /* variable_list: variable_list "," variable_name  */
#line 1102 "Aql/grammar.y"
                                        {
      std::string_view variableName((yyvsp[0].strval).value, (yyvsp[0].strval).length);
      if (! parser->ast()->scopes()->existsVariable(variableName)) {
        parser->registerParseError(TRI_ERROR_QUERY_PARSE, "use of unknown variable '%s' for KEEP", variableName, yylloc.first_line, yylloc.first_column);
      }

      auto node = parser->ast()->createNodeReference(variableName);
      TRI_ASSERT(node != nullptr);

      // indicate the this node is a reference to the variable name, not the variable value
      node->setFlag(FLAG_KEEP_VARIABLENAME);
      parser->pushArrayElement(node);
    }
#line 3496 "Aql/grammar.cpp"
    break;

  case 73: /* $@5: %empty  */
#line 1118 "Aql/grammar.y"
             {
      std::string_view operation((yyvsp[0].strval).value, (yyvsp[0].strval).length);
      if (!::caseInsensitiveEqual(operation, "KEEP")) {
        parser->registerParseError(TRI_ERROR_QUERY_PARSE, "unexpected qualifier '%s', expecting 'KEEP'", operation, yylloc.first_line, yylloc.first_column);
      }

      auto node = parser->ast()->createNodeArray();
      parser->pushStack(node);
    }
#line 3510 "Aql/grammar.cpp"
    break;

  case 74: /* keep: "identifier" $@5 variable_list  */
#line 1126 "Aql/grammar.y"
                    {
      auto list = static_cast<AstNode*>(parser->popStack());
      (yyval.node) = list;
    }
#line 3519 "Aql/grammar.cpp"
    break;

  case 75: /* $@6: %empty  */
#line 1133 "Aql/grammar.y"
                {
      auto node = parser->ast()->createNodeArray();
      parser->pushStack(node);
    }
#line 3528 "Aql/grammar.cpp"
    break;

  case 76: /* aggregate: "AGGREGATE keyword" $@6 aggregate_list  */
#line 1136 "Aql/grammar.y"
                     {
      auto list = static_cast<AstNode*>(parser->popStack());
      (yyval.node) = list;
    }
#line 3537 "Aql/grammar.cpp"
    break;

  case 77: /* aggregate_list: aggregate_element  */
#line 1143 "Aql/grammar.y"
                      {
    }
#line 3544 "Aql/grammar.cpp"
    break;

  case 78: /* aggregate_list: aggregate_list "," aggregate_element  */
#line 1145 "Aql/grammar.y"
                                             {
    }
#line 3551 "Aql/grammar.cpp"
    break;

  case 79: /* aggregate_element: variable_name "assignment" aggregate_function_call  */
#line 1150 "Aql/grammar.y"
                                                   {
      auto node = parser->ast()->createNodeAssign((yyvsp[-2].strval).value, (yyvsp[-2].strval).length, (yyvsp[0].node));
      parser->pushArrayElement(node);
    }
#line 3560 "Aql/grammar.cpp"
    break;

  case 80: /* $@7: %empty  */
#line 1157 "Aql/grammar.y"
                         {
      parser->pushStack((yyvsp[-1].strval).value);
      auto node = parser->ast()->createNodeArray();
      parser->pushStack(node);
    }
#line 3570 "Aql/grammar.cpp"
    break;

  case 81: /* aggregate_function_call: function_name "(" $@7 optional_function_call_arguments ")"  */
#line 1161 "Aql/grammar.y"
                                                              {
      auto list = static_cast<AstNode const*>(parser->popStack());
      // this works because the function name here is always NUL-terminated
      (yyval.node) = parser->ast()->createNodeAggregateFunctionCall(static_cast<char const*>(parser->popStack()), list);
    }
#line 3580 "Aql/grammar.cpp"
    break;

  case 82: /* $@8: %empty  */
#line 1169 "Aql/grammar.y"
           {
      auto node = parser->ast()->createNodeArray();
      parser->pushStack(node);
    }
#line 3589 "Aql/grammar.cpp"
    break;

  case 83: /* sort_statement: "SORT declaration" $@8 sort_list  */
#line 1172 "Aql/grammar.y"
                {
      auto list = static_cast<AstNode const*>(parser->popStack());
      auto node = parser->ast()->createNodeSort(list);
      parser->ast()->addOperation(node);
    }
#line 3599 "Aql/grammar.cpp"
    break;

  case 84: /* sort_list: sort_element  */
#line 1180 "Aql/grammar.y"
                 {
      parser->pushArrayElement((yyvsp[0].node));
    }
#line 3607 "Aql/grammar.cpp"
    break;

  case 85: /* sort_list: sort_list "," sort_element  */
#line 1183 "Aql/grammar.y"
                                   {
      parser->pushArrayElement((yyvsp[0].node));
    }
#line 3615 "Aql/grammar.cpp"
    break;

  case 86: /* sort_element: expression sort_direction  */
#line 1189 "Aql/grammar.y"
                              {
      (yyval.node) = parser->ast()->createNodeSortElement((yyvsp[-1].node), (yyvsp[0].node));
    }
#line 3623 "Aql/grammar.cpp"
    break;

  case 87: /* sort_direction: %empty  */
#line 1195 "Aql/grammar.y"
                {
      (yyval.node) = parser->ast()->createNodeValueBool(true);
    }
#line 3631 "Aql/grammar.cpp"
    break;

  case 88: /* sort_direction: "ASC keyword"  */
#line 1198 "Aql/grammar.y"
          {
      (yyval.node) = parser->ast()->createNodeValueBool(true);
    }
#line 3639 "Aql/grammar.cpp"
    break;

  case 89: /* sort_direction: "DESC keyword"  */
#line 1201 "Aql/grammar.y"
           {
      (yyval.node) = parser->ast()->createNodeValueBool(false);
    }
#line 3647 "Aql/grammar.cpp"
    break;

  case 90: /* sort_direction: simple_value  */
#line 1204 "Aql/grammar.y"
                 {
      (yyval.node) = (yyvsp[0].node);
    }
#line 3655 "Aql/grammar.cpp"
    break;

  case 91: /* limit_statement: "LIMIT declaration" expression  */
#line 1210 "Aql/grammar.y"
                       {
      auto offset = parser->ast()->createNodeValueInt(0);
      auto node = parser->ast()->createNodeLimit(offset, (yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 3665 "Aql/grammar.cpp"
    break;

  case 92: /* limit_statement: "LIMIT declaration" expression "," expression  */
#line 1215 "Aql/grammar.y"
                                          {
      auto node = parser->ast()->createNodeLimit((yyvsp[-2].node), (yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 3674 "Aql/grammar.cpp"
    break;

  case 93: /* window_statement: "WINDOW declaration" object aggregate  */
#line 1222 "Aql/grammar.y"
                              {
      /* WINDOW {preceding:2, following:2} AGGREGATE x = AVG(x) */
      
      // validate aggregates
      if (!::validateAggregates(parser, (yyvsp[0].node), yylloc.first_line, yylloc.first_column)) {
        YYABORT;
      }
      
      if (!::validateWindowSpec(parser, (yyvsp[-1].node), yylloc.first_line, yylloc.first_column)) {
        YYABORT;
      }
      
      auto node = parser->ast()->createNodeWindow(/*spec*/(yyvsp[-1].node), /*range*/nullptr, /*aggrs*/(yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 3694 "Aql/grammar.cpp"
    break;

  case 94: /* window_statement: "WINDOW declaration" expression "WITH keyword" object aggregate  */
#line 1237 "Aql/grammar.y"
                                                {
    /* WINDOW rangeVar WITH {preceding:"1d", following:"1d"} AGGREGATE x = AVG(x) */
    
    // validate aggregates
    if (!::validateAggregates(parser, (yyvsp[0].node), yylloc.first_line, yylloc.first_column)) {
      YYABORT;
    }
    
    if (!::validateWindowSpec(parser, (yyvsp[-1].node), yylloc.first_line, yylloc.first_column)) {
      YYABORT;
    }
    
    auto node = parser->ast()->createNodeWindow(/*spec*/(yyvsp[-1].node), /*range*/(yyvsp[-3].node), /*aggrs*/(yyvsp[0].node));
    parser->ast()->addOperation(node);
  }
#line 3714 "Aql/grammar.cpp"
    break;

  case 95: /* return_statement: "RETURN declaration" distinct_expression  */
#line 1255 "Aql/grammar.y"
                                 {
      auto node = parser->ast()->createNodeReturn((yyvsp[0].node));
      parser->ast()->addOperation(node);
      parser->ast()->scopes()->endNested();
    }
#line 3724 "Aql/grammar.cpp"
    break;

  case 96: /* in_or_into_collection: "IN keyword" in_or_into_collection_name  */
#line 1263 "Aql/grammar.y"
                                    {
      (yyval.node) = (yyvsp[0].node);
    }
#line 3732 "Aql/grammar.cpp"
    break;

  case 97: /* in_or_into_collection: "INTO keyword" in_or_into_collection_name  */
#line 1266 "Aql/grammar.y"
                                      {
       (yyval.node) = (yyvsp[0].node);
     }
#line 3740 "Aql/grammar.cpp"
    break;

  case 98: /* remove_statement: "REMOVE command" expression in_or_into_collection options  */
#line 1272 "Aql/grammar.y"
                                                      {
      if (!parser->configureWriteQuery((yyvsp[-1].node), (yyvsp[0].node))) {
        YYABORT;
      }
      auto node = parser->ast()->createNodeRemove((yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 3752 "Aql/grammar.cpp"
    break;

  case 99: /* insert_statement: "INSERT command" expression in_or_into_collection options  */
#line 1282 "Aql/grammar.y"
                                                      {
      if (!parser->configureWriteQuery((yyvsp[-1].node), (yyvsp[0].node))) {
        YYABORT;
      }
      auto node = parser->ast()->createNodeInsert((yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 3764 "Aql/grammar.cpp"
    break;

  case 100: /* update_parameters: expression in_or_into_collection options  */
#line 1292 "Aql/grammar.y"
                                             {
      if (!parser->configureWriteQuery((yyvsp[-1].node), (yyvsp[0].node))) {
        YYABORT;
      }

      AstNode* node = parser->ast()->createNodeUpdate(nullptr, (yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 3777 "Aql/grammar.cpp"
    break;

  case 101: /* update_parameters: expression "WITH keyword" expression in_or_into_collection options  */
#line 1300 "Aql/grammar.y"
                                                               {
      if (!parser->configureWriteQuery((yyvsp[-1].node), (yyvsp[0].node))) {
        YYABORT;
      }

      AstNode* node = parser->ast()->createNodeUpdate((yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 3790 "Aql/grammar.cpp"
    break;

  case 102: /* update_statement: "UPDATE command" update_parameters  */
#line 1311 "Aql/grammar.y"
                               {
    }
#line 3797 "Aql/grammar.cpp"
    break;

  case 103: /* replace_parameters: expression in_or_into_collection options  */
#line 1316 "Aql/grammar.y"
                                             {
      if (!parser->configureWriteQuery((yyvsp[-1].node), (yyvsp[0].node))) {
        YYABORT;
      }

      AstNode* node = parser->ast()->createNodeReplace(nullptr, (yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 3810 "Aql/grammar.cpp"
    break;

  case 104: /* replace_parameters: expression "WITH keyword" expression in_or_into_collection options  */
#line 1324 "Aql/grammar.y"
                                                               {
      if (!parser->configureWriteQuery((yyvsp[-1].node), (yyvsp[0].node))) {
        YYABORT;
      }

      AstNode* node = parser->ast()->createNodeReplace((yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 3823 "Aql/grammar.cpp"
    break;

  case 105: /* replace_statement: "REPLACE command" replace_parameters  */
#line 1335 "Aql/grammar.y"
                                 {
    }
#line 3830 "Aql/grammar.cpp"
    break;

  case 106: /* update_or_replace: "UPDATE command"  */
#line 1340 "Aql/grammar.y"
             {
      (yyval.intval) = static_cast<int64_t>(NODE_TYPE_UPDATE);
    }
#line 3838 "Aql/grammar.cpp"
    break;

  case 107: /* update_or_replace: "REPLACE command"  */
#line 1343 "Aql/grammar.y"
              {
      (yyval.intval) = static_cast<int64_t>(NODE_TYPE_REPLACE);
    }
#line 3846 "Aql/grammar.cpp"
    break;

  case 108: /* $@9: %empty  */
#line 1349 "Aql/grammar.y"
             {
      // reserve a variable named "$OLD", we might need it in the update expression
      // and in a later return thing
      parser->pushStack(parser->ast()->createNodeVariable(Variable::NAME_OLD, true));
    }
#line 3856 "Aql/grammar.cpp"
    break;

  case 109: /* $@10: %empty  */
#line 1353 "Aql/grammar.y"
                 {
      AstNode* variableNode = static_cast<AstNode*>(parser->popStack());

      auto scopes = parser->ast()->scopes();

      scopes->start(arangodb::aql::AQL_SCOPE_SUBQUERY);
      parser->ast()->startSubQuery();

      scopes->start(arangodb::aql::AQL_SCOPE_FOR);
      std::string const variableName = parser->ast()->variables()->nextName();
      auto forNode = parser->ast()->createNodeForUpsert(variableName.c_str(), variableName.size(), parser->ast()->createNodeArray(), false);
      parser->ast()->addOperation(forNode);

      auto filterNode = parser->ast()->createNodeUpsertFilter(parser->ast()->createNodeReference(variableName), (yyvsp[0].node));
      parser->ast()->addOperation(filterNode);

      auto offsetValue = parser->ast()->createNodeValueInt(0);
      auto limitValue = parser->ast()->createNodeValueInt(1);
      auto limitNode = parser->ast()->createNodeLimit(offsetValue, limitValue);
      parser->ast()->addOperation(limitNode);

      auto refNode = parser->ast()->createNodeReference(variableName);
      auto returnNode = parser->ast()->createNodeReturn(refNode);
      parser->ast()->addOperation(returnNode);
      scopes->endNested();

      AstNode* subqueryNode = parser->ast()->endSubQuery();
      scopes->endCurrent();

      std::string const subqueryName = parser->ast()->variables()->nextName();
      auto subQuery = parser->ast()->createNodeLet(subqueryName.c_str(), subqueryName.size(), subqueryNode, false);
      parser->ast()->addOperation(subQuery);

      auto index = parser->ast()->createNodeValueInt(0);
      auto firstDoc = parser->ast()->createNodeLet(variableNode, parser->ast()->createNodeIndexedAccess(parser->ast()->createNodeReference(subqueryName), index));
      parser->ast()->addOperation(firstDoc);

      parser->pushStack(forNode);
    }
#line 3900 "Aql/grammar.cpp"
    break;

  case 110: /* upsert_statement: "UPSERT command" $@9 expression $@10 "INSERT command" expression update_or_replace expression in_or_into_collection options  */
#line 1391 "Aql/grammar.y"
                                                                                     {
      AstNode* forNode = static_cast<AstNode*>(parser->popStack());
      forNode->changeMember(1, (yyvsp[-1].node));
      auto* forOptionsNode = parser->ast()->createNodeObject();
      auto* upsertOptionsNode = parser->ast()->createNodeObject();
      if ((yyvsp[0].node) != nullptr && (yyvsp[0].node)->type == NODE_TYPE_OBJECT) {
        for (size_t i = 0; i < (yyvsp[0].node)->numMembers(); ++i) {
          auto nodeMember = (yyvsp[0].node)->getMember(i);
          if (nodeMember->type == NODE_TYPE_OBJECT_ELEMENT) {
            std::string_view nodeMemberName = nodeMember->getStringView();
            if (nodeMemberName == arangodb::StaticStrings::IndexHintOption || 
                nodeMemberName == arangodb::StaticStrings::IndexHintOptionForce ||
                nodeMemberName == arangodb::StaticStrings::IndexHintDisableIndex ||
                nodeMemberName == arangodb::StaticStrings::UseCache) {
              forOptionsNode->addMember(nodeMember);
            } else {
              upsertOptionsNode->addMember(nodeMember);
            }
          }
        }
        forNode->changeMember(2, forOptionsNode);
      }
      if (!parser->configureWriteQuery((yyvsp[-1].node), (yyvsp[0].node))) {
        YYABORT;
      }

      auto node = parser->ast()->createNodeUpsert(static_cast<AstNodeType>((yyvsp[-3].intval)), parser->ast()->createNodeReference(Variable::NAME_OLD), (yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[-1].node), upsertOptionsNode);
      parser->ast()->addOperation(node);
    }
#line 3934 "Aql/grammar.cpp"
    break;

  case 111: /* quantifier: "all modifier"  */
#line 1423 "Aql/grammar.y"
          {
      (yyval.node) = parser->ast()->createNodeQuantifier(Quantifier::Type::kAll);
    }
#line 3942 "Aql/grammar.cpp"
    break;

  case 112: /* quantifier: "any modifier"  */
#line 1426 "Aql/grammar.y"
          {
      (yyval.node) = parser->ast()->createNodeQuantifier(Quantifier::Type::kAny);
    }
#line 3950 "Aql/grammar.cpp"
    break;

  case 113: /* quantifier: "none modifier"  */
#line 1429 "Aql/grammar.y"
           {
      (yyval.node) = parser->ast()->createNodeQuantifier(Quantifier::Type::kNone);
    }
#line 3958 "Aql/grammar.cpp"
    break;

  case 114: /* $@11: %empty  */
#line 1435 "Aql/grammar.y"
               {
      auto const scopeType = parser->ast()->scopes()->type();

      if (scopeType == AQL_SCOPE_MAIN ||
          scopeType == AQL_SCOPE_SUBQUERY) {
        parser->registerParseError(TRI_ERROR_QUERY_PARSE, "cannot use DISTINCT modifier on top-level query element", yylloc.first_line, yylloc.first_column);
      }
    }
#line 3971 "Aql/grammar.cpp"
    break;

  case 115: /* distinct_expression: "DISTINCT modifier" $@11 expression  */
#line 1442 "Aql/grammar.y"
                 {
      (yyval.node) = parser->ast()->createNodeDistinct((yyvsp[0].node));
    }
#line 3979 "Aql/grammar.cpp"
    break;

  case 116: /* distinct_expression: expression  */
#line 1445 "Aql/grammar.y"
               {
      (yyval.node) = (yyvsp[0].node);
    }
#line 3987 "Aql/grammar.cpp"
    break;

  case 117: /* expression: operator_unary  */
#line 1451 "Aql/grammar.y"
                   {
      (yyval.node) = (yyvsp[0].node);
    }
#line 3995 "Aql/grammar.cpp"
    break;

  case 118: /* expression: operator_binary  */
#line 1454 "Aql/grammar.y"
                    {
      (yyval.node) = (yyvsp[0].node);
    }
#line 4003 "Aql/grammar.cpp"
    break;

  case 119: /* expression: operator_ternary  */
#line 1457 "Aql/grammar.y"
                     {
      (yyval.node) = (yyvsp[0].node);
    }
#line 4011 "Aql/grammar.cpp"
    break;

  case 120: /* expression: value_literal  */
#line 1460 "Aql/grammar.y"
                  {
      (yyval.node) = (yyvsp[0].node);
    }
#line 4019 "Aql/grammar.cpp"
    break;

  case 121: /* expression: reference  */
#line 1463 "Aql/grammar.y"
              {
      (yyval.node) = (yyvsp[0].node);
    }
#line 4027 "Aql/grammar.cpp"
    break;

  case 122: /* expression: expression ".." expression  */
#line 1466 "Aql/grammar.y"
                                  {
      (yyval.node) = parser->ast()->createNodeRange((yyvsp[-2].node), (yyvsp[0].node));
    }
#line 4035 "Aql/grammar.cpp"
    break;

  case 123: /* function_name: "identifier"  */
#line 1472 "Aql/grammar.y"
             {
      (yyval.strval) = (yyvsp[0].strval);
    }
#line 4043 "Aql/grammar.cpp"
    break;

  case 124: /* function_name: function_name "::" "identifier"  */
#line 1475 "Aql/grammar.y"
                                   {
      std::string temp((yyvsp[-2].strval).value, (yyvsp[-2].strval).length);
      temp.append("::");
      temp.append((yyvsp[0].strval).value, (yyvsp[0].strval).length);
      auto p = parser->ast()->resources().registerString(temp);
      TRI_ASSERT(p != nullptr);

      (yyval.strval).value = p;
      (yyval.strval).length = temp.size();
    }
#line 4058 "Aql/grammar.cpp"
    break;

  case 125: /* $@12: %empty  */
#line 1488 "Aql/grammar.y"
                         {
      parser->pushStack((yyvsp[-1].strval).value);

      auto node = parser->ast()->createNodeArray();
      parser->pushStack(node);
    }
#line 4069 "Aql/grammar.cpp"
    break;

  case 126: /* function_call: function_name "(" $@12 optional_function_call_arguments ")"  */
#line 1493 "Aql/grammar.y"
                                                              {
      auto list = static_cast<AstNode const*>(parser->popStack());
      (yyval.node) = parser->ast()->createNodeFunctionCall(static_cast<char const*>(parser->popStack()), list, false);
    }
#line 4078 "Aql/grammar.cpp"
    break;

  case 127: /* $@13: %empty  */
#line 1497 "Aql/grammar.y"
                  {
      auto node = parser->ast()->createNodeArray();
      parser->pushStack(node);
    }
#line 4087 "Aql/grammar.cpp"
    break;

  case 128: /* function_call: "like operator" "(" $@13 optional_function_call_arguments ")"  */
#line 1500 "Aql/grammar.y"
                                                              {
      auto list = static_cast<AstNode const*>(parser->popStack());
      (yyval.node) = parser->ast()->createNodeFunctionCall("LIKE", list, false);
    }
#line 4096 "Aql/grammar.cpp"
    break;

  case 129: /* operator_unary: "+ operator" expression  */
#line 1507 "Aql/grammar.y"
                                  {
      (yyval.node) = parser->ast()->optimizeUnaryOperatorArithmetic(parser->ast()->createNodeUnaryOperator(NODE_TYPE_OPERATOR_UNARY_PLUS, (yyvsp[0].node)));
    }
#line 4104 "Aql/grammar.cpp"
    break;

  case 130: /* operator_unary: "- operator" expression  */
#line 1510 "Aql/grammar.y"
                                    {
      (yyval.node) = parser->ast()->optimizeUnaryOperatorArithmetic(parser->ast()->createNodeUnaryOperator(NODE_TYPE_OPERATOR_UNARY_MINUS, (yyvsp[0].node)));
    }
#line 4112 "Aql/grammar.cpp"
    break;

  case 131: /* operator_unary: "not operator" expression  */
#line 1513 "Aql/grammar.y"
                                     {
      (yyval.node) = parser->ast()->createNodeUnaryOperator(NODE_TYPE_OPERATOR_UNARY_NOT, (yyvsp[0].node));
    }
#line 4120 "Aql/grammar.cpp"
    break;

  case 132: /* operator_binary: expression "or operator" expression  */
#line 1519 "Aql/grammar.y"
                               {
      (yyval.node) = parser->ast()->createNodeBinaryOperator(NODE_TYPE_OPERATOR_BINARY_OR, (yyvsp[-2].node), (yyvsp[0].node));
    }
#line 4128 "Aql/grammar.cpp"
    break;

  case 133: /* operator_binary: expression "and operator" expression  */
#line 1522 "Aql/grammar.y"
                                {
      (yyval.node) = parser->ast()->createNodeBinaryOperator(NODE_TYPE_OPERATOR_BINARY_AND, (yyvsp[-2].node), (yyvsp[0].node));
    }
#line 4136 "Aql/grammar.cpp"
    break;

  case 134: /* operator_binary: expression "+ operator" expression  */
#line 1525 "Aql/grammar.y"
                                 {
      (yyval.node) = parser->ast()->createNodeBinaryOperator(NODE_TYPE_OPERATOR_BINARY_PLUS, (yyvsp[-2].node), (yyvsp[0].node));
    }
#line 4144 "Aql/grammar.cpp"
    break;

  case 135: /* operator_binary: expression "- operator" expression  */
#line 1528 "Aql/grammar.y"
                                  {
      (yyval.node) = parser->ast()->createNodeBinaryOperator(NODE_TYPE_OPERATOR_BINARY_MINUS, (yyvsp[-2].node), (yyvsp[0].node));
    }
#line 4152 "Aql/grammar.cpp"
    break;

  case 136: /* operator_binary: expression "* operator" expression  */
#line 1531 "Aql/grammar.y"
                                  {
      (yyval.node) = parser->ast()->createNodeBinaryOperator(NODE_TYPE_OPERATOR_BINARY_TIMES, (yyvsp[-2].node), (yyvsp[0].node));
    }
#line 4160 "Aql/grammar.cpp"
    break;

  case 137: /* operator_binary: expression "/ operator" expression  */
#line 1534 "Aql/grammar.y"
                                {
      (yyval.node) = parser->ast()->createNodeBinaryOperator(NODE_TYPE_OPERATOR_BINARY_DIV, (yyvsp[-2].node), (yyvsp[0].node));
    }
#line 4168 "Aql/grammar.cpp"
    break;

  case 138: /* operator_binary: expression "% operator" expression  */
#line 1537 "Aql/grammar.y"
                                {
      (yyval.node) = parser->ast()->createNodeBinaryOperator(NODE_TYPE_OPERATOR_BINARY_MOD, (yyvsp[-2].node), (yyvsp[0].node));
    }
#line 4176 "Aql/grammar.cpp"
    break;

  case 139: /* operator_binary: expression "== operator" expression  */
#line 1540 "Aql/grammar.y"
                               {
      (yyval.node) = parser->ast()->createNodeBinaryOperator(NODE_TYPE_OPERATOR_BINARY_EQ, (yyvsp[-2].node), (yyvsp[0].node));
    }
#line 4184 "Aql/grammar.cpp"
    break;

  case 140: /* operator_binary: expression "!= operator" expression  */
#line 1543 "Aql/grammar.y"
                               {
      (yyval.node) = parser->ast()->createNodeBinaryOperator(NODE_TYPE_OPERATOR_BINARY_NE, (yyvsp[-2].node), (yyvsp[0].node));
    }
#line 4192 "Aql/grammar.cpp"
    break;

  case 141: /* operator_binary: expression "< operator" expression  */
#line 1546 "Aql/grammar.y"
                               {
      (yyval.node) = parser->ast()->createNodeBinaryOperator(NODE_TYPE_OPERATOR_BINARY_LT, (yyvsp[-2].node), (yyvsp[0].node));
    }
#line 4200 "Aql/grammar.cpp"
    break;

  case 142: /* operator_binary: expression "> operator" expression  */
#line 1549 "Aql/grammar.y"
                               {
      (yyval.node) = parser->ast()->createNodeBinaryOperator(NODE_TYPE_OPERATOR_BINARY_GT, (yyvsp[-2].node), (yyvsp[0].node));
    }
#line 4208 "Aql/grammar.cpp"
    break;

  case 143: /* operator_binary: expression "<= operator" expression  */
#line 1552 "Aql/grammar.y"
                               {
      (yyval.node) = parser->ast()->createNodeBinaryOperator(NODE_TYPE_OPERATOR_BINARY_LE, (yyvsp[-2].node), (yyvsp[0].node));
    }
#line 4216 "Aql/grammar.cpp"
    break;

  case 144: /* operator_binary: expression ">= operator" expression  */
#line 1555 "Aql/grammar.y"
                               {
      (yyval.node) = parser->ast()->createNodeBinaryOperator(NODE_TYPE_OPERATOR_BINARY_GE, (yyvsp[-2].node), (yyvsp[0].node));
    }
#line 4224 "Aql/grammar.cpp"
    break;

  case 145: /* operator_binary: expression "IN keyword" expression  */
#line 1558 "Aql/grammar.y"
                               {
      (yyval.node) = parser->ast()->createNodeBinaryOperator(NODE_TYPE_OPERATOR_BINARY_IN, (yyvsp[-2].node), (yyvsp[0].node));
    }
#line 4232 "Aql/grammar.cpp"
    break;

  case 146: /* operator_binary: expression "not in operator" expression  */
#line 1561 "Aql/grammar.y"
                                   {
      (yyval.node) = parser->ast()->createNodeBinaryOperator(NODE_TYPE_OPERATOR_BINARY_NIN, (yyvsp[-2].node), (yyvsp[0].node));
    }
#line 4240 "Aql/grammar.cpp"
    break;

  case 147: /* operator_binary: expression "not operator" "like operator" expression  */
#line 1564 "Aql/grammar.y"
                                       {
      AstNode* arguments = parser->ast()->createNodeArray(2);
      arguments->addMember((yyvsp[-3].node));
      arguments->addMember((yyvsp[0].node));
      AstNode* expression = parser->ast()->createNodeFunctionCall("LIKE", arguments, false);
      (yyval.node) = parser->ast()->createNodeUnaryOperator(NODE_TYPE_OPERATOR_UNARY_NOT, expression);
    }
#line 4252 "Aql/grammar.cpp"
    break;

  case 148: /* operator_binary: expression "not operator" "~= operator" expression  */
#line 1571 "Aql/grammar.y"
                                              {
      AstNode* arguments = parser->ast()->createNodeArray(2);
      arguments->addMember((yyvsp[-3].node));
      arguments->addMember((yyvsp[0].node));
      AstNode* expression = parser->ast()->createNodeFunctionCall("REGEX_TEST", arguments, false);
      (yyval.node) = parser->ast()->createNodeUnaryOperator(NODE_TYPE_OPERATOR_UNARY_NOT, expression);
    }
#line 4264 "Aql/grammar.cpp"
    break;

  case 149: /* operator_binary: expression "not operator" "~! operator" expression  */
#line 1578 "Aql/grammar.y"
                                                  {
      AstNode* arguments = parser->ast()->createNodeArray(2);
      arguments->addMember((yyvsp[-3].node));
      arguments->addMember((yyvsp[0].node));
      (yyval.node) = parser->ast()->createNodeFunctionCall("REGEX_TEST", arguments, false);
    }
#line 4275 "Aql/grammar.cpp"
    break;

  case 150: /* operator_binary: expression "like operator" expression  */
#line 1584 "Aql/grammar.y"
                                 {
      AstNode* arguments = parser->ast()->createNodeArray(2);
      arguments->addMember((yyvsp[-2].node));
      arguments->addMember((yyvsp[0].node));
      (yyval.node) = parser->ast()->createNodeFunctionCall("LIKE", arguments, false);
    }
#line 4286 "Aql/grammar.cpp"
    break;

  case 151: /* operator_binary: expression "~= operator" expression  */
#line 1590 "Aql/grammar.y"
                                        {
      AstNode* arguments = parser->ast()->createNodeArray(2);
      arguments->addMember((yyvsp[-2].node));
      arguments->addMember((yyvsp[0].node));
      (yyval.node) = parser->ast()->createNodeFunctionCall("REGEX_TEST", arguments, false);
    }
#line 4297 "Aql/grammar.cpp"
    break;

  case 152: /* operator_binary: expression "~! operator" expression  */
#line 1596 "Aql/grammar.y"
                                            {
      AstNode* arguments = parser->ast()->createNodeArray(2);
      arguments->addMember((yyvsp[-2].node));
      arguments->addMember((yyvsp[0].node));
      AstNode* node = parser->ast()->createNodeFunctionCall("REGEX_TEST", arguments, false);
      (yyval.node) = parser->ast()->createNodeUnaryOperator(NODE_TYPE_OPERATOR_UNARY_NOT, node);
    }
#line 4309 "Aql/grammar.cpp"
    break;

  case 153: /* operator_binary: expression quantifier "== operator" expression  */
#line 1603 "Aql/grammar.y"
                                          {
      (yyval.node) = parser->ast()->createNodeBinaryArrayOperator(NODE_TYPE_OPERATOR_BINARY_ARRAY_EQ, (yyvsp[-3].node), (yyvsp[0].node), (yyvsp[-2].node));
    }
#line 4317 "Aql/grammar.cpp"
    break;

  case 154: /* operator_binary: expression quantifier "!= operator" expression  */
#line 1606 "Aql/grammar.y"
                                          {
      (yyval.node) = parser->ast()->createNodeBinaryArrayOperator(NODE_TYPE_OPERATOR_BINARY_ARRAY_NE, (yyvsp[-3].node), (yyvsp[0].node), (yyvsp[-2].node));
    }
#line 4325 "Aql/grammar.cpp"
    break;

  case 155: /* operator_binary: expression quantifier "< operator" expression  */
#line 1609 "Aql/grammar.y"
                                          {
      (yyval.node) = parser->ast()->createNodeBinaryArrayOperator(NODE_TYPE_OPERATOR_BINARY_ARRAY_LT, (yyvsp[-3].node), (yyvsp[0].node), (yyvsp[-2].node));
    }
#line 4333 "Aql/grammar.cpp"
    break;

  case 156: /* operator_binary: expression quantifier "> operator" expression  */
#line 1612 "Aql/grammar.y"
                                          {
      (yyval.node) = parser->ast()->createNodeBinaryArrayOperator(NODE_TYPE_OPERATOR_BINARY_ARRAY_GT, (yyvsp[-3].node), (yyvsp[0].node), (yyvsp[-2].node));
    }
#line 4341 "Aql/grammar.cpp"
    break;

  case 157: /* operator_binary: expression quantifier "<= operator" expression  */
#line 1615 "Aql/grammar.y"
                                          {
      (yyval.node) = parser->ast()->createNodeBinaryArrayOperator(NODE_TYPE_OPERATOR_BINARY_ARRAY_LE, (yyvsp[-3].node), (yyvsp[0].node), (yyvsp[-2].node));
    }
#line 4349 "Aql/grammar.cpp"
    break;

  case 158: /* operator_binary: expression quantifier ">= operator" expression  */
#line 1618 "Aql/grammar.y"
                                          {
      (yyval.node) = parser->ast()->createNodeBinaryArrayOperator(NODE_TYPE_OPERATOR_BINARY_ARRAY_GE, (yyvsp[-3].node), (yyvsp[0].node), (yyvsp[-2].node));
    }
#line 4357 "Aql/grammar.cpp"
    break;

  case 159: /* operator_binary: expression quantifier "IN keyword" expression  */
#line 1621 "Aql/grammar.y"
                                          {
      (yyval.node) = parser->ast()->createNodeBinaryArrayOperator(NODE_TYPE_OPERATOR_BINARY_ARRAY_IN, (yyvsp[-3].node), (yyvsp[0].node), (yyvsp[-2].node));
    }
#line 4365 "Aql/grammar.cpp"
    break;

  case 160: /* operator_binary: expression quantifier "not in operator" expression  */
#line 1624 "Aql/grammar.y"
                                              {
      (yyval.node) = parser->ast()->createNodeBinaryArrayOperator(NODE_TYPE_OPERATOR_BINARY_ARRAY_NIN, (yyvsp[-3].node), (yyvsp[0].node), (yyvsp[-2].node));
    }
#line 4373 "Aql/grammar.cpp"
    break;

  case 161: /* operator_binary: expression "at least modifier" "(" expression ")" "== operator" expression  */
#line 1627 "Aql/grammar.y"
                                                                    {
      AstNode* quantifier = parser->ast()->createNodeQuantifier(Quantifier::Type::kAtLeast, (yyvsp[-3].node));
      (yyval.node) = parser->ast()->createNodeBinaryArrayOperator(NODE_TYPE_OPERATOR_BINARY_ARRAY_EQ, (yyvsp[-6].node), (yyvsp[0].node), quantifier);
    }
#line 4382 "Aql/grammar.cpp"
    break;

  case 162: /* operator_binary: expression "at least modifier" "(" expression ")" "!= operator" expression  */
#line 1631 "Aql/grammar.y"
                                                                    {
      AstNode* quantifier = parser->ast()->createNodeQuantifier(Quantifier::Type::kAtLeast, (yyvsp[-3].node));
      (yyval.node) = parser->ast()->createNodeBinaryArrayOperator(NODE_TYPE_OPERATOR_BINARY_ARRAY_NE, (yyvsp[-6].node), (yyvsp[0].node), quantifier);
    }
#line 4391 "Aql/grammar.cpp"
    break;

  case 163: /* operator_binary: expression "at least modifier" "(" expression ")" "< operator" expression  */
#line 1635 "Aql/grammar.y"
                                                                    {
      AstNode* quantifier = parser->ast()->createNodeQuantifier(Quantifier::Type::kAtLeast, (yyvsp[-3].node));
      (yyval.node) = parser->ast()->createNodeBinaryArrayOperator(NODE_TYPE_OPERATOR_BINARY_ARRAY_LT, (yyvsp[-6].node), (yyvsp[0].node), quantifier);
    }
#line 4400 "Aql/grammar.cpp"
    break;

  case 164: /* operator_binary: expression "at least modifier" "(" expression ")" "> operator" expression  */
#line 1639 "Aql/grammar.y"
                                                                    {
      AstNode* quantifier = parser->ast()->createNodeQuantifier(Quantifier::Type::kAtLeast, (yyvsp[-3].node));
      (yyval.node) = parser->ast()->createNodeBinaryArrayOperator(NODE_TYPE_OPERATOR_BINARY_ARRAY_GT, (yyvsp[-6].node), (yyvsp[0].node), quantifier);
    }
#line 4409 "Aql/grammar.cpp"
    break;

  case 165: /* operator_binary: expression "at least modifier" "(" expression ")" "<= operator" expression  */
#line 1643 "Aql/grammar.y"
                                                                    {
      AstNode* quantifier = parser->ast()->createNodeQuantifier(Quantifier::Type::kAtLeast, (yyvsp[-3].node));
      (yyval.node) = parser->ast()->createNodeBinaryArrayOperator(NODE_TYPE_OPERATOR_BINARY_ARRAY_LE, (yyvsp[-6].node), (yyvsp[0].node), quantifier);
    }
#line 4418 "Aql/grammar.cpp"
    break;

  case 166: /* operator_binary: expression "at least modifier" "(" expression ")" ">= operator" expression  */
#line 1647 "Aql/grammar.y"
                                                                    {
      AstNode* quantifier = parser->ast()->createNodeQuantifier(Quantifier::Type::kAtLeast, (yyvsp[-3].node));
      (yyval.node) = parser->ast()->createNodeBinaryArrayOperator(NODE_TYPE_OPERATOR_BINARY_ARRAY_GE, (yyvsp[-6].node), (yyvsp[0].node), quantifier);
    }
#line 4427 "Aql/grammar.cpp"
    break;

  case 167: /* operator_binary: expression "at least modifier" "(" expression ")" "IN keyword" expression  */
#line 1651 "Aql/grammar.y"
                                                                    {
      AstNode* quantifier = parser->ast()->createNodeQuantifier(Quantifier::Type::kAtLeast, (yyvsp[-3].node));
      (yyval.node) = parser->ast()->createNodeBinaryArrayOperator(NODE_TYPE_OPERATOR_BINARY_ARRAY_IN, (yyvsp[-6].node), (yyvsp[0].node), quantifier);
    }
#line 4436 "Aql/grammar.cpp"
    break;

  case 168: /* operator_binary: expression "at least modifier" "(" expression ")" "not in operator" expression  */
#line 1655 "Aql/grammar.y"
                                                                        {
      AstNode* quantifier = parser->ast()->createNodeQuantifier(Quantifier::Type::kAtLeast, (yyvsp[-3].node));
      (yyval.node) = parser->ast()->createNodeBinaryArrayOperator(NODE_TYPE_OPERATOR_BINARY_ARRAY_NIN, (yyvsp[-6].node), (yyvsp[0].node), quantifier);
    }
#line 4445 "Aql/grammar.cpp"
    break;

  case 169: /* operator_ternary: expression "?" expression ":" expression  */
#line 1662 "Aql/grammar.y"
                                                        {
      (yyval.node) = parser->ast()->createNodeTernaryOperator((yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[0].node));
    }
#line 4453 "Aql/grammar.cpp"
    break;

  case 170: /* operator_ternary: expression "?" ":" expression  */
#line 1665 "Aql/grammar.y"
                                             {
      (yyval.node) = parser->ast()->createNodeTernaryOperator((yyvsp[-3].node), (yyvsp[0].node));
    }
#line 4461 "Aql/grammar.cpp"
    break;

  case 171: /* optional_function_call_arguments: %empty  */
#line 1671 "Aql/grammar.y"
                {
    }
#line 4468 "Aql/grammar.cpp"
    break;

  case 172: /* optional_function_call_arguments: function_arguments_list  */
#line 1673 "Aql/grammar.y"
                            {
    }
#line 4475 "Aql/grammar.cpp"
    break;

  case 173: /* expression_or_query: expression  */
#line 1678 "Aql/grammar.y"
               {
      (yyval.node) = (yyvsp[0].node);
    }
#line 4483 "Aql/grammar.cpp"
    break;

  case 174: /* $@14: %empty  */
#line 1681 "Aql/grammar.y"
    {
      parser->ast()->scopes()->start(arangodb::aql::AQL_SCOPE_SUBQUERY);
      parser->ast()->startSubQuery();
    }
#line 4492 "Aql/grammar.cpp"
    break;

  case 175: /* expression_or_query: $@14 query  */
#line 1684 "Aql/grammar.y"
            {
      AstNode* node = parser->ast()->endSubQuery();
      parser->ast()->scopes()->endCurrent();

      std::string const variableName = parser->ast()->variables()->nextName();
      auto subQuery = parser->ast()->createNodeLet(variableName.c_str(), variableName.size(), node, false);
      parser->ast()->addOperation(subQuery);

      (yyval.node) = parser->ast()->createNodeSubqueryReference(variableName);
    }
#line 4507 "Aql/grammar.cpp"
    break;

  case 176: /* function_arguments_list: expression_or_query  */
#line 1697 "Aql/grammar.y"
                        {
      parser->pushArrayElement((yyvsp[0].node));
    }
#line 4515 "Aql/grammar.cpp"
    break;

  case 177: /* function_arguments_list: function_arguments_list "," expression_or_query  */
#line 1700 "Aql/grammar.y"
                                                        {
      parser->pushArrayElement((yyvsp[0].node));
    }
#line 4523 "Aql/grammar.cpp"
    break;

  case 178: /* compound_value: array  */
#line 1706 "Aql/grammar.y"
          {
      (yyval.node) = (yyvsp[0].node);
    }
#line 4531 "Aql/grammar.cpp"
    break;

  case 179: /* compound_value: object  */
#line 1709 "Aql/grammar.y"
           {
      (yyval.node) = (yyvsp[0].node);
    }
#line 4539 "Aql/grammar.cpp"
    break;

  case 180: /* $@15: %empty  */
#line 1715 "Aql/grammar.y"
                 {
      auto node = parser->ast()->createNodeArray();
      parser->pushArray(node);
    }
#line 4548 "Aql/grammar.cpp"
    break;

  case 181: /* array: "[" $@15 optional_array_elements "]"  */
#line 1718 "Aql/grammar.y"
                                            {
      (yyval.node) = parser->popArray();
    }
#line 4556 "Aql/grammar.cpp"
    break;

  case 182: /* optional_array_elements: %empty  */
#line 1724 "Aql/grammar.y"
                {
    }
#line 4563 "Aql/grammar.cpp"
    break;

  case 183: /* optional_array_elements: array_elements_list  */
#line 1726 "Aql/grammar.y"
                        {
    }
#line 4570 "Aql/grammar.cpp"
    break;

  case 184: /* optional_array_elements: array_elements_list ","  */
#line 1728 "Aql/grammar.y"
                                {
    }
#line 4577 "Aql/grammar.cpp"
    break;

  case 185: /* array_elements_list: array_element  */
#line 1733 "Aql/grammar.y"
                  {
    }
#line 4584 "Aql/grammar.cpp"
    break;

  case 186: /* array_elements_list: array_elements_list "," array_element  */
#line 1735 "Aql/grammar.y"
                                              {
    }
#line 4591 "Aql/grammar.cpp"
    break;

  case 187: /* array_element: expression  */
#line 1740 "Aql/grammar.y"
               {
      parser->pushArrayElement((yyvsp[0].node));
    }
#line 4599 "Aql/grammar.cpp"
    break;

  case 188: /* for_options: %empty  */
#line 1746 "Aql/grammar.y"
                {
      (yyval.node) = nullptr;
    }
#line 4607 "Aql/grammar.cpp"
    break;

  case 189: /* for_options: "identifier" expression  */
#line 1749 "Aql/grammar.y"
                        {
      std::string_view operation((yyvsp[-1].strval).value, (yyvsp[-1].strval).length);
      TRI_ASSERT((yyvsp[0].node) != nullptr);
      // we always return an array with two values: SEARCH and OPTIONS
      // as only one of these values will be set here, the other value is NOP
      auto node = parser->ast()->createNodeArray(2);
      // only one extra qualifier. now we need to check if it is SEARCH or OPTIONS

      if (::caseInsensitiveEqual(operation, "SEARCH")) {
        // found SEARCH
        node->addMember((yyvsp[0].node));
        node->addMember(parser->ast()->createNodeNop());
      } else {
        // everything else must be OPTIONS
        if (!::caseInsensitiveEqual(operation, "OPTIONS")) {
          parser->registerParseError(TRI_ERROR_QUERY_PARSE, "unexpected qualifier '%s', expecting 'SEARCH' or 'OPTIONS'", operation, yylloc.first_line, yylloc.first_column);
        }
        ::validateOptions(parser, (yyvsp[0].node), yylloc.first_line, yylloc.first_column);

        node->addMember(parser->ast()->createNodeNop());
        node->addMember((yyvsp[0].node));
      }

      (yyval.node) = node;
    }
#line 4637 "Aql/grammar.cpp"
    break;

  case 190: /* for_options: "identifier" expression "identifier" expression  */
#line 1774 "Aql/grammar.y"
                                            {
      std::string_view operation((yyvsp[-3].strval).value, (yyvsp[-3].strval).length);
      TRI_ASSERT((yyvsp[-2].node) != nullptr);
      // two extra qualifiers. we expect them in the order: SEARCH, then OPTIONS

      if (!::caseInsensitiveEqual(operation, "SEARCH") ||
          !::caseInsensitiveEqual({(yyvsp[-1].strval).value, (yyvsp[-1].strval).length}, "OPTIONS")) {
        parser->registerParseError(TRI_ERROR_QUERY_PARSE, "unexpected qualifier '%s', expecting 'SEARCH' and 'OPTIONS'", operation, yylloc.first_line, yylloc.first_column);
      }
     
      ::validateOptions(parser, (yyvsp[0].node), yylloc.first_line, yylloc.first_column);

      auto node = parser->ast()->createNodeArray(2);
      node->addMember((yyvsp[-2].node));
      node->addMember((yyvsp[0].node));
      (yyval.node) = node;
    }
#line 4659 "Aql/grammar.cpp"
    break;

  case 191: /* options: %empty  */
#line 1794 "Aql/grammar.y"
                {
      (yyval.node) = nullptr;
    }
#line 4667 "Aql/grammar.cpp"
    break;

  case 192: /* options: "identifier" object  */
#line 1797 "Aql/grammar.y"
                    {
      std::string_view operation((yyvsp[-1].strval).value, (yyvsp[-1].strval).length);
      TRI_ASSERT((yyvsp[0].node) != nullptr);

      if (!::caseInsensitiveEqual(operation, "OPTIONS")) {
        parser->registerParseError(TRI_ERROR_QUERY_PARSE, "unexpected qualifier '%s', expecting 'OPTIONS'", operation, yylloc.first_line, yylloc.first_column);
      }
     
      ::validateOptions(parser, (yyvsp[0].node), yylloc.first_line, yylloc.first_column);

      (yyval.node) = (yyvsp[0].node);
    }
#line 4684 "Aql/grammar.cpp"
    break;

  case 193: /* $@16: %empty  */
#line 1812 "Aql/grammar.y"
                  {
      auto node = parser->ast()->createNodeObject();
      parser->pushStack(node);
    }
#line 4693 "Aql/grammar.cpp"
    break;

  case 194: /* object: "{" $@16 optional_object_elements "}"  */
#line 1815 "Aql/grammar.y"
                                              {
      (yyval.node) = static_cast<AstNode*>(parser->popStack());
    }
#line 4701 "Aql/grammar.cpp"
    break;

  case 195: /* optional_object_elements: %empty  */
#line 1821 "Aql/grammar.y"
                {
    }
#line 4708 "Aql/grammar.cpp"
    break;

  case 196: /* optional_object_elements: object_elements_list  */
#line 1823 "Aql/grammar.y"
                         {
    }
#line 4715 "Aql/grammar.cpp"
    break;

  case 197: /* optional_object_elements: object_elements_list ","  */
#line 1825 "Aql/grammar.y"
                                 {
    }
#line 4722 "Aql/grammar.cpp"
    break;

  case 198: /* object_elements_list: object_element  */
#line 1830 "Aql/grammar.y"
                   {
    }
#line 4729 "Aql/grammar.cpp"
    break;

  case 199: /* object_elements_list: object_elements_list "," object_element  */
#line 1832 "Aql/grammar.y"
                                                {
    }
#line 4736 "Aql/grammar.cpp"
    break;

  case 200: /* object_element: "identifier"  */
#line 1837 "Aql/grammar.y"
             {
      // attribute-name-only (comparable to JS enhanced object literals, e.g. { foo, bar })
      std::string_view name((yyvsp[0].strval).value, (yyvsp[0].strval).length);

      auto ast = parser->ast();
      auto variable = ast->scopes()->getVariable(name, true);

      if (variable == nullptr) {
        // variable does not exist
        parser->registerParseError(TRI_ERROR_QUERY_VARIABLE_NAME_UNKNOWN, "use of unknown variable '%s' in object literal", name, yylloc.first_line, yylloc.first_column);
      }

      // create a reference to the variable
      auto node = ast->createNodeReference(variable);
      parser->pushObjectElement((yyvsp[0].strval).value, (yyvsp[0].strval).length, node);
    }
#line 4757 "Aql/grammar.cpp"
    break;

  case 201: /* object_element: object_element_name ":" expression  */
#line 1853 "Aql/grammar.y"
                                           {
      // attribute-name : attribute-value
      parser->pushObjectElement((yyvsp[-2].strval).value, (yyvsp[-2].strval).length, (yyvsp[0].node));
    }
#line 4766 "Aql/grammar.cpp"
    break;

  case 202: /* object_element: "bind parameter" ":" expression  */
#line 1857 "Aql/grammar.y"
                                   {
      // bind-parameter : attribute-value
      std::string_view name((yyvsp[-2].strval).value, (yyvsp[-2].strval).length);
      if ((yyvsp[-2].strval).length < 1 || (yyvsp[-2].strval).value[0] == '@') {
        parser->registerParseError(TRI_ERROR_QUERY_BIND_PARAMETER_TYPE, TRI_errno_string(TRI_ERROR_QUERY_BIND_PARAMETER_TYPE).data(), name, yylloc.first_line, yylloc.first_column);
      }

      auto param = parser->ast()->createNodeParameter(name);
      parser->pushObjectElement(param, (yyvsp[0].node));
    }
#line 4781 "Aql/grammar.cpp"
    break;

  case 203: /* object_element: "[" expression "]" ":" expression  */
#line 1867 "Aql/grammar.y"
                                                             {
      // [ attribute-name-expression ] : attribute-value
      parser->pushObjectElement((yyvsp[-3].node), (yyvsp[0].node));
    }
#line 4790 "Aql/grammar.cpp"
    break;

  case 204: /* array_filter_operator: "?"  */
#line 1874 "Aql/grammar.y"
               {
      (yyval.intval) = 1;
    }
#line 4798 "Aql/grammar.cpp"
    break;

  case 205: /* array_filter_operator: array_filter_operator "?"  */
#line 1877 "Aql/grammar.y"
                                     {
      (yyval.intval) = (yyvsp[-1].intval) + 1;
    }
#line 4806 "Aql/grammar.cpp"
    break;

  case 206: /* array_map_operator: "* operator"  */
#line 1883 "Aql/grammar.y"
            {
      (yyval.intval) = 1;
    }
#line 4814 "Aql/grammar.cpp"
    break;

  case 207: /* array_map_operator: array_map_operator "* operator"  */
#line 1886 "Aql/grammar.y"
                               {
      (yyval.intval) = (yyvsp[-1].intval) + 1;
    }
#line 4822 "Aql/grammar.cpp"
    break;

  case 208: /* optional_array_filter: %empty  */
#line 1892 "Aql/grammar.y"
                {
      (yyval.node) = nullptr;
    }
#line 4830 "Aql/grammar.cpp"
    break;

  case 209: /* optional_array_filter: "FILTER declaration" expression  */
#line 1895 "Aql/grammar.y"
                        {
      // FILTER filter-condition
      (yyval.node) = parser->ast()->createNodeArrayFilter(nullptr, (yyvsp[0].node));
    }
#line 4839 "Aql/grammar.cpp"
    break;

  case 210: /* optional_array_filter: quantifier "FILTER declaration" expression  */
#line 1899 "Aql/grammar.y"
                                   {
      // ALL|ANY|NONE|AT LEAST FILTER filter-condition
      (yyval.node) = parser->ast()->createNodeArrayFilter((yyvsp[-2].node), (yyvsp[0].node));
    }
#line 4848 "Aql/grammar.cpp"
    break;

  case 211: /* optional_array_filter: "at least modifier" "(" expression ")" "FILTER declaration" expression  */
#line 1903 "Aql/grammar.y"
                                                             {
      AstNode* quantifier = parser->ast()->createNodeQuantifier(Quantifier::Type::kAtLeast, (yyvsp[-3].node));
      (yyval.node) = parser->ast()->createNodeArrayFilter(quantifier, (yyvsp[0].node));
    }
#line 4857 "Aql/grammar.cpp"
    break;

  case 212: /* optional_array_filter: expression "FILTER declaration" expression  */
#line 1907 "Aql/grammar.y"
                                   {
      // 1    FILTER filter-condition
      // 2..5 FILTER filter-condition
      (yyval.node) = parser->ast()->createNodeArrayFilter((yyvsp[-2].node), (yyvsp[0].node));
    }
#line 4867 "Aql/grammar.cpp"
    break;

  case 213: /* optional_array_limit: %empty  */
#line 1915 "Aql/grammar.y"
                {
      (yyval.node) = nullptr;
    }
#line 4875 "Aql/grammar.cpp"
    break;

  case 214: /* optional_array_limit: "LIMIT declaration" expression  */
#line 1918 "Aql/grammar.y"
                       {
      (yyval.node) = parser->ast()->createNodeArrayLimit(nullptr, (yyvsp[0].node));
    }
#line 4883 "Aql/grammar.cpp"
    break;

  case 215: /* optional_array_limit: "LIMIT declaration" expression "," expression  */
#line 1921 "Aql/grammar.y"
                                          {
      (yyval.node) = parser->ast()->createNodeArrayLimit((yyvsp[-2].node), (yyvsp[0].node));
    }
#line 4891 "Aql/grammar.cpp"
    break;

  case 216: /* optional_array_return: %empty  */
#line 1927 "Aql/grammar.y"
                {
      (yyval.node) = nullptr;
    }
#line 4899 "Aql/grammar.cpp"
    break;

  case 217: /* optional_array_return: "RETURN declaration" expression  */
#line 1930 "Aql/grammar.y"
                        {
      (yyval.node) = (yyvsp[0].node);
    }
#line 4907 "Aql/grammar.cpp"
    break;

  case 218: /* graph_collection: "identifier"  */
#line 1936 "Aql/grammar.y"
             {
      (yyval.node) = parser->ast()->createNodeValueString((yyvsp[0].strval).value, (yyvsp[0].strval).length);
    }
#line 4915 "Aql/grammar.cpp"
    break;

  case 219: /* graph_collection: bind_parameter_datasource_expected  */
#line 1939 "Aql/grammar.y"
                                       {
      (yyval.node) = (yyvsp[0].node);
    }
#line 4923 "Aql/grammar.cpp"
    break;

  case 220: /* graph_collection: graph_direction "identifier"  */
#line 1942 "Aql/grammar.y"
                             {
      auto tmp = parser->ast()->createNodeValueString((yyvsp[0].strval).value, (yyvsp[0].strval).length);
      (yyval.node) = parser->ast()->createNodeCollectionDirection((yyvsp[-1].intval), tmp);
    }
#line 4932 "Aql/grammar.cpp"
    break;

  case 221: /* graph_collection: graph_direction bind_parameter  */
#line 1946 "Aql/grammar.y"
                                   {
      (yyval.node) = parser->ast()->createNodeCollectionDirection((yyvsp[-1].intval), (yyvsp[0].node));
    }
#line 4940 "Aql/grammar.cpp"
    break;

  case 222: /* graph_collection_list: graph_collection  */
#line 1952 "Aql/grammar.y"
                      {
       auto node = static_cast<AstNode*>(parser->peekStack());
       node->addMember((yyvsp[0].node));
     }
#line 4949 "Aql/grammar.cpp"
    break;

  case 223: /* graph_collection_list: graph_collection_list "," graph_collection  */
#line 1956 "Aql/grammar.y"
                                                    {
       auto node = static_cast<AstNode*>(parser->peekStack());
       node->addMember((yyvsp[0].node));
     }
#line 4958 "Aql/grammar.cpp"
    break;

  case 224: /* graph_subject: graph_collection  */
#line 1963 "Aql/grammar.y"
                     {
      auto node = parser->ast()->createNodeArray();
      node->addMember((yyvsp[0].node));
      auto const& resolver = parser->query().resolver();
      (yyval.node) = parser->ast()->createNodeCollectionList(node, resolver);
    }
#line 4969 "Aql/grammar.cpp"
    break;

  case 225: /* $@17: %empty  */
#line 1969 "Aql/grammar.y"
                             {
      auto node = parser->ast()->createNodeArray();
      parser->pushStack(node);
      node->addMember((yyvsp[-1].node));
    }
#line 4979 "Aql/grammar.cpp"
    break;

  case 226: /* graph_subject: graph_collection "," $@17 graph_collection_list  */
#line 1973 "Aql/grammar.y"
                            {
      auto node = static_cast<AstNode*>(parser->popStack());
      auto const& resolver = parser->query().resolver();
      (yyval.node) = parser->ast()->createNodeCollectionList(node, resolver);
    }
#line 4989 "Aql/grammar.cpp"
    break;

  case 227: /* graph_subject: "GRAPH keyword" bind_parameter  */
#line 1978 "Aql/grammar.y"
                           {
      // graph name
      (yyval.node) = (yyvsp[0].node);
    }
#line 4998 "Aql/grammar.cpp"
    break;

  case 228: /* graph_subject: "GRAPH keyword" "quoted string"  */
#line 1982 "Aql/grammar.y"
                            {
      // graph name
      (yyval.node) = parser->ast()->createNodeValueString((yyvsp[0].strval).value, (yyvsp[0].strval).length);
    }
#line 5007 "Aql/grammar.cpp"
    break;

  case 229: /* graph_subject: "GRAPH keyword" "identifier"  */
#line 1986 "Aql/grammar.y"
                     {
      // graph name
      (yyval.node) = parser->ast()->createNodeValueString((yyvsp[0].strval).value, (yyvsp[0].strval).length);
    }
#line 5016 "Aql/grammar.cpp"
    break;

  case 230: /* graph_direction: "outbound modifier"  */
#line 1995 "Aql/grammar.y"
               {
      (yyval.intval) = 2;
    }
#line 5024 "Aql/grammar.cpp"
    break;

  case 231: /* graph_direction: "inbound modifier"  */
#line 1998 "Aql/grammar.y"
              {
      (yyval.intval) = 1;
    }
#line 5032 "Aql/grammar.cpp"
    break;

  case 232: /* graph_direction: "any modifier"  */
#line 2001 "Aql/grammar.y"
          {
      (yyval.intval) = 0;
    }
#line 5040 "Aql/grammar.cpp"
    break;

  case 233: /* graph_direction_steps: graph_direction  */
#line 2007 "Aql/grammar.y"
                    {
      (yyval.node) = parser->ast()->createNodeDirection((yyvsp[0].intval), 1);
    }
#line 5048 "Aql/grammar.cpp"
    break;

  case 234: /* graph_direction_steps: expression graph_direction  */
#line 2010 "Aql/grammar.y"
                                                {
      (yyval.node) = parser->ast()->createNodeDirection((yyvsp[0].intval), (yyvsp[-1].node));
    }
#line 5056 "Aql/grammar.cpp"
    break;

  case 235: /* reference: "identifier"  */
#line 2016 "Aql/grammar.y"
             {
      // variable or collection or view
      auto ast = parser->ast();
      AstNode* node = nullptr;

      std::string_view variableName((yyvsp[0].strval).value, (yyvsp[0].strval).length);
      auto variable = ast->scopes()->getVariable(variableName, true);

      if (variable == nullptr) {
        // variable does not exist
        // now try special variables
        if (ast->scopes()->canUseCurrentVariable() && 
            (variableName == Variable::NAME_CURRENT || variableName == Variable::NAME_CURRENT.substr(1))) {
          variable = ast->scopes()->getCurrentVariable();
        }
      }

      if (variable != nullptr) {
        // variable alias exists, now use it
        node = ast->createNodeReference(variable);
      }

      if (node == nullptr) {
        // variable not found. so it must have been a collection or view
        auto const& resolver = parser->query().resolver();
        node = ast->createNodeDataSource(resolver, variableName, arangodb::AccessMode::Type::READ, true, false);
      }

      TRI_ASSERT(node != nullptr);

      (yyval.node) = node;
    }
#line 5093 "Aql/grammar.cpp"
    break;

  case 236: /* reference: compound_value  */
#line 2048 "Aql/grammar.y"
                   {
      (yyval.node) = (yyvsp[0].node);
    }
#line 5101 "Aql/grammar.cpp"
    break;

  case 237: /* reference: bind_parameter  */
#line 2051 "Aql/grammar.y"
                   {
      (yyval.node) = (yyvsp[0].node);
    }
#line 5109 "Aql/grammar.cpp"
    break;

  case 238: /* reference: function_call  */
#line 2054 "Aql/grammar.y"
                  {
      TRI_ASSERT((yyvsp[0].node) != nullptr);
      (yyval.node) = (yyvsp[0].node);
    }
#line 5118 "Aql/grammar.cpp"
    break;

  case 239: /* reference: "(" expression ")"  */
#line 2058 "Aql/grammar.y"
                              {
      if ((yyvsp[-1].node)->type == NODE_TYPE_EXPANSION) {
        // create a dummy passthru node that reduces and evaluates the expansion first
        // and the expansion on top of the stack won't be chained with any other expansions
        (yyval.node) = parser->ast()->createNodePassthru((yyvsp[-1].node));
      } else {
        (yyval.node) = (yyvsp[-1].node);
      }
    }
#line 5132 "Aql/grammar.cpp"
    break;

  case 240: /* $@18: %empty  */
#line 2067 "Aql/grammar.y"
           {
      parser->ast()->scopes()->start(arangodb::aql::AQL_SCOPE_SUBQUERY);
      parser->ast()->startSubQuery();
    }
#line 5141 "Aql/grammar.cpp"
    break;

  case 241: /* reference: "(" $@18 query ")"  */
#line 2070 "Aql/grammar.y"
                    {
      AstNode* node = parser->ast()->endSubQuery();
      parser->ast()->scopes()->endCurrent();

      std::string const variableName = parser->ast()->variables()->nextName();
      auto subQuery = parser->ast()->createNodeLet(variableName.c_str(), variableName.size(), node, false);
      parser->ast()->addOperation(subQuery);

      (yyval.node) = parser->ast()->createNodeSubqueryReference(variableName);
    }
#line 5156 "Aql/grammar.cpp"
    break;

  case 242: /* reference: reference '.' "identifier"  */
#line 2080 "Aql/grammar.y"
                                           {
      std::string_view name((yyvsp[0].strval).value, (yyvsp[0].strval).length);
      // named variable access, e.g. variable.reference
      if ((yyvsp[-2].node)->type == NODE_TYPE_EXPANSION) {
        // if left operand is an expansion already...
        // dive into the expansion's right-hand child nodes for further expansion and
        // patch the bottom-most one
        auto current = const_cast<AstNode*>(parser->ast()->findExpansionSubNode((yyvsp[-2].node)));
        TRI_ASSERT(current->type == NODE_TYPE_EXPANSION);
        current->changeMember(1, parser->ast()->createNodeAttributeAccess(current->getMember(1), name));
        (yyval.node) = (yyvsp[-2].node);
      } else {
        (yyval.node) = parser->ast()->createNodeAttributeAccess((yyvsp[-2].node), name);
      }
    }
#line 5176 "Aql/grammar.cpp"
    break;

  case 243: /* reference: reference '.' bind_parameter  */
#line 2095 "Aql/grammar.y"
                                                 {
      // named variable access, e.g. variable.@reference
      if ((yyvsp[-2].node)->type == NODE_TYPE_EXPANSION) {
        // if left operand is an expansion already...
        // patch the existing expansion
        auto current = const_cast<AstNode*>(parser->ast()->findExpansionSubNode((yyvsp[-2].node)));
        TRI_ASSERT(current->type == NODE_TYPE_EXPANSION);
        current->changeMember(1, parser->ast()->createNodeBoundAttributeAccess(current->getMember(1), (yyvsp[0].node)));
        (yyval.node) = (yyvsp[-2].node);
      } else {
        (yyval.node) = parser->ast()->createNodeBoundAttributeAccess((yyvsp[-2].node), (yyvsp[0].node));
      }
    }
#line 5194 "Aql/grammar.cpp"
    break;

  case 244: /* reference: reference "[" expression "]"  */
#line 2108 "Aql/grammar.y"
                                                                  {
      // indexed variable access, e.g. variable[index]
      if ((yyvsp[-3].node)->type == NODE_TYPE_EXPANSION) {
        // if left operand is an expansion already...
        // patch the existing expansion
        auto current = const_cast<AstNode*>(parser->ast()->findExpansionSubNode((yyvsp[-3].node)));
        TRI_ASSERT(current->type == NODE_TYPE_EXPANSION);
        current->changeMember(1, parser->ast()->createNodeIndexedAccess(current->getMember(1), (yyvsp[-1].node)));
        (yyval.node) = (yyvsp[-3].node);
      } else {
        (yyval.node) = parser->ast()->createNodeIndexedAccess((yyvsp[-3].node), (yyvsp[-1].node));
      }
    }
#line 5212 "Aql/grammar.cpp"
    break;

  case 245: /* $@19: %empty  */
#line 2121 "Aql/grammar.y"
                                                 {
      // variable expansion, e.g. variable[?], with optional FILTER clause
      if ((yyvsp[0].intval) > 1 && (yyvsp[-2].node)->type == NODE_TYPE_EXPANSION) {
        // create a dummy passthru node that reduces and evaluates the expansion first
        // and the expansion on top of the stack won't be chained with any other expansions
        (yyvsp[-2].node) = parser->ast()->createNodePassthru((yyvsp[-2].node));
      }

      // create a temporary iterator variable
      std::string const nextName = parser->ast()->variables()->nextName() + "_";

      if ((yyvsp[-2].node)->type == NODE_TYPE_EXPANSION) {
        auto iterator = parser->ast()->createNodeIterator(nextName.c_str(), nextName.size(), (yyvsp[-2].node)->getMember(1));
        parser->pushStack(iterator);
      }
      else {
        auto iterator = parser->ast()->createNodeIterator(nextName.c_str(), nextName.size(), (yyvsp[-2].node));
        parser->pushStack(iterator);
      }

      auto scopes = parser->ast()->scopes();
      scopes->stackCurrentVariable(scopes->getVariable(nextName));
    }
#line 5240 "Aql/grammar.cpp"
    break;

  case 246: /* reference: reference "[" array_filter_operator $@19 optional_array_filter "]"  */
#line 2143 "Aql/grammar.y"
                                                          {
      auto scopes = parser->ast()->scopes();
      scopes->unstackCurrentVariable();

      auto iterator = static_cast<AstNode const*>(parser->popStack());
      auto variableNode = iterator->getMember(0);
      TRI_ASSERT(variableNode->type == NODE_TYPE_VARIABLE);
      auto variable = static_cast<Variable const*>(variableNode->getData());

      if ((yyvsp[-5].node)->type == NODE_TYPE_EXPANSION) {
        auto expand = parser->ast()->createNodeBooleanExpansion((yyvsp[-3].intval), iterator, parser->ast()->createNodeReference(variable->name), (yyvsp[-1].node));
        (yyvsp[-5].node)->changeMember(1, expand);
        (yyval.node) = (yyvsp[-5].node);
      }
      else {
        (yyval.node) = parser->ast()->createNodeBooleanExpansion((yyvsp[-3].intval), iterator, parser->ast()->createNodeReference(variable->name), (yyvsp[-1].node));
      }
    }
#line 5263 "Aql/grammar.cpp"
    break;

  case 247: /* $@20: %empty  */
#line 2161 "Aql/grammar.y"
                                              {
      // variable expansion, e.g. variable[*], with optional FILTER, LIMIT and RETURN clauses
      if ((yyvsp[0].intval) > 1 && (yyvsp[-2].node)->type == NODE_TYPE_EXPANSION) {
        // create a dummy passthru node that reduces and evaluates the expansion first
        // and the expansion on top of the stack won't be chained with any other expansions
        (yyvsp[-2].node) = parser->ast()->createNodePassthru((yyvsp[-2].node));
      }

      // create a temporary iterator variable
      std::string const nextName = parser->ast()->variables()->nextName() + "_";

      if ((yyvsp[-2].node)->type == NODE_TYPE_EXPANSION) {
        auto iterator = parser->ast()->createNodeIterator(nextName.c_str(), nextName.size(), (yyvsp[-2].node)->getMember(1));
        parser->pushStack(iterator);
      } else {
        auto iterator = parser->ast()->createNodeIterator(nextName.c_str(), nextName.size(), (yyvsp[-2].node));
        parser->pushStack(iterator);
      }

      auto scopes = parser->ast()->scopes();
      scopes->stackCurrentVariable(scopes->getVariable(nextName));
    }
#line 5290 "Aql/grammar.cpp"
    break;

  case 248: /* reference: reference "[" array_map_operator $@20 optional_array_filter optional_array_limit optional_array_return "]"  */
#line 2182 "Aql/grammar.y"
                                                                                                     {
      auto scopes = parser->ast()->scopes();
      scopes->unstackCurrentVariable();

      auto iterator = static_cast<AstNode const*>(parser->popStack());
      auto variableNode = iterator->getMember(0);
      TRI_ASSERT(variableNode->type == NODE_TYPE_VARIABLE);
      auto variable = static_cast<Variable const*>(variableNode->getData());

      if ((yyvsp[-3].node) != nullptr) {
        // array filter members are [quantifier, filter]
        // quantifier is optional.
        TRI_ASSERT((yyvsp[-3].node)->type == NODE_TYPE_ARRAY_FILTER);
        TRI_ASSERT((yyvsp[-3].node)->numMembers() == 2);
        if ((yyvsp[-3].node)->getMember(0) != nullptr && (yyvsp[-3].node)->getMember(0)->type != NODE_TYPE_NOP) {
          parser->registerParseError(TRI_ERROR_QUERY_PARSE, "unexpected quantifier value found for array expansion operation.", yylloc.first_line, yylloc.first_column);
        }
      }

      if ((yyvsp[-7].node)->type == NODE_TYPE_EXPANSION) {
        auto expand = parser->ast()->createNodeExpansion((yyvsp[-5].intval), iterator, parser->ast()->createNodeReference(variable->name), (yyvsp[-3].node), (yyvsp[-2].node), (yyvsp[-1].node));
        (yyvsp[-7].node)->changeMember(1, expand);
        (yyval.node) = (yyvsp[-7].node);
      } else {
        (yyval.node) = parser->ast()->createNodeExpansion((yyvsp[-5].intval), iterator, parser->ast()->createNodeReference(variable->name), (yyvsp[-3].node), (yyvsp[-2].node), (yyvsp[-1].node));
      }
    }
#line 5322 "Aql/grammar.cpp"
    break;

  case 249: /* simple_value: value_literal  */
#line 2212 "Aql/grammar.y"
                  {
      (yyval.node) = (yyvsp[0].node);
    }
#line 5330 "Aql/grammar.cpp"
    break;

  case 250: /* simple_value: bind_parameter  */
#line 2215 "Aql/grammar.y"
                   {
      (yyval.node) = (yyvsp[0].node);
    }
#line 5338 "Aql/grammar.cpp"
    break;

  case 251: /* numeric_value: "integer number"  */
#line 2221 "Aql/grammar.y"
              {
      TRI_ASSERT((yyvsp[0].node) != nullptr);
      (yyval.node) = (yyvsp[0].node);
    }
#line 5347 "Aql/grammar.cpp"
    break;

  case 252: /* numeric_value: "number"  */
#line 2225 "Aql/grammar.y"
             {
      TRI_ASSERT((yyvsp[0].node) != nullptr);
      (yyval.node) = (yyvsp[0].node);
    }
#line 5356 "Aql/grammar.cpp"
    break;

  case 253: /* value_literal: "quoted string"  */
#line 2232 "Aql/grammar.y"
                    {
      (yyval.node) = parser->ast()->createNodeValueString((yyvsp[0].strval).value, (yyvsp[0].strval).length);
    }
#line 5364 "Aql/grammar.cpp"
    break;

  case 254: /* value_literal: numeric_value  */
#line 2235 "Aql/grammar.y"
                  {
      (yyval.node) = (yyvsp[0].node);
    }
#line 5372 "Aql/grammar.cpp"
    break;

  case 255: /* value_literal: "null"  */
#line 2238 "Aql/grammar.y"
           {
      (yyval.node) = parser->ast()->createNodeValueNull();
    }
#line 5380 "Aql/grammar.cpp"
    break;

  case 256: /* value_literal: "true"  */
#line 2241 "Aql/grammar.y"
           {
      (yyval.node) = parser->ast()->createNodeValueBool(true);
    }
#line 5388 "Aql/grammar.cpp"
    break;

  case 257: /* value_literal: "false"  */
#line 2244 "Aql/grammar.y"
            {
      (yyval.node) = parser->ast()->createNodeValueBool(false);
    }
#line 5396 "Aql/grammar.cpp"
    break;

  case 258: /* in_or_into_collection_name: "identifier"  */
#line 2250 "Aql/grammar.y"
             {
      std::string_view name((yyvsp[0].strval).value, (yyvsp[0].strval).length);
      auto const& resolver = parser->query().resolver();
      (yyval.node) = parser->ast()->createNodeCollection(resolver, name, arangodb::AccessMode::Type::WRITE);
    }
#line 5406 "Aql/grammar.cpp"
    break;

  case 259: /* in_or_into_collection_name: "quoted string"  */
#line 2255 "Aql/grammar.y"
                    {
      std::string_view name((yyvsp[0].strval).value, (yyvsp[0].strval).length);
      auto const& resolver = parser->query().resolver();
      (yyval.node) = parser->ast()->createNodeCollection(resolver, name, arangodb::AccessMode::Type::WRITE);
    }
#line 5416 "Aql/grammar.cpp"
    break;

  case 260: /* in_or_into_collection_name: "bind data source parameter"  */
#line 2260 "Aql/grammar.y"
                            {
      std::string_view name((yyvsp[0].strval).value, (yyvsp[0].strval).length);
      if (name.size() < 2 || name.front() != '@') {
        parser->registerParseError(TRI_ERROR_QUERY_BIND_PARAMETER_TYPE, TRI_errno_string(TRI_ERROR_QUERY_BIND_PARAMETER_TYPE).data(), name, yylloc.first_line, yylloc.first_column);
      }

      (yyval.node) = parser->ast()->createNodeParameterDatasource(name);
    }
#line 5429 "Aql/grammar.cpp"
    break;

  case 261: /* bind_parameter: "bind data source parameter"  */
#line 2271 "Aql/grammar.y"
                            {
      std::string_view name((yyvsp[0].strval).value, (yyvsp[0].strval).length);
      if (name.size() < 2 || name.front() != '@') {
        parser->registerParseError(TRI_ERROR_QUERY_BIND_PARAMETER_TYPE, TRI_errno_string(TRI_ERROR_QUERY_BIND_PARAMETER_TYPE).data(), name, yylloc.first_line, yylloc.first_column);
      }

      (yyval.node) = parser->ast()->createNodeParameterDatasource(name);
    }
#line 5442 "Aql/grammar.cpp"
    break;

  case 262: /* bind_parameter: "bind parameter"  */
#line 2279 "Aql/grammar.y"
                {
      std::string_view name((yyvsp[0].strval).value, (yyvsp[0].strval).length);
      (yyval.node) = parser->ast()->createNodeParameter(name);
    }
#line 5451 "Aql/grammar.cpp"
    break;

  case 263: /* bind_parameter_datasource_expected: "bind data source parameter"  */
#line 2286 "Aql/grammar.y"
                            {
      std::string_view name((yyvsp[0].strval).value, (yyvsp[0].strval).length);
      if (name.size() < 2 || name.front() != '@') {
        parser->registerParseError(TRI_ERROR_QUERY_BIND_PARAMETER_TYPE, TRI_errno_string(TRI_ERROR_QUERY_BIND_PARAMETER_TYPE).data(), (yyvsp[0].strval).value, yylloc.first_line, yylloc.first_column);
      }

      (yyval.node) = parser->ast()->createNodeParameterDatasource(name);
    }
#line 5464 "Aql/grammar.cpp"
    break;

  case 264: /* bind_parameter_datasource_expected: "bind parameter"  */
#line 2294 "Aql/grammar.y"
                {
      std::string_view name((yyvsp[0].strval).value, (yyvsp[0].strval).length);
      (yyval.node) = parser->ast()->createNodeParameterDatasource(name);
    }
#line 5473 "Aql/grammar.cpp"
    break;

  case 265: /* object_element_name: "identifier"  */
#line 2301 "Aql/grammar.y"
             {
      (yyval.strval) = (yyvsp[0].strval);
    }
#line 5481 "Aql/grammar.cpp"
    break;

  case 266: /* object_element_name: "quoted string"  */
#line 2304 "Aql/grammar.y"
                    {
      (yyval.strval) = (yyvsp[0].strval);
    }
#line 5489 "Aql/grammar.cpp"
    break;

  case 267: /* variable_name: "identifier"  */
#line 2309 "Aql/grammar.y"
             {
      (yyval.strval) = (yyvsp[0].strval);
    }
#line 5497 "Aql/grammar.cpp"
    break;


#line 5501 "Aql/grammar.cpp"

      default: break;
    }
  /* User semantic actions sometimes alter yychar, and that requires
     that yytoken be updated with the new translation.  We take the
     approach of translating immediately before every use of yytoken.
     One alternative is translating here after every semantic action,
     but that translation would be missed if the semantic action invokes
     YYABORT, YYACCEPT, or YYERROR immediately after altering yychar or
     if it invokes YYBACKUP.  In the case of YYABORT or YYACCEPT, an
     incorrect destructor might then be invoked immediately.  In the
     case of YYERROR or YYBACKUP, subsequent parser actions might lead
     to an incorrect destructor call or verbose syntax error message
     before the lookahead is translated.  */
  YY_SYMBOL_PRINT ("-> $$ =", YY_CAST (yysymbol_kind_t, yyr1[yyn]), &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;

  *++yyvsp = yyval;
  *++yylsp = yyloc;

  /* Now 'shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */
  {
    const int yylhs = yyr1[yyn] - YYNTOKENS;
    const int yyi = yypgoto[yylhs] + *yyssp;
    yystate = (0 <= yyi && yyi <= YYLAST && yycheck[yyi] == *yyssp
               ? yytable[yyi]
               : yydefgoto[yylhs]);
  }

  goto yynewstate;


/*--------------------------------------.
| yyerrlab -- here on detecting error.  |
`--------------------------------------*/
yyerrlab:
  /* Make sure we have latest lookahead translation.  See comments at
     user semantic actions for why this is necessary.  */
  yytoken = yychar == YYEMPTY ? YYSYMBOL_YYEMPTY : YYTRANSLATE (yychar);
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
      {
        yypcontext_t yyctx
          = {yyssp, yytoken, &yylloc};
        char const *yymsgp = YY_("syntax error");
        int yysyntax_error_status;
        yysyntax_error_status = yysyntax_error (&yymsg_alloc, &yymsg, &yyctx);
        if (yysyntax_error_status == 0)
          yymsgp = yymsg;
        else if (yysyntax_error_status == -1)
          {
            if (yymsg != yymsgbuf)
              YYSTACK_FREE (yymsg);
            yymsg = YY_CAST (char *,
                             YYSTACK_ALLOC (YY_CAST (YYSIZE_T, yymsg_alloc)));
            if (yymsg)
              {
                yysyntax_error_status
                  = yysyntax_error (&yymsg_alloc, &yymsg, &yyctx);
                yymsgp = yymsg;
              }
            else
              {
                yymsg = yymsgbuf;
                yymsg_alloc = sizeof yymsgbuf;
                yysyntax_error_status = YYENOMEM;
              }
          }
        yyerror (&yylloc, parser, yymsgp);
        if (yysyntax_error_status == YYENOMEM)
          YYNOMEM;
      }
    }

  yyerror_range[1] = yylloc;
  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
         error, discard it.  */

      if (yychar <= T_END)
        {
          /* Return failure if at end of input.  */
          if (yychar == T_END)
            YYABORT;
        }
      else
        {
          yydestruct ("Error: discarding",
                      yytoken, &yylval, &yylloc, parser);
          yychar = YYEMPTY;
        }
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:
  /* Pacify compilers when the user code never invokes YYERROR and the
     label yyerrorlab therefore never appears in user code.  */
  if (0)
    YYERROR;
  ++yynerrs;

  /* Do not reclaim the symbols of the rule whose action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;      /* Each real token shifted decrements this.  */

  /* Pop stack until we find a state that shifts the error token.  */
  for (;;)
    {
      yyn = yypact[yystate];
      if (!yypact_value_is_default (yyn))
        {
          yyn += YYSYMBOL_YYerror;
          if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYSYMBOL_YYerror)
            {
              yyn = yytable[yyn];
              if (0 < yyn)
                break;
            }
        }

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
        YYABORT;

      yyerror_range[1] = *yylsp;
      yydestruct ("Error: popping",
                  YY_ACCESSING_SYMBOL (yystate), yyvsp, yylsp, parser);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END

  yyerror_range[2] = yylloc;
  ++yylsp;
  YYLLOC_DEFAULT (*yylsp, yyerror_range, 2);

  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", YY_ACCESSING_SYMBOL (yyn), yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturnlab;


/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturnlab;


/*-----------------------------------------------------------.
| yyexhaustedlab -- YYNOMEM (memory exhaustion) comes here.  |
`-----------------------------------------------------------*/
yyexhaustedlab:
  yyerror (&yylloc, parser, YY_("memory exhausted"));
  yyresult = 2;
  goto yyreturnlab;


/*----------------------------------------------------------.
| yyreturnlab -- parsing is finished, clean up and return.  |
`----------------------------------------------------------*/
yyreturnlab:
  if (yychar != YYEMPTY)
    {
      /* Make sure we have latest lookahead translation.  See comments at
         user semantic actions for why this is necessary.  */
      yytoken = YYTRANSLATE (yychar);
      yydestruct ("Cleanup: discarding lookahead",
                  yytoken, &yylval, &yylloc, parser);
    }
  /* Do not reclaim the symbols of the rule whose action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
                  YY_ACCESSING_SYMBOL (+*yyssp), yyvsp, yylsp, parser);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
  if (yymsg != yymsgbuf)
    YYSTACK_FREE (yymsg);
  return yyresult;
}

