/* clang-format off */
/* A Bison parser, made by GNU Bison 3.8.2.  */

/* Bison implementation for Yacc-like parsers in C

   Copyright (C) 1984, 1989-1990, 2000-2015, 2018-2021 Free Software Foundation,
   Inc.

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <https://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.

   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* DO NOT RELY ON FEATURES THAT ARE NOT DOCUMENTED in the manual,
   especially those whose name start with YY_ or yy_.  They are
   private implementation details that can be changed or removed.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output, and Bison version.  */
#define YYBISON 30802

/* Bison version string.  */
#define YYBISON_VERSION "3.8.2"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 1

/* Push parsers.  */
#define YYPUSH 0

/* Pull parsers.  */
#define YYPULL 1


/* Substitute the variable and function names.  */
#define yyparse         Aqlparse
#define yylex           Aqllex
#define yyerror         Aqlerror
#define yydebug         Aqldebug
#define yynerrs         Aqlnerrs

/* First part of user prologue.  */
#line 9 "grammar.y"

// we are using alloca here explicitly because we may
// otherwise leak error messages that are generated by Bison.
// Bison reports all its errors via the function `Aqlerror`, which
// will receive the error message as a constant string. So we
// must not free the string inside `Aqlerror`, and we cannot even
// tell if the error message is a dynamically allocated error
// message or a hard-coded error message that resides in some
// static part of the program.
// Even worse, `Aqlerror` does not return control to Bison but throws
// an exception... So the best thing we can do here is to not use
// dynamically memory allocation by Bison, but make it use alloca.
#define YYSTACK_USE_ALLOCA 1

#include "Aql/Aggregator.h"
#include "Aql/Ast.h"
#include "Aql/AstNode.h"
#include "Aql/Function.h"
#include "Aql/Parser.h"
#include "Aql/Quantifier.h"
#include "Aql/QueryContext.h"
#include "Aql/types.h"
#include "Basics/StaticStrings.h"
#include "Basics/StringUtils.h"
#include "Containers/HashSet.h"
#include "Containers/SmallVector.h"
#include "Graph/PathType.h"
#include "VocBase/AccessMode.h"

#include <absl/strings/str_cat.h>

#include <algorithm>
#include <cstdint>
#include <string>
#include <string_view>


#line 114 "grammar.cpp"

# ifndef YY_CAST
#  ifdef __cplusplus
#   define YY_CAST(Type, Val) static_cast<Type> (Val)
#   define YY_REINTERPRET_CAST(Type, Val) reinterpret_cast<Type> (Val)
#  else
#   define YY_CAST(Type, Val) ((Type) (Val))
#   define YY_REINTERPRET_CAST(Type, Val) ((Type) (Val))
#  endif
# endif
# ifndef YY_NULLPTR
#  if defined __cplusplus
#   if 201103L <= __cplusplus
#    define YY_NULLPTR nullptr
#   else
#    define YY_NULLPTR 0
#   endif
#  else
#   define YY_NULLPTR ((void*)0)
#  endif
# endif

#include "grammar.hpp"
/* Symbol kind.  */
enum yysymbol_kind_t
{
  YYSYMBOL_YYEMPTY = -2,
  YYSYMBOL_YYEOF = 0,                      /* "end of query string"  */
  YYSYMBOL_YYerror = 1,                    /* error  */
  YYSYMBOL_YYUNDEF = 2,                    /* "invalid token"  */
  YYSYMBOL_T_FOR = 3,                      /* "FOR declaration"  */
  YYSYMBOL_T_LET = 4,                      /* "LET declaration"  */
  YYSYMBOL_T_FILTER = 5,                   /* "FILTER declaration"  */
  YYSYMBOL_T_RETURN = 6,                   /* "RETURN declaration"  */
  YYSYMBOL_T_COLLECT = 7,                  /* "COLLECT declaration"  */
  YYSYMBOL_T_SORT = 8,                     /* "SORT declaration"  */
  YYSYMBOL_T_LIMIT = 9,                    /* "LIMIT declaration"  */
  YYSYMBOL_T_WINDOW = 10,                  /* "WINDOW declaration"  */
  YYSYMBOL_T_ASC = 11,                     /* "ASC keyword"  */
  YYSYMBOL_T_DESC = 12,                    /* "DESC keyword"  */
  YYSYMBOL_T_IN = 13,                      /* "IN keyword"  */
  YYSYMBOL_T_WITH = 14,                    /* "WITH keyword"  */
  YYSYMBOL_T_INTO = 15,                    /* "INTO keyword"  */
  YYSYMBOL_T_AGGREGATE = 16,               /* "AGGREGATE keyword"  */
  YYSYMBOL_T_GRAPH = 17,                   /* "GRAPH keyword"  */
  YYSYMBOL_T_SHORTEST_PATH = 18,           /* "SHORTEST_PATH keyword"  */
  YYSYMBOL_T_K_SHORTEST_PATHS = 19,        /* "K_SHORTEST_PATHS keyword"  */
  YYSYMBOL_T_K_PATHS = 20,                 /* "K_PATHS keyword"  */
  YYSYMBOL_T_ALL_SHORTEST_PATHS = 21,      /* "ALL_SHORTEST_PATHS keyword"  */
  YYSYMBOL_T_DISTINCT = 22,                /* "DISTINCT modifier"  */
  YYSYMBOL_T_REMOVE = 23,                  /* "REMOVE command"  */
  YYSYMBOL_T_INSERT = 24,                  /* "INSERT command"  */
  YYSYMBOL_T_UPDATE = 25,                  /* "UPDATE command"  */
  YYSYMBOL_T_REPLACE = 26,                 /* "REPLACE command"  */
  YYSYMBOL_T_UPSERT = 27,                  /* "UPSERT command"  */
  YYSYMBOL_T_NULL = 28,                    /* "null"  */
  YYSYMBOL_T_TRUE = 29,                    /* "true"  */
  YYSYMBOL_T_FALSE = 30,                   /* "false"  */
  YYSYMBOL_T_STRING = 31,                  /* "identifier"  */
  YYSYMBOL_T_QUOTED_STRING = 32,           /* "quoted string"  */
  YYSYMBOL_T_INTEGER = 33,                 /* "integer number"  */
  YYSYMBOL_T_DOUBLE = 34,                  /* "number"  */
  YYSYMBOL_T_PARAMETER = 35,               /* "bind parameter"  */
  YYSYMBOL_T_DATA_SOURCE_PARAMETER = 36,   /* "bind data source parameter"  */
  YYSYMBOL_T_ASSIGN = 37,                  /* "assignment"  */
  YYSYMBOL_T_NOT = 38,                     /* "not operator"  */
  YYSYMBOL_T_AND = 39,                     /* "and operator"  */
  YYSYMBOL_T_OR = 40,                      /* "or operator"  */
  YYSYMBOL_T_NOT_IN = 41,                  /* "not in operator"  */
  YYSYMBOL_T_REGEX_MATCH = 42,             /* "~= operator"  */
  YYSYMBOL_T_REGEX_NON_MATCH = 43,         /* "~! operator"  */
  YYSYMBOL_T_EQ = 44,                      /* "== operator"  */
  YYSYMBOL_T_NE = 45,                      /* "!= operator"  */
  YYSYMBOL_T_LT = 46,                      /* "< operator"  */
  YYSYMBOL_T_GT = 47,                      /* "> operator"  */
  YYSYMBOL_T_LE = 48,                      /* "<= operator"  */
  YYSYMBOL_T_GE = 49,                      /* ">= operator"  */
  YYSYMBOL_T_LIKE = 50,                    /* "like operator"  */
  YYSYMBOL_T_PLUS = 51,                    /* "+ operator"  */
  YYSYMBOL_T_MINUS = 52,                   /* "- operator"  */
  YYSYMBOL_T_TIMES = 53,                   /* "* operator"  */
  YYSYMBOL_T_DIV = 54,                     /* "/ operator"  */
  YYSYMBOL_T_MOD = 55,                     /* "% operator"  */
  YYSYMBOL_T_QUESTION = 56,                /* "?"  */
  YYSYMBOL_T_COLON = 57,                   /* ":"  */
  YYSYMBOL_T_SCOPE = 58,                   /* "::"  */
  YYSYMBOL_T_RANGE = 59,                   /* ".."  */
  YYSYMBOL_T_COMMA = 60,                   /* ","  */
  YYSYMBOL_T_OPEN = 61,                    /* "("  */
  YYSYMBOL_T_CLOSE = 62,                   /* ")"  */
  YYSYMBOL_T_OBJECT_OPEN = 63,             /* "{"  */
  YYSYMBOL_T_OBJECT_CLOSE = 64,            /* "}"  */
  YYSYMBOL_T_ARRAY_OPEN = 65,              /* "["  */
  YYSYMBOL_T_ARRAY_CLOSE = 66,             /* "]"  */
  YYSYMBOL_T_OUTBOUND = 67,                /* "outbound modifier"  */
  YYSYMBOL_T_INBOUND = 68,                 /* "inbound modifier"  */
  YYSYMBOL_T_ANY = 69,                     /* "any modifier"  */
  YYSYMBOL_T_ALL = 70,                     /* "all modifier"  */
  YYSYMBOL_T_NONE = 71,                    /* "none modifier"  */
  YYSYMBOL_T_AT_LEAST = 72,                /* "at least modifier"  */
  YYSYMBOL_UMINUS = 73,                    /* UMINUS  */
  YYSYMBOL_UPLUS = 74,                     /* UPLUS  */
  YYSYMBOL_UNEGATION = 75,                 /* UNEGATION  */
  YYSYMBOL_FUNCCALL = 76,                  /* FUNCCALL  */
  YYSYMBOL_REFERENCE = 77,                 /* REFERENCE  */
  YYSYMBOL_INDEXED = 78,                   /* INDEXED  */
  YYSYMBOL_EXPANSION = 79,                 /* EXPANSION  */
  YYSYMBOL_80_ = 80,                       /* '.'  */
  YYSYMBOL_YYACCEPT = 81,                  /* $accept  */
  YYSYMBOL_optional_prune_variable = 82,   /* optional_prune_variable  */
  YYSYMBOL_with_collection = 83,           /* with_collection  */
  YYSYMBOL_with_collection_list = 84,      /* with_collection_list  */
  YYSYMBOL_optional_with = 85,             /* optional_with  */
  YYSYMBOL_86_1 = 86,                      /* $@1  */
  YYSYMBOL_queryStart = 87,                /* queryStart  */
  YYSYMBOL_query = 88,                     /* query  */
  YYSYMBOL_final_statement = 89,           /* final_statement  */
  YYSYMBOL_optional_statement_block_statements = 90, /* optional_statement_block_statements  */
  YYSYMBOL_statement_block_statement = 91, /* statement_block_statement  */
  YYSYMBOL_more_output_variables = 92,     /* more_output_variables  */
  YYSYMBOL_for_output_variables = 93,      /* for_output_variables  */
  YYSYMBOL_prune_and_options = 94,         /* prune_and_options  */
  YYSYMBOL_traversal_graph_info = 95,      /* traversal_graph_info  */
  YYSYMBOL_shortest_path_graph_info = 96,  /* shortest_path_graph_info  */
  YYSYMBOL_k_shortest_paths_graph_info = 97, /* k_shortest_paths_graph_info  */
  YYSYMBOL_k_paths_graph_info = 98,        /* k_paths_graph_info  */
  YYSYMBOL_all_shortest_paths_graph_info = 99, /* all_shortest_paths_graph_info  */
  YYSYMBOL_for_statement = 100,            /* for_statement  */
  YYSYMBOL_101_2 = 101,                    /* $@2  */
  YYSYMBOL_102_3 = 102,                    /* $@3  */
  YYSYMBOL_filter_statement = 103,         /* filter_statement  */
  YYSYMBOL_let_statement = 104,            /* let_statement  */
  YYSYMBOL_let_list = 105,                 /* let_list  */
  YYSYMBOL_let_element = 106,              /* let_element  */
  YYSYMBOL_array_destructuring = 107,      /* array_destructuring  */
  YYSYMBOL_108_4 = 108,                    /* $@4  */
  YYSYMBOL_array_destructuring_element = 109, /* array_destructuring_element  */
  YYSYMBOL_object_destructuring = 110,     /* object_destructuring  */
  YYSYMBOL_111_5 = 111,                    /* $@5  */
  YYSYMBOL_object_destructuring_element = 112, /* object_destructuring_element  */
  YYSYMBOL_count_into = 113,               /* count_into  */
  YYSYMBOL_collect_variable_list = 114,    /* collect_variable_list  */
  YYSYMBOL_115_6 = 115,                    /* $@6  */
  YYSYMBOL_collect_statement = 116,        /* collect_statement  */
  YYSYMBOL_collect_list = 117,             /* collect_list  */
  YYSYMBOL_collect_element = 118,          /* collect_element  */
  YYSYMBOL_collect_optional_into = 119,    /* collect_optional_into  */
  YYSYMBOL_variable_list = 120,            /* variable_list  */
  YYSYMBOL_keep = 121,                     /* keep  */
  YYSYMBOL_122_7 = 122,                    /* $@7  */
  YYSYMBOL_aggregate = 123,                /* aggregate  */
  YYSYMBOL_124_8 = 124,                    /* $@8  */
  YYSYMBOL_aggregate_list = 125,           /* aggregate_list  */
  YYSYMBOL_aggregate_element = 126,        /* aggregate_element  */
  YYSYMBOL_aggregate_function_call = 127,  /* aggregate_function_call  */
  YYSYMBOL_128_9 = 128,                    /* $@9  */
  YYSYMBOL_sort_statement = 129,           /* sort_statement  */
  YYSYMBOL_130_10 = 130,                   /* $@10  */
  YYSYMBOL_sort_list = 131,                /* sort_list  */
  YYSYMBOL_sort_element = 132,             /* sort_element  */
  YYSYMBOL_sort_direction = 133,           /* sort_direction  */
  YYSYMBOL_limit_statement = 134,          /* limit_statement  */
  YYSYMBOL_window_statement = 135,         /* window_statement  */
  YYSYMBOL_return_statement = 136,         /* return_statement  */
  YYSYMBOL_in_or_into_collection = 137,    /* in_or_into_collection  */
  YYSYMBOL_remove_statement = 138,         /* remove_statement  */
  YYSYMBOL_insert_statement = 139,         /* insert_statement  */
  YYSYMBOL_update_parameters = 140,        /* update_parameters  */
  YYSYMBOL_update_statement = 141,         /* update_statement  */
  YYSYMBOL_replace_parameters = 142,       /* replace_parameters  */
  YYSYMBOL_replace_statement = 143,        /* replace_statement  */
  YYSYMBOL_update_or_replace = 144,        /* update_or_replace  */
  YYSYMBOL_upsert_input = 145,             /* upsert_input  */
  YYSYMBOL_upsert_statement = 146,         /* upsert_statement  */
  YYSYMBOL_147_11 = 147,                   /* $@11  */
  YYSYMBOL_148_12 = 148,                   /* $@12  */
  YYSYMBOL_149_13 = 149,                   /* $@13  */
  YYSYMBOL_quantifier = 150,               /* quantifier  */
  YYSYMBOL_distinct_expression = 151,      /* distinct_expression  */
  YYSYMBOL_152_14 = 152,                   /* $@14  */
  YYSYMBOL_expression = 153,               /* expression  */
  YYSYMBOL_function_name = 154,            /* function_name  */
  YYSYMBOL_function_call = 155,            /* function_call  */
  YYSYMBOL_156_15 = 156,                   /* $@15  */
  YYSYMBOL_157_16 = 157,                   /* $@16  */
  YYSYMBOL_operator_unary = 158,           /* operator_unary  */
  YYSYMBOL_operator_binary = 159,          /* operator_binary  */
  YYSYMBOL_160_17 = 160,                   /* $@17  */
  YYSYMBOL_161_18 = 161,                   /* $@18  */
  YYSYMBOL_operator_ternary = 162,         /* operator_ternary  */
  YYSYMBOL_163_19 = 163,                   /* $@19  */
  YYSYMBOL_164_20 = 164,                   /* $@20  */
  YYSYMBOL_165_21 = 165,                   /* $@21  */
  YYSYMBOL_optional_function_call_arguments = 166, /* optional_function_call_arguments  */
  YYSYMBOL_expression_or_query = 167,      /* expression_or_query  */
  YYSYMBOL_168_22 = 168,                   /* $@22  */
  YYSYMBOL_function_arguments_list = 169,  /* function_arguments_list  */
  YYSYMBOL_compound_value = 170,           /* compound_value  */
  YYSYMBOL_array = 171,                    /* array  */
  YYSYMBOL_172_23 = 172,                   /* $@23  */
  YYSYMBOL_optional_array_elements = 173,  /* optional_array_elements  */
  YYSYMBOL_array_elements_list = 174,      /* array_elements_list  */
  YYSYMBOL_array_element = 175,            /* array_element  */
  YYSYMBOL_for_options = 176,              /* for_options  */
  YYSYMBOL_options = 177,                  /* options  */
  YYSYMBOL_object = 178,                   /* object  */
  YYSYMBOL_179_24 = 179,                   /* $@24  */
  YYSYMBOL_optional_object_elements = 180, /* optional_object_elements  */
  YYSYMBOL_object_elements_list = 181,     /* object_elements_list  */
  YYSYMBOL_object_element = 182,           /* object_element  */
  YYSYMBOL_array_filter_operator = 183,    /* array_filter_operator  */
  YYSYMBOL_array_map_operator = 184,       /* array_map_operator  */
  YYSYMBOL_optional_array_filter = 185,    /* optional_array_filter  */
  YYSYMBOL_optional_array_limit = 186,     /* optional_array_limit  */
  YYSYMBOL_optional_array_return = 187,    /* optional_array_return  */
  YYSYMBOL_graph_collection = 188,         /* graph_collection  */
  YYSYMBOL_graph_collection_list = 189,    /* graph_collection_list  */
  YYSYMBOL_graph_subject = 190,            /* graph_subject  */
  YYSYMBOL_191_25 = 191,                   /* $@25  */
  YYSYMBOL_graph_direction = 192,          /* graph_direction  */
  YYSYMBOL_graph_direction_steps = 193,    /* graph_direction_steps  */
  YYSYMBOL_reference = 194,                /* reference  */
  YYSYMBOL_195_26 = 195,                   /* $@26  */
  YYSYMBOL_196_27 = 196,                   /* $@27  */
  YYSYMBOL_197_28 = 197,                   /* $@28  */
  YYSYMBOL_simple_value = 198,             /* simple_value  */
  YYSYMBOL_numeric_value = 199,            /* numeric_value  */
  YYSYMBOL_value_literal = 200,            /* value_literal  */
  YYSYMBOL_in_or_into_collection_name = 201, /* in_or_into_collection_name  */
  YYSYMBOL_bind_parameter = 202,           /* bind_parameter  */
  YYSYMBOL_bind_parameter_datasource_expected = 203, /* bind_parameter_datasource_expected  */
  YYSYMBOL_object_element_name = 204,      /* object_element_name  */
  YYSYMBOL_variable_name = 205             /* variable_name  */
};
typedef enum yysymbol_kind_t yysymbol_kind_t;


/* Second part of user prologue.  */
#line 57 "grammar.y"


using namespace arangodb::aql;

#define scanner parser->scanner()

/// @brief forward for lexer function defined in Aql/tokens.ll
int Aqllex(YYSTYPE*, YYLTYPE*, void*);

/// @brief register parse error (this will also abort the currently running query)
void Aqlerror(YYLTYPE* locp,
              arangodb::aql::Parser* parser,
              char const* message) {
  parser->registerParseError(TRI_ERROR_QUERY_PARSE, message, locp->first_line, locp->first_column);
}

namespace {

// forward declaration
void destructureObject(Parser* parser, std::string_view sourceVariable, 
                       arangodb::containers::SmallVector<AstNode const*, 8>& paths, AstNode const* array);

void destructureArray(Parser* parser, std::string_view sourceVariable, 
                      arangodb::containers::SmallVector<AstNode const*, 8>& paths, AstNode const* array) {
  int64_t index = 0;
  size_t const n = array->numMembers();

  for (size_t i = 0; i < n; ++i) {
    auto member = array->getMember(i);
    
    if (member->type == NODE_TYPE_ARRAY) {
      // array value => recurse
      AstNode* indexNode = parser->ast()->createNodeValueInt(index);
      paths.emplace_back(indexNode);
 
      int64_t tag = member->getIntValue(true);
      if (tag == 1) {
        destructureArray(parser, sourceVariable, paths, member);
      } else {
        destructureObject(parser, sourceVariable, paths, member);
      }

      paths.pop_back();
    } else if (member->type == NODE_TYPE_VARIABLE) {
      // an actual variable assignment. we need to do something!
      AstNode* indexNode = parser->ast()->createNodeValueInt(index);
      paths.emplace_back(indexNode);

      AstNode const* accessor = parser->ast()->createNodeReference(sourceVariable);
      for (auto const& it : paths) {
        accessor = parser->ast()->createNodeIndexedAccess(accessor, it);
      }
      AstNode* node = parser->ast()->createNodeLet(member, accessor);
      parser->ast()->addOperation(node);
      
      paths.pop_back();
    }

    ++index;
  }
}

void destructureObject(Parser* parser, std::string_view sourceVariable, 
                       arangodb::containers::SmallVector<AstNode const*, 8>& paths, AstNode const* array) {
  size_t const n = array->numMembers();
  
  for (size_t i = 0; i < n; i += 2) {
    auto member = array->getMember(i);
    
    if (member->isStringValue()) {
      AstNode const* assigned = array->getMember(i + 1);
      
      paths.emplace_back(member);
      if (assigned->type == NODE_TYPE_ARRAY) {
        // need to recurse
        int64_t tag = assigned->getIntValue(true);
        if (tag == 1) {
          destructureArray(parser, sourceVariable, paths, assigned);
        } else {
          destructureObject(parser, sourceVariable, paths, assigned);
        }
      } else if (assigned->type == NODE_TYPE_VARIABLE) {
        AstNode* accessor = parser->ast()->createNodeReference(sourceVariable);
        for (auto const& it : paths) {
          accessor = parser->ast()->createNodeIndexedAccess(accessor, it);
        }
        AstNode* node = parser->ast()->createNodeLet(assigned, accessor);
        parser->ast()->addOperation(node);
      }
      paths.pop_back();
    }
  }
}

bool caseInsensitiveEqual(std::string_view lhs, std::string_view rhs) noexcept {
  return std::equal(lhs.begin(), lhs.end(), rhs.begin(), rhs.end(), [](char l, char r) {
    return arangodb::basics::StringUtils::tolower(l) == arangodb::basics::StringUtils::tolower(r);
  });
}

void handleUpsertOptions(AstNode const* options, AstNode* forNode, AstNode* forOptionsNode, AstNode* upsertOptionsNode, bool& canReadOwnWrites) {
  TRI_ASSERT(canReadOwnWrites);
  if (options != nullptr && options->type == NODE_TYPE_OBJECT) {
    for (size_t i = 0; i < options->numMembers(); ++i) {
      auto nodeMember = options->getMember(i);
      if (nodeMember->type == NODE_TYPE_OBJECT_ELEMENT) {
        std::string_view nodeMemberName = nodeMember->getStringView();
        if (nodeMemberName == arangodb::StaticStrings::IndexHintOption || 
          nodeMemberName == arangodb::StaticStrings::IndexHintOptionForce ||
          nodeMemberName == arangodb::StaticStrings::IndexHintDisableIndex ||
          nodeMemberName == arangodb::StaticStrings::UseCache) {
          forOptionsNode->addMember(nodeMember);
        } else {
          upsertOptionsNode->addMember(nodeMember);
        }

        if (nodeMemberName == arangodb::StaticStrings::ReadOwnWrites) {
          canReadOwnWrites = nodeMember->getMember(0)->isTrue();
        }
      }
    }
    forNode->changeMember(2, forOptionsNode);
  }
  if (canReadOwnWrites) {
    forNode->setFlag(AstNodeFlagType::FLAG_READ_OWN_WRITES);
  }
}

AstNode* buildShortestPathInfo(Parser* parser,
                               char const* seperator,
                               AstNode* direction,
                               AstNode* startNode,
                               AstNode* endNode,
                               AstNode* graph,
                               AstNode* options,
                               YYLTYPE const& yyloc) {
  if (!caseInsensitiveEqual(seperator, "TO")) {
    parser->registerParseError(TRI_ERROR_QUERY_PARSE, "unexpected qualifier '%s', expecting 'TO'", seperator, yyloc.first_line, yyloc.first_column);
  }
  auto infoNode = parser->ast()->createNodeArray();
  infoNode->addMember(direction);
  infoNode->addMember(startNode);
  infoNode->addMember(endNode);
  infoNode->addMember(graph);
  
  auto opts = parser->ast()->createNodeOptions(options);
  TRI_ASSERT(opts != nullptr);
  infoNode->addMember(opts);
  return infoNode;
}

void checkOutVariables(Parser* parser,
                       AstNode const* variableNamesNode,
                       size_t minVariables, size_t maxVariables,
                       char const* errorMessage,
                       YYLTYPE const& yyloc) {
  TRI_ASSERT(variableNamesNode != nullptr);
  TRI_ASSERT(variableNamesNode->type == NODE_TYPE_ARRAY);
  if (variableNamesNode->numMembers() < minVariables ||
      variableNamesNode->numMembers() > maxVariables) {
    parser->registerParseError(TRI_ERROR_QUERY_PARSE, errorMessage, yyloc.first_line, yyloc.first_column);
  }
}

void validateOptions(Parser* parser, AstNode const* node,
                     int line, int column) {
  TRI_ASSERT(node != nullptr);
  if (!node->isObject()) {
    parser->registerParseError(TRI_ERROR_QUERY_PARSE, "'OPTIONS' have to be an object", line, column);
  }
  if (!node->isConstant()) {
    parser->registerParseError(TRI_ERROR_QUERY_COMPILE_TIME_OPTIONS, "'OPTIONS' have to be known at query compile time", line, column);
  }
}

/// @brief check if any of the variables used in the INTO expression were
/// introduced by the COLLECT itself, in which case it would fail
void checkCollectVariables(Parser* parser, char const* context, 
                           AstNode const* expression,
                           int line, int column,
                           VarSet const& variablesIntroduced) {
  if (expression == nullptr) {
    return;
  }

  arangodb::containers::SmallVector<AstNode const*, 4> toTraverse = { expression };
 
  // recursively find all variables in expression
  auto preVisitor = [](AstNode const* node) -> bool {
    // ignore constant nodes, as they can't contain variables
    return !node->isConstant();
  };
  auto visitor = [&](AstNode const* node) {
    // reference to a variable
    if (node != nullptr && node->type == NODE_TYPE_REFERENCE) {
      auto variable = static_cast<Variable const*>(node->getData());

      if (variable == nullptr) {
        THROW_ARANGO_EXCEPTION_MESSAGE(TRI_ERROR_INTERNAL,
                                       "invalid reference in AST");
      }

      if (variable->needsRegister()) {
        if (variablesIntroduced.contains(variable)) {
          auto msg = absl::StrCat("use of COLLECT variable '", variable->name, "' inside same COLLECT's expression");
          parser->registerParseError(TRI_ERROR_QUERY_VARIABLE_NAME_UNKNOWN, msg.c_str(), variable->name, line, column);
        }
        if (auto subquery = parser->ast()->getSubqueryForVariable(variable); subquery != nullptr) {
          toTraverse.push_back(subquery);
        }
      }
    }
  };

  size_t pos = 0;
  while (pos < toTraverse.size()) {
    AstNode const* node = toTraverse[pos++];
    // note: the traverseReadOnly may add to the toTraverse vector!
    Ast::traverseReadOnly(node, preVisitor, visitor);
  }
}

/// @brief register variables in the scope
void registerAssignVariables(Parser* parser, arangodb::aql::Scopes* scopes,
                             int line, int column,
                             VarSet& variablesIntroduced,
                             AstNode const* vars) {
  size_t const n = vars->numMembers();

  for (size_t i = 0; i < n; ++i) {
    auto member = vars->getMemberUnchecked(i);

    if (member != nullptr) {
      TRI_ASSERT(member->type == NODE_TYPE_ASSIGN);
      // keep track of the variable for our assignment
      auto v = static_cast<Variable*>(member->getMember(0)->getData());
      scopes->addVariable(v);
      variablesIntroduced.emplace(v);
    }
  }
}

/// @brief validate the aggregate variables expressions
bool validateAggregates(Parser* parser, AstNode const* aggregates,
                        int line, int column) {
  VarSet variablesIntroduced{};
  VarSet varsInAssignment{};
  
  size_t const n = aggregates->numMembers();
  for (size_t i = 0; i < n; ++i) {
    auto member = aggregates->getMemberUnchecked(i);

    if (member != nullptr) {
      TRI_ASSERT(member->type == NODE_TYPE_ASSIGN);
      
      // keep track of the variable for our assignment
      auto v = static_cast<Variable*>(member->getMember(0)->getData());
      variablesIntroduced.emplace(v);

      auto func = member->getMember(1);
      if (func->type != NODE_TYPE_FCALL) {
        // aggregate expression must be a function call
        constexpr std::string_view error = "aggregate expression must be a function call";
        parser->registerParseError(TRI_ERROR_QUERY_INVALID_AGGREGATE_EXPRESSION, error, line, column);
      } else {
        auto f = static_cast<arangodb::aql::Function*>(func->getData());
        if (!Aggregator::isValid(f->name)) {
          // aggregate expression must be a call to MIN|MAX|LENGTH...
          constexpr std::string_view error = "unknown aggregate function used";
          parser->registerParseError(TRI_ERROR_QUERY_INVALID_AGGREGATE_EXPRESSION, error, line, column);
        }
      }
      
      // check if any of the assignment refers to a variable introduced by this very
      // same COLLECT, e.g. COLLECT aggregate x = .., y = x
      varsInAssignment.clear();
      Ast::getReferencedVariables(member->getMember(1), varsInAssignment);
      for (auto const& it : varsInAssignment) {
        if (variablesIntroduced.contains(it)) {
          auto msg = absl::StrCat("use of COLLECT variable '", it->name, "' inside same COLLECT");
          parser->registerParseError(TRI_ERROR_QUERY_VARIABLE_NAME_UNKNOWN, msg.c_str(), it->name, line, column);
        }
      }
    }
  }

  return true;
}

/// @brief validate the WINDOW specification
bool validateWindowSpec(Parser* parser, AstNode const* spec,
                        int line, int column) {
  bool preceding = false;
  bool following = false;
  
  size_t const n = spec->numMembers();
  if (n == 0) {
    parser->registerParseError(TRI_ERROR_QUERY_PARSE, "At least one WINDOW bound must be specified ('preceding'/'following')", line, column);
  }
  
  for (size_t i = 0; i < n; ++i) {
    auto member = spec->getMemberUnchecked(i);

    if (member != nullptr) {
      TRI_ASSERT(member->type == NODE_TYPE_OBJECT_ELEMENT);
      bool* attr{};
      auto name = member->getString();
      if (name == "preceding") {
        attr = &preceding;
      } else if (name == "following") {
        attr = &following;
      } else  {
        char const* error = "Invalid WINDOW attribute '%s'; only \"preceding\" and \"following\" are supported";
        parser->registerParseError(TRI_ERROR_QUERY_PARSE, error, name, line, column);
      }
      
      if (*attr) {
        char const* error = "WINDOW attribute '%s' is specified multiple times";
        parser->registerParseError(TRI_ERROR_QUERY_PARSE, error, name, line, column);
      }
      
      // mark this attribute as "seen"
      *attr = true;
    }
  }
  return true;
}

/// @brief start a new scope for the collect
bool startCollectScope(arangodb::aql::Scopes* scopes) {
  // check if we are in the main scope
  if (scopes->type() == arangodb::aql::AQL_SCOPE_MAIN ||
      scopes->type() == arangodb::aql::AQL_SCOPE_SUBQUERY) {
    return false;
  }


  // end the active scopes
  scopes->endNested();
  // start a new scope
  scopes->start(arangodb::aql::AQL_SCOPE_COLLECT);
  return true;
}

/// @brief get the INTO variable stored in a node (may not exist)
AstNode const* getIntoVariable(Parser* parser, AstNode const* node) {
  if (node == nullptr) {
    return nullptr;
  }

  if (node->type == NODE_TYPE_VALUE) {
    // node is a string containing the variable name
    return parser->ast()->createNodeVariable(node->getStringView(), true);
  }

  // node is an array with the variable name as the first member
  TRI_ASSERT(node->type == NODE_TYPE_ARRAY);
  TRI_ASSERT(node->numMembers() == 2);

  auto v = node->getMember(0);
  TRI_ASSERT(v->type == NODE_TYPE_VALUE);
  return parser->ast()->createNodeVariable(v->getStringView(), true);
}

/// @brief get the INTO variable = expression stored in a node (may not exist)
AstNode const* getIntoExpression(AstNode const* node) {
  if (node == nullptr || node->type == NODE_TYPE_VALUE) {
    return nullptr;
  }

  // node is an array with the expression as the second member
  TRI_ASSERT(node->type == NODE_TYPE_ARRAY);
  TRI_ASSERT(node->numMembers() == 2);

  return node->getMember(1);
}

AstNode* transformOutputVariables(Parser* parser, AstNode const* names) {
  auto wrapperNode = parser->ast()->createNodeArray();
  for (size_t i = 0; i < names->numMembers(); ++i) {
    AstNode* variableNameNode = names->getMemberUnchecked(i);
    TRI_ASSERT(variableNameNode->isStringValue());
    AstNode* variableNode = parser->ast()->createNodeVariable(variableNameNode->getStringView(), true);
    wrapperNode->addMember(variableNode);
  }
  return wrapperNode;
}

} // namespace


#line 745 "grammar.cpp"


#ifdef short
# undef short
#endif

/* On compilers that do not define __PTRDIFF_MAX__ etc., make sure
   <limits.h> and (if available) <stdint.h> are included
   so that the code can choose integer types of a good width.  */

#ifndef __PTRDIFF_MAX__
# include <limits.h> /* INFRINGES ON USER NAME SPACE */
# if defined __STDC_VERSION__ && 199901 <= __STDC_VERSION__
#  include <stdint.h> /* INFRINGES ON USER NAME SPACE */
#  define YY_STDINT_H
# endif
#endif

/* Narrow types that promote to a signed type and that can represent a
   signed or unsigned integer of at least N bits.  In tables they can
   save space and decrease cache pressure.  Promoting to a signed type
   helps avoid bugs in integer arithmetic.  */

#ifdef __INT_LEAST8_MAX__
typedef __INT_LEAST8_TYPE__ yytype_int8;
#elif defined YY_STDINT_H
typedef int_least8_t yytype_int8;
#else
typedef signed char yytype_int8;
#endif

#ifdef __INT_LEAST16_MAX__
typedef __INT_LEAST16_TYPE__ yytype_int16;
#elif defined YY_STDINT_H
typedef int_least16_t yytype_int16;
#else
typedef short yytype_int16;
#endif

/* Work around bug in HP-UX 11.23, which defines these macros
   incorrectly for preprocessor constants.  This workaround can likely
   be removed in 2023, as HPE has promised support for HP-UX 11.23
   (aka HP-UX 11i v2) only through the end of 2022; see Table 2 of
   <https://h20195.www2.hpe.com/V2/getpdf.aspx/4AA4-7673ENW.pdf>.  */
#ifdef __hpux
# undef UINT_LEAST8_MAX
# undef UINT_LEAST16_MAX
# define UINT_LEAST8_MAX 255
# define UINT_LEAST16_MAX 65535
#endif

#if defined __UINT_LEAST8_MAX__ && __UINT_LEAST8_MAX__ <= __INT_MAX__
typedef __UINT_LEAST8_TYPE__ yytype_uint8;
#elif (!defined __UINT_LEAST8_MAX__ && defined YY_STDINT_H \
       && UINT_LEAST8_MAX <= INT_MAX)
typedef uint_least8_t yytype_uint8;
#elif !defined __UINT_LEAST8_MAX__ && UCHAR_MAX <= INT_MAX
typedef unsigned char yytype_uint8;
#else
typedef short yytype_uint8;
#endif

#if defined __UINT_LEAST16_MAX__ && __UINT_LEAST16_MAX__ <= __INT_MAX__
typedef __UINT_LEAST16_TYPE__ yytype_uint16;
#elif (!defined __UINT_LEAST16_MAX__ && defined YY_STDINT_H \
       && UINT_LEAST16_MAX <= INT_MAX)
typedef uint_least16_t yytype_uint16;
#elif !defined __UINT_LEAST16_MAX__ && USHRT_MAX <= INT_MAX
typedef unsigned short yytype_uint16;
#else
typedef int yytype_uint16;
#endif

#ifndef YYPTRDIFF_T
# if defined __PTRDIFF_TYPE__ && defined __PTRDIFF_MAX__
#  define YYPTRDIFF_T __PTRDIFF_TYPE__
#  define YYPTRDIFF_MAXIMUM __PTRDIFF_MAX__
# elif defined PTRDIFF_MAX
#  ifndef ptrdiff_t
#   include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  endif
#  define YYPTRDIFF_T ptrdiff_t
#  define YYPTRDIFF_MAXIMUM PTRDIFF_MAX
# else
#  define YYPTRDIFF_T long
#  define YYPTRDIFF_MAXIMUM LONG_MAX
# endif
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif defined __STDC_VERSION__ && 199901 <= __STDC_VERSION__
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned
# endif
#endif

#define YYSIZE_MAXIMUM                                  \
  YY_CAST (YYPTRDIFF_T,                                 \
           (YYPTRDIFF_MAXIMUM < YY_CAST (YYSIZE_T, -1)  \
            ? YYPTRDIFF_MAXIMUM                         \
            : YY_CAST (YYSIZE_T, -1)))

#define YYSIZEOF(X) YY_CAST (YYPTRDIFF_T, sizeof (X))


/* Stored state numbers (used for stacks). */
typedef yytype_int16 yy_state_t;

/* State numbers in computations.  */
typedef int yy_state_fast_t;

#ifndef YY_
# if defined YYENABLE_NLS && YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(Msgid) dgettext ("bison-runtime", Msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(Msgid) Msgid
# endif
#endif


#ifndef YY_ATTRIBUTE_PURE
# if defined __GNUC__ && 2 < __GNUC__ + (96 <= __GNUC_MINOR__)
#  define YY_ATTRIBUTE_PURE __attribute__ ((__pure__))
# else
#  define YY_ATTRIBUTE_PURE
# endif
#endif

#ifndef YY_ATTRIBUTE_UNUSED
# if defined __GNUC__ && 2 < __GNUC__ + (7 <= __GNUC_MINOR__)
#  define YY_ATTRIBUTE_UNUSED __attribute__ ((__unused__))
# else
#  define YY_ATTRIBUTE_UNUSED
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YY_USE(E) ((void) (E))
#else
# define YY_USE(E) /* empty */
#endif

/* Suppress an incorrect diagnostic about yylval being uninitialized.  */
#if defined __GNUC__ && ! defined __ICC && 406 <= __GNUC__ * 100 + __GNUC_MINOR__
# if __GNUC__ * 100 + __GNUC_MINOR__ < 407
#  define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN                           \
    _Pragma ("GCC diagnostic push")                                     \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")
# else
#  define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN                           \
    _Pragma ("GCC diagnostic push")                                     \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")              \
    _Pragma ("GCC diagnostic ignored \"-Wmaybe-uninitialized\"")
# endif
# define YY_IGNORE_MAYBE_UNINITIALIZED_END      \
    _Pragma ("GCC diagnostic pop")
#else
# define YY_INITIAL_VALUE(Value) Value
#endif
#ifndef YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_END
#endif
#ifndef YY_INITIAL_VALUE
# define YY_INITIAL_VALUE(Value) /* Nothing. */
#endif

#if defined __cplusplus && defined __GNUC__ && ! defined __ICC && 6 <= __GNUC__
# define YY_IGNORE_USELESS_CAST_BEGIN                          \
    _Pragma ("GCC diagnostic push")                            \
    _Pragma ("GCC diagnostic ignored \"-Wuseless-cast\"")
# define YY_IGNORE_USELESS_CAST_END            \
    _Pragma ("GCC diagnostic pop")
#endif
#ifndef YY_IGNORE_USELESS_CAST_BEGIN
# define YY_IGNORE_USELESS_CAST_BEGIN
# define YY_IGNORE_USELESS_CAST_END
#endif


#define YY_ASSERT(E) ((void) (0 && (E)))

#if 1

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined EXIT_SUCCESS
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
      /* Use EXIT_SUCCESS as a witness for stdlib.h.  */
#     ifndef EXIT_SUCCESS
#      define EXIT_SUCCESS 0
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's 'empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined EXIT_SUCCESS \
       && ! ((defined YYMALLOC || defined malloc) \
             && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef EXIT_SUCCESS
#    define EXIT_SUCCESS 0
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined EXIT_SUCCESS
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined EXIT_SUCCESS
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* 1 */

#if (! defined yyoverflow \
     && (! defined __cplusplus \
         || (defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL \
             && defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yy_state_t yyss_alloc;
  YYSTYPE yyvs_alloc;
  YYLTYPE yyls_alloc;
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (YYSIZEOF (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (YYSIZEOF (yy_state_t) + YYSIZEOF (YYSTYPE) \
             + YYSIZEOF (YYLTYPE)) \
      + 2 * YYSTACK_GAP_MAXIMUM)

# define YYCOPY_NEEDED 1

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack_alloc, Stack)                           \
    do                                                                  \
      {                                                                 \
        YYPTRDIFF_T yynewbytes;                                         \
        YYCOPY (&yyptr->Stack_alloc, Stack, yysize);                    \
        Stack = &yyptr->Stack_alloc;                                    \
        yynewbytes = yystacksize * YYSIZEOF (*Stack) + YYSTACK_GAP_MAXIMUM; \
        yyptr += yynewbytes / YYSIZEOF (*yyptr);                        \
      }                                                                 \
    while (0)

#endif

#if defined YYCOPY_NEEDED && YYCOPY_NEEDED
/* Copy COUNT objects from SRC to DST.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(Dst, Src, Count) \
      __builtin_memcpy (Dst, Src, YY_CAST (YYSIZE_T, (Count)) * sizeof (*(Src)))
#  else
#   define YYCOPY(Dst, Src, Count)              \
      do                                        \
        {                                       \
          YYPTRDIFF_T yyi;                      \
          for (yyi = 0; yyi < (Count); yyi++)   \
            (Dst)[yyi] = (Src)[yyi];            \
        }                                       \
      while (0)
#  endif
# endif
#endif /* !YYCOPY_NEEDED */

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  7
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   1977

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  81
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  125
/* YYNRULES -- Number of rules.  */
#define YYNRULES  305
/* YYNSTATES -- Number of states.  */
#define YYNSTATES  539

/* YYMAXUTOK -- Last valid token kind.  */
#define YYMAXUTOK   334


/* YYTRANSLATE(TOKEN-NUM) -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex, with out-of-bounds checking.  */
#define YYTRANSLATE(YYX)                                \
  (0 <= (YYX) && (YYX) <= YYMAXUTOK                     \
   ? YY_CAST (yysymbol_kind_t, yytranslate[YYX])        \
   : YYSYMBOL_YYUNDEF)

/* YYTRANSLATE[TOKEN-NUM] -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex.  */
static const yytype_int8 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,    80,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79
};

#if YYDEBUG
/* YYRLINE[YYN] -- Source line where rule number YYN was defined.  */
static const yytype_int16 yyrline[] =
{
       0,   652,   652,   658,   668,   671,   677,   681,   685,   692,
     694,   694,   706,   711,   716,   718,   721,   724,   727,   730,
     736,   738,   743,   745,   747,   749,   751,   753,   755,   757,
     759,   761,   763,   765,   770,   777,   784,   790,   797,   821,
     844,   857,   863,   869,   875,   884,   884,   942,   942,   982,
     994,  1006,  1018,  1033,  1041,  1046,  1048,  1053,  1057,  1065,
    1076,  1076,  1086,  1089,  1092,  1095,  1098,  1103,  1103,  1113,
    1117,  1121,  1125,  1129,  1133,  1138,  1149,  1149,  1160,  1170,
    1183,  1207,  1262,  1281,  1312,  1314,  1319,  1326,  1329,  1332,
    1341,  1354,  1370,  1370,  1385,  1385,  1395,  1397,  1402,  1409,
    1409,  1421,  1421,  1432,  1435,  1441,  1447,  1450,  1453,  1456,
    1462,  1467,  1474,  1489,  1507,  1515,  1518,  1524,  1534,  1544,
    1552,  1563,  1568,  1576,  1587,  1592,  1595,  1601,  1604,  1610,
    1626,  1610,  1673,  1673,  1732,  1735,  1738,  1744,  1744,  1754,
    1760,  1763,  1766,  1769,  1772,  1775,  1781,  1784,  1797,  1797,
    1804,  1804,  1814,  1817,  1820,  1826,  1826,  1832,  1832,  1838,
    1841,  1844,  1847,  1850,  1853,  1856,  1859,  1862,  1865,  1868,
    1871,  1874,  1877,  1884,  1891,  1897,  1903,  1909,  1916,  1919,
    1922,  1925,  1928,  1931,  1934,  1937,  1940,  1944,  1948,  1952,
    1956,  1960,  1964,  1968,  1975,  2011,  1975,  2019,  2019,  2052,
    2054,  2059,  2062,  2062,  2082,  2085,  2091,  2094,  2100,  2100,
    2109,  2111,  2113,  2118,  2120,  2125,  2131,  2134,  2159,  2179,
    2182,  2197,  2197,  2206,  2208,  2210,  2215,  2217,  2222,  2238,
    2242,  2246,  2250,  2254,  2258,  2262,  2266,  2270,  2274,  2278,
    2282,  2292,  2299,  2302,  2308,  2311,  2317,  2320,  2324,  2328,
    2332,  2340,  2343,  2346,  2352,  2355,  2361,  2364,  2367,  2371,
    2377,  2381,  2388,  2394,  2394,  2403,  2407,  2411,  2420,  2423,
    2426,  2432,  2435,  2441,  2473,  2476,  2479,  2483,  2492,  2492,
    2509,  2524,  2537,  2550,  2550,  2595,  2595,  2653,  2656,  2662,
    2666,  2673,  2676,  2679,  2682,  2685,  2691,  2696,  2701,  2712,
    2720,  2727,  2735,  2743,  2746,  2751
};
#endif

/** Accessing symbol of state STATE.  */
#define YY_ACCESSING_SYMBOL(State) YY_CAST (yysymbol_kind_t, yystos[State])

#if 1
/* The user-facing name of the symbol whose (internal) number is
   YYSYMBOL.  No bounds checking.  */
static const char *yysymbol_name (yysymbol_kind_t yysymbol) YY_ATTRIBUTE_UNUSED;

/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "\"end of query string\"", "error", "\"invalid token\"",
  "\"FOR declaration\"", "\"LET declaration\"", "\"FILTER declaration\"",
  "\"RETURN declaration\"", "\"COLLECT declaration\"",
  "\"SORT declaration\"", "\"LIMIT declaration\"",
  "\"WINDOW declaration\"", "\"ASC keyword\"", "\"DESC keyword\"",
  "\"IN keyword\"", "\"WITH keyword\"", "\"INTO keyword\"",
  "\"AGGREGATE keyword\"", "\"GRAPH keyword\"",
  "\"SHORTEST_PATH keyword\"", "\"K_SHORTEST_PATHS keyword\"",
  "\"K_PATHS keyword\"", "\"ALL_SHORTEST_PATHS keyword\"",
  "\"DISTINCT modifier\"", "\"REMOVE command\"", "\"INSERT command\"",
  "\"UPDATE command\"", "\"REPLACE command\"", "\"UPSERT command\"",
  "\"null\"", "\"true\"", "\"false\"", "\"identifier\"",
  "\"quoted string\"", "\"integer number\"", "\"number\"",
  "\"bind parameter\"", "\"bind data source parameter\"", "\"assignment\"",
  "\"not operator\"", "\"and operator\"", "\"or operator\"",
  "\"not in operator\"", "\"~= operator\"", "\"~! operator\"",
  "\"== operator\"", "\"!= operator\"", "\"< operator\"", "\"> operator\"",
  "\"<= operator\"", "\">= operator\"", "\"like operator\"",
  "\"+ operator\"", "\"- operator\"", "\"* operator\"", "\"/ operator\"",
  "\"% operator\"", "\"?\"", "\":\"", "\"::\"", "\"..\"", "\",\"", "\"(\"",
  "\")\"", "\"{\"", "\"}\"", "\"[\"", "\"]\"", "\"outbound modifier\"",
  "\"inbound modifier\"", "\"any modifier\"", "\"all modifier\"",
  "\"none modifier\"", "\"at least modifier\"", "UMINUS", "UPLUS",
  "UNEGATION", "FUNCCALL", "REFERENCE", "INDEXED", "EXPANSION", "'.'",
  "$accept", "optional_prune_variable", "with_collection",
  "with_collection_list", "optional_with", "$@1", "queryStart", "query",
  "final_statement", "optional_statement_block_statements",
  "statement_block_statement", "more_output_variables",
  "for_output_variables", "prune_and_options", "traversal_graph_info",
  "shortest_path_graph_info", "k_shortest_paths_graph_info",
  "k_paths_graph_info", "all_shortest_paths_graph_info", "for_statement",
  "$@2", "$@3", "filter_statement", "let_statement", "let_list",
  "let_element", "array_destructuring", "$@4",
  "array_destructuring_element", "object_destructuring", "$@5",
  "object_destructuring_element", "count_into", "collect_variable_list",
  "$@6", "collect_statement", "collect_list", "collect_element",
  "collect_optional_into", "variable_list", "keep", "$@7", "aggregate",
  "$@8", "aggregate_list", "aggregate_element", "aggregate_function_call",
  "$@9", "sort_statement", "$@10", "sort_list", "sort_element",
  "sort_direction", "limit_statement", "window_statement",
  "return_statement", "in_or_into_collection", "remove_statement",
  "insert_statement", "update_parameters", "update_statement",
  "replace_parameters", "replace_statement", "update_or_replace",
  "upsert_input", "upsert_statement", "$@11", "$@12", "$@13", "quantifier",
  "distinct_expression", "$@14", "expression", "function_name",
  "function_call", "$@15", "$@16", "operator_unary", "operator_binary",
  "$@17", "$@18", "operator_ternary", "$@19", "$@20", "$@21",
  "optional_function_call_arguments", "expression_or_query", "$@22",
  "function_arguments_list", "compound_value", "array", "$@23",
  "optional_array_elements", "array_elements_list", "array_element",
  "for_options", "options", "object", "$@24", "optional_object_elements",
  "object_elements_list", "object_element", "array_filter_operator",
  "array_map_operator", "optional_array_filter", "optional_array_limit",
  "optional_array_return", "graph_collection", "graph_collection_list",
  "graph_subject", "$@25", "graph_direction", "graph_direction_steps",
  "reference", "$@26", "$@27", "$@28", "simple_value", "numeric_value",
  "value_literal", "in_or_into_collection_name", "bind_parameter",
  "bind_parameter_datasource_expected", "object_element_name",
  "variable_name", YY_NULLPTR
};

static const char *
yysymbol_name (yysymbol_kind_t yysymbol)
{
  return yytname[yysymbol];
}
#endif

#define YYPACT_NINF (-464)

#define yypact_value_is_default(Yyn) \
  ((Yyn) == YYPACT_NINF)

#define YYTABLE_NINF (-306)

#define yytable_value_is_error(Yyn) \
  0

/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
   STATE-NUM.  */
static const yytype_int16 yypact[] =
{
      17,  -464,  -464,    48,    79,  -464,   381,  -464,  -464,  -464,
    -464,  -464,    19,  -464,    38,    -1,  1836,  1680,   125,  -464,
    1836,  1836,  1836,  1836,  1836,  1836,   108,  -464,  -464,  -464,
    -464,  -464,   200,  -464,  -464,  -464,  -464,  -464,    12,    26,
      27,    45,    46,    79,  -464,  -464,    10,    71,  -464,  -464,
    -464,    30,  -464,    61,    62,    96,  -464,  -464,  -464,   -25,
    -464,  -464,  -464,  -464,  -464,  1836,   105,  1836,  1836,  1836,
    -464,  -464,  1548,    97,  -464,  -464,  -464,  -464,  -464,  -464,
    -464,   -45,  -464,  -464,  -464,  -464,  -464,  1548,   141,  -464,
     146,    38,   164,  1836,   886,   930,   169,   975,   975,  -464,
     703,  -464,   750,  -464,  -464,  -464,  -464,    38,   146,   159,
     164,  -464,    38,  1718,    38,    -1,    -1,  1836,  1836,  1836,
    -464,  -464,  -464,  -464,  1019,  -464,   568,  1836,  1836,    95,
    -464,  -464,  1836,  1836,  1836,  1836,  1836,  1836,  1836,  1836,
    1836,  1836,  1836,  1836,  1836,  1836,  1836,    99,  1836,  -464,
    -464,  -464,   142,   163,   174,  -464,  1760,   165,  1836,   205,
      38,   179,  -464,   172,  -464,   189,   146,   183,  -464,   612,
    1836,   179,  -464,  1874,   166,   146,   146,  1836,   146,  1836,
     146,  1836,   229,   218,  -464,   179,   146,  -464,   146,  -464,
    -464,  -464,  -464,  -464,  -464,  -464,  -464,  -464,   794,    57,
     447,    40,   211,  -464,     7,  -464,  -464,  -464,  1548,  1548,
    1548,  1798,  -464,   214,   220,   235,   237,   251,   253,  -464,
     254,   261,  1836,   262,   269,   276,   278,   280,   274,   279,
    -464,   283,  1548,   275,   282,  -464,   558,  1836,  1836,  1836,
    1836,  1836,   558,   140,   140,   140,   140,   231,   231,   231,
     231,   140,   248,   248,  -464,  -464,  -464,  1836,   287,   185,
    1836,  1836,  1836,  1836,  1836,  1836,  1836,  1836,  1836,  -464,
    1798,  -464,  -464,  1063,   289,   293,  -464,  -464,  1548,    38,
     288,  -464,   312,  -464,    38,  1836,  -464,  1836,  -464,  -464,
    -464,  -464,  -464,  -464,  1548,   169,    34,   536,   566,  -464,
    -464,  -464,  -464,  -464,  -464,  -464,   975,  -464,   975,  -464,
    1548,  1836,  1836,    38,  -464,  -464,   320,   268,   322,  -464,
    1836,  1836,  1836,  1836,   656,    38,  -464,    -1,    -1,  -464,
    1548,   292,  -464,  -464,   290,  -464,  1836,  1836,  1836,  1836,
    1836,  1836,  1107,  1836,  1836,  1836,  1836,  1836,  -464,   568,
    1836,  -464,  1836,   140,   140,   140,  1635,  1592,  1151,  1836,
    1196,   558,   558,   140,   140,   231,   231,   231,   231,   295,
    -464,  -464,   228,  -464,   228,  -464,    38,   324,  -464,  1548,
    -464,  -464,   146,   146,   335,   842,  1548,   301,  -464,  1912,
    -464,  1836,  -464,  1240,  1284,  1328,  1372,   116,  -464,   302,
    -464,   182,  -464,  -464,  -464,  -464,  -464,  -464,  -464,  -464,
    1836,  1548,  1548,  1548,  1548,  1548,  1548,   313,  1548,  1548,
    1548,  1548,  1548,  -464,  1548,  -464,  -464,  1548,   319,  -464,
    1836,   308,   366,   479,   306,   367,  -464,  -464,  -464,   209,
    -464,  -464,  1836,  -464,  -464,  1836,    38,   112,   346,  1548,
     342,  1416,  1836,  1836,  1836,  1836,  -464,  -464,  -464,  -464,
    -464,  -464,  -464,  1836,  1836,  1836,  1836,  1836,  1836,  1836,
    1836,  1836,  1836,  1548,  1836,  1836,  1836,  -464,  1836,   374,
    -464,   842,   975,  -464,   179,  1836,  1836,   656,   656,   656,
     656,   100,  1548,  1548,   558,   558,   140,   140,   231,   231,
     231,   231,  1460,  1548,  1548,  1504,  1836,   316,  1798,  1836,
     146,  -464,  1548,  1548,   146,   146,   146,   146,  -464,   323,
     387,  1836,  1548,  -464,   332,   975,  -464,  -464,  -464,  -464,
    -464,   100,  1836,  1548,  -464,   146,  -464,  1548,  -464
};

/* YYDEFACT[STATE-NUM] -- Default reduction number in state STATE-NUM.
   Performed when YYTABLE does not specify something else to do.  Zero
   means the default is an error.  */
static const yytype_int16 yydefact[] =
{
       9,    10,    20,     0,     0,    12,     0,     1,     4,   302,
     301,     6,    11,     5,     0,     0,     0,     0,    76,   101,
       0,     0,     0,     0,     0,     0,     0,    13,    21,    22,
      24,    23,    87,    25,    26,    27,    28,    14,    29,    30,
      31,    32,    33,     0,     8,   305,    36,     0,    34,    67,
      60,    54,    55,     0,     0,     0,   293,   294,   295,   273,
     291,   289,   290,   300,   299,     0,     0,     0,     0,   278,
     221,   208,    53,     0,   276,   140,   141,   142,   274,   206,
     207,   144,   292,   143,   275,   137,   114,   139,     0,    94,
     219,     0,    87,     0,   110,     0,   207,     0,     0,   121,
       0,   124,     0,   129,   132,   127,   128,     0,   219,   219,
      87,     7,     0,     0,    69,    62,     0,     0,     0,     0,
     154,   150,   152,   153,     0,    20,   223,   210,     0,     0,
     157,   155,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   194,     0,   135,
     134,   136,     0,     0,     0,   148,     0,     0,     0,     0,
       0,     0,    78,    77,    84,     0,   219,   102,   103,   106,
       0,     0,   112,     0,     0,   219,   219,     0,   219,     0,
     219,     0,     0,    88,    79,    92,   219,    82,   219,    35,
     268,   269,   270,    47,    49,    50,    51,    52,    45,   271,
       0,     0,    70,    64,     0,    65,    63,    56,    58,    59,
      57,   202,   277,     0,     0,     0,     0,     0,   228,   304,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   224,
     226,     0,   215,     0,   211,   213,   170,     0,     0,     0,
       0,     0,   171,   176,   177,   164,   165,   166,   167,   168,
     169,   175,   159,   160,   161,   162,   163,     0,     0,   145,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   147,
     202,   244,   242,     0,   283,   285,   280,   281,   138,     0,
      95,    96,     0,   220,     0,     0,    80,     0,   107,   108,
     105,   109,   287,   288,   111,     0,   273,   291,   299,   115,
     296,   297,   298,   116,   117,   118,     0,   119,     0,   122,
     130,     0,     0,     0,    83,    81,    37,   270,   216,   272,
       0,     0,     0,     0,     0,    69,    68,     0,    62,    61,
     201,     0,   204,    20,   200,   279,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   222,   225,
       0,   209,   212,   173,   174,   172,   158,   156,     0,     0,
       0,   184,   185,   178,   179,   180,   181,   182,   183,     0,
     282,   243,   246,   245,   246,    75,     0,     0,    85,    86,
     104,   113,   219,   219,     0,     0,    89,    93,    90,     0,
      48,     0,    46,     0,     0,     0,     0,     0,   256,   262,
      40,     0,   257,    74,    73,    72,    71,    66,   151,   203,
     202,   238,   237,   236,   235,   240,   234,     0,   230,   229,
     231,   232,   233,   227,   239,   214,   195,   198,     0,   149,
       0,     0,     0,     0,     0,   251,    97,   146,    98,     0,
     120,   123,     0,   125,   126,     0,     0,   273,    38,     2,
       0,   217,     0,     0,     0,     0,   267,   266,   265,   263,
     258,   259,   205,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   247,     0,     0,     0,   284,     0,   254,
      99,     0,     0,    91,     0,     0,     0,     0,     0,     0,
       0,     0,   241,   196,   192,   193,   186,   187,   188,   189,
     190,   191,     0,   248,   250,   252,     0,     0,   202,     0,
     219,    39,     3,   218,   219,   219,   219,   219,   260,   264,
       0,     0,   255,   286,     0,     0,   133,    41,    42,    44,
      43,     0,     0,   253,   100,   219,   261,   249,   131
};

/* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
    -464,  -464,    20,  -464,  -464,  -464,  -464,  -114,  -464,  -464,
    -464,  -464,  -464,  -464,  -464,  -464,  -464,  -464,  -464,  -464,
    -464,  -464,  -464,  -464,  -464,   281,   -97,  -464,    70,   -93,
    -464,    74,   368,  -464,  -464,  -464,  -464,   117,   -63,  -464,
    -464,  -464,   -30,  -464,  -464,    33,  -464,  -464,  -464,  -464,
    -464,   115,  -464,  -464,  -464,  -464,   -79,  -464,  -464,  -464,
    -464,  -464,  -464,   -71,  -464,  -464,  -464,  -464,  -464,  -210,
    -464,  -464,   -16,    35,  -464,  -464,  -464,  -464,  -464,  -464,
    -464,  -464,  -464,  -464,  -464,  -254,     1,  -464,  -464,  -464,
    -464,  -464,  -464,  -464,    64,  -464,   -95,   -11,  -464,  -464,
    -464,    69,  -464,  -464,    39,  -464,  -464,  -463,  -464,  -215,
    -464,   -89,  -464,  -464,  -464,  -464,  -464,  -464,  -464,   255,
     243,   -23,    13,  -464,    68
};

/* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
       0,   448,    11,    12,     2,     4,     3,     5,    27,     6,
      28,    46,    47,   390,   193,   194,   195,   196,   197,    29,
     318,   316,    30,    31,    51,    52,    53,   115,   204,    54,
     114,   201,    90,    32,    91,    33,   163,   164,   109,   387,
     186,   313,    92,   160,   280,   281,   438,   508,    34,    93,
     167,   168,   290,    35,    36,    37,   175,    38,    39,    99,
      40,   101,    41,   445,   104,    42,   181,   384,   182,   153,
      86,   158,   330,    73,    74,   270,   211,    75,    76,   241,
     240,    77,   257,   464,   258,   331,   332,   333,   334,    78,
      79,   127,   233,   234,   235,   392,   162,    80,   126,   228,
     229,   230,   274,   275,   434,   479,   507,   399,   519,   400,
     491,   401,   200,    81,   125,   372,   374,   291,    82,    83,
     299,    84,   402,   231,    55
};

/* YYTABLE[YYPACT[STATE-NUM]] -- What to do in state STATE-NUM.  If
   positive, shift that token.  If negative, reduce the rule whose
   number is the opposite.  If YYTABLE_NINF, syntax error.  */
static const yytype_int16 yytable[] =
{
      72,    87,   110,   106,    94,    95,    97,    98,   100,   102,
      96,   213,   -15,   184,   187,   105,   369,    13,   203,   176,
     156,   178,   205,   180,   199,    13,   -16,   -17,   518,   166,
      45,     1,    44,  -146,  -296,   157,  -146,  -296,  -296,  -296,
    -296,  -296,  -296,  -296,  -296,   -18,   -19,   188,     7,   120,
       8,   122,   123,   124,     9,    10,    13,  -296,  -296,  -296,
    -296,  -296,    49,   111,    50,  -296,   172,   328,   536,    45,
     112,   286,   -15,   329,   -15,   320,   321,   169,   322,    43,
     304,   305,    48,   307,   113,   309,   -16,   -17,   -16,   -17,
     116,   314,  -146,   315,  -296,  -146,  -296,   198,   117,   118,
     325,   208,   209,   210,   326,   -18,   -19,   -18,   -19,   319,
       8,   232,   236,   103,     9,    10,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   398,   259,   119,   277,     9,    10,   237,   238,    88,
     273,    89,   278,    63,    64,   239,   293,   456,   457,  -305,
     283,    63,    64,   128,   294,   154,  -197,   236,   155,   165,
     295,   306,   432,   308,   432,   310,   121,   190,   191,   192,
    -146,    70,   159,  -146,   283,   183,   261,   161,   129,   107,
     189,   132,   202,   206,   324,    89,   137,   138,   139,   140,
     185,   142,   143,   144,   145,   146,   276,   300,   301,   148,
      63,    64,   302,   260,   262,   269,   342,   263,   264,   265,
     266,   267,   268,   460,    88,   107,    89,    63,    64,   409,
     279,   353,   354,   355,   356,   357,   285,   382,   282,   383,
     404,   203,   284,   430,   405,   205,   142,   143,   144,   145,
     146,   358,    70,   287,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   311,   524,   312,    56,    57,    58,    59,
      60,    61,    62,    63,    64,   381,    65,   154,   327,   379,
     480,   169,   514,   515,   516,   517,   335,   336,    66,    67,
      68,  -135,   142,   143,   144,   145,   146,   440,   441,    69,
     148,    70,   337,    71,   338,   385,   386,   149,   150,   151,
     431,   144,   145,   146,   393,   394,   395,   396,   339,  -135,
    -303,   340,  -135,  -135,  -135,  -135,  -135,  -135,   341,   343,
     411,   412,   413,   414,   415,   416,   344,   418,   419,   420,
     421,   422,   465,   345,   424,   346,   232,   347,   348,   349,
     350,   351,   352,   427,   359,   371,   373,   375,   376,   377,
     410,   389,   165,   391,   408,   437,   433,   429,   433,   442,
     466,   446,   459,   467,   468,   469,   470,   471,   472,   474,
     463,   475,   477,   449,   458,   451,   478,   484,   461,   485,
     506,   388,   523,   531,    14,    15,    16,    17,    18,    19,
      20,    21,   532,   202,   534,   406,   206,   207,   407,   403,
     108,   378,   380,   510,    22,    23,    24,    25,    26,   436,
     509,   462,   439,   435,   473,   526,   425,   303,   423,   527,
     528,   529,   530,     0,   292,     0,   481,     0,     0,   482,
       0,     0,     0,     0,     0,     0,   487,   488,   489,   490,
     538,     0,     0,     0,   282,     0,   535,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   450,   502,   503,
     504,     0,   505,     0,     0,     0,     0,   323,     0,   512,
     513,     0,     0,   511,     0,    56,    57,    58,    59,    60,
      61,    62,    63,    64,   476,    65,     0,     0,     0,     0,
     522,     0,   128,   525,     0,     0,     0,    66,    67,    68,
       0,     0,     0,     0,     0,   533,     0,     0,    69,     0,
      70,     0,    71,     0,   483,     0,   537,   129,   130,   131,
     132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
     142,   143,   144,   145,   146,   147,  -297,     0,   148,  -297,
    -297,  -297,  -297,  -297,  -297,  -297,  -297,     0,   149,   150,
     151,   152,     0,     0,     0,     0,     0,     0,     0,  -297,
    -297,  -297,  -297,  -297,     0,     0,  -298,  -297,     0,  -298,
    -298,  -298,  -298,  -298,  -298,  -298,  -298,   214,   215,     0,
       0,     0,   216,   217,     0,     0,     0,     0,     0,  -298,
    -298,  -298,  -298,  -298,     0,     0,  -297,  -298,  -297,   218,
     219,     0,     0,   220,   137,   138,   139,   140,     0,   142,
     143,   144,   145,   146,     0,     0,     0,   148,   221,     0,
       0,     0,     0,   288,   289,   128,  -298,     0,  -298,     0,
       0,     0,     0,   222,     0,   223,   224,   225,   226,   227,
      56,    57,    58,     0,    60,    61,    62,    63,    64,     0,
     129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
     139,   140,   141,   142,   143,   144,   145,   146,   147,   128,
       0,   148,     0,   397,     0,     0,     0,     0,     0,     0,
       0,   149,   150,   151,   152,     0,     0,   398,     0,     0,
       0,     9,    10,     0,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,     0,     0,   148,   173,   177,   174,     0,
       0,     0,     0,   190,   191,   317,   150,   151,   152,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   129,   130,   131,   132,   133,   134,   135,   136,   137,
     138,   139,   140,   141,   142,   143,   144,   145,   146,   147,
       0,     0,   148,   173,   179,   174,     0,     0,     0,     0,
       0,     0,   149,   150,   151,   152,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   129,   130,
     131,   132,   133,   134,   135,   136,   137,   138,   139,   140,
     141,   142,   143,   144,   145,   146,   147,   128,     0,   148,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   149,
     150,   151,   152,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   129,   130,   131,   132,   133,   134,   135,   136,
     137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
     147,     0,     0,   148,     0,   128,     0,     0,     0,     0,
       0,   190,   191,   317,   150,   151,   152,   443,   444,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
     139,   140,   141,   142,   143,   144,   145,   146,   147,   128,
       0,   148,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   149,   150,   151,   152,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,   128,   171,   148,   170,     0,     0,     0,
       0,     0,     0,     0,     0,   149,   150,   151,   152,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   129,   130,
     131,   132,   133,   134,   135,   136,   137,   138,   139,   140,
     141,   142,   143,   144,   145,   146,   147,     0,   173,   148,
     174,     0,     0,     0,     0,     0,     0,     0,     0,   149,
     150,   151,   152,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   129,   130,   131,   132,   133,   134,   135,
     136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
     146,   147,   128,     0,   148,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   149,   150,   151,   152,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   129,   130,   131,
     132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
     142,   143,   144,   145,   146,   147,   128,     0,   148,     0,
       0,   212,     0,     0,     0,     0,     0,     0,   149,   150,
     151,   152,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   129,   130,   131,   132,   133,   134,   135,   136,   137,
     138,   139,   140,   141,   142,   143,   144,   145,   146,   147,
     128,     0,   148,     0,     0,     0,     0,     0,     0,   370,
       0,     0,   149,   150,   151,   152,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   129,   130,   131,   132,   133,
     134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
     144,   145,   146,   147,   128,     0,   148,     0,     0,     0,
       0,     0,     0,   417,     0,     0,   149,   150,   151,   152,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   129,
     130,   131,   132,   133,   134,   135,   136,   137,   138,   139,
     140,   141,   142,   143,   144,   145,   146,   147,   426,   128,
     148,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     149,   150,   151,   152,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,   128,     0,   148,     0,     0,   428,     0,
       0,     0,     0,     0,     0,   149,   150,   151,   152,     0,
       0,   452,     0,     0,     0,     0,     0,     0,   129,   130,
     131,   132,   133,   134,   135,   136,   137,   138,   139,   140,
     141,   142,   143,   144,   145,   146,   147,   128,     0,   148,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   149,
     150,   151,   152,     0,     0,   453,     0,     0,     0,     0,
       0,     0,   129,   130,   131,   132,   133,   134,   135,   136,
     137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
     147,   128,     0,   148,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   149,   150,   151,   152,     0,     0,   454,
       0,     0,     0,     0,     0,     0,   129,   130,   131,   132,
     133,   134,   135,   136,   137,   138,   139,   140,   141,   142,
     143,   144,   145,   146,   147,   128,     0,   148,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   149,   150,   151,
     152,     0,     0,   455,     0,     0,     0,     0,     0,     0,
     129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
     139,   140,   141,   142,   143,   144,   145,   146,   147,   128,
       0,   148,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   149,   150,   151,   152,     0,     0,   486,     0,     0,
       0,     0,     0,     0,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,   128,     0,   148,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   149,   150,   151,   152,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   129,   130,
     131,   132,   133,   134,   135,   136,   137,   138,   139,   140,
     141,   142,   143,   144,   145,   146,   147,   128,     0,   148,
       0,     0,   520,     0,     0,     0,     0,     0,     0,   149,
     150,   151,   152,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   129,   130,   131,   132,   133,   134,   135,   136,
     137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
     147,   128,     0,   148,   521,     0,     0,     0,     0,     0,
       0,     0,     0,   149,   150,   151,   152,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   129,   130,   131,   132,
     133,   134,   135,   136,   137,   138,   139,   140,   141,   142,
     143,   144,   145,   146,   147,   128,     0,   148,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   149,   150,   151,
     152,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     129,   130,     0,   132,   133,   134,   135,   136,   137,   138,
     139,   140,   141,   142,   143,   144,   145,   146,   128,     0,
       0,   148,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   149,   150,   151,   152,     0,     0,     0,     0,     0,
       0,     0,     0,   129,     0,     0,   132,   133,   134,   135,
     136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
     146,     0,     0,     0,   148,     0,     0,     0,     0,     0,
       0,     0,    85,     0,   149,   150,   151,   152,    56,    57,
      58,    59,    60,    61,    62,    63,    64,     0,    65,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      66,    67,    68,     0,     0,     0,     0,     0,     0,     0,
       0,    69,     0,    70,     0,    71,    56,    57,    58,    59,
      60,    61,    62,    63,    64,     0,    65,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    66,    67,
      68,     0,     0,     0,     0,     0,     0,     0,     0,    69,
       0,    70,     0,    71,     0,   190,   191,   192,    56,    57,
      58,    59,    60,    61,    62,    63,    64,     0,    65,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      66,    67,    68,   271,     0,     0,   272,     0,     0,     0,
       0,    69,     0,    70,     0,    71,    56,    57,    58,    59,
      60,    61,    62,    63,    64,     0,    65,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    66,    67,
      68,     0,     0,     0,     0,     0,     0,     0,     0,    69,
    -199,    70,     0,    71,    56,    57,    58,    59,    60,    61,
      62,    63,    64,     0,    65,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    66,    67,    68,     0,
       0,     0,     0,     0,     0,     0,     0,    69,     0,    70,
       0,    71,    56,    57,    58,   296,   297,    61,    62,    63,
     298,     0,    65,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    66,    67,    68,     0,     0,     0,
       0,     0,     0,     0,     0,    69,     0,    70,     0,    71,
      56,    57,    58,   447,    60,    61,    62,    63,    64,     0,
      65,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    66,    67,    68,     0,     0,     0,     0,     0,
       0,     0,     0,    69,     0,    70,     0,    71
};

static const yytype_int16 yycheck[] =
{
      16,    17,    32,    26,    20,    21,    22,    23,    24,    25,
      21,   125,     0,   108,   109,    26,   270,     4,   115,    98,
      65,   100,   115,   102,   113,    12,     0,     0,   491,    92,
      31,    14,    12,    58,     0,    80,    61,     3,     4,     5,
       6,     7,     8,     9,    10,     0,     0,   110,     0,    65,
      31,    67,    68,    69,    35,    36,    43,    23,    24,    25,
      26,    27,    63,    43,    65,    31,    96,    60,   531,    31,
      60,   166,    60,    66,    62,    18,    19,    93,    21,    60,
     175,   176,    14,   178,    13,   180,    60,    60,    62,    62,
      60,   186,    58,   188,    60,    61,    62,   113,    37,    37,
      60,   117,   118,   119,    64,    60,    60,    62,    62,   198,
      31,   127,   128,     5,    35,    36,   132,   133,   134,   135,
     136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
     146,    31,   148,    37,   157,    35,    36,    42,    43,    14,
     156,    16,   158,    35,    36,    50,   169,    31,    32,    37,
     161,    35,    36,    13,   170,    58,    57,   173,    61,    91,
     171,   177,   372,   179,   374,   181,    61,    67,    68,    69,
      58,    63,    31,    61,   185,   107,    13,    31,    38,    15,
     112,    41,   114,   115,   200,    16,    46,    47,    48,    49,
      31,    51,    52,    53,    54,    55,    31,    31,    32,    59,
      35,    36,    36,    61,    41,    31,   222,    44,    45,    46,
      47,    48,    49,    31,    14,    15,    16,    35,    36,   333,
      15,   237,   238,   239,   240,   241,    37,   306,   160,   308,
     327,   328,    60,     5,   327,   328,    51,    52,    53,    54,
      55,   257,    63,    60,   260,   261,   262,   263,   264,   265,
     266,   267,   268,    24,   508,    37,    28,    29,    30,    31,
      32,    33,    34,    35,    36,   295,    38,    58,    57,   285,
      61,   287,   487,   488,   489,   490,    62,    57,    50,    51,
      52,    13,    51,    52,    53,    54,    55,   382,   383,    61,
      59,    63,    57,    65,    57,   311,   312,    69,    70,    71,
      72,    53,    54,    55,   320,   321,   322,   323,    57,    41,
      57,    57,    44,    45,    46,    47,    48,    49,    57,    57,
     336,   337,   338,   339,   340,   341,    57,   343,   344,   345,
     346,   347,    13,    57,   350,    57,   352,    57,    64,    60,
      57,    66,    60,   359,    57,    56,    53,   279,    60,    37,
      60,    31,   284,    31,    62,    31,   372,    62,   374,    24,
      41,    60,    60,    44,    45,    46,    47,    48,    49,    61,
      57,     5,    66,   389,   397,   391,     9,    31,   401,    37,
       6,   313,    66,    60,     3,     4,     5,     6,     7,     8,
       9,    10,     5,   325,    62,   327,   328,   116,   328,   325,
      32,   284,   287,   482,    23,    24,    25,    26,    27,   376,
     481,   410,   377,   374,   430,   510,   352,   174,   349,   514,
     515,   516,   517,    -1,   169,    -1,   442,    -1,    -1,   445,
      -1,    -1,    -1,    -1,    -1,    -1,   452,   453,   454,   455,
     535,    -1,    -1,    -1,   376,    -1,   525,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   389,   474,   475,
     476,    -1,   478,    -1,    -1,    -1,    -1,    20,    -1,   485,
     486,    -1,    -1,   484,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,     5,    38,    -1,    -1,    -1,    -1,
     506,    -1,    13,   509,    -1,    -1,    -1,    50,    51,    52,
      -1,    -1,    -1,    -1,    -1,   521,    -1,    -1,    61,    -1,
      63,    -1,    65,    -1,   446,    -1,   532,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,     0,    -1,    59,     3,
       4,     5,     6,     7,     8,     9,    10,    -1,    69,    70,
      71,    72,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    23,
      24,    25,    26,    27,    -1,    -1,     0,    31,    -1,     3,
       4,     5,     6,     7,     8,     9,    10,     9,    10,    -1,
      -1,    -1,    14,    15,    -1,    -1,    -1,    -1,    -1,    23,
      24,    25,    26,    27,    -1,    -1,    60,    31,    62,    31,
      32,    -1,    -1,    35,    46,    47,    48,    49,    -1,    51,
      52,    53,    54,    55,    -1,    -1,    -1,    59,    50,    -1,
      -1,    -1,    -1,    11,    12,    13,    60,    -1,    62,    -1,
      -1,    -1,    -1,    65,    -1,    67,    68,    69,    70,    71,
      28,    29,    30,    -1,    32,    33,    34,    35,    36,    -1,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    13,
      -1,    59,    -1,    17,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    69,    70,    71,    72,    -1,    -1,    31,    -1,    -1,
      -1,    35,    36,    -1,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    -1,    -1,    59,    13,    14,    15,    -1,
      -1,    -1,    -1,    67,    68,    69,    70,    71,    72,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      -1,    -1,    59,    13,    14,    15,    -1,    -1,    -1,    -1,
      -1,    -1,    69,    70,    71,    72,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    13,    -1,    59,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    69,
      70,    71,    72,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    -1,    -1,    59,    -1,    13,    -1,    -1,    -1,    -1,
      -1,    67,    68,    69,    70,    71,    72,    25,    26,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    13,
      -1,    59,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    69,    70,    71,    72,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    13,    14,    59,    60,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    69,    70,    71,    72,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    -1,    13,    59,
      15,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    69,
      70,    71,    72,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    13,    -1,    59,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    69,    70,    71,    72,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    13,    -1,    59,    -1,
      -1,    62,    -1,    -1,    -1,    -1,    -1,    -1,    69,    70,
      71,    72,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      13,    -1,    59,    -1,    -1,    -1,    -1,    -1,    -1,    66,
      -1,    -1,    69,    70,    71,    72,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    13,    -1,    59,    -1,    -1,    -1,
      -1,    -1,    -1,    66,    -1,    -1,    69,    70,    71,    72,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    13,
      59,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      69,    70,    71,    72,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    13,    -1,    59,    -1,    -1,    62,    -1,
      -1,    -1,    -1,    -1,    -1,    69,    70,    71,    72,    -1,
      -1,    31,    -1,    -1,    -1,    -1,    -1,    -1,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    13,    -1,    59,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    69,
      70,    71,    72,    -1,    -1,    31,    -1,    -1,    -1,    -1,
      -1,    -1,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    13,    -1,    59,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    69,    70,    71,    72,    -1,    -1,    31,
      -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    13,    -1,    59,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    69,    70,    71,
      72,    -1,    -1,    31,    -1,    -1,    -1,    -1,    -1,    -1,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    13,
      -1,    59,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    69,    70,    71,    72,    -1,    -1,    31,    -1,    -1,
      -1,    -1,    -1,    -1,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    13,    -1,    59,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    69,    70,    71,    72,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    13,    -1,    59,
      -1,    -1,    62,    -1,    -1,    -1,    -1,    -1,    -1,    69,
      70,    71,    72,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    13,    -1,    59,    60,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    69,    70,    71,    72,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    13,    -1,    59,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    69,    70,    71,
      72,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      38,    39,    -1,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    13,    -1,
      -1,    59,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    69,    70,    71,    72,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    38,    -1,    -1,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    -1,    -1,    -1,    59,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    -1,    69,    70,    71,    72,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    -1,    38,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      50,    51,    52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    61,    -1,    63,    -1,    65,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    -1,    38,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    50,    51,
      52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    61,
      -1,    63,    -1,    65,    -1,    67,    68,    69,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    -1,    38,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      50,    51,    52,    53,    -1,    -1,    56,    -1,    -1,    -1,
      -1,    61,    -1,    63,    -1,    65,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    -1,    38,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    50,    51,
      52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    61,
      62,    63,    -1,    65,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    -1,    38,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    50,    51,    52,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    61,    -1,    63,
      -1,    65,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    -1,    38,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    50,    51,    52,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    61,    -1,    63,    -1,    65,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    -1,
      38,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    50,    51,    52,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    61,    -1,    63,    -1,    65
};

/* YYSTOS[STATE-NUM] -- The symbol kind of the accessing symbol of
   state STATE-NUM.  */
static const yytype_uint8 yystos[] =
{
       0,    14,    85,    87,    86,    88,    90,     0,    31,    35,
      36,    83,    84,   203,     3,     4,     5,     6,     7,     8,
       9,    10,    23,    24,    25,    26,    27,    89,    91,   100,
     103,   104,   114,   116,   129,   134,   135,   136,   138,   139,
     141,   143,   146,    60,    83,    31,    92,    93,   205,    63,
      65,   105,   106,   107,   110,   205,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    38,    50,    51,    52,    61,
      63,    65,   153,   154,   155,   158,   159,   162,   170,   171,
     178,   194,   199,   200,   202,    22,   151,   153,    14,    16,
     113,   115,   123,   130,   153,   153,   178,   153,   153,   140,
     153,   142,   153,     5,   145,   178,   202,    15,   113,   119,
     123,    83,    60,    13,   111,   108,    60,    37,    37,    37,
     153,    61,   153,   153,   153,   195,   179,   172,    13,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    59,    69,
      70,    71,    72,   150,    58,    61,    65,    80,   152,    31,
     124,    31,   177,   117,   118,   205,   119,   131,   132,   153,
      60,    14,   123,    13,    15,   137,   137,    14,   137,    14,
     137,   147,   149,   205,   177,    31,   121,   177,   119,   205,
      67,    68,    69,    95,    96,    97,    98,    99,   153,   192,
     193,   112,   205,   107,   109,   110,   205,   106,   153,   153,
     153,   157,    62,    88,     9,    10,    14,    15,    31,    32,
      35,    50,    65,    67,    68,    69,    70,    71,   180,   181,
     182,   204,   153,   173,   174,   175,   153,    42,    43,    50,
     161,   160,   153,   153,   153,   153,   153,   153,   153,   153,
     153,   153,   153,   153,   153,   153,   153,   163,   165,   153,
      61,    13,    41,    44,    45,    46,    47,    48,    49,    31,
     156,    53,    56,   153,   183,   184,    31,   202,   153,    15,
     125,   126,   205,   178,    60,    37,   177,    60,    11,    12,
     133,   198,   200,   202,   153,   178,    31,    32,    36,   201,
      31,    32,    36,   201,   177,   177,   153,   177,   153,   177,
     153,    24,    37,   122,   177,   177,   102,    69,   101,   192,
      18,    19,    21,    20,   153,    60,    64,    57,    60,    66,
     153,   166,   167,   168,   169,    62,    57,    57,    57,    57,
      57,    57,   153,    57,    57,    57,    57,    57,    64,    60,
      57,    66,    60,   153,   153,   153,   153,   153,   153,    57,
     153,   153,   153,   153,   153,   153,   153,   153,   153,   166,
      66,    56,   196,    53,   197,   205,    60,    37,   118,   153,
     132,   123,   137,   137,   148,   153,   153,   120,   205,    31,
      94,    31,   176,   153,   153,   153,   153,    17,    31,   188,
     190,   192,   203,   112,   107,   110,   205,   109,    62,    88,
      60,   153,   153,   153,   153,   153,   153,    66,   153,   153,
     153,   153,   153,   182,   153,   175,    57,   153,    62,    62,
       5,    72,   150,   153,   185,   185,   126,    31,   127,   154,
     177,   177,    24,    25,    26,   144,    60,    31,    82,   153,
     205,   153,    31,    31,    31,    31,    31,    32,   202,    60,
      31,   202,   167,    57,   164,    13,    41,    44,    45,    46,
      47,    48,    49,   153,    61,     5,     5,    66,     9,   186,
      61,   153,   153,   205,    31,    37,    31,   153,   153,   153,
     153,   191,   153,   153,   153,   153,   153,   153,   153,   153,
     153,   153,   153,   153,   153,   153,     6,   187,   128,   144,
     137,   178,   153,   153,   190,   190,   190,   190,   188,   189,
      62,    60,   153,    66,   166,   153,   177,   177,   177,   177,
     177,    60,     5,   153,    62,   137,   188,   153,   177
};

/* YYR1[RULE-NUM] -- Symbol kind of the left-hand side of rule RULE-NUM.  */
static const yytype_uint8 yyr1[] =
{
       0,    81,    82,    82,    83,    83,    84,    84,    84,    85,
      86,    85,    87,    88,    89,    89,    89,    89,    89,    89,
      90,    90,    91,    91,    91,    91,    91,    91,    91,    91,
      91,    91,    91,    91,    92,    92,    93,    94,    94,    94,
      95,    96,    97,    98,    99,   101,   100,   102,   100,   100,
     100,   100,   100,   103,   104,   105,   105,   106,   106,   106,
     108,   107,   109,   109,   109,   109,   109,   111,   110,   112,
     112,   112,   112,   112,   112,   113,   115,   114,   116,   116,
     116,   116,   116,   116,   117,   117,   118,   119,   119,   119,
     120,   120,   122,   121,   124,   123,   125,   125,   126,   128,
     127,   130,   129,   131,   131,   132,   133,   133,   133,   133,
     134,   134,   135,   135,   136,   137,   137,   138,   139,   140,
     140,   141,   142,   142,   143,   144,   144,   145,   145,   147,
     148,   146,   149,   146,   150,   150,   150,   152,   151,   151,
     153,   153,   153,   153,   153,   153,   154,   154,   156,   155,
     157,   155,   158,   158,   158,   160,   159,   161,   159,   159,
     159,   159,   159,   159,   159,   159,   159,   159,   159,   159,
     159,   159,   159,   159,   159,   159,   159,   159,   159,   159,
     159,   159,   159,   159,   159,   159,   159,   159,   159,   159,
     159,   159,   159,   159,   163,   164,   162,   165,   162,   166,
     166,   167,   168,   167,   169,   169,   170,   170,   172,   171,
     173,   173,   173,   174,   174,   175,   176,   176,   176,   177,
     177,   179,   178,   180,   180,   180,   181,   181,   182,   182,
     182,   182,   182,   182,   182,   182,   182,   182,   182,   182,
     182,   182,   183,   183,   184,   184,   185,   185,   185,   185,
     185,   186,   186,   186,   187,   187,   188,   188,   188,   188,
     189,   189,   190,   191,   190,   190,   190,   190,   192,   192,
     192,   193,   193,   194,   194,   194,   194,   194,   195,   194,
     194,   194,   194,   196,   194,   197,   194,   198,   198,   199,
     199,   200,   200,   200,   200,   200,   201,   201,   201,   202,
     202,   203,   203,   204,   204,   205
};

/* YYR2[RULE-NUM] -- Number of symbols on the right-hand side of rule RULE-NUM.  */
static const yytype_int8 yyr2[] =
{
       0,     2,     1,     3,     1,     1,     1,     3,     2,     0,
       0,     3,     2,     2,     1,     1,     1,     1,     1,     1,
       0,     2,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     3,     1,     0,     2,     4,
       3,     7,     7,     7,     7,     0,     6,     0,     6,     4,
       4,     4,     4,     2,     2,     1,     3,     3,     3,     3,
       0,     4,     0,     1,     1,     1,     3,     0,     4,     0,
       1,     3,     3,     3,     3,     4,     0,     3,     3,     3,
       4,     4,     3,     4,     1,     3,     3,     0,     2,     4,
       1,     3,     0,     3,     0,     3,     1,     3,     3,     0,
       5,     0,     3,     1,     3,     2,     0,     1,     1,     1,
       2,     4,     3,     5,     2,     2,     2,     4,     4,     3,
       5,     2,     3,     5,     2,     1,     1,     1,     1,     0,
       0,    11,     0,     9,     1,     1,     1,     0,     3,     1,
       1,     1,     1,     1,     1,     3,     1,     3,     0,     5,
       0,     5,     2,     2,     2,     0,     4,     0,     4,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     4,     4,     4,     3,     3,     3,     4,     4,
       4,     4,     4,     4,     4,     4,     7,     7,     7,     7,
       7,     7,     7,     7,     0,     0,     7,     0,     5,     0,
       1,     1,     0,     2,     1,     3,     1,     1,     0,     4,
       0,     1,     2,     1,     3,     1,     0,     2,     4,     0,
       2,     0,     4,     0,     1,     2,     1,     3,     1,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     5,     1,     2,     1,     2,     0,     2,     3,     6,
       3,     0,     2,     4,     0,     2,     1,     1,     2,     2,
       1,     3,     1,     0,     4,     2,     2,     2,     1,     1,
       1,     1,     2,     1,     1,     1,     1,     3,     0,     4,
       3,     3,     4,     0,     6,     0,     8,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1
};


enum { YYENOMEM = -2 };

#define yyerrok         (yyerrstatus = 0)
#define yyclearin       (yychar = YYEMPTY)

#define YYACCEPT        goto yyacceptlab
#define YYABORT         goto yyabortlab
#define YYERROR         goto yyerrorlab
#define YYNOMEM         goto yyexhaustedlab


#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)                                    \
  do                                                              \
    if (yychar == YYEMPTY)                                        \
      {                                                           \
        yychar = (Token);                                         \
        yylval = (Value);                                         \
        YYPOPSTACK (yylen);                                       \
        yystate = *yyssp;                                         \
        goto yybackup;                                            \
      }                                                           \
    else                                                          \
      {                                                           \
        yyerror (&yylloc, parser, YY_("syntax error: cannot back up")); \
        YYERROR;                                                  \
      }                                                           \
  while (0)

/* Backward compatibility with an undocumented macro.
   Use YYerror or YYUNDEF. */
#define YYERRCODE YYUNDEF

/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)                                \
    do                                                                  \
      if (N)                                                            \
        {                                                               \
          (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;        \
          (Current).first_column = YYRHSLOC (Rhs, 1).first_column;      \
          (Current).last_line    = YYRHSLOC (Rhs, N).last_line;         \
          (Current).last_column  = YYRHSLOC (Rhs, N).last_column;       \
        }                                                               \
      else                                                              \
        {                                                               \
          (Current).first_line   = (Current).last_line   =              \
            YYRHSLOC (Rhs, 0).last_line;                                \
          (Current).first_column = (Current).last_column =              \
            YYRHSLOC (Rhs, 0).last_column;                              \
        }                                                               \
    while (0)
#endif

#define YYRHSLOC(Rhs, K) ((Rhs)[K])


/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)                        \
do {                                            \
  if (yydebug)                                  \
    YYFPRINTF Args;                             \
} while (0)


/* YYLOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */

# ifndef YYLOCATION_PRINT

#  if defined YY_LOCATION_PRINT

   /* Temporary convenience wrapper in case some people defined the
      undocumented and private YY_LOCATION_PRINT macros.  */
#   define YYLOCATION_PRINT(File, Loc)  YY_LOCATION_PRINT(File, *(Loc))

#  elif defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL

/* Print *YYLOCP on YYO.  Private, do not rely on its existence. */

YY_ATTRIBUTE_UNUSED
static int
yy_location_print_ (FILE *yyo, YYLTYPE const * const yylocp)
{
  int res = 0;
  int end_col = 0 != yylocp->last_column ? yylocp->last_column - 1 : 0;
  if (0 <= yylocp->first_line)
    {
      res += YYFPRINTF (yyo, "%d", yylocp->first_line);
      if (0 <= yylocp->first_column)
        res += YYFPRINTF (yyo, ".%d", yylocp->first_column);
    }
  if (0 <= yylocp->last_line)
    {
      if (yylocp->first_line < yylocp->last_line)
        {
          res += YYFPRINTF (yyo, "-%d", yylocp->last_line);
          if (0 <= end_col)
            res += YYFPRINTF (yyo, ".%d", end_col);
        }
      else if (0 <= end_col && yylocp->first_column < end_col)
        res += YYFPRINTF (yyo, "-%d", end_col);
    }
  return res;
}

#   define YYLOCATION_PRINT  yy_location_print_

    /* Temporary convenience wrapper in case some people defined the
       undocumented and private YY_LOCATION_PRINT macros.  */
#   define YY_LOCATION_PRINT(File, Loc)  YYLOCATION_PRINT(File, &(Loc))

#  else

#   define YYLOCATION_PRINT(File, Loc) ((void) 0)
    /* Temporary convenience wrapper in case some people defined the
       undocumented and private YY_LOCATION_PRINT macros.  */
#   define YY_LOCATION_PRINT  YYLOCATION_PRINT

#  endif
# endif /* !defined YYLOCATION_PRINT */


# define YY_SYMBOL_PRINT(Title, Kind, Value, Location)                    \
do {                                                                      \
  if (yydebug)                                                            \
    {                                                                     \
      YYFPRINTF (stderr, "%s ", Title);                                   \
      yy_symbol_print (stderr,                                            \
                  Kind, Value, Location, parser); \
      YYFPRINTF (stderr, "\n");                                           \
    }                                                                     \
} while (0)


/*-----------------------------------.
| Print this symbol's value on YYO.  |
`-----------------------------------*/

static void
yy_symbol_value_print (FILE *yyo,
                       yysymbol_kind_t yykind, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp, arangodb::aql::Parser* parser)
{
  FILE *yyoutput = yyo;
  YY_USE (yyoutput);
  YY_USE (yylocationp);
  YY_USE (parser);
  if (!yyvaluep)
    return;
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  YY_USE (yykind);
  YY_IGNORE_MAYBE_UNINITIALIZED_END
}


/*---------------------------.
| Print this symbol on YYO.  |
`---------------------------*/

static void
yy_symbol_print (FILE *yyo,
                 yysymbol_kind_t yykind, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp, arangodb::aql::Parser* parser)
{
  YYFPRINTF (yyo, "%s %s (",
             yykind < YYNTOKENS ? "token" : "nterm", yysymbol_name (yykind));

  YYLOCATION_PRINT (yyo, yylocationp);
  YYFPRINTF (yyo, ": ");
  yy_symbol_value_print (yyo, yykind, yyvaluep, yylocationp, parser);
  YYFPRINTF (yyo, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

static void
yy_stack_print (yy_state_t *yybottom, yy_state_t *yytop)
{
  YYFPRINTF (stderr, "Stack now");
  for (; yybottom <= yytop; yybottom++)
    {
      int yybot = *yybottom;
      YYFPRINTF (stderr, " %d", yybot);
    }
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)                            \
do {                                                            \
  if (yydebug)                                                  \
    yy_stack_print ((Bottom), (Top));                           \
} while (0)


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

static void
yy_reduce_print (yy_state_t *yyssp, YYSTYPE *yyvsp, YYLTYPE *yylsp,
                 int yyrule, arangodb::aql::Parser* parser)
{
  int yylno = yyrline[yyrule];
  int yynrhs = yyr2[yyrule];
  int yyi;
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %d):\n",
             yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr,
                       YY_ACCESSING_SYMBOL (+yyssp[yyi + 1 - yynrhs]),
                       &yyvsp[(yyi + 1) - (yynrhs)],
                       &(yylsp[(yyi + 1) - (yynrhs)]), parser);
      YYFPRINTF (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)          \
do {                                    \
  if (yydebug)                          \
    yy_reduce_print (yyssp, yyvsp, yylsp, Rule, parser); \
} while (0)

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args) ((void) 0)
# define YY_SYMBOL_PRINT(Title, Kind, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif


/* Context of a parse error.  */
typedef struct
{
  yy_state_t *yyssp;
  yysymbol_kind_t yytoken;
  YYLTYPE *yylloc;
} yypcontext_t;

/* Put in YYARG at most YYARGN of the expected tokens given the
   current YYCTX, and return the number of tokens stored in YYARG.  If
   YYARG is null, return the number of expected tokens (guaranteed to
   be less than YYNTOKENS).  Return YYENOMEM on memory exhaustion.
   Return 0 if there are more than YYARGN expected tokens, yet fill
   YYARG up to YYARGN. */
static int
yypcontext_expected_tokens (const yypcontext_t *yyctx,
                            yysymbol_kind_t yyarg[], int yyargn)
{
  /* Actual size of YYARG. */
  int yycount = 0;
  int yyn = yypact[+*yyctx->yyssp];
  if (!yypact_value_is_default (yyn))
    {
      /* Start YYX at -YYN if negative to avoid negative indexes in
         YYCHECK.  In other words, skip the first -YYN actions for
         this state because they are default actions.  */
      int yyxbegin = yyn < 0 ? -yyn : 0;
      /* Stay within bounds of both yycheck and yytname.  */
      int yychecklim = YYLAST - yyn + 1;
      int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
      int yyx;
      for (yyx = yyxbegin; yyx < yyxend; ++yyx)
        if (yycheck[yyx + yyn] == yyx && yyx != YYSYMBOL_YYerror
            && !yytable_value_is_error (yytable[yyx + yyn]))
          {
            if (!yyarg)
              ++yycount;
            else if (yycount == yyargn)
              return 0;
            else
              yyarg[yycount++] = YY_CAST (yysymbol_kind_t, yyx);
          }
    }
  if (yyarg && yycount == 0 && 0 < yyargn)
    yyarg[0] = YYSYMBOL_YYEMPTY;
  return yycount;
}




#ifndef yystrlen
# if defined __GLIBC__ && defined _STRING_H
#  define yystrlen(S) (YY_CAST (YYPTRDIFF_T, strlen (S)))
# else
/* Return the length of YYSTR.  */
static YYPTRDIFF_T
yystrlen (const char *yystr)
{
  YYPTRDIFF_T yylen;
  for (yylen = 0; yystr[yylen]; yylen++)
    continue;
  return yylen;
}
# endif
#endif

#ifndef yystpcpy
# if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
#  define yystpcpy stpcpy
# else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
static char *
yystpcpy (char *yydest, const char *yysrc)
{
  char *yyd = yydest;
  const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
# endif
#endif

#ifndef yytnamerr
/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
   quotes and backslashes, so that it's suitable for yyerror.  The
   heuristic is that double-quoting is unnecessary unless the string
   contains an apostrophe, a comma, or backslash (other than
   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
   null, do not copy; instead, return the length of what the result
   would have been.  */
static YYPTRDIFF_T
yytnamerr (char *yyres, const char *yystr)
{
  if (*yystr == '"')
    {
      YYPTRDIFF_T yyn = 0;
      char const *yyp = yystr;
      for (;;)
        switch (*++yyp)
          {
          case '\'':
          case ',':
            goto do_not_strip_quotes;

          case '\\':
            if (*++yyp != '\\')
              goto do_not_strip_quotes;
            else
              goto append;

          append:
          default:
            if (yyres)
              yyres[yyn] = *yyp;
            yyn++;
            break;

          case '"':
            if (yyres)
              yyres[yyn] = '\0';
            return yyn;
          }
    do_not_strip_quotes: ;
    }

  if (yyres)
    return yystpcpy (yyres, yystr) - yyres;
  else
    return yystrlen (yystr);
}
#endif


static int
yy_syntax_error_arguments (const yypcontext_t *yyctx,
                           yysymbol_kind_t yyarg[], int yyargn)
{
  /* Actual size of YYARG. */
  int yycount = 0;
  /* There are many possibilities here to consider:
     - If this state is a consistent state with a default action, then
       the only way this function was invoked is if the default action
       is an error action.  In that case, don't check for expected
       tokens because there are none.
     - The only way there can be no lookahead present (in yychar) is if
       this state is a consistent state with a default action.  Thus,
       detecting the absence of a lookahead is sufficient to determine
       that there is no unexpected or expected token to report.  In that
       case, just report a simple "syntax error".
     - Don't assume there isn't a lookahead just because this state is a
       consistent state with a default action.  There might have been a
       previous inconsistent state, consistent state with a non-default
       action, or user semantic action that manipulated yychar.
     - Of course, the expected token list depends on states to have
       correct lookahead information, and it depends on the parser not
       to perform extra reductions after fetching a lookahead from the
       scanner and before detecting a syntax error.  Thus, state merging
       (from LALR or IELR) and default reductions corrupt the expected
       token list.  However, the list is correct for canonical LR with
       one exception: it will still contain any token that will not be
       accepted due to an error action in a later state.
  */
  if (yyctx->yytoken != YYSYMBOL_YYEMPTY)
    {
      int yyn;
      if (yyarg)
        yyarg[yycount] = yyctx->yytoken;
      ++yycount;
      yyn = yypcontext_expected_tokens (yyctx,
                                        yyarg ? yyarg + 1 : yyarg, yyargn - 1);
      if (yyn == YYENOMEM)
        return YYENOMEM;
      else
        yycount += yyn;
    }
  return yycount;
}

/* Copy into *YYMSG, which is of size *YYMSG_ALLOC, an error message
   about the unexpected token YYTOKEN for the state stack whose top is
   YYSSP.

   Return 0 if *YYMSG was successfully written.  Return -1 if *YYMSG is
   not large enough to hold the message.  In that case, also set
   *YYMSG_ALLOC to the required number of bytes.  Return YYENOMEM if the
   required number of bytes is too large to store.  */
static int
yysyntax_error (YYPTRDIFF_T *yymsg_alloc, char **yymsg,
                const yypcontext_t *yyctx)
{
  enum { YYARGS_MAX = 5 };
  /* Internationalized format string. */
  const char *yyformat = YY_NULLPTR;
  /* Arguments of yyformat: reported tokens (one for the "unexpected",
     one per "expected"). */
  yysymbol_kind_t yyarg[YYARGS_MAX];
  /* Cumulated lengths of YYARG.  */
  YYPTRDIFF_T yysize = 0;

  /* Actual size of YYARG. */
  int yycount = yy_syntax_error_arguments (yyctx, yyarg, YYARGS_MAX);
  if (yycount == YYENOMEM)
    return YYENOMEM;

  switch (yycount)
    {
#define YYCASE_(N, S)                       \
      case N:                               \
        yyformat = S;                       \
        break
    default: /* Avoid compiler warnings. */
      YYCASE_(0, YY_("syntax error"));
      YYCASE_(1, YY_("syntax error, unexpected %s"));
      YYCASE_(2, YY_("syntax error, unexpected %s, expecting %s"));
      YYCASE_(3, YY_("syntax error, unexpected %s, expecting %s or %s"));
      YYCASE_(4, YY_("syntax error, unexpected %s, expecting %s or %s or %s"));
      YYCASE_(5, YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s"));
#undef YYCASE_
    }

  /* Compute error message size.  Don't count the "%s"s, but reserve
     room for the terminator.  */
  yysize = yystrlen (yyformat) - 2 * yycount + 1;
  {
    int yyi;
    for (yyi = 0; yyi < yycount; ++yyi)
      {
        YYPTRDIFF_T yysize1
          = yysize + yytnamerr (YY_NULLPTR, yytname[yyarg[yyi]]);
        if (yysize <= yysize1 && yysize1 <= YYSTACK_ALLOC_MAXIMUM)
          yysize = yysize1;
        else
          return YYENOMEM;
      }
  }

  if (*yymsg_alloc < yysize)
    {
      *yymsg_alloc = 2 * yysize;
      if (! (yysize <= *yymsg_alloc
             && *yymsg_alloc <= YYSTACK_ALLOC_MAXIMUM))
        *yymsg_alloc = YYSTACK_ALLOC_MAXIMUM;
      return -1;
    }

  /* Avoid sprintf, as that infringes on the user's name space.
     Don't have undefined behavior even if the translation
     produced a string with the wrong number of "%s"s.  */
  {
    char *yyp = *yymsg;
    int yyi = 0;
    while ((*yyp = *yyformat) != '\0')
      if (*yyp == '%' && yyformat[1] == 's' && yyi < yycount)
        {
          yyp += yytnamerr (yyp, yytname[yyarg[yyi++]]);
          yyformat += 2;
        }
      else
        {
          ++yyp;
          ++yyformat;
        }
  }
  return 0;
}


/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

static void
yydestruct (const char *yymsg,
            yysymbol_kind_t yykind, YYSTYPE *yyvaluep, YYLTYPE *yylocationp, arangodb::aql::Parser* parser)
{
  YY_USE (yyvaluep);
  YY_USE (yylocationp);
  YY_USE (parser);
  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yykind, yyvaluep, yylocationp);

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  YY_USE (yykind);
  YY_IGNORE_MAYBE_UNINITIALIZED_END
}






/*----------.
| yyparse.  |
`----------*/

int
yyparse (arangodb::aql::Parser* parser)
{
/* Lookahead token kind.  */
int yychar;


/* The semantic value of the lookahead symbol.  */
/* Default value used for initialization, for pacifying older GCCs
   or non-GCC compilers.  */
YY_INITIAL_VALUE (static YYSTYPE yyval_default;)
YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);

/* Location data for the lookahead symbol.  */
static YYLTYPE yyloc_default
# if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL
  = { 1, 1, 1, 1 }
# endif
;
YYLTYPE yylloc = yyloc_default;

    /* Number of syntax errors so far.  */
    int yynerrs = 0;

    yy_state_fast_t yystate = 0;
    /* Number of tokens to shift before error messages enabled.  */
    int yyerrstatus = 0;

    /* Refer to the stacks through separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */

    /* Their size.  */
    YYPTRDIFF_T yystacksize = YYINITDEPTH;

    /* The state stack: array, bottom, top.  */
    yy_state_t yyssa[YYINITDEPTH];
    yy_state_t *yyss = yyssa;
    yy_state_t *yyssp = yyss;

    /* The semantic value stack: array, bottom, top.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE *yyvs = yyvsa;
    YYSTYPE *yyvsp = yyvs;

    /* The location stack: array, bottom, top.  */
    YYLTYPE yylsa[YYINITDEPTH];
    YYLTYPE *yyls = yylsa;
    YYLTYPE *yylsp = yyls;

  int yyn;
  /* The return value of yyparse.  */
  int yyresult;
  /* Lookahead symbol kind.  */
  yysymbol_kind_t yytoken = YYSYMBOL_YYEMPTY;
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;
  YYLTYPE yyloc;

  /* The locations where the error started and ended.  */
  YYLTYPE yyerror_range[3];

  /* Buffer for error messages, and its allocated size.  */
  char yymsgbuf[128];
  char *yymsg = yymsgbuf;
  YYPTRDIFF_T yymsg_alloc = sizeof yymsgbuf;

#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N), yylsp -= (N))

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yychar = YYEMPTY; /* Cause a token to be read.  */

  yylsp[0] = yylloc;
  goto yysetstate;


/*------------------------------------------------------------.
| yynewstate -- push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;


/*--------------------------------------------------------------------.
| yysetstate -- set current state (the top of the stack) to yystate.  |
`--------------------------------------------------------------------*/
yysetstate:
  YYDPRINTF ((stderr, "Entering state %d\n", yystate));
  YY_ASSERT (0 <= yystate && yystate < YYNSTATES);
  YY_IGNORE_USELESS_CAST_BEGIN
  *yyssp = YY_CAST (yy_state_t, yystate);
  YY_IGNORE_USELESS_CAST_END
  YY_STACK_PRINT (yyss, yyssp);

  if (yyss + yystacksize - 1 <= yyssp)
#if !defined yyoverflow && !defined YYSTACK_RELOCATE
    YYNOMEM;
#else
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYPTRDIFF_T yysize = yyssp - yyss + 1;

# if defined yyoverflow
      {
        /* Give user a chance to reallocate the stack.  Use copies of
           these so that the &'s don't force the real ones into
           memory.  */
        yy_state_t *yyss1 = yyss;
        YYSTYPE *yyvs1 = yyvs;
        YYLTYPE *yyls1 = yyls;

        /* Each stack pointer address is followed by the size of the
           data in use in that stack, in bytes.  This used to be a
           conditional around just the two extra args, but that might
           be undefined if yyoverflow is a macro.  */
        yyoverflow (YY_("memory exhausted"),
                    &yyss1, yysize * YYSIZEOF (*yyssp),
                    &yyvs1, yysize * YYSIZEOF (*yyvsp),
                    &yyls1, yysize * YYSIZEOF (*yylsp),
                    &yystacksize);
        yyss = yyss1;
        yyvs = yyvs1;
        yyls = yyls1;
      }
# else /* defined YYSTACK_RELOCATE */
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
        YYNOMEM;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
        yystacksize = YYMAXDEPTH;

      {
        yy_state_t *yyss1 = yyss;
        union yyalloc *yyptr =
          YY_CAST (union yyalloc *,
                   YYSTACK_ALLOC (YY_CAST (YYSIZE_T, YYSTACK_BYTES (yystacksize))));
        if (! yyptr)
          YYNOMEM;
        YYSTACK_RELOCATE (yyss_alloc, yyss);
        YYSTACK_RELOCATE (yyvs_alloc, yyvs);
        YYSTACK_RELOCATE (yyls_alloc, yyls);
#  undef YYSTACK_RELOCATE
        if (yyss1 != yyssa)
          YYSTACK_FREE (yyss1);
      }
# endif

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;
      yylsp = yyls + yysize - 1;

      YY_IGNORE_USELESS_CAST_BEGIN
      YYDPRINTF ((stderr, "Stack size increased to %ld\n",
                  YY_CAST (long, yystacksize)));
      YY_IGNORE_USELESS_CAST_END

      if (yyss + yystacksize - 1 <= yyssp)
        YYABORT;
    }
#endif /* !defined yyoverflow && !defined YYSTACK_RELOCATE */


  if (yystate == YYFINAL)
    YYACCEPT;

  goto yybackup;


/*-----------.
| yybackup.  |
`-----------*/
yybackup:
  /* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to lookahead token.  */
  yyn = yypact[yystate];
  if (yypact_value_is_default (yyn))
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either empty, or end-of-input, or a valid lookahead.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token\n"));
      yychar = yylex (&yylval, &yylloc, scanner);
    }

  if (yychar <= T_END)
    {
      yychar = T_END;
      yytoken = YYSYMBOL_YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else if (yychar == YYerror)
    {
      /* The scanner already issued an error message, process directly
         to error recovery.  But do not keep the error token as
         lookahead, it is too special and may lead us to an endless
         loop in error recovery. */
      yychar = YYUNDEF;
      yytoken = YYSYMBOL_YYerror;
      yyerror_range[1] = yylloc;
      goto yyerrlab1;
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yytable_value_is_error (yyn))
        goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the lookahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);
  yystate = yyn;
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END
  *++yylsp = yylloc;

  /* Discard the shifted token.  */
  yychar = YYEMPTY;
  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     '$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];

  /* Default location. */
  YYLLOC_DEFAULT (yyloc, (yylsp - yylen), yylen);
  yyerror_range[1] = yyloc;
  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
  case 2: /* optional_prune_variable: expression  */
#line 652 "grammar.y"
               {
      AstNode* node = parser->ast()->createNodeArray();
      node->addMember(parser->ast()->createNodeNop());
      node->addMember((yyvsp[0].node));
      (yyval.node) = node;
    }
#line 2820 "grammar.cpp"
    break;

  case 3: /* optional_prune_variable: variable_name "assignment" expression  */
#line 658 "grammar.y"
                                      {
      AstNode* node = parser->ast()->createNodeArray();
      AstNode* variableNode = parser->ast()->createNodeLet((yyvsp[-2].strval).value, (yyvsp[-2].strval).length, (yyvsp[0].node), true);
      node->addMember(variableNode);
      node->addMember((yyvsp[0].node));
      (yyval.node) = node;    
  }
#line 2832 "grammar.cpp"
    break;

  case 4: /* with_collection: "identifier"  */
#line 668 "grammar.y"
             {
      (yyval.node) = parser->ast()->createNodeValueString((yyvsp[0].strval).value, (yyvsp[0].strval).length);
    }
#line 2840 "grammar.cpp"
    break;

  case 5: /* with_collection: bind_parameter_datasource_expected  */
#line 671 "grammar.y"
                                       {
      (yyval.node) = (yyvsp[0].node);
    }
#line 2848 "grammar.cpp"
    break;

  case 6: /* with_collection_list: with_collection  */
#line 677 "grammar.y"
                     {
       auto node = static_cast<AstNode*>(parser->peekStack());
       node->addMember((yyvsp[0].node));
     }
#line 2857 "grammar.cpp"
    break;

  case 7: /* with_collection_list: with_collection_list "," with_collection  */
#line 681 "grammar.y"
                                                  {
       auto node = static_cast<AstNode*>(parser->peekStack());
       node->addMember((yyvsp[0].node));
     }
#line 2866 "grammar.cpp"
    break;

  case 8: /* with_collection_list: with_collection_list with_collection  */
#line 685 "grammar.y"
                                          {
       auto node = static_cast<AstNode*>(parser->peekStack());
       node->addMember((yyvsp[0].node));
     }
#line 2875 "grammar.cpp"
    break;

  case 9: /* optional_with: %empty  */
#line 692 "grammar.y"
                 {
     }
#line 2882 "grammar.cpp"
    break;

  case 10: /* $@1: %empty  */
#line 694 "grammar.y"
            {
      auto node = parser->ast()->createNodeArray();
      parser->pushStack(node);
     }
#line 2891 "grammar.cpp"
    break;

  case 11: /* optional_with: "WITH keyword" $@1 with_collection_list  */
#line 697 "grammar.y"
                            {
      auto node = static_cast<AstNode*>(parser->popStack());
      auto const& resolver = parser->query().resolver();
      auto withNode = parser->ast()->createNodeWithCollections(node, resolver);
      parser->ast()->addOperation(withNode);
     }
#line 2902 "grammar.cpp"
    break;

  case 12: /* queryStart: optional_with query  */
#line 706 "grammar.y"
                        {
    }
#line 2909 "grammar.cpp"
    break;

  case 13: /* query: optional_statement_block_statements final_statement  */
#line 711 "grammar.y"
                                                        {
    }
#line 2916 "grammar.cpp"
    break;

  case 14: /* final_statement: return_statement  */
#line 716 "grammar.y"
                     {
    }
#line 2923 "grammar.cpp"
    break;

  case 15: /* final_statement: remove_statement  */
#line 718 "grammar.y"
                     {
      parser->ast()->scopes()->endNested();
    }
#line 2931 "grammar.cpp"
    break;

  case 16: /* final_statement: insert_statement  */
#line 721 "grammar.y"
                     {
      parser->ast()->scopes()->endNested();
    }
#line 2939 "grammar.cpp"
    break;

  case 17: /* final_statement: update_statement  */
#line 724 "grammar.y"
                     {
      parser->ast()->scopes()->endNested();
    }
#line 2947 "grammar.cpp"
    break;

  case 18: /* final_statement: replace_statement  */
#line 727 "grammar.y"
                      {
      parser->ast()->scopes()->endNested();
    }
#line 2955 "grammar.cpp"
    break;

  case 19: /* final_statement: upsert_statement  */
#line 730 "grammar.y"
                     {
      parser->ast()->scopes()->endNested();
    }
#line 2963 "grammar.cpp"
    break;

  case 20: /* optional_statement_block_statements: %empty  */
#line 736 "grammar.y"
                {
    }
#line 2970 "grammar.cpp"
    break;

  case 21: /* optional_statement_block_statements: optional_statement_block_statements statement_block_statement  */
#line 738 "grammar.y"
                                                                  {
    }
#line 2977 "grammar.cpp"
    break;

  case 22: /* statement_block_statement: for_statement  */
#line 743 "grammar.y"
                  {
    }
#line 2984 "grammar.cpp"
    break;

  case 23: /* statement_block_statement: let_statement  */
#line 745 "grammar.y"
                  {
    }
#line 2991 "grammar.cpp"
    break;

  case 24: /* statement_block_statement: filter_statement  */
#line 747 "grammar.y"
                     {
    }
#line 2998 "grammar.cpp"
    break;

  case 25: /* statement_block_statement: collect_statement  */
#line 749 "grammar.y"
                      {
    }
#line 3005 "grammar.cpp"
    break;

  case 26: /* statement_block_statement: sort_statement  */
#line 751 "grammar.y"
                   {
    }
#line 3012 "grammar.cpp"
    break;

  case 27: /* statement_block_statement: limit_statement  */
#line 753 "grammar.y"
                    {
    }
#line 3019 "grammar.cpp"
    break;

  case 28: /* statement_block_statement: window_statement  */
#line 755 "grammar.y"
                     {
    }
#line 3026 "grammar.cpp"
    break;

  case 29: /* statement_block_statement: remove_statement  */
#line 757 "grammar.y"
                     {
    }
#line 3033 "grammar.cpp"
    break;

  case 30: /* statement_block_statement: insert_statement  */
#line 759 "grammar.y"
                     {
    }
#line 3040 "grammar.cpp"
    break;

  case 31: /* statement_block_statement: update_statement  */
#line 761 "grammar.y"
                     {
    }
#line 3047 "grammar.cpp"
    break;

  case 32: /* statement_block_statement: replace_statement  */
#line 763 "grammar.y"
                      {
    }
#line 3054 "grammar.cpp"
    break;

  case 33: /* statement_block_statement: upsert_statement  */
#line 765 "grammar.y"
                     {
    }
#line 3061 "grammar.cpp"
    break;

  case 34: /* more_output_variables: variable_name  */
#line 770 "grammar.y"
                  {
      auto wrapperNode = parser->ast()->createNodeArray();
      parser->pushArray(wrapperNode);
      // This is guaranteed to be called on the first variable
      AstNode* node = parser->ast()->createNodeValueString((yyvsp[0].strval).value, (yyvsp[0].strval).length);
      parser->pushArrayElement(node);
    }
#line 3073 "grammar.cpp"
    break;

  case 35: /* more_output_variables: more_output_variables "," variable_name  */
#line 777 "grammar.y"
                                                  {
      AstNode* node = parser->ast()->createNodeValueString((yyvsp[0].strval).value, (yyvsp[0].strval).length);
      parser->pushArrayElement(node);
    }
#line 3082 "grammar.cpp"
    break;

  case 36: /* for_output_variables: more_output_variables  */
#line 784 "grammar.y"
                          {
      (yyval.node) = parser->popArray();
    }
#line 3090 "grammar.cpp"
    break;

  case 37: /* prune_and_options: %empty  */
#line 790 "grammar.y"
                                                   {
      auto node = static_cast<AstNode*>(parser->peekStack());
      // Prune
      node->addMember(parser->ast()->createNodeNop());
      // Options
      node->addMember(parser->ast()->createNodeNop());
    }
#line 3102 "grammar.cpp"
    break;

  case 38: /* prune_and_options: "identifier" optional_prune_variable  */
#line 797 "grammar.y"
                                     {
      std::string_view operation((yyvsp[-1].strval).value, (yyvsp[-1].strval).length);

      auto node = static_cast<AstNode*>(parser->peekStack());
      if (::caseInsensitiveEqual(operation, "PRUNE")) {
        /* Only Prune */
        TRI_ASSERT((yyvsp[0].node) != nullptr);
        // Prune
        node->addMember((yyvsp[0].node));
        // Options
        node->addMember(parser->ast()->createNodeNop());
      } else if (::caseInsensitiveEqual(operation, "OPTIONS")) {
        auto const* optionsArgument = (yyvsp[0].node)->getMember(1);
        /* Only Options */
        TRI_ASSERT(optionsArgument != nullptr);
        ::validateOptions(parser, optionsArgument, yylloc.first_line, yylloc.first_column);
        // Prune
        node->addMember(parser->ast()->createNodeNop());
        // Options
        node->addMember(optionsArgument);
      } else {
        parser->registerParseError(TRI_ERROR_QUERY_PARSE, "unexpected qualifier '%s', expecting 'PRUNE' or 'OPTIONS'", operation, yylloc.first_line, yylloc.first_column);
      }
    }
#line 3131 "grammar.cpp"
    break;

  case 39: /* prune_and_options: "identifier" optional_prune_variable "identifier" object  */
#line 821 "grammar.y"
                                                     {
      /* prune and options */
      std::string_view operation((yyvsp[-3].strval).value, (yyvsp[-3].strval).length);
      auto node = static_cast<AstNode*>(parser->peekStack());
      if (!::caseInsensitiveEqual(operation, "PRUNE")) {
        parser->registerParseError(TRI_ERROR_QUERY_PARSE, "unexpected qualifier '%s', expecting 'PRUNE'", operation, yylloc.first_line, yylloc.first_column);
      }
      TRI_ASSERT((yyvsp[-2].node) != nullptr);
      operation = {(yyvsp[-1].strval).value, (yyvsp[-1].strval).length};
      if (!::caseInsensitiveEqual(operation, "OPTIONS")) {
        parser->registerParseError(TRI_ERROR_QUERY_PARSE, "unexpected qualifier '%s', expecting 'OPTIONS'", operation, yylloc.first_line, yylloc.first_column);
      }
      TRI_ASSERT((yyvsp[0].node) != nullptr);
      ::validateOptions(parser, (yyvsp[0].node), yylloc.first_line, yylloc.first_column);

      // Prune
      node->addMember((yyvsp[-2].node));
      // Options
      node->addMember((yyvsp[0].node));
    }
#line 3156 "grammar.cpp"
    break;

  case 40: /* traversal_graph_info: graph_direction_steps expression graph_subject  */
#line 844 "grammar.y"
                                                   {
      auto infoNode = parser->ast()->createNodeArray();
      // Direction
      infoNode->addMember((yyvsp[-2].node));
      // Source
      infoNode->addMember((yyvsp[-1].node));
      // Graph
      infoNode->addMember((yyvsp[0].node));
      (yyval.node) = infoNode;
    }
#line 3171 "grammar.cpp"
    break;

  case 41: /* shortest_path_graph_info: graph_direction "SHORTEST_PATH keyword" expression "identifier" expression graph_subject options  */
#line 857 "grammar.y"
                                                                                         {
      (yyval.node) = ::buildShortestPathInfo(parser, (yyvsp[-3].strval).value, parser->ast()->createNodeDirection((yyvsp[-6].intval), 1), (yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node), yyloc);
    }
#line 3179 "grammar.cpp"
    break;

  case 42: /* k_shortest_paths_graph_info: graph_direction "K_SHORTEST_PATHS keyword" expression "identifier" expression graph_subject options  */
#line 863 "grammar.y"
                                                                                            {
      (yyval.node) = ::buildShortestPathInfo(parser, (yyvsp[-3].strval).value, parser->ast()->createNodeDirection((yyvsp[-6].intval), 1), (yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node), yyloc);
    }
#line 3187 "grammar.cpp"
    break;

  case 43: /* k_paths_graph_info: graph_direction_steps "K_PATHS keyword" expression "identifier" expression graph_subject options  */
#line 869 "grammar.y"
                                                                                         {
      (yyval.node) = ::buildShortestPathInfo(parser, (yyvsp[-3].strval).value, (yyvsp[-6].node), (yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node), yyloc);
    }
#line 3195 "grammar.cpp"
    break;

  case 44: /* all_shortest_paths_graph_info: graph_direction "ALL_SHORTEST_PATHS keyword" expression "identifier" expression graph_subject options  */
#line 875 "grammar.y"
                                                                                              {
      auto nodeStart = parser->ast()->createNodeValueInt(0);
      auto nodeEnd = parser->ast()->createNodeValueInt(INT64_MAX-1);
      auto nodeRange = parser->ast()->createNodeRange(nodeStart, nodeEnd);
      (yyval.node) = ::buildShortestPathInfo(parser, (yyvsp[-3].strval).value, parser->ast()->createNodeDirection((yyvsp[-6].intval), nodeRange), (yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node), yyloc);
    }
#line 3206 "grammar.cpp"
    break;

  case 45: /* $@2: %empty  */
#line 884 "grammar.y"
                                               {
      AstNode* variablesNode = static_cast<AstNode*>((yyvsp[-2].node));
      ::checkOutVariables(parser, variablesNode, 1, 1, "Collections and views FOR loops only allow a single return variable", yyloc);
      parser->ast()->scopes()->start(arangodb::aql::AQL_SCOPE_FOR);
      // now create an out variable for the FOR statement
      // this prepares us to handle the optional SEARCH condition, which may
      // or may not refer to the FOR's variable
      AstNode* variableNameNode = variablesNode->getMemberUnchecked(0);
      TRI_ASSERT(variableNameNode->isStringValue());
      AstNode* variableNode = parser->ast()->createNodeVariable(variableNameNode->getStringView(), true);
      parser->pushStack(variableNode);
      
      // we are temporarily forcing all conditionals to be inlined, just for
      // evaluating a potential SEARCH condition, which must remain a single
      // condition
      parser->lazyConditions().pushForceInline();
    }
#line 3228 "grammar.cpp"
    break;

  case 46: /* for_statement: "FOR declaration" for_output_variables "IN keyword" expression $@2 for_options  */
#line 900 "grammar.y"
                  {
      parser->lazyConditions().popForceInline();

      // now we can handle the optional SEARCH condition and OPTIONS.
      AstNode* variableNode = static_cast<AstNode*>(parser->popStack());

      Variable* variable = static_cast<Variable*>(variableNode->getData());

      AstNode* node = nullptr;
      AstNode* search = nullptr;
      AstNode* options = nullptr;

      if ((yyvsp[0].node) != nullptr) {
        // we got a SEARCH and/or OPTIONS clause
        TRI_ASSERT((yyvsp[0].node)->type == NODE_TYPE_ARRAY);
        TRI_ASSERT((yyvsp[0].node)->numMembers() == 2);

        search = (yyvsp[0].node)->getMemberUnchecked(0);
        if (search->type == NODE_TYPE_NOP) {
          search = nullptr;
        }
        options = (yyvsp[0].node)->getMemberUnchecked(1);
        if (options->type == NODE_TYPE_NOP) {
          options = nullptr;
        }
      }

      if (search != nullptr) {
        // we got a SEARCH clause. this is always a view.
        node = parser->ast()->createNodeForView(variable, (yyvsp[-2].node), search, options);

        if ((yyvsp[-2].node)->type != NODE_TYPE_PARAMETER_DATASOURCE &&
            (yyvsp[-2].node)->type != NODE_TYPE_VIEW &&
            (yyvsp[-2].node)->type != NODE_TYPE_COLLECTION) {
          parser->registerParseError(TRI_ERROR_QUERY_PARSE, "SEARCH condition used on non-view", yylloc.first_line, yylloc.first_column);
        }
      } else {
        node = parser->ast()->createNodeFor(variable, (yyvsp[-2].node), options);
      }

      parser->ast()->addOperation(node);
    }
#line 3275 "grammar.cpp"
    break;

  case 47: /* $@3: %empty  */
#line 942 "grammar.y"
                                                         {
      // Traversal
      auto variableNamesNode = static_cast<AstNode*>((yyvsp[-2].node));
      ::checkOutVariables(parser, variableNamesNode, 1, 3, "Traversals only have one, two or three return variables", yyloc);
      parser->ast()->scopes()->start(arangodb::aql::AQL_SCOPE_FOR);
      auto variablesNode = ::transformOutputVariables(parser, variableNamesNode);
      auto graphInfoNode = static_cast<AstNode*>((yyvsp[0].node));
      TRI_ASSERT(graphInfoNode != nullptr);
      TRI_ASSERT(graphInfoNode->type == NODE_TYPE_ARRAY);
      // This stack push/pop magic is necessary to allow v, e, and p in the prune condition
      parser->pushStack(variablesNode);
      parser->pushStack(graphInfoNode);

      // we are temporarily forcing all conditionals to be inlined, just for
      // evaluating the PRUNE condition, which must remain a single condition
      parser->lazyConditions().pushForceInline();
    }
#line 3297 "grammar.cpp"
    break;

  case 48: /* for_statement: "FOR declaration" for_output_variables "IN keyword" traversal_graph_info $@3 prune_and_options  */
#line 958 "grammar.y"
                        {
      parser->lazyConditions().popForceInline();

      auto graphInfoNode = static_cast<AstNode*>(parser->popStack());
      auto variablesNode = static_cast<AstNode*>(parser->popStack());

      auto prune = graphInfoNode->getMember(3);
      TRI_ASSERT(prune != nullptr);
      if (prune->type == NODE_TYPE_ARRAY) {
        TRI_ASSERT(prune->numMembers() == 2);
        Ast::traverseReadOnly(prune->getMember(1), [&](AstNode const* node) {
          if (node->type == NODE_TYPE_REFERENCE && node->hasFlag(AstNodeFlagType::FLAG_SUBQUERY_REFERENCE)) {
            parser->registerParseError(TRI_ERROR_QUERY_PARSE, "PRUNE condition must not use a subquery", yylloc.first_line, yylloc.first_column);
          }
        });
        graphInfoNode->changeMember(3, prune->getMember(1));
      }
      auto node = parser->ast()->createNodeTraversal(variablesNode, graphInfoNode);
      parser->ast()->addOperation(node);
      if (prune->type == NODE_TYPE_ARRAY && prune->getMember(0)->type != NODE_TYPE_NOP) {
        auto pruneLetVariableName = prune->getMember(0);
        parser->ast()->addOperation(pruneLetVariableName);
      }
    }
#line 3326 "grammar.cpp"
    break;

  case 49: /* for_statement: "FOR declaration" for_output_variables "IN keyword" shortest_path_graph_info  */
#line 982 "grammar.y"
                                                             {
      // Shortest Path
      auto variableNamesNode = static_cast<AstNode*>((yyvsp[-2].node));
      ::checkOutVariables(parser, variableNamesNode, 1, 2, "SHORTEST_PATH must have one or two return variables", yyloc);
      parser->ast()->scopes()->start(arangodb::aql::AQL_SCOPE_FOR);
      auto variablesNode = ::transformOutputVariables(parser, variableNamesNode);
      auto graphInfoNode = static_cast<AstNode*>((yyvsp[0].node));
      TRI_ASSERT(graphInfoNode != nullptr);
      TRI_ASSERT(graphInfoNode->type == NODE_TYPE_ARRAY);
      auto node = parser->ast()->createNodeShortestPath(variablesNode, graphInfoNode);
      parser->ast()->addOperation(node);
    }
#line 3343 "grammar.cpp"
    break;

  case 50: /* for_statement: "FOR declaration" for_output_variables "IN keyword" k_shortest_paths_graph_info  */
#line 994 "grammar.y"
                                                                {
      // K Shortest Paths
      auto variableNamesNode = static_cast<AstNode*>((yyvsp[-2].node));
      ::checkOutVariables(parser, variableNamesNode, 1, 1, "K_SHORTEST_PATHS only has one return variable", yyloc);
      parser->ast()->scopes()->start(arangodb::aql::AQL_SCOPE_FOR);
      auto variablesNode = ::transformOutputVariables(parser, variableNamesNode);
      auto graphInfoNode = static_cast<AstNode*>((yyvsp[0].node));
      TRI_ASSERT(graphInfoNode != nullptr);
      TRI_ASSERT(graphInfoNode->type == NODE_TYPE_ARRAY);
      auto node = parser->ast()->createNodeEnumeratePaths(arangodb::graph::PathType::Type::KShortestPaths, variablesNode, graphInfoNode);
      parser->ast()->addOperation(node);
    }
#line 3360 "grammar.cpp"
    break;

  case 51: /* for_statement: "FOR declaration" for_output_variables "IN keyword" k_paths_graph_info  */
#line 1006 "grammar.y"
                                                       {
      // K Paths
      auto variableNamesNode = static_cast<AstNode*>((yyvsp[-2].node));
      ::checkOutVariables(parser, variableNamesNode, 1, 1, "K_PATHS only has one return variable", yyloc);
      parser->ast()->scopes()->start(arangodb::aql::AQL_SCOPE_FOR);
      auto variablesNode = ::transformOutputVariables(parser, variableNamesNode);
      auto graphInfoNode = static_cast<AstNode*>((yyvsp[0].node));
      TRI_ASSERT(graphInfoNode != nullptr);
      TRI_ASSERT(graphInfoNode->type == NODE_TYPE_ARRAY);
      auto node = parser->ast()->createNodeEnumeratePaths(arangodb::graph::PathType::Type::KPaths, variablesNode, graphInfoNode);
      parser->ast()->addOperation(node);
    }
#line 3377 "grammar.cpp"
    break;

  case 52: /* for_statement: "FOR declaration" for_output_variables "IN keyword" all_shortest_paths_graph_info  */
#line 1018 "grammar.y"
                                                                  {
      // All Shortest Paths
      auto variableNamesNode = static_cast<AstNode*>((yyvsp[-2].node));
      ::checkOutVariables(parser, variableNamesNode, 1, 1, "ALL_SHORTEST_PATHS only has one return variable", yyloc);
      parser->ast()->scopes()->start(arangodb::aql::AQL_SCOPE_FOR);
      auto variablesNode = ::transformOutputVariables(parser, variableNamesNode);
      auto graphInfoNode = static_cast<AstNode*>((yyvsp[0].node));
      TRI_ASSERT(graphInfoNode != nullptr);
      TRI_ASSERT(graphInfoNode->type == NODE_TYPE_ARRAY);
      auto node = parser->ast()->createNodeEnumeratePaths(arangodb::graph::PathType::Type::AllShortestPaths, variablesNode, graphInfoNode);
      parser->ast()->addOperation(node);
    }
#line 3394 "grammar.cpp"
    break;

  case 53: /* filter_statement: "FILTER declaration" expression  */
#line 1033 "grammar.y"
                        {
      // operand is a reference. can use it directly
      auto node = parser->ast()->createNodeFilter((yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 3404 "grammar.cpp"
    break;

  case 54: /* let_statement: "LET declaration" let_list  */
#line 1041 "grammar.y"
                   {
    }
#line 3411 "grammar.cpp"
    break;

  case 55: /* let_list: let_element  */
#line 1046 "grammar.y"
                {
    }
#line 3418 "grammar.cpp"
    break;

  case 56: /* let_list: let_list "," let_element  */
#line 1048 "grammar.y"
                                 {
    }
#line 3425 "grammar.cpp"
    break;

  case 57: /* let_element: variable_name "assignment" expression  */
#line 1053 "grammar.y"
                                      {
      auto node = parser->ast()->createNodeLet((yyvsp[-2].strval).value, (yyvsp[-2].strval).length, (yyvsp[0].node), true);
      parser->ast()->addOperation(node);
    }
#line 3434 "grammar.cpp"
    break;

  case 58: /* let_element: array_destructuring "assignment" expression  */
#line 1057 "grammar.y"
                                            {
      std::string nextName = parser->ast()->variables()->nextName();
      auto node = parser->ast()->createNodeLet(nextName.c_str(), nextName.size(), (yyvsp[0].node), false);
      parser->ast()->addOperation(node);

      arangodb::containers::SmallVector<AstNode const*, 8> paths;
      ::destructureArray(parser, nextName, paths, (yyvsp[-2].node));
    }
#line 3447 "grammar.cpp"
    break;

  case 59: /* let_element: object_destructuring "assignment" expression  */
#line 1065 "grammar.y"
                                             {
      std::string nextName = parser->ast()->variables()->nextName();
      auto node = parser->ast()->createNodeLet(nextName.c_str(), nextName.size(), (yyvsp[0].node), false);
      parser->ast()->addOperation(node);

      arangodb::containers::SmallVector<AstNode const*, 8> paths;
      ::destructureObject(parser, nextName, paths, (yyvsp[-2].node));
    }
#line 3460 "grammar.cpp"
    break;

  case 60: /* $@4: %empty  */
#line 1076 "grammar.y"
                 {
      AstNode* node = parser->ast()->createNodeArray();
      node->setIntValue(1);
      parser->pushStack(node);
    }
#line 3470 "grammar.cpp"
    break;

  case 61: /* array_destructuring: "[" $@4 array_destructuring_element "]"  */
#line 1080 "grammar.y"
                                                {
      (yyval.node) = static_cast<AstNode*>(parser->popStack());
    }
#line 3478 "grammar.cpp"
    break;

  case 62: /* array_destructuring_element: %empty  */
#line 1086 "grammar.y"
                {
      parser->pushArrayElement(parser->ast()->createNodeValueNull());
    }
#line 3486 "grammar.cpp"
    break;

  case 63: /* array_destructuring_element: variable_name  */
#line 1089 "grammar.y"
                  {
      parser->pushArrayElement(parser->ast()->createNodeVariable({(yyvsp[0].strval).value, (yyvsp[0].strval).length}, true));
    }
#line 3494 "grammar.cpp"
    break;

  case 64: /* array_destructuring_element: array_destructuring  */
#line 1092 "grammar.y"
                        {
      parser->pushArrayElement((yyvsp[0].node));
    }
#line 3502 "grammar.cpp"
    break;

  case 65: /* array_destructuring_element: object_destructuring  */
#line 1095 "grammar.y"
                         {
      parser->pushArrayElement((yyvsp[0].node));
    }
#line 3510 "grammar.cpp"
    break;

  case 66: /* array_destructuring_element: array_destructuring_element "," array_destructuring_element  */
#line 1098 "grammar.y"
                                                                    {
    }
#line 3517 "grammar.cpp"
    break;

  case 67: /* $@5: %empty  */
#line 1103 "grammar.y"
                  {
      AstNode* node = parser->ast()->createNodeArray();
      node->setIntValue(2);
      parser->pushStack(node);
    }
#line 3527 "grammar.cpp"
    break;

  case 68: /* object_destructuring: "{" $@5 object_destructuring_element "}"  */
#line 1107 "grammar.y"
                                                  {
      (yyval.node) = static_cast<AstNode*>(parser->popStack());
    }
#line 3535 "grammar.cpp"
    break;

  case 69: /* object_destructuring_element: %empty  */
#line 1113 "grammar.y"
                {
      parser->pushArrayElement(parser->ast()->createNodeValueNull());
      parser->pushArrayElement(parser->ast()->createNodeValueNull());
    }
#line 3544 "grammar.cpp"
    break;

  case 70: /* object_destructuring_element: variable_name  */
#line 1117 "grammar.y"
                  {
      parser->pushArrayElement(parser->ast()->createNodeValueString((yyvsp[0].strval).value, (yyvsp[0].strval).length));
      parser->pushArrayElement(parser->ast()->createNodeVariable({(yyvsp[0].strval).value, (yyvsp[0].strval).length}, true));
    }
#line 3553 "grammar.cpp"
    break;

  case 71: /* object_destructuring_element: variable_name ":" variable_name  */
#line 1121 "grammar.y"
                                        {
      parser->pushArrayElement(parser->ast()->createNodeValueString((yyvsp[-2].strval).value, (yyvsp[-2].strval).length));
      parser->pushArrayElement(parser->ast()->createNodeVariable({(yyvsp[0].strval).value, (yyvsp[0].strval).length}, true));
    }
#line 3562 "grammar.cpp"
    break;

  case 72: /* object_destructuring_element: variable_name ":" object_destructuring  */
#line 1125 "grammar.y"
                                               {
      parser->pushArrayElement(parser->ast()->createNodeValueString((yyvsp[-2].strval).value, (yyvsp[-2].strval).length));
      parser->pushArrayElement((yyvsp[0].node));
    }
#line 3571 "grammar.cpp"
    break;

  case 73: /* object_destructuring_element: variable_name ":" array_destructuring  */
#line 1129 "grammar.y"
                                              {
      parser->pushArrayElement(parser->ast()->createNodeValueString((yyvsp[-2].strval).value, (yyvsp[-2].strval).length));
      parser->pushArrayElement((yyvsp[0].node));
    }
#line 3580 "grammar.cpp"
    break;

  case 74: /* object_destructuring_element: object_destructuring_element "," object_destructuring_element  */
#line 1133 "grammar.y"
                                                                      {
    }
#line 3587 "grammar.cpp"
    break;

  case 75: /* count_into: "WITH keyword" "identifier" "INTO keyword" variable_name  */
#line 1138 "grammar.y"
                                         {
      std::string_view operation((yyvsp[-2].strval).value, (yyvsp[-2].strval).length);
      if (!::caseInsensitiveEqual(operation, "COUNT")) {
        parser->registerParseError(TRI_ERROR_QUERY_PARSE, "unexpected qualifier '%s', expecting 'COUNT'", operation, yylloc.first_line, yylloc.first_column);
      }

      (yyval.strval) = (yyvsp[0].strval);
    }
#line 3600 "grammar.cpp"
    break;

  case 76: /* $@6: %empty  */
#line 1149 "grammar.y"
              {
      auto node = parser->ast()->createNodeArray();
      parser->pushStack(node);
    }
#line 3609 "grammar.cpp"
    break;

  case 77: /* collect_variable_list: "COLLECT declaration" $@6 collect_list  */
#line 1152 "grammar.y"
                   {
      auto list = static_cast<AstNode*>(parser->popStack());
      TRI_ASSERT(list != nullptr);
      (yyval.node) = list;
    }
#line 3619 "grammar.cpp"
    break;

  case 78: /* collect_statement: "COLLECT declaration" count_into options  */
#line 1160 "grammar.y"
                                 {
      /* COLLECT WITH COUNT INTO var OPTIONS ... */
      auto scopes = parser->ast()->scopes();

      ::startCollectScope(scopes);

      // in the AST this is transformed to COLLECT AGGREGATE var = COUNT()
      auto node = parser->ast()->createNodeCollectCount(parser->ast()->createNodeArray(), (yyvsp[-1].strval).value, (yyvsp[-1].strval).length, (yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 3634 "grammar.cpp"
    break;

  case 79: /* collect_statement: collect_variable_list count_into options  */
#line 1170 "grammar.y"
                                             {
      /* COLLECT var = expr WITH COUNT INTO var OPTIONS ... */
      auto scopes = parser->ast()->scopes();

      if (::startCollectScope(scopes)) {
        VarSet variables{};
        ::registerAssignVariables(parser, scopes, yylloc.first_line, yylloc.first_column, variables, (yyvsp[-2].node));
      }

      // in the AST this is transformed to COLLECT var = expr AGGREGATE var = COUNT()
      auto node = parser->ast()->createNodeCollectCount((yyvsp[-2].node), (yyvsp[-1].strval).value, (yyvsp[-1].strval).length, (yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 3652 "grammar.cpp"
    break;

  case 80: /* collect_statement: "COLLECT declaration" aggregate collect_optional_into options  */
#line 1183 "grammar.y"
                                                      {
      /* AGGREGATE var = expr OPTIONS ... */
      VarSet variablesIntroduced{};
      auto scopes = parser->ast()->scopes();

      if (::startCollectScope(scopes)) {
        ::registerAssignVariables(parser, scopes, yylloc.first_line, yylloc.first_column, variablesIntroduced, (yyvsp[-2].node));
      }

      // validate aggregates
      if (!::validateAggregates(parser, (yyvsp[-2].node), yylloc.first_line, yylloc.first_column)) {
        YYABORT;
      }

      if ((yyvsp[-1].node) != nullptr && (yyvsp[-1].node)->type == NODE_TYPE_ARRAY) {
        ::checkCollectVariables(parser, "INTO", (yyvsp[-1].node)->getMember(1), yylloc.first_line, yylloc.first_column, variablesIntroduced);
      }

      AstNode const* into = ::getIntoVariable(parser, (yyvsp[-1].node));
      AstNode const* intoExpression = ::getIntoExpression((yyvsp[-1].node));

      auto node = parser->ast()->createNodeCollect(parser->ast()->createNodeArray(), (yyvsp[-2].node), into, intoExpression, nullptr, (yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 3681 "grammar.cpp"
    break;

  case 81: /* collect_statement: collect_variable_list aggregate collect_optional_into options  */
#line 1207 "grammar.y"
                                                                  {
      /* COLLECT var = expr AGGREGATE var = expr OPTIONS ... */
      VarSet variablesIntroduced{};
      auto scopes = parser->ast()->scopes();

      if (::startCollectScope(scopes)) {
        ::registerAssignVariables(parser, scopes, yylloc.first_line, yylloc.first_column, variablesIntroduced, (yyvsp[-3].node));
        ::registerAssignVariables(parser, scopes, yylloc.first_line, yylloc.first_column, variablesIntroduced, (yyvsp[-2].node));
      }

      if (!::validateAggregates(parser, (yyvsp[-2].node), yylloc.first_line, yylloc.first_column)) {
        YYABORT;
      }

      if ((yyvsp[-1].node) != nullptr && (yyvsp[-1].node)->type == NODE_TYPE_ARRAY) {
        ::checkCollectVariables(parser, "INTO", (yyvsp[-1].node)->getMember(1), yylloc.first_line, yylloc.first_column, variablesIntroduced);
      }

      // note all group variables
      VarSet groupVars{};
      size_t n = (yyvsp[-3].node)->numMembers();
      for (size_t i = 0; i < n; ++i) {
        auto member = (yyvsp[-3].node)->getMember(i);

        if (member != nullptr) {
          TRI_ASSERT(member->type == NODE_TYPE_ASSIGN);
          groupVars.emplace(static_cast<Variable const*>(member->getMember(0)->getData()));
        }
      }

      // now validate if any aggregate refers to one of the group variables
      n = (yyvsp[-2].node)->numMembers();
      for (size_t i = 0; i < n; ++i) {
        auto member = (yyvsp[-2].node)->getMember(i);

        if (member != nullptr) {
          TRI_ASSERT(member->type == NODE_TYPE_ASSIGN);
          VarSet variablesUsed{};
          Ast::getReferencedVariables(member->getMember(1), variablesUsed);

          for (auto& it : groupVars) {
            if (variablesUsed.contains(it)) {
              parser->registerParseError(TRI_ERROR_QUERY_VARIABLE_NAME_UNKNOWN,
                "use of unknown variable '%s' in AGGREGATE expression", it->name, yylloc.first_line, yylloc.first_column);
            }
          }
        }
      }

      AstNode const* into = ::getIntoVariable(parser, (yyvsp[-1].node));
      AstNode const* intoExpression = ::getIntoExpression((yyvsp[-1].node));

      auto node = parser->ast()->createNodeCollect((yyvsp[-3].node), (yyvsp[-2].node), into, intoExpression, nullptr, (yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 3741 "grammar.cpp"
    break;

  case 82: /* collect_statement: collect_variable_list collect_optional_into options  */
#line 1262 "grammar.y"
                                                        {
      /* COLLECT var = expr INTO var OPTIONS ... */
      VarSet variablesIntroduced{};
      auto scopes = parser->ast()->scopes();

      if (::startCollectScope(scopes)) {
        ::registerAssignVariables(parser, scopes, yylloc.first_line, yylloc.first_column, variablesIntroduced, (yyvsp[-2].node));
      }

      if ((yyvsp[-1].node) != nullptr && (yyvsp[-1].node)->type == NODE_TYPE_ARRAY) {
        ::checkCollectVariables(parser, "INTO", (yyvsp[-1].node)->getMember(1), yylloc.first_line, yylloc.first_column, variablesIntroduced);
      }

      AstNode const* into = ::getIntoVariable(parser, (yyvsp[-1].node));
      AstNode const* intoExpression = ::getIntoExpression((yyvsp[-1].node));

      auto node = parser->ast()->createNodeCollect((yyvsp[-2].node), parser->ast()->createNodeArray(), into, intoExpression, nullptr, (yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 3765 "grammar.cpp"
    break;

  case 83: /* collect_statement: collect_variable_list collect_optional_into keep options  */
#line 1281 "grammar.y"
                                                             {
      /* COLLECT var = expr INTO var KEEP ... OPTIONS ... */
      VarSet variablesIntroduced{};
      auto scopes = parser->ast()->scopes();

      if (::startCollectScope(scopes)) {
        ::registerAssignVariables(parser, scopes, yylloc.first_line, yylloc.first_column, variablesIntroduced, (yyvsp[-3].node));
      }

      if ((yyvsp[-2].node) == nullptr &&
          (yyvsp[-1].node) != nullptr) {
        parser->registerParseError(TRI_ERROR_QUERY_PARSE, "use of 'KEEP' without 'INTO'", yylloc.first_line, yylloc.first_column);
      }

      if ((yyvsp[-2].node) != nullptr && (yyvsp[-2].node)->type == NODE_TYPE_ARRAY) {
        ::checkCollectVariables(parser, "INTO", (yyvsp[-2].node)->getMember(1), yylloc.first_line, yylloc.first_column, variablesIntroduced);
      }
        
      if ((yyvsp[-1].node) != nullptr && (yyvsp[-1].node)->type == NODE_TYPE_ARRAY) {
        ::checkCollectVariables(parser, "KEEP", (yyvsp[-1].node), yylloc.first_line, yylloc.first_column, variablesIntroduced);
      }

      AstNode const* into = ::getIntoVariable(parser, (yyvsp[-2].node));
      AstNode const* intoExpression = ::getIntoExpression((yyvsp[-2].node));

      auto node = parser->ast()->createNodeCollect((yyvsp[-3].node), parser->ast()->createNodeArray(), into, intoExpression, (yyvsp[-1].node), (yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 3798 "grammar.cpp"
    break;

  case 84: /* collect_list: collect_element  */
#line 1312 "grammar.y"
                    {
    }
#line 3805 "grammar.cpp"
    break;

  case 85: /* collect_list: collect_list "," collect_element  */
#line 1314 "grammar.y"
                                         {
    }
#line 3812 "grammar.cpp"
    break;

  case 86: /* collect_element: variable_name "assignment" expression  */
#line 1319 "grammar.y"
                                      {
      auto node = parser->ast()->createNodeAssign((yyvsp[-2].strval).value, (yyvsp[-2].strval).length, (yyvsp[0].node));
      parser->pushArrayElement(node);
    }
#line 3821 "grammar.cpp"
    break;

  case 87: /* collect_optional_into: %empty  */
#line 1326 "grammar.y"
                {
      (yyval.node) = nullptr;
    }
#line 3829 "grammar.cpp"
    break;

  case 88: /* collect_optional_into: "INTO keyword" variable_name  */
#line 1329 "grammar.y"
                         {
      (yyval.node) = parser->ast()->createNodeValueString((yyvsp[0].strval).value, (yyvsp[0].strval).length);
    }
#line 3837 "grammar.cpp"
    break;

  case 89: /* collect_optional_into: "INTO keyword" variable_name "assignment" expression  */
#line 1332 "grammar.y"
                                             {
      auto node = parser->ast()->createNodeArray();
      node->addMember(parser->ast()->createNodeValueString((yyvsp[-2].strval).value, (yyvsp[-2].strval).length));
      node->addMember((yyvsp[0].node));
      (yyval.node) = node;
    }
#line 3848 "grammar.cpp"
    break;

  case 90: /* variable_list: variable_name  */
#line 1341 "grammar.y"
                  {
      std::string_view variableName((yyvsp[0].strval).value, (yyvsp[0].strval).length);
      if (!parser->ast()->scopes()->existsVariable(variableName)) {
        parser->registerParseError(TRI_ERROR_QUERY_PARSE, "use of unknown variable '%s' for KEEP", variableName, yylloc.first_line, yylloc.first_column);
      }

      auto node = parser->ast()->createNodeReference(variableName);
      TRI_ASSERT(node != nullptr);

      // indicate the this node is a reference to the variable name, not the variable value
      node->setFlag(FLAG_KEEP_VARIABLENAME);
      parser->pushArrayElement(node);
    }
#line 3866 "grammar.cpp"
    break;

  case 91: /* variable_list: variable_list "," variable_name  */
#line 1354 "grammar.y"
                                        {
      std::string_view variableName((yyvsp[0].strval).value, (yyvsp[0].strval).length);
      if (!parser->ast()->scopes()->existsVariable(variableName)) {
        parser->registerParseError(TRI_ERROR_QUERY_PARSE, "use of unknown variable '%s' for KEEP", variableName, yylloc.first_line, yylloc.first_column);
      }

      auto node = parser->ast()->createNodeReference(variableName);
      TRI_ASSERT(node != nullptr);

      // indicate the this node is a reference to the variable name, not the variable value
      node->setFlag(FLAG_KEEP_VARIABLENAME);
      parser->pushArrayElement(node);
    }
#line 3884 "grammar.cpp"
    break;

  case 92: /* $@7: %empty  */
#line 1370 "grammar.y"
             {
      std::string_view operation((yyvsp[0].strval).value, (yyvsp[0].strval).length);
      if (!::caseInsensitiveEqual(operation, "KEEP")) {
        parser->registerParseError(TRI_ERROR_QUERY_PARSE, "unexpected qualifier '%s', expecting 'KEEP'", operation, yylloc.first_line, yylloc.first_column);
      }

      auto node = parser->ast()->createNodeArray();
      parser->pushStack(node);
    }
#line 3898 "grammar.cpp"
    break;

  case 93: /* keep: "identifier" $@7 variable_list  */
#line 1378 "grammar.y"
                    {
      auto list = static_cast<AstNode*>(parser->popStack());
      (yyval.node) = list;
    }
#line 3907 "grammar.cpp"
    break;

  case 94: /* $@8: %empty  */
#line 1385 "grammar.y"
                {
      auto node = parser->ast()->createNodeArray();
      parser->pushStack(node);
    }
#line 3916 "grammar.cpp"
    break;

  case 95: /* aggregate: "AGGREGATE keyword" $@8 aggregate_list  */
#line 1388 "grammar.y"
                     {
      auto list = static_cast<AstNode*>(parser->popStack());
      (yyval.node) = list;
    }
#line 3925 "grammar.cpp"
    break;

  case 96: /* aggregate_list: aggregate_element  */
#line 1395 "grammar.y"
                      {
    }
#line 3932 "grammar.cpp"
    break;

  case 97: /* aggregate_list: aggregate_list "," aggregate_element  */
#line 1397 "grammar.y"
                                             {
    }
#line 3939 "grammar.cpp"
    break;

  case 98: /* aggregate_element: variable_name "assignment" aggregate_function_call  */
#line 1402 "grammar.y"
                                                   {
      auto node = parser->ast()->createNodeAssign((yyvsp[-2].strval).value, (yyvsp[-2].strval).length, (yyvsp[0].node));
      parser->pushArrayElement(node);
    }
#line 3948 "grammar.cpp"
    break;

  case 99: /* $@9: %empty  */
#line 1409 "grammar.y"
                         {
      parser->pushStack((yyvsp[-1].strval).value);
      auto node = parser->ast()->createNodeArray();
      parser->pushStack(node);
    }
#line 3958 "grammar.cpp"
    break;

  case 100: /* aggregate_function_call: function_name "(" $@9 optional_function_call_arguments ")"  */
#line 1413 "grammar.y"
                                                              {
      auto list = static_cast<AstNode const*>(parser->popStack());
      // this works because the function name here is always NUL-terminated
      (yyval.node) = parser->ast()->createNodeAggregateFunctionCall(static_cast<char const*>(parser->popStack()), list);
    }
#line 3968 "grammar.cpp"
    break;

  case 101: /* $@10: %empty  */
#line 1421 "grammar.y"
           {
      auto node = parser->ast()->createNodeArray();
      parser->pushStack(node);
    }
#line 3977 "grammar.cpp"
    break;

  case 102: /* sort_statement: "SORT declaration" $@10 sort_list  */
#line 1424 "grammar.y"
                {
      auto list = static_cast<AstNode const*>(parser->popStack());
      auto node = parser->ast()->createNodeSort(list);
      parser->ast()->addOperation(node);
    }
#line 3987 "grammar.cpp"
    break;

  case 103: /* sort_list: sort_element  */
#line 1432 "grammar.y"
                 {
      parser->pushArrayElement((yyvsp[0].node));
    }
#line 3995 "grammar.cpp"
    break;

  case 104: /* sort_list: sort_list "," sort_element  */
#line 1435 "grammar.y"
                                   {
      parser->pushArrayElement((yyvsp[0].node));
    }
#line 4003 "grammar.cpp"
    break;

  case 105: /* sort_element: expression sort_direction  */
#line 1441 "grammar.y"
                              {
      (yyval.node) = parser->ast()->createNodeSortElement((yyvsp[-1].node), (yyvsp[0].node));
    }
#line 4011 "grammar.cpp"
    break;

  case 106: /* sort_direction: %empty  */
#line 1447 "grammar.y"
                {
      (yyval.node) = parser->ast()->createNodeValueBool(true);
    }
#line 4019 "grammar.cpp"
    break;

  case 107: /* sort_direction: "ASC keyword"  */
#line 1450 "grammar.y"
          {
      (yyval.node) = parser->ast()->createNodeValueBool(true);
    }
#line 4027 "grammar.cpp"
    break;

  case 108: /* sort_direction: "DESC keyword"  */
#line 1453 "grammar.y"
           {
      (yyval.node) = parser->ast()->createNodeValueBool(false);
    }
#line 4035 "grammar.cpp"
    break;

  case 109: /* sort_direction: simple_value  */
#line 1456 "grammar.y"
                 {
      (yyval.node) = (yyvsp[0].node);
    }
#line 4043 "grammar.cpp"
    break;

  case 110: /* limit_statement: "LIMIT declaration" expression  */
#line 1462 "grammar.y"
                       {
      auto offset = parser->ast()->createNodeValueInt(0);
      auto node = parser->ast()->createNodeLimit(offset, (yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 4053 "grammar.cpp"
    break;

  case 111: /* limit_statement: "LIMIT declaration" expression "," expression  */
#line 1467 "grammar.y"
                                          {
      auto node = parser->ast()->createNodeLimit((yyvsp[-2].node), (yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 4062 "grammar.cpp"
    break;

  case 112: /* window_statement: "WINDOW declaration" object aggregate  */
#line 1474 "grammar.y"
                              {
      /* WINDOW {preceding:2, following:2} AGGREGATE x = AVG(x) */
      
      // validate aggregates
      if (!::validateAggregates(parser, (yyvsp[0].node), yylloc.first_line, yylloc.first_column)) {
        YYABORT;
      }
      
      if (!::validateWindowSpec(parser, (yyvsp[-1].node), yylloc.first_line, yylloc.first_column)) {
        YYABORT;
      }
      
      auto node = parser->ast()->createNodeWindow(/*spec*/(yyvsp[-1].node), /*range*/nullptr, /*aggrs*/(yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 4082 "grammar.cpp"
    break;

  case 113: /* window_statement: "WINDOW declaration" expression "WITH keyword" object aggregate  */
#line 1489 "grammar.y"
                                                {
    /* WINDOW rangeVar WITH {preceding:"1d", following:"1d"} AGGREGATE x = AVG(x) */
    
    // validate aggregates
    if (!::validateAggregates(parser, (yyvsp[0].node), yylloc.first_line, yylloc.first_column)) {
      YYABORT;
    }
    
    if (!::validateWindowSpec(parser, (yyvsp[-1].node), yylloc.first_line, yylloc.first_column)) {
      YYABORT;
    }
    
    auto node = parser->ast()->createNodeWindow(/*spec*/(yyvsp[-1].node), /*range*/(yyvsp[-3].node), /*aggrs*/(yyvsp[0].node));
    parser->ast()->addOperation(node);
  }
#line 4102 "grammar.cpp"
    break;

  case 114: /* return_statement: "RETURN declaration" distinct_expression  */
#line 1507 "grammar.y"
                                 {
      auto node = parser->ast()->createNodeReturn((yyvsp[0].node));
      parser->ast()->addOperation(node);
      parser->ast()->scopes()->endNested();
    }
#line 4112 "grammar.cpp"
    break;

  case 115: /* in_or_into_collection: "IN keyword" in_or_into_collection_name  */
#line 1515 "grammar.y"
                                    {
      (yyval.node) = (yyvsp[0].node);
    }
#line 4120 "grammar.cpp"
    break;

  case 116: /* in_or_into_collection: "INTO keyword" in_or_into_collection_name  */
#line 1518 "grammar.y"
                                      {
       (yyval.node) = (yyvsp[0].node);
     }
#line 4128 "grammar.cpp"
    break;

  case 117: /* remove_statement: "REMOVE command" expression in_or_into_collection options  */
#line 1524 "grammar.y"
                                                      {
      if (!parser->configureWriteQuery((yyvsp[-1].node), (yyvsp[0].node))) {
        YYABORT;
      }
      auto node = parser->ast()->createNodeRemove((yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 4140 "grammar.cpp"
    break;

  case 118: /* insert_statement: "INSERT command" expression in_or_into_collection options  */
#line 1534 "grammar.y"
                                                      {
      if (!parser->configureWriteQuery((yyvsp[-1].node), (yyvsp[0].node))) {
        YYABORT;
      }
      auto node = parser->ast()->createNodeInsert((yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 4152 "grammar.cpp"
    break;

  case 119: /* update_parameters: expression in_or_into_collection options  */
#line 1544 "grammar.y"
                                             {
      if (!parser->configureWriteQuery((yyvsp[-1].node), (yyvsp[0].node))) {
        YYABORT;
      }

      AstNode* node = parser->ast()->createNodeUpdate(nullptr, (yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 4165 "grammar.cpp"
    break;

  case 120: /* update_parameters: expression "WITH keyword" expression in_or_into_collection options  */
#line 1552 "grammar.y"
                                                               {
      if (!parser->configureWriteQuery((yyvsp[-1].node), (yyvsp[0].node))) {
        YYABORT;
      }

      AstNode* node = parser->ast()->createNodeUpdate((yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 4178 "grammar.cpp"
    break;

  case 121: /* update_statement: "UPDATE command" update_parameters  */
#line 1563 "grammar.y"
                               {
    }
#line 4185 "grammar.cpp"
    break;

  case 122: /* replace_parameters: expression in_or_into_collection options  */
#line 1568 "grammar.y"
                                             {
      if (!parser->configureWriteQuery((yyvsp[-1].node), (yyvsp[0].node))) {
        YYABORT;
      }

      AstNode* node = parser->ast()->createNodeReplace(nullptr, (yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 4198 "grammar.cpp"
    break;

  case 123: /* replace_parameters: expression "WITH keyword" expression in_or_into_collection options  */
#line 1576 "grammar.y"
                                                               {
      if (!parser->configureWriteQuery((yyvsp[-1].node), (yyvsp[0].node))) {
        YYABORT;
      }

      AstNode* node = parser->ast()->createNodeReplace((yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 4211 "grammar.cpp"
    break;

  case 124: /* replace_statement: "REPLACE command" replace_parameters  */
#line 1587 "grammar.y"
                                 {
    }
#line 4218 "grammar.cpp"
    break;

  case 125: /* update_or_replace: "UPDATE command"  */
#line 1592 "grammar.y"
             {
      (yyval.intval) = static_cast<int64_t>(NODE_TYPE_UPDATE);
    }
#line 4226 "grammar.cpp"
    break;

  case 126: /* update_or_replace: "REPLACE command"  */
#line 1595 "grammar.y"
              {
      (yyval.intval) = static_cast<int64_t>(NODE_TYPE_REPLACE);
    }
#line 4234 "grammar.cpp"
    break;

  case 127: /* upsert_input: object  */
#line 1601 "grammar.y"
           {
      (yyval.node) = (yyvsp[0].node);
    }
#line 4242 "grammar.cpp"
    break;

  case 128: /* upsert_input: bind_parameter  */
#line 1604 "grammar.y"
                   {
      (yyval.node) = (yyvsp[0].node);
    }
#line 4250 "grammar.cpp"
    break;

  case 129: /* $@11: %empty  */
#line 1610 "grammar.y"
                      {
      // reserve a variable named "$OLD", we might need it in the update expression
      // and in a later return thing
      AstNode* variableNode = parser->ast()->createNodeVariable(Variable::NAME_OLD, false);
      parser->pushStack(variableNode);

      auto scopes = parser->ast()->scopes();

      scopes->start(arangodb::aql::AQL_SCOPE_SUBQUERY);
      parser->ast()->startSubQuery();

      scopes->start(arangodb::aql::AQL_SCOPE_FOR);
      auto forNode = parser->ast()->createNodeForUpsert(Variable::NAME_CURRENT.data(), Variable::NAME_CURRENT.size(), parser->ast()->createNodeArray(), false);
      scopes->stackCurrentVariable(scopes->getVariable(Variable::NAME_CURRENT));
      parser->ast()->addOperation(forNode);
      parser->pushStack(forNode);
    }
#line 4272 "grammar.cpp"
    break;

  case 130: /* $@12: %empty  */
#line 1626 "grammar.y"
                 {
      AstNode* forNode = static_cast<AstNode*>(parser->popStack());
      AstNode* variableNode = static_cast<AstNode*>(parser->popStack());
      auto filterNode = parser->ast()->createNodeFilter((yyvsp[0].node));
      parser->ast()->addOperation(filterNode);
      
      auto scopes = parser->ast()->scopes();
      scopes->unstackCurrentVariable();

      auto offsetValue = parser->ast()->createNodeValueInt(0);
      auto limitValue = parser->ast()->createNodeValueInt(1);
      auto limitNode = parser->ast()->createNodeLimit(offsetValue, limitValue);
      parser->ast()->addOperation(limitNode);

      auto refNode = parser->ast()->createNodeReference(static_cast<Variable const*>(forNode->getMember(0)->getData()));
      auto returnNode = parser->ast()->createNodeReturn(refNode);
      parser->ast()->addOperation(returnNode);
      scopes->endNested();

      AstNode* subqueryNode = parser->ast()->endSubQuery();
      scopes->endCurrent();

      std::string const subqueryName = parser->ast()->variables()->nextName();
      auto subQuery = parser->ast()->createNodeLet(subqueryName.data(), subqueryName.size(), subqueryNode, false);
      parser->ast()->addOperation(subQuery);

      auto index = parser->ast()->createNodeValueInt(0);
      auto firstDoc = parser->ast()->createNodeLet(variableNode, parser->ast()->createNodeIndexedAccess(parser->ast()->createNodeReference(subqueryName), index));
      parser->ast()->addOperation(firstDoc);

      parser->pushStack(forNode);
    }
#line 4309 "grammar.cpp"
    break;

  case 131: /* upsert_statement: "UPSERT command" "FILTER declaration" $@11 expression $@12 "INSERT command" expression update_or_replace expression in_or_into_collection options  */
#line 1657 "grammar.y"
                                                                                     {
      AstNode* forNode = static_cast<AstNode*>(parser->popStack());
      forNode->changeMember(1, (yyvsp[-1].node));
      bool canReadOwnWrites = true;
      auto* forOptionsNode = parser->ast()->createNodeObject();
      auto* upsertOptionsNode = parser->ast()->createNodeObject();
      handleUpsertOptions((yyvsp[0].node), forNode, forOptionsNode, upsertOptionsNode, canReadOwnWrites);
      TRI_ASSERT(forNode->hasFlag(AstNodeFlagType::FLAG_READ_OWN_WRITES) || !canReadOwnWrites);

      if (!parser->configureWriteQuery((yyvsp[-1].node), (yyvsp[0].node))) {
        YYABORT;
      }

      auto node = parser->ast()->createNodeUpsert(static_cast<AstNodeType>((yyvsp[-3].intval)), parser->ast()->createNodeReference(Variable::NAME_OLD), (yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[-1].node), upsertOptionsNode, canReadOwnWrites);
      parser->ast()->addOperation(node);
    }
#line 4330 "grammar.cpp"
    break;

  case 132: /* $@13: %empty  */
#line 1673 "grammar.y"
                          {
      // reserve a variable named "$OLD", we might need it in the update expression
      // and in a later return thing
      AstNode* variableNode = parser->ast()->createNodeVariable(Variable::NAME_OLD, false);

      auto scopes = parser->ast()->scopes();

      scopes->start(arangodb::aql::AQL_SCOPE_SUBQUERY);
      parser->ast()->startSubQuery();

      scopes->start(arangodb::aql::AQL_SCOPE_FOR);
      std::string const variableName = parser->ast()->variables()->nextName();
      auto forNode = parser->ast()->createNodeForUpsert(variableName.c_str(), variableName.size(), parser->ast()->createNodeArray(), false);
      parser->ast()->addOperation(forNode);

      auto filterNode = parser->ast()->createNodeUpsertFilter(parser->ast()->createNodeReference(variableName), (yyvsp[0].node));
      parser->ast()->addOperation(filterNode);

      auto offsetValue = parser->ast()->createNodeValueInt(0);
      auto limitValue = parser->ast()->createNodeValueInt(1);
      auto limitNode = parser->ast()->createNodeLimit(offsetValue, limitValue);
      parser->ast()->addOperation(limitNode);

      auto refNode = parser->ast()->createNodeReference(variableName);
      auto returnNode = parser->ast()->createNodeReturn(refNode);
      parser->ast()->addOperation(returnNode);
      scopes->endNested();

      AstNode* subqueryNode = parser->ast()->endSubQuery();
      scopes->endCurrent();

      std::string const subqueryName = parser->ast()->variables()->nextName();
      auto subQuery = parser->ast()->createNodeLet(subqueryName.c_str(), subqueryName.size(), subqueryNode, false);
      parser->ast()->addOperation(subQuery);

      auto index = parser->ast()->createNodeValueInt(0);
      auto firstDoc = parser->ast()->createNodeLet(variableNode, parser->ast()->createNodeIndexedAccess(parser->ast()->createNodeReference(subqueryName), index));
      parser->ast()->addOperation(firstDoc);

      parser->pushStack(forNode);
    }
#line 4376 "grammar.cpp"
    break;

  case 133: /* upsert_statement: "UPSERT command" upsert_input $@13 "INSERT command" expression update_or_replace expression in_or_into_collection options  */
#line 1713 "grammar.y"
                                                                                     {
      AstNode* forNode = static_cast<AstNode*>(parser->popStack());
      forNode->changeMember(1, (yyvsp[-1].node));
      bool canReadOwnWrites = true;
      auto* forOptionsNode = parser->ast()->createNodeObject();
      auto* upsertOptionsNode = parser->ast()->createNodeObject();
      handleUpsertOptions((yyvsp[0].node), forNode, forOptionsNode, upsertOptionsNode, canReadOwnWrites);
      TRI_ASSERT(forNode->hasFlag(AstNodeFlagType::FLAG_READ_OWN_WRITES) || !canReadOwnWrites);

      if (!parser->configureWriteQuery((yyvsp[-1].node), (yyvsp[0].node))) {
        YYABORT;
      }

      auto node = parser->ast()->createNodeUpsert(static_cast<AstNodeType>((yyvsp[-3].intval)), parser->ast()->createNodeReference(Variable::NAME_OLD), (yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[-1].node), upsertOptionsNode, canReadOwnWrites);
      parser->ast()->addOperation(node);
    }
#line 4397 "grammar.cpp"
    break;

  case 134: /* quantifier: "all modifier"  */
#line 1732 "grammar.y"
          {
      (yyval.node) = parser->ast()->createNodeQuantifier(Quantifier::Type::kAll);
    }
#line 4405 "grammar.cpp"
    break;

  case 135: /* quantifier: "any modifier"  */
#line 1735 "grammar.y"
          {
      (yyval.node) = parser->ast()->createNodeQuantifier(Quantifier::Type::kAny);
    }
#line 4413 "grammar.cpp"
    break;

  case 136: /* quantifier: "none modifier"  */
#line 1738 "grammar.y"
           {
      (yyval.node) = parser->ast()->createNodeQuantifier(Quantifier::Type::kNone);
    }
#line 4421 "grammar.cpp"
    break;

  case 137: /* $@14: %empty  */
#line 1744 "grammar.y"
               {
      auto const scopeType = parser->ast()->scopes()->type();

      if (scopeType == AQL_SCOPE_MAIN ||
          scopeType == AQL_SCOPE_SUBQUERY) {
        parser->registerParseError(TRI_ERROR_QUERY_PARSE, "cannot use DISTINCT modifier on top-level query element", yylloc.first_line, yylloc.first_column);
      }
    }
#line 4434 "grammar.cpp"
    break;

  case 138: /* distinct_expression: "DISTINCT modifier" $@14 expression  */
#line 1751 "grammar.y"
                 {
      (yyval.node) = parser->ast()->createNodeDistinct((yyvsp[0].node));
    }
#line 4442 "grammar.cpp"
    break;

  case 139: /* distinct_expression: expression  */
#line 1754 "grammar.y"
               {
      (yyval.node) = (yyvsp[0].node);
    }
#line 4450 "grammar.cpp"
    break;

  case 140: /* expression: operator_unary  */
#line 1760 "grammar.y"
                   {
      (yyval.node) = (yyvsp[0].node);
    }
#line 4458 "grammar.cpp"
    break;

  case 141: /* expression: operator_binary  */
#line 1763 "grammar.y"
                    {
      (yyval.node) = (yyvsp[0].node);
    }
#line 4466 "grammar.cpp"
    break;

  case 142: /* expression: operator_ternary  */
#line 1766 "grammar.y"
                     {
      (yyval.node) = (yyvsp[0].node);
    }
#line 4474 "grammar.cpp"
    break;

  case 143: /* expression: value_literal  */
#line 1769 "grammar.y"
                  {
      (yyval.node) = (yyvsp[0].node);
    }
#line 4482 "grammar.cpp"
    break;

  case 144: /* expression: reference  */
#line 1772 "grammar.y"
              {
      (yyval.node) = (yyvsp[0].node);
    }
#line 4490 "grammar.cpp"
    break;

  case 145: /* expression: expression ".." expression  */
#line 1775 "grammar.y"
                                  {
      (yyval.node) = parser->ast()->createNodeRange((yyvsp[-2].node), (yyvsp[0].node));
    }
#line 4498 "grammar.cpp"
    break;

  case 146: /* function_name: "identifier"  */
#line 1781 "grammar.y"
             {
      (yyval.strval) = (yyvsp[0].strval);
    }
#line 4506 "grammar.cpp"
    break;

  case 147: /* function_name: function_name "::" "identifier"  */
#line 1784 "grammar.y"
                                   {
      std::string temp((yyvsp[-2].strval).value, (yyvsp[-2].strval).length);
      temp.append("::");
      temp.append((yyvsp[0].strval).value, (yyvsp[0].strval).length);
      auto p = parser->ast()->resources().registerString(temp);
      TRI_ASSERT(p != nullptr);

      (yyval.strval).value = p;
      (yyval.strval).length = temp.size();
    }
#line 4521 "grammar.cpp"
    break;

  case 148: /* $@15: %empty  */
#line 1797 "grammar.y"
                         {
      auto args = parser->ast()->createNodeArray();
      parser->pushStack(args);
    }
#line 4530 "grammar.cpp"
    break;

  case 149: /* function_call: function_name "(" $@15 optional_function_call_arguments ")"  */
#line 1800 "grammar.y"
                                                              {
      auto args = static_cast<AstNode const*>(parser->popStack());
      (yyval.node) = parser->ast()->createNodeFunctionCall(/*function name*/ {(yyvsp[-4].strval).value, (yyvsp[-4].strval).length}, args, false);
    }
#line 4539 "grammar.cpp"
    break;

  case 150: /* $@16: %empty  */
#line 1804 "grammar.y"
                  {
      auto args = parser->ast()->createNodeArray();
      parser->pushStack(args);
    }
#line 4548 "grammar.cpp"
    break;

  case 151: /* function_call: "like operator" "(" $@16 optional_function_call_arguments ")"  */
#line 1807 "grammar.y"
                                                              {
      auto args = static_cast<AstNode const*>(parser->popStack());
      (yyval.node) = parser->ast()->createNodeFunctionCall("LIKE", args, false);
    }
#line 4557 "grammar.cpp"
    break;

  case 152: /* operator_unary: "+ operator" expression  */
#line 1814 "grammar.y"
                                  {
      (yyval.node) = parser->ast()->optimizeUnaryOperatorArithmetic(parser->ast()->createNodeUnaryOperator(NODE_TYPE_OPERATOR_UNARY_PLUS, (yyvsp[0].node)));
    }
#line 4565 "grammar.cpp"
    break;

  case 153: /* operator_unary: "- operator" expression  */
#line 1817 "grammar.y"
                                    {
      (yyval.node) = parser->ast()->optimizeUnaryOperatorArithmetic(parser->ast()->createNodeUnaryOperator(NODE_TYPE_OPERATOR_UNARY_MINUS, (yyvsp[0].node)));
    }
#line 4573 "grammar.cpp"
    break;

  case 154: /* operator_unary: "not operator" expression  */
#line 1820 "grammar.y"
                                     {
      (yyval.node) = parser->ast()->createNodeUnaryOperator(NODE_TYPE_OPERATOR_UNARY_NOT, (yyvsp[0].node));
    }
#line 4581 "grammar.cpp"
    break;

  case 155: /* $@17: %empty  */
#line 1826 "grammar.y"
                    {
      parser->lazyConditions().push((yyvsp[-1].node), /*negated*/ true);
    }
#line 4589 "grammar.cpp"
    break;

  case 156: /* operator_binary: expression "or operator" $@17 expression  */
#line 1828 "grammar.y"
                 {
      LazyCondition previous = parser->lazyConditions().pop();
      (yyval.node) = parser->ast()->createNodeBinaryOperator(NODE_TYPE_OPERATOR_BINARY_OR, previous.condition, (yyvsp[0].node));
    }
#line 4598 "grammar.cpp"
    break;

  case 157: /* $@18: %empty  */
#line 1832 "grammar.y"
                     {
      parser->lazyConditions().push((yyvsp[-1].node), /*negated*/ false);
    }
#line 4606 "grammar.cpp"
    break;

  case 158: /* operator_binary: expression "and operator" $@18 expression  */
#line 1834 "grammar.y"
                 {
      LazyCondition previous = parser->lazyConditions().pop();
      (yyval.node) = parser->ast()->createNodeBinaryOperator(NODE_TYPE_OPERATOR_BINARY_AND, previous.condition, (yyvsp[0].node));
    }
#line 4615 "grammar.cpp"
    break;

  case 159: /* operator_binary: expression "+ operator" expression  */
#line 1838 "grammar.y"
                                 {
      (yyval.node) = parser->ast()->createNodeBinaryOperator(NODE_TYPE_OPERATOR_BINARY_PLUS, (yyvsp[-2].node), (yyvsp[0].node));
    }
#line 4623 "grammar.cpp"
    break;

  case 160: /* operator_binary: expression "- operator" expression  */
#line 1841 "grammar.y"
                                  {
      (yyval.node) = parser->ast()->createNodeBinaryOperator(NODE_TYPE_OPERATOR_BINARY_MINUS, (yyvsp[-2].node), (yyvsp[0].node));
    }
#line 4631 "grammar.cpp"
    break;

  case 161: /* operator_binary: expression "* operator" expression  */
#line 1844 "grammar.y"
                                  {
      (yyval.node) = parser->ast()->createNodeBinaryOperator(NODE_TYPE_OPERATOR_BINARY_TIMES, (yyvsp[-2].node), (yyvsp[0].node));
    }
#line 4639 "grammar.cpp"
    break;

  case 162: /* operator_binary: expression "/ operator" expression  */
#line 1847 "grammar.y"
                                {
      (yyval.node) = parser->ast()->createNodeBinaryOperator(NODE_TYPE_OPERATOR_BINARY_DIV, (yyvsp[-2].node), (yyvsp[0].node));
    }
#line 4647 "grammar.cpp"
    break;

  case 163: /* operator_binary: expression "% operator" expression  */
#line 1850 "grammar.y"
                                {
      (yyval.node) = parser->ast()->createNodeBinaryOperator(NODE_TYPE_OPERATOR_BINARY_MOD, (yyvsp[-2].node), (yyvsp[0].node));
    }
#line 4655 "grammar.cpp"
    break;

  case 164: /* operator_binary: expression "== operator" expression  */
#line 1853 "grammar.y"
                               {
      (yyval.node) = parser->ast()->createNodeBinaryOperator(NODE_TYPE_OPERATOR_BINARY_EQ, (yyvsp[-2].node), (yyvsp[0].node));
    }
#line 4663 "grammar.cpp"
    break;

  case 165: /* operator_binary: expression "!= operator" expression  */
#line 1856 "grammar.y"
                               {
      (yyval.node) = parser->ast()->createNodeBinaryOperator(NODE_TYPE_OPERATOR_BINARY_NE, (yyvsp[-2].node), (yyvsp[0].node));
    }
#line 4671 "grammar.cpp"
    break;

  case 166: /* operator_binary: expression "< operator" expression  */
#line 1859 "grammar.y"
                               {
      (yyval.node) = parser->ast()->createNodeBinaryOperator(NODE_TYPE_OPERATOR_BINARY_LT, (yyvsp[-2].node), (yyvsp[0].node));
    }
#line 4679 "grammar.cpp"
    break;

  case 167: /* operator_binary: expression "> operator" expression  */
#line 1862 "grammar.y"
                               {
      (yyval.node) = parser->ast()->createNodeBinaryOperator(NODE_TYPE_OPERATOR_BINARY_GT, (yyvsp[-2].node), (yyvsp[0].node));
    }
#line 4687 "grammar.cpp"
    break;

  case 168: /* operator_binary: expression "<= operator" expression  */
#line 1865 "grammar.y"
                               {
      (yyval.node) = parser->ast()->createNodeBinaryOperator(NODE_TYPE_OPERATOR_BINARY_LE, (yyvsp[-2].node), (yyvsp[0].node));
    }
#line 4695 "grammar.cpp"
    break;

  case 169: /* operator_binary: expression ">= operator" expression  */
#line 1868 "grammar.y"
                               {
      (yyval.node) = parser->ast()->createNodeBinaryOperator(NODE_TYPE_OPERATOR_BINARY_GE, (yyvsp[-2].node), (yyvsp[0].node));
    }
#line 4703 "grammar.cpp"
    break;

  case 170: /* operator_binary: expression "IN keyword" expression  */
#line 1871 "grammar.y"
                               {
      (yyval.node) = parser->ast()->createNodeBinaryOperator(NODE_TYPE_OPERATOR_BINARY_IN, (yyvsp[-2].node), (yyvsp[0].node));
    }
#line 4711 "grammar.cpp"
    break;

  case 171: /* operator_binary: expression "not in operator" expression  */
#line 1874 "grammar.y"
                                   {
      (yyval.node) = parser->ast()->createNodeBinaryOperator(NODE_TYPE_OPERATOR_BINARY_NIN, (yyvsp[-2].node), (yyvsp[0].node));
    }
#line 4719 "grammar.cpp"
    break;

  case 172: /* operator_binary: expression "not operator" "like operator" expression  */
#line 1877 "grammar.y"
                                       {
      AstNode* arguments = parser->ast()->createNodeArray(2);
      arguments->addMember((yyvsp[-3].node));
      arguments->addMember((yyvsp[0].node));
      AstNode* expression = parser->ast()->createNodeFunctionCall("LIKE", arguments, false);
      (yyval.node) = parser->ast()->createNodeUnaryOperator(NODE_TYPE_OPERATOR_UNARY_NOT, expression);
    }
#line 4731 "grammar.cpp"
    break;

  case 173: /* operator_binary: expression "not operator" "~= operator" expression  */
#line 1884 "grammar.y"
                                              {
      AstNode* arguments = parser->ast()->createNodeArray(2);
      arguments->addMember((yyvsp[-3].node));
      arguments->addMember((yyvsp[0].node));
      AstNode* expression = parser->ast()->createNodeFunctionCall("REGEX_TEST", arguments, false);
      (yyval.node) = parser->ast()->createNodeUnaryOperator(NODE_TYPE_OPERATOR_UNARY_NOT, expression);
    }
#line 4743 "grammar.cpp"
    break;

  case 174: /* operator_binary: expression "not operator" "~! operator" expression  */
#line 1891 "grammar.y"
                                                  {
      AstNode* arguments = parser->ast()->createNodeArray(2);
      arguments->addMember((yyvsp[-3].node));
      arguments->addMember((yyvsp[0].node));
      (yyval.node) = parser->ast()->createNodeFunctionCall("REGEX_TEST", arguments, false);
    }
#line 4754 "grammar.cpp"
    break;

  case 175: /* operator_binary: expression "like operator" expression  */
#line 1897 "grammar.y"
                                 {
      AstNode* arguments = parser->ast()->createNodeArray(2);
      arguments->addMember((yyvsp[-2].node));
      arguments->addMember((yyvsp[0].node));
      (yyval.node) = parser->ast()->createNodeFunctionCall("LIKE", arguments, false);
    }
#line 4765 "grammar.cpp"
    break;

  case 176: /* operator_binary: expression "~= operator" expression  */
#line 1903 "grammar.y"
                                        {
      AstNode* arguments = parser->ast()->createNodeArray(2);
      arguments->addMember((yyvsp[-2].node));
      arguments->addMember((yyvsp[0].node));
      (yyval.node) = parser->ast()->createNodeFunctionCall("REGEX_TEST", arguments, false);
    }
#line 4776 "grammar.cpp"
    break;

  case 177: /* operator_binary: expression "~! operator" expression  */
#line 1909 "grammar.y"
                                            {
      AstNode* arguments = parser->ast()->createNodeArray(2);
      arguments->addMember((yyvsp[-2].node));
      arguments->addMember((yyvsp[0].node));
      AstNode* node = parser->ast()->createNodeFunctionCall("REGEX_TEST", arguments, false);
      (yyval.node) = parser->ast()->createNodeUnaryOperator(NODE_TYPE_OPERATOR_UNARY_NOT, node);
    }
#line 4788 "grammar.cpp"
    break;

  case 178: /* operator_binary: expression quantifier "== operator" expression  */
#line 1916 "grammar.y"
                                          {
      (yyval.node) = parser->ast()->createNodeBinaryArrayOperator(NODE_TYPE_OPERATOR_BINARY_ARRAY_EQ, (yyvsp[-3].node), (yyvsp[0].node), (yyvsp[-2].node));
    }
#line 4796 "grammar.cpp"
    break;

  case 179: /* operator_binary: expression quantifier "!= operator" expression  */
#line 1919 "grammar.y"
                                          {
      (yyval.node) = parser->ast()->createNodeBinaryArrayOperator(NODE_TYPE_OPERATOR_BINARY_ARRAY_NE, (yyvsp[-3].node), (yyvsp[0].node), (yyvsp[-2].node));
    }
#line 4804 "grammar.cpp"
    break;

  case 180: /* operator_binary: expression quantifier "< operator" expression  */
#line 1922 "grammar.y"
                                          {
      (yyval.node) = parser->ast()->createNodeBinaryArrayOperator(NODE_TYPE_OPERATOR_BINARY_ARRAY_LT, (yyvsp[-3].node), (yyvsp[0].node), (yyvsp[-2].node));
    }
#line 4812 "grammar.cpp"
    break;

  case 181: /* operator_binary: expression quantifier "> operator" expression  */
#line 1925 "grammar.y"
                                          {
      (yyval.node) = parser->ast()->createNodeBinaryArrayOperator(NODE_TYPE_OPERATOR_BINARY_ARRAY_GT, (yyvsp[-3].node), (yyvsp[0].node), (yyvsp[-2].node));
    }
#line 4820 "grammar.cpp"
    break;

  case 182: /* operator_binary: expression quantifier "<= operator" expression  */
#line 1928 "grammar.y"
                                          {
      (yyval.node) = parser->ast()->createNodeBinaryArrayOperator(NODE_TYPE_OPERATOR_BINARY_ARRAY_LE, (yyvsp[-3].node), (yyvsp[0].node), (yyvsp[-2].node));
    }
#line 4828 "grammar.cpp"
    break;

  case 183: /* operator_binary: expression quantifier ">= operator" expression  */
#line 1931 "grammar.y"
                                          {
      (yyval.node) = parser->ast()->createNodeBinaryArrayOperator(NODE_TYPE_OPERATOR_BINARY_ARRAY_GE, (yyvsp[-3].node), (yyvsp[0].node), (yyvsp[-2].node));
    }
#line 4836 "grammar.cpp"
    break;

  case 184: /* operator_binary: expression quantifier "IN keyword" expression  */
#line 1934 "grammar.y"
                                          {
      (yyval.node) = parser->ast()->createNodeBinaryArrayOperator(NODE_TYPE_OPERATOR_BINARY_ARRAY_IN, (yyvsp[-3].node), (yyvsp[0].node), (yyvsp[-2].node));
    }
#line 4844 "grammar.cpp"
    break;

  case 185: /* operator_binary: expression quantifier "not in operator" expression  */
#line 1937 "grammar.y"
                                              {
      (yyval.node) = parser->ast()->createNodeBinaryArrayOperator(NODE_TYPE_OPERATOR_BINARY_ARRAY_NIN, (yyvsp[-3].node), (yyvsp[0].node), (yyvsp[-2].node));
    }
#line 4852 "grammar.cpp"
    break;

  case 186: /* operator_binary: expression "at least modifier" "(" expression ")" "== operator" expression  */
#line 1940 "grammar.y"
                                                                    {
      AstNode* quantifier = parser->ast()->createNodeQuantifier(Quantifier::Type::kAtLeast, (yyvsp[-3].node));
      (yyval.node) = parser->ast()->createNodeBinaryArrayOperator(NODE_TYPE_OPERATOR_BINARY_ARRAY_EQ, (yyvsp[-6].node), (yyvsp[0].node), quantifier);
    }
#line 4861 "grammar.cpp"
    break;

  case 187: /* operator_binary: expression "at least modifier" "(" expression ")" "!= operator" expression  */
#line 1944 "grammar.y"
                                                                    {
      AstNode* quantifier = parser->ast()->createNodeQuantifier(Quantifier::Type::kAtLeast, (yyvsp[-3].node));
      (yyval.node) = parser->ast()->createNodeBinaryArrayOperator(NODE_TYPE_OPERATOR_BINARY_ARRAY_NE, (yyvsp[-6].node), (yyvsp[0].node), quantifier);
    }
#line 4870 "grammar.cpp"
    break;

  case 188: /* operator_binary: expression "at least modifier" "(" expression ")" "< operator" expression  */
#line 1948 "grammar.y"
                                                                    {
      AstNode* quantifier = parser->ast()->createNodeQuantifier(Quantifier::Type::kAtLeast, (yyvsp[-3].node));
      (yyval.node) = parser->ast()->createNodeBinaryArrayOperator(NODE_TYPE_OPERATOR_BINARY_ARRAY_LT, (yyvsp[-6].node), (yyvsp[0].node), quantifier);
    }
#line 4879 "grammar.cpp"
    break;

  case 189: /* operator_binary: expression "at least modifier" "(" expression ")" "> operator" expression  */
#line 1952 "grammar.y"
                                                                    {
      AstNode* quantifier = parser->ast()->createNodeQuantifier(Quantifier::Type::kAtLeast, (yyvsp[-3].node));
      (yyval.node) = parser->ast()->createNodeBinaryArrayOperator(NODE_TYPE_OPERATOR_BINARY_ARRAY_GT, (yyvsp[-6].node), (yyvsp[0].node), quantifier);
    }
#line 4888 "grammar.cpp"
    break;

  case 190: /* operator_binary: expression "at least modifier" "(" expression ")" "<= operator" expression  */
#line 1956 "grammar.y"
                                                                    {
      AstNode* quantifier = parser->ast()->createNodeQuantifier(Quantifier::Type::kAtLeast, (yyvsp[-3].node));
      (yyval.node) = parser->ast()->createNodeBinaryArrayOperator(NODE_TYPE_OPERATOR_BINARY_ARRAY_LE, (yyvsp[-6].node), (yyvsp[0].node), quantifier);
    }
#line 4897 "grammar.cpp"
    break;

  case 191: /* operator_binary: expression "at least modifier" "(" expression ")" ">= operator" expression  */
#line 1960 "grammar.y"
                                                                    {
      AstNode* quantifier = parser->ast()->createNodeQuantifier(Quantifier::Type::kAtLeast, (yyvsp[-3].node));
      (yyval.node) = parser->ast()->createNodeBinaryArrayOperator(NODE_TYPE_OPERATOR_BINARY_ARRAY_GE, (yyvsp[-6].node), (yyvsp[0].node), quantifier);
    }
#line 4906 "grammar.cpp"
    break;

  case 192: /* operator_binary: expression "at least modifier" "(" expression ")" "IN keyword" expression  */
#line 1964 "grammar.y"
                                                                    {
      AstNode* quantifier = parser->ast()->createNodeQuantifier(Quantifier::Type::kAtLeast, (yyvsp[-3].node));
      (yyval.node) = parser->ast()->createNodeBinaryArrayOperator(NODE_TYPE_OPERATOR_BINARY_ARRAY_IN, (yyvsp[-6].node), (yyvsp[0].node), quantifier);
    }
#line 4915 "grammar.cpp"
    break;

  case 193: /* operator_binary: expression "at least modifier" "(" expression ")" "not in operator" expression  */
#line 1968 "grammar.y"
                                                                        {
      AstNode* quantifier = parser->ast()->createNodeQuantifier(Quantifier::Type::kAtLeast, (yyvsp[-3].node));
      (yyval.node) = parser->ast()->createNodeBinaryArrayOperator(NODE_TYPE_OPERATOR_BINARY_ARRAY_NIN, (yyvsp[-6].node), (yyvsp[0].node), quantifier);
    }
#line 4924 "grammar.cpp"
    break;

  case 194: /* $@19: %empty  */
#line 1975 "grammar.y"
                          {
      // ternary operator: 
      //   condition ? true part : false part
      //
      // check if we must inline the condition of the ternary operator.
      // this is the case if we must execute a single expression, e.g. in computed values.
      // for normal AQL queries we normally want the condition of the ternary operator
      // to be placed in its own LET node, so we can move it around.
        
      // if the condition is not inlined, the condition expression is assigned to a
      // temporary variable using a LET statement. insertConditional() also pushes
      // this LET variable onto the stack of conditions to honor in any subqueries that
      // are started inside the ternary operator.
      // for example, consider the following query:
      //   RETURN IS_ARRAY(values) ? (FOR v IN values ...) : (FOR i IN 1..10 ...)
      // if the condition is not forced to be inlined, the generated AST for the query
      // will look like this:
      //   LET tmp1 = IS_ARRAY(values)
      //   LET tmp2 = (
      //     FILTER tmp1
      //     FOR v IN values
      //       ...
      //   )
      //   LET tmp3 = (
      //     FILTER !tmp1
      //     FOR i IN 1..10
      //       ...
      //   )
      //   RETURN tmp1 ? tmp2 : tmp3
      // this ensures that we execute the ternary's condition expression only once.
      // this is important because the expression may be expensive or even have side
      // effects.
      // additionally, we only execute the true part of the ternary operator if the
      // condition is truthy, and the false part of the ternary operator only if the
      // condition is falsy.
      parser->lazyConditions().push((yyvsp[-1].node), /*negated*/ false);
    }
#line 4966 "grammar.cpp"
    break;

  case 195: /* $@20: %empty  */
#line 2011 "grammar.y"
                         {
      LazyCondition previous = parser->lazyConditions().pop();
      // negate the condition and push the negated version onto the stack
      parser->lazyConditions().push(previous.condition, /*negated*/ true);
    }
#line 4976 "grammar.cpp"
    break;

  case 196: /* operator_ternary: expression "?" $@19 expression ":" $@20 expression  */
#line 2015 "grammar.y"
                 {
      LazyCondition previous = parser->lazyConditions().pop();
      (yyval.node) = parser->ast()->createNodeTernaryOperator(previous.condition, (yyvsp[-3].node), (yyvsp[0].node));
    }
#line 4985 "grammar.cpp"
    break;

  case 197: /* $@21: %empty  */
#line 2019 "grammar.y"
                          {
      // shortcut ternary operator: 
      //   condition ? : false part
      // 
      // if the condition is not inlined, the condition expression is assigned to a
      // temporary variable using a LET statement. insertConditional() also pushes
      // this LET variable onto the stack of conditions to honor in any subqueries that
      // are started inside the ternary operator.
      // for example, consider the following query:
      //   RETURN !IS_ARRAY(values) ?: (FOR v IN values ...) 
      // if the condition is not forced to be inlined, the generated AST for the query
      // will look like this:
      //   LET tmp1 = !IS_ARRAY(values)
      //   LET tmp2 = (
      //     FILTER !tmp1
      //     FOR v IN values
      //       ...
      //   )
      //   RETURN tmp1 ? tmp1 : tmp2
      // this ensures that we execute the ternary's condition expression only once.
      // this is important because the expression may be expensive or even have side
      // effects.
      // additionally, we only execute the true part of the ternary operator if the
      // condition is truthy, and the false part of the ternary operator only if the
      // condition is falsy.
      parser->lazyConditions().push((yyvsp[-1].node), /*negated*/ true);
    }
#line 5017 "grammar.cpp"
    break;

  case 198: /* operator_ternary: expression "?" $@21 ":" expression  */
#line 2045 "grammar.y"
                         {
      LazyCondition previous = parser->lazyConditions().pop();
      (yyval.node) = parser->ast()->createNodeTernaryOperator(previous.condition, (yyvsp[0].node));
    }
#line 5026 "grammar.cpp"
    break;

  case 199: /* optional_function_call_arguments: %empty  */
#line 2052 "grammar.y"
                {
    }
#line 5033 "grammar.cpp"
    break;

  case 200: /* optional_function_call_arguments: function_arguments_list  */
#line 2054 "grammar.y"
                            {
    }
#line 5040 "grammar.cpp"
    break;

  case 201: /* expression_or_query: expression  */
#line 2059 "grammar.y"
               {
      (yyval.node) = (yyvsp[0].node);
    }
#line 5048 "grammar.cpp"
    break;

  case 202: /* $@22: %empty  */
#line 2062 "grammar.y"
    {
      parser->lazyConditions().flushAssignments();

      parser->ast()->scopes()->start(arangodb::aql::AQL_SCOPE_SUBQUERY);
      parser->ast()->startSubQuery();

      parser->lazyConditions().flushFilters();
    }
#line 5061 "grammar.cpp"
    break;

  case 203: /* expression_or_query: $@22 query  */
#line 2069 "grammar.y"
            {
      AstNode* node = parser->ast()->endSubQuery();
      parser->ast()->scopes()->endCurrent();

      std::string const variableName = parser->ast()->variables()->nextName();
      auto subQuery = parser->ast()->createNodeLet(variableName.c_str(), variableName.size(), node, false);
      parser->ast()->addOperation(subQuery);

      (yyval.node) = parser->ast()->createNodeSubqueryReference(variableName, node);
    }
#line 5076 "grammar.cpp"
    break;

  case 204: /* function_arguments_list: expression_or_query  */
#line 2082 "grammar.y"
                        {
      parser->pushArrayElement((yyvsp[0].node));
    }
#line 5084 "grammar.cpp"
    break;

  case 205: /* function_arguments_list: function_arguments_list "," expression_or_query  */
#line 2085 "grammar.y"
                                                        {
      parser->pushArrayElement((yyvsp[0].node));
    }
#line 5092 "grammar.cpp"
    break;

  case 206: /* compound_value: array  */
#line 2091 "grammar.y"
          {
      (yyval.node) = (yyvsp[0].node);
    }
#line 5100 "grammar.cpp"
    break;

  case 207: /* compound_value: object  */
#line 2094 "grammar.y"
           {
      (yyval.node) = (yyvsp[0].node);
    }
#line 5108 "grammar.cpp"
    break;

  case 208: /* $@23: %empty  */
#line 2100 "grammar.y"
                 {
      auto node = parser->ast()->createNodeArray();
      parser->pushArray(node);
    }
#line 5117 "grammar.cpp"
    break;

  case 209: /* array: "[" $@23 optional_array_elements "]"  */
#line 2103 "grammar.y"
                                            {
      (yyval.node) = parser->popArray();
    }
#line 5125 "grammar.cpp"
    break;

  case 210: /* optional_array_elements: %empty  */
#line 2109 "grammar.y"
                {
    }
#line 5132 "grammar.cpp"
    break;

  case 211: /* optional_array_elements: array_elements_list  */
#line 2111 "grammar.y"
                        {
    }
#line 5139 "grammar.cpp"
    break;

  case 212: /* optional_array_elements: array_elements_list ","  */
#line 2113 "grammar.y"
                                {
    }
#line 5146 "grammar.cpp"
    break;

  case 213: /* array_elements_list: array_element  */
#line 2118 "grammar.y"
                  {
    }
#line 5153 "grammar.cpp"
    break;

  case 214: /* array_elements_list: array_elements_list "," array_element  */
#line 2120 "grammar.y"
                                              {
    }
#line 5160 "grammar.cpp"
    break;

  case 215: /* array_element: expression  */
#line 2125 "grammar.y"
               {
      parser->pushArrayElement((yyvsp[0].node));
    }
#line 5168 "grammar.cpp"
    break;

  case 216: /* for_options: %empty  */
#line 2131 "grammar.y"
                {
      (yyval.node) = nullptr;
    }
#line 5176 "grammar.cpp"
    break;

  case 217: /* for_options: "identifier" expression  */
#line 2134 "grammar.y"
                        {
      std::string_view operation((yyvsp[-1].strval).value, (yyvsp[-1].strval).length);
      TRI_ASSERT((yyvsp[0].node) != nullptr);
      // we always return an array with two values: SEARCH and OPTIONS
      // as only one of these values will be set here, the other value is NOP
      auto node = parser->ast()->createNodeArray(2);
      // only one extra qualifier. now we need to check if it is SEARCH or OPTIONS

      if (::caseInsensitiveEqual(operation, "SEARCH")) {
        // found SEARCH
        node->addMember((yyvsp[0].node));
        node->addMember(parser->ast()->createNodeNop());
      } else {
        // everything else must be OPTIONS
        if (!::caseInsensitiveEqual(operation, "OPTIONS")) {
          parser->registerParseError(TRI_ERROR_QUERY_PARSE, "unexpected qualifier '%s', expecting 'SEARCH' or 'OPTIONS'", operation, yylloc.first_line, yylloc.first_column);
        }
        ::validateOptions(parser, (yyvsp[0].node), yylloc.first_line, yylloc.first_column);

        node->addMember(parser->ast()->createNodeNop());
        node->addMember((yyvsp[0].node));
      }

      (yyval.node) = node;
    }
#line 5206 "grammar.cpp"
    break;

  case 218: /* for_options: "identifier" expression "identifier" expression  */
#line 2159 "grammar.y"
                                            {
      std::string_view operation((yyvsp[-3].strval).value, (yyvsp[-3].strval).length);
      TRI_ASSERT((yyvsp[-2].node) != nullptr);
      // two extra qualifiers. we expect them in the order: SEARCH, then OPTIONS

      if (!::caseInsensitiveEqual(operation, "SEARCH") ||
          !::caseInsensitiveEqual({(yyvsp[-1].strval).value, (yyvsp[-1].strval).length}, "OPTIONS")) {
        parser->registerParseError(TRI_ERROR_QUERY_PARSE, "unexpected qualifier '%s', expecting 'SEARCH' and 'OPTIONS'", operation, yylloc.first_line, yylloc.first_column);
      }
     
      ::validateOptions(parser, (yyvsp[0].node), yylloc.first_line, yylloc.first_column);

      auto node = parser->ast()->createNodeArray(2);
      node->addMember((yyvsp[-2].node));
      node->addMember((yyvsp[0].node));
      (yyval.node) = node;
    }
#line 5228 "grammar.cpp"
    break;

  case 219: /* options: %empty  */
#line 2179 "grammar.y"
                {
      (yyval.node) = nullptr;
    }
#line 5236 "grammar.cpp"
    break;

  case 220: /* options: "identifier" object  */
#line 2182 "grammar.y"
                    {
      std::string_view operation((yyvsp[-1].strval).value, (yyvsp[-1].strval).length);
      TRI_ASSERT((yyvsp[0].node) != nullptr);

      if (!::caseInsensitiveEqual(operation, "OPTIONS")) {
        parser->registerParseError(TRI_ERROR_QUERY_PARSE, "unexpected qualifier '%s', expecting 'OPTIONS'", operation, yylloc.first_line, yylloc.first_column);
      }
     
      ::validateOptions(parser, (yyvsp[0].node), yylloc.first_line, yylloc.first_column);

      (yyval.node) = (yyvsp[0].node);
    }
#line 5253 "grammar.cpp"
    break;

  case 221: /* $@24: %empty  */
#line 2197 "grammar.y"
                  {
      auto node = parser->ast()->createNodeObject();
      parser->pushStack(node);
    }
#line 5262 "grammar.cpp"
    break;

  case 222: /* object: "{" $@24 optional_object_elements "}"  */
#line 2200 "grammar.y"
                                              {
      (yyval.node) = static_cast<AstNode*>(parser->popStack());
    }
#line 5270 "grammar.cpp"
    break;

  case 223: /* optional_object_elements: %empty  */
#line 2206 "grammar.y"
                {
    }
#line 5277 "grammar.cpp"
    break;

  case 224: /* optional_object_elements: object_elements_list  */
#line 2208 "grammar.y"
                         {
    }
#line 5284 "grammar.cpp"
    break;

  case 225: /* optional_object_elements: object_elements_list ","  */
#line 2210 "grammar.y"
                                 {
    }
#line 5291 "grammar.cpp"
    break;

  case 226: /* object_elements_list: object_element  */
#line 2215 "grammar.y"
                   {
    }
#line 5298 "grammar.cpp"
    break;

  case 227: /* object_elements_list: object_elements_list "," object_element  */
#line 2217 "grammar.y"
                                                {
    }
#line 5305 "grammar.cpp"
    break;

  case 228: /* object_element: "identifier"  */
#line 2222 "grammar.y"
             {
      // attribute-name-only (comparable to JS enhanced object literals, e.g. { foo, bar })
      std::string_view name((yyvsp[0].strval).value, (yyvsp[0].strval).length);

      auto ast = parser->ast();
      auto variable = ast->scopes()->getVariable(name, true);

      if (variable == nullptr) {
        // variable does not exist
        parser->registerParseError(TRI_ERROR_QUERY_VARIABLE_NAME_UNKNOWN, "use of unknown variable '%s' in object literal", name, yylloc.first_line, yylloc.first_column);
      }

      // create a reference to the variable
      auto node = ast->createNodeReference(variable);
      parser->pushObjectElement((yyvsp[0].strval).value, (yyvsp[0].strval).length, node);
    }
#line 5326 "grammar.cpp"
    break;

  case 229: /* object_element: "inbound modifier" ":" expression  */
#line 2238 "grammar.y"
                                 {
      // attribute-name : attribute-value
      parser->pushObjectElement((yyvsp[-2].strval).value, (yyvsp[-2].strval).length, (yyvsp[0].node));
    }
#line 5335 "grammar.cpp"
    break;

  case 230: /* object_element: "outbound modifier" ":" expression  */
#line 2242 "grammar.y"
                                  {
      // attribute-name : attribute-value
      parser->pushObjectElement((yyvsp[-2].strval).value, (yyvsp[-2].strval).length, (yyvsp[0].node));
    }
#line 5344 "grammar.cpp"
    break;

  case 231: /* object_element: "any modifier" ":" expression  */
#line 2246 "grammar.y"
                             {
      // attribute-name : attribute-value
      parser->pushObjectElement((yyvsp[-2].strval).value, (yyvsp[-2].strval).length, (yyvsp[0].node));
    }
#line 5353 "grammar.cpp"
    break;

  case 232: /* object_element: "all modifier" ":" expression  */
#line 2250 "grammar.y"
                             {
      // attribute-name : attribute-value
      parser->pushObjectElement((yyvsp[-2].strval).value, (yyvsp[-2].strval).length, (yyvsp[0].node));
    }
#line 5362 "grammar.cpp"
    break;

  case 233: /* object_element: "none modifier" ":" expression  */
#line 2254 "grammar.y"
                              {
      // attribute-name : attribute-value
      parser->pushObjectElement((yyvsp[-2].strval).value, (yyvsp[-2].strval).length, (yyvsp[0].node));
    }
#line 5371 "grammar.cpp"
    break;

  case 234: /* object_element: "like operator" ":" expression  */
#line 2258 "grammar.y"
                              {
      // attribute-name : attribute-value
      parser->pushObjectElement((yyvsp[-2].strval).value, (yyvsp[-2].strval).length, (yyvsp[0].node));
    }
#line 5380 "grammar.cpp"
    break;

  case 235: /* object_element: "INTO keyword" ":" expression  */
#line 2262 "grammar.y"
                              {
      // attribute-name : attribute-value
      parser->pushObjectElement((yyvsp[-2].strval).value, (yyvsp[-2].strval).length, (yyvsp[0].node));
    }
#line 5389 "grammar.cpp"
    break;

  case 236: /* object_element: "WITH keyword" ":" expression  */
#line 2266 "grammar.y"
                              {
      // attribute-name : attribute-value
      parser->pushObjectElement((yyvsp[-2].strval).value, (yyvsp[-2].strval).length, (yyvsp[0].node));
    }
#line 5398 "grammar.cpp"
    break;

  case 237: /* object_element: "WINDOW declaration" ":" expression  */
#line 2270 "grammar.y"
                                {
      // attribute-name : attribute-value
      parser->pushObjectElement((yyvsp[-2].strval).value, (yyvsp[-2].strval).length, (yyvsp[0].node));
    }
#line 5407 "grammar.cpp"
    break;

  case 238: /* object_element: "LIMIT declaration" ":" expression  */
#line 2274 "grammar.y"
                               {
      // attribute-name : attribute-value
      parser->pushObjectElement((yyvsp[-2].strval).value, (yyvsp[-2].strval).length, (yyvsp[0].node));
    }
#line 5416 "grammar.cpp"
    break;

  case 239: /* object_element: object_element_name ":" expression  */
#line 2278 "grammar.y"
                                           {
      // attribute-name : attribute-value
      parser->pushObjectElement((yyvsp[-2].strval).value, (yyvsp[-2].strval).length, (yyvsp[0].node));
    }
#line 5425 "grammar.cpp"
    break;

  case 240: /* object_element: "bind parameter" ":" expression  */
#line 2282 "grammar.y"
                                   {
      // bind-parameter : attribute-value
      std::string_view name((yyvsp[-2].strval).value, (yyvsp[-2].strval).length);
      if ((yyvsp[-2].strval).length < 1 || (yyvsp[-2].strval).value[0] == '@') {
        parser->registerParseError(TRI_ERROR_QUERY_BIND_PARAMETER_TYPE, TRI_errno_string(TRI_ERROR_QUERY_BIND_PARAMETER_TYPE).data(), name, yylloc.first_line, yylloc.first_column);
      }

      auto param = parser->ast()->createNodeParameter(name);
      parser->pushObjectElement(param, (yyvsp[0].node));
    }
#line 5440 "grammar.cpp"
    break;

  case 241: /* object_element: "[" expression "]" ":" expression  */
#line 2292 "grammar.y"
                                                             {
      // [ attribute-name-expression ] : attribute-value
      parser->pushObjectElement((yyvsp[-3].node), (yyvsp[0].node));
    }
#line 5449 "grammar.cpp"
    break;

  case 242: /* array_filter_operator: "?"  */
#line 2299 "grammar.y"
               {
      (yyval.intval) = 1;
    }
#line 5457 "grammar.cpp"
    break;

  case 243: /* array_filter_operator: array_filter_operator "?"  */
#line 2302 "grammar.y"
                                     {
      (yyval.intval) = (yyvsp[-1].intval) + 1;
    }
#line 5465 "grammar.cpp"
    break;

  case 244: /* array_map_operator: "* operator"  */
#line 2308 "grammar.y"
            {
      (yyval.intval) = 1;
    }
#line 5473 "grammar.cpp"
    break;

  case 245: /* array_map_operator: array_map_operator "* operator"  */
#line 2311 "grammar.y"
                               {
      (yyval.intval) = (yyvsp[-1].intval) + 1;
    }
#line 5481 "grammar.cpp"
    break;

  case 246: /* optional_array_filter: %empty  */
#line 2317 "grammar.y"
                {
      (yyval.node) = nullptr;
    }
#line 5489 "grammar.cpp"
    break;

  case 247: /* optional_array_filter: "FILTER declaration" expression  */
#line 2320 "grammar.y"
                        {
      // FILTER filter-condition
      (yyval.node) = parser->ast()->createNodeArrayFilter(nullptr, (yyvsp[0].node));
    }
#line 5498 "grammar.cpp"
    break;

  case 248: /* optional_array_filter: quantifier "FILTER declaration" expression  */
#line 2324 "grammar.y"
                                   {
      // ALL|ANY|NONE|AT LEAST FILTER filter-condition
      (yyval.node) = parser->ast()->createNodeArrayFilter((yyvsp[-2].node), (yyvsp[0].node));
    }
#line 5507 "grammar.cpp"
    break;

  case 249: /* optional_array_filter: "at least modifier" "(" expression ")" "FILTER declaration" expression  */
#line 2328 "grammar.y"
                                                             {
      AstNode* quantifier = parser->ast()->createNodeQuantifier(Quantifier::Type::kAtLeast, (yyvsp[-3].node));
      (yyval.node) = parser->ast()->createNodeArrayFilter(quantifier, (yyvsp[0].node));
    }
#line 5516 "grammar.cpp"
    break;

  case 250: /* optional_array_filter: expression "FILTER declaration" expression  */
#line 2332 "grammar.y"
                                   {
      // 1    FILTER filter-condition
      // 2..5 FILTER filter-condition
      (yyval.node) = parser->ast()->createNodeArrayFilter((yyvsp[-2].node), (yyvsp[0].node));
    }
#line 5526 "grammar.cpp"
    break;

  case 251: /* optional_array_limit: %empty  */
#line 2340 "grammar.y"
                {
      (yyval.node) = nullptr;
    }
#line 5534 "grammar.cpp"
    break;

  case 252: /* optional_array_limit: "LIMIT declaration" expression  */
#line 2343 "grammar.y"
                       {
      (yyval.node) = parser->ast()->createNodeArrayLimit(nullptr, (yyvsp[0].node));
    }
#line 5542 "grammar.cpp"
    break;

  case 253: /* optional_array_limit: "LIMIT declaration" expression "," expression  */
#line 2346 "grammar.y"
                                          {
      (yyval.node) = parser->ast()->createNodeArrayLimit((yyvsp[-2].node), (yyvsp[0].node));
    }
#line 5550 "grammar.cpp"
    break;

  case 254: /* optional_array_return: %empty  */
#line 2352 "grammar.y"
                {
      (yyval.node) = nullptr;
    }
#line 5558 "grammar.cpp"
    break;

  case 255: /* optional_array_return: "RETURN declaration" expression  */
#line 2355 "grammar.y"
                        {
      (yyval.node) = (yyvsp[0].node);
    }
#line 5566 "grammar.cpp"
    break;

  case 256: /* graph_collection: "identifier"  */
#line 2361 "grammar.y"
             {
      (yyval.node) = parser->ast()->createNodeValueString((yyvsp[0].strval).value, (yyvsp[0].strval).length);
    }
#line 5574 "grammar.cpp"
    break;

  case 257: /* graph_collection: bind_parameter_datasource_expected  */
#line 2364 "grammar.y"
                                       {
      (yyval.node) = (yyvsp[0].node);
    }
#line 5582 "grammar.cpp"
    break;

  case 258: /* graph_collection: graph_direction "identifier"  */
#line 2367 "grammar.y"
                             {
      auto tmp = parser->ast()->createNodeValueString((yyvsp[0].strval).value, (yyvsp[0].strval).length);
      (yyval.node) = parser->ast()->createNodeCollectionDirection((yyvsp[-1].intval), tmp);
    }
#line 5591 "grammar.cpp"
    break;

  case 259: /* graph_collection: graph_direction bind_parameter  */
#line 2371 "grammar.y"
                                   {
      (yyval.node) = parser->ast()->createNodeCollectionDirection((yyvsp[-1].intval), (yyvsp[0].node));
    }
#line 5599 "grammar.cpp"
    break;

  case 260: /* graph_collection_list: graph_collection  */
#line 2377 "grammar.y"
                      {
       auto node = static_cast<AstNode*>(parser->peekStack());
       node->addMember((yyvsp[0].node));
     }
#line 5608 "grammar.cpp"
    break;

  case 261: /* graph_collection_list: graph_collection_list "," graph_collection  */
#line 2381 "grammar.y"
                                                    {
       auto node = static_cast<AstNode*>(parser->peekStack());
       node->addMember((yyvsp[0].node));
     }
#line 5617 "grammar.cpp"
    break;

  case 262: /* graph_subject: graph_collection  */
#line 2388 "grammar.y"
                     {
      auto node = parser->ast()->createNodeArray();
      node->addMember((yyvsp[0].node));
      auto const& resolver = parser->query().resolver();
      (yyval.node) = parser->ast()->createNodeCollectionList(node, resolver);
    }
#line 5628 "grammar.cpp"
    break;

  case 263: /* $@25: %empty  */
#line 2394 "grammar.y"
                             {
      auto node = parser->ast()->createNodeArray();
      parser->pushStack(node);
      node->addMember((yyvsp[-1].node));
    }
#line 5638 "grammar.cpp"
    break;

  case 264: /* graph_subject: graph_collection "," $@25 graph_collection_list  */
#line 2398 "grammar.y"
                            {
      auto node = static_cast<AstNode*>(parser->popStack());
      auto const& resolver = parser->query().resolver();
      (yyval.node) = parser->ast()->createNodeCollectionList(node, resolver);
    }
#line 5648 "grammar.cpp"
    break;

  case 265: /* graph_subject: "GRAPH keyword" bind_parameter  */
#line 2403 "grammar.y"
                           {
      // graph name
      (yyval.node) = (yyvsp[0].node);
    }
#line 5657 "grammar.cpp"
    break;

  case 266: /* graph_subject: "GRAPH keyword" "quoted string"  */
#line 2407 "grammar.y"
                            {
      // graph name
      (yyval.node) = parser->ast()->createNodeValueString((yyvsp[0].strval).value, (yyvsp[0].strval).length);
    }
#line 5666 "grammar.cpp"
    break;

  case 267: /* graph_subject: "GRAPH keyword" "identifier"  */
#line 2411 "grammar.y"
                     {
      // graph name
      (yyval.node) = parser->ast()->createNodeValueString((yyvsp[0].strval).value, (yyvsp[0].strval).length);
    }
#line 5675 "grammar.cpp"
    break;

  case 268: /* graph_direction: "outbound modifier"  */
#line 2420 "grammar.y"
               {
      (yyval.intval) = 2;
    }
#line 5683 "grammar.cpp"
    break;

  case 269: /* graph_direction: "inbound modifier"  */
#line 2423 "grammar.y"
              {
      (yyval.intval) = 1;
    }
#line 5691 "grammar.cpp"
    break;

  case 270: /* graph_direction: "any modifier"  */
#line 2426 "grammar.y"
          {
      (yyval.intval) = 0;
    }
#line 5699 "grammar.cpp"
    break;

  case 271: /* graph_direction_steps: graph_direction  */
#line 2432 "grammar.y"
                    {
      (yyval.node) = parser->ast()->createNodeDirection((yyvsp[0].intval), 1);
    }
#line 5707 "grammar.cpp"
    break;

  case 272: /* graph_direction_steps: expression graph_direction  */
#line 2435 "grammar.y"
                                                {
      (yyval.node) = parser->ast()->createNodeDirection((yyvsp[0].intval), (yyvsp[-1].node));
    }
#line 5715 "grammar.cpp"
    break;

  case 273: /* reference: "identifier"  */
#line 2441 "grammar.y"
             {
      // variable or collection or view
      auto ast = parser->ast();
      AstNode* node = nullptr;

      std::string_view variableName((yyvsp[0].strval).value, (yyvsp[0].strval).length);
      auto variable = ast->scopes()->getVariable(variableName, true);

      if (variable == nullptr) {
        // variable does not exist
        // now try special variables
        if (ast->scopes()->canUseCurrentVariable() && 
            (variableName == Variable::NAME_CURRENT || variableName == Variable::NAME_CURRENT.substr(1))) {
          variable = ast->scopes()->getCurrentVariable();
        }
      }

      if (variable != nullptr) {
        // variable alias exists, now use it
        node = ast->createNodeReference(variable);
      }

      if (node == nullptr) {
        // variable not found. so it must have been a collection or view
        auto const& resolver = parser->query().resolver();
        node = ast->createNodeDataSource(resolver, variableName, arangodb::AccessMode::Type::READ, true, false);
      }

      TRI_ASSERT(node != nullptr);

      (yyval.node) = node;
    }
#line 5752 "grammar.cpp"
    break;

  case 274: /* reference: compound_value  */
#line 2473 "grammar.y"
                   {
      (yyval.node) = (yyvsp[0].node);
    }
#line 5760 "grammar.cpp"
    break;

  case 275: /* reference: bind_parameter  */
#line 2476 "grammar.y"
                   {
      (yyval.node) = (yyvsp[0].node);
    }
#line 5768 "grammar.cpp"
    break;

  case 276: /* reference: function_call  */
#line 2479 "grammar.y"
                  {
      TRI_ASSERT((yyvsp[0].node) != nullptr);
      (yyval.node) = (yyvsp[0].node);
    }
#line 5777 "grammar.cpp"
    break;

  case 277: /* reference: "(" expression ")"  */
#line 2483 "grammar.y"
                              {
      if ((yyvsp[-1].node)->type == NODE_TYPE_EXPANSION) {
        // create a dummy passthru node that reduces and evaluates the expansion first
        // and the expansion on top of the stack won't be chained with any other expansions
        (yyval.node) = parser->ast()->createNodePassthru((yyvsp[-1].node));
      } else {
        (yyval.node) = (yyvsp[-1].node);
      }
    }
#line 5791 "grammar.cpp"
    break;

  case 278: /* $@26: %empty  */
#line 2492 "grammar.y"
           {
      parser->lazyConditions().flushAssignments();

      parser->ast()->scopes()->start(arangodb::aql::AQL_SCOPE_SUBQUERY);
      parser->ast()->startSubQuery();
      
      parser->lazyConditions().flushFilters();
    }
#line 5804 "grammar.cpp"
    break;

  case 279: /* reference: "(" $@26 query ")"  */
#line 2499 "grammar.y"
                    {
      AstNode* node = parser->ast()->endSubQuery();
      parser->ast()->scopes()->endCurrent();

      std::string const variableName = parser->ast()->variables()->nextName();
      auto subQuery = parser->ast()->createNodeLet(variableName.c_str(), variableName.size(), node, false);
      parser->ast()->addOperation(subQuery);

      (yyval.node) = parser->ast()->createNodeSubqueryReference(variableName, node);
    }
#line 5819 "grammar.cpp"
    break;

  case 280: /* reference: reference '.' "identifier"  */
#line 2509 "grammar.y"
                                           {
      std::string_view name((yyvsp[0].strval).value, (yyvsp[0].strval).length);
      // named variable access, e.g. variable.reference
      if ((yyvsp[-2].node)->type == NODE_TYPE_EXPANSION) {
        // if left operand is an expansion already...
        // dive into the expansion's right-hand child nodes for further expansion and
        // patch the bottom-most one
        auto current = const_cast<AstNode*>(parser->ast()->findExpansionSubNode((yyvsp[-2].node)));
        TRI_ASSERT(current->type == NODE_TYPE_EXPANSION);
        current->changeMember(1, parser->ast()->createNodeAttributeAccess(current->getMember(1), name));
        (yyval.node) = (yyvsp[-2].node);
      } else {
        (yyval.node) = parser->ast()->createNodeAttributeAccess((yyvsp[-2].node), name);
      }
    }
#line 5839 "grammar.cpp"
    break;

  case 281: /* reference: reference '.' bind_parameter  */
#line 2524 "grammar.y"
                                                 {
      // named variable access, e.g. variable.@reference
      if ((yyvsp[-2].node)->type == NODE_TYPE_EXPANSION) {
        // if left operand is an expansion already...
        // patch the existing expansion
        auto current = const_cast<AstNode*>(parser->ast()->findExpansionSubNode((yyvsp[-2].node)));
        TRI_ASSERT(current->type == NODE_TYPE_EXPANSION);
        current->changeMember(1, parser->ast()->createNodeBoundAttributeAccess(current->getMember(1), (yyvsp[0].node)));
        (yyval.node) = (yyvsp[-2].node);
      } else {
        (yyval.node) = parser->ast()->createNodeBoundAttributeAccess((yyvsp[-2].node), (yyvsp[0].node));
      }
    }
#line 5857 "grammar.cpp"
    break;

  case 282: /* reference: reference "[" expression "]"  */
#line 2537 "grammar.y"
                                                                  {
      // indexed variable access, e.g. variable[index]
      if ((yyvsp[-3].node)->type == NODE_TYPE_EXPANSION) {
        // if left operand is an expansion already...
        // patch the existing expansion
        auto current = const_cast<AstNode*>(parser->ast()->findExpansionSubNode((yyvsp[-3].node)));
        TRI_ASSERT(current->type == NODE_TYPE_EXPANSION);
        current->changeMember(1, parser->ast()->createNodeIndexedAccess(current->getMember(1), (yyvsp[-1].node)));
        (yyval.node) = (yyvsp[-3].node);
      } else {
        (yyval.node) = parser->ast()->createNodeIndexedAccess((yyvsp[-3].node), (yyvsp[-1].node));
      }
    }
#line 5875 "grammar.cpp"
    break;

  case 283: /* $@27: %empty  */
#line 2550 "grammar.y"
                                                 {
      // variable expansion, e.g. variable[?], with optional FILTER clause
      if ((yyvsp[0].intval) > 1 && (yyvsp[-2].node)->type == NODE_TYPE_EXPANSION) {
        // create a dummy passthru node that reduces and evaluates the expansion first
        // and the expansion on top of the stack won't be chained with any other expansions
        (yyvsp[-2].node) = parser->ast()->createNodePassthru((yyvsp[-2].node));
      }

      // create a temporary iterator variable
      std::string const nextName = parser->ast()->variables()->nextName() + "_";

      if ((yyvsp[-2].node)->type == NODE_TYPE_EXPANSION) {
        auto iterator = parser->ast()->createNodeIterator(nextName.c_str(), nextName.size(), (yyvsp[-2].node)->getMember(1));
        parser->pushStack(iterator);
      } else {
        auto iterator = parser->ast()->createNodeIterator(nextName.c_str(), nextName.size(), (yyvsp[-2].node));
        parser->pushStack(iterator);
      }

      auto scopes = parser->ast()->scopes();
      scopes->stackCurrentVariable(scopes->getVariable(nextName));

      // we are temporarily forcing all conditionals to be inlined, just for
      // evaluating the FILTER condition, which must remain a single
      // condition
      parser->lazyConditions().pushForceInline();
    }
#line 5907 "grammar.cpp"
    break;

  case 284: /* reference: reference "[" array_filter_operator $@27 optional_array_filter "]"  */
#line 2576 "grammar.y"
                                                          {
      parser->lazyConditions().popForceInline();

      auto scopes = parser->ast()->scopes();
      scopes->unstackCurrentVariable();

      auto iterator = static_cast<AstNode const*>(parser->popStack());
      auto variableNode = iterator->getMember(0);
      TRI_ASSERT(variableNode->type == NODE_TYPE_VARIABLE);
      auto variable = static_cast<Variable const*>(variableNode->getData());

      if ((yyvsp[-5].node)->type == NODE_TYPE_EXPANSION) {
        auto expand = parser->ast()->createNodeBooleanExpansion((yyvsp[-3].intval), iterator, parser->ast()->createNodeReference(variable->name), (yyvsp[-1].node));
        (yyvsp[-5].node)->changeMember(1, expand);
        (yyval.node) = (yyvsp[-5].node);
      } else {
        (yyval.node) = parser->ast()->createNodeBooleanExpansion((yyvsp[-3].intval), iterator, parser->ast()->createNodeReference(variable->name), (yyvsp[-1].node));
      }
    }
#line 5931 "grammar.cpp"
    break;

  case 285: /* $@28: %empty  */
#line 2595 "grammar.y"
                                              {
      // variable expansion, e.g. variable[*], with optional FILTER, LIMIT and RETURN clauses
      if ((yyvsp[0].intval) > 1 && (yyvsp[-2].node)->type == NODE_TYPE_EXPANSION) {
        // create a dummy passthru node that reduces and evaluates the expansion first
        // and the expansion on top of the stack won't be chained with any other expansions
        (yyvsp[-2].node) = parser->ast()->createNodePassthru((yyvsp[-2].node));
      }

      // create a temporary iterator variable
      std::string const nextName = parser->ast()->variables()->nextName() + "_";

      if ((yyvsp[-2].node)->type == NODE_TYPE_EXPANSION) {
        auto iterator = parser->ast()->createNodeIterator(nextName.c_str(), nextName.size(), (yyvsp[-2].node)->getMember(1));
        parser->pushStack(iterator);
      } else {
        auto iterator = parser->ast()->createNodeIterator(nextName.c_str(), nextName.size(), (yyvsp[-2].node));
        parser->pushStack(iterator);
      }

      auto scopes = parser->ast()->scopes();
      scopes->stackCurrentVariable(scopes->getVariable(nextName));
      
      // we are temporarily forcing all conditionals to be inlined, just for
      // evaluating the FILTER condition, which must remain a single
      // condition
      parser->lazyConditions().pushForceInline();
    }
#line 5963 "grammar.cpp"
    break;

  case 286: /* reference: reference "[" array_map_operator $@28 optional_array_filter optional_array_limit optional_array_return "]"  */
#line 2621 "grammar.y"
                                                                                                     {
      parser->lazyConditions().popForceInline();

      auto scopes = parser->ast()->scopes();
      scopes->unstackCurrentVariable();

      auto iterator = static_cast<AstNode const*>(parser->popStack());
      auto variableNode = iterator->getMember(0);
      TRI_ASSERT(variableNode->type == NODE_TYPE_VARIABLE);
      auto variable = static_cast<Variable const*>(variableNode->getData());

      if ((yyvsp[-3].node) != nullptr) {
        // array filter members are [quantifier, filter]
        // quantifier is optional.
        TRI_ASSERT((yyvsp[-3].node)->type == NODE_TYPE_ARRAY_FILTER);
        TRI_ASSERT((yyvsp[-3].node)->numMembers() == 2);
        if ((yyvsp[-3].node)->getMember(0) != nullptr && (yyvsp[-3].node)->getMember(0)->type != NODE_TYPE_NOP) {
          parser->registerParseError(TRI_ERROR_QUERY_PARSE, "unexpected quantifier value found for array expansion operation.", yylloc.first_line, yylloc.first_column);
        }
      }

      if ((yyvsp[-7].node)->type == NODE_TYPE_EXPANSION) {
        auto expand = parser->ast()->createNodeExpansion((yyvsp[-5].intval), iterator, parser->ast()->createNodeReference(variable->name), (yyvsp[-3].node), (yyvsp[-2].node), (yyvsp[-1].node));
        (yyvsp[-7].node)->changeMember(1, expand);
        (yyval.node) = (yyvsp[-7].node);
      } else {
        (yyval.node) = parser->ast()->createNodeExpansion((yyvsp[-5].intval), iterator, parser->ast()->createNodeReference(variable->name), (yyvsp[-3].node), (yyvsp[-2].node), (yyvsp[-1].node));
      }
    }
#line 5997 "grammar.cpp"
    break;

  case 287: /* simple_value: value_literal  */
#line 2653 "grammar.y"
                  {
      (yyval.node) = (yyvsp[0].node);
    }
#line 6005 "grammar.cpp"
    break;

  case 288: /* simple_value: bind_parameter  */
#line 2656 "grammar.y"
                   {
      (yyval.node) = (yyvsp[0].node);
    }
#line 6013 "grammar.cpp"
    break;

  case 289: /* numeric_value: "integer number"  */
#line 2662 "grammar.y"
              {
      TRI_ASSERT((yyvsp[0].node) != nullptr);
      (yyval.node) = (yyvsp[0].node);
    }
#line 6022 "grammar.cpp"
    break;

  case 290: /* numeric_value: "number"  */
#line 2666 "grammar.y"
             {
      TRI_ASSERT((yyvsp[0].node) != nullptr);
      (yyval.node) = (yyvsp[0].node);
    }
#line 6031 "grammar.cpp"
    break;

  case 291: /* value_literal: "quoted string"  */
#line 2673 "grammar.y"
                    {
      (yyval.node) = parser->ast()->createNodeValueString((yyvsp[0].strval).value, (yyvsp[0].strval).length);
    }
#line 6039 "grammar.cpp"
    break;

  case 292: /* value_literal: numeric_value  */
#line 2676 "grammar.y"
                  {
      (yyval.node) = (yyvsp[0].node);
    }
#line 6047 "grammar.cpp"
    break;

  case 293: /* value_literal: "null"  */
#line 2679 "grammar.y"
           {
      (yyval.node) = parser->ast()->createNodeValueNull();
    }
#line 6055 "grammar.cpp"
    break;

  case 294: /* value_literal: "true"  */
#line 2682 "grammar.y"
           {
      (yyval.node) = parser->ast()->createNodeValueBool(true);
    }
#line 6063 "grammar.cpp"
    break;

  case 295: /* value_literal: "false"  */
#line 2685 "grammar.y"
            {
      (yyval.node) = parser->ast()->createNodeValueBool(false);
    }
#line 6071 "grammar.cpp"
    break;

  case 296: /* in_or_into_collection_name: "identifier"  */
#line 2691 "grammar.y"
             {
      std::string_view name((yyvsp[0].strval).value, (yyvsp[0].strval).length);
      auto const& resolver = parser->query().resolver();
      (yyval.node) = parser->ast()->createNodeCollection(resolver, name, arangodb::AccessMode::Type::WRITE);
    }
#line 6081 "grammar.cpp"
    break;

  case 297: /* in_or_into_collection_name: "quoted string"  */
#line 2696 "grammar.y"
                    {
      std::string_view name((yyvsp[0].strval).value, (yyvsp[0].strval).length);
      auto const& resolver = parser->query().resolver();
      (yyval.node) = parser->ast()->createNodeCollection(resolver, name, arangodb::AccessMode::Type::WRITE);
    }
#line 6091 "grammar.cpp"
    break;

  case 298: /* in_or_into_collection_name: "bind data source parameter"  */
#line 2701 "grammar.y"
                            {
      std::string_view name((yyvsp[0].strval).value, (yyvsp[0].strval).length);
      if (name.size() < 2 || name.front() != '@') {
        parser->registerParseError(TRI_ERROR_QUERY_BIND_PARAMETER_TYPE, TRI_errno_string(TRI_ERROR_QUERY_BIND_PARAMETER_TYPE).data(), name, yylloc.first_line, yylloc.first_column);
      }

      (yyval.node) = parser->ast()->createNodeParameterDatasource(name);
    }
#line 6104 "grammar.cpp"
    break;

  case 299: /* bind_parameter: "bind data source parameter"  */
#line 2712 "grammar.y"
                            {
      std::string_view name((yyvsp[0].strval).value, (yyvsp[0].strval).length);
      if (name.size() < 2 || name.front() != '@') {
        parser->registerParseError(TRI_ERROR_QUERY_BIND_PARAMETER_TYPE, TRI_errno_string(TRI_ERROR_QUERY_BIND_PARAMETER_TYPE).data(), name, yylloc.first_line, yylloc.first_column);
      }

      (yyval.node) = parser->ast()->createNodeParameterDatasource(name);
    }
#line 6117 "grammar.cpp"
    break;

  case 300: /* bind_parameter: "bind parameter"  */
#line 2720 "grammar.y"
                {
      std::string_view name((yyvsp[0].strval).value, (yyvsp[0].strval).length);
      (yyval.node) = parser->ast()->createNodeParameter(name);
    }
#line 6126 "grammar.cpp"
    break;

  case 301: /* bind_parameter_datasource_expected: "bind data source parameter"  */
#line 2727 "grammar.y"
                            {
      std::string_view name((yyvsp[0].strval).value, (yyvsp[0].strval).length);
      if (name.size() < 2 || name.front() != '@') {
        parser->registerParseError(TRI_ERROR_QUERY_BIND_PARAMETER_TYPE, TRI_errno_string(TRI_ERROR_QUERY_BIND_PARAMETER_TYPE).data(), (yyvsp[0].strval).value, yylloc.first_line, yylloc.first_column);
      }

      (yyval.node) = parser->ast()->createNodeParameterDatasource(name);
    }
#line 6139 "grammar.cpp"
    break;

  case 302: /* bind_parameter_datasource_expected: "bind parameter"  */
#line 2735 "grammar.y"
                {
      // convert normal value bind parameter into datasource bind parameter
      std::string_view name((yyvsp[0].strval).value, (yyvsp[0].strval).length);
      (yyval.node) = parser->ast()->createNodeParameterDatasource(name);
    }
#line 6149 "grammar.cpp"
    break;

  case 303: /* object_element_name: "identifier"  */
#line 2743 "grammar.y"
             {
      (yyval.strval) = (yyvsp[0].strval);
    }
#line 6157 "grammar.cpp"
    break;

  case 304: /* object_element_name: "quoted string"  */
#line 2746 "grammar.y"
                    {
      (yyval.strval) = (yyvsp[0].strval);
    }
#line 6165 "grammar.cpp"
    break;

  case 305: /* variable_name: "identifier"  */
#line 2751 "grammar.y"
             {
      (yyval.strval) = (yyvsp[0].strval);
    }
#line 6173 "grammar.cpp"
    break;


#line 6177 "grammar.cpp"

      default: break;
    }
  /* User semantic actions sometimes alter yychar, and that requires
     that yytoken be updated with the new translation.  We take the
     approach of translating immediately before every use of yytoken.
     One alternative is translating here after every semantic action,
     but that translation would be missed if the semantic action invokes
     YYABORT, YYACCEPT, or YYERROR immediately after altering yychar or
     if it invokes YYBACKUP.  In the case of YYABORT or YYACCEPT, an
     incorrect destructor might then be invoked immediately.  In the
     case of YYERROR or YYBACKUP, subsequent parser actions might lead
     to an incorrect destructor call or verbose syntax error message
     before the lookahead is translated.  */
  YY_SYMBOL_PRINT ("-> $$ =", YY_CAST (yysymbol_kind_t, yyr1[yyn]), &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;

  *++yyvsp = yyval;
  *++yylsp = yyloc;

  /* Now 'shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */
  {
    const int yylhs = yyr1[yyn] - YYNTOKENS;
    const int yyi = yypgoto[yylhs] + *yyssp;
    yystate = (0 <= yyi && yyi <= YYLAST && yycheck[yyi] == *yyssp
               ? yytable[yyi]
               : yydefgoto[yylhs]);
  }

  goto yynewstate;


/*--------------------------------------.
| yyerrlab -- here on detecting error.  |
`--------------------------------------*/
yyerrlab:
  /* Make sure we have latest lookahead translation.  See comments at
     user semantic actions for why this is necessary.  */
  yytoken = yychar == YYEMPTY ? YYSYMBOL_YYEMPTY : YYTRANSLATE (yychar);
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
      {
        yypcontext_t yyctx
          = {yyssp, yytoken, &yylloc};
        char const *yymsgp = YY_("syntax error");
        int yysyntax_error_status;
        yysyntax_error_status = yysyntax_error (&yymsg_alloc, &yymsg, &yyctx);
        if (yysyntax_error_status == 0)
          yymsgp = yymsg;
        else if (yysyntax_error_status == -1)
          {
            if (yymsg != yymsgbuf)
              YYSTACK_FREE (yymsg);
            yymsg = YY_CAST (char *,
                             YYSTACK_ALLOC (YY_CAST (YYSIZE_T, yymsg_alloc)));
            if (yymsg)
              {
                yysyntax_error_status
                  = yysyntax_error (&yymsg_alloc, &yymsg, &yyctx);
                yymsgp = yymsg;
              }
            else
              {
                yymsg = yymsgbuf;
                yymsg_alloc = sizeof yymsgbuf;
                yysyntax_error_status = YYENOMEM;
              }
          }
        yyerror (&yylloc, parser, yymsgp);
        if (yysyntax_error_status == YYENOMEM)
          YYNOMEM;
      }
    }

  yyerror_range[1] = yylloc;
  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
         error, discard it.  */

      if (yychar <= T_END)
        {
          /* Return failure if at end of input.  */
          if (yychar == T_END)
            YYABORT;
        }
      else
        {
          yydestruct ("Error: discarding",
                      yytoken, &yylval, &yylloc, parser);
          yychar = YYEMPTY;
        }
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:
  /* Pacify compilers when the user code never invokes YYERROR and the
     label yyerrorlab therefore never appears in user code.  */
  if (0)
    YYERROR;
  ++yynerrs;

  /* Do not reclaim the symbols of the rule whose action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;      /* Each real token shifted decrements this.  */

  /* Pop stack until we find a state that shifts the error token.  */
  for (;;)
    {
      yyn = yypact[yystate];
      if (!yypact_value_is_default (yyn))
        {
          yyn += YYSYMBOL_YYerror;
          if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYSYMBOL_YYerror)
            {
              yyn = yytable[yyn];
              if (0 < yyn)
                break;
            }
        }

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
        YYABORT;

      yyerror_range[1] = *yylsp;
      yydestruct ("Error: popping",
                  YY_ACCESSING_SYMBOL (yystate), yyvsp, yylsp, parser);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END

  yyerror_range[2] = yylloc;
  ++yylsp;
  YYLLOC_DEFAULT (*yylsp, yyerror_range, 2);

  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", YY_ACCESSING_SYMBOL (yyn), yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturnlab;


/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturnlab;


/*-----------------------------------------------------------.
| yyexhaustedlab -- YYNOMEM (memory exhaustion) comes here.  |
`-----------------------------------------------------------*/
yyexhaustedlab:
  yyerror (&yylloc, parser, YY_("memory exhausted"));
  yyresult = 2;
  goto yyreturnlab;


/*----------------------------------------------------------.
| yyreturnlab -- parsing is finished, clean up and return.  |
`----------------------------------------------------------*/
yyreturnlab:
  if (yychar != YYEMPTY)
    {
      /* Make sure we have latest lookahead translation.  See comments at
         user semantic actions for why this is necessary.  */
      yytoken = YYTRANSLATE (yychar);
      yydestruct ("Cleanup: discarding lookahead",
                  yytoken, &yylval, &yylloc, parser);
    }
  /* Do not reclaim the symbols of the rule whose action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
                  YY_ACCESSING_SYMBOL (+*yyssp), yyvsp, yylsp, parser);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
  if (yymsg != yymsgbuf)
    YYSTACK_FREE (yymsg);
  return yyresult;
}

