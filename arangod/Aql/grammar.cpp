/* A Bison parser, made by GNU Bison 3.4.1.  */

/* Bison implementation for Yacc-like parsers in C

   Copyright (C) 1984, 1989-1990, 2000-2015, 2018-2019 Free Software Foundation,
   Inc.

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.

   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Undocumented macros, especially those whose name start with YY_,
   are private implementation details.  Do not rely on them.  */

/* Identify Bison output.  */
#define YYBISON 1

/* Bison version.  */
#define YYBISON_VERSION "3.4.1"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 1

/* Push parsers.  */
#define YYPUSH 0

/* Pull parsers.  */
#define YYPULL 1


/* Substitute the variable and function names.  */
#define yyparse         Aqlparse
#define yylex           Aqllex
#define yyerror         Aqlerror
#define yydebug         Aqldebug
#define yynerrs         Aqlnerrs


/* First part of user prologue.  */
#line 9 "Aql/grammar.y"

// we are using alloca here explicitly because we may
// otherwise leak error messages that are generated by Bison.
// Bison reports all its errors via the function `Aqlerror`, which
// will receive the error message as a constant string. So we
// must not free the string inside `Aqlerror`, and we cannot even
// tell if the error message is a dynamically allocated error
// message or a hard-coded error message that resides in some
// static part of the program.
// Even worse, `Aqlerror` does not return control to Bison but throws
// an exception... So the best thing we can do here is to not use
// dynamically memory allocation by Bison, but make it use alloca.
#define YYSTACK_USE_ALLOCA 1

#include "Aql/Aggregator.h"
#include "Aql/AstNode.h"
#include "Aql/Function.h"
#include "Aql/Parser.h"
#include "Aql/Quantifier.h"
#include "Aql/QueryContext.h"
#include "Aql/types.h"
#include "Basics/StringUtils.h"
#include "Basics/tri-strings.h"
#include "Transaction/Context.h"
#include "VocBase/AccessMode.h"

#line 103 "Aql/grammar.cpp"

# ifndef YY_NULLPTR
#  if defined __cplusplus
#   if 201103L <= __cplusplus
#    define YY_NULLPTR nullptr
#   else
#    define YY_NULLPTR 0
#   endif
#  else
#   define YY_NULLPTR ((void*)0)
#  endif
# endif

/* Enabling verbose error messages.  */
#ifdef YYERROR_VERBOSE
# undef YYERROR_VERBOSE
# define YYERROR_VERBOSE 1
#else
# define YYERROR_VERBOSE 1
#endif

/* Use api.header.include to #include this header
   instead of duplicating it here.  */
#ifndef YY_AQL_AQL_GRAMMAR_HPP_INCLUDED
# define YY_AQL_AQL_GRAMMAR_HPP_INCLUDED
/* Debug traces.  */
#ifndef YYDEBUG
# define YYDEBUG 0
#endif
#if YYDEBUG
extern int Aqldebug;
#endif

/* Token type.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
  enum yytokentype
  {
    T_END = 0,
    T_FOR = 258,
    T_LET = 259,
    T_FILTER = 260,
    T_RETURN = 261,
    T_COLLECT = 262,
    T_SORT = 263,
    T_LIMIT = 264,
    T_ASC = 265,
    T_DESC = 266,
    T_IN = 267,
    T_WITH = 268,
    T_INTO = 269,
    T_AGGREGATE = 270,
    T_GRAPH = 271,
    T_SHORTEST_PATH = 272,
    T_K_SHORTEST_PATHS = 273,
    T_DISTINCT = 274,
    T_REMOVE = 275,
    T_INSERT = 276,
    T_UPDATE = 277,
    T_REPLACE = 278,
    T_UPSERT = 279,
    T_NULL = 280,
    T_TRUE = 281,
    T_FALSE = 282,
    T_STRING = 283,
    T_QUOTED_STRING = 284,
    T_INTEGER = 285,
    T_DOUBLE = 286,
    T_PARAMETER = 287,
    T_DATA_SOURCE_PARAMETER = 288,
    T_ASSIGN = 289,
    T_NOT = 290,
    T_AND = 291,
    T_OR = 292,
    T_REGEX_MATCH = 293,
    T_REGEX_NON_MATCH = 294,
    T_EQ = 295,
    T_NE = 296,
    T_LT = 297,
    T_GT = 298,
    T_LE = 299,
    T_GE = 300,
    T_LIKE = 301,
    T_PARALLEL = 302,
    T_PLUS = 303,
    T_MINUS = 304,
    T_TIMES = 305,
    T_DIV = 306,
    T_MOD = 307,
    T_QUESTION = 308,
    T_COLON = 309,
    T_SCOPE = 310,
    T_RANGE = 311,
    T_COMMA = 312,
    T_OPEN = 313,
    T_CLOSE = 314,
    T_OBJECT_OPEN = 315,
    T_OBJECT_CLOSE = 316,
    T_ARRAY_OPEN = 317,
    T_ARRAY_CLOSE = 318,
    T_OUTBOUND = 319,
    T_INBOUND = 320,
    T_ANY = 321,
    T_ALL = 322,
    T_NONE = 323,
    UMINUS = 324,
    UPLUS = 325,
    UNEGATION = 326,
    FUNCCALL = 327,
    REFERENCE = 328,
    INDEXED = 329,
    EXPANSION = 330
  };
#endif

/* Value type.  */
#if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED
union YYSTYPE
{
#line 36 "Aql/grammar.y"

  arangodb::aql::AstNode*  node;
  struct {
    char*                  value;
    size_t                 length;
  }                        strval;
  bool                     boolval;
  int64_t                  intval;

#line 233 "Aql/grammar.cpp"

};
typedef union YYSTYPE YYSTYPE;
# define YYSTYPE_IS_TRIVIAL 1
# define YYSTYPE_IS_DECLARED 1
#endif

/* Location type.  */
#if ! defined YYLTYPE && ! defined YYLTYPE_IS_DECLARED
typedef struct YYLTYPE YYLTYPE;
struct YYLTYPE
{
  int first_line;
  int first_column;
  int last_line;
  int last_column;
};
# define YYLTYPE_IS_DECLARED 1
# define YYLTYPE_IS_TRIVIAL 1
#endif



int Aqlparse (arangodb::aql::Parser* parser);

#endif /* !YY_AQL_AQL_GRAMMAR_HPP_INCLUDED  */

/* Second part of user prologue.  */
#line 46 "Aql/grammar.y"


using namespace arangodb::aql;

/// @brief shortcut macro for signaling out of memory
#define ABORT_OOM                                   \
  parser->registerError(TRI_ERROR_OUT_OF_MEMORY);   \
  YYABORT;

#define scanner parser->scanner()

/// @brief forward for lexer function defined in Aql/tokens.ll
int Aqllex(YYSTYPE*, YYLTYPE*, void*);

/// @brief register parse error (this will also abort the currently running query)
void Aqlerror(YYLTYPE* locp,
              arangodb::aql::Parser* parser,
              char const* message) {
  parser->registerParseError(TRI_ERROR_QUERY_PARSE, message, locp->first_line, locp->first_column);
}

namespace {
/// @brief check if any of the variables used in the INTO expression were
/// introduced by the COLLECT itself, in which case it would fail
void checkIntoVariables(Parser* parser, AstNode const* expression,
                        int line, int column,
                        ::arangodb::containers::HashSet<Variable const*> const& variablesIntroduced) {
  if (expression == nullptr) {
    return;
  }

  ::arangodb::containers::HashSet<Variable const*> varsInAssignment;
  Ast::getReferencedVariables(expression, varsInAssignment);

  for (auto const& it : varsInAssignment) {
    if (variablesIntroduced.find(it) != variablesIntroduced.end()) {
      std::string msg("use of COLLECT variable '" + it->name + "' inside same COLLECT's INTO expression");
      parser->registerParseError(TRI_ERROR_QUERY_VARIABLE_NAME_UNKNOWN, msg.c_str(), it->name.c_str(), line, column);
      return;
    }
  }
}

/// @brief register variables in the scope
void registerAssignVariables(Parser* parser, arangodb::aql::Scopes* scopes,
                             int line, int column,
                             ::arangodb::containers::HashSet<Variable const*>& variablesIntroduced,
                             AstNode const* vars) {
  ::arangodb::containers::HashSet<Variable const*> varsInAssignment;

  size_t const n = vars->numMembers();

  for (size_t i = 0; i < n; ++i) {
    auto member = vars->getMemberUnchecked(i);

    if (member != nullptr) {
      TRI_ASSERT(member->type == NODE_TYPE_ASSIGN);
      // check if any of the assignment refers to a variable introduced by this very
      // same COLLECT, e.g. COLLECT aggregate x = .., y = x
      varsInAssignment.clear();
      Ast::getReferencedVariables(member->getMember(1), varsInAssignment);
      for (auto const& it : varsInAssignment) {
        if (variablesIntroduced.find(it) != variablesIntroduced.end()) {
          std::string msg("use of COLLECT variable '" + it->name + "' inside same COLLECT");
          parser->registerParseError(TRI_ERROR_QUERY_VARIABLE_NAME_UNKNOWN, msg.c_str(), it->name.c_str(), line, column);
          return;
        }
      }

      // keep track of the variable for our assignment
      auto v = static_cast<Variable*>(member->getMember(0)->getData());
      scopes->addVariable(v);
      variablesIntroduced.emplace(v);
    }
  }
}

/// @brief validate the aggregate variables expressions
bool validateAggregates(Parser* parser, AstNode const* aggregates) {
  size_t const n = aggregates->numMembers();

  for (size_t i = 0; i < n; ++i) {
    auto member = aggregates->getMemberUnchecked(i);

    if (member != nullptr) {
      TRI_ASSERT(member->type == NODE_TYPE_ASSIGN);

      auto func = member->getMember(1);

      bool isValid = true;
      if (func->type != NODE_TYPE_FCALL) {
        // aggregate expression must be a function call
        isValid = false;
      }
      else {
        auto f = static_cast<arangodb::aql::Function*>(func->getData());
        if (!Aggregator::isValid(f->name)) {
          // aggregate expression must be a call to MIN|MAX|LENGTH...
          isValid = false;
        }
      }

      if (!isValid) {
        parser->registerError(TRI_ERROR_QUERY_INVALID_AGGREGATE_EXPRESSION);
        return false;
      }
    }
  }

  return true;
}

/// @brief start a new scope for the collect
bool startCollectScope(arangodb::aql::Scopes* scopes) {
  // check if we are in the main scope
  if (scopes->type() == arangodb::aql::AQL_SCOPE_MAIN ||
      scopes->type() == arangodb::aql::AQL_SCOPE_SUBQUERY) {
    return false;
  }

  // end the active scopes
  scopes->endNested();
  // start a new scope
  scopes->start(arangodb::aql::AQL_SCOPE_COLLECT);
  return true;
}

/// @brief get the INTO variable stored in a node (may not exist)
AstNode const* getIntoVariable(Parser* parser, AstNode const* node) {
  if (node == nullptr) {
    return nullptr;
  }

  if (node->type == NODE_TYPE_VALUE) {
    // node is a string containing the variable name
    return parser->ast()->createNodeVariable(node->getStringValue(), node->getStringLength(), true);
  }

  // node is an array with the variable name as the first member
  TRI_ASSERT(node->type == NODE_TYPE_ARRAY);
  TRI_ASSERT(node->numMembers() == 2);

  auto v = node->getMember(0);
  TRI_ASSERT(v->type == NODE_TYPE_VALUE);
  return parser->ast()->createNodeVariable(v->getStringValue(), v->getStringLength(), true);
}

/// @brief get the INTO variable = expression stored in a node (may not exist)
AstNode const* getIntoExpression(AstNode const* node) {
  if (node == nullptr || node->type == NODE_TYPE_VALUE) {
    return nullptr;
  }

  // node is an array with the expression as the second member
  TRI_ASSERT(node->type == NODE_TYPE_ARRAY);
  TRI_ASSERT(node->numMembers() == 2);

  return node->getMember(1);
}

AstNode* transformOutputVariables(Parser* parser, AstNode const* names) {
  auto wrapperNode = parser->ast()->createNodeArray();
  for (size_t i = 0; i < names->numMembers(); ++i) {
    AstNode* variableNameNode = names->getMemberUnchecked(i);
    TRI_ASSERT(variableNameNode->isStringValue());
    AstNode* variableNode = parser->ast()->createNodeVariable(variableNameNode->getStringValue(), variableNameNode->getStringLength(), true);
    wrapperNode->addMember(variableNode);
  }
  return wrapperNode;
}

} // namespace


#line 437 "Aql/grammar.cpp"


#ifdef short
# undef short
#endif

#ifdef YYTYPE_UINT8
typedef YYTYPE_UINT8 yytype_uint8;
#else
typedef unsigned char yytype_uint8;
#endif

#ifdef YYTYPE_INT8
typedef YYTYPE_INT8 yytype_int8;
#else
typedef signed char yytype_int8;
#endif

#ifdef YYTYPE_UINT16
typedef YYTYPE_UINT16 yytype_uint16;
#else
typedef unsigned short yytype_uint16;
#endif

#ifdef YYTYPE_INT16
typedef YYTYPE_INT16 yytype_int16;
#else
typedef short yytype_int16;
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif ! defined YYSIZE_T
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned
# endif
#endif

#define YYSIZE_MAXIMUM ((YYSIZE_T) -1)

#ifndef YY_
# if defined YYENABLE_NLS && YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(Msgid) dgettext ("bison-runtime", Msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(Msgid) Msgid
# endif
#endif

#ifndef YY_ATTRIBUTE
# if (defined __GNUC__                                               \
      && (2 < __GNUC__ || (__GNUC__ == 2 && 96 <= __GNUC_MINOR__)))  \
     || defined __SUNPRO_C && 0x5110 <= __SUNPRO_C
#  define YY_ATTRIBUTE(Spec) __attribute__(Spec)
# else
#  define YY_ATTRIBUTE(Spec) /* empty */
# endif
#endif

#ifndef YY_ATTRIBUTE_PURE
# define YY_ATTRIBUTE_PURE   YY_ATTRIBUTE ((__pure__))
#endif

#ifndef YY_ATTRIBUTE_UNUSED
# define YY_ATTRIBUTE_UNUSED YY_ATTRIBUTE ((__unused__))
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YYUSE(E) ((void) (E))
#else
# define YYUSE(E) /* empty */
#endif

#if defined __GNUC__ && ! defined __ICC && 407 <= __GNUC__ * 100 + __GNUC_MINOR__
/* Suppress an incorrect diagnostic about yylval being uninitialized.  */
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN \
    _Pragma ("GCC diagnostic push") \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")\
    _Pragma ("GCC diagnostic ignored \"-Wmaybe-uninitialized\"")
# define YY_IGNORE_MAYBE_UNINITIALIZED_END \
    _Pragma ("GCC diagnostic pop")
#else
# define YY_INITIAL_VALUE(Value) Value
#endif
#ifndef YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_END
#endif
#ifndef YY_INITIAL_VALUE
# define YY_INITIAL_VALUE(Value) /* Nothing. */
#endif


#define YY_ASSERT(E) ((void) (0 && (E)))

#if ! defined yyoverflow || YYERROR_VERBOSE

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined EXIT_SUCCESS
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
      /* Use EXIT_SUCCESS as a witness for stdlib.h.  */
#     ifndef EXIT_SUCCESS
#      define EXIT_SUCCESS 0
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's 'empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined EXIT_SUCCESS \
       && ! ((defined YYMALLOC || defined malloc) \
             && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef EXIT_SUCCESS
#    define EXIT_SUCCESS 0
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined EXIT_SUCCESS
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined EXIT_SUCCESS
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* ! defined yyoverflow || YYERROR_VERBOSE */


#if (! defined yyoverflow \
     && (! defined __cplusplus \
         || (defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL \
             && defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yytype_int16 yyss_alloc;
  YYSTYPE yyvs_alloc;
  YYLTYPE yyls_alloc;
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (sizeof (yytype_int16) + sizeof (YYSTYPE) + sizeof (YYLTYPE)) \
      + 2 * YYSTACK_GAP_MAXIMUM)

# define YYCOPY_NEEDED 1

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack_alloc, Stack)                           \
    do                                                                  \
      {                                                                 \
        YYSIZE_T yynewbytes;                                            \
        YYCOPY (&yyptr->Stack_alloc, Stack, yysize);                    \
        Stack = &yyptr->Stack_alloc;                                    \
        yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
        yyptr += yynewbytes / sizeof (*yyptr);                          \
      }                                                                 \
    while (0)

#endif

#if defined YYCOPY_NEEDED && YYCOPY_NEEDED
/* Copy COUNT objects from SRC to DST.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(Dst, Src, Count) \
      __builtin_memcpy (Dst, Src, (Count) * sizeof (*(Src)))
#  else
#   define YYCOPY(Dst, Src, Count)              \
      do                                        \
        {                                       \
          YYSIZE_T yyi;                         \
          for (yyi = 0; yyi < (Count); yyi++)   \
            (Dst)[yyi] = (Src)[yyi];            \
        }                                       \
      while (0)
#  endif
# endif
#endif /* !YYCOPY_NEEDED */

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  7
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   1475

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  77
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  104
/* YYNRULES -- Number of rules.  */
#define YYNRULES  244
/* YYNSTATES -- Number of states.  */
#define YYNSTATES  402

#define YYUNDEFTOK  2
#define YYMAXUTOK   330

/* YYTRANSLATE(TOKEN-NUM) -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex, with out-of-bounds checking.  */
#define YYTRANSLATE(YYX)                                                \
  ((unsigned) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)

/* YYTRANSLATE[TOKEN-NUM] -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex.  */
static const yytype_uint8 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,    76,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75
};

#if YYDEBUG
  /* YYRLINE[YYN] -- Source line where rule number YYN was defined.  */
static const yytype_uint16 yyrline[] =
{
       0,   398,   398,   401,   414,   418,   422,   429,   431,   431,
     443,   448,   453,   455,   458,   461,   464,   467,   473,   475,
     480,   482,   484,   486,   488,   490,   492,   494,   496,   498,
     500,   502,   507,   514,   521,   527,   534,   561,   584,   597,
     620,   643,   643,   701,   701,   733,   751,   773,   781,   783,
     788,   788,   798,   803,   805,   810,   817,   827,   827,   841,
     850,   862,   886,   942,   961,   988,   990,   995,  1002,  1005,
    1008,  1017,  1031,  1048,  1048,  1062,  1062,  1072,  1072,  1083,
    1086,  1092,  1098,  1101,  1104,  1107,  1113,  1118,  1125,  1133,
    1136,  1142,  1152,  1162,  1170,  1181,  1186,  1194,  1205,  1210,
    1213,  1219,  1223,  1219,  1275,  1278,  1281,  1287,  1287,  1297,
    1303,  1306,  1309,  1312,  1315,  1318,  1324,  1327,  1343,  1343,
    1352,  1352,  1362,  1365,  1368,  1374,  1377,  1380,  1383,  1386,
    1389,  1392,  1395,  1398,  1401,  1404,  1407,  1410,  1413,  1416,
    1419,  1426,  1433,  1439,  1445,  1451,  1458,  1461,  1464,  1467,
    1470,  1473,  1476,  1479,  1483,  1487,  1494,  1497,  1503,  1505,
    1510,  1513,  1513,  1529,  1532,  1538,  1541,  1547,  1547,  1556,
    1558,  1560,  1565,  1567,  1572,  1578,  1581,  1607,  1627,  1630,
    1644,  1644,  1653,  1655,  1657,  1662,  1664,  1669,  1683,  1687,
    1696,  1703,  1706,  1712,  1715,  1721,  1724,  1727,  1733,  1736,
    1742,  1745,  1748,  1752,  1758,  1762,  1769,  1775,  1775,  1784,
    1788,  1797,  1800,  1803,  1809,  1812,  1818,  1850,  1853,  1856,
    1863,  1873,  1873,  1886,  1901,  1915,  1929,  1929,  1972,  1975,
    1981,  1988,  1998,  2001,  2004,  2007,  2010,  2016,  2020,  2024,
    2034,  2041,  2047,  2050,  2055
};
#endif

#if YYDEBUG || YYERROR_VERBOSE || 1
/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "\"end of query string\"", "error", "$undefined", "\"FOR declaration\"",
  "\"LET declaration\"", "\"FILTER declaration\"",
  "\"RETURN declaration\"", "\"COLLECT declaration\"",
  "\"SORT declaration\"", "\"LIMIT declaration\"", "\"ASC keyword\"",
  "\"DESC keyword\"", "\"IN keyword\"", "\"WITH keyword\"",
  "\"INTO keyword\"", "\"AGGREGATE keyword\"", "\"GRAPH keyword\"",
  "\"SHORTEST_PATH keyword\"", "\"K_SHORTEST_PATHS keyword\"",
  "\"DISTINCT modifier\"", "\"REMOVE command\"", "\"INSERT command\"",
  "\"UPDATE command\"", "\"REPLACE command\"", "\"UPSERT command\"",
  "\"null\"", "\"true\"", "\"false\"", "\"identifier\"",
  "\"quoted string\"", "\"integer number\"", "\"number\"",
  "\"bind parameter\"", "\"bind data source parameter\"", "\"assignment\"",
  "\"not operator\"", "\"and operator\"", "\"or operator\"",
  "\"~= operator\"", "\"~! operator\"", "\"== operator\"",
  "\"!= operator\"", "\"< operator\"", "\"> operator\"", "\"<= operator\"",
  "\">= operator\"", "\"like operator\"", "\"parallel operator\"",
  "\"+ operator\"", "\"- operator\"", "\"* operator\"", "\"/ operator\"",
  "\"% operator\"", "\"?\"", "\":\"", "\"::\"", "\"..\"", "\",\"", "\"(\"",
  "\")\"", "\"{\"", "\"}\"", "\"[\"", "\"]\"", "\"outbound modifier\"",
  "\"inbound modifier\"", "\"any modifier\"", "\"all modifier\"",
  "\"none modifier\"", "UMINUS", "UPLUS", "UNEGATION", "FUNCCALL",
  "REFERENCE", "INDEXED", "EXPANSION", "'.'", "$accept", "with_collection",
  "with_collection_list", "optional_with", "$@1", "queryStart", "query",
  "final_statement", "optional_statement_block_statements",
  "statement_block_statement", "more_output_variables",
  "for_output_variables", "prune_and_options", "traversal_graph_info",
  "shortest_path_graph_info", "k_shortest_paths_graph_info",
  "for_statement", "$@2", "$@3", "filter_statement", "parallel_list",
  "parallel_statement", "$@4", "let_statement", "let_list", "let_element",
  "count_into", "collect_variable_list", "$@5", "collect_statement",
  "collect_list", "collect_element", "collect_optional_into",
  "variable_list", "keep", "$@6", "aggregate", "$@7", "sort_statement",
  "$@8", "sort_list", "sort_element", "sort_direction", "limit_statement",
  "return_statement", "in_or_into_collection", "remove_statement",
  "insert_statement", "update_parameters", "update_statement",
  "replace_parameters", "replace_statement", "update_or_replace",
  "upsert_statement", "$@9", "$@10", "quantifier", "distinct_expression",
  "$@11", "expression", "function_name", "function_call", "$@12", "$@13",
  "operator_unary", "operator_binary", "operator_ternary",
  "optional_function_call_arguments", "expression_or_query", "$@14",
  "function_arguments_list", "compound_value", "array", "$@15",
  "optional_array_elements", "array_elements_list", "array_element",
  "for_options", "options", "object", "$@16", "optional_object_elements",
  "object_elements_list", "object_element", "array_filter_operator",
  "optional_array_filter", "optional_array_limit", "optional_array_return",
  "graph_collection", "graph_collection_list", "graph_subject", "$@17",
  "graph_direction", "graph_direction_steps", "reference", "$@18", "$@19",
  "simple_value", "numeric_value", "value_literal",
  "in_or_into_collection_name", "bind_parameter", "object_element_name",
  "variable_name", YY_NULLPTR
};
#endif

# ifdef YYPRINT
/* YYTOKNUM[NUM] -- (External) token number corresponding to the
   (internal) symbol number NUM (which must be that of a token).  */
static const yytype_uint16 yytoknum[] =
{
       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,    46
};
# endif

#define YYPACT_NINF -294

#define yypact_value_is_default(Yystate) \
  (!!((Yystate) == (-294)))

#define YYTABLE_NINF -243

#define yytable_value_is_error(Yytable_value) \
  0

  /* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
     STATE-NUM.  */
static const yytype_int16 yypact[] =
{
      83,  -294,  -294,     9,    35,  -294,   345,  -294,  -294,  -294,
    -294,  -294,    26,  -294,    46,    46,  1360,  1166,   174,  -294,
    1360,  1360,  1360,  1360,  1360,  -294,   -43,  -294,  -294,  -294,
    -294,  -294,  -294,   156,  -294,  -294,  -294,  -294,    12,    13,
      18,    21,    22,    35,  -294,  -294,   -26,    70,  -294,    84,
    -294,   106,  -294,  -294,  -294,    55,  -294,  -294,  -294,  1360,
      60,  1360,  1360,  1360,  -294,  -294,  1027,   162,  -294,  -294,
    -294,  -294,  -294,  -294,  -294,   -46,  -294,  -294,  -294,  -294,
    -294,  1027,   118,  -294,   122,    46,   142,  1360,   624,   670,
     670,  -294,   474,  -294,   519,  1360,  -294,    46,   122,   147,
     142,  -294,    46,  1204,    46,  1360,  -294,  -294,  -294,  -294,
     705,  -294,   110,  1360,  1360,    61,  1360,  1360,  1360,  1360,
    1360,  1360,  1360,  1360,  1360,  1360,  1360,  1360,  1360,  1360,
    1360,  1360,  1246,  1360,   153,   155,   166,     2,   165,  -294,
    1284,    69,  1360,   202,    46,   161,  -294,   167,  -294,   184,
     122,   168,  -294,   387,  1360,  1398,   132,   122,   122,  1360,
     122,  1360,   122,  1027,   222,   201,  -294,   161,   122,  -294,
     122,  -294,  -294,  -294,  -294,  -294,  -294,  -294,   554,    86,
    1360,  -294,  1027,  1322,  -294,   177,   185,  -294,   186,  1360,
     180,   187,  -294,   188,  1027,   182,   200,  -294,  1419,  1360,
    1360,  1360,  1360,  1097,  1062,  1132,  1132,  1132,  1132,   103,
     103,   103,   103,  1132,   130,   130,  -294,  -294,  -294,  1360,
     740,   158,   231,   246,   248,  1360,  1360,  1360,  1360,  1360,
    1360,  1360,  -294,  1322,  -294,   775,   212,  -294,  -294,  1027,
      46,   167,  -294,    46,  1360,  -294,  1360,  -294,  -294,  -294,
    -294,  -294,  -294,  1027,   264,    29,   191,  -294,  -294,  -294,
    -294,  -294,  -294,  -294,   670,  -294,   670,  -294,   240,    36,
    -294,  1360,    46,  -294,  -294,   235,   211,   237,  -294,  1360,
    1360,   429,  1027,   207,  -294,  -294,   218,  -294,  1360,   810,
    -294,   110,  1360,  -294,  1360,  1419,  1132,  1132,  1132,  1027,
    1360,  1360,  1360,  1360,  1419,  1132,  1132,   103,   103,   103,
     103,   217,  -294,  -294,   273,  -294,  -294,  1027,  -294,   122,
     122,  1360,  -294,  -294,  1027,   223,  -294,  1360,  -294,  1360,
    -294,   852,   887,   115,  -294,   224,  -294,   135,  -294,  -294,
    -294,  1360,  1027,   225,  -294,  1027,  -294,  1027,  1419,  1419,
    1419,  -294,  1360,   280,  -294,  -294,   589,    46,   922,   957,
    1360,  1360,  -294,  -294,  -294,  -294,  -294,  -294,  1360,  1027,
    1360,   284,  -294,  -294,  1360,  -294,   161,  1360,   429,   429,
      28,  1027,   992,  1360,   230,   670,  -294,  1027,   122,   122,
    -294,   239,  1360,  1027,  -294,   122,  -294,  -294,    28,  1027,
    -294,  -294
};

  /* YYDEFACT[STATE-NUM] -- Default reduction number in state STATE-NUM.
     Performed when YYTABLE does not specify something else to do.  Zero
     means the default is an error.  */
static const yytype_uint8 yydefact[] =
{
       7,     8,    18,     0,     0,    10,     0,     1,     2,   241,
     240,     4,     9,     3,     0,     0,     0,     0,    57,    77,
       0,     0,     0,     0,     0,   101,     0,    11,    19,    20,
      23,    21,    22,    68,    24,    25,    26,    12,    27,    28,
      29,    30,    31,     0,     6,   244,    34,     0,    32,    52,
      53,     0,   234,   235,   236,   216,   232,   230,   231,     0,
       0,     0,     0,   221,   180,   167,    47,     0,   219,   110,
     111,   112,   217,   165,   166,   114,   233,   113,   218,   107,
      88,   109,     0,    75,   178,     0,    68,     0,    86,     0,
       0,    95,     0,    98,     0,     0,    50,     0,   178,   178,
      68,     5,     0,     0,     0,     0,   124,   120,   122,   123,
       0,    18,   182,   169,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   105,   104,   106,     0,     0,   118,
       0,     0,     0,     0,     0,     0,    59,    58,    65,     0,
     178,    78,    79,    82,     0,     0,     0,   178,   178,     0,
     178,     0,   178,   102,     0,    69,    60,    73,   178,    63,
     178,    33,   211,   212,   213,    43,    45,    46,    41,   214,
       0,    54,    55,   161,   220,     0,   187,   243,     0,     0,
       0,   183,   185,     0,   174,     0,   170,   172,   138,     0,
       0,     0,     0,   126,   125,   144,   145,   132,   133,   134,
     135,   136,   137,   143,   127,   128,   129,   130,   131,     0,
       0,   115,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   117,   161,   191,     0,   226,   223,   224,   108,
       0,    76,   179,     0,     0,    61,     0,    83,    84,    81,
      85,   228,   229,    87,   216,   232,   240,    89,   237,   238,
     239,    90,    91,    92,     0,    93,     0,    96,     0,     0,
      48,     0,     0,    64,    62,    35,   213,   175,   215,     0,
       0,     0,   160,     0,   163,    18,   159,   222,     0,     0,
     181,   184,     0,   168,   171,   139,   141,   142,   140,   157,
       0,     0,     0,     0,   152,   146,   147,   148,   149,   150,
     151,     0,   225,   192,   193,    56,    66,    67,    80,   178,
     178,     0,    51,    49,    70,    74,    71,     0,    44,     0,
      42,     0,     0,     0,   200,   206,    38,     0,   201,   121,
     162,   161,   189,     0,   186,   188,   173,   156,   154,   153,
     155,   119,     0,   195,    94,    97,     0,     0,    36,   176,
       0,     0,   210,   209,   207,   202,   203,   164,     0,   194,
       0,   198,    99,   100,     0,    72,     0,     0,     0,     0,
       0,   190,   196,     0,     0,     0,    37,   177,   178,   178,
     204,   208,     0,   199,   227,   178,    39,    40,     0,   197,
     103,   205
};

  /* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
    -294,     5,  -294,  -294,  -294,  -294,  -100,  -294,  -294,  -294,
    -294,  -294,  -294,  -294,  -294,  -294,  -294,  -294,  -294,  -294,
    -294,  -294,  -294,  -160,  -294,   190,   266,  -294,  -294,  -294,
     157,    57,   -45,  -294,  -294,  -294,   269,  -294,  -294,  -294,
    -294,    62,  -294,  -294,  -294,   -87,  -294,  -294,  -294,  -294,
    -294,  -294,  -294,  -294,  -294,  -294,  -294,  -294,  -294,     3,
    -294,  -294,  -294,  -294,  -294,  -294,  -294,    74,   -32,  -294,
    -294,  -294,  -294,  -294,  -294,  -294,    19,  -294,    16,  -139,
    -294,  -294,  -294,    23,  -294,  -294,  -294,  -294,  -293,  -294,
    -267,  -294,   -93,  -294,  -294,  -294,  -294,  -294,  -294,   159,
     154,    -4,  -294,   -13
};

  /* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
      -1,    11,    12,     2,     4,     3,     5,    27,     6,    28,
      46,    47,   328,   175,   176,   177,    29,   277,   275,    30,
     269,    31,   164,    32,    49,    50,    84,    33,    85,    34,
     147,   148,    99,   325,   168,   272,    86,   144,    35,    87,
     151,   152,   249,    36,    37,   157,    38,    39,    91,    40,
      93,    41,   374,    42,    95,   268,   137,    80,   142,   282,
      67,    68,   233,   183,    69,    70,    71,   283,   284,   285,
     286,    72,    73,   113,   195,   196,   197,   330,   146,    74,
     112,   190,   191,   192,   236,   353,   371,   384,   335,   391,
     336,   380,   337,   180,    75,   111,   314,   250,    76,    77,
     257,    78,   193,   149
};

  /* YYTABLE[YYPACT[STATE-NUM]] -- What to do in state STATE-NUM.  If
     positive, shift that token.  If negative, reduce the rule whose
     number is the opposite.  If YYTABLE_NINF, syntax error.  */
static const yytype_int16 yytable[] =
{
      13,    48,    51,   158,   270,   160,   242,   162,    13,     7,
     179,   185,   -13,   -14,   225,    96,   140,    44,   -15,    66,
      81,   -16,   -17,    88,    89,    90,    92,    94,   242,  -238,
     141,   102,  -238,  -238,  -238,  -238,  -238,  -238,  -238,    13,
      15,   150,   226,   227,   228,   229,   230,   231,   101,  -238,
    -238,  -238,  -238,  -238,     8,   170,   334,  -238,     9,    10,
       9,    10,   106,     8,   108,   109,   110,     9,    10,   -13,
     -14,   -13,   -14,   199,    45,   -15,  -238,   -15,   -16,   -17,
     -16,   -17,   103,    43,   165,   278,  -238,   390,  -238,   171,
     153,    51,   172,   173,   174,   322,     1,   237,   163,   200,
     201,     9,    10,   279,   280,   401,   178,   202,   182,   323,
    -116,   388,   389,  -116,   166,   169,   194,   198,   107,   203,
     204,   205,   206,   207,   208,   209,   210,   211,   212,   213,
     214,   215,   216,   217,   218,   220,   221,   238,   186,   187,
     105,   104,   188,   235,   362,   239,   143,     9,    10,   252,
     145,   127,   128,   129,   130,   131,    97,   253,   198,   133,
     258,   259,   264,   365,   266,   260,   245,     9,    10,    82,
      97,    83,   189,   262,   263,   167,   265,   319,   267,   320,
     129,   130,   131,   281,   273,   340,   274,    82,   222,    83,
     223,  -239,   289,   232,  -239,  -239,  -239,  -239,  -239,  -239,
    -239,   224,   295,   296,   297,   298,   127,   128,   129,   130,
     131,  -239,  -239,  -239,  -239,  -239,   240,   138,   244,  -239,
     139,    64,   299,  -105,   243,   246,    15,   315,   304,   305,
     306,   307,   308,   309,   310,   271,   287,   386,  -239,  -242,
     288,   290,   292,   301,   291,   293,   222,   317,  -239,   153,
    -239,  -105,  -105,  -105,  -105,  -105,  -105,   294,   302,   326,
     303,   321,   313,   327,  -237,   329,   339,  -237,  -237,  -237,
    -237,  -237,  -237,  -237,   324,   341,   351,   338,   352,   368,
     357,   364,   331,   332,  -237,  -237,  -237,  -237,  -237,   370,
     383,   342,  -237,   394,   181,   345,   398,   194,   395,    98,
     316,   241,   100,   347,   348,   349,   350,   311,   318,   367,
     261,  -237,   251,   346,   344,     0,     0,     0,     0,  -116,
       0,  -237,  -116,  -237,   356,     0,     0,     0,     0,   363,
     358,     0,   359,   366,     0,   354,   355,     0,     0,     0,
       0,     0,     0,     0,   375,     0,     0,     0,    14,    15,
      16,    17,    18,    19,    20,   369,     0,     0,     0,     0,
       0,     0,     0,   378,   379,    21,    22,    23,    24,    25,
       0,   381,     0,   382,   338,   338,   338,   385,     0,     0,
     387,     0,     0,     0,     0,     0,   393,     0,     0,     0,
       0,     0,    26,     0,   338,   399,     0,   247,   248,   114,
       0,     0,     0,     0,   396,   397,     0,     0,     0,     0,
       0,   400,    52,    53,    54,     0,    56,    57,    58,     9,
      10,     0,   115,   116,   117,   118,   119,   120,   121,   122,
     123,   124,   125,   126,     0,   127,   128,   129,   130,   131,
     132,   114,     0,   133,     0,   333,     0,     0,     0,     0,
       0,     0,     0,   134,   135,   136,     0,   334,     0,     0,
       0,     9,    10,     0,   115,   116,   117,   118,   119,   120,
     121,   122,   123,   124,   125,   126,     0,   127,   128,   129,
     130,   131,   132,     0,     0,   133,   155,   159,   156,     0,
       0,     0,     0,   172,   173,   276,   135,   136,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   115,
     116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
     126,     0,   127,   128,   129,   130,   131,   132,     0,     0,
     133,   155,   161,   156,     0,     0,     0,     0,     0,     0,
     134,   135,   136,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   115,   116,   117,   118,   119,   120,
     121,   122,   123,   124,   125,   126,   114,   127,   128,   129,
     130,   131,   132,     0,     0,   133,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   134,   135,   136,     0,   115,
     116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
     126,   114,   127,   128,   129,   130,   131,   132,     0,     0,
     133,   372,   373,     0,     0,     0,     0,     0,   172,   173,
     276,   135,   136,     0,   115,   116,   117,   118,   119,   120,
     121,   122,   123,   124,   125,   126,   114,   127,   128,   129,
     130,   131,   132,     0,     0,   133,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   134,   135,   136,     0,   115,
     116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
     126,     0,   127,   128,   129,   130,   131,   132,     0,     0,
     133,   154,   155,     0,   156,     0,     0,     0,     0,     0,
     134,   135,   136,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   115,   116,   117,   118,   119,
     120,   121,   122,   123,   124,   125,   126,   114,   127,   128,
     129,   130,   131,   132,     0,     0,   133,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   134,   135,   136,     0,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   114,   127,   128,   129,   130,   131,   132,     0,
       0,   133,     0,     0,   184,     0,     0,     0,     0,     0,
       0,   134,   135,   136,     0,   115,   116,   117,   118,   119,
     120,   121,   122,   123,   124,   125,   126,   114,   127,   128,
     129,   130,   131,   132,   300,     0,   133,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   134,   135,   136,     0,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   114,   127,   128,   129,   130,   131,   132,     0,
       0,   133,     0,     0,     0,     0,     0,     0,   312,     0,
       0,   134,   135,   136,     0,   115,   116,   117,   118,   119,
     120,   121,   122,   123,   124,   125,   126,     0,   127,   128,
     129,   130,   131,   132,   114,     0,   133,     0,     0,     0,
       0,     0,     0,   343,     0,     0,   134,   135,   136,     0,
     360,     0,     0,     0,     0,     0,     0,   115,   116,   117,
     118,   119,   120,   121,   122,   123,   124,   125,   126,   114,
     127,   128,   129,   130,   131,   132,     0,     0,   133,     0,
       0,     0,     0,     0,     0,   361,     0,     0,   134,   135,
     136,     0,   115,   116,   117,   118,   119,   120,   121,   122,
     123,   124,   125,   126,   114,   127,   128,   129,   130,   131,
     132,     0,     0,   133,     0,     0,     0,     0,     0,     0,
     376,     0,     0,   134,   135,   136,     0,   115,   116,   117,
     118,   119,   120,   121,   122,   123,   124,   125,   126,   114,
     127,   128,   129,   130,   131,   132,     0,     0,   133,     0,
       0,     0,     0,     0,     0,   377,     0,     0,   134,   135,
     136,     0,   115,   116,   117,   118,   119,   120,   121,   122,
     123,   124,   125,   126,   114,   127,   128,   129,   130,   131,
     132,     0,     0,   133,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   134,   135,   136,     0,   115,   116,   117,
     118,   119,   120,   121,   122,   123,   124,   125,   126,   114,
     127,   128,   129,   130,   131,   132,     0,     0,   133,   392,
       0,     0,     0,     0,     0,     0,     0,     0,   134,   135,
     136,     0,   115,   116,   117,   118,   119,   120,   121,   122,
     123,   124,   125,   126,   114,   127,   128,   129,   130,   131,
     132,     0,     0,   133,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   134,   135,   136,     0,   115,   116,     0,
     118,   119,   120,   121,   122,   123,   124,   125,   126,   114,
     127,   128,   129,   130,   131,     0,     0,     0,   133,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   134,   135,
     136,     0,   115,     0,     0,   118,   119,   120,   121,   122,
     123,   124,   125,   126,   114,   127,   128,   129,   130,   131,
       0,     0,     0,   133,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   134,   135,   136,     0,   115,     0,     0,
       0,     0,     0,     0,   122,   123,   124,   125,     0,     0,
     127,   128,   129,   130,   131,    79,     0,     0,   133,     0,
       0,    52,    53,    54,    55,    56,    57,    58,     9,    10,
       0,    59,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    60,     0,    61,    62,     0,     0,     0,     0,
       0,     0,     0,     0,    63,     0,    64,     0,    65,    52,
      53,    54,    55,    56,    57,    58,     9,    10,     0,    59,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      60,     0,    61,    62,     0,     0,     0,     0,     0,     0,
       0,     0,    63,     0,    64,     0,    65,     0,   172,   173,
     174,    52,    53,    54,    55,    56,    57,    58,     9,    10,
       0,    59,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    60,     0,    61,    62,     0,     0,     0,     0,
     219,     0,     0,     0,    63,     0,    64,     0,    65,    52,
      53,    54,    55,    56,    57,    58,     9,    10,     0,    59,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      60,     0,    61,    62,   234,     0,     0,     0,     0,     0,
       0,     0,    63,     0,    64,     0,    65,    52,    53,    54,
      55,    56,    57,    58,     9,    10,     0,    59,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    60,     0,
      61,    62,     0,     0,     0,     0,     0,     0,     0,     0,
      63,  -158,    64,     0,    65,    52,    53,    54,    55,    56,
      57,    58,     9,    10,     0,    59,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    60,     0,    61,    62,
       0,     0,     0,     0,     0,     0,     0,     0,    63,     0,
      64,     0,    65,    52,    53,    54,   254,   255,    57,    58,
       9,   256,     0,    59,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    60,     0,    61,    62,     0,     0,
       0,     0,     0,     0,     0,     0,    63,     0,    64,     0,
      65,   122,   123,   124,   125,     0,     0,   127,   128,   129,
     130,   131,     0,     0,     0,   133
};

static const yytype_int16 yycheck[] =
{
       4,    14,    15,    90,   164,    92,   145,    94,    12,     0,
     103,   111,     0,     0,    12,    58,    62,    12,     0,    16,
      17,     0,     0,    20,    21,    22,    23,    24,   167,     0,
      76,    57,     3,     4,     5,     6,     7,     8,     9,    43,
       4,    86,    40,    41,    42,    43,    44,    45,    43,    20,
      21,    22,    23,    24,    28,   100,    28,    28,    32,    33,
      32,    33,    59,    28,    61,    62,    63,    32,    33,    57,
      57,    59,    59,    12,    28,    57,    47,    59,    57,    57,
      59,    59,    12,    57,    97,   178,    57,   380,    59,   102,
      87,   104,    64,    65,    66,    59,    13,    28,    95,    38,
      39,    32,    33,    17,    18,   398,   103,    46,   105,   269,
      55,   378,   379,    58,    98,    99,   113,   114,    58,   116,
     117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
     127,   128,   129,   130,   131,   132,   133,   141,    28,    29,
      34,    57,    32,   140,    29,   142,    28,    32,    33,   153,
      28,    48,    49,    50,    51,    52,    14,   154,   155,    56,
      28,    29,   159,    28,   161,    33,   150,    32,    33,    13,
      14,    15,    62,   157,   158,    28,   160,   264,   162,   266,
      50,    51,    52,   180,   168,   285,   170,    13,    35,    15,
      35,     0,   189,    28,     3,     4,     5,     6,     7,     8,
       9,    35,   199,   200,   201,   202,    48,    49,    50,    51,
      52,    20,    21,    22,    23,    24,    14,    55,    34,    28,
      58,    60,   219,    12,    57,    57,     4,   240,   225,   226,
     227,   228,   229,   230,   231,    34,    59,   376,    47,    54,
      54,    61,    54,    12,    57,    63,    35,   244,    57,   246,
      59,    40,    41,    42,    43,    44,    45,    57,    12,   272,
      12,    21,    50,    28,     0,    28,    59,     3,     4,     5,
       6,     7,     8,     9,   271,    57,    59,   281,     5,    54,
      57,    57,   279,   280,    20,    21,    22,    23,    24,     9,
       6,   288,    28,    63,   104,   292,    57,   294,   385,    33,
     243,   144,    33,   300,   301,   302,   303,   233,   246,   341,
     156,    47,   153,   294,   291,    -1,    -1,    -1,    -1,    55,
      -1,    57,    58,    59,   321,    -1,    -1,    -1,    -1,   333,
     327,    -1,   329,   337,    -1,   319,   320,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   357,    -1,    -1,    -1,     3,     4,
       5,     6,     7,     8,     9,   352,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   360,   361,    20,    21,    22,    23,    24,
      -1,   368,    -1,   370,   378,   379,   380,   374,    -1,    -1,
     377,    -1,    -1,    -1,    -1,    -1,   383,    -1,    -1,    -1,
      -1,    -1,    47,    -1,   398,   392,    -1,    10,    11,    12,
      -1,    -1,    -1,    -1,   388,   389,    -1,    -1,    -1,    -1,
      -1,   395,    25,    26,    27,    -1,    29,    30,    31,    32,
      33,    -1,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    -1,    48,    49,    50,    51,    52,
      53,    12,    -1,    56,    -1,    16,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    66,    67,    68,    -1,    28,    -1,    -1,
      -1,    32,    33,    -1,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    -1,    48,    49,    50,
      51,    52,    53,    -1,    -1,    56,    12,    13,    14,    -1,
      -1,    -1,    -1,    64,    65,    66,    67,    68,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    -1,    48,    49,    50,    51,    52,    53,    -1,    -1,
      56,    12,    13,    14,    -1,    -1,    -1,    -1,    -1,    -1,
      66,    67,    68,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    12,    48,    49,    50,
      51,    52,    53,    -1,    -1,    56,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    66,    67,    68,    -1,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    12,    48,    49,    50,    51,    52,    53,    -1,    -1,
      56,    22,    23,    -1,    -1,    -1,    -1,    -1,    64,    65,
      66,    67,    68,    -1,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    12,    48,    49,    50,
      51,    52,    53,    -1,    -1,    56,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    66,    67,    68,    -1,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    -1,    48,    49,    50,    51,    52,    53,    -1,    -1,
      56,    57,    12,    -1,    14,    -1,    -1,    -1,    -1,    -1,
      66,    67,    68,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    12,    48,    49,
      50,    51,    52,    53,    -1,    -1,    56,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    66,    67,    68,    -1,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    12,    48,    49,    50,    51,    52,    53,    -1,
      -1,    56,    -1,    -1,    59,    -1,    -1,    -1,    -1,    -1,
      -1,    66,    67,    68,    -1,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    12,    48,    49,
      50,    51,    52,    53,    54,    -1,    56,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    66,    67,    68,    -1,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    12,    48,    49,    50,    51,    52,    53,    -1,
      -1,    56,    -1,    -1,    -1,    -1,    -1,    -1,    63,    -1,
      -1,    66,    67,    68,    -1,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    -1,    48,    49,
      50,    51,    52,    53,    12,    -1,    56,    -1,    -1,    -1,
      -1,    -1,    -1,    63,    -1,    -1,    66,    67,    68,    -1,
      28,    -1,    -1,    -1,    -1,    -1,    -1,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    12,
      48,    49,    50,    51,    52,    53,    -1,    -1,    56,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    -1,    -1,    66,    67,
      68,    -1,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    12,    48,    49,    50,    51,    52,
      53,    -1,    -1,    56,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    -1,    -1,    66,    67,    68,    -1,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    12,
      48,    49,    50,    51,    52,    53,    -1,    -1,    56,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    -1,    -1,    66,    67,
      68,    -1,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    12,    48,    49,    50,    51,    52,
      53,    -1,    -1,    56,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    66,    67,    68,    -1,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    12,
      48,    49,    50,    51,    52,    53,    -1,    -1,    56,    57,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,    67,
      68,    -1,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    12,    48,    49,    50,    51,    52,
      53,    -1,    -1,    56,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    66,    67,    68,    -1,    35,    36,    -1,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    12,
      48,    49,    50,    51,    52,    -1,    -1,    -1,    56,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,    67,
      68,    -1,    35,    -1,    -1,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    12,    48,    49,    50,    51,    52,
      -1,    -1,    -1,    56,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    66,    67,    68,    -1,    35,    -1,    -1,
      -1,    -1,    -1,    -1,    42,    43,    44,    45,    -1,    -1,
      48,    49,    50,    51,    52,    19,    -1,    -1,    56,    -1,
      -1,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      -1,    35,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    46,    -1,    48,    49,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    58,    -1,    60,    -1,    62,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    -1,    35,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      46,    -1,    48,    49,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    58,    -1,    60,    -1,    62,    -1,    64,    65,
      66,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      -1,    35,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    46,    -1,    48,    49,    -1,    -1,    -1,    -1,
      54,    -1,    -1,    -1,    58,    -1,    60,    -1,    62,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    -1,    35,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      46,    -1,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    58,    -1,    60,    -1,    62,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    -1,    35,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    46,    -1,
      48,    49,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      58,    59,    60,    -1,    62,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    -1,    35,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    46,    -1,    48,    49,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    58,    -1,
      60,    -1,    62,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    -1,    35,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    46,    -1,    48,    49,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    58,    -1,    60,    -1,
      62,    42,    43,    44,    45,    -1,    -1,    48,    49,    50,
      51,    52,    -1,    -1,    -1,    56
};

  /* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
     symbol of state STATE-NUM.  */
static const yytype_uint8 yystos[] =
{
       0,    13,    80,    82,    81,    83,    85,     0,    28,    32,
      33,    78,    79,   178,     3,     4,     5,     6,     7,     8,
       9,    20,    21,    22,    23,    24,    47,    84,    86,    93,
      96,    98,   100,   104,   106,   115,   120,   121,   123,   124,
     126,   128,   130,    57,    78,    28,    87,    88,   180,   101,
     102,   180,    25,    26,    27,    28,    29,    30,    31,    35,
      46,    48,    49,    58,    60,    62,   136,   137,   138,   141,
     142,   143,   148,   149,   156,   171,   175,   176,   178,    19,
     134,   136,    13,    15,   103,   105,   113,   116,   136,   136,
     136,   125,   136,   127,   136,   131,    58,    14,   103,   109,
     113,    78,    57,    12,    57,    34,   136,    58,   136,   136,
     136,   172,   157,   150,    12,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    48,    49,    50,
      51,    52,    53,    56,    66,    67,    68,   133,    55,    58,
      62,    76,   135,    28,   114,    28,   155,   107,   108,   180,
     109,   117,   118,   136,    57,    12,    14,   122,   122,    13,
     122,    13,   122,   136,    99,   180,   155,    28,   111,   155,
     109,   180,    64,    65,    66,    90,    91,    92,   136,   169,
     170,   102,   136,   140,    59,    83,    28,    29,    32,    62,
     158,   159,   160,   179,   136,   151,   152,   153,   136,    12,
      38,    39,    46,   136,   136,   136,   136,   136,   136,   136,
     136,   136,   136,   136,   136,   136,   136,   136,   136,    54,
     136,   136,    35,    35,    35,    12,    40,    41,    42,    43,
      44,    45,    28,   139,    50,   136,   161,    28,   178,   136,
      14,   107,   156,    57,    34,   155,    57,    10,    11,   119,
     174,   176,   178,   136,    28,    29,    33,   177,    28,    29,
      33,   177,   155,   155,   136,   155,   136,   155,   132,    97,
     100,    34,   112,   155,   155,    95,    66,    94,   169,    17,
      18,   136,   136,   144,   145,   146,   147,    59,    54,   136,
      61,    57,    54,    63,    57,   136,   136,   136,   136,   136,
      54,    12,    12,    12,   136,   136,   136,   136,   136,   136,
     136,   144,    63,    50,   173,   180,   108,   136,   118,   122,
     122,    21,    59,   100,   136,   110,   180,    28,    89,    28,
     154,   136,   136,    16,    28,   165,   167,   169,   178,    59,
      83,    57,   136,    63,   160,   136,   153,   136,   136,   136,
     136,    59,     5,   162,   155,   155,   136,    57,   136,   136,
      28,    28,    29,   178,    57,    28,   178,   145,    54,   136,
       9,   163,    22,    23,   129,   180,    28,    28,   136,   136,
     168,   136,   136,     6,   164,   136,   156,   136,   167,   167,
     165,   166,    57,   136,    63,   122,   155,   155,    57,   136,
     155,   165
};

  /* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const yytype_uint8 yyr1[] =
{
       0,    77,    78,    78,    79,    79,    79,    80,    81,    80,
      82,    83,    84,    84,    84,    84,    84,    84,    85,    85,
      86,    86,    86,    86,    86,    86,    86,    86,    86,    86,
      86,    86,    87,    87,    88,    89,    89,    89,    90,    91,
      92,    94,    93,    95,    93,    93,    93,    96,    97,    97,
      99,    98,   100,   101,   101,   102,   103,   105,   104,   106,
     106,   106,   106,   106,   106,   107,   107,   108,   109,   109,
     109,   110,   110,   112,   111,   114,   113,   116,   115,   117,
     117,   118,   119,   119,   119,   119,   120,   120,   121,   122,
     122,   123,   124,   125,   125,   126,   127,   127,   128,   129,
     129,   131,   132,   130,   133,   133,   133,   135,   134,   134,
     136,   136,   136,   136,   136,   136,   137,   137,   139,   138,
     140,   138,   141,   141,   141,   142,   142,   142,   142,   142,
     142,   142,   142,   142,   142,   142,   142,   142,   142,   142,
     142,   142,   142,   142,   142,   142,   142,   142,   142,   142,
     142,   142,   142,   142,   142,   142,   143,   143,   144,   144,
     145,   146,   145,   147,   147,   148,   148,   150,   149,   151,
     151,   151,   152,   152,   153,   154,   154,   154,   155,   155,
     157,   156,   158,   158,   158,   159,   159,   160,   160,   160,
     160,   161,   161,   162,   162,   163,   163,   163,   164,   164,
     165,   165,   165,   165,   166,   166,   167,   168,   167,   167,
     167,   169,   169,   169,   170,   170,   171,   171,   171,   171,
     171,   172,   171,   171,   171,   171,   173,   171,   174,   174,
     175,   175,   176,   176,   176,   176,   176,   177,   177,   177,
     178,   178,   179,   179,   180
};

  /* YYR2[YYN] -- Number of symbols on the right hand side of rule YYN.  */
static const yytype_uint8 yyr2[] =
{
       0,     2,     1,     1,     1,     3,     2,     0,     0,     3,
       2,     2,     1,     1,     1,     1,     1,     1,     0,     2,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     3,     1,     0,     2,     4,     3,     7,
       7,     0,     6,     0,     6,     4,     4,     2,     1,     2,
       0,     5,     2,     1,     3,     3,     4,     0,     3,     3,
       3,     4,     4,     3,     4,     1,     3,     3,     0,     2,
       4,     1,     3,     0,     3,     0,     3,     0,     3,     1,
       3,     2,     0,     1,     1,     1,     2,     4,     2,     2,
       2,     4,     4,     3,     5,     2,     3,     5,     2,     1,
       1,     0,     0,    10,     1,     1,     1,     0,     3,     1,
       1,     1,     1,     1,     1,     3,     1,     3,     0,     5,
       0,     5,     2,     2,     2,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     4,
       4,     4,     4,     3,     3,     3,     4,     4,     4,     4,
       4,     4,     4,     5,     5,     5,     5,     4,     0,     1,
       1,     0,     2,     1,     3,     1,     1,     0,     4,     0,
       1,     2,     1,     3,     1,     0,     2,     4,     0,     2,
       0,     4,     0,     1,     2,     1,     3,     1,     3,     3,
       5,     1,     2,     0,     2,     0,     2,     4,     0,     2,
       1,     1,     2,     2,     1,     3,     1,     0,     4,     2,
       2,     1,     1,     1,     1,     2,     1,     1,     1,     1,
       3,     0,     4,     3,     3,     4,     0,     8,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1
};


#define yyerrok         (yyerrstatus = 0)
#define yyclearin       (yychar = YYEMPTY)
#define YYEMPTY         (-2)
#define YYEOF           0

#define YYACCEPT        goto yyacceptlab
#define YYABORT         goto yyabortlab
#define YYERROR         goto yyerrorlab


#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)                                    \
  do                                                              \
    if (yychar == YYEMPTY)                                        \
      {                                                           \
        yychar = (Token);                                         \
        yylval = (Value);                                         \
        YYPOPSTACK (yylen);                                       \
        yystate = *yyssp;                                         \
        goto yybackup;                                            \
      }                                                           \
    else                                                          \
      {                                                           \
        yyerror (&yylloc, parser, YY_("syntax error: cannot back up")); \
        YYERROR;                                                  \
      }                                                           \
  while (0)

/* Error token number */
#define YYTERROR        1
#define YYERRCODE       256


/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)                                \
    do                                                                  \
      if (N)                                                            \
        {                                                               \
          (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;        \
          (Current).first_column = YYRHSLOC (Rhs, 1).first_column;      \
          (Current).last_line    = YYRHSLOC (Rhs, N).last_line;         \
          (Current).last_column  = YYRHSLOC (Rhs, N).last_column;       \
        }                                                               \
      else                                                              \
        {                                                               \
          (Current).first_line   = (Current).last_line   =              \
            YYRHSLOC (Rhs, 0).last_line;                                \
          (Current).first_column = (Current).last_column =              \
            YYRHSLOC (Rhs, 0).last_column;                              \
        }                                                               \
    while (0)
#endif

#define YYRHSLOC(Rhs, K) ((Rhs)[K])


/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)                        \
do {                                            \
  if (yydebug)                                  \
    YYFPRINTF Args;                             \
} while (0)


/* YY_LOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */

#ifndef YY_LOCATION_PRINT
# if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL

/* Print *YYLOCP on YYO.  Private, do not rely on its existence. */

YY_ATTRIBUTE_UNUSED
static int
yy_location_print_ (FILE *yyo, YYLTYPE const * const yylocp)
{
  int res = 0;
  int end_col = 0 != yylocp->last_column ? yylocp->last_column - 1 : 0;
  if (0 <= yylocp->first_line)
    {
      res += YYFPRINTF (yyo, "%d", yylocp->first_line);
      if (0 <= yylocp->first_column)
        res += YYFPRINTF (yyo, ".%d", yylocp->first_column);
    }
  if (0 <= yylocp->last_line)
    {
      if (yylocp->first_line < yylocp->last_line)
        {
          res += YYFPRINTF (yyo, "-%d", yylocp->last_line);
          if (0 <= end_col)
            res += YYFPRINTF (yyo, ".%d", end_col);
        }
      else if (0 <= end_col && yylocp->first_column < end_col)
        res += YYFPRINTF (yyo, "-%d", end_col);
    }
  return res;
 }

#  define YY_LOCATION_PRINT(File, Loc)          \
  yy_location_print_ (File, &(Loc))

# else
#  define YY_LOCATION_PRINT(File, Loc) ((void) 0)
# endif
#endif


# define YY_SYMBOL_PRINT(Title, Type, Value, Location)                    \
do {                                                                      \
  if (yydebug)                                                            \
    {                                                                     \
      YYFPRINTF (stderr, "%s ", Title);                                   \
      yy_symbol_print (stderr,                                            \
                  Type, Value, Location, parser); \
      YYFPRINTF (stderr, "\n");                                           \
    }                                                                     \
} while (0)


/*-----------------------------------.
| Print this symbol's value on YYO.  |
`-----------------------------------*/

static void
yy_symbol_value_print (FILE *yyo, int yytype, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp, arangodb::aql::Parser* parser)
{
  FILE *yyoutput = yyo;
  YYUSE (yyoutput);
  YYUSE (yylocationp);
  YYUSE (parser);
  if (!yyvaluep)
    return;
# ifdef YYPRINT
  if (yytype < YYNTOKENS)
    YYPRINT (yyo, yytoknum[yytype], *yyvaluep);
# endif
  YYUSE (yytype);
}


/*---------------------------.
| Print this symbol on YYO.  |
`---------------------------*/

static void
yy_symbol_print (FILE *yyo, int yytype, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp, arangodb::aql::Parser* parser)
{
  YYFPRINTF (yyo, "%s %s (",
             yytype < YYNTOKENS ? "token" : "nterm", yytname[yytype]);

  YY_LOCATION_PRINT (yyo, *yylocationp);
  YYFPRINTF (yyo, ": ");
  yy_symbol_value_print (yyo, yytype, yyvaluep, yylocationp, parser);
  YYFPRINTF (yyo, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

static void
yy_stack_print (yytype_int16 *yybottom, yytype_int16 *yytop)
{
  YYFPRINTF (stderr, "Stack now");
  for (; yybottom <= yytop; yybottom++)
    {
      int yybot = *yybottom;
      YYFPRINTF (stderr, " %d", yybot);
    }
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)                            \
do {                                                            \
  if (yydebug)                                                  \
    yy_stack_print ((Bottom), (Top));                           \
} while (0)


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

static void
yy_reduce_print (yytype_int16 *yyssp, YYSTYPE *yyvsp, YYLTYPE *yylsp, int yyrule, arangodb::aql::Parser* parser)
{
  unsigned long yylno = yyrline[yyrule];
  int yynrhs = yyr2[yyrule];
  int yyi;
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %lu):\n",
             yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr,
                       yystos[yyssp[yyi + 1 - yynrhs]],
                       &yyvsp[(yyi + 1) - (yynrhs)]
                       , &(yylsp[(yyi + 1) - (yynrhs)])                       , parser);
      YYFPRINTF (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)          \
do {                                    \
  if (yydebug)                          \
    yy_reduce_print (yyssp, yyvsp, yylsp, Rule, parser); \
} while (0)

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
# define YY_SYMBOL_PRINT(Title, Type, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif


#if YYERROR_VERBOSE

# ifndef yystrlen
#  if defined __GLIBC__ && defined _STRING_H
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
static YYSIZE_T
yystrlen (const char *yystr)
{
  YYSIZE_T yylen;
  for (yylen = 0; yystr[yylen]; yylen++)
    continue;
  return yylen;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
static char *
yystpcpy (char *yydest, const char *yysrc)
{
  char *yyd = yydest;
  const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif

# ifndef yytnamerr
/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
   quotes and backslashes, so that it's suitable for yyerror.  The
   heuristic is that double-quoting is unnecessary unless the string
   contains an apostrophe, a comma, or backslash (other than
   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
   null, do not copy; instead, return the length of what the result
   would have been.  */
static YYSIZE_T
yytnamerr (char *yyres, const char *yystr)
{
  if (*yystr == '"')
    {
      YYSIZE_T yyn = 0;
      char const *yyp = yystr;

      for (;;)
        switch (*++yyp)
          {
          case '\'':
          case ',':
            goto do_not_strip_quotes;

          case '\\':
            if (*++yyp != '\\')
              goto do_not_strip_quotes;
            else
              goto append;

          append:
          default:
            if (yyres)
              yyres[yyn] = *yyp;
            yyn++;
            break;

          case '"':
            if (yyres)
              yyres[yyn] = '\0';
            return yyn;
          }
    do_not_strip_quotes: ;
    }

  if (! yyres)
    return yystrlen (yystr);

  return (YYSIZE_T) (yystpcpy (yyres, yystr) - yyres);
}
# endif

/* Copy into *YYMSG, which is of size *YYMSG_ALLOC, an error message
   about the unexpected token YYTOKEN for the state stack whose top is
   YYSSP.

   Return 0 if *YYMSG was successfully written.  Return 1 if *YYMSG is
   not large enough to hold the message.  In that case, also set
   *YYMSG_ALLOC to the required number of bytes.  Return 2 if the
   required number of bytes is too large to store.  */
static int
yysyntax_error (YYSIZE_T *yymsg_alloc, char **yymsg,
                yytype_int16 *yyssp, int yytoken)
{
  YYSIZE_T yysize0 = yytnamerr (YY_NULLPTR, yytname[yytoken]);
  YYSIZE_T yysize = yysize0;
  enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
  /* Internationalized format string. */
  const char *yyformat = YY_NULLPTR;
  /* Arguments of yyformat. */
  char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
  /* Number of reported tokens (one for the "unexpected", one per
     "expected"). */
  int yycount = 0;

  /* There are many possibilities here to consider:
     - If this state is a consistent state with a default action, then
       the only way this function was invoked is if the default action
       is an error action.  In that case, don't check for expected
       tokens because there are none.
     - The only way there can be no lookahead present (in yychar) is if
       this state is a consistent state with a default action.  Thus,
       detecting the absence of a lookahead is sufficient to determine
       that there is no unexpected or expected token to report.  In that
       case, just report a simple "syntax error".
     - Don't assume there isn't a lookahead just because this state is a
       consistent state with a default action.  There might have been a
       previous inconsistent state, consistent state with a non-default
       action, or user semantic action that manipulated yychar.
     - Of course, the expected token list depends on states to have
       correct lookahead information, and it depends on the parser not
       to perform extra reductions after fetching a lookahead from the
       scanner and before detecting a syntax error.  Thus, state merging
       (from LALR or IELR) and default reductions corrupt the expected
       token list.  However, the list is correct for canonical LR with
       one exception: it will still contain any token that will not be
       accepted due to an error action in a later state.
  */
  if (yytoken != YYEMPTY)
    {
      int yyn = yypact[*yyssp];
      yyarg[yycount++] = yytname[yytoken];
      if (!yypact_value_is_default (yyn))
        {
          /* Start YYX at -YYN if negative to avoid negative indexes in
             YYCHECK.  In other words, skip the first -YYN actions for
             this state because they are default actions.  */
          int yyxbegin = yyn < 0 ? -yyn : 0;
          /* Stay within bounds of both yycheck and yytname.  */
          int yychecklim = YYLAST - yyn + 1;
          int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
          int yyx;

          for (yyx = yyxbegin; yyx < yyxend; ++yyx)
            if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR
                && !yytable_value_is_error (yytable[yyx + yyn]))
              {
                if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
                  {
                    yycount = 1;
                    yysize = yysize0;
                    break;
                  }
                yyarg[yycount++] = yytname[yyx];
                {
                  YYSIZE_T yysize1 = yysize + yytnamerr (YY_NULLPTR, yytname[yyx]);
                  if (yysize <= yysize1 && yysize1 <= YYSTACK_ALLOC_MAXIMUM)
                    yysize = yysize1;
                  else
                    return 2;
                }
              }
        }
    }

  switch (yycount)
    {
# define YYCASE_(N, S)                      \
      case N:                               \
        yyformat = S;                       \
      break
    default: /* Avoid compiler warnings. */
      YYCASE_(0, YY_("syntax error"));
      YYCASE_(1, YY_("syntax error, unexpected %s"));
      YYCASE_(2, YY_("syntax error, unexpected %s, expecting %s"));
      YYCASE_(3, YY_("syntax error, unexpected %s, expecting %s or %s"));
      YYCASE_(4, YY_("syntax error, unexpected %s, expecting %s or %s or %s"));
      YYCASE_(5, YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s"));
# undef YYCASE_
    }

  {
    YYSIZE_T yysize1 = yysize + yystrlen (yyformat);
    if (yysize <= yysize1 && yysize1 <= YYSTACK_ALLOC_MAXIMUM)
      yysize = yysize1;
    else
      return 2;
  }

  if (*yymsg_alloc < yysize)
    {
      *yymsg_alloc = 2 * yysize;
      if (! (yysize <= *yymsg_alloc
             && *yymsg_alloc <= YYSTACK_ALLOC_MAXIMUM))
        *yymsg_alloc = YYSTACK_ALLOC_MAXIMUM;
      return 1;
    }

  /* Avoid sprintf, as that infringes on the user's name space.
     Don't have undefined behavior even if the translation
     produced a string with the wrong number of "%s"s.  */
  {
    char *yyp = *yymsg;
    int yyi = 0;
    while ((*yyp = *yyformat) != '\0')
      if (*yyp == '%' && yyformat[1] == 's' && yyi < yycount)
        {
          yyp += yytnamerr (yyp, yyarg[yyi++]);
          yyformat += 2;
        }
      else
        {
          yyp++;
          yyformat++;
        }
  }
  return 0;
}
#endif /* YYERROR_VERBOSE */

/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

static void
yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep, YYLTYPE *yylocationp, arangodb::aql::Parser* parser)
{
  YYUSE (yyvaluep);
  YYUSE (yylocationp);
  YYUSE (parser);
  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  YYUSE (yytype);
  YY_IGNORE_MAYBE_UNINITIALIZED_END
}




/*----------.
| yyparse.  |
`----------*/

int
yyparse (arangodb::aql::Parser* parser)
{
/* The lookahead symbol.  */
int yychar;


/* The semantic value of the lookahead symbol.  */
/* Default value used for initialization, for pacifying older GCCs
   or non-GCC compilers.  */
YY_INITIAL_VALUE (static YYSTYPE yyval_default;)
YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);

/* Location data for the lookahead symbol.  */
static YYLTYPE yyloc_default
# if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL
  = { 1, 1, 1, 1 }
# endif
;
YYLTYPE yylloc = yyloc_default;

    /* Number of syntax errors so far.  */
    int yynerrs;

    int yystate;
    /* Number of tokens to shift before error messages enabled.  */
    int yyerrstatus;

    /* The stacks and their tools:
       'yyss': related to states.
       'yyvs': related to semantic values.
       'yyls': related to locations.

       Refer to the stacks through separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */

    /* The state stack.  */
    yytype_int16 yyssa[YYINITDEPTH];
    yytype_int16 *yyss;
    yytype_int16 *yyssp;

    /* The semantic value stack.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE *yyvs;
    YYSTYPE *yyvsp;

    /* The location stack.  */
    YYLTYPE yylsa[YYINITDEPTH];
    YYLTYPE *yyls;
    YYLTYPE *yylsp;

    /* The locations where the error started and ended.  */
    YYLTYPE yyerror_range[3];

    YYSIZE_T yystacksize;

  int yyn;
  int yyresult;
  /* Lookahead token as an internal (translated) token number.  */
  int yytoken = 0;
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;
  YYLTYPE yyloc;

#if YYERROR_VERBOSE
  /* Buffer for error messages, and its allocated size.  */
  char yymsgbuf[128];
  char *yymsg = yymsgbuf;
  YYSIZE_T yymsg_alloc = sizeof yymsgbuf;
#endif

#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N), yylsp -= (N))

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  yyssp = yyss = yyssa;
  yyvsp = yyvs = yyvsa;
  yylsp = yyls = yylsa;
  yystacksize = YYINITDEPTH;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY; /* Cause a token to be read.  */
  yylsp[0] = yylloc;
  goto yysetstate;


/*------------------------------------------------------------.
| yynewstate -- push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;


/*--------------------------------------------------------------------.
| yynewstate -- set current state (the top of the stack) to yystate.  |
`--------------------------------------------------------------------*/
yysetstate:
  YYDPRINTF ((stderr, "Entering state %d\n", yystate));
  YY_ASSERT (0 <= yystate && yystate < YYNSTATES);
  *yyssp = (yytype_int16) yystate;

  if (yyss + yystacksize - 1 <= yyssp)
#if !defined yyoverflow && !defined YYSTACK_RELOCATE
    goto yyexhaustedlab;
#else
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = (YYSIZE_T) (yyssp - yyss + 1);

# if defined yyoverflow
      {
        /* Give user a chance to reallocate the stack.  Use copies of
           these so that the &'s don't force the real ones into
           memory.  */
        YYSTYPE *yyvs1 = yyvs;
        yytype_int16 *yyss1 = yyss;
        YYLTYPE *yyls1 = yyls;

        /* Each stack pointer address is followed by the size of the
           data in use in that stack, in bytes.  This used to be a
           conditional around just the two extra args, but that might
           be undefined if yyoverflow is a macro.  */
        yyoverflow (YY_("memory exhausted"),
                    &yyss1, yysize * sizeof (*yyssp),
                    &yyvs1, yysize * sizeof (*yyvsp),
                    &yyls1, yysize * sizeof (*yylsp),
                    &yystacksize);
        yyss = yyss1;
        yyvs = yyvs1;
        yyls = yyls1;
      }
# else /* defined YYSTACK_RELOCATE */
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
        goto yyexhaustedlab;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
        yystacksize = YYMAXDEPTH;

      {
        yytype_int16 *yyss1 = yyss;
        union yyalloc *yyptr =
          (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
        if (! yyptr)
          goto yyexhaustedlab;
        YYSTACK_RELOCATE (yyss_alloc, yyss);
        YYSTACK_RELOCATE (yyvs_alloc, yyvs);
        YYSTACK_RELOCATE (yyls_alloc, yyls);
# undef YYSTACK_RELOCATE
        if (yyss1 != yyssa)
          YYSTACK_FREE (yyss1);
      }
# endif

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;
      yylsp = yyls + yysize - 1;

      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
                  (unsigned long) yystacksize));

      if (yyss + yystacksize - 1 <= yyssp)
        YYABORT;
    }
#endif /* !defined yyoverflow && !defined YYSTACK_RELOCATE */

  if (yystate == YYFINAL)
    YYACCEPT;

  goto yybackup;


/*-----------.
| yybackup.  |
`-----------*/
yybackup:
  /* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to lookahead token.  */
  yyn = yypact[yystate];
  if (yypact_value_is_default (yyn))
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = yylex (&yylval, &yylloc, scanner);
    }

  if (yychar <= YYEOF)
    {
      yychar = yytoken = YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yytable_value_is_error (yyn))
        goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the lookahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);

  /* Discard the shifted token.  */
  yychar = YYEMPTY;

  yystate = yyn;
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END
  *++yylsp = yylloc;
  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     '$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];

  /* Default location. */
  YYLLOC_DEFAULT (yyloc, (yylsp - yylen), yylen);
  yyerror_range[1] = yyloc;
  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
  case 2:
#line 398 "Aql/grammar.y"
    {
      (yyval.node) = parser->ast()->createNodeValueString((yyvsp[0].strval).value, (yyvsp[0].strval).length);
    }
#line 2180 "Aql/grammar.cpp"
    break;

  case 3:
#line 401 "Aql/grammar.y"
    {
      char const* p = (yyvsp[0].node)->getStringValue();
      size_t const len = (yyvsp[0].node)->getStringLength();

      if (len < 2 || *p != '@') {
        parser->registerParseError(TRI_ERROR_QUERY_BIND_PARAMETER_TYPE, TRI_errno_string(TRI_ERROR_QUERY_BIND_PARAMETER_TYPE), p, yylloc.first_line, yylloc.first_column);
      }

      (yyval.node) = (yyvsp[0].node);
    }
#line 2195 "Aql/grammar.cpp"
    break;

  case 4:
#line 414 "Aql/grammar.y"
    {
       auto node = static_cast<AstNode*>(parser->peekStack());
       node->addMember((yyvsp[0].node));
     }
#line 2204 "Aql/grammar.cpp"
    break;

  case 5:
#line 418 "Aql/grammar.y"
    {
       auto node = static_cast<AstNode*>(parser->peekStack());
       node->addMember((yyvsp[0].node));
     }
#line 2213 "Aql/grammar.cpp"
    break;

  case 6:
#line 422 "Aql/grammar.y"
    {
       auto node = static_cast<AstNode*>(parser->peekStack());
       node->addMember((yyvsp[0].node));
     }
#line 2222 "Aql/grammar.cpp"
    break;

  case 7:
#line 429 "Aql/grammar.y"
    {
     }
#line 2229 "Aql/grammar.cpp"
    break;

  case 8:
#line 431 "Aql/grammar.y"
    {
      auto node = parser->ast()->createNodeArray();
      parser->pushStack(node);
     }
#line 2238 "Aql/grammar.cpp"
    break;

  case 9:
#line 434 "Aql/grammar.y"
    {
      auto node = static_cast<AstNode*>(parser->popStack());
      auto const& resolver = parser->query().resolver();
      auto withNode = parser->ast()->createNodeWithCollections(node, resolver);
      parser->ast()->addOperation(withNode);
     }
#line 2249 "Aql/grammar.cpp"
    break;

  case 10:
#line 443 "Aql/grammar.y"
    {
    }
#line 2256 "Aql/grammar.cpp"
    break;

  case 11:
#line 448 "Aql/grammar.y"
    {
    }
#line 2263 "Aql/grammar.cpp"
    break;

  case 12:
#line 453 "Aql/grammar.y"
    {
    }
#line 2270 "Aql/grammar.cpp"
    break;

  case 13:
#line 455 "Aql/grammar.y"
    {
      parser->ast()->scopes()->endNested();
    }
#line 2278 "Aql/grammar.cpp"
    break;

  case 14:
#line 458 "Aql/grammar.y"
    {
      parser->ast()->scopes()->endNested();
    }
#line 2286 "Aql/grammar.cpp"
    break;

  case 15:
#line 461 "Aql/grammar.y"
    {
      parser->ast()->scopes()->endNested();
    }
#line 2294 "Aql/grammar.cpp"
    break;

  case 16:
#line 464 "Aql/grammar.y"
    {
      parser->ast()->scopes()->endNested();
    }
#line 2302 "Aql/grammar.cpp"
    break;

  case 17:
#line 467 "Aql/grammar.y"
    {
      parser->ast()->scopes()->endNested();
    }
#line 2310 "Aql/grammar.cpp"
    break;

  case 18:
#line 473 "Aql/grammar.y"
    {
    }
#line 2317 "Aql/grammar.cpp"
    break;

  case 19:
#line 475 "Aql/grammar.y"
    {
    }
#line 2324 "Aql/grammar.cpp"
    break;

  case 20:
#line 480 "Aql/grammar.y"
    {
    }
#line 2331 "Aql/grammar.cpp"
    break;

  case 21:
#line 482 "Aql/grammar.y"
    {
    }
#line 2338 "Aql/grammar.cpp"
    break;

  case 22:
#line 484 "Aql/grammar.y"
    {
    }
#line 2345 "Aql/grammar.cpp"
    break;

  case 23:
#line 486 "Aql/grammar.y"
    {
    }
#line 2352 "Aql/grammar.cpp"
    break;

  case 24:
#line 488 "Aql/grammar.y"
    {
    }
#line 2359 "Aql/grammar.cpp"
    break;

  case 25:
#line 490 "Aql/grammar.y"
    {
    }
#line 2366 "Aql/grammar.cpp"
    break;

  case 26:
#line 492 "Aql/grammar.y"
    {
    }
#line 2373 "Aql/grammar.cpp"
    break;

  case 27:
#line 494 "Aql/grammar.y"
    {
    }
#line 2380 "Aql/grammar.cpp"
    break;

  case 28:
#line 496 "Aql/grammar.y"
    {
    }
#line 2387 "Aql/grammar.cpp"
    break;

  case 29:
#line 498 "Aql/grammar.y"
    {
    }
#line 2394 "Aql/grammar.cpp"
    break;

  case 30:
#line 500 "Aql/grammar.y"
    {
    }
#line 2401 "Aql/grammar.cpp"
    break;

  case 31:
#line 502 "Aql/grammar.y"
    {
    }
#line 2408 "Aql/grammar.cpp"
    break;

  case 32:
#line 507 "Aql/grammar.y"
    {
      auto wrapperNode = parser->ast()->createNodeArray();
      parser->pushArray(wrapperNode);
      // This is guaranteed to be called on the first variable
      AstNode* node = parser->ast()->createNodeValueString((yyvsp[0].strval).value, (yyvsp[0].strval).length);
      parser->pushArrayElement(node);
    }
#line 2420 "Aql/grammar.cpp"
    break;

  case 33:
#line 514 "Aql/grammar.y"
    {
      AstNode* node = parser->ast()->createNodeValueString((yyvsp[0].strval).value, (yyvsp[0].strval).length);
      parser->pushArrayElement(node);
    }
#line 2429 "Aql/grammar.cpp"
    break;

  case 34:
#line 521 "Aql/grammar.y"
    {
      (yyval.node) = parser->popArray();
    }
#line 2437 "Aql/grammar.cpp"
    break;

  case 35:
#line 527 "Aql/grammar.y"
    {
      auto node = static_cast<AstNode*>(parser->peekStack());
      // Prune
      node->addMember(parser->ast()->createNodeNop());
      // Options
      node->addMember(parser->ast()->createNodeNop());
    }
#line 2449 "Aql/grammar.cpp"
    break;

  case 36:
#line 534 "Aql/grammar.y"
    {
      auto node = static_cast<AstNode*>(parser->peekStack());
      if (TRI_CaseEqualString((yyvsp[-1].strval).value, "PRUNE")) {
        /* Only Prune */
        if ((yyvsp[0].node) == nullptr) {
          ABORT_OOM
        }
        // Prune
        node->addMember((yyvsp[0].node));
        // Options
        node->addMember(parser->ast()->createNodeNop());
      } else if (TRI_CaseEqualString((yyvsp[-1].strval).value, "OPTIONS")) {
        /* Only Options */
        if ((yyvsp[0].node) == nullptr) {
          ABORT_OOM
        }
        if (!(yyvsp[0].node)->isObject()) {
          parser->registerParseError(TRI_ERROR_QUERY_PARSE, "traversal 'OPTIONS' have to be an object", (yyvsp[-1].strval).value, yylloc.first_line, yylloc.first_column);
        }
        // Prune
        node->addMember(parser->ast()->createNodeNop());
        // Options
        node->addMember((yyvsp[0].node));
      } else {
        parser->registerParseError(TRI_ERROR_QUERY_PARSE, "unexpected qualifier '%s', expecting 'PRUNE' or 'OPTIONS'", (yyvsp[-1].strval).value, yylloc.first_line, yylloc.first_column);
      }
    }
#line 2481 "Aql/grammar.cpp"
    break;

  case 37:
#line 561 "Aql/grammar.y"
    {
      /* prune and options */
      auto node = static_cast<AstNode*>(parser->peekStack());
      if (!TRI_CaseEqualString((yyvsp[-3].strval).value, "PRUNE")) {
        parser->registerParseError(TRI_ERROR_QUERY_PARSE, "unexpected qualifier '%s', expecting 'PRUNE'", (yyvsp[-3].strval).value, yylloc.first_line, yylloc.first_column);
      }
      if ((yyvsp[-2].node) == nullptr) {
        ABORT_OOM
      }
      if (!TRI_CaseEqualString((yyvsp[-1].strval).value, "OPTIONS")) {
        parser->registerParseError(TRI_ERROR_QUERY_PARSE, "unexpected qualifier '%s', expecting 'OPTIONS'", (yyvsp[-1].strval).value, yylloc.first_line, yylloc.first_column);
      }
      if ((yyvsp[0].node) == nullptr) {
        ABORT_OOM
      }
      // Prune
      node->addMember((yyvsp[-2].node));
      // Options
      node->addMember((yyvsp[0].node));
    }
#line 2506 "Aql/grammar.cpp"
    break;

  case 38:
#line 584 "Aql/grammar.y"
    {
      auto infoNode = parser->ast()->createNodeArray();
      // Direction
      infoNode->addMember((yyvsp[-2].node));
      // Source
      infoNode->addMember((yyvsp[-1].node));
      // Graph
      infoNode->addMember((yyvsp[0].node));
      (yyval.node) = infoNode;
    }
#line 2521 "Aql/grammar.cpp"
    break;

  case 39:
#line 597 "Aql/grammar.y"
    {
      if (!TRI_CaseEqualString((yyvsp[-3].strval).value, "TO")) {
        parser->registerParseError(TRI_ERROR_QUERY_PARSE, "unexpected qualifier '%s', expecting 'TO'", (yyvsp[-3].strval).value, yylloc.first_line, yylloc.first_column);
      }
      auto infoNode = parser->ast()->createNodeArray();
      auto dirNode = parser->ast()->createNodeValueInt((yyvsp[-6].intval));
      // Direction
      infoNode->addMember(dirNode);
      // Source
      infoNode->addMember((yyvsp[-4].node));
      // Target
      infoNode->addMember((yyvsp[-2].node));
      // Graph
      infoNode->addMember((yyvsp[-1].node));
      // Opts
      auto opts = parser->ast()->createNodeOptions((yyvsp[0].node));
      TRI_ASSERT(opts != nullptr);
      infoNode->addMember(opts);
      (yyval.node) = infoNode;
    }
#line 2546 "Aql/grammar.cpp"
    break;

  case 40:
#line 620 "Aql/grammar.y"
    {
      if (!TRI_CaseEqualString((yyvsp[-3].strval).value, "TO")) {
        parser->registerParseError(TRI_ERROR_QUERY_PARSE, "unexpected qualifier '%s', expecting 'TO'", (yyvsp[-3].strval).value, yylloc.first_line, yylloc.first_column);
      }
      auto infoNode = parser->ast()->createNodeArray();
      auto dirNode = parser->ast()->createNodeValueInt((yyvsp[-6].intval));
      // Direction
      infoNode->addMember(dirNode);
      // Source
      infoNode->addMember((yyvsp[-4].node));
      // Target
      infoNode->addMember((yyvsp[-2].node));
      // Graph
      infoNode->addMember((yyvsp[-1].node));
      // Opts
      auto opts = parser->ast()->createNodeOptions((yyvsp[0].node));
      TRI_ASSERT(opts != nullptr);
      infoNode->addMember(opts);
      (yyval.node) = infoNode;
    }
#line 2571 "Aql/grammar.cpp"
    break;

  case 41:
#line 643 "Aql/grammar.y"
    {
      // first open a new scope (after expression is evaluated)
      parser->ast()->scopes()->start(arangodb::aql::AQL_SCOPE_FOR);
      AstNode* variablesNode = static_cast<AstNode*>((yyvsp[-2].node));
      TRI_ASSERT(variablesNode != nullptr);
      TRI_ASSERT(variablesNode->type == NODE_TYPE_ARRAY);
      if (variablesNode->numMembers() != 1) {
        parser->registerParseError(TRI_ERROR_QUERY_PARSE, "Collections and Views only have one return variable", yylloc.first_line, yylloc.first_column);
      }

      // now create an out variable for the FOR statement
      // this prepares us to handle the optional SEARCH condition, which may
      // or may not refer to the FOR's variable
      AstNode* variableNameNode = variablesNode->getMemberUnchecked(0);
      TRI_ASSERT(variableNameNode->isStringValue());
      AstNode* variableNode = parser->ast()->createNodeVariable(variableNameNode->getStringValue(), variableNameNode->getStringLength(), true);

      parser->pushStack(variableNode);
    }
#line 2595 "Aql/grammar.cpp"
    break;

  case 42:
#line 661 "Aql/grammar.y"
    {
      // now we can handle the optional SEARCH condition and OPTIONS.
      AstNode* variableNode = static_cast<AstNode*>(parser->popStack());

      Variable* variable = static_cast<Variable*>(variableNode->getData());

      AstNode* node = nullptr;
      AstNode* search = nullptr;
      AstNode* options = nullptr;

      if ((yyvsp[0].node) != nullptr) {
        // we got a SEARCH and/or OPTIONS clause
        TRI_ASSERT((yyvsp[0].node)->type == NODE_TYPE_ARRAY);
        TRI_ASSERT((yyvsp[0].node)->numMembers() == 2);

        search = (yyvsp[0].node)->getMemberUnchecked(0);
        if (search->type == NODE_TYPE_NOP) {
          search = nullptr;
        }
        options = (yyvsp[0].node)->getMemberUnchecked(1);
        if (options->type == NODE_TYPE_NOP) {
          options = nullptr;
        }
      }

      if (search != nullptr) {
        // we got a SEARCH clause. this is always a view.
        node = parser->ast()->createNodeForView(variable, (yyvsp[-2].node), search, options);

        if ((yyvsp[-2].node)->type != NODE_TYPE_PARAMETER_DATASOURCE &&
            (yyvsp[-2].node)->type != NODE_TYPE_VIEW &&
            (yyvsp[-2].node)->type != NODE_TYPE_COLLECTION) {
          parser->registerParseError(TRI_ERROR_QUERY_PARSE, "SEARCH condition used on non-view", yylloc.first_line, yylloc.first_column);
        }
      } else {
        node = parser->ast()->createNodeFor(variable, (yyvsp[-2].node), options);
      }

      parser->ast()->addOperation(node);
    }
#line 2640 "Aql/grammar.cpp"
    break;

  case 43:
#line 701 "Aql/grammar.y"
    {
      // first open a new scope (after expression is evaluated)
      parser->ast()->scopes()->start(arangodb::aql::AQL_SCOPE_FOR);
      // Traversal
      auto variableNamesNode = static_cast<AstNode*>((yyvsp[-2].node));
      TRI_ASSERT(variableNamesNode != nullptr);
      TRI_ASSERT(variableNamesNode->type == NODE_TYPE_ARRAY);
      if (variableNamesNode->numMembers() > 3) {
        parser->registerParseError(TRI_ERROR_QUERY_PARSE, "Traversals only have one, two or three return variables", yylloc.first_line, yylloc.first_column);
      }
      auto variablesNode = ::transformOutputVariables(parser, variableNamesNode);
      auto graphInfoNode = static_cast<AstNode*>((yyvsp[0].node));
      TRI_ASSERT(graphInfoNode != nullptr);
      TRI_ASSERT(graphInfoNode->type == NODE_TYPE_ARRAY);
      parser->pushStack(variablesNode);
      parser->pushStack(graphInfoNode);
      // This stack push/pop magic is necessary to allow v, e, and p in the prune condition
    }
#line 2663 "Aql/grammar.cpp"
    break;

  case 44:
#line 718 "Aql/grammar.y"
    {
      auto graphInfoNode = static_cast<AstNode*>(parser->popStack());
      auto variablesNode = static_cast<AstNode*>(parser->popStack());

      auto prune = graphInfoNode->getMember(3);
      if (prune != nullptr) {
        Ast::traverseReadOnly(prune, [&](AstNode const* node) {
          if (node->type == NODE_TYPE_REFERENCE && node->hasFlag(AstNodeFlagType::FLAG_SUBQUERY_REFERENCE)) {
            parser->registerParseError(TRI_ERROR_QUERY_PARSE, "prune condition must not use a subquery", yylloc.first_line, yylloc.first_column);
          }
        });
      }
      auto node = parser->ast()->createNodeTraversal(variablesNode, graphInfoNode);
      parser->ast()->addOperation(node);
    }
#line 2683 "Aql/grammar.cpp"
    break;

  case 45:
#line 733 "Aql/grammar.y"
    {
      // first open a new scope (after expression is evaluated)
      parser->ast()->scopes()->start(arangodb::aql::AQL_SCOPE_FOR);
      // Shortest Path
      auto variableNamesNode = static_cast<AstNode*>((yyvsp[-2].node));
      TRI_ASSERT(variableNamesNode != nullptr);
      TRI_ASSERT(variableNamesNode->type == NODE_TYPE_ARRAY);
      if (variableNamesNode->numMembers() > 2) {
        parser->registerParseError(TRI_ERROR_QUERY_PARSE, "ShortestPath only has one or two return variables", yylloc.first_line, yylloc.first_column);
      }
      auto variablesNode = ::transformOutputVariables(parser, variableNamesNode);
      auto graphInfoNode = static_cast<AstNode*>((yyvsp[0].node));
      TRI_ASSERT(graphInfoNode != nullptr);
      TRI_ASSERT(graphInfoNode->type == NODE_TYPE_ARRAY);
      auto node = parser->ast()->createNodeShortestPath(variablesNode, graphInfoNode);
      parser->ast()->addOperation(node);

    }
#line 2706 "Aql/grammar.cpp"
    break;

  case 46:
#line 751 "Aql/grammar.y"
    {
      // first open a new scope (after expression is evaluated)
      parser->ast()->scopes()->start(arangodb::aql::AQL_SCOPE_FOR);
      // K Shortest Paths
      auto variableNamesNode = static_cast<AstNode*>((yyvsp[-2].node));
      TRI_ASSERT(variableNamesNode != nullptr);
      TRI_ASSERT(variableNamesNode->type == NODE_TYPE_ARRAY);
      if (variableNamesNode->numMembers() > 1) {
          parser->registerParseError(TRI_ERROR_QUERY_PARSE, "k Shortest Paths only has one return variable", yylloc.first_line, yylloc.first_column);
      }
      auto variablesNode = ::transformOutputVariables(parser, variableNamesNode);
      auto graphInfoNode = static_cast<AstNode*>((yyvsp[0].node));
      TRI_ASSERT(graphInfoNode != nullptr);
      TRI_ASSERT(graphInfoNode->type == NODE_TYPE_ARRAY);
      auto node = parser->ast()->createNodeKShortestPaths(variablesNode, graphInfoNode);
      parser->ast()->addOperation(node);

    }
#line 2729 "Aql/grammar.cpp"
    break;

  case 47:
#line 773 "Aql/grammar.y"
    {
      // operand is a reference. can use it directly
      auto node = parser->ast()->createNodeFilter((yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 2739 "Aql/grammar.cpp"
    break;

  case 48:
#line 781 "Aql/grammar.y"
    {
    }
#line 2746 "Aql/grammar.cpp"
    break;

  case 49:
#line 783 "Aql/grammar.y"
    {
    }
#line 2753 "Aql/grammar.cpp"
    break;

  case 50:
#line 788 "Aql/grammar.y"
    {
      auto node = parser->ast()->createNodeParallelStart();
      parser->ast()->addOperation(node);
  }
#line 2762 "Aql/grammar.cpp"
    break;

  case 51:
#line 791 "Aql/grammar.y"
    {
      auto node = parser->ast()->createNodeParallelEnd();
      parser->ast()->addOperation(node);
    }
#line 2771 "Aql/grammar.cpp"
    break;

  case 52:
#line 798 "Aql/grammar.y"
    {
    }
#line 2778 "Aql/grammar.cpp"
    break;

  case 53:
#line 803 "Aql/grammar.y"
    {
    }
#line 2785 "Aql/grammar.cpp"
    break;

  case 54:
#line 805 "Aql/grammar.y"
    {
    }
#line 2792 "Aql/grammar.cpp"
    break;

  case 55:
#line 810 "Aql/grammar.y"
    {
      auto node = parser->ast()->createNodeLet((yyvsp[-2].strval).value, (yyvsp[-2].strval).length, (yyvsp[0].node), true);
      parser->ast()->addOperation(node);
    }
#line 2801 "Aql/grammar.cpp"
    break;

  case 56:
#line 817 "Aql/grammar.y"
    {
      if (!TRI_CaseEqualString((yyvsp[-2].strval).value, "COUNT")) {
        parser->registerParseError(TRI_ERROR_QUERY_PARSE, "unexpected qualifier '%s', expecting 'COUNT'", (yyvsp[-2].strval).value, yylloc.first_line, yylloc.first_column);
      }

      (yyval.strval) = (yyvsp[0].strval);
    }
#line 2813 "Aql/grammar.cpp"
    break;

  case 57:
#line 827 "Aql/grammar.y"
    {
      auto node = parser->ast()->createNodeArray();
      parser->pushStack(node);
    }
#line 2822 "Aql/grammar.cpp"
    break;

  case 58:
#line 830 "Aql/grammar.y"
    {
      auto list = static_cast<AstNode*>(parser->popStack());

      if (list == nullptr) {
        ABORT_OOM
      }
      (yyval.node) = list;
    }
#line 2835 "Aql/grammar.cpp"
    break;

  case 59:
#line 841 "Aql/grammar.y"
    {
      /* COLLECT WITH COUNT INTO var OPTIONS ... */
      auto scopes = parser->ast()->scopes();

      ::startCollectScope(scopes);

      auto node = parser->ast()->createNodeCollectCount(parser->ast()->createNodeArray(), (yyvsp[-1].strval).value, (yyvsp[-1].strval).length, (yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 2849 "Aql/grammar.cpp"
    break;

  case 60:
#line 850 "Aql/grammar.y"
    {
      /* COLLECT var = expr WITH COUNT INTO var OPTIONS ... */
      auto scopes = parser->ast()->scopes();

      if (::startCollectScope(scopes)) {
        ::arangodb::containers::HashSet<Variable const*> variables;
        ::registerAssignVariables(parser, scopes, yylloc.first_line, yylloc.first_column, variables, (yyvsp[-2].node));
      }

      auto node = parser->ast()->createNodeCollectCount((yyvsp[-2].node), (yyvsp[-1].strval).value, (yyvsp[-1].strval).length, (yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 2866 "Aql/grammar.cpp"
    break;

  case 61:
#line 862 "Aql/grammar.y"
    {
      /* AGGREGATE var = expr OPTIONS ... */
      ::arangodb::containers::HashSet<Variable const*> variablesIntroduced;
      auto scopes = parser->ast()->scopes();

      if (::startCollectScope(scopes)) {
        ::registerAssignVariables(parser, scopes, yylloc.first_line, yylloc.first_column, variablesIntroduced, (yyvsp[-2].node));
      }

      // validate aggregates
      if (!::validateAggregates(parser, (yyvsp[-2].node))) {
        YYABORT;
      }

      if ((yyvsp[-1].node) != nullptr && (yyvsp[-1].node)->type == NODE_TYPE_ARRAY) {
        ::checkIntoVariables(parser, (yyvsp[-1].node)->getMember(1), yylloc.first_line, yylloc.first_column, variablesIntroduced);
      }

      AstNode const* into = ::getIntoVariable(parser, (yyvsp[-1].node));
      AstNode const* intoExpression = ::getIntoExpression((yyvsp[-1].node));

      auto node = parser->ast()->createNodeCollect(parser->ast()->createNodeArray(), (yyvsp[-2].node), into, intoExpression, nullptr, (yyvsp[-1].node));
      parser->ast()->addOperation(node);
    }
#line 2895 "Aql/grammar.cpp"
    break;

  case 62:
#line 886 "Aql/grammar.y"
    {
      /* COLLECT var = expr AGGREGATE var = expr OPTIONS ... */
      ::arangodb::containers::HashSet<Variable const*> variablesIntroduced;
      auto scopes = parser->ast()->scopes();

      if (::startCollectScope(scopes)) {
        ::registerAssignVariables(parser, scopes, yylloc.first_line, yylloc.first_column, variablesIntroduced, (yyvsp[-3].node));
        ::registerAssignVariables(parser, scopes, yylloc.first_line, yylloc.first_column, variablesIntroduced, (yyvsp[-2].node));
      }

      if (!::validateAggregates(parser, (yyvsp[-2].node))) {
        YYABORT;
      }

      if ((yyvsp[-1].node) != nullptr && (yyvsp[-1].node)->type == NODE_TYPE_ARRAY) {
        ::checkIntoVariables(parser, (yyvsp[-1].node)->getMember(1), yylloc.first_line, yylloc.first_column, variablesIntroduced);
      }

      // note all group variables
      ::arangodb::containers::HashSet<Variable const*> groupVars;
      size_t n = (yyvsp[-3].node)->numMembers();
      for (size_t i = 0; i < n; ++i) {
        auto member = (yyvsp[-3].node)->getMember(i);

        if (member != nullptr) {
          TRI_ASSERT(member->type == NODE_TYPE_ASSIGN);
          groupVars.emplace(static_cast<Variable const*>(member->getMember(0)->getData()));
        }
      }

      // now validate if any aggregate refers to one of the group variables
      n = (yyvsp[-2].node)->numMembers();
      for (size_t i = 0; i < n; ++i) {
        auto member = (yyvsp[-2].node)->getMember(i);

        if (member != nullptr) {
          TRI_ASSERT(member->type == NODE_TYPE_ASSIGN);
          ::arangodb::containers::HashSet<Variable const*> variablesUsed;
          Ast::getReferencedVariables(member->getMember(1), variablesUsed);

          for (auto& it : groupVars) {
            if (variablesUsed.find(it) != variablesUsed.end()) {
              parser->registerParseError(TRI_ERROR_QUERY_VARIABLE_NAME_UNKNOWN,
                "use of unknown variable '%s' in AGGREGATE expression", it->name.c_str(), yylloc.first_line, yylloc.first_column);
              break;
            }
          }
        }
      }

      AstNode const* into = ::getIntoVariable(parser, (yyvsp[-1].node));
      AstNode const* intoExpression = ::getIntoExpression((yyvsp[-1].node));

      auto node = parser->ast()->createNodeCollect((yyvsp[-3].node), (yyvsp[-2].node), into, intoExpression, nullptr, (yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 2956 "Aql/grammar.cpp"
    break;

  case 63:
#line 942 "Aql/grammar.y"
    {
      /* COLLECT var = expr INTO var OPTIONS ... */
      ::arangodb::containers::HashSet<Variable const*> variablesIntroduced;
      auto scopes = parser->ast()->scopes();

      if (::startCollectScope(scopes)) {
        ::registerAssignVariables(parser, scopes, yylloc.first_line, yylloc.first_column, variablesIntroduced, (yyvsp[-2].node));
      }

      if ((yyvsp[-1].node) != nullptr && (yyvsp[-1].node)->type == NODE_TYPE_ARRAY) {
        ::checkIntoVariables(parser, (yyvsp[-1].node)->getMember(1), yylloc.first_line, yylloc.first_column, variablesIntroduced);
      }

      AstNode const* into = ::getIntoVariable(parser, (yyvsp[-1].node));
      AstNode const* intoExpression = ::getIntoExpression((yyvsp[-1].node));

      auto node = parser->ast()->createNodeCollect((yyvsp[-2].node), parser->ast()->createNodeArray(), into, intoExpression, nullptr, (yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 2980 "Aql/grammar.cpp"
    break;

  case 64:
#line 961 "Aql/grammar.y"
    {
      /* COLLECT var = expr INTO var KEEP ... OPTIONS ... */
      ::arangodb::containers::HashSet<Variable const*> variablesIntroduced;
      auto scopes = parser->ast()->scopes();

      if (::startCollectScope(scopes)) {
        ::registerAssignVariables(parser, scopes, yylloc.first_line, yylloc.first_column, variablesIntroduced, (yyvsp[-3].node));
      }

      if ((yyvsp[-2].node) == nullptr &&
          (yyvsp[-1].node) != nullptr) {
        parser->registerParseError(TRI_ERROR_QUERY_PARSE, "use of 'KEEP' without 'INTO'", yylloc.first_line, yylloc.first_column);
      }

      if ((yyvsp[-2].node) != nullptr && (yyvsp[-2].node)->type == NODE_TYPE_ARRAY) {
        ::checkIntoVariables(parser, (yyvsp[-2].node)->getMember(1), yylloc.first_line, yylloc.first_column, variablesIntroduced);
      }

      AstNode const* into = ::getIntoVariable(parser, (yyvsp[-2].node));
      AstNode const* intoExpression = ::getIntoExpression((yyvsp[-2].node));

      auto node = parser->ast()->createNodeCollect((yyvsp[-3].node), parser->ast()->createNodeArray(), into, intoExpression, (yyvsp[-1].node), (yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 3009 "Aql/grammar.cpp"
    break;

  case 65:
#line 988 "Aql/grammar.y"
    {
    }
#line 3016 "Aql/grammar.cpp"
    break;

  case 66:
#line 990 "Aql/grammar.y"
    {
    }
#line 3023 "Aql/grammar.cpp"
    break;

  case 67:
#line 995 "Aql/grammar.y"
    {
      auto node = parser->ast()->createNodeAssign((yyvsp[-2].strval).value, (yyvsp[-2].strval).length, (yyvsp[0].node));
      parser->pushArrayElement(node);
    }
#line 3032 "Aql/grammar.cpp"
    break;

  case 68:
#line 1002 "Aql/grammar.y"
    {
      (yyval.node) = nullptr;
    }
#line 3040 "Aql/grammar.cpp"
    break;

  case 69:
#line 1005 "Aql/grammar.y"
    {
      (yyval.node) = parser->ast()->createNodeValueString((yyvsp[0].strval).value, (yyvsp[0].strval).length);
    }
#line 3048 "Aql/grammar.cpp"
    break;

  case 70:
#line 1008 "Aql/grammar.y"
    {
      auto node = parser->ast()->createNodeArray();
      node->addMember(parser->ast()->createNodeValueString((yyvsp[-2].strval).value, (yyvsp[-2].strval).length));
      node->addMember((yyvsp[0].node));
      (yyval.node) = node;
    }
#line 3059 "Aql/grammar.cpp"
    break;

  case 71:
#line 1017 "Aql/grammar.y"
    {
      if (! parser->ast()->scopes()->existsVariable((yyvsp[0].strval).value, (yyvsp[0].strval).length)) {
        parser->registerParseError(TRI_ERROR_QUERY_PARSE, "use of unknown variable '%s' for KEEP", (yyvsp[0].strval).value, yylloc.first_line, yylloc.first_column);
      }

      auto node = parser->ast()->createNodeReference((yyvsp[0].strval).value, (yyvsp[0].strval).length);
      if (node == nullptr) {
        ABORT_OOM
      }

      // indicate the this node is a reference to the variable name, not the variable value
      node->setFlag(FLAG_KEEP_VARIABLENAME);
      parser->pushArrayElement(node);
    }
#line 3078 "Aql/grammar.cpp"
    break;

  case 72:
#line 1031 "Aql/grammar.y"
    {
      if (! parser->ast()->scopes()->existsVariable((yyvsp[0].strval).value, (yyvsp[0].strval).length)) {
        parser->registerParseError(TRI_ERROR_QUERY_PARSE, "use of unknown variable '%s' for KEEP", (yyvsp[0].strval).value, yylloc.first_line, yylloc.first_column);
      }

      auto node = parser->ast()->createNodeReference((yyvsp[0].strval).value, (yyvsp[0].strval).length);
      if (node == nullptr) {
        ABORT_OOM
      }

      // indicate the this node is a reference to the variable name, not the variable value
      node->setFlag(FLAG_KEEP_VARIABLENAME);
      parser->pushArrayElement(node);
    }
#line 3097 "Aql/grammar.cpp"
    break;

  case 73:
#line 1048 "Aql/grammar.y"
    {
      if (!TRI_CaseEqualString((yyvsp[0].strval).value, "KEEP")) {
        parser->registerParseError(TRI_ERROR_QUERY_PARSE, "unexpected qualifier '%s', expecting 'KEEP'", (yyvsp[0].strval).value, yylloc.first_line, yylloc.first_column);
      }

      auto node = parser->ast()->createNodeArray();
      parser->pushStack(node);
    }
#line 3110 "Aql/grammar.cpp"
    break;

  case 74:
#line 1055 "Aql/grammar.y"
    {
      auto list = static_cast<AstNode*>(parser->popStack());
      (yyval.node) = list;
    }
#line 3119 "Aql/grammar.cpp"
    break;

  case 75:
#line 1062 "Aql/grammar.y"
    {
      auto node = parser->ast()->createNodeArray();
      parser->pushStack(node);
    }
#line 3128 "Aql/grammar.cpp"
    break;

  case 76:
#line 1065 "Aql/grammar.y"
    {
      auto list = static_cast<AstNode*>(parser->popStack());
      (yyval.node) = list;
    }
#line 3137 "Aql/grammar.cpp"
    break;

  case 77:
#line 1072 "Aql/grammar.y"
    {
      auto node = parser->ast()->createNodeArray();
      parser->pushStack(node);
    }
#line 3146 "Aql/grammar.cpp"
    break;

  case 78:
#line 1075 "Aql/grammar.y"
    {
      auto list = static_cast<AstNode const*>(parser->popStack());
      auto node = parser->ast()->createNodeSort(list);
      parser->ast()->addOperation(node);
    }
#line 3156 "Aql/grammar.cpp"
    break;

  case 79:
#line 1083 "Aql/grammar.y"
    {
      parser->pushArrayElement((yyvsp[0].node));
    }
#line 3164 "Aql/grammar.cpp"
    break;

  case 80:
#line 1086 "Aql/grammar.y"
    {
      parser->pushArrayElement((yyvsp[0].node));
    }
#line 3172 "Aql/grammar.cpp"
    break;

  case 81:
#line 1092 "Aql/grammar.y"
    {
      (yyval.node) = parser->ast()->createNodeSortElement((yyvsp[-1].node), (yyvsp[0].node));
    }
#line 3180 "Aql/grammar.cpp"
    break;

  case 82:
#line 1098 "Aql/grammar.y"
    {
      (yyval.node) = parser->ast()->createNodeValueBool(true);
    }
#line 3188 "Aql/grammar.cpp"
    break;

  case 83:
#line 1101 "Aql/grammar.y"
    {
      (yyval.node) = parser->ast()->createNodeValueBool(true);
    }
#line 3196 "Aql/grammar.cpp"
    break;

  case 84:
#line 1104 "Aql/grammar.y"
    {
      (yyval.node) = parser->ast()->createNodeValueBool(false);
    }
#line 3204 "Aql/grammar.cpp"
    break;

  case 85:
#line 1107 "Aql/grammar.y"
    {
      (yyval.node) = (yyvsp[0].node);
    }
#line 3212 "Aql/grammar.cpp"
    break;

  case 86:
#line 1113 "Aql/grammar.y"
    {
      auto offset = parser->ast()->createNodeValueInt(0);
      auto node = parser->ast()->createNodeLimit(offset, (yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 3222 "Aql/grammar.cpp"
    break;

  case 87:
#line 1118 "Aql/grammar.y"
    {
      auto node = parser->ast()->createNodeLimit((yyvsp[-2].node), (yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 3231 "Aql/grammar.cpp"
    break;

  case 88:
#line 1125 "Aql/grammar.y"
    {
      auto node = parser->ast()->createNodeReturn((yyvsp[0].node));
      parser->ast()->addOperation(node);
      parser->ast()->scopes()->endNested();
    }
#line 3241 "Aql/grammar.cpp"
    break;

  case 89:
#line 1133 "Aql/grammar.y"
    {
      (yyval.node) = (yyvsp[0].node);
    }
#line 3249 "Aql/grammar.cpp"
    break;

  case 90:
#line 1136 "Aql/grammar.y"
    {
       (yyval.node) = (yyvsp[0].node);
     }
#line 3257 "Aql/grammar.cpp"
    break;

  case 91:
#line 1142 "Aql/grammar.y"
    {
      if (!parser->configureWriteQuery((yyvsp[-1].node), (yyvsp[0].node))) {
        YYABORT;
      }
      auto node = parser->ast()->createNodeRemove((yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 3269 "Aql/grammar.cpp"
    break;

  case 92:
#line 1152 "Aql/grammar.y"
    {
      if (!parser->configureWriteQuery((yyvsp[-1].node), (yyvsp[0].node))) {
        YYABORT;
      }
      auto node = parser->ast()->createNodeInsert((yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 3281 "Aql/grammar.cpp"
    break;

  case 93:
#line 1162 "Aql/grammar.y"
    {
      if (!parser->configureWriteQuery((yyvsp[-1].node), (yyvsp[0].node))) {
        YYABORT;
      }

      AstNode* node = parser->ast()->createNodeUpdate(nullptr, (yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 3294 "Aql/grammar.cpp"
    break;

  case 94:
#line 1170 "Aql/grammar.y"
    {
      if (!parser->configureWriteQuery((yyvsp[-1].node), (yyvsp[0].node))) {
        YYABORT;
      }

      AstNode* node = parser->ast()->createNodeUpdate((yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 3307 "Aql/grammar.cpp"
    break;

  case 95:
#line 1181 "Aql/grammar.y"
    {
    }
#line 3314 "Aql/grammar.cpp"
    break;

  case 96:
#line 1186 "Aql/grammar.y"
    {
      if (!parser->configureWriteQuery((yyvsp[-1].node), (yyvsp[0].node))) {
        YYABORT;
      }

      AstNode* node = parser->ast()->createNodeReplace(nullptr, (yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 3327 "Aql/grammar.cpp"
    break;

  case 97:
#line 1194 "Aql/grammar.y"
    {
      if (!parser->configureWriteQuery((yyvsp[-1].node), (yyvsp[0].node))) {
        YYABORT;
      }

      AstNode* node = parser->ast()->createNodeReplace((yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 3340 "Aql/grammar.cpp"
    break;

  case 98:
#line 1205 "Aql/grammar.y"
    {
    }
#line 3347 "Aql/grammar.cpp"
    break;

  case 99:
#line 1210 "Aql/grammar.y"
    {
      (yyval.intval) = static_cast<int64_t>(NODE_TYPE_UPDATE);
    }
#line 3355 "Aql/grammar.cpp"
    break;

  case 100:
#line 1213 "Aql/grammar.y"
    {
      (yyval.intval) = static_cast<int64_t>(NODE_TYPE_REPLACE);
    }
#line 3363 "Aql/grammar.cpp"
    break;

  case 101:
#line 1219 "Aql/grammar.y"
    {
      // reserve a variable named "$OLD", we might need it in the update expression
      // and in a later return thing
      parser->pushStack(parser->ast()->createNodeVariable(TRI_CHAR_LENGTH_PAIR(Variable::NAME_OLD), true));
    }
#line 3373 "Aql/grammar.cpp"
    break;

  case 102:
#line 1223 "Aql/grammar.y"
    {
      AstNode* variableNode = static_cast<AstNode*>(parser->popStack());

      auto scopes = parser->ast()->scopes();

      scopes->start(arangodb::aql::AQL_SCOPE_SUBQUERY);
      parser->ast()->startSubQuery();

      scopes->start(arangodb::aql::AQL_SCOPE_FOR);
      std::string const variableName = parser->ast()->variables()->nextName();
      auto forNode = parser->ast()->createNodeFor(variableName.c_str(), variableName.size(), parser->ast()->createNodeArray(), false);
      parser->ast()->addOperation(forNode);

      auto filterNode = parser->ast()->createNodeUpsertFilter(parser->ast()->createNodeReference(variableName), (yyvsp[0].node));
      parser->ast()->addOperation(filterNode);

      auto offsetValue = parser->ast()->createNodeValueInt(0);
      auto limitValue = parser->ast()->createNodeValueInt(1);
      auto limitNode = parser->ast()->createNodeLimit(offsetValue, limitValue);
      parser->ast()->addOperation(limitNode);

      auto refNode = parser->ast()->createNodeReference(variableName);
      auto returnNode = parser->ast()->createNodeReturn(refNode);
      parser->ast()->addOperation(returnNode);
      scopes->endNested();

      AstNode* subqueryNode = parser->ast()->endSubQuery();
      scopes->endCurrent();

      std::string const subqueryName = parser->ast()->variables()->nextName();
      auto subQuery = parser->ast()->createNodeLet(subqueryName.c_str(), subqueryName.size(), subqueryNode, false);
      parser->ast()->addOperation(subQuery);

      auto index = parser->ast()->createNodeValueInt(0);
      auto firstDoc = parser->ast()->createNodeLet(variableNode, parser->ast()->createNodeIndexedAccess(parser->ast()->createNodeReference(subqueryName), index));
      parser->ast()->addOperation(firstDoc);

      parser->pushStack(forNode);
    }
#line 3417 "Aql/grammar.cpp"
    break;

  case 103:
#line 1261 "Aql/grammar.y"
    {
      AstNode* forNode = static_cast<AstNode*>(parser->popStack());
      forNode->changeMember(1, (yyvsp[-1].node));

      if (!parser->configureWriteQuery((yyvsp[-1].node), (yyvsp[0].node))) {
        YYABORT;
      }

      auto node = parser->ast()->createNodeUpsert(static_cast<AstNodeType>((yyvsp[-3].intval)), parser->ast()->createNodeReference(TRI_CHAR_LENGTH_PAIR(Variable::NAME_OLD)), (yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 3433 "Aql/grammar.cpp"
    break;

  case 104:
#line 1275 "Aql/grammar.y"
    {
      (yyval.node) = parser->ast()->createNodeQuantifier(Quantifier::ALL);
    }
#line 3441 "Aql/grammar.cpp"
    break;

  case 105:
#line 1278 "Aql/grammar.y"
    {
      (yyval.node) = parser->ast()->createNodeQuantifier(Quantifier::ANY);
    }
#line 3449 "Aql/grammar.cpp"
    break;

  case 106:
#line 1281 "Aql/grammar.y"
    {
      (yyval.node) = parser->ast()->createNodeQuantifier(Quantifier::NONE);
    }
#line 3457 "Aql/grammar.cpp"
    break;

  case 107:
#line 1287 "Aql/grammar.y"
    {
      auto const scopeType = parser->ast()->scopes()->type();

      if (scopeType == AQL_SCOPE_MAIN ||
          scopeType == AQL_SCOPE_SUBQUERY) {
        parser->registerParseError(TRI_ERROR_QUERY_PARSE, "cannot use DISTINCT modifier on top-level query element", yylloc.first_line, yylloc.first_column);
      }
    }
#line 3470 "Aql/grammar.cpp"
    break;

  case 108:
#line 1294 "Aql/grammar.y"
    {
      (yyval.node) = parser->ast()->createNodeDistinct((yyvsp[0].node));
    }
#line 3478 "Aql/grammar.cpp"
    break;

  case 109:
#line 1297 "Aql/grammar.y"
    {
      (yyval.node) = (yyvsp[0].node);
    }
#line 3486 "Aql/grammar.cpp"
    break;

  case 110:
#line 1303 "Aql/grammar.y"
    {
      (yyval.node) = (yyvsp[0].node);
    }
#line 3494 "Aql/grammar.cpp"
    break;

  case 111:
#line 1306 "Aql/grammar.y"
    {
      (yyval.node) = (yyvsp[0].node);
    }
#line 3502 "Aql/grammar.cpp"
    break;

  case 112:
#line 1309 "Aql/grammar.y"
    {
      (yyval.node) = (yyvsp[0].node);
    }
#line 3510 "Aql/grammar.cpp"
    break;

  case 113:
#line 1312 "Aql/grammar.y"
    {
      (yyval.node) = (yyvsp[0].node);
    }
#line 3518 "Aql/grammar.cpp"
    break;

  case 114:
#line 1315 "Aql/grammar.y"
    {
      (yyval.node) = (yyvsp[0].node);
    }
#line 3526 "Aql/grammar.cpp"
    break;

  case 115:
#line 1318 "Aql/grammar.y"
    {
      (yyval.node) = parser->ast()->createNodeRange((yyvsp[-2].node), (yyvsp[0].node));
    }
#line 3534 "Aql/grammar.cpp"
    break;

  case 116:
#line 1324 "Aql/grammar.y"
    {
      (yyval.strval) = (yyvsp[0].strval);
    }
#line 3542 "Aql/grammar.cpp"
    break;

  case 117:
#line 1327 "Aql/grammar.y"
    {
      std::string temp((yyvsp[-2].strval).value, (yyvsp[-2].strval).length);
      temp.append("::");
      temp.append((yyvsp[0].strval).value, (yyvsp[0].strval).length);
      auto p = parser->ast()->resources().registerString(temp);

      if (p == nullptr) {
        ABORT_OOM
      }

      (yyval.strval).value = p;
      (yyval.strval).length = temp.size();
    }
#line 3560 "Aql/grammar.cpp"
    break;

  case 118:
#line 1343 "Aql/grammar.y"
    {
      parser->pushStack((yyvsp[-1].strval).value);

      auto node = parser->ast()->createNodeArray();
      parser->pushStack(node);
    }
#line 3571 "Aql/grammar.cpp"
    break;

  case 119:
#line 1348 "Aql/grammar.y"
    {
      auto list = static_cast<AstNode const*>(parser->popStack());
      (yyval.node) = parser->ast()->createNodeFunctionCall(static_cast<char const*>(parser->popStack()), list);
    }
#line 3580 "Aql/grammar.cpp"
    break;

  case 120:
#line 1352 "Aql/grammar.y"
    {
      auto node = parser->ast()->createNodeArray();
      parser->pushStack(node);
    }
#line 3589 "Aql/grammar.cpp"
    break;

  case 121:
#line 1355 "Aql/grammar.y"
    {
      auto list = static_cast<AstNode const*>(parser->popStack());
      (yyval.node) = parser->ast()->createNodeFunctionCall(TRI_CHAR_LENGTH_PAIR("LIKE"), list);
    }
#line 3598 "Aql/grammar.cpp"
    break;

  case 122:
#line 1362 "Aql/grammar.y"
    {
      (yyval.node) = parser->ast()->createNodeUnaryOperator(NODE_TYPE_OPERATOR_UNARY_PLUS, (yyvsp[0].node));
    }
#line 3606 "Aql/grammar.cpp"
    break;

  case 123:
#line 1365 "Aql/grammar.y"
    {
      (yyval.node) = parser->ast()->createNodeUnaryOperator(NODE_TYPE_OPERATOR_UNARY_MINUS, (yyvsp[0].node));
    }
#line 3614 "Aql/grammar.cpp"
    break;

  case 124:
#line 1368 "Aql/grammar.y"
    {
      (yyval.node) = parser->ast()->createNodeUnaryOperator(NODE_TYPE_OPERATOR_UNARY_NOT, (yyvsp[0].node));
    }
#line 3622 "Aql/grammar.cpp"
    break;

  case 125:
#line 1374 "Aql/grammar.y"
    {
      (yyval.node) = parser->ast()->createNodeBinaryOperator(NODE_TYPE_OPERATOR_BINARY_OR, (yyvsp[-2].node), (yyvsp[0].node));
    }
#line 3630 "Aql/grammar.cpp"
    break;

  case 126:
#line 1377 "Aql/grammar.y"
    {
      (yyval.node) = parser->ast()->createNodeBinaryOperator(NODE_TYPE_OPERATOR_BINARY_AND, (yyvsp[-2].node), (yyvsp[0].node));
    }
#line 3638 "Aql/grammar.cpp"
    break;

  case 127:
#line 1380 "Aql/grammar.y"
    {
      (yyval.node) = parser->ast()->createNodeBinaryOperator(NODE_TYPE_OPERATOR_BINARY_PLUS, (yyvsp[-2].node), (yyvsp[0].node));
    }
#line 3646 "Aql/grammar.cpp"
    break;

  case 128:
#line 1383 "Aql/grammar.y"
    {
      (yyval.node) = parser->ast()->createNodeBinaryOperator(NODE_TYPE_OPERATOR_BINARY_MINUS, (yyvsp[-2].node), (yyvsp[0].node));
    }
#line 3654 "Aql/grammar.cpp"
    break;

  case 129:
#line 1386 "Aql/grammar.y"
    {
      (yyval.node) = parser->ast()->createNodeBinaryOperator(NODE_TYPE_OPERATOR_BINARY_TIMES, (yyvsp[-2].node), (yyvsp[0].node));
    }
#line 3662 "Aql/grammar.cpp"
    break;

  case 130:
#line 1389 "Aql/grammar.y"
    {
      (yyval.node) = parser->ast()->createNodeBinaryOperator(NODE_TYPE_OPERATOR_BINARY_DIV, (yyvsp[-2].node), (yyvsp[0].node));
    }
#line 3670 "Aql/grammar.cpp"
    break;

  case 131:
#line 1392 "Aql/grammar.y"
    {
      (yyval.node) = parser->ast()->createNodeBinaryOperator(NODE_TYPE_OPERATOR_BINARY_MOD, (yyvsp[-2].node), (yyvsp[0].node));
    }
#line 3678 "Aql/grammar.cpp"
    break;

  case 132:
#line 1395 "Aql/grammar.y"
    {
      (yyval.node) = parser->ast()->createNodeBinaryOperator(NODE_TYPE_OPERATOR_BINARY_EQ, (yyvsp[-2].node), (yyvsp[0].node));
    }
#line 3686 "Aql/grammar.cpp"
    break;

  case 133:
#line 1398 "Aql/grammar.y"
    {
      (yyval.node) = parser->ast()->createNodeBinaryOperator(NODE_TYPE_OPERATOR_BINARY_NE, (yyvsp[-2].node), (yyvsp[0].node));
    }
#line 3694 "Aql/grammar.cpp"
    break;

  case 134:
#line 1401 "Aql/grammar.y"
    {
      (yyval.node) = parser->ast()->createNodeBinaryOperator(NODE_TYPE_OPERATOR_BINARY_LT, (yyvsp[-2].node), (yyvsp[0].node));
    }
#line 3702 "Aql/grammar.cpp"
    break;

  case 135:
#line 1404 "Aql/grammar.y"
    {
      (yyval.node) = parser->ast()->createNodeBinaryOperator(NODE_TYPE_OPERATOR_BINARY_GT, (yyvsp[-2].node), (yyvsp[0].node));
    }
#line 3710 "Aql/grammar.cpp"
    break;

  case 136:
#line 1407 "Aql/grammar.y"
    {
      (yyval.node) = parser->ast()->createNodeBinaryOperator(NODE_TYPE_OPERATOR_BINARY_LE, (yyvsp[-2].node), (yyvsp[0].node));
    }
#line 3718 "Aql/grammar.cpp"
    break;

  case 137:
#line 1410 "Aql/grammar.y"
    {
      (yyval.node) = parser->ast()->createNodeBinaryOperator(NODE_TYPE_OPERATOR_BINARY_GE, (yyvsp[-2].node), (yyvsp[0].node));
    }
#line 3726 "Aql/grammar.cpp"
    break;

  case 138:
#line 1413 "Aql/grammar.y"
    {
      (yyval.node) = parser->ast()->createNodeBinaryOperator(NODE_TYPE_OPERATOR_BINARY_IN, (yyvsp[-2].node), (yyvsp[0].node));
    }
#line 3734 "Aql/grammar.cpp"
    break;

  case 139:
#line 1416 "Aql/grammar.y"
    {
      (yyval.node) = parser->ast()->createNodeBinaryOperator(NODE_TYPE_OPERATOR_BINARY_NIN, (yyvsp[-3].node), (yyvsp[0].node));
    }
#line 3742 "Aql/grammar.cpp"
    break;

  case 140:
#line 1419 "Aql/grammar.y"
    {
      AstNode* arguments = parser->ast()->createNodeArray(2);
      arguments->addMember((yyvsp[-3].node));
      arguments->addMember((yyvsp[0].node));
      AstNode* expression = parser->ast()->createNodeFunctionCall(TRI_CHAR_LENGTH_PAIR("LIKE"), arguments);
      (yyval.node) = parser->ast()->createNodeUnaryOperator(NODE_TYPE_OPERATOR_UNARY_NOT, expression);
    }
#line 3754 "Aql/grammar.cpp"
    break;

  case 141:
#line 1426 "Aql/grammar.y"
    {
      AstNode* arguments = parser->ast()->createNodeArray(2);
      arguments->addMember((yyvsp[-3].node));
      arguments->addMember((yyvsp[0].node));
      AstNode* expression = parser->ast()->createNodeFunctionCall(TRI_CHAR_LENGTH_PAIR("REGEX_TEST"), arguments);
      (yyval.node) = parser->ast()->createNodeUnaryOperator(NODE_TYPE_OPERATOR_UNARY_NOT, expression);
    }
#line 3766 "Aql/grammar.cpp"
    break;

  case 142:
#line 1433 "Aql/grammar.y"
    {
      AstNode* arguments = parser->ast()->createNodeArray(2);
      arguments->addMember((yyvsp[-3].node));
      arguments->addMember((yyvsp[0].node));
      (yyval.node) = parser->ast()->createNodeFunctionCall(TRI_CHAR_LENGTH_PAIR("REGEX_TEST"), arguments);
    }
#line 3777 "Aql/grammar.cpp"
    break;

  case 143:
#line 1439 "Aql/grammar.y"
    {
      AstNode* arguments = parser->ast()->createNodeArray(2);
      arguments->addMember((yyvsp[-2].node));
      arguments->addMember((yyvsp[0].node));
      (yyval.node) = parser->ast()->createNodeFunctionCall(TRI_CHAR_LENGTH_PAIR("LIKE"), arguments);
    }
#line 3788 "Aql/grammar.cpp"
    break;

  case 144:
#line 1445 "Aql/grammar.y"
    {
      AstNode* arguments = parser->ast()->createNodeArray(2);
      arguments->addMember((yyvsp[-2].node));
      arguments->addMember((yyvsp[0].node));
      (yyval.node) = parser->ast()->createNodeFunctionCall(TRI_CHAR_LENGTH_PAIR("REGEX_TEST"), arguments);
    }
#line 3799 "Aql/grammar.cpp"
    break;

  case 145:
#line 1451 "Aql/grammar.y"
    {
      AstNode* arguments = parser->ast()->createNodeArray(2);
      arguments->addMember((yyvsp[-2].node));
      arguments->addMember((yyvsp[0].node));
      AstNode* node = parser->ast()->createNodeFunctionCall(TRI_CHAR_LENGTH_PAIR("REGEX_TEST"), arguments);
      (yyval.node) = parser->ast()->createNodeUnaryOperator(NODE_TYPE_OPERATOR_UNARY_NOT, node);
    }
#line 3811 "Aql/grammar.cpp"
    break;

  case 146:
#line 1458 "Aql/grammar.y"
    {
      (yyval.node) = parser->ast()->createNodeBinaryArrayOperator(NODE_TYPE_OPERATOR_BINARY_ARRAY_EQ, (yyvsp[-3].node), (yyvsp[0].node), (yyvsp[-2].node));
    }
#line 3819 "Aql/grammar.cpp"
    break;

  case 147:
#line 1461 "Aql/grammar.y"
    {
      (yyval.node) = parser->ast()->createNodeBinaryArrayOperator(NODE_TYPE_OPERATOR_BINARY_ARRAY_NE, (yyvsp[-3].node), (yyvsp[0].node), (yyvsp[-2].node));
    }
#line 3827 "Aql/grammar.cpp"
    break;

  case 148:
#line 1464 "Aql/grammar.y"
    {
      (yyval.node) = parser->ast()->createNodeBinaryArrayOperator(NODE_TYPE_OPERATOR_BINARY_ARRAY_LT, (yyvsp[-3].node), (yyvsp[0].node), (yyvsp[-2].node));
    }
#line 3835 "Aql/grammar.cpp"
    break;

  case 149:
#line 1467 "Aql/grammar.y"
    {
      (yyval.node) = parser->ast()->createNodeBinaryArrayOperator(NODE_TYPE_OPERATOR_BINARY_ARRAY_GT, (yyvsp[-3].node), (yyvsp[0].node), (yyvsp[-2].node));
    }
#line 3843 "Aql/grammar.cpp"
    break;

  case 150:
#line 1470 "Aql/grammar.y"
    {
      (yyval.node) = parser->ast()->createNodeBinaryArrayOperator(NODE_TYPE_OPERATOR_BINARY_ARRAY_LE, (yyvsp[-3].node), (yyvsp[0].node), (yyvsp[-2].node));
    }
#line 3851 "Aql/grammar.cpp"
    break;

  case 151:
#line 1473 "Aql/grammar.y"
    {
      (yyval.node) = parser->ast()->createNodeBinaryArrayOperator(NODE_TYPE_OPERATOR_BINARY_ARRAY_GE, (yyvsp[-3].node), (yyvsp[0].node), (yyvsp[-2].node));
    }
#line 3859 "Aql/grammar.cpp"
    break;

  case 152:
#line 1476 "Aql/grammar.y"
    {
      (yyval.node) = parser->ast()->createNodeBinaryArrayOperator(NODE_TYPE_OPERATOR_BINARY_ARRAY_IN, (yyvsp[-3].node), (yyvsp[0].node), (yyvsp[-2].node));
    }
#line 3867 "Aql/grammar.cpp"
    break;

  case 153:
#line 1479 "Aql/grammar.y"
    {
      auto quantifier = parser->ast()->createNodeQuantifier(Quantifier::ALL);
      (yyval.node) = parser->ast()->createNodeBinaryArrayOperator(NODE_TYPE_OPERATOR_BINARY_ARRAY_NIN, (yyvsp[-4].node), (yyvsp[0].node), quantifier);
    }
#line 3876 "Aql/grammar.cpp"
    break;

  case 154:
#line 1483 "Aql/grammar.y"
    {
      auto quantifier = parser->ast()->createNodeQuantifier(Quantifier::ANY);
      (yyval.node) = parser->ast()->createNodeBinaryArrayOperator(NODE_TYPE_OPERATOR_BINARY_ARRAY_NIN, (yyvsp[-4].node), (yyvsp[0].node), quantifier);
    }
#line 3885 "Aql/grammar.cpp"
    break;

  case 155:
#line 1487 "Aql/grammar.y"
    {
      auto quantifier = parser->ast()->createNodeQuantifier(Quantifier::NONE);
      (yyval.node) = parser->ast()->createNodeBinaryArrayOperator(NODE_TYPE_OPERATOR_BINARY_ARRAY_NIN, (yyvsp[-4].node), (yyvsp[0].node), quantifier);
    }
#line 3894 "Aql/grammar.cpp"
    break;

  case 156:
#line 1494 "Aql/grammar.y"
    {
      (yyval.node) = parser->ast()->createNodeTernaryOperator((yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[0].node));
    }
#line 3902 "Aql/grammar.cpp"
    break;

  case 157:
#line 1497 "Aql/grammar.y"
    {
      (yyval.node) = parser->ast()->createNodeTernaryOperator((yyvsp[-3].node), (yyvsp[0].node));
    }
#line 3910 "Aql/grammar.cpp"
    break;

  case 158:
#line 1503 "Aql/grammar.y"
    {
    }
#line 3917 "Aql/grammar.cpp"
    break;

  case 159:
#line 1505 "Aql/grammar.y"
    {
    }
#line 3924 "Aql/grammar.cpp"
    break;

  case 160:
#line 1510 "Aql/grammar.y"
    {
      (yyval.node) = (yyvsp[0].node);
    }
#line 3932 "Aql/grammar.cpp"
    break;

  case 161:
#line 1513 "Aql/grammar.y"
    {
      parser->ast()->scopes()->start(arangodb::aql::AQL_SCOPE_SUBQUERY);
      parser->ast()->startSubQuery();
    }
#line 3941 "Aql/grammar.cpp"
    break;

  case 162:
#line 1516 "Aql/grammar.y"
    {
      AstNode* node = parser->ast()->endSubQuery();
      parser->ast()->scopes()->endCurrent();

      std::string const variableName = parser->ast()->variables()->nextName();
      auto subQuery = parser->ast()->createNodeLet(variableName.c_str(), variableName.size(), node, false);
      parser->ast()->addOperation(subQuery);

      (yyval.node) = parser->ast()->createNodeSubqueryReference(variableName);
    }
#line 3956 "Aql/grammar.cpp"
    break;

  case 163:
#line 1529 "Aql/grammar.y"
    {
      parser->pushArrayElement((yyvsp[0].node));
    }
#line 3964 "Aql/grammar.cpp"
    break;

  case 164:
#line 1532 "Aql/grammar.y"
    {
      parser->pushArrayElement((yyvsp[0].node));
    }
#line 3972 "Aql/grammar.cpp"
    break;

  case 165:
#line 1538 "Aql/grammar.y"
    {
      (yyval.node) = (yyvsp[0].node);
    }
#line 3980 "Aql/grammar.cpp"
    break;

  case 166:
#line 1541 "Aql/grammar.y"
    {
      (yyval.node) = (yyvsp[0].node);
    }
#line 3988 "Aql/grammar.cpp"
    break;

  case 167:
#line 1547 "Aql/grammar.y"
    {
      auto node = parser->ast()->createNodeArray();
      parser->pushArray(node);
    }
#line 3997 "Aql/grammar.cpp"
    break;

  case 168:
#line 1550 "Aql/grammar.y"
    {
      (yyval.node) = parser->popArray();
    }
#line 4005 "Aql/grammar.cpp"
    break;

  case 169:
#line 1556 "Aql/grammar.y"
    {
    }
#line 4012 "Aql/grammar.cpp"
    break;

  case 170:
#line 1558 "Aql/grammar.y"
    {
    }
#line 4019 "Aql/grammar.cpp"
    break;

  case 171:
#line 1560 "Aql/grammar.y"
    {
    }
#line 4026 "Aql/grammar.cpp"
    break;

  case 172:
#line 1565 "Aql/grammar.y"
    {
    }
#line 4033 "Aql/grammar.cpp"
    break;

  case 173:
#line 1567 "Aql/grammar.y"
    {
    }
#line 4040 "Aql/grammar.cpp"
    break;

  case 174:
#line 1572 "Aql/grammar.y"
    {
      parser->pushArrayElement((yyvsp[0].node));
    }
#line 4048 "Aql/grammar.cpp"
    break;

  case 175:
#line 1578 "Aql/grammar.y"
    {
      (yyval.node) = nullptr;
    }
#line 4056 "Aql/grammar.cpp"
    break;

  case 176:
#line 1581 "Aql/grammar.y"
    {
      if ((yyvsp[0].node) == nullptr) {
        ABORT_OOM
      }

      // we always return an array with two values: SEARCH and OPTIONS
      // as only one of these values will be set here, the other value is NOP
      auto node = parser->ast()->createNodeArray(2);
      // only one extra qualifier. now we need to check if it is SEARCH or OPTIONS

      if (TRI_CaseEqualString((yyvsp[-1].strval).value, "SEARCH")) {
        // found SEARCH
        node->addMember((yyvsp[0].node));
        node->addMember(parser->ast()->createNodeNop());
      } else {
        // everything else must be OPTIONS
        if (!TRI_CaseEqualString((yyvsp[-1].strval).value, "OPTIONS")) {
          parser->registerParseError(TRI_ERROR_QUERY_PARSE, "unexpected qualifier '%s', expecting 'SEARCH' or 'OPTIONS'", (yyvsp[-1].strval).value, yylloc.first_line, yylloc.first_column);
        }

        node->addMember(parser->ast()->createNodeNop());
        node->addMember((yyvsp[0].node));
      }

      (yyval.node) = node;
    }
#line 4087 "Aql/grammar.cpp"
    break;

  case 177:
#line 1607 "Aql/grammar.y"
    {
      if ((yyvsp[-2].node) == nullptr) {
        ABORT_OOM
      }

      // two extra qualifiers. we expect them in the order: SEARCH, then OPTIONS

      if (!TRI_CaseEqualString((yyvsp[-3].strval).value, "SEARCH") ||
          !TRI_CaseEqualString((yyvsp[-1].strval).value, "OPTIONS")) {
        parser->registerParseError(TRI_ERROR_QUERY_PARSE, "unexpected qualifier '%s', expecting 'SEARCH' and 'OPTIONS'", (yyvsp[-3].strval).value, yylloc.first_line, yylloc.first_column);
      }

      auto node = parser->ast()->createNodeArray(2);
      node->addMember((yyvsp[-2].node));
      node->addMember((yyvsp[0].node));
      (yyval.node) = node;
    }
#line 4109 "Aql/grammar.cpp"
    break;

  case 178:
#line 1627 "Aql/grammar.y"
    {
      (yyval.node) = nullptr;
    }
#line 4117 "Aql/grammar.cpp"
    break;

  case 179:
#line 1630 "Aql/grammar.y"
    {
      if ((yyvsp[0].node) == nullptr) {
        ABORT_OOM
      }

      if (!TRI_CaseEqualString((yyvsp[-1].strval).value, "OPTIONS")) {
        parser->registerParseError(TRI_ERROR_QUERY_PARSE, "unexpected qualifier '%s', expecting 'OPTIONS'", (yyvsp[-1].strval).value, yylloc.first_line, yylloc.first_column);
      }

      (yyval.node) = (yyvsp[0].node);
    }
#line 4133 "Aql/grammar.cpp"
    break;

  case 180:
#line 1644 "Aql/grammar.y"
    {
      auto node = parser->ast()->createNodeObject();
      parser->pushStack(node);
    }
#line 4142 "Aql/grammar.cpp"
    break;

  case 181:
#line 1647 "Aql/grammar.y"
    {
      (yyval.node) = static_cast<AstNode*>(parser->popStack());
    }
#line 4150 "Aql/grammar.cpp"
    break;

  case 182:
#line 1653 "Aql/grammar.y"
    {
    }
#line 4157 "Aql/grammar.cpp"
    break;

  case 183:
#line 1655 "Aql/grammar.y"
    {
    }
#line 4164 "Aql/grammar.cpp"
    break;

  case 184:
#line 1657 "Aql/grammar.y"
    {
    }
#line 4171 "Aql/grammar.cpp"
    break;

  case 185:
#line 1662 "Aql/grammar.y"
    {
    }
#line 4178 "Aql/grammar.cpp"
    break;

  case 186:
#line 1664 "Aql/grammar.y"
    {
    }
#line 4185 "Aql/grammar.cpp"
    break;

  case 187:
#line 1669 "Aql/grammar.y"
    {
      // attribute-name-only (comparable to JS enhanced object literals, e.g. { foo, bar })
      auto ast = parser->ast();
      auto variable = ast->scopes()->getVariable((yyvsp[0].strval).value, (yyvsp[0].strval).length, true);

      if (variable == nullptr) {
        // variable does not exist
        parser->registerParseError(TRI_ERROR_QUERY_VARIABLE_NAME_UNKNOWN, "use of unknown variable '%s' in object literal", (yyvsp[0].strval).value, yylloc.first_line, yylloc.first_column);
      }

      // create a reference to the variable
      auto node = ast->createNodeReference(variable);
      parser->pushObjectElement((yyvsp[0].strval).value, (yyvsp[0].strval).length, node);
    }
#line 4204 "Aql/grammar.cpp"
    break;

  case 188:
#line 1683 "Aql/grammar.y"
    {
      // attribute-name : attribute-value
      parser->pushObjectElement((yyvsp[-2].strval).value, (yyvsp[-2].strval).length, (yyvsp[0].node));
    }
#line 4213 "Aql/grammar.cpp"
    break;

  case 189:
#line 1687 "Aql/grammar.y"
    {
      // bind-parameter : attribute-value
      if ((yyvsp[-2].strval).length < 1 || (yyvsp[-2].strval).value[0] == '@') {
        parser->registerParseError(TRI_ERROR_QUERY_BIND_PARAMETER_TYPE, TRI_errno_string(TRI_ERROR_QUERY_BIND_PARAMETER_TYPE), (yyvsp[-2].strval).value, yylloc.first_line, yylloc.first_column);
      }

      auto param = parser->ast()->createNodeParameter((yyvsp[-2].strval).value, (yyvsp[-2].strval).length);
      parser->pushObjectElement(param, (yyvsp[0].node));
    }
#line 4227 "Aql/grammar.cpp"
    break;

  case 190:
#line 1696 "Aql/grammar.y"
    {
      // [ attribute-name-expression ] : attribute-value
      parser->pushObjectElement((yyvsp[-3].node), (yyvsp[0].node));
    }
#line 4236 "Aql/grammar.cpp"
    break;

  case 191:
#line 1703 "Aql/grammar.y"
    {
      (yyval.intval) = 1;
    }
#line 4244 "Aql/grammar.cpp"
    break;

  case 192:
#line 1706 "Aql/grammar.y"
    {
      (yyval.intval) = (yyvsp[-1].intval) + 1;
    }
#line 4252 "Aql/grammar.cpp"
    break;

  case 193:
#line 1712 "Aql/grammar.y"
    {
      (yyval.node) = nullptr;
    }
#line 4260 "Aql/grammar.cpp"
    break;

  case 194:
#line 1715 "Aql/grammar.y"
    {
      (yyval.node) = (yyvsp[0].node);
    }
#line 4268 "Aql/grammar.cpp"
    break;

  case 195:
#line 1721 "Aql/grammar.y"
    {
      (yyval.node) = nullptr;
    }
#line 4276 "Aql/grammar.cpp"
    break;

  case 196:
#line 1724 "Aql/grammar.y"
    {
      (yyval.node) = parser->ast()->createNodeArrayLimit(nullptr, (yyvsp[0].node));
    }
#line 4284 "Aql/grammar.cpp"
    break;

  case 197:
#line 1727 "Aql/grammar.y"
    {
      (yyval.node) = parser->ast()->createNodeArrayLimit((yyvsp[-2].node), (yyvsp[0].node));
    }
#line 4292 "Aql/grammar.cpp"
    break;

  case 198:
#line 1733 "Aql/grammar.y"
    {
      (yyval.node) = nullptr;
    }
#line 4300 "Aql/grammar.cpp"
    break;

  case 199:
#line 1736 "Aql/grammar.y"
    {
      (yyval.node) = (yyvsp[0].node);
    }
#line 4308 "Aql/grammar.cpp"
    break;

  case 200:
#line 1742 "Aql/grammar.y"
    {
      (yyval.node) = parser->ast()->createNodeValueString((yyvsp[0].strval).value, (yyvsp[0].strval).length);
    }
#line 4316 "Aql/grammar.cpp"
    break;

  case 201:
#line 1745 "Aql/grammar.y"
    {
      (yyval.node) = (yyvsp[0].node);
    }
#line 4324 "Aql/grammar.cpp"
    break;

  case 202:
#line 1748 "Aql/grammar.y"
    {
      auto tmp = parser->ast()->createNodeValueString((yyvsp[0].strval).value, (yyvsp[0].strval).length);
      (yyval.node) = parser->ast()->createNodeCollectionDirection((yyvsp[-1].intval), tmp);
    }
#line 4333 "Aql/grammar.cpp"
    break;

  case 203:
#line 1752 "Aql/grammar.y"
    {
      (yyval.node) = parser->ast()->createNodeCollectionDirection((yyvsp[-1].intval), (yyvsp[0].node));
    }
#line 4341 "Aql/grammar.cpp"
    break;

  case 204:
#line 1758 "Aql/grammar.y"
    {
       auto node = static_cast<AstNode*>(parser->peekStack());
       node->addMember((yyvsp[0].node));
     }
#line 4350 "Aql/grammar.cpp"
    break;

  case 205:
#line 1762 "Aql/grammar.y"
    {
       auto node = static_cast<AstNode*>(parser->peekStack());
       node->addMember((yyvsp[0].node));
     }
#line 4359 "Aql/grammar.cpp"
    break;

  case 206:
#line 1769 "Aql/grammar.y"
    {
      auto node = parser->ast()->createNodeArray();
      node->addMember((yyvsp[0].node));
      auto const& resolver = parser->query().resolver();
      (yyval.node) = parser->ast()->createNodeCollectionList(node, resolver);
    }
#line 4370 "Aql/grammar.cpp"
    break;

  case 207:
#line 1775 "Aql/grammar.y"
    {
      auto node = parser->ast()->createNodeArray();
      parser->pushStack(node);
      node->addMember((yyvsp[-1].node));
    }
#line 4380 "Aql/grammar.cpp"
    break;

  case 208:
#line 1779 "Aql/grammar.y"
    {
      auto node = static_cast<AstNode*>(parser->popStack());
      auto const& resolver = parser->query().resolver();
      (yyval.node) = parser->ast()->createNodeCollectionList(node, resolver);
    }
#line 4390 "Aql/grammar.cpp"
    break;

  case 209:
#line 1784 "Aql/grammar.y"
    {
      // graph name
      (yyval.node) = (yyvsp[0].node);
    }
#line 4399 "Aql/grammar.cpp"
    break;

  case 210:
#line 1788 "Aql/grammar.y"
    {
      // graph name
      (yyval.node) = parser->ast()->createNodeValueString((yyvsp[0].strval).value, (yyvsp[0].strval).length);
    }
#line 4408 "Aql/grammar.cpp"
    break;

  case 211:
#line 1797 "Aql/grammar.y"
    {
      (yyval.intval) = 2;
    }
#line 4416 "Aql/grammar.cpp"
    break;

  case 212:
#line 1800 "Aql/grammar.y"
    {
      (yyval.intval) = 1;
    }
#line 4424 "Aql/grammar.cpp"
    break;

  case 213:
#line 1803 "Aql/grammar.y"
    {
      (yyval.intval) = 0;
    }
#line 4432 "Aql/grammar.cpp"
    break;

  case 214:
#line 1809 "Aql/grammar.y"
    {
      (yyval.node) = parser->ast()->createNodeDirection((yyvsp[0].intval), 1);
    }
#line 4440 "Aql/grammar.cpp"
    break;

  case 215:
#line 1812 "Aql/grammar.y"
    {
      (yyval.node) = parser->ast()->createNodeDirection((yyvsp[0].intval), (yyvsp[-1].node));
    }
#line 4448 "Aql/grammar.cpp"
    break;

  case 216:
#line 1818 "Aql/grammar.y"
    {
      // variable or collection or view
      auto ast = parser->ast();
      AstNode* node = nullptr;

      auto variable = ast->scopes()->getVariable((yyvsp[0].strval).value, (yyvsp[0].strval).length, true);

      if (variable == nullptr) {
        // variable does not exist
        // now try special variables
        if (ast->scopes()->canUseCurrentVariable() && strcmp((yyvsp[0].strval).value, "CURRENT") == 0) {
          variable = ast->scopes()->getCurrentVariable();
        } else if (strcmp((yyvsp[0].strval).value, Variable::NAME_CURRENT) == 0) {
          variable = ast->scopes()->getCurrentVariable();
        }
      }

      if (variable != nullptr) {
        // variable alias exists, now use it
        node = ast->createNodeReference(variable);
      }

      if (node == nullptr) {
        // variable not found. so it must have been a collection or view
        auto const& resolver = parser->query().resolver();
        node = ast->createNodeDataSource(resolver, (yyvsp[0].strval).value, (yyvsp[0].strval).length, arangodb::AccessMode::Type::READ, true, false);
      }

      TRI_ASSERT(node != nullptr);

      (yyval.node) = node;
    }
#line 4485 "Aql/grammar.cpp"
    break;

  case 217:
#line 1850 "Aql/grammar.y"
    {
      (yyval.node) = (yyvsp[0].node);
    }
#line 4493 "Aql/grammar.cpp"
    break;

  case 218:
#line 1853 "Aql/grammar.y"
    {
      (yyval.node) = (yyvsp[0].node);
    }
#line 4501 "Aql/grammar.cpp"
    break;

  case 219:
#line 1856 "Aql/grammar.y"
    {
      (yyval.node) = (yyvsp[0].node);

      if ((yyval.node) == nullptr) {
        ABORT_OOM
      }
    }
#line 4513 "Aql/grammar.cpp"
    break;

  case 220:
#line 1863 "Aql/grammar.y"
    {
      if ((yyvsp[-1].node)->type == NODE_TYPE_EXPANSION) {
        // create a dummy passthru node that reduces and evaluates the expansion first
        // and the expansion on top of the stack won't be chained with any other expansions
        (yyval.node) = parser->ast()->createNodePassthru((yyvsp[-1].node));
      }
      else {
        (yyval.node) = (yyvsp[-1].node);
      }
    }
#line 4528 "Aql/grammar.cpp"
    break;

  case 221:
#line 1873 "Aql/grammar.y"
    {
      parser->ast()->scopes()->start(arangodb::aql::AQL_SCOPE_SUBQUERY);
      parser->ast()->startSubQuery();
    }
#line 4537 "Aql/grammar.cpp"
    break;

  case 222:
#line 1876 "Aql/grammar.y"
    {
      AstNode* node = parser->ast()->endSubQuery();
      parser->ast()->scopes()->endCurrent();

      std::string const variableName = parser->ast()->variables()->nextName();
      auto subQuery = parser->ast()->createNodeLet(variableName.c_str(), variableName.size(), node, false);
      parser->ast()->addOperation(subQuery);

      (yyval.node) = parser->ast()->createNodeReference(variableName);
    }
#line 4552 "Aql/grammar.cpp"
    break;

  case 223:
#line 1886 "Aql/grammar.y"
    {
      // named variable access, e.g. variable.reference
      if ((yyvsp[-2].node)->type == NODE_TYPE_EXPANSION) {
        // if left operand is an expansion already...
        // dive into the expansion's right-hand child nodes for further expansion and
        // patch the bottom-most one
        auto current = const_cast<AstNode*>(parser->ast()->findExpansionSubNode((yyvsp[-2].node)));
        TRI_ASSERT(current->type == NODE_TYPE_EXPANSION);
        current->changeMember(1, parser->ast()->createNodeAttributeAccess(current->getMember(1), (yyvsp[0].strval).value, (yyvsp[0].strval).length));
        (yyval.node) = (yyvsp[-2].node);
      }
      else {
        (yyval.node) = parser->ast()->createNodeAttributeAccess((yyvsp[-2].node), (yyvsp[0].strval).value, (yyvsp[0].strval).length);
      }
    }
#line 4572 "Aql/grammar.cpp"
    break;

  case 224:
#line 1901 "Aql/grammar.y"
    {
      // named variable access, e.g. variable.@reference
      if ((yyvsp[-2].node)->type == NODE_TYPE_EXPANSION) {
        // if left operand is an expansion already...
        // patch the existing expansion
        auto current = const_cast<AstNode*>(parser->ast()->findExpansionSubNode((yyvsp[-2].node)));
        TRI_ASSERT(current->type == NODE_TYPE_EXPANSION);
        current->changeMember(1, parser->ast()->createNodeBoundAttributeAccess(current->getMember(1), (yyvsp[0].node)));
        (yyval.node) = (yyvsp[-2].node);
      }
      else {
        (yyval.node) = parser->ast()->createNodeBoundAttributeAccess((yyvsp[-2].node), (yyvsp[0].node));
      }
    }
#line 4591 "Aql/grammar.cpp"
    break;

  case 225:
#line 1915 "Aql/grammar.y"
    {
      // indexed variable access, e.g. variable[index]
      if ((yyvsp[-3].node)->type == NODE_TYPE_EXPANSION) {
        // if left operand is an expansion already...
        // patch the existing expansion
        auto current = const_cast<AstNode*>(parser->ast()->findExpansionSubNode((yyvsp[-3].node)));
        TRI_ASSERT(current->type == NODE_TYPE_EXPANSION);
        current->changeMember(1, parser->ast()->createNodeIndexedAccess(current->getMember(1), (yyvsp[-1].node)));
        (yyval.node) = (yyvsp[-3].node);
      }
      else {
        (yyval.node) = parser->ast()->createNodeIndexedAccess((yyvsp[-3].node), (yyvsp[-1].node));
      }
    }
#line 4610 "Aql/grammar.cpp"
    break;

  case 226:
#line 1929 "Aql/grammar.y"
    {
      // variable expansion, e.g. variable[*], with optional FILTER, LIMIT and RETURN clauses
      if ((yyvsp[0].intval) > 1 && (yyvsp[-2].node)->type == NODE_TYPE_EXPANSION) {
        // create a dummy passthru node that reduces and evaluates the expansion first
        // and the expansion on top of the stack won't be chained with any other expansions
        (yyvsp[-2].node) = parser->ast()->createNodePassthru((yyvsp[-2].node));
      }

      // create a temporary iterator variable
      std::string const nextName = parser->ast()->variables()->nextName() + "_";

      if ((yyvsp[-2].node)->type == NODE_TYPE_EXPANSION) {
        auto iterator = parser->ast()->createNodeIterator(nextName.c_str(), nextName.size(), (yyvsp[-2].node)->getMember(1));
        parser->pushStack(iterator);
      }
      else {
        auto iterator = parser->ast()->createNodeIterator(nextName.c_str(), nextName.size(), (yyvsp[-2].node));
        parser->pushStack(iterator);
      }

      auto scopes = parser->ast()->scopes();
      scopes->stackCurrentVariable(scopes->getVariable(nextName));
    }
#line 4638 "Aql/grammar.cpp"
    break;

  case 227:
#line 1951 "Aql/grammar.y"
    {
      auto scopes = parser->ast()->scopes();
      scopes->unstackCurrentVariable();

      auto iterator = static_cast<AstNode const*>(parser->popStack());
      auto variableNode = iterator->getMember(0);
      TRI_ASSERT(variableNode->type == NODE_TYPE_VARIABLE);
      auto variable = static_cast<Variable const*>(variableNode->getData());

      if ((yyvsp[-7].node)->type == NODE_TYPE_EXPANSION) {
        auto expand = parser->ast()->createNodeExpansion((yyvsp[-5].intval), iterator, parser->ast()->createNodeReference(variable->name), (yyvsp[-3].node), (yyvsp[-2].node), (yyvsp[-1].node));
        (yyvsp[-7].node)->changeMember(1, expand);
        (yyval.node) = (yyvsp[-7].node);
      }
      else {
        (yyval.node) = parser->ast()->createNodeExpansion((yyvsp[-5].intval), iterator, parser->ast()->createNodeReference(variable->name), (yyvsp[-3].node), (yyvsp[-2].node), (yyvsp[-1].node));
      }
    }
#line 4661 "Aql/grammar.cpp"
    break;

  case 228:
#line 1972 "Aql/grammar.y"
    {
      (yyval.node) = (yyvsp[0].node);
    }
#line 4669 "Aql/grammar.cpp"
    break;

  case 229:
#line 1975 "Aql/grammar.y"
    {
      (yyval.node) = (yyvsp[0].node);
    }
#line 4677 "Aql/grammar.cpp"
    break;

  case 230:
#line 1981 "Aql/grammar.y"
    {
      if ((yyvsp[0].node) == nullptr) {
        ABORT_OOM
      }

      (yyval.node) = (yyvsp[0].node);
    }
#line 4689 "Aql/grammar.cpp"
    break;

  case 231:
#line 1988 "Aql/grammar.y"
    {
      if ((yyvsp[0].node) == nullptr) {
        ABORT_OOM
      }

      (yyval.node) = (yyvsp[0].node);
    }
#line 4701 "Aql/grammar.cpp"
    break;

  case 232:
#line 1998 "Aql/grammar.y"
    {
      (yyval.node) = parser->ast()->createNodeValueString((yyvsp[0].strval).value, (yyvsp[0].strval).length);
    }
#line 4709 "Aql/grammar.cpp"
    break;

  case 233:
#line 2001 "Aql/grammar.y"
    {
      (yyval.node) = (yyvsp[0].node);
    }
#line 4717 "Aql/grammar.cpp"
    break;

  case 234:
#line 2004 "Aql/grammar.y"
    {
      (yyval.node) = parser->ast()->createNodeValueNull();
    }
#line 4725 "Aql/grammar.cpp"
    break;

  case 235:
#line 2007 "Aql/grammar.y"
    {
      (yyval.node) = parser->ast()->createNodeValueBool(true);
    }
#line 4733 "Aql/grammar.cpp"
    break;

  case 236:
#line 2010 "Aql/grammar.y"
    {
      (yyval.node) = parser->ast()->createNodeValueBool(false);
    }
#line 4741 "Aql/grammar.cpp"
    break;

  case 237:
#line 2016 "Aql/grammar.y"
    {
      auto const& resolver = parser->query().resolver();
      (yyval.node) = parser->ast()->createNodeCollection(resolver, (yyvsp[0].strval).value, (yyvsp[0].strval).length, arangodb::AccessMode::Type::WRITE);
    }
#line 4750 "Aql/grammar.cpp"
    break;

  case 238:
#line 2020 "Aql/grammar.y"
    {
      auto const& resolver = parser->query().resolver();
      (yyval.node) = parser->ast()->createNodeCollection(resolver, (yyvsp[0].strval).value, (yyvsp[0].strval).length, arangodb::AccessMode::Type::WRITE);
    }
#line 4759 "Aql/grammar.cpp"
    break;

  case 239:
#line 2024 "Aql/grammar.y"
    {
      if ((yyvsp[0].strval).length < 2 || (yyvsp[0].strval).value[0] != '@') {
        parser->registerParseError(TRI_ERROR_QUERY_BIND_PARAMETER_TYPE, TRI_errno_string(TRI_ERROR_QUERY_BIND_PARAMETER_TYPE), (yyvsp[0].strval).value, yylloc.first_line, yylloc.first_column);
      }

      (yyval.node) = parser->ast()->createNodeParameterDatasource((yyvsp[0].strval).value, (yyvsp[0].strval).length);
    }
#line 4771 "Aql/grammar.cpp"
    break;

  case 240:
#line 2034 "Aql/grammar.y"
    {
      if ((yyvsp[0].strval).length < 2 || (yyvsp[0].strval).value[0] != '@') {
        parser->registerParseError(TRI_ERROR_QUERY_BIND_PARAMETER_TYPE, TRI_errno_string(TRI_ERROR_QUERY_BIND_PARAMETER_TYPE), (yyvsp[0].strval).value, yylloc.first_line, yylloc.first_column);
      }

      (yyval.node) = parser->ast()->createNodeParameterDatasource((yyvsp[0].strval).value, (yyvsp[0].strval).length);
    }
#line 4783 "Aql/grammar.cpp"
    break;

  case 241:
#line 2041 "Aql/grammar.y"
    {
      (yyval.node) = parser->ast()->createNodeParameter((yyvsp[0].strval).value, (yyvsp[0].strval).length);
    }
#line 4791 "Aql/grammar.cpp"
    break;

  case 242:
#line 2047 "Aql/grammar.y"
    {
      (yyval.strval) = (yyvsp[0].strval);
    }
#line 4799 "Aql/grammar.cpp"
    break;

  case 243:
#line 2050 "Aql/grammar.y"
    {
      (yyval.strval) = (yyvsp[0].strval);
    }
#line 4807 "Aql/grammar.cpp"
    break;

  case 244:
#line 2055 "Aql/grammar.y"
    {
      (yyval.strval) = (yyvsp[0].strval);
    }
#line 4815 "Aql/grammar.cpp"
    break;


#line 4819 "Aql/grammar.cpp"

      default: break;
    }
  /* User semantic actions sometimes alter yychar, and that requires
     that yytoken be updated with the new translation.  We take the
     approach of translating immediately before every use of yytoken.
     One alternative is translating here after every semantic action,
     but that translation would be missed if the semantic action invokes
     YYABORT, YYACCEPT, or YYERROR immediately after altering yychar or
     if it invokes YYBACKUP.  In the case of YYABORT or YYACCEPT, an
     incorrect destructor might then be invoked immediately.  In the
     case of YYERROR or YYBACKUP, subsequent parser actions might lead
     to an incorrect destructor call or verbose syntax error message
     before the lookahead is translated.  */
  YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyn], &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);

  *++yyvsp = yyval;
  *++yylsp = yyloc;

  /* Now 'shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */
  {
    const int yylhs = yyr1[yyn] - YYNTOKENS;
    const int yyi = yypgoto[yylhs] + *yyssp;
    yystate = (0 <= yyi && yyi <= YYLAST && yycheck[yyi] == *yyssp
               ? yytable[yyi]
               : yydefgoto[yylhs]);
  }

  goto yynewstate;


/*--------------------------------------.
| yyerrlab -- here on detecting error.  |
`--------------------------------------*/
yyerrlab:
  /* Make sure we have latest lookahead translation.  See comments at
     user semantic actions for why this is necessary.  */
  yytoken = yychar == YYEMPTY ? YYEMPTY : YYTRANSLATE (yychar);

  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
#if ! YYERROR_VERBOSE
      yyerror (&yylloc, parser, YY_("syntax error"));
#else
# define YYSYNTAX_ERROR yysyntax_error (&yymsg_alloc, &yymsg, \
                                        yyssp, yytoken)
      {
        char const *yymsgp = YY_("syntax error");
        int yysyntax_error_status;
        yysyntax_error_status = YYSYNTAX_ERROR;
        if (yysyntax_error_status == 0)
          yymsgp = yymsg;
        else if (yysyntax_error_status == 1)
          {
            if (yymsg != yymsgbuf)
              YYSTACK_FREE (yymsg);
            yymsg = (char *) YYSTACK_ALLOC (yymsg_alloc);
            if (!yymsg)
              {
                yymsg = yymsgbuf;
                yymsg_alloc = sizeof yymsgbuf;
                yysyntax_error_status = 2;
              }
            else
              {
                yysyntax_error_status = YYSYNTAX_ERROR;
                yymsgp = yymsg;
              }
          }
        yyerror (&yylloc, parser, yymsgp);
        if (yysyntax_error_status == 2)
          goto yyexhaustedlab;
      }
# undef YYSYNTAX_ERROR
#endif
    }

  yyerror_range[1] = yylloc;

  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
         error, discard it.  */

      if (yychar <= YYEOF)
        {
          /* Return failure if at end of input.  */
          if (yychar == YYEOF)
            YYABORT;
        }
      else
        {
          yydestruct ("Error: discarding",
                      yytoken, &yylval, &yylloc, parser);
          yychar = YYEMPTY;
        }
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:
  /* Pacify compilers when the user code never invokes YYERROR and the
     label yyerrorlab therefore never appears in user code.  */
  if (0)
    YYERROR;

  /* Do not reclaim the symbols of the rule whose action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;      /* Each real token shifted decrements this.  */

  for (;;)
    {
      yyn = yypact[yystate];
      if (!yypact_value_is_default (yyn))
        {
          yyn += YYTERROR;
          if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
            {
              yyn = yytable[yyn];
              if (0 < yyn)
                break;
            }
        }

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
        YYABORT;

      yyerror_range[1] = *yylsp;
      yydestruct ("Error: popping",
                  yystos[yystate], yyvsp, yylsp, parser);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END

  yyerror_range[2] = yylloc;
  /* Using YYLLOC is tempting, but would change the location of
     the lookahead.  YYLOC is available though.  */
  YYLLOC_DEFAULT (yyloc, yyerror_range, 2);
  *++yylsp = yyloc;

  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", yystos[yyn], yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;


/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;


#if !defined yyoverflow || YYERROR_VERBOSE
/*-------------------------------------------------.
| yyexhaustedlab -- memory exhaustion comes here.  |
`-------------------------------------------------*/
yyexhaustedlab:
  yyerror (&yylloc, parser, YY_("memory exhausted"));
  yyresult = 2;
  /* Fall through.  */
#endif


/*-----------------------------------------------------.
| yyreturn -- parsing is finished, return the result.  |
`-----------------------------------------------------*/
yyreturn:
  if (yychar != YYEMPTY)
    {
      /* Make sure we have latest lookahead translation.  See comments at
         user semantic actions for why this is necessary.  */
      yytoken = YYTRANSLATE (yychar);
      yydestruct ("Cleanup: discarding lookahead",
                  yytoken, &yylval, &yylloc, parser);
    }
  /* Do not reclaim the symbols of the rule whose action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
                  yystos[*yyssp], yyvsp, yylsp, parser);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
#if YYERROR_VERBOSE
  if (yymsg != yymsgbuf)
    YYSTACK_FREE (yymsg);
#endif
  return yyresult;
}
