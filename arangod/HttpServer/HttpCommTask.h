////////////////////////////////////////////////////////////////////////////////
/// DISCLAIMER
///
/// Copyright 2014-2016 ArangoDB GmbH, Cologne, Germany
/// Copyright 2004-2014 triAGENS GmbH, Cologne, Germany
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///
///     http://www.apache.org/licenses/LICENSE-2.0
///
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// Copyright holder is ArangoDB GmbH, Cologne, Germany
///
/// @author Dr. Frank Celler
/// @author Achim Brandt
////////////////////////////////////////////////////////////////////////////////

#ifndef ARANGOD_HTTP_SERVER_HTTP_COMM_TASK_H
#define ARANGOD_HTTP_SERVER_HTTP_COMM_TASK_H 1

#include "Scheduler/SocketTask.h"
#include "HttpServer/ArangoTask.h" 
#include "Basics/Mutex.h"
#include "Basics/StringBuffer.h"
#include "Basics/WorkItem.h"

#include <deque>

namespace arangodb {
namespace rest {
class HttpCommTask;
class GeneralHandler;
class GeneralRequest;
class GeneralResponse;
class GeneralServer;
class HttpServerJob;


////////////////////////////////////////////////////////////////////////////////
/// @brief http communication
////////////////////////////////////////////////////////////////////////////////

class HttpCommTask : public ArangoTask {
  HttpCommTask(HttpCommTask const&) = delete;
  HttpCommTask const& operator=(HttpCommTask const&) = delete;

  
 public:
  //////////////////////////////////////////////////////////////////////////////
  /// @brief constructs a new task
  //////////////////////////////////////////////////////////////////////////////

  HttpCommTask(GeneralServer*, TRI_socket_t, const ConnectionInfo&,
               double keepAliveTimeout);

  //////////////////////////////////////////////////////////////////////////////
  /// @brief destructs a task
  //////////////////////////////////////////////////////////////////////////////

 protected:
  ~HttpCommTask();

  
 public:

  //////////////////////////////////////////////////////////////////////////////
  /// @brief reads data from the socket
  //////////////////////////////////////////////////////////////////////////////

  bool processRead();

  protected:

  //////////////////////////////////////////////////////////////////////////////
  /// @brief reads data from the socket
  //////////////////////////////////////////////////////////////////////////////

  void addResponse(GeneralResponse*);

  //////////////////////////////////////////////////////////////////////////////
  /// check the content-length header of a request and fail it is broken
  //////////////////////////////////////////////////////////////////////////////

  bool checkContentLength(bool expectContentLength);

  //////////////////////////////////////////////////////////////////////////////
  /// @brief handles CORS options
  //////////////////////////////////////////////////////////////////////////////

  void processCorsOptions(uint32_t compatibility);

  //////////////////////////////////////////////////////////////////////////////
  /// @brief processes a request
  //////////////////////////////////////////////////////////////////////////////

  void processRequest(uint32_t compatibility);


  //////////////////////////////////////////////////////////////////////////////
  /// @brief resets the internal state
  ///
  /// this method can be called to clean up when the request handling aborts
  /// prematurely
  //////////////////////////////////////////////////////////////////////////////

  void resetState(bool close);

  //////////////////////////////////////////////////////////////////////////////
  /// @brief get request compatibility
  //////////////////////////////////////////////////////////////////////////////

  int32_t getCompatibility() const;
  
 protected:

  //////////////////////////////////////////////////////////////////////////////
  /// @brief current read position
  //////////////////////////////////////////////////////////////////////////////

  size_t _readPosition;

  //////////////////////////////////////////////////////////////////////////////
  /// @brief start of the body position
  //////////////////////////////////////////////////////////////////////////////

  size_t _bodyPosition;

  //////////////////////////////////////////////////////////////////////////////
  /// @brief start position of current request
  //////////////////////////////////////////////////////////////////////////////

  size_t _startPosition;

};
}
}

#endif

