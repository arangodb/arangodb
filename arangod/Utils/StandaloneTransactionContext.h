////////////////////////////////////////////////////////////////////////////////
/// DISCLAIMER
///
/// Copyright 2014-2016 ArangoDB GmbH, Cologne, Germany
/// Copyright 2004-2014 triAGENS GmbH, Cologne, Germany
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///
///     http://www.apache.org/licenses/LICENSE-2.0
///
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// Copyright holder is ArangoDB GmbH, Cologne, Germany
///
/// @author Jan Steemann
////////////////////////////////////////////////////////////////////////////////

#ifndef ARANGOD_UTILS_STANDALONE_TRANSACTION_CONTEXT_H
#define ARANGOD_UTILS_STANDALONE_TRANSACTION_CONTEXT_H 1

#include "Basics/Common.h"

#include "VocBase/transaction.h"
#include "Utils/CollectionNameResolver.h"
#include "Utils/TransactionContext.h"

#include <velocypack/Options.h>
#include <velocypack/velocypack-aliases.h>

struct TRI_transaction_s;

namespace arangodb {

class StandaloneTransactionContext final : public TransactionContext {
 public:
  //////////////////////////////////////////////////////////////////////////////
  /// @brief create the context
  //////////////////////////////////////////////////////////////////////////////

  StandaloneTransactionContext();

  //////////////////////////////////////////////////////////////////////////////
  /// @brief destroy the context
  //////////////////////////////////////////////////////////////////////////////

  ~StandaloneTransactionContext();

 public:
  //////////////////////////////////////////////////////////////////////////////
  /// @brief return the resolver
  //////////////////////////////////////////////////////////////////////////////

  CollectionNameResolver const* getResolver() const override;

  //////////////////////////////////////////////////////////////////////////////
  /// @brief return the vpack options
  //////////////////////////////////////////////////////////////////////////////

  VPackOptions const* getVPackOptions() const override;

  //////////////////////////////////////////////////////////////////////////////
  /// @brief return the parent transaction (none in our case)
  //////////////////////////////////////////////////////////////////////////////

  struct TRI_transaction_s* getParentTransaction() const override;

  //////////////////////////////////////////////////////////////////////////////
  /// @brief register the transaction, does nothing
  //////////////////////////////////////////////////////////////////////////////

  int registerTransaction(struct TRI_transaction_s*) override;

  //////////////////////////////////////////////////////////////////////////////
  /// @brief unregister the transaction, does nothing
  //////////////////////////////////////////////////////////////////////////////

  int unregisterTransaction() override;

  //////////////////////////////////////////////////////////////////////////////
  /// @brief whether or not the transaction is embeddable
  //////////////////////////////////////////////////////////////////////////////

  bool isEmbeddable() const override;

 private:
  //////////////////////////////////////////////////////////////////////////////
  /// @brief collection name resolver
  //////////////////////////////////////////////////////////////////////////////

  CollectionNameResolver* _resolver;

  //////////////////////////////////////////////////////////////////////////////
  /// @brief the options for vpack
  //////////////////////////////////////////////////////////////////////////////

  VPackOptions _options;
};
}

#endif
