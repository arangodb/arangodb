# First rebuild glibc with a special option and provide some .deb files:
ARG COMPILER_VERSION=13
ARG CLANG_VERSION=19

# First rebuild glibc with a special option and provide some .deb files:
FROM ubuntu:24.04 as glibcdebs

COPY ./static /static
RUN /static/prepare.sh
RUN /static/rebuild_glibc.sh

# Now prepare a standard Ubuntu image and install the provided .deb files
# for glibc as a preparation:

FROM ubuntu:24.04 as prepare

RUN apt-get update && apt-get upgrade -y && apt-get install -y libgd3 linux-libc-dev libcrypt-dev libnsl-dev rpcsvc-proto libtirpc-dev

COPY --from=glibcdebs /root/debs /debs
RUN dpkg -i /debs/*.deb

# Now build V8:

#FROM ubuntu:24.04 as v81
#
#COPY ./tools/build_v8_arm64.sh /tools/build_v8_arm64.sh
#RUN /tools/build_v8_arm64.sh
#
#FROM v81 as v8
#
#COPY ./tools/install_v8_arm64.sh /tools/install_v8_arm64.sh
#RUN /tools/install_v8_arm64.sh

# Build OpenMP static library
FROM ubuntu:24.04 as openmp

ARG COMPILER_VERSION
ARG CLANG_VERSION
ARG CLANG_FULL_VERSION

RUN apt-get update --fix-missing && \
    apt-get upgrade -y && \
    apt-get install -y software-properties-common net-tools wget gnupg lsb-release

WORKDIR /

COPY static/llvm.sources ./

RUN cat llvm.sources >> /etc/apt/sources.list.d/ubuntu.sources

RUN wget -qO- https://apt.llvm.org/llvm-snapshot.gpg.key | tee /etc/apt/trusted.gpg.d/apt.llvm.org.asc

RUN apt-get update && apt-get install dpkg-dev -y

RUN apt-get source llvm-${CLANG_VERSION}-dev -y && \
  apt-get build-dep llvm-${CLANG_VERSION}-dev -y

RUN apt-get update --fix-missing && apt-get install -y \
  clang-${CLANG_VERSION} clang++-${CLANG_VERSION} \
  cmake ninja-build git

COPY patches/diff_llvm.patch .

RUN ln -s $(echo llvm-toolchain-${CLANG_VERSION}-*) /llvm-toolchain-${CLANG_VERSION}

WORKDIR /llvm-toolchain-${CLANG_VERSION}

# Patch omp to enable running when it is a static library
RUN git apply /diff_llvm.patch 

WORKDIR build

RUN cmake -G Ninja -DLLVM_ENABLE_PROJECTS="clang;openmp" -DCMAKE_C_COMPILER=clang-${CLANG_VERSION} \
  -DCMAKE_CXX_COMPILER=clang++-${CLANG_VERSION} -DCMAKE_BUILD_TYPE=RelWithDebInfo -DLIBOMP_ENABLE_SHARED=OFF \
  -DENABLE_OMPT_TOOLS=OFF -DCMAKE_BUILD_WITH_INSTALL_RPATH=ON -DCMAKE_INSTALL_PREFIX=/usr \
  -DENABLE_LIBOMPTARGET=OFF -DLIBOMP_INSTALL_ALIASES=OFF ../llvm && ninja

RUN mkdir -p /opt/omp && cp ./lib/libomp.so.5 /opt/omp/libomp.a


# Finally, build the actual build image based on the above preparation:

FROM prepare

MAINTAINER Max Neunhoeffer <max@arangodb.com>

ARG ARCH="aarch64"
ARG COMPILER_VERSION
ARG CLANG_VERSION
ARG SCCACHE_VERSION="0.9.1"

# We provide gcc 13.2.0 as well as clang 19 (latest) from LLVM

ENV COMPILER_VERSION=${COMPILER_VERSION}
ENV CLANG_VERSION=${CLANG_VERSION}

RUN apt-get update --fix-missing && \
    apt-get install -y software-properties-common net-tools gnupg2 wget && \
    apt-get update && \
    apt-get upgrade -y

COPY static/llvm.sources ./

RUN cat llvm.sources >> /etc/apt/sources.list.d/ubuntu.sources

RUN wget -qO- https://apt.llvm.org/llvm-snapshot.gpg.key | tee /etc/apt/trusted.gpg.d/apt.llvm.org.asc

ENV DEBIAN_FRONTEND=noninteractive

RUN apt-get update --fix-missing && \
  apt-get install -y build-essential gcc-${COMPILER_VERSION} g++-${COMPILER_VERSION} \
  cmake make bison flex python3 ccache git libjemalloc-dev vim exuberant-ctags gdb fish \
  psmisc sudo debhelper debconf jq wget libdb-dev curl gnupg2 gcovr prometheus bc tcpdump \
  liburing-dev cppcheck clang-${CLANG_VERSION} lldb-${CLANG_VERSION} lld-${CLANG_VERSION} \
  libc++-${CLANG_VERSION}-dev libc++abi-${CLANG_VERSION}-dev libclang-common-${CLANG_VERSION}-dev \
  libclang-rt-${CLANG_VERSION}-dev nodejs npm libomp-${CLANG_VERSION}-dev liblapack-dev libopenblas-dev gfortran \
  && apt-get clean

# yarn for UI build:
RUN npm install -g yarn

# sccache for cloud compiler cache:

RUN curl -L https://github.com/mozilla/sccache/releases/download/v${SCCACHE_VERSION}/sccache-v${SCCACHE_VERSION}-${ARCH}-unknown-linux-musl.tar.gz | tar xvz -C /tmp && mv /tmp/sccache-v${SCCACHE_VERSION}-${ARCH}-unknown-linux-musl/sccache /usr/bin/sccache && chmod +x /usr/bin/sccache && rm -rf /tmp/sccache-v${SCCACHE_VERSION}-${ARCH}-unknown-linux-musl

# Fetch V8:
#COPY --from=v8 /opt/v8/lib /opt/v8/lib
#COPY --from=v8 /opt/v8/include /opt/v8/include
#COPY --from=v8 /opt/v8/third_party /opt/v8/third_party

# Fetch libomp
COPY --from=openmp /opt/omp /opt/omp 

# Build openssl and openldap libraries in specific versions and with static
# libraries, install with prefix /opt:

COPY ./tools/* /tools/

RUN [ "/tools/install.sh", "3.4", "0" ]

COPY ./scripts /scripts

# Provide clang as "clang" and "clang++":

RUN update-alternatives --install /usr/bin/clang++ clang++ /usr/bin/clang++-${CLANG_VERSION} 100 && update-alternatives --install /usr/bin/clang clang /usr/bin/clang-${CLANG_VERSION} 100

RUN /scripts/create-sccache-hardlinks.sh

RUN LC_ALL="C" update-ccache-symlinks

RUN git config --global --add safe.directory '*'

RUN apt-get install -y python3-pip && pip3 install py7zr psutil cppcheck-junit --break-system-packages

CMD [ "/usr/bin/fish" ]
