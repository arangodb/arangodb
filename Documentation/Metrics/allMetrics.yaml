- category: Agency
  complexity: medium
  description: 'This measures the time an agency follower needs for individual

    append operations resulting from `AppendEntriesRPC` requests.

    '
  exposedBy:
  - agent
  help: 'Agency RAFT follower append histogram.

    '
  introducedIn: '3.7'
  name: arangodb_agency_append_hist_total
  threshold: 'Normally these times should be clearly sub-second.

    '
  troubleshoot: 'If you see delays here, the agents might not have enough IO bandwidth

    or might be overloaded. Try to provision more IOPS or more CPU capacity,

    potentially moving agents to separate machines.

    '
  type: histogram
  unit: ms
- category: Agency
  complexity: advanced
  description: 'This reflects the current number of callbacks the local `AgencyCache`

    has registered.

    This metric was named `arangodb_agency_cache_callback_count` in

    previous versions of ArangoDB.

    Note that on single servers this metrics will only have a non-zero value

    in "active failover" deployment mode.

    '
  exposedBy:
  - dbserver
  - coordinator
  - single
  help: 'Current number of entries in agency cache callbacks table.

    '
  introducedIn: '3.7'
  name: arangodb_agency_cache_callback_number
  threshold: 'This number will usually be very low, something like 2 or 3.

    '
  troubleshoot: 'If this number is considerably higher, this should be investigated.

    Please contact support.

    '
  type: gauge
  unit: number
- category: Agency
  complexity: advanced
  description: "This metric reflects the current number of agency callbacks being\nregistered,
    including agency cache callbacks.\nThis metric was named `arangodb_agency_callback_count`
    in previous versions \nof ArangoDB.\nNote that on single servers this metrics
    will only have a non-zero value\nin \"active failover\" deployment mode.\n"
  exposedBy:
  - coordinator
  - dbserver
  - single
  help: 'Current number of agency callbacks registered.

    '
  introducedIn: '3.6'
  name: arangodb_agency_callback_number
  threshold: 'This number will usually be very low, something like 2 or 3.

    '
  troubleshoot: 'If this number is considerably higher, this should be investigated.

    Please contact support.

    '
  type: gauge
  unit: number
- category: Agency
  complexity: advanced
  description: "This metric was named `arangodb_agency_callback_registered` in previous
    versions \nof ArangoDB.\nNote that on single servers this metrics will only have
    a non-zero value\nin \"active failover\" deployment mode.\n"
  exposedBy:
  - coordinator
  - dbserver
  - single
  help: 'Total number of agency callbacks ever registered.

    '
  introducedIn: '3.8'
  name: arangodb_agency_callback_registered_total
  type: counter
  unit: number
- category: Agency
  complexity: advanced
  description: "Current number of entries in agency client id lookup table.\nThe lookup
    table is used internally for agency inquire operations\nand should be compacted
    at the same time when the agency's in-memory\nlog is compacted. \n"
  exposedBy:
  - agent
  help: 'Current number of entries in agency client id lookup table.

    '
  introducedIn: '3.6'
  name: arangodb_agency_client_lookup_table_size
  type: gauge
  unit: number
- category: Agency
  complexity: medium
  description: 'Agency RAFT commit time histogram. Provides a distribution

    of commit times for all agency write operations.

    '
  exposedBy:
  - agent
  help: 'Agency RAFT commit histogram.

    '
  introducedIn: '3.7'
  name: arangodb_agency_commit_hist
  type: histogram
  unit: ms
- category: Agency
  complexity: medium
  description: 'Agency compaction time histogram. Provides a distribution

    of agency compaction run times. Compactions are triggered after

    `--agency.compaction-keep-size` entries have accumulated in the

    RAFT log.

    '
  exposedBy:
  - agent
  help: 'Agency compaction time histogram.

    '
  introducedIn: '3.6'
  name: arangodb_agency_compaction_hist
  troubleshoot: 'If compaction takes too long, it may be useful to reduce the number

    of log entries to keep in `--agency.compaction-keep-size`.

    '
  type: histogram
  unit: ms
- category: Agency
  complexity: simple
  description: "This agent's commit index (i.e. the index until it has advanced in
    \nthe agency's RAFT protocol).\n"
  exposedBy:
  - agent
  help: 'This agent''s commit index.

    '
  introducedIn: '3.7'
  name: arangodb_agency_local_commit_index
  type: gauge
  unit: number
- category: Agency
  complexity: simple
  description: 'Size of the agency''s in-memory part of replicated log in bytes.

    The replicated log will grow in memory until a certain number of

    log entries have been accumulated. Then the in-memory log will

    be compacted. The number of in-memory log entries to keep before

    log compaction kicks in can be controlled via the startup option

    ` --agency.compaction-keep-size`.

    '
  exposedBy:
  - agent
  help: 'Agency replicated log size.

    '
  introducedIn: '3.6'
  name: arangodb_agency_log_size_bytes
  type: gauge
  unit: bytes
- category: Agency
  complexity: simple
  description: 'Agency read with no leader.

    '
  exposedBy:
  - agent
  help: 'Agency read no leader.

    '
  introducedIn: '3.7'
  name: arangodb_agency_read_no_leader_total
  threshold: 'This should normally not happen. If it happens regularly, the agency

    is reelecting its leader often.

    '
  troubleshoot: 'The latency of the network between the agents might be too high or

    the agents may be overloaded. It might help to move agent instances

    to separate machines.

    '
  type: counter
  unit: number
- category: Agency
  complexity: simple
  description: 'Number of agency read operations which went ok.

    '
  exposedBy:
  - agent
  help: 'Agency read ok.

    '
  introducedIn: '3.7'
  name: arangodb_agency_read_ok_total
  type: counter
  unit: number
- category: Agency
  complexity: medium
  description: 'Counter for FailedServer jobs.

    '
  exposedBy:
  - agent
  help: 'Counter for FailedServer jobs.

    '
  introducedIn: '3.7'
  name: arangodb_agency_supervision_failed_server_total
  threshold: 'Many FailedServer jobs indicate frequent failures of dbservers. This

    is generally not good.

    '
  troubleshoot: 'Find the root cause of server failures. Overload and bad network
    latency

    can lead to misdetected server failures.

    '
  type: counter
  unit: number
- category: Agency
  complexity: simple
  description: 'Agency Supervision runtime histogram.

    '
  exposedBy:
  - agent
  help: 'Agency Supervision runtime histogram.

    '
  introducedIn: '3.7'
  name: arangodb_agency_supervision_runtime_msec
  threshold: 'The supervision runtime goes up linearly with the number of collections

    and shards.

    '
  type: histogram
  unit: ms
- category: Agency
  complexity: medium
  description: 'Agency supervision wait for replication time.

    '
  exposedBy:
  - agent
  help: 'Agency supervision wait for replication time.

    '
  introducedIn: '3.7'
  name: arangodb_agency_supervision_runtime_wait_for_replication_msec
  type: histogram
  unit: ms
- category: Agency
  complexity: medium
  description: 'Agency''s term.

    '
  exposedBy:
  - agent
  help: 'Agency''s term.

    '
  introducedIn: '3.7'
  name: arangodb_agency_term
  threshold: 'This number should usually not grow. If it does, the agency is doing

    repeated reelections, which suggests overload or bad network latency

    between agents.

    '
  troubleshoot: 'It might help to reduce network latency between agents or move agent

    instances to separate machines.

    '
  type: gauge
  unit: number
- category: Agency
  complexity: medium
  description: 'Agency write time histogram.

    '
  exposedBy:
  - agent
  help: 'Agency write time histogram.

    '
  introducedIn: '3.7'
  name: arangodb_agency_write_hist
  type: histogram
  unit: ms
- category: Agency
  complexity: medium
  description: 'Agency write operations with no leader.

    '
  exposedBy:
  - agent
  help: 'Agency write operations with no leader.

    '
  introducedIn: '3.7'
  name: arangodb_agency_write_no_leader_total
  type: counter
  unit: number
- category: Agency
  complexity: medium
  description: 'Agency write operations which went ok.

    '
  exposedBy:
  - agent
  help: 'Agency write operations which went ok.

    '
  introducedIn: '3.7'
  name: arangodb_agency_write_ok_total
  type: counter
  unit: number
- category: Network
  complexity: medium
  description: 'This histogram shows how long requests to the agency took.

    '
  exposedBy:
  - coordinator
  - dbserver
  help: 'Request time for Agency requests.

    '
  introducedIn: '3.7'
  name: arangodb_agencycomm_request_time_msec
  threshold: "Usually, such requests should be relatively quick, mostly clearly\nsub-second.
    \n"
  troubleshoot: 'If the network or the agents are overloaded, it can help to move

    agent instances to separate machines.

    '
  type: histogram
  unit: ms
- category: AQL
  complexity: simple
  description: 'Total number of AQL queries finished.

    This metric was named `arangodb_aql_all_query` in previous

    versions of ArangoDB.

    '
  exposedBy:
  - coordinator
  - dbserver
  - agent
  - single
  help: 'Total number of AQL queries finished.

    '
  introducedIn: '3.6'
  name: arangodb_aql_all_query_total
  type: counter
  unit: number
- category: AQL
  complexity: simple
  description: 'Current number of AQL queries executing.

    '
  exposedBy:
  - coordinator
  - dbserver
  - agent
  - single
  help: 'Current number of AQL queries executing.

    '
  introducedIn: '3.8'
  name: arangodb_aql_current_query
  type: gauge
  unit: number
- category: AQL
  complexity: simple
  description: 'Total memory limit for all AQL queries combined, in bytes.

    If this value is reported as `0`, it means there is no total memory

    limit in place for AQL queries. The value can be adjusted by the setting

    the `--query.global-memory-limit` startup option.

    '
  exposedBy:
  - coordinator
  - dbserver
  - agent
  - single
  help: 'Total memory limit for all AQL queries combined.

    '
  introducedIn: '3.8'
  name: arangodb_aql_global_memory_limit
  type: gauge
  unit: bytes
- category: AQL
  complexity: simple
  description: "Total memory usage of all AQL queries currently executing.\nThe granularity
    of this metric is steps of 32768 bytes. The current\nmemory usage of all AQL queries
    will be compared against the configured\nlimit in the `--query.global-memory-limit`
    startup option. \nIf the startup option has a value of `0`, then no global memory
    limit\nwill be enforced. If the startup option has a non-zero value, queries\nwill
    be aborted once the total query memory usage goes above the configured\nlimit.\n"
  exposedBy:
  - coordinator
  - dbserver
  - agent
  - single
  help: 'Total memory usage of all AQL queries executing; granularity: 32768 bytes
    steps.

    '
  introducedIn: '3.8'
  name: arangodb_aql_global_memory_usage
  type: gauge
  unit: bytes
- category: AQL
  complexity: simple
  description: "Total number of times the global query memory limit threshold was
    reached.\nThis can happen if all running AQL queries in total try to use more
    memory than\nconfigured via the `--query.global-memory-limit` startup option.\nEvery
    time this counter will increase, an AQL query will have aborted with a \n\"resource
    limit exceeded\" error.\n"
  exposedBy:
  - coordinator
  - dbserver
  - agent
  - single
  help: 'Number of times the global query memory limit threshold was reached.

    '
  introducedIn: '3.8'
  name: arangodb_aql_global_query_memory_limit_reached
  type: counter
  unit: number
- category: AQL
  complexity: simple
  description: "Total number of times a local query memory limit threshold was reached,
    i.e.\na single query tried to allocate more memory than configured in the query's\n`memoryLimit`
    attribute or the value configured via the startup option\n`--query.memory-limit`.\nEvery
    time this counter will increase, an AQL query will have aborted with a \n\"resource
    limit exceeded\" error.\n"
  exposedBy:
  - coordinator
  - dbserver
  - agent
  - single
  help: 'Number of times a local query memory limit threshold was reached.

    '
  introducedIn: '3.8'
  name: arangodb_aql_local_query_memory_limit_reached
  type: counter
  unit: number
- category: AQL
  complexity: simple
  description: 'Execution time histogram for all AQL queries, in seconds.

    The histogram includes all slow queries.

    '
  exposedBy:
  - coordinator
  - dbserver
  - agent
  - single
  help: 'Execution time histogram for all AQL queries.

    '
  introducedIn: '3.6'
  name: arangodb_aql_query_time
  type: histogram
  unit: s
- category: AQL
  complexity: simple
  description: 'Execution time histogram for slow AQL queries, in seconds.

    Queries are considered "slow" if their execution time is above the

    threshold configured in the startup options `--query.slow-threshold`

    or `--query.slow-streaming-threshold`, resp.

    '
  exposedBy:
  - coordinator
  - dbserver
  - agent
  - single
  help: 'Execution time histogram for slow AQL queries.

    '
  introducedIn: '3.6'
  name: arangodb_aql_slow_query_time
  type: histogram
  unit: s
- category: AQL
  complexity: simple
  description: 'Total execution time of all AQL queries, in milliseconds,

    including all slow queries.

    '
  exposedBy:
  - coordinator
  - dbserver
  - agent
  - single
  help: 'Total execution time of all AQL queries.

    '
  introducedIn: '3.6'
  name: arangodb_aql_total_query_time_msec_total
  type: counter
  unit: ms
- category: Statistics
  complexity: simple
  description: 'Histogram of the received request sizes in bytes.

    '
  exposedBy:
  - coordinator
  - dbserver
  - agent
  - single
  help: 'Bytes received for a request

    '
  introducedIn: '3.7'
  name: arangodb_client_connection_statistics_bytes_received
  type: histogram
  unit: bytes
- category: Statistics
  complexity: simple
  description: 'Histogram of the sent response sizes in bytes

    '
  exposedBy:
  - coordinator
  - dbserver
  - agent
  - single
  help: 'Bytes sent for a request

    '
  introducedIn: '3.7'
  name: arangodb_client_connection_statistics_bytes_sent
  type: histogram
  unit: bytes
- category: Statistics
  complexity: simple
  description: 'The number of client connections that are currently open.

    Note: this metric considers only HTTP and HTTP/2 connections, but not VST

    connections.

    '
  exposedBy:
  - coordinator
  - dbserver
  - agent
  - single
  help: 'The number of client connections that are currently open

    '
  introducedIn: '3.6'
  name: arangodb_client_connection_statistics_client_connections
  type: gauge
  unit: number
- category: Statistics
  complexity: advanced
  description: 'Histogram of the connection''s total lifetime, i.e., the time between
    the

    point when the connection was established until it was closed. Smaller

    numbers indicate that there is not a lot of load and/or that connections

    are not reused for multiple requests. Consider using keep-alive header

    or HTTP/2 or VST.

    '
  exposedBy:
  - coordinator
  - dbserver
  - agent
  - single
  help: 'Total connection time of a client

    '
  introducedIn: '3.7'
  name: arangodb_client_connection_statistics_connection_time
  type: histogram
  unit: s
- category: Statistics
  complexity: simple
  description: 'Histogram of I/O times needed to answer a request. This includes the
    time

    required to read the incoming request as well as the time required to send

    the response.

    '
  exposedBy:
  - coordinator
  - dbserver
  - agent
  - single
  help: 'I/O time needed to answer a request

    '
  introducedIn: '3.7'
  name: arangodb_client_connection_statistics_io_time
  type: histogram
  unit: number
- category: Statistics
  complexity: simple
  description: 'Histogram of the time requests are spending on a queue waiting to
    be

    processed. The overwhelming majority of these times should be clearly

    sub-second.

    '
  exposedBy:
  - coordinator
  - dbserver
  - agent
  - single
  help: 'Queueing time needed for requests

    '
  introducedIn: '3.7'
  name: arangodb_client_connection_statistics_queue_time
  type: histogram
  unit: s
- category: Statistics
  complexity: simple
  description: 'Histogram of the time required to actually process a request. This
    does not

    include the time required to read the incoming request, the time the request

    is sitting on the queue, or the time required to send the response.

    '
  exposedBy:
  - coordinator
  - dbserver
  - agent
  - single
  help: 'Request time needed to answer a request

    '
  introducedIn: '3.7'
  name: arangodb_client_connection_statistics_request_time
  type: histogram
  unit: s
- category: Statistics
  complexity: simple
  description: 'Histogram of the total times required to process a request. This includes

    the time required to read the incoming request, the time the request is

    sitting in the queue, the time to actually process the request, and the

    time required to send the response.

    '
  exposedBy:
  - coordinator
  - dbserver
  - agent
  - single
  help: 'Total time needed to answer a request

    '
  introducedIn: '3.7'
  name: arangodb_client_connection_statistics_total_time
  type: histogram
  unit: s
- category: Transactions
  complexity: medium
  description: "Total amount of time it took to acquire collection/shard locks for\nwrite
    operations, summed up for all collections/shards. Will not be increased \nfor
    any read operations.\nThe value is measured in microseconds.\n"
  exposedBy:
  - dbserver
  - agent
  - single
  help: 'Total amount of collection lock acquisition time.

    '
  introducedIn: '3.6'
  name: arangodb_collection_lock_acquisition_micros_total
  troubleshoot: "In case this value is considered too high, check if there are AQL
    queries\nor transactions that use exclusive locks on collections, and try to reduce
    them. \nOperations using exclusive locks may lock out other queries/transactions
    temporarily, \nwhich will lead to an increase in lock acquisition time.\n"
  type: counter
  unit: us
- category: RocksDB
  complexity: medium
  description: 'Histogram of the collection/shard lock acquisition times. Locks will
    be acquired for

    all write operations, but not for read operations.

    The values here are measured in seconds.

    '
  exposedBy:
  - dbserver
  - agent
  - single
  help: 'Collection lock acquisition time histogram.

    '
  introducedIn: '3.6'
  name: arangodb_collection_lock_acquisition_time
  troubleshoot: "In case these values are considered too high, check if there are
    AQL queries\nor transactions that use exclusive locks on collections, and try
    to reduce them. \nOperations using exclusive locks may lock out other queries/transactions
    temporarily, \nwhich will lead to an increase in lock acquisition times.\n"
  type: histogram
  unit: s
- category: Transactions
  complexity: advanced
  description: 'Number of transactions using sequential locking of collections to
    avoid deadlocking.

    By default, a coordinator will try to lock all shards of a collection in parallel.

    This approach is normally fast but can cause deadlocks with other transactions
    that

    lock the same shards in a different order. In case such a deadlock is detected,
    the

    coordinator will abort the lock round and start a new one that locks all shards
    in

    sequential order. This will avoid deadlocks, but has a higher setup overhead.

    '
  exposedBy:
  - coordinator
  help: 'Number of transactions using sequential locking of collections to avoid deadlocking.

    '
  introducedIn: '3.7'
  name: arangodb_collection_lock_sequential_mode_total
  troubleshoot: "In case this value is increasing, check if there are AQL queries
    or transactions that \nuse exclusive locks on collections, and try to reduce them.
    \nOperations using exclusive locks may lock out other queries/transactions temporarily,
    \nwhich will lead can lead to (temporary) deadlocks in case the queries/transactions\nare
    run on multiple shards on different servers.\n"
  type: counter
  unit: number
- category: Transactions
  complexity: medium
  description: 'Number of timeouts when trying to acquire collection exclusive locks.

    This counter will be increased whenever an exclusive collection lock

    cannot be acquired within the configured lock timeout.

    '
  exposedBy:
  - dbserver
  - agent
  - single
  help: 'Number of timeouts when trying to acquire collection exclusive locks.

    '
  introducedIn: '3.6'
  name: arangodb_collection_lock_timeouts_exclusive_total
  troubleshoot: "In case this value is considered too high, check if there are AQL
    queries\nor transactions that use exclusive locks on collections, and try to reduce
    them. \nOperations using exclusive locks may lock out other queries/transactions
    temporarily, \nwhich can lead to other operations running into timeouts waiting
    for the same locks.\n"
  type: counter
  unit: number
- category: Transactions
  complexity: medium
  description: "Number of timeouts when trying to acquire collection write locks.\nThis
    counter will be increased whenever a collection write lock\ncannot be acquired
    within the configured lock timeout. \nThis can only happen if writes on a collection
    are locked out by\nother operations on the collection that use an exclusive lock.
    Writes\nare not locked out by other, non-exclusively locked writes.\n"
  exposedBy:
  - dbserver
  - agent
  - single
  help: 'Number of timeouts when trying to acquire collection write locks.

    '
  introducedIn: '3.6'
  name: arangodb_collection_lock_timeouts_write_total
  troubleshoot: "In case this value is considered too high, check if there are AQL
    queries\nor transactions that use exclusive locks on collections, and try to reduce
    them. \nOperations using exclusive locks may lock out other queries/transactions
    temporarily, \nwhich can lead to other operations running into timeouts waiting
    for the same locks.\n"
  type: counter
  unit: number
- category: Transactions
  complexity: simple
  description: 'Total time spent in collection truncate operations, including both

    user-initiated truncate operations and truncate operations

    executed by the synchronous replication on followers.

    Note that this metric is only present when the command

    line option `--server.export-read-write-metrics` is set to `true`.

    '
  exposedBy:
  - dbserver
  - agent
  - single
  help: 'Total time spent in collection truncate operations.

    '
  introducedIn: '3.8'
  name: arangodb_collection_truncate_time
  type: histogram
  unit: s
- category: Replication
  complexity: medium
  description: 'Total number of collection truncate operations by synchronous

    replication on followers. Note that this metric is only present when the command

    line option `--server.export-read-write-metrics` is set to `true`.

    '
  exposedBy:
  - dbserver
  help: 'Total number of collection truncate operations by synchronous replication.

    '
  introducedIn: '3.8'
  name: arangodb_collection_truncates_replication_total
  type: counter
  unit: number
- category: Transactions
  complexity: simple
  description: 'Total number of collection truncate operations on leaders (excl. synchronous

    replication). Note that this metric is only present when the command

    line option `--server.export-read-write-metrics` is set to `true`.

    '
  exposedBy:
  - agent
  - dbserver
  - single
  help: 'Total number of collection truncate operations (excl. synchronous replication).

    '
  introducedIn: '3.8'
  name: arangodb_collection_truncates_total
  type: counter
  unit: number
- category: Connectivity
  complexity: medium
  description: 'Total number of connections created for connection pool. There are

    two pools, one for the agency communication with label `AgencyComm`

    and one for the other cluster internal communication with label

    `ClusterComm`.

    '
  exposedBy:
  - coordinator
  - dbserver
  help: 'Total number of connections created for connection pool

    '
  introducedIn: '3.8'
  name: arangodb_connection_pool_connections_created_total
  threshold: 'Because of idle timeouts, the total number of connections ever created

    will grow. However, under high load, most connections should usually

    be reused and a fast growth of this number can indicate underlying

    connectivity issues.

    '
  type: counter
  unit: number
- category: Connectivity
  complexity: medium
  description: 'Current number of connections in pool. There are two pools, one for
    the

    agency communication with label `AgencyComm` and one for the other

    cluster internal communication with label `ClusterComm`.

    '
  exposedBy:
  - coordinator
  - dbserver
  help: 'Current number of connections in pool

    '
  introducedIn: '3.8'
  name: arangodb_connection_connections_current
  threshold: 'Normally, one should not see an excessive amount of open connections

    here, unless a very high amount of operations happens concurrently.

    '
  type: gauge
  unit: number
- category: Connectivity
  complexity: simple
  description: 'Time to lease a connection from the connection pool. There are two
    pools,

    one for the agency communication with label `AgencyComm` and one for

    the other cluster internal communication with label `ClusterComm`.

    '
  exposedBy:
  - coordinator
  - dbserver
  help: 'Time to lease a connection from the connection pool

    '
  introducedIn: '3.8'
  name: arangodb_connection_pool_lease_time_hist
  threshold: 'Leasing connections from the pool should be fast, unless a new connection

    has to be formed, which can easily take (in particular with TLS) several

    milliseconds. If times are a lot higher, then some underlying network

    problem might be there.

    '
  type: histogram
  unit: ms
- category: Connectivity
  complexity: medium
  description: 'Total number of failed connection leases. There are two pools, one
    for

    the agency communication with label `AgencyComm` and one for the other

    cluster internal communication with label `ClusterComm`.

    '
  exposedBy:
  - coordinator
  - dbserver
  help: 'Total number of failed connection leases

    '
  introducedIn: '3.8'
  name: arangodb_connection_pool_leases_failed_total
  threshold: 'A failed lease can happen if a connection has been terminated

    by some idle timeout or if it is already in use by some other request.

    Since this can happen under concurrent load, failed leases are not

    actually very worrying.

    '
  type: counter
  unit: number
- category: Connectivity
  complexity: medium
  description: 'Total number of successful connection leases from connection pool.

    There are two pools, one for the agency communication with label

    `AgencyComm` and one for the other cluster internal communication with

    label `ClusterComm`.

    '
  exposedBy:
  - coordinator
  - dbserver
  help: 'Total number of successful connection leases from connection pool

    '
  introducedIn: '3.8'
  name: arangodb_connection_leases_successful_total
  threshold: 'It is normal that this number is growing rapidly when there is any

    kind of activity in the cluster.

    '
  type: counter
  unit: number
- category: Transactions
  complexity: simple
  description: 'Total time spent in document insert operations, including both

    user-initiated insert operations and insert operations executed by

    the synchronous replication on followers. This metric

    is only present if the option `--server.export-read-write-metrics` is set

    to `true`.

    '
  exposedBy:
  - agent
  - dbserver
  - single
  help: 'Total time spent in document insert operations.

    '
  introducedIn: '3.8'
  name: arangodb_document_insert_time
  type: histogram
  unit: s
- category: Transactions
  complexity: simple
  description: 'Total time spent in document read-by-primary-key operations. This
    metric

    is only present if the option `--server.export-read-write-metrics` is set

    to `true`.

    '
  exposedBy:
  - dbserver
  - single
  - agent
  help: 'Total time spent in document read-by-primary-key operations.

    '
  introducedIn: '3.8'
  name: arangodb_document_read_time
  type: histogram
  unit: s
- category: Transactions
  complexity: simple
  description: 'Total time spent in document replace operations, including both

    user-initiated replace operations and replace operations executed by

    the synchronous replication on followers. This metric

    is only present if the option `--server.export-read-write-metrics` is set

    to `true`.

    '
  exposedBy:
  - agent
  - dbserver
  - single
  help: 'Total time spent in document remove operations.

    '
  introducedIn: '3.8'
  name: arangodb_document_remove_time
  type: histogram
  unit: s
- category: Transactions
  complexity: simple
  description: 'Total time spent in document replace operations, including both

    user-initiated replace operations and replace operations executed by

    the synchronous replication on followers. This metric

    is only present if the option `--server.export-read-write-metrics` is set

    to `true`.

    '
  exposedBy:
  - agent
  - dbserver
  - single
  help: 'Total time spent in document replace operations.

    '
  introducedIn: '3.8'
  name: arangodb_document_replace_time
  type: histogram
  unit: s
- category: Transactions
  complexity: simple
  description: 'Total time spent in document update operations, including both

    user-initiated update operations and update operations executed by

    the synchronous replication on followers. This metric

    is only present if the option `--server.export-read-write-metrics` is set

    to `true`.

    '
  exposedBy:
  - agent
  - dbserver
  - single
  help: 'Total time spent in document update operations.

    '
  introducedIn: '3.8'
  name: arangodb_document_update_time
  type: histogram
  unit: s
- category: Replication
  complexity: medium
  description: "Total number of document write operations by synchronous replication.\nThis
    metric is only present if the option\n`--server.export-read-write-metrics` is
    set to `true`.\nTotal number of document write operations (insert, update, replace,
    remove)\nexecuted by the synchronous replication on followers.\nThis metric is
    only present if the option `--server.export-read-write-metrics` \nis set to `true`.\n"
  exposedBy:
  - dbserver
  help: 'Total number of document write operations by synchronous replication.

    '
  introducedIn: '3.8'
  name: arangodb_document_writes_replication_total
  type: counter
  unit: number
- category: Transactions
  complexity: medium
  description: "Total number of document write operations (insert, update, replace,
    remove) on\nleaders, excluding writes by the synchronous replication on followers.\nThis
    metric is only present if the option `--server.export-read-write-metrics` \nis
    set to `true`.\n"
  exposedBy:
  - agent
  - dbserver
  - single
  help: 'Total number of document write operations (excl. synchronous replication).

    '
  introducedIn: '3.8'
  name: arangodb_document_writes_total
  type: counter
  unit: number
- category: Health
  complexity: simple
  description: "Total number of drop-follower events. This metric is increased on
    leaders\nwhenever a write operation cannot be replicated to a follower during\nsynchronous
    replication, and it would be unsafe in terms of data consistency \nto keep that
    follower.\nThis metric was named `arangodb_dropped_followers_count` in previous\nversions
    of ArangoDB.\n"
  exposedBy:
  - dbserver
  help: 'Number of drop-follower events.

    '
  introducedIn: '3.6'
  name: arangodb_dropped_followers_total
  threshold: 'Usually, drop-follower events should only happen if servers are

    restarted or if there are real problems on followers.

    '
  type: counter
  unit: number
- category: Health
  complexity: simple
  description: 'Total number of failed heartbeat transmissions.

    Servers in a cluster periodically send their heartbeats to

    the agency to report their own liveliness. This counter gets

    increased whenever sending such a heartbeat fails. In the single

    server, this counter is only used in active failover mode.

    '
  exposedBy:
  - coordinator
  - dbserver
  - single
  help: 'Total number of failed heartbeat transmissions.

    '
  introducedIn: '3.8'
  name: arangodb_heartbeat_failures_total
  threshold: 'It is a bad sign for health if heartbeat transmissions fail. This can

    lead to failover actions which are ultimately bad for the service.

    '
  troubleshoot: 'This can be a sign of overload or of bad network connectivity. Potentially

    move the agent instances to separate machines.

    '
  type: counter
  unit: number
- category: Health
  complexity: medium
  description: 'Histogram of times required to send heartbeats. For every heartbeat

    sent the time is measured and an event is put into the histogram.

    In the single server, this counter is only used in active failover mode.

    '
  exposedBy:
  - coordinator
  - dbserver
  - single
  help: 'Time required to send a heartbeat.

    '
  introducedIn: '3.8'
  name: arangodb_heartbeat_send_time_msec
  threshold: "It is a bad sign for health if heartbeat transmissions are not fast.
    \nIf there are heartbeats which frequently take longer than a few hundred\nmilliseconds,
    or even seconds, this can eventually lead to failover actions \nwhich are ultimately
    bad for the service.\n"
  troubleshoot: "High heartbeat send times can be a sign of overload or of bad network
    \nconnectivity. Potentially move the agent instances to separate machines.\n"
  type: histogram
  unit: ms
- category: Statistics
  complexity: simple
  description: 'This counter reflects the total number of **asynchronous** HTTP (or
    VST)

    requests which have hit this particular instance of `arangod`. Asynchronous

    refers to the fact that the response is not sent with the HTTP response,

    but is rather queried separately using the `/_api/jobs` API.

    See [this Section](async-results-management.html) for details.


    Note that this counter is ever growing during the lifetime of the

    `arangod` process. However, when the process is restarted, it starts

    from scratch. In the Grafana dashboards, it is usually visualized as a

    rate per second, averaged with a sliding window of a minute.

    '
  exposedBy:
  - coordinator
  - dbserver
  - agent
  - single
  help: 'Number of asynchronously executed HTTP requests

    '
  introducedIn: '3.6'
  name: arangodb_http_request_statistics_async_requests_total
  threshold: 'This metrics reflects the performance of an instance in a certain way.

    Note that your mileage may vary according to available resources as well

    as to complexity of the requests the client sends.

    '
  type: counter
  unit: number
- category: Statistics
  complexity: simple
  description: "This counter reflects the total number of HTTP (or VST) **DELETE**
    \nrequests which have hit this particular instance of `arangod`.\n\nNote that
    this counter is ever growing during the lifetime of the\n`arangod` process. However,
    when the process is restarted, it starts\nfrom scratch. In the Grafana dashboards,
    it is usually visualized as a\nrate per second, averaged with a sliding window
    of a minute.\n"
  exposedBy:
  - coordinator
  - dbserver
  - agent
  - single
  help: 'Number of HTTP DELETE requests

    '
  introducedIn: '3.6'
  name: arangodb_http_request_statistics_http_delete_requests_total
  threshold: 'This metrics reflects the performance of an instance in a certain way.

    Note that your mileage may vary according to available resources as well

    as to complexity of the requests the client sends.

    '
  type: counter
  unit: number
- category: Statistics
  complexity: simple
  description: "This counter reflects the total number of HTTP (or VST) **GET** \nrequests
    which have hit this particular instance of `arangod`.\n\nNote that this counter
    is ever growing during the lifetime of the\n`arangod` process. However, when the
    process is restarted, it starts\nfrom scratch. In the Grafana dashboards, it is
    usually visualized as a\nrate per second, averaged with a sliding window of a
    minute.\n"
  exposedBy:
  - coordinator
  - dbserver
  - agent
  - single
  help: 'Number of HTTP GET requests

    '
  introducedIn: '3.6'
  name: arangodb_http_request_statistics_http_get_requests_total
  threshold: 'This metrics reflects the performance of an instance in a certain way.

    Note that your mileage may vary according to available resources as well

    as to complexity of the requests the client sends.

    '
  type: counter
  unit: number
- category: Statistics
  complexity: simple
  description: "This counter reflects the total number of HTTP (or VST) **HEAD** \nrequests
    which have hit this particular instance of `arangod`.\n\nNote that this counter
    is ever growing during the lifetime of the\n`arangod` process. However, when the
    process is restarted, it starts\nfrom scratch. In the Grafana dashboards, it is
    usually visualized as a\nrate per second, averaged with a sliding window of a
    minute.\n"
  exposedBy:
  - coordinator
  - dbserver
  - agent
  - single
  help: 'Number of HTTP HEAD requests

    '
  introducedIn: '3.6'
  name: arangodb_http_request_statistics_http_head_requests_total
  threshold: 'This metrics reflects the performance of an instance in a certain way.

    Note that your mileage may vary according to available resources as well

    as to complexity of the requests the client sends.

    '
  type: counter
  unit: number
- category: Statistics
  complexity: simple
  description: "This counter reflects the total number of HTTP (or VST) **OPTIONS**
    \nrequests which have hit this particular instance of `arangod`.\n\nNote that
    this counter is ever growing during the lifetime of the\n`arangod` process. However,
    when the process is restarted, it starts\nfrom scratch. In the Grafana dashboards,
    it is usually visualized as a\nrate per second, averaged with a sliding window
    of a minute.\n"
  exposedBy:
  - coordinator
  - dbserver
  - agent
  - single
  help: 'Number of HTTP OPTIONS requests

    '
  introducedIn: '3.6'
  name: arangodb_http_request_statistics_http_options_requests_total
  threshold: 'This metrics reflects the performance of an instance in a certain way.

    Note that your mileage may vary according to available resources as well

    as to complexity of the requests the client sends.

    '
  type: counter
  unit: number
- category: Statistics
  complexity: simple
  description: "This counter reflects the total number of HTTP (or VST) **PATCH**
    \nrequests which have hit this particular instance of `arangod`.\n\nNote that
    this counter is ever growing during the lifetime of the\n`arangod` process. However,
    when the process is restarted, it starts\nfrom scratch. In the Grafana dashboards,
    it is usually visualized as a\nrate per second, averaged with a sliding window
    of a minute.\n"
  exposedBy:
  - coordinator
  - dbserver
  - agent
  - single
  help: 'Number of HTTP PATCH requests

    '
  introducedIn: '3.6'
  name: arangodb_http_request_statistics_http_patch_requests_total
  threshold: 'This metrics reflects the performance of an instance in a certain way.

    Note that your mileage may vary according to available resources as well

    as to complexity of the requests the client sends.

    '
  type: counter
  unit: number
- category: Statistics
  complexity: simple
  description: "This counter reflects the total number of HTTP (or VST) **POST** \nrequests
    which have hit this particular instance of `arangod`.\n\nNote that this counter
    is ever growing during the lifetime of the\n`arangod` process. However, when the
    process is restarted, it starts\nfrom scratch. In the Grafana dashboards, it is
    usually visualized as a\nrate per second, averaged with a sliding window of a
    minute.\n"
  exposedBy:
  - coordinator
  - dbserver
  - agent
  - single
  help: 'Number of HTTP POST requests

    '
  introducedIn: '3.6'
  name: arangodb_http_request_statistics_http_post_requests_total
  threshold: 'This metrics reflects the performance of an instance in a certain way.

    Note that your mileage may vary according to available resources as well

    as to complexity of the requests the client sends.

    '
  type: counter
  unit: number
- category: Statistics
  complexity: simple
  description: "This counter reflects the total number of HTTP (or VST) **PUT** \nrequests
    which have hit this particular instance of `arangod`.\n\nNote that this counter
    is ever growing during the lifetime of the\n`arangod` process. However, when the
    process is restarted, it starts\nfrom scratch. In the Grafana dashboards, it is
    usually visualized as a\nrate per second, averaged with a sliding window of a
    minute.\n"
  exposedBy:
  - coordinator
  - dbserver
  - agent
  - single
  help: 'Number of HTTP PUT requests

    '
  introducedIn: '3.6'
  name: arangodb_http_request_statistics_http_put_requests_total
  threshold: 'This metrics reflects the performance of an instance in a certain way.

    Note that your mileage may vary according to available resources as well

    as to complexity of the requests the client sends.

    '
  type: counter
  unit: number
- category: Statistics
  complexity: simple
  description: 'This counter reflects the total number of HTTP (or VST) **other**

    or **ILLEGAL** requests which have hit this particular instance of

    `arangod`. These are all requests, which are not one of the following:

    `DELETE`, `GET`, `HEAD`, `POST`, `PUT`, `OPTIONS`, `PATCH`.


    Note that this counter is ever growing during the lifetime of the

    `arangod` process. However, when the process is restarted, it starts

    from scratch. In the Grafana dashboards, it is usually visualized as a

    rate per second, averaged with a sliding window of a minute.

    '
  exposedBy:
  - coordinator
  - dbserver
  - agent
  - single
  help: 'Number of other HTTP requests

    '
  introducedIn: '3.6'
  name: arangodb_http_request_statistics_other_http_requests_total
  threshold: 'This metrics reflects the performance of an instance in a certain way.

    Note that your mileage may vary according to available resources as well

    as to complexity of the requests the client sends.

    '
  type: counter
  unit: number
- category: Statistics
  complexity: simple
  description: 'This counter reflects the total number of HTTP (or VST)

    requests that have been authenticated with the JWT superuser token,

    which have hit this particular instance of

    `arangod`.


    Note that this counter is ever growing during the lifetime of the

    `arangod` process. However, when the process is restarted, it starts

    from scratch. In the Grafana dashboards, it is usually visualized as a

    rate per second, averaged with a sliding window of a minute.

    '
  exposedBy:
  - coordinator
  - dbserver
  - agent
  - single
  help: 'Total number of HTTP requests executed by superuser/JWT

    '
  introducedIn: '3.6'
  name: arangodb_http_request_statistics_superuser_requests_total
  threshold: 'This metrics reflects the performance of an instance in a certain way.

    Note that your mileage may vary according to available resources as well

    as to complexity of the requests the client sends.

    '
  type: counter
  unit: number
- category: Statistics
  complexity: simple
  description: 'This counter reflects the total number of HTTP (or VST) requests which

    have hit this particular instance of `arangod`. Note that this counter

    is ever growing during the lifetime of the `arangod` process. However,

    when the process is restarted, it starts from scratch. In the Grafana

    dashboards, it is usually visualized as a rate per second, averaged

    with a sliding window of a minute.

    '
  exposedBy:
  - coordinator
  - dbserver
  - agent
  - single
  help: 'Total number of HTTP requests

    '
  introducedIn: '3.6'
  name: arangodb_http_request_statistics_total_requests_total
  threshold: 'This metrics reflects the performance of an instance in a certain way.

    Note that your mileage may vary according to available resources as well

    as to complexity of the requests the client sends.

    '
  type: counter
  unit: number
- category: Statistics
  complexity: simple
  description: 'This counter reflects the total number of HTTP (or VST) requests

    that have been authenticated for some user (as opposed to with the

    JWT superuser token), which have hit this particular instance of

    `arangod`.


    Note that this counter is ever growing during the lifetime of the

    `arangod` process. However, when the process is restarted, it starts

    from scratch. In the Grafana dashboards, it is usually visualized as a

    rate per second, averaged with a sliding window of a minute.

    '
  exposedBy:
  - coordinator
  - dbserver
  - agent
  - single
  help: 'Total number of HTTP requests executed by user clients

    '
  introducedIn: '3.6'
  name: arangodb_http_request_statistics_user_requests_total
  threshold: 'This metrics reflects the performance of an instance in a certain way.

    Note that your mileage may vary according to available resources as well

    as to complexity of the requests the client sends.

    '
  type: counter
  unit: number
- category: Statistics
  complexity: medium
  description: "Number of intermediate commits performed in transactions.\nAn intermediate
    commit happens if a logical transaction needs to be\nsplit into multiple physical
    transaction because of the volume of data\nhandled in the transaction. The thresholds
    for when to perform an\nintermediate commit can be controlled by startup options
    \n`--rocksdb.intermediate-commit-count` (number of write operations after\nwhich
    an intermediate commit is triggered) and `--rocksdb.intermediate-commit-size`\n(cumulated
    size of write operations after which an intermediate commit is triggered).\nThe
    values can also be overridden for individual transactions.\nThis metric was named
    `arangodb_intermediate_commits` in previous\nversions of ArangoDb.\n"
  exposedBy:
  - dbserver
  - single
  help: 'Number of intermediate commits performed in transactions.

    '
  introducedIn: '3.6'
  name: arangodb_intermediate_commits_total
  troubeshoot: "If this value is non-zero, it doesn't necessarily indicate a problem.
    It can\nhappen for large transactions and large data-loading jobs. However, as
    modifications\nperformed by intermediate commits are persisted and cannot simply
    be rolled back in \nmemory, it should be monitored whether the intermediate commits
    only happen for\noperations where they are expected. If they also happen for operations
    that are\nsupposed to be atomic, then the intermediate commit size and count parameters
    need\nto be adjusted, or larger operations should be broken up into smaller ones
    in the\nclient application.\n"
  type: counter
  unit: number
- category: Maintenance
  complexity: medium
  description: "Histogram of `Current` loading runtimes, i.e. the runtimes\nof the
    `ClusterInfo::loadCurrent` internal method. Provides a\ndistribution of all loading
    times for the `Current`\nsection of the agency data. The `Current` section gets\nloaded
    on server startup, and then gets reloaded on servers \nonly for any databases
    in which there have been recent structural \nchanges (i.e. DDL changes).\n"
  exposedBy:
  - coordinator
  - dbserver
  help: '`Current` loading runtimes.

    '
  introducedIn: '3.7'
  name: arangodb_load_current_runtime
  troubleshoot: 'In case this histogram contains very high loading times, this

    may be due to using many collections or many shards inside a

    database for which there are often structural changes. It then

    may make sense to reduce the number of collections or number

    of shards. Note that this can have other effects, so it requires

    an informed decision.

    '
  type: histogram
  unit: ms
- category: Maintenance
  complexity: medium
  description: "Histogram of `Plan` loading runtimes, i.e. the runtimes\nof the `ClusterInfo::loadPlan`
    internal method. Provides a\ndistribution of all loading times for the `Plan`\nsection
    of the agency data. The `Plan` section normally gets\nloaded on server startup,
    and then gets reloaded on servers \nonly for any databases in which there have
    been recent structural \nchanges (i.e. DDL changes).\n"
  exposedBy:
  - coordinator
  - dbserver
  help: '`Plan` loading runtimes.

    '
  introducedIn: '3.7'
  name: arangodb_load_plan_runtime
  troubleshoot: 'In case this histogram contains very high loading times, this

    may be due to using many collections or many shards inside a

    database for which there are often structural changes. It then

    may make sense to reduce the number of collections or number

    of shards. Note that this can have other effects, so it requires

    an informed decision.

    '
  type: histogram
  unit: ms
- category: Maintenance
  complexity: simple
  description: 'Database servers execute reconciliation actions to let the cluster
    converge

    to the desired state. Actions are created, registered, queued and executed.

    Once they are done they will eventually be removed.


    This metric counts the number of actions that are done and have been removed.

    '
  exposedBy:
  - dbserver
  help: 'Counter of actions that are done and have been removed from the registry.

    '
  introducedIn: '3.7'
  name: arangodb_maintenance_action_done_total
  type: counter
  unit: number
- category: Maintenance
  complexity: advanced
  description: 'Database servers execute reconciliation actions to let the cluster
    converge

    to the desired state. Actions are created, registered, queued and executed.

    Once they are done they will eventually be removed.


    This metric counts the number of actions that have been created but found to

    be a duplicate of a already queued action.

    '
  exposedBy:
  - dbserver
  help: 'Counter of actions that have been discarded because of a duplicate.

    '
  introducedIn: '3.7'
  name: arangodb_maintenance_action_duplicate_total
  type: counter
  unit: number
- category: Maintenance
  complexity: simple
  description: 'Database servers execute reconciliation actions to let the cluster
    converge

    to the desired state. Actions are created, registered, queued and executed.

    Once they are done they will eventually be removed.


    Those action can fail for different reasons. This metric counts the failed

    actions and can thus provide hints to investigate a malfunction.

    '
  exposedBy:
  - dbserver
  help: 'Failure counter for the maintenance actions.

    '
  introducedIn: '3.7'
  name: arangodb_maintenance_action_failure_total
  type: counter
  unit: number
- category: Maintenance
  complexity: advanced
  description: 'Database servers execute reconciliation actions to let the cluster
    converge

    to the desired state. Actions are created, registered, queued and executed.

    Once they are done they will eventually be removed.


    This metric tracks the time actions spend waiting in the queue in a histogram.

    '
  exposedBy:
  - dbserver
  help: 'Time spent in the queue before execution for maintenance actions.

    '
  introducedIn: '3.7'
  name: arangodb_maintenance_action_queue_time_msec
  type: histogram
  unit: ms
- category: Maintenance
  complexity: simple
  description: 'Database servers execute reconciliation actions to let the cluster
    converge

    to the desired state. Actions are created, registered, queued and executed.

    Once they are done they will eventually be removed.


    This metric counts the number of actions that are queued or active.

    '
  exposedBy:
  - dbserver
  help: 'Counter of actions that have been registered in the action registry.

    '
  introducedIn: '3.7'
  name: arangodb_maintenance_action_registered_total
  type: counter
  unit: number
- category: Maintenance
  complexity: advanced
  description: 'Database servers execute reconciliation actions to let the cluster
    converge

    to the desired state. Actions are created, registered, queued and executed.

    Once they are done they will eventually be removed.


    This metric tracks the time actions spend executing in a histogram.

    '
  exposedBy:
  - dbserver
  help: 'Time spent executing a maintenance action.

    '
  introducedIn: '3.7'
  name: arangodb_maintenance_action_runtime_msec
  type: histogram
  unit: ms
- category: Maintenance
  complexity: simple
  description: 'Database servers execute reconciliation actions to let the cluster
    converge

    to the desired state. To identify the target state differences in the meta

    data store provided by the agency are investigated and local changes are

    reported. This process is called agency sync and is executed in regular

    intervals.


    This metric tracks the runtime of individual agency syncs in a histogram.

    During DDL operations the runtime can increase but should generally be below

    1s.

    '
  exposedBy:
  - dbserver
  help: 'Total time spent on agency sync.

    '
  introducedIn: '3.7'
  name: arangodb_maintenance_agency_sync_runtime_msec
  type: histogram
  unit: ms
- category: Maintenance
  complexity: advanced
  description: 'Database servers execute reconciliation actions to let the cluster
    converge

    to the desired state. To identify the target state differences in the meta

    data store provided by the agency are investigated and local changes are

    reported. This process is called agency sync and is executed in regular

    intervals.


    This metric tracks the runtime of phase1 of an agency sync. Phase1 calculates

    the difference between the local and the target state.

    '
  exposedBy:
  - dbserver
  help: 'Maintenance Phase 1 runtime histogram.

    '
  introducedIn: '3.7'
  name: arangodb_maintenance_phase1_runtime_msec
  type: histogram
  unit: ms
- category: Maintenance
  complexity: advanced
  description: 'Database servers execute reconciliation actions to let the cluster
    converge

    to the desired state. To identify the target state differences in the meta

    data store provided by the agency are investigated and local changes are

    reported. This process is called agency sync and is executed in regular

    intervals.


    This metric tracks the runtime of phase2 of an agency sync. Phase2 calculates

    what actions to execute given the difference of the local and target state.

    '
  exposedBy:
  - dbserver
  help: 'Maintenance Phase 2 runtime histogram.

    '
  introducedIn: '3.7'
  name: arangodb_maintenance_phase2_runtime_msec
  type: histogram
  unit: ms
- category: Network
  complexity: simple
  description: "Number of requests forwarded to another coordinator.\nRequest forwarding
    can happen in load-balanced setups,\nwhen one coordinator receives and forwards
    requests \nthat can only be handled by a different coordinator.\nThis includes
    requests for streaming transactions,\nAQL, query cursors, Pregel jobs and some
    others.\n"
  exposedBy:
  - coordinator
  help: 'Number of requests forwarded to another coordinator.

    '
  introducedIn: '3.6'
  name: arangodb_network_forwarded_requests_total
  type: counter
  unit: number
- category: Network
  complexity: advanced
  description: 'Internal request round-trip time as a percentage of timeout.

    This metric will have a value between 0 and 100.

    '
  exposedBy:
  - coordinator
  - dbserver
  - agent
  help: 'Internal request round-trip time as a percentage of timeout.

    '
  introducedIn: '3.8'
  name: arangodb_network_request_duration_as_percentage_of_timeout
  type: gauge
  unit: percentage
- category: Network
  complexity: medium
  description: 'Number of internal requests that have timed out.

    '
  exposedBy:
  - coordinator
  - dbserver
  - agent
  help: 'Number of internal requests that have timed out.

    '
  introducedIn: '3.8'
  name: arangodb_network_request_timeouts_total
  type: counter
  unit: number
- category: Network
  complexity: medium
  description: 'Number of outgoing internal requests in flight.

    '
  exposedBy:
  - coordinator
  - dbserver
  - agent
  help: 'Number of outgoing internal requests in flight.

    '
  introducedIn: '3.8'
  name: arangodb_network_requests_in_flight
  type: gauge
  unit: number
- category: Statistics
  complexity: simple
  description: 'On Windows, this figure contains the total number of page faults.

    On other system, this figure contains the number of major faults the

    process has made which have required loading a memory page from disk.

    '
  exposedBy:
  - coordinator
  - dbserver
  - agent
  - single
  help: 'Number of major page faults.

    '
  introducedIn: '3.6'
  name: arangodb_process_statistics_major_page_faults_total
  type: counter
  unit: number
- category: Statistics
  complexity: simple
  description: 'The number of minor faults the process has made which have not required

    loading a memory page from disk. This figure is not reported on Windows.

    '
  exposedBy:
  - coordinator
  - dbserver
  - agent
  - single
  help: 'Number of minor faults the process.

    '
  introducedIn: '3.6'
  name: arangodb_process_statistics_minor_page_faults_total
  type: gauge
  unit: number
- category: Statistics
  complexity: simple
  description: 'Number of threads in the arangod process.

    '
  exposedBy:
  - coordinator
  - dbserver
  - agent
  - single
  help: 'Number of threads in the arangod process

    '
  introducedIn: '3.6'
  name: arangodb_process_statistics_number_of_threads
  type: gauge
  unit: number
- category: Statistics
  complexity: simple
  description: 'The total size of the number of pages the process has in real memory.

    This is just the pages which count toward text, data, or stack space.

    This does not include pages which have not been demand-loaded in, or

    which are swapped out. The resident set size is reported in bytes.

    '
  exposedBy:
  - coordinator
  - dbserver
  - agent
  - single
  help: 'Resident set size

    '
  introducedIn: '3.6'
  name: arangodb_process_statistics_resident_set_size
  type: gauge
  unit: bytes
- category: Statistics
  complexity: simple
  description: 'The relative size of the number of pages the process has in real

    memory compared to system memory. This is just the pages which count

    toward text, data, or stack space. This does not include pages which

    have not been demand-loaded in, or which are swapped out. The value is a

    ratio between 0.00 and 1.00.

    '
  exposedBy:
  - coordinator
  - dbserver
  - agent
  - single
  help: 'Resident set size as fraction of system memory

    '
  introducedIn: '3.6'
  name: arangodb_process_statistics_resident_set_size_percent
  type: gauge
  unit: number
- category: Statistics
  complexity: simple
  description: 'Amount of time that this process has been scheduled in kernel mode,

    measured in seconds.

    '
  exposedBy:
  - coordinator
  - dbserver
  - agent
  - single
  help: 'Process system time.

    '
  introducedIn: '3.6'
  name: arangodb_process_statistics_system_time
  type: gauge
  unit: s
- category: Statistics
  complexity: simple
  description: 'Amount of time that this process has been scheduled in user mode,

    measured in seconds.

    '
  exposedBy:
  - coordinator
  - dbserver
  - agent
  - single
  help: 'Process user time

    '
  introducedIn: '3.6'
  name: arangodb_process_statistics_user_time
  type: gauge
  unit: s
- category: Statistics
  complexity: simple
  description: 'On Windows, this figure contains the total amount of memory that the

    memory manager has committed for the arangod process. On other systems,

    this figure contains The size of the virtual memory the process is

    using.

    '
  exposedBy:
  - coordinator
  - dbserver
  - agent
  - single
  help: 'Virtual memory size

    '
  introducedIn: '3.6'
  name: arangodb_process_statistics_virtual_memory_size
  type: gauge
  unit: bytes
- category: Replication
  complexity: advanced
  description: "Number of refusal answers from a follower during synchronous replication.\nA
    refusal answer will only be sent by a follower if the follower is under\nthe impression
    that the replication request was not sent by the current\nshard leader. This can
    happen if replication requests to the follower are \ndelayed or the follower is
    slow to process incoming requests and there was \na leader change for the shard.\nIf
    such a refusal answer is received by the shard leader, it will drop the\nfollower
    from the list of followers.\nThis metrics was named `arangodb_refused_followers_count`
    in previous\nversions of ArangoDB.\n"
  exposedBy:
  - dbserver
  help: 'Number of refusal answers from a follower during synchronous replication.

    '
  introducedIn: '3.6'
  name: arangodb_refused_followers_total
  threshold: "Usually, refusal answers only occur if request processing on followers
    is \ndelayed and there was a recent leadership change. This should not be a\ncommon
    case and normally indicates a problem with the setup or with the load.\n"
  type: counter
  unit: number
- category: Replication
  complexity: medium
  description: 'Number of cluster replication inventory requests received.

    '
  exposedBy:
  - coordinator
  help: 'Number of cluster replication inventory requests received.

    '
  introducedIn: '3.6'
  name: arangodb_replication_cluster_inventory_requests_total
  type: counter
  unit: number
- category: Replication
  complexity: medium
  description: 'Accumulated time needed to apply replication dump data.

    '
  exposedBy:
  - dbserver
  help: 'Accumulated time needed to apply replication dump data.

    '
  introducedIn: '3.8'
  name: arangodb_replication_dump_apply_time_total
  type: counter
  unit: ms
- category: Replication
  complexity: medium
  description: 'Number of bytes received in replication dump requests.

    '
  exposedBy:
  - dbserver
  help: 'Number of bytes received in replication dump requests.

    '
  introducedIn: '3.8'
  name: arangodb_replication_dump_bytes_received_total
  type: counter
  unit: bytes
- category: Replication
  complexity: simple
  description: 'Number of documents received in replication dump requests.

    '
  exposedBy:
  - dbserver
  help: 'Number of documents received in replication dump requests.

    '
  introducedIn: '3.8'
  name: arangodb_replication_dump_documents_total
  type: counter
  unit: number
- category: Replication
  complexity: medium
  description: 'Accumulated wait time for replication requests.

    '
  exposedBy:
  - dbserver
  help: 'Accumulated wait time for replication requests.

    '
  introducedIn: '3.8'
  name: arangodb_replication_dump_request_time_total
  type: counter
  unit: ms
- category: Replication
  complexity: medium
  description: 'Number of replication dump requests.

    '
  exposedBy:
  - dbserver
  help: 'Number of replication dump requests.

    '
  introducedIn: '3.8'
  name: arangodb_replication_dump_requests_total
  type: counter
  unit: number
- category: Replication
  complexity: medium
  description: 'Number of failed connection attempts and response errors during replication.

    '
  exposedBy:
  - dbserver
  help: 'Number of failed connection attempts and response errors during replication.

    '
  introducedIn: '3.8'
  name: arangodb_replication_failed_connects_total
  type: counter
  unit: number
- category: Replication
  complexity: medium
  description: 'Accumulated wait time for replication key chunks determination requests.

    '
  exposedBy:
  - dbserver
  help: 'Accumulated wait time for replication key chunks determination requests.

    '
  introducedIn: '3.8'
  name: arangodb_replication_initial_chunks_requests_time_total
  type: counter
  unit: ms
- category: Replication
  complexity: medium
  description: 'Accumulated time needed to apply replication docs data.

    '
  exposedBy:
  - dbserver
  help: 'Accumulated time needed to apply replication docs data.

    '
  introducedIn: '3.8'
  name: arangodb_replication_initial_docs_requests_time_total
  type: counter
  unit: ms
- category: Replication
  complexity: medium
  description: 'Accumulated time needed to apply replication initial sync insertions.

    '
  exposedBy:
  - dbserver
  help: 'Accumulated time needed to apply replication initial sync insertions.

    '
  introducedIn: '3.8'
  name: arangodb_replication_initial_insert_apply_time_total
  type: counter
  unit: ms
- category: Replication
  complexity: medium
  description: 'Accumulated wait time for replication keys requests.

    '
  exposedBy:
  - dbserver
  help: 'Accumulated wait time for replication keys requests.

    '
  introducedIn: '3.8'
  name: arangodb_replication_initial_keys_requests_time_total
  type: counter
  unit: ms
- category: Replication
  complexity: medium
  description: 'Accumulated time needed for replication initial sync key lookups.

    '
  exposedBy:
  - dbserver
  help: 'Accumulated time needed for replication initial sync key lookups.

    '
  introducedIn: '3.8'
  name: arangodb_replication_initial_lookup_time_total
  type: counter
  unit: ms
- category: Replication
  complexity: medium
  description: 'Accumulated time needed to apply replication initial sync removals.

    '
  exposedBy:
  - dbserver
  help: 'Accumulated time needed to apply replication initial sync removals.

    '
  introducedIn: '3.8'
  name: arangodb_replication_initial_remove_apply_time_total
  type: counter
  unit: ms
- category: Replication
  complexity: medium
  description: 'Accumulated time needed to apply replication initial sync removals:

    '
  exposedBy:
  - dbserver
  help: 'Accumulated time needed to apply replication initial sync removals:

    '
  introducedIn: '3.8'
  name: arangodb_replication_initial_remove_apply_time_total
  type: counter
  unit: ms
- category: Replication
  complexity: medium
  description: 'Number of documents inserted by replication initial sync.

    '
  exposedBy:
  - dbserver
  help: 'Number of documents inserted by replication initial sync.

    '
  introducedIn: '3.8'
  name: arangodb_replication_initial_sync_docs_inserted_total
  type: counter
  unit: number
- category: Replication
  complexity: medium
  description: 'Number of documents removed by replication initial sync.

    '
  exposedBy:
  - dbserver
  help: 'Number of documents removed by replication initial sync.

    '
  introducedIn: '3.8'
  name: arangodb_replication_initial_sync_docs_removed_total
  type: counter
  unit: number
- category: Replication
  complexity: medium
  description: 'Number of documents requested by replication initial sync.

    '
  exposedBy:
  - dbserver
  help: 'Number of documents requested by replication initial sync.

    '
  introducedIn: '3.8'
  name: arangodb_replication_initial_sync_docs_requested_total
  type: counter
  unit: number
- category: Replication
  complexity: medium
  description: 'Number of replication initial sync docs requests.

    '
  exposedBy:
  - dbserver
  help: 'Number of replication initial sync docs requests.

    '
  introducedIn: '3.8'
  name: arangodb_replication_initial_sync_docs_requests_total
  type: counter
  unit: number
- category: Replication
  complexity: medium
  description: 'Number of replication initial sync keys requests.

    '
  exposedBy:
  - dbserver
  help: 'Number of replication initial sync keys requests.

    '
  introducedIn: '3.8'
  name: arangodb_replication_initial_sync_keys_requests_total
  type: counter
  unit: number
- category: Replication
  complexity: medium
  description: 'Total number of synchronous replication requests.

    '
  exposedBy:
  - dbserver
  help: 'Total number of synchronous replication requests.

    '
  introducedIn: '3.8'
  name: arangodb_replication_synchronous_requests_total_number._total
  type: counter
  unit: number
- category: Replication
  complexity: medium
  description: 'Total time needed for all synchronous replication requests.

    '
  exposedBy:
  - dbserver
  help: 'Total time needed for all synchronous replication requests.

    '
  introducedIn: '3.8'
  name: arangodb_replication_synchronous_requests_total_time_total
  type: counter
  unit: ms
- category: Replication
  complexity: medium
  description: 'Accumulated time needed to apply replication tailing data.

    '
  exposedBy:
  - dbserver
  help: 'Accumulated time needed to apply replication tailing data.

    '
  introducedIn: '3.8'
  name: arangodb_replication_tailing_apply_time_total
  type: counter
  unit: ms
- category: Replication
  complexity: medium
  description: 'Accumulated number of bytes received for replication tailing requests.

    '
  exposedBy:
  - dbserver
  help: 'Accumulated number of bytes received for replication tailing requests.

    '
  introducedIn: '3.8'
  name: arangodb_replication_tailing_bytes_received_total
  type: counter
  unit: bytes
- category: Replication
  complexity: medium
  description: 'Accumulated number of replication tailing document inserts/replaces
    processed.

    '
  exposedBy:
  - dbserver
  help: 'Accumulated number of replication tailing document inserts/replaces processed.

    '
  introducedIn: '3.8'
  name: arangodb_replication_tailing_documents_total
  type: counter
  unit: number
- category: Replication
  complexity: advanced
  description: 'Number of replication tailing failures due to missing tick on leader.

    '
  exposedBy:
  - dbserver
  help: 'Number of replication tailing failures due to missing tick on leader.

    '
  introducedIn: '3.8'
  name: arangodb_replication_tailing_follow_tick_failures_total
  type: counter
  unit: number
- category: Replication
  complexity: medium
  description: 'Number of replication tailing markers processed.

    '
  exposedBy:
  - dbserver
  help: 'Number of replication tailing markers processed.

    '
  introducedIn: '3.8'
  name: arangodb_replication_tailing_markers_total
  type: counter
  unit: number
- category: Replication
  complexity: medium
  description: 'Number of replication tailing document removals processed.

    '
  exposedBy:
  - dbserver
  help: 'Number of replication tailing document removals processed.

    '
  introducedIn: '3.8'
  name: arangodb_replication_tailing_removals_total
  type: counter
  unit: number
- category: Replication
  complexity: advanced
  description: 'Aggregated wait time for replication tailing requests.

    '
  exposedBy:
  - dbserver
  help: 'Aggregated wait time for replication tailing requests.

    '
  introducedIn: '3.8'
  name: arangodb_replication_tailing_request_time_total
  type: counter
  unit: ms
- category: Replication
  complexity: medium
  description: 'Number of replication tailing requests.

    '
  exposedBy:
  - dbserver
  help: 'Number of replication tailing requests.

    '
  introducedIn: '3.8'
  name: arangodb_replication_tailing_requests_total
  type: counter
  unit: number
- category: RocksDB
  complexity: simple
  description: 'Number of times RocksDB has entered a stalled (slowed) write state.

    '
  exposedBy:
  - dbserver
  - agent
  help: 'Number of times RocksDB has entered a stalled (slowed) write state.

    '
  introducedIn: '3.8'
  name: arangodb_rocksdb_write_stalls_total
  type: counter
  unit: number
- category: RocksDB
  complexity: simple
  description: 'Number of times RocksDB has entered a stopped write state.

    '
  exposedBy:
  - dbserver
  - agent
  help: 'Number of times RocksDB has entered a stopped write state.

    '
  introducedIn: '3.8'
  name: arangodb_rocksdb_write_stops_total
  type: counter
  unit: number
- category: Scheduler
  complexity: medium
  description: 'The number of jobs currently queued on the scheduler''s high priority
    queue.

    The capacity of the high priority queue can be configured via the startup

    option `--server.prio1-size`.

    '
  exposedBy:
  - coordinator
  - dbserver
  - agent
  - single
  help: 'Current queue length of the high priority queue in the scheduler.

    '
  introducedIn: '3.8'
  name: arangodb_scheduler_high_prio_queue_length
  type: gauge
  unit: number
- category: Scheduler
  complexity: advanced
  description: 'The total number of jobs dequeued from all scheduler queues.

    Calculating the difference between arangodb_scheduler_jobs_submitted_total

    and arangodb_scheduler_jobs_dequeued_total gives the total number of

    currently queued jobs.

    Calculating the difference between arangodb_scheduler_jobs_dequeued_total

    and arangodb_scheduler_jobs_done_total gives the number of jobs currently

    being processed.

    '
  exposedBy:
  - coordinator
  - dbserver
  - agent
  - single
  help: 'Total number of jobs dequeued.

    '
  introducedIn: '3.8'
  name: arangodb_scheduler_jobs_dequeued_total
  type: counter
  unit: number
- category: Scheduler
  complexity: advanced
  description: 'The total number of queue jobs done.

    Calculating the difference between arangodb_scheduler_jobs_dequeued_total

    and arangodb_scheduler_jobs_done_total gives the total number of jobs

    currently being processed.

    '
  exposedBy:
  - coordinator
  - dbserver
  - agent
  - single
  help: 'Total number of queue jobs done.

    '
  introducedIn: '3.8'
  name: arangodb_scheduler_jobs_done_total
  type: gauge
  unit: number
- category: Scheduler
  complexity: advanced
  description: 'Total number of jobs submitted to the scheduler.

    Calculating the difference between arangodb_scheduler_jobs_submitted_total

    and arangodb_scheduler_jobs_dequeued_total gives the total number of

    currently queued jobs.

    '
  exposedBy:
  - coordinator
  - dbserver
  - agent
  - single
  help: 'Total number of jobs submitted to the scheduler.

    '
  introducedIn: '3.8'
  name: arangodb_scheduler_jobs_submitted_total
  type: gauge
  unit: number
- category: Scheduler
  complexity: simple
  description: 'Last recorded dequeue time for a low priority queue item, i.e., the
    amount of

    time the job was sitting in the queue. If there is nothing to do for a long

    time, this metric will be reset to zero.

    A large value for this metric indicates that the server is under heavy load

    and low priority jobs cannot be dequeued in a timely manner

    '
  exposedBy:
  - coordinator
  - dbserver
  - agent
  - single
  help: 'Last recorded dequeue time for a low priority queue item.

    '
  introducedIn: '3.8'
  name: arangodb_scheduler_low_prio_queue_last_dequeue_time
  threshold: Normally this time should be clearly sub-second.
  troubleshoot: If you see larger values here, in particular over a longer period
    of time, you should consider reducing the load of the server (if possible), scaling
    up (bigger machine) or scaling out (more coordinators). Otherwise requests cannot
    be processed in a timely manner and you run the risk that the queue becomes full
    and requests are declined.
  type: gauge
  unit: ms
- category: Scheduler
  complexity: medium
  description: 'The number of jobs currently queued on the scheduler''s low priority
    queue.

    The capacity of the low priority queue can be configured via the startup

    option `--server.maximal-queue-size`.

    '
  exposedBy:
  - coordinator
  - dbserver
  - agent
  - single
  help: 'Current queue length of the low priority queue in the scheduler.

    '
  introducedIn: '3.8'
  name: arangodb_scheduler_low_prio_queue_length
  type: gauge
  unit: number
- category: Scheduler
  complexity: medium
  description: 'The number of jobs currently queued on the scheduler''s maintenance
    priority

    queue. These are the jobs with the highest priority and are mainly used for

    cluster internal operations. The capacity of the maintenance priority queue

    can be configured via the startup option `--server.scheduler-queue-size`.

    '
  exposedBy:
  - coordinator
  - dbserver
  - agent
  - single
  help: 'Current queue length of the maintenance priority queue in the scheduler.

    '
  introducedIn: '3.8'
  name: arangodb_scheduler_maintenance_prio_queue_length
  type: gauge
  unit: number
- category: Scheduler
  complexity: medium
  description: 'The number of jobs currently queued on the scheduler''s medium priority
    queue.

    The capacity of the medium priority queue can be configured via the startup

    option `--server.prio2-size`.

    '
  exposedBy:
  - coordinator
  - dbserver
  - agent
  - single
  help: 'Current queue length of the medium priority queue in the scheduler.

    '
  introducedIn: '3.8'
  name: arangodb_scheduler_medium_prio_queue_length
  type: gauge
  unit: number
- category: Scheduler
  complexity: simple
  description: 'The number of worker threads currently working on some job or spinning
    while

    waiting for new work (i.e., not sleeping).

    '
  exposedBy:
  - coordinator
  - dbserver
  - agent
  - single
  help: 'Number of awake worker threads.

    '
  introducedIn: '3.8'
  name: arangodb_scheduler_num_awake_threads
  type: gauge
  unit: number
- category: Scheduler
  complexity: simple
  description: 'The number of worker threads currently started. Worker threads can
    be started

    and stopped dynamically based on the server load.

    '
  exposedBy:
  - coordinator
  - dbserver
  - agent
  - single
  help: 'Current number of worker threads.

    '
  introducedIn: '3.6'
  name: arangodb_scheduler_num_worker_threads
  type: gauge
  unit: number
- category: Scheduler
  complexity: simple
  description: 'The current number of threads actually working on some job (i.e.,
    not

    spinning while waiting for new work).

    '
  exposedBy:
  - coordinator
  - dbserver
  - agent
  - single
  help: 'Current number of working threads.

    '
  introducedIn: '3.6'
  name: arangodb_scheduler_num_working_threads
  type: gauge
  unit: number
- category: Scheduler
  complexity: simple
  description: 'Total number of low priority jobs currently being processed.

    '
  exposedBy:
  - coordinator
  - dbserver
  - agent
  - single
  help: 'Total number of ongoing RestHandlers coming from the low prio queue.

    '
  introducedIn: '3.8'
  name: arangodb_scheduler_ongoing_low_prio
  type: gauge
  unit: number
- category: Scheduler
  complexity: simple
  description: 'Number of tasks dropped because the queue was already full. The queue
    capacities

    can be configured via the startup options `--server.scheduler-queue-size`,

    `--server.prio1-size`, `--server.prio2-size` and `--server.maximal-queue-size`.

    '
  exposedBy:
  - coordinator
  - dbserver
  - agent
  - single
  help: 'Number of tasks dropped and not added to internal queue.

    '
  introducedIn: '3.6'
  name: arangodb_scheduler_queue_full_failures_total
  type: counter
  unit: number
- category: Scheduler
  complexity: simple
  description: 'The total number of currently queued jobs in all queues.

    '
  exposedBy:
  - coordinator
  - dbserver
  - agent
  - single
  help: 'Server''s internal queue length.

    '
  introducedIn: '3.6'
  name: arangodb_scheduler_queue_length
  type: gauge
  unit: number
- category: Scheduler
  complexity: medium
  description: 'Total accumulated number of scheduler threads started. Worker threads
    can be

    started and stopped dynamically based on the server load.

    '
  exposedBy:
  - coordinator
  - dbserver
  - agent
  - single
  help: 'Total accumulated number of scheduler threads started.

    '
  introducedIn: '3.6'
  name: arangodb_scheduler_threads_started_total
  type: counter
  unit: number
- category: Scheduler
  complexity: medium
  description: 'Total accumulated number of scheduler threads stopped. Worker threads
    can be

    started and stopped dynamically based on the server load.

    '
  exposedBy:
  - coordinator
  - dbserver
  - agent
  - single
  help: 'Accumulated total number of scheduler threads stopped.

    '
  introducedIn: '3.6'
  name: arangodb_scheduler_threads_stopped_total
  type: counter
  unit: number
- category: Statistics
  complexity: simple
  description: 'Number of CPU cores visible to the arangod process, unless the

    environment variable `ARANGODB_OVERRIDE_DETECTED_NUMBER_OF_CORES`

    is set. In that case, the environment variable''s value will be reported.

    '
  exposedBy:
  - coordinator
  - dbserver
  - agent
  - single
  help: 'Number of CPU cores visible to the arangod process

    '
  introducedIn: '3.8'
  name: arangodb_server_statistics_cpu_cores
  type: gauge
  unit: number
- category: Statistics
  complexity: simple
  description: "Percentage of time that the system CPUs have been idle, as \na value
    between 0 and 100, and as reported by the operating system.\nThis metric is only
    reported on some operating systems.\n"
  exposedBy:
  - coordinator
  - dbserver
  - agent
  - single
  help: 'Percentage of time that the system CPUs have been idle

    '
  introducedIn: '3.8'
  name: arangodb_server_statistics_idle_percent
  type: gauge
  unit: percentage
- category: Statistics
  complexity: simple
  description: 'Percentage of time that the system CPUs have been waiting for I/O,
    as

    a value between 0 and 100, and as reported by the operating system.

    This metric is only reported on some operating systems.

    '
  exposedBy:
  - coordinator
  - dbserver
  - agent
  - single
  help: 'Percentage of time that the system CPUs have been waiting for I/O

    '
  introducedIn: '3.8'
  name: arangodb_server_statistics_iowait_percent
  type: gauge
  unit: percentage
- category: Statistics
  complexity: simple
  description: "Physical memory of the system in bytes, as reported by the operating
    system \nunless the environment variable `ARANGODB_OVERRIDE_DETECTED_TOTAL_MEMORY`
    \nis set. In that case, the environment variable's value will be reported.\n"
  exposedBy:
  - coordinator
  - dbserver
  - agent
  - single
  help: 'Physical memory in bytes

    '
  introducedIn: '3.6'
  name: arangodb_server_statistics_physical_memory
  type: gauge
  unit: bytes
- category: Statistics
  complexity: simple
  description: 'Number of seconds elapsed since server start, including fractional

    seconds.

    This metric was named `arangodb_server_statistics_server_uptime`

    in previous versions of ArangoDB.

    '
  exposedBy:
  - coordinator
  - dbserver
  - agent
  - single
  help: 'Number of seconds elapsed since server start

    '
  introducedIn: '3.6'
  name: arangodb_server_statistics_server_uptime_total
  type: counter
  unit: s
- category: Statistics
  complexity: simple
  description: 'Percentage of time that the system CPUs have spent in kernel mode,
    as

    a value between 0 and 100, and as reported by the operating system.

    This metric is only reported on some operating systems.

    '
  exposedBy:
  - coordinator
  - dbserver
  - agent
  - single
  help: 'Percentage of time that the system CPUs have spent in kernel mode

    '
  introducedIn: '3.8'
  name: arangodb_server_statistics_system_percent
  type: gauge
  unit: percentage
- category: Statistics
  complexity: simple
  description: 'Percentage of time that the system CPUs have spent in user mode, as

    a value between 0 and 100, and as reported by the operating system.

    This metric is only reported on some operating systems.

    '
  exposedBy:
  - coordinator
  - dbserver
  - agent
  - single
  help: 'Percentage of time that the system CPUs have spent in user mode

    '
  introducedIn: '3.8'
  name: arangodb_server_statistics_user_percent
  type: gauge
  unit: percentage
- category: Replication
  complexity: simple
  description: 'Number of leader shards on this machine. Every shard has a leader
    and

    potentially multiple followers.

    '
  exposedBy:
  - coordinator
  - dbserver
  - agent
  help: 'Number of leader shards on this machine.

    '
  introducedIn: '3.7'
  name: arangodb_shards_leader_number
  troubleshoot: 'Since the leaders perform all the read and write operations and

    the followers only replicate the writes, one should usually have a

    relatively even distribution of leader shards across dbservers. An

    exception can be one-shard deployments, in which every collection has

    a single shard and all shards in a database must have the same leader.

    If you have few databases in a one-shard deployment, then an uneven

    distribution of leader shards is natural.


    You can either move shards manually, use the "Rebalance shards" button

    in the UI, or use the cluster maintenance tools in [this repository]

    (https://github.com/arangodb/cluster-maintenance) (`create-move-plan`

    and `execute-move-plan` specifically). In the latter case, contact

    ArangoDB customer support.

    '
  type: gauge
  unit: number
- category: Replication
  complexity: simple
  description: 'Number of shards not replicated at all. This is counted for all shards

    for which this server is currently the leader. The number is increased

    by one for every shards for which no follower is in sync.

    '
  exposedBy:
  - coordinator
  - dbserver
  - agent
  help: 'Number of shards not replicated at all.

    '
  introducedIn: '3.7'
  name: arangodb_shards_not_replicated
  troubleshoot: 'Needless to say, such a situation is very bad for resilience, since
    it

    indicates a single point of failure. So, if this number is larger than 0,

    then some action is indicated. During an upgrade or when some dbserver

    was restarted, it can happen that shard followers are out of sync.

    Normally, shards should get in sync on their own, so observation

    and waiting is a good measure at first. However, if the situation

    persists, something is wrong, potentially some constant server crash

    (maybe out of memory crashes?) or another situation preventing

    shards to get in sync. Contact ArangoDB customer support in this case.

    '
  type: gauge
  unit: number
- category: Replication
  complexity: simple
  description: 'Number of shards on this machine. Every shard has a leader and

    potentially multiple followers. This metric counts both leader and

    follower shards.

    '
  exposedBy:
  - dbserver
  help: 'Number of shards on this machine.

    '
  introducedIn: '3.7'
  name: arangodb_shards_number
  troubleshoot: 'Since both leader and follower shards use memory and disk space,

    the total number of shards should be approximately balanced

    evenly across the dbservers. To achieve this, you can either

    move shards manually, use the "Rebalance shards" button in the

    UI, or use the cluster maintenance tools in [this repository]

    (https://github.com/arangodb/cluster-maintenance) (`create-move-plan`

    and `execute-move-plan` specifically). In the latter case, contact

    ArangoDB customer support.

    '
  type: gauge
  unit: number
- category: Replication
  complexity: simple
  description: 'Number of leader shards not fully replicated. This is counted for
    all

    shards for which this server is currently the leader. The number is

    increased by one for every shards for which not all followers are in sync.

    '
  exposedBy:
  - coordinator
  - dbserver
  - agent
  help: 'Number of leader shards not fully replicated.

    '
  introducedIn: '3.7'
  name: arangodb_shards_out_of_sync
  troubleshoot: 'Needless to say, such a situation is not good resilience, since we

    do not have as many copies of the data as the `replicationFactor`

    prescribes. If this metrics has a value larger than 0, then some

    action is indicated. During an upgrade or when some dbserver was

    restarted, it can happen that shard followers are out of sync.

    Normally, shards should get in sync on their own, so observation

    and waiting is a good measure at first. However, if the situation

    persists, something is wrong, potentially some constant server crash

    (maybe out of memory crashes?) or another situation preventing shards

    to get in sync. Contact ArangoDB customer support in this case.

    '
  type: gauge
  unit: number
- category: Replication
  complexity: medium
  description: 'Number of times a mismatching shard checksum was detected when

    syncing shards. This is a very special metric which is rarely used.

    When followers of shards get in sync with their leaders, just when

    everything is completed a final checksum is taken as an additional

    precaution. If this checksum differs between leader an follower, the

    resync process starts from scratch.

    '
  exposedBy:
  - coordinator
  - dbserver
  - agent
  help: 'Number of times a mismatching shard checksum was detected when syncing shards.

    '
  introducedIn: '3.6'
  name: arangodb_sync_wrong_checksum_total
  troubleshoot: 'Normally, this number will always be 0. If it is not, then usually

    something is wrong, please contact ArangoDB customer support in this

    case.

    '
  type: counter
  unit: number
- category: Transactions
  complexity: simple
  description: "Total number of transactions aborted. In the cluster, this metric
    will \nbe collected separately for transactions on coordinators and the\ntransaction
    counterparts on leaders and followers.\nThis metric was named `arangodb_transactions_aborted`
    in previous\nversions of ArangoDB.\n"
  exposedBy:
  - coordinator
  - dbserver
  - agent
  - single
  help: 'Number of transactions aborted.

    '
  introducedIn: '3.6'
  name: arangodb_transactions_aborted_total
  type: counter
  unit: number
- category: Transactions
  complexity: simple
  description: "Total number of transactions committed. In the cluster, this metric
    will \nbe collected separately for transactions on coordinators and the\ntransaction
    counterparts on leaders and followers.\nThis metric was named `arangodb_transactions_committed`
    in previous\nversions of ArangoDB.\n"
  exposedBy:
  - coordinator
  - dbserver
  - agent
  - single
  help: 'Number of transactions committed.

    '
  introducedIn: '3.6'
  name: arangodb_transactions_committed_total
  type: counter
  unit: number
- category: Transactions
  complexity: simple
  description: "Total number of expired transactions, i.e. transactions that have\nbeen
    begun but that were automatically garbage-collected due to \ninactivity within
    the transactions' time-to-live (TTL) period.\nIn the cluster, this metric will
    be collected separately for transactions \non coordinators and the transaction
    counterparts on leaders and followers.\nThis metric was named `arangodb_transactions_expired`
    in previous\nversions of ArangoDB.\n"
  exposedBy:
  - coordinator
  - dbserver
  - agent
  - single
  help: 'Total number of expired transactions.

    '
  introducedIn: '3.8'
  name: arangodb_transactions_expired_total
  type: counter
  unit: number
- category: Transactions
  complexity: simple
  description: "Total number of transactions started/begun. In the cluster, this metric
    will \nbe collected separately for transactions on coordinators and the\ntransaction
    counterparts on leaders and followers.\nThis metric was named `arangodb_transactions_started`
    in previous\nversions of ArangoDB.\n"
  exposedBy:
  - coordinator
  - dbserver
  - agent
  - single
  help: 'Number of transactions started.

    '
  introducedIn: '3.6'
  name: arangodb_transactions_started_total
  type: counter
  unit: number
- category: Statistics
  complexity: simple
  description: 'Number of V8 contexts currently alive. Normally, only coordinators
    and

    single servers should have V8 contexts, for dbservers and agents the

    value is always zero.

    '
  exposedBy:
  - coordinator
  - dbserver
  - agent
  - single
  help: 'Number of V8 contexts currently alive

    '
  introducedIn: '3.6'
  name: arangodb_v8_context_alive
  threshold: 'If this number is close to the maximum allowed number of V8 contexts,

    there might be a shortage. This can delay Foxx queries and AQL

    user defined functions. On the other hand, V8 contexts can use

    quite a lot of memory, so one should not have too many if RAM

    is scarce.

    '
  type: gauge
  unit: number
- category: Statistics
  complexity: simple
  description: 'Number of V8 contexts currently busy, that means, they are currently

    working on some JavaScript task. Normally, only coordinators and

    single servers should have V8 contexts, for dbservers and agents the

    value is always zero.

    '
  exposedBy:
  - coordinator
  - dbserver
  - agent
  - single
  help: 'Number of V8 contexts currently busy

    '
  introducedIn: '3.6'
  name: arangodb_v8_context_busy
  threshold: 'If this number is close to the maximum allowed number of V8 contexts,

    there might be a shortage. This can delay Foxx queries and AQL

    user defined functions. On the other hand, V8 contexts can use

    quite a lot of memory, so one should not have too many if RAM

    is scarce.

    '
  type: gauge
  unit: number
- category: V8
  complexity: simple
  description: 'This counter reflects the total number of V8 contexts ever created.
    It is

    OK if this number keeps growing since the V8 contexts are created and

    destroyed as needed. In rare cases a high fluctuation can indicate

    some unfortunate usage pattern.

    '
  exposedBy:
  - coordinator
  - dbserver
  - agent
  - single
  help: 'Total number of V8 contexts ever created

    '
  introducedIn: '3.6'
  name: arangodb_v8_context_created_total
  type: counter
  unit: number
- category: V8
  complexity: medium
  description: 'This counter reflects the accumulated total time for creating V8

    contexts, in milliseconds. It is OK if this number keeps growing since

    the V8 contexts are created and destroyed as needed. In rare cases a

    high fluctuation can indicate some unfortunate usage pattern.

    '
  exposedBy:
  - coordinator
  - dbserver
  - agent
  - single
  help: 'Accumulated total time for creating V8 contexts

    '
  introducedIn: '3.8'
  name: arangodb_v8_context_creation_time_msec_total
  type: counter
  unit: ms
- category: V8
  complexity: medium
  description: 'This counter reflects the total number of V8 contexts ever destroyed.

    It is OK if this number keeps growing since the V8 contexts are

    created and destroyed as needed. In rare cases a high fluctuation can

    indicate some unfortunate usage pattern.

    '
  exposedBy:
  - coordinator
  - dbserver
  - agent
  - single
  help: 'Total number of V8 contexts ever destroyed

    '
  introducedIn: '3.6'
  name: arangodb_v8_context_destroyed_total
  type: counter
  unit: number
- category: Statistics
  complexity: simple
  description: 'This gauge reflects the number of V8 contexts that are currently dirty.

    A V8 context is dirty, if it has executed JavaScript for some time and

    is due for a garbage collection.

    '
  exposedBy:
  - coordinator
  - dbserver
  - agent
  - single
  help: 'Number of V8 contexts currently dirty

    '
  introducedIn: '3.6'
  name: arangodb_v8_context_dirty
  type: gauge
  unit: number
- category: V8
  complexity: simple
  description: 'Total number of V8 context enter failures. A context receives a context

    enter event every time it begins to execute some JavaScript. If no

    context is available at such a time the system waits for 60s for a

    context to become free. If this does not happen within the 60s, the

    context enter event fails, a warning is logged and this counter is

    increased by one.

    '
  exposedBy:
  - coordinator
  - dbserver
  - agent
  - single
  help: 'Total number of V8 context enter failures

    '
  introducedIn: '3.6'
  name: arangodb_v8_context_enter_failures_total
  threshold: 'If you see V8 context enter failures, then you do not have enough

    V8 contexts or the server is overloaded by JavaScript tasks. If some

    JavaScript code blocks V8 contexts for too long, the free V8 contexts

    can run out and these failures begin to happen.

    '
  type: counter
  unit: number
- category: V8
  complexity: simple
  description: 'Total number of V8 context enter events. A context receives a context

    enter event every time it begins to execute some JavaScript. This number

    is a rough estimate as to how much JavaScript the server executes.

    '
  exposedBy:
  - coordinator
  - dbserver
  - agent
  - single
  help: 'Total number of V8 context enter events

    '
  introducedIn: '3.6'
  name: arangodb_v8_context_entered_total
  type: counter
  unit: number
- category: V8
  complexity: simple
  description: 'This counter reflects the total number of V8 context exit events.

    A context receives a context exit event every time it finishes to

    execute some JavaScript.

    '
  exposedBy:
  - coordinator
  - dbserver
  - agent
  - single
  help: 'Total number of V8 context exit events

    '
  introducedIn: '3.6'
  name: arangodb_v8_context_exited_total
  type: counter
  unit: number
- category: Statistics
  complexity: simple
  description: 'This gauge reflects the number of V8 contexts that are currently free.

    If this number drops to 0 there might be a shortage of V8 contexts.

    '
  exposedBy:
  - coordinator
  - dbserver
  - agent
  - single
  help: 'Number of V8 contexts currently free

    '
  introducedIn: '3.6'
  name: arangodb_v8_context_free
  type: gauge
  unit: number
- category: Statistics
  complexity: simple
  description: 'This is the maximum number of concurrent V8 contexts. This is limited

    by a server option, since V8 contexts can use a lot of RAM. V8 contexts

    are created and destroyed as needed up to the limit shown in this metric.

    '
  exposedBy:
  - coordinator
  - dbserver
  - agent
  - single
  help: 'Maximum number of concurrent V8 contexts

    '
  introducedIn: '3.6'
  name: arangodb_v8_context_max
  type: gauge
  unit: number
- category: Statistics
  complexity: simple
  description: 'This is the minimum number of concurrent V8 contexts. This is limited

    by a server option. V8 contexts are created and destroyed as needed

    but there are never fewer than the limit shown in this metric.

    '
  exposedBy:
  - coordinator
  - dbserver
  - agent
  - single
  help: 'Minimum number of concurrent V8 contexts

    '
  introducedIn: '3.6'
  name: arangodb_v8_context_min
  type: gauge
  unit: number
- category: RocksDB
  complexity: advanced
  description: 'This metric exhibits the RocksDB metric "rocksdb-actual-delayed-write-rate".

    It shows the current actual delayed write rate. The value 0 means no delay.

    '
  exposedBy:
  - dbserver
  - agent
  - single
  help: 'RocksDB metric "rocksdb-actual-delayed-write-rate"

    '
  introducedIn: '3.6'
  name: rocksdb_actual_delayed_write_rate
  type: gauge
  unit: number
- category: RocksDB
  complexity: advanced
  description: 'This metric exhibits the RocksDB metric "background-errors". It shows

    the accumulated number of background errors.

    '
  exposedBy:
  - dbserver
  - agent
  - single
  help: 'RocksDB metric "background-errors"

    '
  introducedIn: '3.6'
  name: rocksdb_background_errors
  type: gauge
  unit: number
- category: RocksDB
  complexity: advanced
  description: 'This metric exhibits the RocksDB metric "rocksdb-base-level".

    It shows the number of the level to which L0 data will be

    compacted.

    '
  exposedBy:
  - dbserver
  - agent
  - single
  help: 'RocksDB metric "rocksdb-base-level"

    '
  introducedIn: '3.6'
  name: rocksdb_base_level
  type: gauge
  unit: number
- category: RocksDB
  complexity: advanced
  description: 'This metric exhibits the RocksDB metric "rocksdb-block-cache-capacity".

    It shows the block cache capacity in bytes. This can be configured with

    the `--rocksdb.block-cache-size` option, for details, see

    [the manual](https://www.arangodb.com/docs/stable/programs-arangod-options.html#rocksdb).

    '
  exposedBy:
  - dbserver
  - agent
  - single
  help: 'RocksDB metric "rocksdb-block-cache-capacity"

    '
  introducedIn: '3.6'
  name: rocksdb_block_cache_capacity
  type: gauge
  unit: bytes
- category: RocksDB
  complexity: advanced
  description: "This metric exhibits the RocksDB metric \"rocksdb-block-cache-pinned-usage\".\nIt
    shows the memory size for the RocksDB block cache for the entries \nwhich are
    pinned, in bytes.\n"
  exposedBy:
  - dbserver
  - agent
  - single
  help: 'RocksDB metric "rocksdb-block-cache-pinned-usage"

    '
  introducedIn: '3.6'
  name: rocksdb_block_cache_pinned_usage
  type: gauge
  unit: bytes
- category: RocksDB
  complexity: advanced
  description: 'This metric exhibits the RocksDB metric "rocksdb-block-cache-usage".

    It shows the memory size for the entries residing in the block cache,

    in bytes.

    '
  exposedBy:
  - dbserver
  - agent
  - single
  help: 'RocksDB metric "rocksdb-block-cache-usage"

    '
  introducedIn: '3.6'
  name: rocksdb_block_cache_usage
  type: gauge
  unit: bytes
- category: RocksDB
  complexity: advanced
  description: "This metric reflects the current global allocation for the ArangoDB\ncache
    which sits in front of RocksDB. For example, the edge cache\ncounts towards this
    allocation. All these caches together have a \nglobal limit which can be controlled
    with the `--cache.size` option.\nSee [the manual for details](https://www.arangodb.com/docs/stable/programs-arangod-options.html#cache).\n"
  exposedBy:
  - dbserver
  - agent
  - single
  help: 'Global current allocation of ArangoDB cache

    '
  introducedIn: '3.6'
  name: rocksdb_cache_allocated
  type: gauge
  unit: bytes
- category: RocksDB
  complexity: advanced
  description: 'This metric reflects the lifetime hit rate of the ArangoDB in-memory

    cache which is sitting in front of RocksDB. For example, the edge

    cache is a part of this. The value will be a ratio between 0 and 1.

    "Lifetime" means here that accounting is done from the most recent

    start of the `arangod` instance.

    If the hit rate is too low, you might have to little RAM available

    for the in-memory caches.

    '
  exposedBy:
  - dbserver
  - agent
  - single
  help: 'Lifetime hit rate of the ArangoDB cache in front of RocksDB

    '
  introducedIn: '3.6'
  name: rocksdb_cache_hit_rate_lifetime
  type: gauge
  unit: ratio
- category: RocksDB
  complexity: advanced
  description: 'This metric reflects the recent hit rate of the ArangoDB in-memory

    cache which is sitting in front of RocksDB. For example, the edge

    cache is a part of this. The value will be a ratio between 0 and 1.

    If the hit rate is too low, you might have to little RAM available

    for the in-memory caches.

    '
  exposedBy:
  - dbserver
  - agent
  - single
  help: 'Recent hit rate of the ArangoDB cache in front of RocksDB

    '
  introducedIn: '3.6'
  name: rocksdb_cache_hit_rate_recent
  type: gauge
  unit: ratio
- category: RocksDB
  complexity: advanced
  description: 'This metric reflects the current global allocation limit for the

    ArangoDB caches which sit in front of RocksDB. For example, the

    edge cache counts towards this allocation. This global limit can

    be controlled with the `--cache.size` option. See

    [the manual for details](https://www.arangodb.com/docs/stable/programs-arangod-options.html#cache).

    '
  exposedBy:
  - dbserver
  - agent
  - single
  help: 'Global allocation limit for the ArangoDB cache in front of RocksDB

    '
  introducedIn: '3.6'
  name: rocksdb_cache_limit
  type: gauge
  unit: bytes
- category: RocksDB
  complexity: advanced
  description: 'This metric exhibits the RocksDB metric "compaction-pending".

    It shows the number of column families for which at least one compaction

    is pending.

    '
  exposedBy:
  - dbserver
  - agent
  - single
  help: 'RocksDB metric "compaction-pending" - sum over column families

    '
  introducedIn: '3.6'
  name: rocksdb_compaction_pending
  type: gauge
  unit: number
- category: RocksDB
  complexity: advanced
  description: 'This metric exhibits the compression ratio of data at level 0 in RocksDB''s

    log structured merge tree. Here, compression

    ratio is defined as uncompressed data size / compressed file size.

    Returns "-1.0" if there are no open files at level 0.

    '
  exposedBy:
  - dbserver
  - agent
  - single
  help: 'RocksDB metric "rocksdb-compression-ratio-at-level0"

    '
  introducedIn: '3.6'
  name: rocksdb_compression_ratio_at_level0
  type: gauge
  unit: ratio
- category: RocksDB
  complexity: advanced
  description: 'This metric exhibits the compression ratio of data at level 1 in RocksDB''s

    log structured merge tree. Here, compression

    ratio is defined as uncompressed data size / compressed file size.

    Returns "-1.0" if there are no open files at level 1.

    '
  exposedBy:
  - dbserver
  - agent
  - single
  help: 'RocksDB metric "rocksdb-compression-ratio-at-level1"

    '
  introducedIn: '3.6'
  name: rocksdb_compression_ratio_at_level1
  type: gauge
  unit: ratio
- category: RocksDB
  complexity: advanced
  description: 'This metric exhibits the compression ratio of data at level 2 in RocksDB''s

    log structured merge tree. Here, compression

    ratio is defined as uncompressed data size / compressed file size.

    Returns "-1.0" if there are no open files at level 2.

    '
  exposedBy:
  - dbserver
  - agent
  - single
  help: 'RocksDB metric "rocksdb-compression-ratio-at-level2"

    '
  introducedIn: '3.6'
  name: rocksdb_compression_ratio_at_level2
  type: gauge
  unit: ratio
- category: RocksDB
  complexity: advanced
  description: 'This metric exhibits the compression ratio of data at level 3 in RocksDB''s

    log structured merge tree. Here, compression

    ratio is defined as uncompressed data size / compressed file size.

    Returns "-1.0" if there are no open files at level 3.

    '
  exposedBy:
  - dbserver
  - agent
  - single
  help: 'RocksDB metric "rocksdb-compression-ratio-at-level3"

    '
  introducedIn: '3.6'
  name: rocksdb_compression_ratio_at_level3
  type: gauge
  unit: ratio
- category: RocksDB
  complexity: advanced
  description: 'This metric exhibits the compression ratio of data at level 4 in RocksDB''s

    log structured merge tree. Here, compression

    ratio is defined as uncompressed data size / compressed file size.

    Returns "-1.0" if there are no open files at level 4.

    '
  exposedBy:
  - dbserver
  - agent
  - single
  help: 'RocksDB metric "rocksdb-compression-ratio-at-level4"

    '
  introducedIn: '3.6'
  name: rocksdb_compression_ratio_at_level4
  type: gauge
  unit: ratio
- category: RocksDB
  complexity: advanced
  description: 'This metric exhibits the compression ratio of data at level 5 in RocksDB''s

    log structured merge tree. Here, compression

    ratio is defined as uncompressed data size / compressed file size.

    Returns "-1.0" if there are no open files at level 5.

    '
  exposedBy:
  - dbserver
  - agent
  - single
  help: 'RocksDB metric "rocksdb-compression-ratio-at-level5"

    '
  introducedIn: '3.6'
  name: rocksdb_compression_ratio_at_level5
  type: gauge
  unit: ratio
- category: RocksDB
  complexity: advanced
  description: 'This metric exhibits the compression ratio of data at level 6 in RocksDB''s

    log structured merge tree. Here, compression

    ratio is defined as uncompressed data size / compressed file size.

    Returns "-1.0" if there are no open files at level 6.

    '
  exposedBy:
  - dbserver
  - agent
  - single
  help: 'RocksDB metric "rocksdb-compression-ratio-at-level6"

    '
  introducedIn: '3.6'
  name: rocksdb_compression_ratio_at_level6
  type: gauge
  unit: ratio
- category: RocksDB
  complexity: advanced
  description: 'This metric exhibits the RocksDB metric "rocksdb-cur-size-active-mem-table".

    It shows the approximate size of the active memtable in bytes, summed

    over all column families.

    '
  exposedBy:
  - dbserver
  - agent
  - single
  help: 'RocksDB metric "rocksdb-cur-size-active-mem-table" - sum over column families

    '
  introducedIn: '3.6'
  name: rocksdb_cur_size_active_mem_table
  type: gauge
  unit: bytes
- category: RocksDB
  complexity: advanced
  description: 'This metric exhibits the RocksDB metric "rocksdb-cur-size-all-mem-tables".

    It shows the approximate size of active and unflushed immutable memtables

    in bytes, summed over all column families.

    '
  exposedBy:
  - dbserver
  - agent
  - single
  help: 'RocksDB metric "rocksdb-cur-size-all-mem-tables" - sum over column families

    '
  introducedIn: '3.6'
  name: rocksdb_cur_size_all_mem_tables
  type: gauge
  unit: bytes
- category: RocksDB
  complexity: advanced
  description: "This metric exposes the current write rate limit of the ArangoDB\nRocksDB
    throttle. The throttle limits the write rate to allow\nRocksDB's background threads
    to catch up with compactions and not\nfall behind too much, since this would in
    the end lead to nasty\nwrite stops in RocksDB and incur considerable delays. If
    0 is\nshown, no throttling happens, otherwise, you see the current\nwrite rate
    limit in bytes per second. See \n[the manual](https://www.arangodb.com/docs/stable/programs-arangod-options.html#rocksdb)
    for details.\n"
  exposedBy:
  - dbserver
  - agent
  - single
  help: 'Current rate of the RocksDB throttle in bytes per second

    '
  introducedIn: '3.6'
  name: rocksdb_engine_throttle_bps
  type: gauge
  unit: bytes per second
- category: RocksDB
  complexity: advanced
  description: 'This metric exhibits the RocksDB metric "rocksdb-estimate-live-data-size".

    It shows an estimate of the amount of live data in bytes, summed over

    all column families.

    '
  exposedBy:
  - dbserver
  - agent
  - single
  help: 'RocksDB metric "rocksdb-estimate-live-data-size" - sum over all column families

    '
  introducedIn: '3.6'
  name: rocksdb_estimate_live_data_size
  type: gauge
  unit: bytes
- category: RocksDB
  complexity: advanced
  description: 'This metric exhibits the RocksDB metric "rocksdb-estimate-num-keys".

    It shows the estimated number of total keys in the active and unflushed

    immutable memtables and storage, summed over all column families.

    '
  exposedBy:
  - dbserver
  - agent
  - single
  help: 'RocksDB metric "rocksdb-estimate-num-keys" - sum over column families

    '
  introducedIn: '3.6'
  name: rocksdb_estimate_num_keys
  type: gauge
  unit: number
- category: RocksDB
  complexity: advanced
  description: 'This metric exhibits the RocksDB metric

    "rocksdb-estimate-pending-compaction-bytes".

    It shows the estimated total number of bytes compaction needs to

    rewrite to get all levels down to under target size. Not valid for

    other compactions than level-based. This value is summed over all

    column families.

    '
  exposedBy:
  - dbserver
  - agent
  - single
  help: 'RocksDB metric "rocksdb-estimate-pending-compaction-bytes" - sum over all
    column families

    '
  introducedIn: '3.6'
  name: rocksdb_estimate_pending_compaction_bytes
  type: gauge
  unit: bytes
- category: RocksDB
  complexity: advanced
  description: 'This metric exhibits the RocksDB metric

    "rocksdb-estimate-table-readers-mem".

    It shows the estimated memory used for reading SST tables, excluding

    memory used in block cache (e.g. filter and index blocks), summed over

    all column families.

    '
  exposedBy:
  - dbserver
  - agent
  - single
  help: 'RocksDB metric "rocksdb-estimate-table-readers-mem" - sum over column families

    '
  introducedIn: '3.6'
  name: rocksdb_estimate_table_readers_mem
  type: gauge
  unit: bytes
- category: RocksDB
  complexity: advanced
  description: 'This metric shows the currently free disk space in bytes on the volume

    which is used by RocksDB. Since RocksDB does not like out of disk

    space scenarios, please make sure that there is enough free disk space

    available at all times!  Note that this metric is only available/populated on
    some platforms.

    '
  exposedBy:
  - dbserver
  - agent
  - single
  help: 'Free disk space in bytes on volume used by RocksDB

    '
  introducedIn: '3.8'
  name: rocksdb_free_disk_space
  type: gauge
  unit: bytes
- category: RocksDB
  complexity: advanced
  description: 'This metric shows the currently free number of inodes on the disk
    volume

    used by RocksDB. Since RocksDB does not like out of disk space

    scenarios, please make sure that there is enough free inodes available

    at all times! Note that this metric is only available/populated on some platforms.

    '
  exposedBy:
  - dbserver
  - agent
  - single
  help: 'Number of free inodes on the volume used by RocksDB

    '
  introducedIn: '3.8'
  name: rocksdb_free_inodes
  type: gauge
  unit: number
- category: RocksDB
  complexity: advanced
  description: 'This metric exhibits the RocksDB metric "rocksdb-is-file-deletions-enabled".

    It shows 0 if deletion of obsolete files is enabled, and otherwise,

    it shows a non-zero number. Note that for ArangoDB, this is supposed

    to always return 1, since the deletion of obsolete WAL files is done

    from ArangoDB, externally to RocksDB.

    '
  exposedBy:
  - dbserver
  - agent
  - single
  help: 'RocksDB metric "rocksdb-is-file-deletions-enabled"

    '
  introducedIn: '3.6'
  name: rocksdb_is_file_deletions_enabled
  type: gauge
  unit: number
- category: RocksDB
  complexity: advanced
  description: 'This metric exhibits the RocksDB metric "rocksdb-is-write-stopped".

    It shows 1 if writing to RocksDB has been stopped, and otherwise 0.

    If 1 is shown, this usually means that there are too many uncompacted

    files and the RocksDB background threads have not managed to keep up

    with their compaction work. This situation should be avoided, since

    nasty delays in database operations are incurred. If in doubt,

    contact ArangoDB support.

    '
  exposedBy:
  - dbserver
  - agent
  - single
  help: 'RocksDB metric "rocksdb-is-write-stopped"

    '
  introducedIn: '3.8'
  name: rocksdb_is_write_stopped
  type: gauge
  unit: number
- category: RocksDB
  complexity: advanced
  description: 'This metric exhibits the RocksDB metric "rocksdb-live-sst-files-size".

    It shows the total size in bytes of all SST files belonging to the latest

    LSM tree, summed over all column families.

    '
  exposedBy:
  - dbserver
  - agent
  - single
  help: 'RocksDB metric "rocksdb-live-sst-files-size" - sum over all column families

    '
  introducedIn: '3.6'
  name: rocksdb_live_sst_files_size
  type: gauge
  unit: bytes
- category: RocksDB
  complexity: advanced
  description: 'This metric exhibits the RocksDB metric "mem-table-flush-pending".
    It

    shows the number of column families for which a memtable flush is

    pending.

    '
  exposedBy:
  - dbserver
  - agent
  - single
  help: 'RocksDB metric "mem_table_flush_pending", sum over column families

    '
  introducedIn: '3.6'
  name: rocksdb_mem_table_flush_pending
  type: gauge
  unit: number
- category: RocksDB
  complexity: advanced
  description: 'This metric exhibits the RocksDB metric "rocksdb-min-log-number-to-keep".

    It shows the minimum log number of the log files that should be kept.

    '
  exposedBy:
  - dbserver
  - agent
  - single
  help: 'RocksDB metric "rocksdb-min-log-number-to-keep"

    '
  introducedIn: '3.6'
  name: rocksdb_min_log_number_to_keep
  type: gauge
  unit: number
- category: RocksDB
  complexity: advanced
  description: 'This metric exhibits the RocksDB metric

    "rocksdb-num-deletes-active-mem-table".

    It shows the total number of delete entries in the active memtable,

    summed over all column families.

    '
  exposedBy:
  - dbserver
  - agent
  - single
  help: 'RocksDB metric "rocksdb-num-deletes-active-mem-table" - sum over column families

    '
  introducedIn: '3.6'
  name: rocksdb_num_deletes_active_mem_table
  type: gauge
  unit: number
- category: RocksDB
  complexity: advanced
  description: 'This metric exhibits the RocksDB metric

    "rocksdb-num-deletes-imm-mem-tables".

    It shows the total number of delete entries in the unflushed immutable

    memtables, summed over all column families.

    '
  exposedBy:
  - dbserver
  - agent
  - single
  help: 'RocksDB metric "rocksdb-num-deletes-imm-mem-tables" - sum over column families

    '
  introducedIn: '3.6'
  name: rocksdb_num_deletes_imm_mem_tables
  type: gauge
  unit: number
- category: RocksDB
  complexity: advanced
  description: "This metric exhibits the RocksDB metric \n\"rocksdb-num-entries-active-mem-table\".\nIt
    shows the total number of entries in the active memtable,\nsummed over all column
    families.\n"
  exposedBy:
  - dbserver
  - agent
  - single
  help: 'RocksDB metric "rocksdb-num-entries-active-mem-table" - sum over column families

    '
  introducedIn: '3.6'
  name: rocksdb_num_entries_active_mem_table
  type: gauge
  unit: number
- category: RocksDB
  complexity: advanced
  description: 'This metric exhibits the RocksDB metric

    "rocksdb-num-entries-imm-mem-tables".

    It shows the total number of entries in the unflushed immutable memtables,

    summed over all column families.

    '
  exposedBy:
  - dbserver
  - agent
  - single
  help: 'RocksDB metric "rocksdb-num-entries-imm-mem-tables" - sum over column families

    '
  introducedIn: '3.6'
  name: rocksdb_num_entries_imm_mem_tables
  type: gauge
  unit: number
- category: RocksDB
  complexity: advanced
  description: 'This metric reports the number of files at level 0 in the log structured

    merge tree of RocksDB.

    '
  exposedBy:
  - dbserver
  - agent
  - single
  help: 'RocksDB metric "num-files-at-level0"

    '
  introducedIn: '3.6'
  name: rocksdb_num_files_at_level0
  type: gauge
  unit: number
- category: RocksDB
  complexity: advanced
  description: 'This metric reports the number of files at level 1 in the log structured

    merge tree of RocksDB.

    '
  exposedBy:
  - dbserver
  - agent
  - single
  help: 'RocksDB metric "num-files-at-level1"

    '
  introducedIn: '3.6'
  name: rocksdb_num_files_at_level1
  type: gauge
  unit: number
- category: RocksDB
  complexity: advanced
  description: 'This metric reports the number of files at level 2 in the log structured

    merge tree of RocksDB.

    '
  exposedBy:
  - dbserver
  - agent
  - single
  help: 'RocksDB metric "num-files-at-level2"

    '
  introducedIn: '3.6'
  name: rocksdb_num_files_at_level2
  type: gauge
  unit: number
- category: RocksDB
  complexity: advanced
  description: 'This metric reports the number of files at level 3 in the log structured

    merge tree of RocksDB.

    '
  exposedBy:
  - dbserver
  - agent
  - single
  help: 'RocksDB metric "num-files-at-level3"

    '
  introducedIn: '3.6'
  name: rocksdb_num_files_at_level3
  type: gauge
  unit: number
- category: RocksDB
  complexity: advanced
  description: 'This metric reports the number of files at level 4 in the log structured

    merge tree of RocksDB.

    '
  exposedBy:
  - dbserver
  - agent
  - single
  help: 'RocksDB metric "num-files-at-level4"

    '
  introducedIn: '3.6'
  name: rocksdb_num_files_at_level4
  type: gauge
  unit: number
- category: RocksDB
  complexity: advanced
  description: 'This metric reports the number of files at level 5 in the log structured

    merge tree of RocksDB.

    '
  exposedBy:
  - dbserver
  - agent
  - single
  help: 'RocksDB metric "num-files-at-level5"

    '
  introducedIn: '3.6'
  name: rocksdb_num_files_at_level5
  type: gauge
  unit: number
- category: RocksDB
  complexity: advanced
  description: 'This metric reports the number of files at level 6 in the log structured

    merge tree of RocksDB.

    '
  exposedBy:
  - dbserver
  - agent
  - single
  help: 'RocksDB metric "num-files-at-level6"

    '
  introducedIn: '3.6'
  name: rocksdb_num_files_at_level6
  type: gauge
  unit: number
- category: RocksDB
  complexity: advanced
  description: "This metric exhibits the RocksDB metric \"num-immutable-mem-table\",
    \nwhich shows the number of immutable memtables that have not yet been\nflushed.
    This value is the sum over all column families.\n\nMemtables are sorted tables
    of key/value pairs which begin\nto be built up in memory. At some stage they are
    closed and become\nimmutable, and some time later they are flushed to disk.\n"
  exposedBy:
  - dbserver
  - agent
  - single
  help: 'RocksDB metric "num-immutable-mem-table" - sum over column families

    '
  introducedIn: '3.6'
  name: rocksdb_num_immutable_mem_table
  type: gauge
  unit: number
- category: RocksDB
  complexity: advanced
  description: "This metric exhibits the RocksDB metric \"num-immutable-mem-table-flushed\",
    \nwhich shows the number of immutable memtables that have already been\nflushed.
    This value is the sum over all column families.\n\nMemtables are sorted tables
    of key/value pairs which begin\nto be built up in memory. At some stage they are
    closed and become\nimmutable, and some time later they are flushed to disk.\n"
  exposedBy:
  - dbserver
  - agent
  - single
  help: 'RocksDB metric "num-immutable-mem-table-flushed" - sum over column families

    '
  introducedIn: '3.6'
  name: rocksdb_num_immutable_mem_table_flushed
  type: gauge
  unit: number
- category: RocksDB
  complexity: advanced
  description: 'This metric exhibits the RocksDB metric "rocksdb-num-live-versions".

    It shows the number of live versions. `Version` is an internal data

    structure. See `version_set.h` in the RocksDB source for details. More

    live versions often mean more SST files are held from being deleted,

    by iterators or unfinished compactions. This number is the number

    summed up over all column families.

    '
  exposedBy:
  - dbserver
  - agent
  - single
  help: 'RocksDB metric "rocksdb-num-live-versions"

    '
  introducedIn: '3.6'
  name: rocksdb_num_live_versions
  type: gauge
  unit: number
- category: RocksDB
  complexity: advanced
  description: 'This metric exhibits the RocksDB metric "rocksdb-num-running-compactions".

    It shows the number of currently running compactions.

    '
  exposedBy:
  - dbserver
  - agent
  - single
  help: 'RocksDB metric "rocksdb-num-running-compactions"

    '
  introducedIn: '3.6'
  name: rocksdb_num_running_compactions
  type: gauge
  unit: number
- category: RocksDB
  complexity: advanced
  description: 'This metric exhibits the RocksDB metric "rocksdb-num-running-flushes".

    It shows the number of currently running flushes.

    '
  exposedBy:
  - dbserver
  - agent
  - single
  help: 'RocksDB metric "rocksdb-num-running-flushes"

    '
  introducedIn: '3.6'
  name: rocksdb_num_running_flushes
  type: gauge
  unit: number
- category: RocksDB
  complexity: advanced
  description: 'This metric exhibits the RocksDB metric "rocksdb-num-snapshots".

    It shows the number of unreleased snapshots of the database.

    '
  exposedBy:
  - dbserver
  - agent
  - single
  help: 'RocksDB metric "rocksdb-num-snapshots"

    '
  introducedIn: '3.6'
  name: rocksdb_num_snapshots
  type: gauge
  unit: number
- category: RocksDB
  complexity: advanced
  description: 'This metric exhibits the RocksDB metric "rocksdb-oldest-snapshot-time".

    It shows a number representing the unix timestamp of the oldest

    unreleased snapshot.

    '
  exposedBy:
  - dbserver
  - agent
  - single
  help: 'RocksDB metric "rocksdb-oldest-snapshot-time"

    '
  introducedIn: '3.6'
  name: rocksdb_oldest_snapshot_time
  type: gauge
  unit: number
- category: RocksDB
  complexity: advanced
  description: 'This metric exhibits the RocksDB metric "rocksdb-size-all-mem-tables".

    It shows the approximate size of all active, unflushed immutable, and

    pinned immutable memtables in bytes, summed over all column families.

    '
  exposedBy:
  - dbserver
  - agent
  - single
  help: 'RocksDB metric "rocksdb-size-all-mem-tables" - sum over column families

    '
  introducedIn: '3.6'
  name: rocksdb_size_all_mem_tables
  type: gauge
  unit: bytes
- category: RocksDB
  complexity: advanced
  description: 'This metric shows the currently used disk space in bytes on the volume

    which is used by RocksDB. Since RocksDB does not like out of disk

    space scenarios, please make sure that there is enough free disk space

    available at all times! Note that this metric is only available/populated on some
    platforms.

    '
  exposedBy:
  - dbserver
  - agent
  - single
  help: 'Used disk space in bytes on volume used by RocksDB

    '
  introducedIn: '3.8'
  name: rocksdb_total_disk_space
  type: gauge
  unit: bytes
- category: RocksDB
  complexity: advanced
  description: 'This metric shows the currently used number of inodes on the disk
    volume

    used by RocksDB. Since RocksDB does not like out of disk space

    scenarios, please make sure that there are enough free inodes available

    at all times! Note that this metric is only available/populated on some platforms.

    '
  exposedBy:
  - dbserver
  - agent
  - single
  help: 'Number of used inodes on the volume used by RocksDB

    '
  introducedIn: '3.8'
  name: rocksdb_total_inodes
  type: gauge
  unit: number
- category: RocksDB
  complexity: advanced
  description: 'This metric exhibits the RocksDB metric "rocksdb-total-sst-files-size".

    It shows the total size in bytes of all SST files, summed over all

    column families.

    '
  exposedBy:
  - dbserver
  - agent
  - single
  help: 'RocksDB metric "rocksdb-total-sst-files-size" - sum over all column families

    '
  introducedIn: '3.6'
  name: rocksdb_total_sst_files_size
  type: gauge
  unit: bytes
