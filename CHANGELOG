devel
-----

* Added resign leadership job to supervision.

* Keep followers in sync if the old leader resigned and stopped writes.

* Abort a FailedLeader job when its _to_ server fails.

* TOKENS function updated to deal with primitive types and arrays.


v3.5.0-rc.7 (2019-08-01)
------------------------

* Upgraded arangodb starter version to 0.14.12.


v3.5.0-rc.6 (2019-07-29)
------------------------

* Fixed issue #9459: Optimization rule remove-collect-variables does not KEEP all necessary data.

* Added gzip and encryption options to arangoimport and arangoexport.

* Added missing REST API route GET /_api/transaction for retrieving the list of
  currently ongoing transactions.

* Fixed issue #9558: RTRIM not working as expected.

* Added startup error for bad temporary directory setting.

  If the temporary directory (--temp.path) setting is identical to the database 
  directory (`--database.directory`) this can eventually lead to data loss, as 
  temporary files may be created inside the temporary directory, causing overwrites of 
  existing database files/directories with the same names.
  Additionally the temporary directory may be cleaned at some point, and this would lead 
  to an unintended cleanup of the database files/directories as well.
  Now, if the database directory and temporary directory are set to the same path, there 
  will be a startup warning about potential data loss (though in ArangoDB 3.4 allowing to 
  continue the startup - in 3.5 and higher we will abort the startup).

* Make TTL indexes behave like other indexes on creation.
    
  If a TTL index is already present on a collection, the previous behavior
  was to make subsequent calls to `ensureIndex` fail unconditionally with
  the error "there can only be one ttl index per collection".
    
  Now we are comparing the attributes of the to-be-created index with the
  attributes of the existing TTL index and make it only fail when the
  attributes differ. If the attributes are identical, the `ensureIndex`
  call succeeds and returns the existing index.


v3.5.0-rc.5 (2019-07-22)
------------------------

* MinReplicationFactor:
  Collections can now be created with a minimal replication factor (minReplicationFactor), which defaults to 1.
  If minReplicationFactor > 1 a collection will go into "read-only" mode as soon as it has less then minReplicationFactor
  many insync followers. With this mechanism users can avoid to have collections diverge too much in case of failure scenarios.
  minReplicationFactor can have the values: 1 <= minReplicationFactor <= replicationFactor.
  Having minReplicationFactor == 1 ArangoDB behaves the same way as in any previous version.
  
* Fixed a query abort error with smart joins if both collections were restricted to a
  single shard using the "restrict-to-single-shard" optimizer rule.

* Fixed a performance regression of COLLECT WITH COUNT INTO.

* Fixed some races in cluster collection creation, which allowed collections with the
  same name to be created in parallel under some rare conditions.
 
* arangoimport would not stop, much less report, communications errors.  Add CSV reporting
  of line numbers that are impacted during such errors

* Prevent rare cases of duplicate DDL actions being executed by Maintenance.

* Coordinator code was reporting rocksdb error codes, but not the associated detail message.
  Corrected.

* The keep alive timeout specified via --http.keep-alive-timeout is now being honored

* Replication requests on Document API are now on higher priority then client-triggered requests.
  This should help to keep in sync replication up and running even if the server is overloaded.

* Bugfix: Save distinct WAL ticks for multiple replication clients from the same
  server. Also, when a follower is added for synchronous replication, the WAL
  tick held by the client is freed immediately, rather than waiting for a
  timeout.
  The corresponding APIs get a new parameter `syncerId`, which, if given,
  supersedes `serverId`. This affects the routes /_api/wal/tail,
  /_api/replication/batch, /_api/replication/logger-follow and the internal
  route /_api/replication/addFollower. The new field `syncerId` is also added to
  the response of /_api/replication/logger-state.

* Disallow indexing the `_id` attribute even as a sub-attribute.
  Previous versions of ArangoDB did not allow creating indexes on the `_id` attribute, but didn't
  check if an index was created on the `_id` attribute of a sub-attribute, e.g. `referredTo._id`
  or `data[*]._id`.
  Such indexes could be created with previous versions of ArangoDB, but they were non-functional.
  From now on, such indexes cannot be created anymore, and any attempts to create them will fail.

* Added option `--replication.max-parallel-tailing-invocations` to limit the maximum number
  of concurrent WAL tailing invocations.

  The option can be used to limit the usage of the WAL tailing APIs in order to control
  server load.

* Fixed agency bug with election lock step.

* Fixed some error reporting and logging in Maintenance.

* Fixed an error condition in which an ex-leader for a short still believed
  to be the leader and wrongly reported to Current.


v3.5.0-rc.4 (2019-06-15)
------------------------

* Speed up collection creation process in cluster, if not all agency callbacks are
  delivered successfully.

* Increased performance of document inserts, by reducing the number of checks in unique / primary indexes.

* Fixed a callback function in the web UI where the variable `this` was out of scope.

* Fixed editing a user within the web UI if the user added a gravatar profile picture.

* Allow pregel to select the shard key via `shardKeyAttribute` in pregel start parameters.

* Added --server.jwt-secret-keyfile to arangosh.

* Fixed internal issue #4040: gharial api is now checking existence of `_from` and `_to` vertices
  during edge replacements and edge updates.

* Fixed `Buffer.alloc` method.

* `Buffer` is now iterable and accepts `ArrayBuffer` values as input.

* Fix timeout-response in case of simultaneous index create/drop in cluster.

* Enabled dropping an index by its name.

* Fixed lookup of index from collection by fully qualified name, e.g.
  `db.testCollection.index('testCollection/primary')`.

* Fixed agency bug with TTL object writes discovered in 3.4.6.


v3.5.0-rc.3 (2019-05-31)
------------------------

* Fixed issue #9106: Sparse Skiplist Index on multiple fields not used for FILTER + SORT query.

  Allow AQL query optimizer to use sparse indexes in more cases, specifically when
  indexes could not be used for filtering and there finally was an `EnumerateCollectionNode`
  in the query execution plan followed by a `SortNode`. In this case, sparse indexes were
  not considered for enumeration in sorted order, because it was unclear to the optimizer
  if the result set would contain null values or not.

* Upgraded RocksDB to version 6.2.

* Updated ArangoDB Starter to 0.14.4.

* The system collection '_jobs' will from now on be created with non-unique, non-sparse indexes.

* Bugfix for smart graph traversals with uniqueVertices: path, which could
  sometimes lead to erroneous traversal results.

* Pregel algorithms can be run with the option "useMemoryMaps: true" to be
  able to run algorithms on data that is bigger than the available RAM.

* Fixed a race in TTL thread deactivation/shutdown.

* Fixed internal issue #3919: The web UI is now using precompiled ejs templates.

* Fixed agency issue in abort of cleanOutServer job.

v3.5.0-rc.2 (2019-05-23)
------------------------

* Fixed "collection not found" exception during setup of 3-way smart join queries in the
  cluster.

* Fixed an edge case of handling `null` values in the AQL function `MIN` for input
  sequences that started with a `null` value. In this case, `null` was always returned as the
  minimum value even though other non-null values may have followed, and `MIN` was supposed
  to return `null` only if there are no input values or all input values are `null`.

* Fixed a crash when posting an async request to the server using the "x-arango-async"
  request header and the server's request queue was full.

* Added error code 1240 "incomplete read" for RocksDB-based reads which cannot retrieve
  documents due to the RocksDB block cache being size-restricted (with size limit enforced)
  and uncompressed data blocks not fitting into the block cache.

  The error can only occur for collection or index scans with the RocksDB storage engine
  when the RocksDB block cache is used and set to a very small size, plus its maximum size is
  enforced by setting the `--rocksdb.enforce-block-cache-size-limit` option to `true`.

  Previously these incomplete reads could have been ignored silently, making collection or
  index scans return less documents than there were actually present.

* Fixed internal issue #3918: added optional second parameter "withId" to AQL
  function PREGEL_RESULT.

  This parameter defaults to `false`. When set to `true` the results of the Pregel
  computation run will also contain the `_id` attribute for each vertex and not
  just `_key`. This allows distinguishing vertices from different vertex collections.

* Made Swagger UI work with HTTPS-enabled ArangoDBs too.

* Improved scheduler performance for single-connection cases.

* Internally switched unit tests framework from catch to gtest.

* Disabled selection of index types "hash" and "skiplist" in the web interface when
  using the RocksDB engine. The index types "hash", "skiplist" and "persistent" are
  just aliases of each other with the RocksDB engine, so there is no need to offer all
  of them. After initially only offering "hash" indexes, we decided to only offer
  indexes of type "persistent", as it is technically the most
  appropriate description.

* Fixed client id lookup table in state.


v3.5.0-rc.1 (2019-05-14)
------------------------

* Removed bug during start up with a single agent, that leads to dbserver crash.

* Fixed issue #7011: description when replacing a foxx application was misleading.

* Fixed issue #8841: Graph Viewer dropped ability to edit an edge after
  rerendering.

* Upgraded arangodb starter version to 0.14.3.

* ArangoQueryStreamCursor.prototype.id needs to be a string, v8 32 bit integers
  can't hold the full data.

* Upgraded Swagger UI to 3.22.1.

* Added --compress-output flag to arangodump. Activates gzip compression for
  collection data. Metadata files, such as .structure.json and .view.json,
  do not get compressed. No option is needed for arangorestore to restore
  .data.json.gz files.

* Added options to make server more secure:

  - `--server.harden`: denies access to certain REST APIs that return server internals
  - `--foxx.api`: set to false disables Foxx management API
  - `--foxx.store`: set to false disables Foxx UI
  - `--javascript.allow-port-testing`: enables internal.testPort()
  - `--javascript.allow-external-process-control`: enables external process control
  - `--javascript.harden`: disables getPid() and logLevel()
  - `--javascript.startup-options-whitelist`: control startup options visible in JavaScript
  - `--javascript.environment-variables-whitelist`: control environment variables visible in JavaScript
  - `--javascript.endpoints-whitelist`: control accessible endpoints in JavaScript
  - `--javascript.files-whitelist`: control file access in JavaScript

  Note: There is a [detailed description of all options](https://www.arangodb.com/docs/devel/security-security-options.html).

* Prevented arangod from making a call to www.arangodb.com at startup.

  This call was done to check for available updates, but it could have contributed
  to small startup delays in case outgoing connections were blocked.

* Removed support for undocumented HTTP header `x-arango-v8-context`, which
  allowed controlling in which particular V8 context number a JavaScript-based
  action was executed. This header was only used internally for testing.

* `db._query` now handles additional arguments correctly when passing an AQL
  query object instead of a query string and separate bindVars.

* Added req.auth property to Foxx.

* Added collection.documentId method to derive document id from key.

* Indexes created with the 'inBackground', will not hold an
  exclusive collection lock for the entire index creation period (rocksdb only).

* Fixed internal issue #536: ArangoSearch may crash server during term lookup.

* Fixed internal issue #2946: Create graph autocomplete was not working under
  certain circumstances.

* Added `filter` option to Foxx HTTP API for running tests.

* Added function `db.<collection>.getResponsibleShard()` to find out which is the
  responsible shard for a given document. Note that this function is only available
  in a cluster coordinator.

* Updated bundled version of jemalloc memory allocator to 5.2.0.

* Don't create per-database system collection `_frontend` automatically.
  This collection is only needed by the web UI, and it can be created lazily
  when needed.

* Added logging option `--log.time-format` to configure the time format used
  in log output. The possible values for this option are:

  - timestamp: unix timestamps, in seconds
  - timestamp-millis: unix timestamps, in seconds, with millisecond precision
  - timestamp-micros: unix timestamps, in seconds, with microsecond precision
  - uptime: seconds since server start
  - uptime-millis: seconds since server start, with millisecond precision
  - uptime-micros: seconds since server start, with microsecond precision
  - utc-datestring: UTC-based date and time in format YYYY-MM-DDTHH:MM:SSZ
  - utc-datestring-millis: UTC-based date and time in format YYYY-MM-DDTHH:MM:SS.FFFZ
  - local-datestring: local date and time in format YYYY-MM-DDTHH:MM:SS

  This change deprecates the existing options `--log.use-microtime` and
  `--log.use-localtime`, because the functionality provided by these options
  is covered by `--log.time-format` too.

* Added "smart joins" to the ArangoDB Enterprise Edition that allows running cluster
  joins between two certain sharded collections with performance close to that of a
  local join operation.

* Fixed internal issue #3815: fixed the removal of connected edges when
  removing a vertex graph node in a smart graph environment.

* Show startup warning in case kernel setting `vm.overcommit_memory` is set
  to a value of 2 and the jemalloc memory allocator is in use. This combination
  does not play well together.

* Added AQL function DECODE_REV for decomposing `_rev` values into their
  individual parts.

* Added AQL functions CRC32 and FNV64 for hashing data.

* Renamed attribute key `openssl-version` in server/client tool version
  details output to `openssl-version-compile-time`.

  This change affects the output produced when starting one of the ArangoDB
  executables with the `--version` command. It also changes the attribute
  name in the detailed response of the `/_api/version` REST API.

* Fixed the sorting of the databases in the database
  selection dropdown in the web ui. The sort order differed based on whether
  authentication was enabled or disabled. (Internal issue #2276)

* Improved the shards view in the web ui if there
  is only one shard to display. (Internal issue #3546)

* Restricted the allowed query names for user
  defined custom queries within the web ui. (Internal issue #3789)

* Upgraded bundled RocksDB version to 6.0.

* Added "--log.ids" option to arangod.

  The default value for this option is `true`. Setting the option to `false`
  will prevent embedding unique log ids into all log messages generated by
  ArangoDB C++ code. The unique ids allow for easy access to the location in
  the source code from which a message originates. This should help customers
  to configure custom monitoring/alerting based on specific log id occurrences
  and will also be helpful for support and development in identifying problems.

* Fixed wrong equals behavior on arrays with ArangoSearch. (Internal issue #8294)

* Fixed ArangoSearch range query sometimes not working
  correctly with numeric values. (Internal issue #528)

* Changed type of the startup option `--rocksdb.recycle-log-file-num` from
  numeric to boolean, as this is also the type the options has in the RocksDB
  library.

* Renamed hidden startup option `--rocksdb.delayed_write_rate` to the more
  consistent `--rocksdb.delayed-write-rate`. When the old option name is
  used, the arangod startup will be aborted with a descriptive error message.

* If not explicitly configured, make agency nodes start removing their unused
  WAL files a few seconds after the completed server startup already. This is
  because on agency nodes, unused WAL files do not need to be retained for
  potential replication clients to read them.

* Added option `--all-databases` to arangodump and arangorestore.

  When set to true, this makes arangodump dump all available databases
  the current user has access to. The option `--all-databases` cannot be
  used in combination with the option `--server.database`.

  When `--all-databases` is used, arangodump will create a subdirectory
  with the data of each dumped database. Databases will be dumped one
  after the other. However, inside each database, the collections of the
  database can be dumped in parallel using multiple threads.

  For arangorestore, this makes it restore all databases from inside the
  subdirectories of the specified dump directory. Using the option for
  arangorestore only makes sense for dumps created with arangodump and
  the `--all-databases` option. As for arangodump, arangorestore cannot
  be invoked with the options `--all-databases` and `--server.database`
  at the same time. Additionally, the option `--force-same-database` cannot
  be used together with `--all-databases`.

  If the to-be-restored databases do not exist on the target server, then
  restoring data into them will fail unless the option `--create-database`
  is also specified. Please note that in this case a database user must
  be used that has access to the `_system` database, in order to create
  the databases on restore.

* Added index hints feature to AQL.

* Added "name" property for indices.

  If a name is not specified on index creation, one will be auto-generated.

* Under normal circumstances there should be no need to connect to a
  database server in a cluster with one of the client tools, and it is
  likely that any user operations carried out there with one of the client
  tools may cause trouble.

  The client tools arangosh, arangodump and arangorestore will now emit
  a warning when connecting with them to a database server node in a cluster.

* Fixed compaction behavior of followers.

* Added "random" masking to mask any data type, added wildcard masking.

* Added option `--console.history` to arangosh for controlling whether
  the command-line history should be loaded from and persisted in a file.

  The default value for this option is `true`. Setting it to `false`
  will make arangosh not load any command-line history from the history
  file, and not store the current session's history when the shell is
  exited. The command-line history will then only be available in the
  current shell session.

* Display the server role when connecting arangosh against a server (e.g.
  SINGLE, COORDINATOR).

* Fixed overflow in Windows NowNanos in RocksDB.

* Allowed MoveShard from leader to a follower, thus swapping the two.

* Supervision fix: Satellite collections, various fixes.

* Added coordinator route for agency dump.

* Supervision fix: abort MoveShard job does not leave a lock behind.

* Supervision fix: abort MoveShard (leader) job moves forwards when point
  of no return has been reached.

* Supervision fix: abort CleanOutServer job does not leave server in
  ToBeCleanedServers.

* Supervision fix: move shard with data stopped to early due to wrong usage
  of compare function.

* Supervision fix: AddFollower only counts good followers, fixing a
  situation after a FailedLeader job could not find a new working
  follower.

* Supervision fix: FailedLeader now also considers temporarily BAD
  servers as replacement followers and does not block servers which
  currently receive a new shard.

* Supervision fix: Servers in ToBeCleanedServers are no longer considered
  as replacement servers.

* Maintenance fix: added precondition of unchanged Plan in phase2.

* Added "PRUNE <condition>" to AQL Traversals. This allows to early abort searching of
  unnecessary branches within a traversal.
  PRUNE is only allowed in the Traversal statement and only between the graph
  definition and the options of the traversal.
  e.g.:
  `FOR v, e, p IN 1..3 OUTBOUND @source GRAPH "myGraph"
    PRUNE v.value == "bar"
    OPTIONS {} /* These options remain optional */
    RETURN v`
  for more details refer to the documentation chapter.

* Fixed a display issue when editing a graph within the web UI.

* Fixed some escaping issues within the web UI.

* Follow up to fix JWT authentication in arangosh (Internal issue #7530):
  also fixed reconnect.

* Now also syncing _jobs and _queues collections in active failover mode.

* Upgraded lodash to 4.17.11 because of CVE-2018-16487.

* `--query.registry-ttl` is now honored in single-server mode, and cursor TTLs
  are now honored on DBServers in cluster mode.

* Added "TTL" index type, for optional auto-expiration of documents.

* Disabled selection of index types "persistent" and "skiplist" in the web
  interface when using the RocksDB engine. The index types "hash", "skiplist"
  and "persistent" are just aliases of each other with the RocksDB engine,
  so there is no need to offer all of them.

* Fixed JS AQL query objects with empty query strings not being recognized
  as AQL queries.

* Updated JavaScript dependencies, including semver major updates to joi, mocha
  and eslint. The eslint config modules were incompatible with the existing
  coding style, so the old rules were inlined and the config dependencies removed.

  Note that joi removed Joi.date().format() in v10.0.0. You can bundle your own
  version of joi if you need to rely on version-dependent features.

  - accepts: 1.3.4 -> 1.3.5
  - ansi_up: 2.0.2 -> 4.0.3
  - content-disposition: 0.5.2 -> 0.5.3
  - dedent: 0.6.0 -> 0.7.0
  - error-stack-parser: 1.3.6 -> 2.0.2
  - eslint: 2.13.1 -> 5.16.0
  - eslint-config-semistandard: 6.0.2 -> removed
  - eslint-config-standard: 5.3.1 -> removed
  - eslint-plugin-promise: 1.3.2 -> removed
  - eslint-plugin-standard: 1.3.2 -> removed
  - highlight.js: 9.12.0 -> 9.15.6
  - http-errors: 1.6.2 -> 1.7.2
  - iconv-lite: 0.4.19 -> 0.4.24
  - joi: 9.2.0 -> 14.3.1
  - joi-to-json-schema: 2.3.0 -> 4.0.1
  - js-yaml: 3.10.0 -> 3.13.1
  - marked: 0.3.9 -> 0.6.2
  - mime-types: 2.1.12 -> 2.1.22
  - mocha: 2.5.3 -> 6.1.3
  - qs: 6.5.1 -> 6.7.0
  - semver: 5.4.1 -> 6.0.0
  - statuses: 1.4.0 -> 1.5.0
  - timezone: 1.0.13 -> 1.0.22
  - type-is: 1.6.15 -> 1.6.16
  - 
