# Copyright (c) 2010 Vladimir Prus.
# Copyright (c) 2013 Steven Watanabe
#
# Use, modification and distribution is subject to the Boost Software
# License Version 1.0. (See accompanying file LICENSE_1_0.txt or
# http://www.boost.org/LICENSE_1_0.txt)

# Supports the bzip library
#
# After 'using bzip2', the following targets are available:
#
# /bzip2//bzip2 -- The bzip library

import project ;
import ac ;
import errors ;
import feature ;
import "class" : new ;
import targets ; 
import path ;
import modules ;
import indirect ;
import make ;
import os ;
import print ;
import property ;
import property-set ;

header = bzlib.h ;
names = bz2 ;

sources = blocksort.c bzlib.c compress.c crctable.c
          decompress.c huffman.c randtable.c ;

library-id = 0 ;

if --debug-configuration in [ modules.peek : ARGV ]
{
    .debug =  true ;
}

# Initializes the bzip library.
#
# bzip can be configured either to use pre-existing binaries
# or to build the library from source.
#
# Options for configuring a prebuilt bzip::
#
#   <search>
#       The directory containing the bzip binaries.
#   <name>
#       Overrides the default library name.
#   <include>
#       The directory containing the bzip headers.
#
# If none of these options is specified, then the environmental
# variables BZIP2_LIBRARY_PATH, BZIP2_NAME, and BZIP2_INCLUDE will
# be used instead.
#
# Options for building bzip from source::
#
#   <source>
#       The bzip source directory.  Defaults to the environmental variable
#       BZIP2_SOURCE.
#   <tag>
#       A rule which computes the actual name of the compiled
#       libraries based on the build properties.  Ignored
#       when using precompiled binaries.
#   <build-name>
#       The base name to use for the compiled library.  Ignored
#       when using precompiled binaries.
#
# Examples::
#
#   # Find bzip in the default system location
#   using bzip2 ;
#   # Build bzip from source
#   using bzip2 : 1.0.6 : <source>/home/sergey/src/bzip2-1.0.6 ;
#   # Find bzip in /usr/local
#   using bzip2 : 1.0.6
#     : <include>/usr/local/include <search>/usr/local/lib ;
#   # Build bzip from source for msvc and find
#   # prebuilt binaries for gcc.
#   using bzip2 : 1.0.6 : <source>C:/Devel/src/bzip2-1.0.6 : <toolset>msvc ;
#   using bzip2 : 1.0.6 : : <toolset>gcc ;
#
rule init (
    version ?
    # The bzip version (currently ignored)

    : options *
    # A list of the options to use

    : requirements *
    # The requirements for the bzip target

    : is-default ?
    # Default configurations are only used when bzip
    # has not yet been configured.  This option is
    # deprecated.  A configuration will be treated
    # as a default when none of <include>, <search>,
    # <name>, and <source> are present.
    )
{
    local caller = [ project.current ] ;

    if ! $(.initialized)
    {
        .initialized = true ;

        project.initialize $(__name__) ;
        .project = [ project.current ] ;
        project bzip2 ;
    }

    local library-path = [ feature.get-values <search> : $(options) ] ;
    local include-path = [ feature.get-values <include> : $(options) ] ;
    local source-path = [ feature.get-values <source> : $(options) ] ;
    local library-name = [ feature.get-values <name> : $(options) ] ;
    local tag = [ feature.get-values <tag> : $(options) ] ;
    local build-name = [ feature.get-values <build-name> : $(options) ] ;

    if ! $(library-path) && ! $(include-path) && ! $(source-path) && ! $(library-name)
    {
        is-default = true ;
    }

    condition = [ property-set.create $(requirements) ] ;
    condition = [ property-set.create [ $(condition).base ] ] ;

    local no-build-from-source ;
    # Ignore environmental BZIP2_SOURCE if this initialization
    # requested to search for a specific pre-built library.
    if $(library-path) || $(include-path) || $(library-name)
    {
        if $(source-path) || $(tag) || $(build-name)
        {
            errors.user-error "incompatible options for bzip2:"
                [ property.select <search> <include> <name> : $(options) ] "and"
                [ property.select <source> <tag> <build-name> : $(options) ] ;
        }
    }
    else
    {
        source-path ?= [ os.environ BZIP2_SOURCE ] ;
        if $(source-path)
        {
            source-path = [ path.root [ path.make $(source-path) ]
                                      [ path.pwd ] ] ;
        }
    }

    if $(.configured.$(condition))
    {
        if $(is-default)
        {
            if $(.debug)
            {
                ECHO "notice: [bzip2] bzip is already configured" ;
            }
        }
        else
        {
            errors.user-error "bzip is already configured" ;
        }
        return ;
    }
    else if $(source-path)
    {
        build-name ?= bz2 ;
        library-id = [ CALC $(library-id) + 1 ] ;
        tag = [ MATCH ^@?(.*)$ : $(tag) ] ;
        if $(tag)
        {
            tag = [ indirect.make $(tag) : [ $(caller).project-module ] ] ;
        }
        sources = [ path.glob $(source-path) : $(sources) ] ;
        def-file = [ path.glob $(source-path) : libbz2.def ] ;
        if $(.debug)
        {
            ECHO "notice: [bzip2] Building bzip from source as $(build-name)" ;
            if $(condition)
            {
                ECHO "notice: [bzip2] Condition" [ $(condition).raw ] ;
            }
            if $(sources)
            {
                ECHO "notice: [bzip2] found bzip source in $(source-path)" ;
            }
            else
            {
                ECHO "warning: [bzip2] could not find bzip source in $(source-path)" ;
            }
        }
        local target ;
        if $(sources)
        {
            if ! $(.def-file-target)
            {
                .def-file-target = [ targets.create-metatarget make-target-class
                  : $(.project) : libbz2.def : $(def-file)
                  : <action>@bzip2.make-bz2-def-file ]
                  ;
            }
            target = [ targets.create-typed-target LIB : $(.project)
              : $(build-name).$(library-id)
              : $(sources)
              : $(requirements)
                <tag>@$(tag)
                <include>$(source-path)
                <toolset>msvc:<define>_CRT_SECURE_NO_DEPRECATE
                <toolset>msvc:<define>_SCL_SECURE_NO_DEPRECATE
                <link>shared:<def-file>libbz2.def
              :
              : <include>$(source-path) ] ;
        }

        local mt = [ new ac-library bzip2 : $(.project) : $(condition) ] ;
        $(mt).set-header $(header) ;
        $(mt).set-default-names $(names) ;
        if $(target)
        {
            $(mt).set-target $(target) ;
        }
        targets.main-target-alternative $(mt) ;
    }
    else
    {
        if $(.debug)
        {
            ECHO "notice: [bzip2] Using pre-installed library" ;
            if $(condition)
            {
                ECHO "notice: [bzip2] Condition" [ $(condition).raw ] ;
            }
        }

        local mt = [ new ac-library bzip2 : $(.project) : $(condition) :
            $(include-path) : $(library-path) : $(library-name) ] ;
        $(mt).set-header $(header) ;
        $(mt).set-default-names $(names) ;
        targets.main-target-alternative $(mt) ;
    }
    .configured.$(condition) = true ;
}

if [ os.name ] = NT
{
    local rule read-file ( file )
    {
        return [ SPLIT_BY_CHARACTERS [ SHELL "type \"$(file:G=)\" 2>nul" ] : "\n" ] ;
    }
}
else if [ os.name ] = VMS
{
    local rule read-file ( file )
    {
        return [ SPLIT_BY_CHARACTERS [ SHELL "PIPE TYPE $(file:W) 2>NL:" ] : "\n" ] ;
    }
}
else
{
    local rule read-file ( file )
    {
        return [ SPLIT_BY_CHARACTERS [ SHELL "cat \"$(file:G=)\" 2>/dev/null" ]  : "\n" ] ;
    }
}

rule make-bz2-def-file ( target : source : properties * )
{
    print.output $(target) ;
    for local line in [ read-file $(source) ]
    {
        if ! [ MATCH "(LIBRARY[ \t]+LIBBZ2)" : $(line) ]
        {
            print.text $(line) : yes ;
        }
    }
}
