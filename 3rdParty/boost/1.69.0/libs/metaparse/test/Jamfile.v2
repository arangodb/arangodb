import testing ;

project metaparse :
  requirements
    <toolset>gcc:<cxxflags>"-ftemplate-depth-300"
    <toolset>clang:<cxxflags>"-ftemplate-depth-300"

    <library>/boost/test//boost_unit_test_framework/<link>static
  ;

test-suite metaparse-unit-tests :
  [ compile BOOST_METAPARSE_STRING.cpp ]
  [ compile accept.cpp ]
  [ compile accept_when.cpp ]
  [ compile back_inserter.cpp ]
  [ compile all_headers.cpp ]
  [ compile alphanum.cpp ]
  [ compile always_c.cpp ]
  [ compile always.cpp ]
  [ compile at_c.cpp ]
  [ compile build_parser.cpp ]
  [ compile change_error_message.cpp ]
  [ compile concat.cpp ]
  [ run define_error.cpp ]
  [ compile digit.cpp ]
  [ compile digit_to_int.cpp ]
  [ compile digit_val.cpp ]
  [ compile empty.cpp ]
  [ run empty_string.cpp ]
  [ compile entire_input.cpp ]
  [ compile except.cpp ]
  [ compile fail_at_first_char_expected.cpp ]
  [ compile fail.cpp ]
  [ compile fail_tag.cpp ]
  [ compile first_of.cpp ]
  [ compile foldl1.cpp ]
  [ compile foldl.cpp ]
  [ compile foldl_reject_incomplete1.cpp ]
  [ compile foldl_reject_incomplete.cpp ]
  [ compile foldl_reject_incomplete_start_with_parser.cpp ]
  [ compile foldl_start_with_parser.cpp ]
  [ compile foldr1.cpp ]
  [ compile foldr.cpp ]
  [ compile foldr_reject_incomplete1.cpp ]
  [ compile foldr_reject_incomplete.cpp ]
  [ compile foldr_start_with_parser.cpp ]
  [ compile front_inserter.cpp ]
  [ compile grammar.cpp ]
  [ compile has_type.cpp ]
  [ compile if_.cpp ]
  [ compile in_range_c.cpp ]
  [ compile in_range.cpp ]
  [ compile int_.cpp ]
  [ compile int_to_digit.cpp ]
  [ compile is_char_c.cpp ]
  [ compile is_digit.cpp ]
  [ compile is_error.cpp ]
  [ compile is_lcase_letter.cpp ]
  [ compile is_letter.cpp ]
  [ compile is_ucase_letter.cpp ]
  [ compile is_whitespace.cpp ]
  [ compile iterate_c.cpp ]
  [ compile iterate.cpp ]
  [ compile keyword.cpp ]
  [ compile last_of.cpp ]
  [ compile letter.cpp ]
  [ compile lit_c.cpp ]
  [ compile lit.cpp ]
  [ compile look_ahead.cpp ]
  [ compile long_string.cpp ]
  [ compile middle_of.cpp ]
  [ compile next_digit.cpp ]
  [ compile nth_of.cpp ]
  [ compile one_char.cpp ]
  [ compile one_char_except_c.cpp ]
  [ compile one_char_except.cpp ]
  [ compile one_of_c.cpp ]
  [ compile one_of.cpp ]
  [ compile optional.cpp ]
  [ compile pop_back.cpp ]
  [ compile pop_front.cpp ]
  [ compile push_back_c.cpp ]
  [ compile push_front_c.cpp ]
  [ compile range_c.cpp ]
  [ compile range.cpp ]
  [ compile reject.cpp ]
  [ compile remove_trailing_no_chars.cpp ]
  [ compile repeated1.cpp ]
  [ compile repeated.cpp ]
  [ compile repeated_one_of1.cpp ]
  [ compile repeated_one_of.cpp ]
  [ compile repeated_reject_incomplete1.cpp ]
  [ compile repeated_reject_incomplete.cpp ]
  [ compile return_.cpp ]
  [ compile returns.cpp ]
  [ compile sequence.cpp ]
  [ compile sequence_apply.cpp ]
  [ compile size.cpp ]
  [ compile source_position.cpp ]
  [ compile space.cpp ]
  [ compile spaces.cpp ]
  [ run string.cpp ]
  [ compile string_iterator_tag.cpp ]
  [ compile string_tag.cpp ]
  [ compile swap.cpp ]
  [ compile token.cpp ]
  [ compile-fail too_long_string.cpp ]
  [ compile transform.cpp ]
  [ compile transform_error.cpp ]
  [ compile transform_error_message.cpp ]
  [ compile unless_error.cpp ]
  [ compile unpaired.cpp ]
  [ compile update_c.cpp ]
  [ compile version.cpp ]
  ;
