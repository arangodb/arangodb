[/============================================================================
  Boost.Geometry (aka GGL, Generic Geometry Library)

  Copyright (c) 2007-2013 Barend Gehrels, Amsterdam, the Netherlands.
  Copyright (c) 2008-2013 Bruno Lalande, Paris, France.
  Copyright (c) 2009-2013 Mateusz Loskot, London, UK.

  Use, modification and distribution is subject to the Boost Software License,
  Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt)
=============================================================================/]


[/ Generated by doxygen_xml2qbk 1.1.1, don't change, will be overwritten automatically]
[/ Generated from doxy/doxygen_output/xml/structboost_1_1geometry_1_1box__view.xml]
[section:box_view box_view]

'''<indexterm><primary>box_view</primary></indexterm>'''
Makes a box behave like a ring or a range. 

[heading Description]
Adapts a box to the Boost.Range concept, enabling the user to iterating box corners. The box\u005fview is registered as a Ring Concept 

[heading Model of]
[link geometry.reference.concepts.concept_ring Ring Concept]

[heading Synopsis]
``template<typename Box, bool Clockwise>
struct box_view
{
  // ...
};
``

[heading Template parameter(s)]
[table
[[Parameter] [Default] [Description]]
[[typename Box] [] [A type fulfilling the Box Concept ]]
[[bool Clockwise] [true] [If true, walks in clockwise direction, otherwise it walks in counterclockwise direction]]
]

[heading Constructor(s)]
[table
[[Function] [Description] [Parameters] ]
[[``box_view(Box const & box)``

] [Constructor accepting the box to adapt. ] [[* Box const &]: ['box]:  



]]
]

[heading Member Function(s)]
[table
[[Function] [Description] [Parameters]  [Returns]]
[[``const_iterator begin()``

] [] [

][

]
]
[[``const_iterator end()``

] [] [

][

]
]
]

[heading Header]
Either

`#include <boost/geometry.hpp>`


Or

`#include <boost/geometry/views/box_view.hpp>`

[include reference/views/box_view.qbk]

[endsect]

