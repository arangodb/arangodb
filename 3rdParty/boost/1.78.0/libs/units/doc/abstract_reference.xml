<?xml version="1.0" standalone="yes"?>
<library-reference id="abstract_system_reference"><title>Abstract System Reference</title><header name="boost/units/systems/abstract.hpp">
<namespace name="boost">
<namespace name="units">
<struct-specialization name="base_unit_info"><template>
    </template><specialization><template-arg>abstract::amount_unit_tag</template-arg></specialization><method-group name="public static functions">
<method name="name" specifiers="static"><type>std::string</type></method>
<method name="symbol" specifiers="static"><type>std::string</type></method>
</method-group>
</struct-specialization><struct-specialization name="base_unit_info"><template>
    </template><specialization><template-arg>abstract::current_unit_tag</template-arg></specialization><method-group name="public static functions">
<method name="name" specifiers="static"><type>std::string</type></method>
<method name="symbol" specifiers="static"><type>std::string</type></method>
</method-group>
</struct-specialization><struct-specialization name="base_unit_info"><template>
    </template><specialization><template-arg>abstract::length_unit_tag</template-arg></specialization><method-group name="public static functions">
<method name="name" specifiers="static"><type>std::string</type></method>
<method name="symbol" specifiers="static"><type>std::string</type></method>
</method-group>
</struct-specialization><struct-specialization name="base_unit_info"><template>
    </template><specialization><template-arg>abstract::luminous_intensity_unit_tag</template-arg></specialization><method-group name="public static functions">
<method name="name" specifiers="static"><type>std::string</type></method>
<method name="symbol" specifiers="static"><type>std::string</type></method>
</method-group>
</struct-specialization><struct-specialization name="base_unit_info"><template>
    </template><specialization><template-arg>abstract::mass_unit_tag</template-arg></specialization><method-group name="public static functions">
<method name="name" specifiers="static"><type>std::string</type></method>
<method name="symbol" specifiers="static"><type>std::string</type></method>
</method-group>
</struct-specialization><struct-specialization name="base_unit_info"><template>
    </template><specialization><template-arg>abstract::plane_angle_unit_tag</template-arg></specialization><method-group name="public static functions">
<method name="name" specifiers="static"><type>std::string</type></method>
<method name="symbol" specifiers="static"><type>std::string</type></method>
</method-group>
</struct-specialization><struct-specialization name="base_unit_info"><template>
    </template><specialization><template-arg>abstract::solid_angle_unit_tag</template-arg></specialization><method-group name="public static functions">
<method name="name" specifiers="static"><type>std::string</type></method>
<method name="symbol" specifiers="static"><type>std::string</type></method>
</method-group>
</struct-specialization><struct-specialization name="base_unit_info"><template>
    </template><specialization><template-arg>abstract::temperature_unit_tag</template-arg></specialization><method-group name="public static functions">
<method name="name" specifiers="static"><type>std::string</type></method>
<method name="symbol" specifiers="static"><type>std::string</type></method>
</method-group>
</struct-specialization><struct-specialization name="base_unit_info"><template>
    </template><specialization><template-arg>abstract::time_unit_tag</template-arg></specialization><method-group name="public static functions">
<method name="name" specifiers="static"><type>std::string</type></method>
<method name="symbol" specifiers="static"><type>std::string</type></method>
</method-group>
</struct-specialization><namespace name="abstract">
<struct name="amount_unit_tag"><inherit access="public">base_unit&lt; amount_unit_tag, amount_dimension, -25 &gt;</inherit></struct><struct name="current_unit_tag"><inherit access="public">base_unit&lt; current_unit_tag, current_dimension, -27 &gt;</inherit></struct><struct name="length_unit_tag"><inherit access="public">base_unit&lt; length_unit_tag, length_dimension, -30 &gt;</inherit></struct><struct name="luminous_intensity_unit_tag"><inherit access="public">base_unit&lt; luminous_intensity_unit_tag, luminous_intensity_dimension, -24 &gt;</inherit></struct><struct name="mass_unit_tag"><inherit access="public">base_unit&lt; mass_unit_tag, mass_dimension, -29 &gt;</inherit></struct><struct name="plane_angle_unit_tag"><inherit access="public">base_unit&lt; plane_angle_unit_tag, plane_angle_dimension, -23 &gt;</inherit></struct><struct name="solid_angle_unit_tag"><inherit access="public">base_unit&lt; solid_angle_unit_tag, solid_angle_dimension, -22 &gt;</inherit></struct><struct name="temperature_unit_tag"><inherit access="public">base_unit&lt; temperature_unit_tag, temperature_dimension, -26 &gt;</inherit></struct><struct name="time_unit_tag"><inherit access="public">base_unit&lt; time_unit_tag, time_dimension, -28 &gt;</inherit></struct><typedef name="system"><type>make_system&lt; <classname>length_unit_tag</classname>, <classname>mass_unit_tag</classname>, <classname>time_unit_tag</classname>, <classname>current_unit_tag</classname>, <classname>temperature_unit_tag</classname>, <classname>amount_unit_tag</classname>, <classname>luminous_intensity_unit_tag</classname>, <classname>plane_angle_unit_tag</classname>, <classname>solid_angle_unit_tag</classname> &gt;::type</type></typedef>
<typedef name="length"><purpose>abstract unit of length </purpose><type>unit&lt; length_dimension, system &gt;</type></typedef>
<typedef name="mass"><purpose>abstract unit of mass </purpose><type>unit&lt; mass_dimension, system &gt;</type></typedef>
<typedef name="time"><purpose>abstract unit of time </purpose><type>unit&lt; time_dimension, system &gt;</type></typedef>
<typedef name="current"><purpose>abstract unit of current </purpose><type>unit&lt; current_dimension, system &gt;</type></typedef>
<typedef name="temperature"><purpose>abstract unit of temperature </purpose><type>unit&lt; temperature_dimension, system &gt;</type></typedef>
<typedef name="amount"><purpose>abstract unit of amount </purpose><type>unit&lt; amount_dimension, system &gt;</type></typedef>
<typedef name="luminous_intensity"><purpose>abstract unit of luminous intensity </purpose><type>unit&lt; luminous_intensity_dimension, system &gt;</type></typedef>
<typedef name="plane_angle"><purpose>abstract unit of plane angle </purpose><type>unit&lt; plane_angle_dimension, system &gt;</type></typedef>
<typedef name="solid_angle"><purpose>abstract unit of solid angle </purpose><type>unit&lt; solid_angle_dimension, system &gt;</type></typedef>
</namespace>
</namespace>
</namespace>
</header>
</library-reference>