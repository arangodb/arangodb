# Copyright (c) 2018-2019 Emil Dotchevski and Reverge Studios, Inc.

# Distributed under the Boost Software License, Version 1.0. (See accompanying
# file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)

import testing ;

variant leaf_debug_diag0 : debug : <define>BOOST_LEAF_DIAGNOSTICS=0 ;
variant leaf_release_diag0 : release : <define>BOOST_LEAF_DIAGNOSTICS=0 ;

variant leaf_debug_leaf_hpp : debug : <define>BOOST_LEAF_TEST_SINGLE_HEADER ;
variant leaf_release_leaf_hpp : release : <define>BOOST_LEAF_TEST_SINGLE_HEADER ;

project
    : default-build
        <cxxstd>11
    : requirements
        <define>BOOST_LEAF_BOOST_AVAILABLE
        <threading>single:<define>BOOST_LEAF_NO_THREADS
        <toolset>gcc:<cxxflags>"-Wno-delete-non-virtual-dtor -Wno-parentheses"
        <toolset>clang:<cxxflags>"-Wno-dangling-else"
        <toolset>darwin:<cxxflags>"-Wno-unused-variable -Wno-delete-non-virtual-dtor -Wno-non-virtual-dtor -Wno-dangling-else"
		<toolset>msvc:<cxxflags>"-wd 4267 -wd 4996 -wd 4244"
		<include>../../..
    ;

compile _hpp_capture_test.cpp ;
compile _hpp_common_test.cpp ;
compile _hpp_context_test.cpp ;
compile _hpp_error_test.cpp ;
compile _hpp_exception_test.cpp ;
compile _hpp_handle_errors_test.cpp ;
compile _hpp_on_error_test.cpp ;
compile _hpp_leaf_test.cpp ;
compile _hpp_pred_test.cpp ;
compile _hpp_result_test.cpp ;

run accumulate_basic_test.cpp ;
run accumulate_nested_error_exception_test.cpp ;
run accumulate_nested_error_result_test.cpp ;
run accumulate_nested_new_error_exception_test.cpp ;
run accumulate_nested_new_error_result_test.cpp ;
run accumulate_nested_success_exception_test.cpp ;
run accumulate_nested_success_result_test.cpp ;
run BOOST_LEAF_AUTO_test.cpp ;
run BOOST_LEAF_ASSIGN_test.cpp ;
run boost_exception_test.cpp ;
run capture_exception_async_test.cpp ;
run capture_exception_result_async_test.cpp ;
run capture_exception_state_test.cpp ;
run capture_exception_unload_test.cpp ;
run capture_result_async_test.cpp ;
run capture_result_state_test.cpp ;
run capture_result_unload_test.cpp ;
run ctx_handle_all_test.cpp ;
run ctx_handle_some_test.cpp ;
run ctx_remote_handle_all_test.cpp ;
run ctx_remote_handle_some_test.cpp ;
run defer_basic_test.cpp ;
run defer_nested_error_exception_test.cpp ;
run defer_nested_error_result_test.cpp ;
run defer_nested_new_error_exception_test.cpp ;
run defer_nested_new_error_result_test.cpp ;
run defer_nested_success_exception_test.cpp ;
run defer_nested_success_result_test.cpp ;
run diagnostic_info_test.cpp ;
run e_errno_test.cpp ;
run e_LastError_test.cpp ;
run error_code_test.cpp ;
run error_id_test.cpp ;
run exception_test.cpp ;
run exception_to_result_test.cpp ;
run function_traits_test.cpp ;
run handle_all_other_result_test.cpp ;
run handle_all_test.cpp ;
run handle_basic_test.cpp ;
run handle_some_other_result_test.cpp ;
run handle_some_test.cpp ;
run match_test.cpp ;
run match_member_test.cpp ;
run match_value_test.cpp ;
run multiple_errors_test.cpp ;
run optional_test.cpp ;
run preload_basic_test.cpp ;
run preload_exception_test.cpp ;
run preload_nested_error_exception_test.cpp ;
run preload_nested_error_result_test.cpp ;
run preload_nested_new_error_exception_test.cpp ;
run preload_nested_new_error_result_test.cpp ;
run preload_nested_success_exception_test.cpp ;
run preload_nested_success_result_test.cpp ;
run print_test.cpp ;
run result_bad_result_test.cpp ;
run result_implicit_conversion_test.cpp ;
run result_load_test.cpp ;
run result_ref_test.cpp ;
run result_state_test.cpp ;
run context_deduction_test.cpp ;
run try_catch_error_id_test.cpp ;
run try_catch_test.cpp ;
run try_exception_and_result_test.cpp ;

lib visibility_test_lib : visibility_test_lib.cpp : <visibility>hidden ;
run visibility_test.cpp visibility_test_lib/<link>shared ;
run visibility_test.cpp visibility_test_lib/<link>static : : : <target-os>windows ; # This can't work on Windows, so use static link for the test.

compile-fail _compile-fail-arg_boost_error_info_1.cpp ;
compile-fail _compile-fail-arg_boost_error_info_2.cpp ;
compile-fail _compile-fail-arg_catch_1.cpp ;
compile-fail _compile-fail-arg_catch_2.cpp ;
compile-fail _compile-fail-arg_match_1.cpp ;
compile-fail _compile-fail-arg_match_2.cpp ;
compile-fail _compile-fail-arg_rvalue_ref.cpp ;
compile-fail _compile-fail-BOOST_LEAF_ASSIGN.cpp ;
compile-fail _compile-fail-BOOST_LEAF_AUTO.cpp ;
compile-fail _compile-fail-diagnostic_info.cpp ;
compile-fail _compile-fail-error_info.cpp ;
compile-fail _compile-fail-new_error.cpp ;
compile-fail _compile-fail-result_1.cpp ;
compile-fail _compile-fail-result_2.cpp ;
compile-fail _compile-fail-result_3.cpp ;
compile-fail _compile-fail-result_4.cpp ;
compile-fail _compile-fail-verbose_diagnostic_info.cpp ;

exe capture_in_exception : ../examples/capture_in_exception.cpp : <threading>single:<build>no <exception-handling>off:<build>no ;
exe capture_in_result : ../examples/capture_in_result.cpp : <threading>single:<build>no <exception-handling>off:<build>no ;
exe error_log : ../examples/error_log.cpp : <exception-handling>off:<build>no ;
exe error_trace : ../examples/error_trace.cpp : <exception-handling>off:<build>no ;
exe exception_to_result : ../examples/exception_to_result.cpp : <exception-handling>off:<build>no ;
# exe lua_callback_result : ../examples/lua_callback_result.cpp : <exception-handling>off:<build>no ;
# exe lua_callback_eh : ../examples/lua_callback_eh.cpp : <exception-handling>off:<build>no ;
exe print_file_eh : ../examples/print_file/print_file_eh.cpp : <exception-handling>off:<build>no ;
exe print_file_eh_error_tags : ../examples/print_file/print_file_eh_error_tags.cpp : <exception-handling>off:<build>no ;
# exe print_file_outcome_result : ../examples/print_file/print_file_outcome_result.cpp : <exception-handling>off:<build>no ;
exe print_file_result : ../examples/print_file/print_file_result.cpp : <exception-handling>off:<build>no ;
exe print_file_result_error_tags : ../examples/print_file/print_file_result_error_tags.cpp : <exception-handling>off:<build>no ;
exe print_half : ../examples/print_half.cpp : <exception-handling>off:<build>no ;
