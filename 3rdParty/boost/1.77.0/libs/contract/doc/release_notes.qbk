
[/ Copyright (C) 2008-2018 Lorenzo Caminiti]
[/ Distributed under the Boost Software License, Version 1.0 (see accompanying]
[/ file LICENSE_1_0.txt or a copy at http://www.boost.org/LICENSE_1_0.txt).]
[/ See: http://www.boost.org/doc/libs/release/libs/contract/doc/html/index.html]

[section Release Notes]

This section contains notes on all releases of this library (from the latest to the oldest).

[section Release 1.0.1]

September 12, 2019

Cleanups and small fixes:

# Using `std::uncaught_exceptions` on C++17 compilers onward (instead of the now obsolete `std::uncaught_exception`).
# Fixed a few warnings.
# Removed linking to Boost.System (Boost.System is now a header-only library).
# Added this library to Boost's Continuous Integration (CI).
# Fixed documentation typos.

Released files are part of [@https://www.boost.org/users/history/ Boost 1.72.0].

[endsect]

[section Release 1.0.0]

January 6, 2018 (Il Giorno della Befana)

First Boost release:

# Fixed all tests to pass as Boost regression tests (and marked those that are expected to fail on some specific compiler/platform versions).
# Adjusted build scripts to work within Boost libraries.
# Updated documentation to fit as a Boost library.

Released files are part of [@https://www.boost.org/users/history/ Boost 1.67.0].

[endsect]

[section Release 0.5.0]

September 2, 2017

Contracts without the macros:

# Using plain C++ code instead of macros to program contracts.
    # The removed macros very hard to use because they required programmers to learn a domain-specific embedded language that replaced the usual C++ syntax for declaring functions and classes.
    # The removed macros also made the code less readable, increased compilation time (because of extensive preprocessor meta-programming), and gave cryptic compiler errors.
    # However, the removed macros more correctly specified contracts in code declarations instead of definitions, and they completely removed extra code when contracts were disabled (both of those can be done by the current version of this library but at the cost of manually writing some boiler-plate code which was previous automatically handled by the macros instead, see __Separate_Body_Implementation__ and __Disable_Contract_Compilation__).
# Simplified the library by removing some extra features that were not directly related to contract programming, specifically:
    # Removed loop variants (because these are rarely if ever used).
    # Removed named and deduced parameters (because these can be programmed directly using [@http://www.boost.org/doc/libs/release/libs/parameter/doc/html/index.html Boost.Parameter]).
    # Removed concepts (because these can be programmed directly using [@http://www.boost.org/doc/libs/1_65_0/libs/concept_check/concept_check.htm Boost.ConceptCheck]).
    # Removed emulation of virtual specifiers `override`, `final`, and `new` (because `override` can be programmed directly using C++11, while `final` and `new` are rarely if ever used).
    # Removed `static_assert` emulation (because this can be programmed directly using C++11, or using [@http://www.boost.org/doc/libs/1_65_0/doc/html/boost_staticassert.html Boost.StaticAssert]).
# Ensuring that old values and return values are copied only once even when subcontracting is used with multiple inheritance.
# Improved template meta-programming algorithm that searches the inheritance tree for subcontracting when multiple inheritance is used.
# Exception specifications and function-try blocks apply also to exceptions thrown by the contracts, and not just to exceptions thrown by the body.
# Added contracts for exception guarantees (using `.except(...)`, etc.).
# Added predefined assertion levels for "audit" and "axiom".
# Added `call_if` and `condition_if` (assertions requirements were supported also by previous revisions of this library but they were handled by internal code generated by the contract macros).

Released [@https://github.com/boostorg/contract/releases/tag/v0.5.0 files].

[endsect]

[section Release 0.4.1]

[note
This revision of the library passed Boost formal review and it was accepted into the Boost libraries (see [@https://groups.google.com/forum/?fromgroups=#!topic/boost-list/jQ7OjAmos_Y]).
]

August 20, 2012

Accepted into Boost:

# Using non-fix-spaced font in Full Table of Contents section.
# Added a couple of notes to the documentation.
# Changed `CONTRACT_MEMBER_BODY(class_type, function_name)` to `class_type::CONTRACT_MEMBER_BODY(function_name)` so the macro can also be used to declare derived classes avoiding using the library syntax even when the base class has contracts.

Released [@https://github.com/boostorg/contract/releases/tag/v0.4.1 files].

[endsect]

[section Release 0.4.0]

June 4, 2012

Simplified syntax, added named parameters and concepts:

# Simplified syntax by reducing extra parenthesis to the bare necessary minimum (using some of the preprocessor parsing techniques originally introduced by Boost.LocalFunction).
# Postcondition old values only copy the old-of expression (e.g., copy just vector size instead of entire vector).
This improves performance and introduces the `ConstantCopyConstructible` requirement just for the old value expression type (e.g., a vector might not be copyable while its size always is because it is an integral type).
Removed the `copyable` tag.
# Body defined outside the macros (so compiler-errors for definitions retain their usual meaning).
# Added `CONTRACT_CLASS` macro and removed the need to duplicate declaration elements (do not repeat function declaration, do not repeat class name in function declaration, etc).
# Using `_TPL` macros so to reduce compile-time (instead of internally making all templates contract functions so to use `typename` freely).
# Overloading no longer requires unique parameter names.
# Added C++11-like virtual specifiers.
# Added constant assertions plus constant-expressions for select assertion if-conditions and for loop variants.
# Added named and deduced parameters.
# Added concept checking.
# Removed the interface to use the library without the macro (programmers were required to write too much boiler-plate code for the non-macro interface to be actually usable, plus supporting both the macro and non-macro interfaces limited what the macros could do).

Released [@https://github.com/boostorg/contract/releases/tag/v0.4.0 files].

[endsect]

[section Release 0.3.490]

March 7, 2010

Support for most/all C++ constructs:

# Added support and examples for `volatile`, `auto`, `explicit`, `export`, `extern`, `friend`, `inline`, `struct`, and `throw` (for exception specifications).
# Documented that `union` cannot be contracted.

Released [@https://github.com/boostorg/contract/releases/tag/v0.3.490 files].

[endsect]

[section Release 0.3.469]

February 21, 2010

Support for most/all contract programming features:

# Removed use of `self`, `variable.now`, and `variable.old` in writing contracts.
Object `this` and variables are now accessed as usual in member functions.
`CONTRACT_OLDOF(variable)` is used to access old values in postconditions.
# Added `(precondition)`, `(postcondition)`, and `(body)` to specify contracts within the function signature sequence.
If no preconditions then `(precondition) ({...})` is simply omitted from the sequence (same for postconditions, body is mandatory instead).
For non-void functions, users can name the result argument with `(postcondition) (result-name) ({...})`.
# Changed contract class template to use same syntax as Boost.Function (i.e., `F` function type).
# Added support for free functions and static member functions.
# Added support for subcontracting with multiple inheritance.
# Added static class invariants which are always checked (also at constructors entry, destructor exit, and by static member functions).
# Added block invariants and Eiffel-like loop variants.
# Added handlers to customize action on contract failure (default to `std::terminate()`).
# Removed feature for automatic contract documentation using Doxygen (this is not compatible with added `(precondition)`, `(postcondition)`, and `(body)` because Doxygen preprocessor is not capable to handle Boost.Preprocessor sequences).
# Rewritten entire documentation (now using Boost.QuickBook instead of Doxygen).

Released [@https://github.com/boostorg/contract/releases/tag/v0.3.469 files].

[endsect]

[section Release 0.2.190]

November 21, 2009

Compiled on both GCC and MSVC:

# Compiled using both GCC (Linux and Cygwin) and MSVC (Windows XP).
# Required to use void to specify empty function argument list.
This is to comply with C++03 standard that does not allow to pass empty macro parameters so it does not support empty preprocessor sequences `()`.

Released [@https://github.com/boostorg/contract/releases/tag/v0.2.190 files].

[endsect]

[section Release 0.1.126]

June 17, 2009

Added documentation:

# Completed first documentation draft.

Released [@https://github.com/boostorg/contract/releases/tag/v0.1.126 files].

[endsect]

[section Release 0.1.55]

April 19, 2009

Cleaned-up first release:

# Reorganized files to cleanup root directory.
# Added installation program.

Released [@https://github.com/boostorg/contract/releases/tag/v0.1.55 files].

[endsect]

[section Release 0.1.50]

April 19, 2009

First release:

# First public release.

Released [@https://github.com/boostorg/contract/releases/tag/v0.1.50 files].

[endsect]

[endsect]

