[/============================================================================
  Boost.Geometry (aka GGL, Generic Geometry Library)

  Copyright (c) 2007-2013 Barend Gehrels, Amsterdam, the Netherlands.
  Copyright (c) 2008-2013 Bruno Lalande, Paris, France.
  Copyright (c) 2009-2013 Mateusz Loskot, London, UK.

  Use, modification and distribution is subject to the Boost Software License,
  Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt)
=============================================================================/]


[/ Generated by doxygen_xml2qbk 1.1.1, don't change, will be overwritten automatically]
[/ Generated from doxy/doxygen_output/xml/group__union.xml]
[section:union__4_with_strategy union_ (with strategy)]

'''<indexterm><primary>union_</primary></indexterm>'''
Combines two geometries which each other. 

[heading Description]
The free function union calculates the spatial set theoretic union of two geometries. 

[heading Synopsis]
``template<typename Geometry1, typename Geometry2, typename Collection, typename Strategy>
void union_(Geometry1 const & geometry1, Geometry2 const & geometry2, Collection & output_collection,
            Strategy const & strategy)``

[heading Parameters]

[table
[[Type] [Concept] [Name] [Description] ]
[[Geometry1 const &] [Any type fulfilling a Geometry Concept ] [geometry1] [A model of the specified concept ]]
[[Geometry2 const &] [Any type fulfilling a Geometry Concept ] [geometry2] [A model of the specified concept ]]
[[Collection &] [output collection, either a multi-geometry, or a std::vector<Geometry> / std::deque<Geometry> etc ] [output_collection] [the output collection ]]
[[Strategy const &] [Any type fulfilling a Union_ Strategy Concept ] [strategy] [The strategy which will be used for union_ calculations ]]
]


[heading Header]
Either

`#include <boost/geometry.hpp>`


Or

`#include <boost/geometry/algorithms/union.hpp>`

[include reference/algorithms/union.qbk]


[endsect]

[section:union__3 union_]

'''<indexterm><primary>union_</primary></indexterm>'''
Combines two geometries which each other. 

[heading Description]
The free function union calculates the spatial set theoretic union of two geometries. 

[heading Synopsis]
``template<typename Geometry1, typename Geometry2, typename Collection>
void union_(Geometry1 const & geometry1, Geometry2 const & geometry2, Collection & output_collection)``

[heading Parameters]

[table
[[Type] [Concept] [Name] [Description] ]
[[Geometry1 const &] [Any type fulfilling a Geometry Concept ] [geometry1] [A model of the specified concept ]]
[[Geometry2 const &] [Any type fulfilling a Geometry Concept ] [geometry2] [A model of the specified concept ]]
[[Collection &] [output collection, either a multi-geometry, or a std::vector<Geometry> / std::deque<Geometry> etc ] [output_collection] [the output collection ]]
]


[heading Header]
Either

`#include <boost/geometry.hpp>`


Or

`#include <boost/geometry/algorithms/union.hpp>`

[include reference/algorithms/union.qbk]


[endsect]

