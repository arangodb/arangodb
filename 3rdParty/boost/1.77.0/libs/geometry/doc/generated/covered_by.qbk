[/============================================================================
  Boost.Geometry (aka GGL, Generic Geometry Library)

  Copyright (c) 2007-2013 Barend Gehrels, Amsterdam, the Netherlands.
  Copyright (c) 2008-2013 Bruno Lalande, Paris, France.
  Copyright (c) 2009-2013 Mateusz Loskot, London, UK.

  Use, modification and distribution is subject to the Boost Software License,
  Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt)
=============================================================================/]


[/ Generated by doxygen_xml2qbk 1.1.1, don't change, will be overwritten automatically]
[/ Generated from doxy/doxygen_output/xml/group__covered__by.xml]
[section:covered_by_2 covered_by]

'''<indexterm><primary>covered_by</primary></indexterm>'''
Checks if the first geometry is inside or on border the second geometry. 

[heading Description]
The free function covered\u005fby checks if the first geometry is inside or on border the second geometry. 

[heading Synopsis]
``template<typename Geometry1, typename Geometry2>
bool covered_by(Geometry1 const & geometry1, Geometry2 const & geometry2)``

[heading Parameters]

[table
[[Type] [Concept] [Name] [Description] ]
[[Geometry1 const &] [Any type fulfilling a Geometry Concept ] [geometry1] [A model of the specified concept which might be inside or on the border of the second geometry ]]
[[Geometry2 const &] [Any type fulfilling a Geometry Concept ] [geometry2] [A model of the specified concept which might cover the first geometry ]]
]


[heading Returns]
true if geometry1 is inside of or on the border of geometry2, else false 

[heading Header]
Either

`#include <boost/geometry.hpp>`


Or

`#include <boost/geometry/algorithms/covered_by.hpp>`

[include reference/algorithms/covered_by.qbk]
[heading Examples]
[covered_by]
[covered_by_output]


[endsect]

[section:covered_by_3_with_strategy covered_by (with strategy)]

'''<indexterm><primary>covered_by</primary></indexterm>'''
Checks if the first geometry is inside or on border the second geometry using the specified strategy. 

[heading Description]
The free function covered\u005fby checks if the first geometry is inside or on border the second geometry, using the specified strategy. Reasons to specify a strategy include: use another coordinate system for calculations; construct the strategy beforehand (e.g. with the radius of the Earth); select a strategy when there are more than one available for a calculation. 

[heading Synopsis]
``template<typename Geometry1, typename Geometry2, typename Strategy>
bool covered_by(Geometry1 const & geometry1, Geometry2 const & geometry2, Strategy const & strategy)``

[heading Parameters]

[table
[[Type] [Concept] [Name] [Description] ]
[[Geometry1 const &] [Any type fulfilling a Geometry Concept ] [geometry1] [A model of the specified concept which might be inside or on the border of the second geometry ]]
[[Geometry2 const &] [Any type fulfilling a Geometry Concept ] [geometry2] [A model of the specified concept which might cover the first geometry ]]
[[Strategy const &] [] [strategy] [strategy to be used ]]
]


[heading Returns]
true if geometry1 is inside of or on the border of geometry2, else false

[heading Header]
Either

`#include <boost/geometry.hpp>`


Or

`#include <boost/geometry/algorithms/covered_by.hpp>`

[include reference/algorithms/covered_by.qbk]


[endsect]

