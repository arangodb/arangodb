[/============================================================================
  Boost.Geometry (aka GGL, Generic Geometry Library)

  Copyright (c) 2007-2013 Barend Gehrels, Amsterdam, the Netherlands.
  Copyright (c) 2008-2013 Bruno Lalande, Paris, France.
  Copyright (c) 2009-2013 Mateusz Loskot, London, UK.

  Use, modification and distribution is subject to the Boost Software License,
  Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt)
=============================================================================/]


[/ Generated by doxygen_xml2qbk 1.1.1, don't change, will be overwritten automatically]
[/ Generated from doxy/doxygen_output/xml/structboost_1_1geometry_1_1closing__iterator.xml]
[section:closing_iterator closing_iterator]

'''<indexterm><primary>closing_iterator</primary></indexterm>'''
Iterator which iterates through a range, but adds first element at end of the range. 

[heading Synopsis]
``template<typename Range>
struct closing_iterator
      : public boost::iterator_facade< closing_iterator< Range >, boost::range_value< Range >::type const, boost::random_access_traversal_tag, boost::range_reference< Range const >::type, boost::range_difference< Range >::type >
{
  // ...
};
``

[heading Template parameter(s)]
[table
[[Parameter] [Description]]
[[typename Range] [range on which this class is based on]]
]

[heading Constructor(s)]
[table
[[Function] [Description] [Parameters] ]
[[``closing_iterator(Range const & range)``

] [Constructor including the range it is based on. ] [[* Range const &]: ['range]:  



]]
[[``closing_iterator(Range const & range, bool )``

] [Constructor to indicate the end of a range. ] [[* Range const &]: ['range]:  

[* bool]: [']:  



]]
[[``closing_iterator()``

] [Default constructor. ] [

]]
[[``template<typename OtherRange, std::enable_if_t< std::is_convertible< typename boost::range_iterator< OtherRange const >::type, typename boost::range_iterator< Range const >::type >::value, int >>
closing_iterator(closing_iterator< OtherRange > const & other)``

] [] [[* closing_iterator< OtherRange > const &]: ['other]:  



]]
]

[heading Header]
`#include <boost/geometry/iterators/closing_iterator.hpp>`

[endsect]

