[/============================================================================
  Boost.Geometry (aka GGL, Generic Geometry Library)

  Copyright (c) 2007-2013 Barend Gehrels, Amsterdam, the Netherlands.
  Copyright (c) 2008-2013 Bruno Lalande, Paris, France.
  Copyright (c) 2009-2013 Mateusz Loskot, London, UK.

  Use, modification and distribution is subject to the Boost Software License,
  Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt)
=============================================================================/]


[/ Generated by doxygen_xml2qbk 1.1.1, don't change, will be overwritten automatically]
[/ Generated from doxy/doxygen_output/xml/classboost_1_1geometry_1_1strategy_1_1area_1_1geographic.xml]
[section:strategy_area_geographic strategy::area::geographic]

'''<indexterm><primary>strategy</primary></indexterm><indexterm><primary>area</primary></indexterm><indexterm><primary>geographic</primary></indexterm>'''
Geographic area calculation. 

[heading Description]
Geographic area calculation by trapezoidal rule plus integral approximation that gives the ellipsoidal correction 

[heading Synopsis]
``template<typename FormulaPolicy, std::size_t SeriesOrder, typename Spheroid, typename CalculationType>
class strategy::area::geographic
{
  // ...
};
``

[heading Template parameter(s)]
[table
[[Parameter] [Default] [Description]]
[[typename FormulaPolicy] [strategy::andoyer] [Formula used to calculate azimuths ]]
[[std::size_t SeriesOrder] [strategy::default_order<FormulaPolicy>::value] [The order of approximation of the geodesic integral ]]
[[typename Spheroid] [srs::spheroid<double>] [The spheroid model ]]
[[typename CalculationType] [void] [numeric type for calculation (e.g. high precision); if [*void] then it is extracted automatically from the coordinate type and (if necessary) promoted to floating point ]]
]

[heading Constructor(s)]
[table
[[Function] [Description] [Parameters] ]
[[``geographic(Spheroid const & spheroid = Spheroid())``

] [] [[* Spheroid const &]: ['spheroid]:  



]]
]

[heading Member Function(s)]
[table
[[Function] [Description] [Parameters]  [Returns]]
[[``template<typename PointOfSegment, typename Geometry>
void apply(PointOfSegment const & p1, PointOfSegment const & p2, state< Geometry > & st)``

] [] [[* PointOfSegment const &]: ['p1]:  

[* PointOfSegment const &]: ['p2]:  

[* state< Geometry > &]: ['st]:  



][

]
]
[[``template<typename Geometry>
result_type< Geometry >::type result(state< Geometry > const & st)``

] [] [[* state< Geometry > const &]: ['st]:  



][

]
]
]

[heading Header]
`#include <boost/geometry/strategies/geographic/area.hpp>`

[heading See also]
* [link geometry.reference.algorithms.area.area_2_with_strategy area (with strategy)]
* [link geometry.reference.srs.srs_spheroid srs::spheroid]

[endsect]

