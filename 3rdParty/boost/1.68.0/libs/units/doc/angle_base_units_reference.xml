<?xml version="1.0" standalone="yes"?>
<library-reference id="angle_base_units_reference"><title>Angle Base Units Reference</title><header name="boost/units/base_units/angle/arcminute.hpp">
<namespace name="boost">
<namespace name="units">
<struct-specialization name="base_unit_info"><template>
    </template><specialization><template-arg>angle::arcminute_base_unit</template-arg></specialization><method-group name="public static functions">
<method name="name" specifiers="static"><type>BOOST_CONSTEXPR const char *</type></method>
<method name="symbol" specifiers="static"><type>BOOST_CONSTEXPR const char *</type></method>
</method-group>
</struct-specialization><namespace name="angle">
<typedef name="arcminute_base_unit"><type>scaled_base_unit&lt; <classname>degree_base_unit</classname>, scale&lt; 60, static_rational&lt;-1 &gt; &gt; &gt;</type></typedef>
</namespace>
</namespace>
</namespace>
</header>
<header name="boost/units/base_units/angle/arcsecond.hpp">
<namespace name="boost">
<namespace name="units">
<struct-specialization name="base_unit_info"><template>
    </template><specialization><template-arg>angle::arcsecond_base_unit</template-arg></specialization><method-group name="public static functions">
<method name="name" specifiers="static"><type>BOOST_CONSTEXPR const char *</type></method>
<method name="symbol" specifiers="static"><type>BOOST_CONSTEXPR const char *</type></method>
</method-group>
</struct-specialization><namespace name="angle">
<typedef name="arcsecond_base_unit"><type>scaled_base_unit&lt; <classname>degree_base_unit</classname>, scale&lt; 3600, static_rational&lt;-1 &gt; &gt; &gt;</type></typedef>
</namespace>
</namespace>
</namespace>
</header>
<header name="boost/units/base_units/angle/degree.hpp">
<namespace name="boost">
<namespace name="units">
<namespace name="angle">
<struct name="degree_base_unit"><inherit access="public">boost::units::base_unit&lt; degree_base_unit, boost::units::angle::radian_base_unit::dimension_type,-101 &gt;</inherit><method-group name="public static functions">
<method name="name" specifiers="static"><type>const char *</type></method>
<method name="symbol" specifiers="static"><type>const char *</type></method>
</method-group>
</struct></namespace>
</namespace>
</namespace>
</header>
<header name="boost/units/base_units/angle/gradian.hpp">
<namespace name="boost">
<namespace name="units">
<namespace name="angle">
<struct name="gradian_base_unit"><inherit access="public">boost::units::base_unit&lt; gradian_base_unit, boost::units::angle::radian_base_unit::dimension_type,-102 &gt;</inherit><method-group name="public static functions">
<method name="name" specifiers="static"><type>const char *</type></method>
<method name="symbol" specifiers="static"><type>const char *</type></method>
</method-group>
</struct></namespace>
</namespace>
</namespace>
</header>
<header name="boost/units/base_units/angle/radian.hpp">
<namespace name="boost">
<namespace name="units">
<namespace name="angle">
<struct name="radian_base_unit"><inherit access="public">base_unit&lt; radian_base_unit, plane_angle_dimension,-2 &gt;</inherit><method-group name="public static functions">
<method name="name" specifiers="static"><type>std::string</type></method>
<method name="symbol" specifiers="static"><type>std::string</type></method>
</method-group>
</struct></namespace>
</namespace>
</namespace>
</header>
<header name="boost/units/base_units/angle/revolution.hpp">
<namespace name="boost">
<namespace name="units">
<struct-specialization name="base_unit_info"><template>
    </template><specialization><template-arg>angle::revolution_base_unit</template-arg></specialization><method-group name="public static functions">
<method name="name" specifiers="static"><type>BOOST_CONSTEXPR const char *</type></method>
<method name="symbol" specifiers="static"><type>BOOST_CONSTEXPR const char *</type></method>
</method-group>
</struct-specialization><namespace name="angle">
<typedef name="revolution_base_unit"><type>scaled_base_unit&lt; <classname>degree_base_unit</classname>, scale&lt; 360, static_rational&lt; 1 &gt; &gt; &gt;</type></typedef>
</namespace>
</namespace>
</namespace>
</header>
<header name="boost/units/base_units/angle/steradian.hpp">
<namespace name="boost">
<namespace name="units">
<namespace name="angle">
<struct name="steradian_base_unit"><inherit access="public">base_unit&lt; steradian_base_unit, solid_angle_dimension,-1 &gt;</inherit><method-group name="public static functions">
<method name="name" specifiers="static"><type>std::string</type></method>
<method name="symbol" specifiers="static"><type>std::string</type></method>
</method-group>
</struct></namespace>
</namespace>
</namespace>
</header>
</library-reference>