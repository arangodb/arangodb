<?xml version="1.0" standalone="yes"?>
<library-reference id="imperial_base_units_reference"><title>Imperial Base Units Reference</title><header name="boost/units/base_units/imperial/drachm.hpp">
<namespace name="boost">
<namespace name="units">
<struct-specialization name="base_unit_info"><template>
    </template><specialization><template-arg>imperial::drachm_base_unit</template-arg></specialization><method-group name="public static functions">
<method name="name" specifiers="static"><type>BOOST_CONSTEXPR const char *</type></method>
<method name="symbol" specifiers="static"><type>BOOST_CONSTEXPR const char *</type></method>
</method-group>
</struct-specialization><namespace name="imperial">
<typedef name="drachm_base_unit"><type>scaled_base_unit&lt; <classname>pound_base_unit</classname>, scale&lt; 16, static_rational&lt;-2 &gt; &gt; &gt;</type></typedef>
</namespace>
</namespace>
</namespace>
</header>
<header name="boost/units/base_units/imperial/fluid_ounce.hpp">
<namespace name="boost">
<namespace name="units">
<struct-specialization name="base_unit_info"><template>
    </template><specialization><template-arg>imperial::fluid_ounce_base_unit</template-arg></specialization><method-group name="public static functions">
<method name="name" specifiers="static"><type>BOOST_CONSTEXPR const char *</type></method>
<method name="symbol" specifiers="static"><type>BOOST_CONSTEXPR const char *</type></method>
</method-group>
</struct-specialization><namespace name="imperial">
<typedef name="fluid_ounce_base_unit"><type>scaled_base_unit&lt; <classname>pint_base_unit</classname>, scale&lt; 20, static_rational&lt;-1 &gt; &gt; &gt;</type></typedef>
</namespace>
</namespace>
</namespace>
</header>
<header name="boost/units/base_units/imperial/foot.hpp">
<namespace name="boost">
<namespace name="units">
<struct-specialization name="base_unit_info"><template>
    </template><specialization><template-arg>imperial::foot_base_unit</template-arg></specialization><method-group name="public static functions">
<method name="name" specifiers="static"><type>BOOST_CONSTEXPR const char *</type></method>
<method name="symbol" specifiers="static"><type>BOOST_CONSTEXPR const char *</type></method>
</method-group>
</struct-specialization><namespace name="imperial">
<typedef name="foot_base_unit"><type>scaled_base_unit&lt; <classname>yard_base_unit</classname>, scale&lt; 3, static_rational&lt;-1 &gt; &gt; &gt;</type></typedef>
</namespace>
</namespace>
</namespace>
</header>
<header name="boost/units/base_units/imperial/furlong.hpp">
<namespace name="boost">
<namespace name="units">
<struct-specialization name="base_unit_info"><template>
    </template><specialization><template-arg>imperial::furlong_base_unit</template-arg></specialization><method-group name="public static functions">
<method name="name" specifiers="static"><type>BOOST_CONSTEXPR const char *</type></method>
<method name="symbol" specifiers="static"><type>BOOST_CONSTEXPR const char *</type></method>
</method-group>
</struct-specialization><namespace name="imperial">
<typedef name="furlong_base_unit"><type>scaled_base_unit&lt; <classname>yard_base_unit</classname>, scale&lt; 220, static_rational&lt; 1 &gt; &gt; &gt;</type></typedef>
</namespace>
</namespace>
</namespace>
</header>
<header name="boost/units/base_units/imperial/gallon.hpp">
<namespace name="boost">
<namespace name="units">
<struct-specialization name="base_unit_info"><template>
    </template><specialization><template-arg>imperial::gallon_base_unit</template-arg></specialization><method-group name="public static functions">
<method name="name" specifiers="static"><type>BOOST_CONSTEXPR const char *</type></method>
<method name="symbol" specifiers="static"><type>BOOST_CONSTEXPR const char *</type></method>
</method-group>
</struct-specialization><namespace name="imperial">
<typedef name="gallon_base_unit"><type>scaled_base_unit&lt; <classname>pint_base_unit</classname>, scale&lt; 8, static_rational&lt; 1 &gt; &gt; &gt;</type></typedef>
</namespace>
</namespace>
</namespace>
</header>
<header name="boost/units/base_units/imperial/gill.hpp">
<namespace name="boost">
<namespace name="units">
<struct-specialization name="base_unit_info"><template>
    </template><specialization><template-arg>imperial::gill_base_unit</template-arg></specialization><method-group name="public static functions">
<method name="name" specifiers="static"><type>BOOST_CONSTEXPR const char *</type></method>
<method name="symbol" specifiers="static"><type>BOOST_CONSTEXPR const char *</type></method>
</method-group>
</struct-specialization><namespace name="imperial">
<typedef name="gill_base_unit"><type>scaled_base_unit&lt; <classname>pint_base_unit</classname>, scale&lt; 4, static_rational&lt;-1 &gt; &gt; &gt;</type></typedef>
</namespace>
</namespace>
</namespace>
</header>
<header name="boost/units/base_units/imperial/grain.hpp">
<namespace name="boost">
<namespace name="units">
<struct-specialization name="base_unit_info"><template>
    </template><specialization><template-arg>imperial::grain_base_unit</template-arg></specialization><method-group name="public static functions">
<method name="name" specifiers="static"><type>BOOST_CONSTEXPR const char *</type></method>
<method name="symbol" specifiers="static"><type>BOOST_CONSTEXPR const char *</type></method>
</method-group>
</struct-specialization><namespace name="imperial">
<typedef name="grain_base_unit"><type>scaled_base_unit&lt; <classname>pound_base_unit</classname>, scale&lt; 7000, static_rational&lt;-1 &gt; &gt; &gt;</type></typedef>
</namespace>
</namespace>
</namespace>
</header>
<header name="boost/units/base_units/imperial/hundredweight.hpp">
<namespace name="boost">
<namespace name="units">
<struct-specialization name="base_unit_info"><template>
    </template><specialization><template-arg>imperial::hundredweight_base_unit</template-arg></specialization><method-group name="public static functions">
<method name="name" specifiers="static"><type>BOOST_CONSTEXPR const char *</type></method>
<method name="symbol" specifiers="static"><type>BOOST_CONSTEXPR const char *</type></method>
</method-group>
</struct-specialization><namespace name="imperial">
<typedef name="hundredweight_base_unit"><type>scaled_base_unit&lt; <classname>pound_base_unit</classname>, scale&lt; 112, static_rational&lt; 1 &gt; &gt; &gt;</type></typedef>
</namespace>
</namespace>
</namespace>
</header>
<header name="boost/units/base_units/imperial/inch.hpp">
<namespace name="boost">
<namespace name="units">
<struct-specialization name="base_unit_info"><template>
    </template><specialization><template-arg>imperial::inch_base_unit</template-arg></specialization><method-group name="public static functions">
<method name="name" specifiers="static"><type>BOOST_CONSTEXPR const char *</type></method>
<method name="symbol" specifiers="static"><type>BOOST_CONSTEXPR const char *</type></method>
</method-group>
</struct-specialization><namespace name="imperial">
<typedef name="inch_base_unit"><type>scaled_base_unit&lt; <classname>yard_base_unit</classname>, scale&lt; 36, static_rational&lt;-1 &gt; &gt; &gt;</type></typedef>
</namespace>
</namespace>
</namespace>
</header>
<header name="boost/units/base_units/imperial/league.hpp">
<namespace name="boost">
<namespace name="units">
<struct-specialization name="base_unit_info"><template>
    </template><specialization><template-arg>imperial::league_base_unit</template-arg></specialization><method-group name="public static functions">
<method name="name" specifiers="static"><type>BOOST_CONSTEXPR const char *</type></method>
<method name="symbol" specifiers="static"><type>BOOST_CONSTEXPR const char *</type></method>
</method-group>
</struct-specialization><namespace name="imperial">
<typedef name="league_base_unit"><type>scaled_base_unit&lt; <classname>yard_base_unit</classname>, scale&lt; 5280, static_rational&lt; 1 &gt; &gt; &gt;</type></typedef>
</namespace>
</namespace>
</namespace>
</header>
<header name="boost/units/base_units/imperial/mile.hpp">
<namespace name="boost">
<namespace name="units">
<struct-specialization name="base_unit_info"><template>
    </template><specialization><template-arg>imperial::mile_base_unit</template-arg></specialization><method-group name="public static functions">
<method name="name" specifiers="static"><type>BOOST_CONSTEXPR const char *</type></method>
<method name="symbol" specifiers="static"><type>BOOST_CONSTEXPR const char *</type></method>
</method-group>
</struct-specialization><namespace name="imperial">
<typedef name="mile_base_unit"><type>scaled_base_unit&lt; <classname>yard_base_unit</classname>, scale&lt; 1760, static_rational&lt; 1 &gt; &gt; &gt;</type></typedef>
</namespace>
</namespace>
</namespace>
</header>
<header name="boost/units/base_units/imperial/ounce.hpp">
<namespace name="boost">
<namespace name="units">
<struct-specialization name="base_unit_info"><template>
    </template><specialization><template-arg>imperial::ounce_base_unit</template-arg></specialization><method-group name="public static functions">
<method name="name" specifiers="static"><type>BOOST_CONSTEXPR const char *</type></method>
<method name="symbol" specifiers="static"><type>BOOST_CONSTEXPR const char *</type></method>
</method-group>
</struct-specialization><namespace name="imperial">
<typedef name="ounce_base_unit"><type>scaled_base_unit&lt; <classname>pound_base_unit</classname>, scale&lt; 2, static_rational&lt;-4 &gt; &gt; &gt;</type></typedef>
</namespace>
</namespace>
</namespace>
</header>
<header name="boost/units/base_units/imperial/pint.hpp">
<namespace name="boost">
<namespace name="units">
<namespace name="imperial">
<struct name="pint_base_unit"><inherit access="public">boost::units::base_unit&lt; pint_base_unit, si::volume::dimension_type,-303 &gt;</inherit><method-group name="public static functions">
<method name="name" specifiers="static"><type>const char *</type></method>
<method name="symbol" specifiers="static"><type>const char *</type></method>
</method-group>
</struct></namespace>
</namespace>
</namespace>
</header>
<header name="boost/units/base_units/imperial/pound.hpp">
<namespace name="boost">
<namespace name="units">
<namespace name="imperial">
<struct name="pound_base_unit"><inherit access="public">boost::units::base_unit&lt; pound_base_unit, cgs::gram_base_unit::dimension_type,-302 &gt;</inherit><method-group name="public static functions">
<method name="name" specifiers="static"><type>const char *</type></method>
<method name="symbol" specifiers="static"><type>const char *</type></method>
</method-group>
</struct></namespace>
</namespace>
</namespace>
</header>
<header name="boost/units/base_units/imperial/quart.hpp">
<namespace name="boost">
<namespace name="units">
<struct-specialization name="base_unit_info"><template>
    </template><specialization><template-arg>imperial::quart_base_unit</template-arg></specialization><method-group name="public static functions">
<method name="name" specifiers="static"><type>BOOST_CONSTEXPR const char *</type></method>
<method name="symbol" specifiers="static"><type>BOOST_CONSTEXPR const char *</type></method>
</method-group>
</struct-specialization><namespace name="imperial">
<typedef name="quart_base_unit"><type>scaled_base_unit&lt; <classname>pint_base_unit</classname>, scale&lt; 2, static_rational&lt; 1 &gt; &gt; &gt;</type></typedef>
</namespace>
</namespace>
</namespace>
</header>
<header name="boost/units/base_units/imperial/quarter.hpp">
<namespace name="boost">
<namespace name="units">
<struct-specialization name="base_unit_info"><template>
    </template><specialization><template-arg>imperial::quarter_base_unit</template-arg></specialization><method-group name="public static functions">
<method name="name" specifiers="static"><type>BOOST_CONSTEXPR const char *</type></method>
<method name="symbol" specifiers="static"><type>BOOST_CONSTEXPR const char *</type></method>
</method-group>
</struct-specialization><namespace name="imperial">
<typedef name="quarter_base_unit"><type>scaled_base_unit&lt; <classname>pound_base_unit</classname>, scale&lt; 28, static_rational&lt; 1 &gt; &gt; &gt;</type></typedef>
</namespace>
</namespace>
</namespace>
</header>
<header name="boost/units/base_units/imperial/stone.hpp">
<namespace name="boost">
<namespace name="units">
<struct-specialization name="base_unit_info"><template>
    </template><specialization><template-arg>imperial::stone_base_unit</template-arg></specialization><method-group name="public static functions">
<method name="name" specifiers="static"><type>BOOST_CONSTEXPR const char *</type></method>
<method name="symbol" specifiers="static"><type>BOOST_CONSTEXPR const char *</type></method>
</method-group>
</struct-specialization><namespace name="imperial">
<typedef name="stone_base_unit"><type>scaled_base_unit&lt; <classname>pound_base_unit</classname>, scale&lt; 14, static_rational&lt; 1 &gt; &gt; &gt;</type></typedef>
</namespace>
</namespace>
</namespace>
</header>
<header name="boost/units/base_units/imperial/thou.hpp">
<namespace name="boost">
<namespace name="units">
<struct-specialization name="base_unit_info"><template>
    </template><specialization><template-arg>imperial::thou_base_unit</template-arg></specialization><method-group name="public static functions">
<method name="name" specifiers="static"><type>BOOST_CONSTEXPR const char *</type></method>
<method name="symbol" specifiers="static"><type>BOOST_CONSTEXPR const char *</type></method>
</method-group>
</struct-specialization><namespace name="imperial">
<typedef name="thou_base_unit"><type>scaled_base_unit&lt; <classname>yard_base_unit</classname>, scale&lt; 36000, static_rational&lt;-1 &gt; &gt; &gt;</type></typedef>
</namespace>
</namespace>
</namespace>
</header>
<header name="boost/units/base_units/imperial/ton.hpp">
<namespace name="boost">
<namespace name="units">
<struct-specialization name="base_unit_info"><template>
    </template><specialization><template-arg>imperial::ton_base_unit</template-arg></specialization><method-group name="public static functions">
<method name="name" specifiers="static"><type>BOOST_CONSTEXPR const char *</type></method>
<method name="symbol" specifiers="static"><type>BOOST_CONSTEXPR const char *</type></method>
</method-group>
</struct-specialization><namespace name="imperial">
<typedef name="ton_base_unit"><type>scaled_base_unit&lt; <classname>pound_base_unit</classname>, scale&lt; 2240, static_rational&lt; 1 &gt; &gt; &gt;</type></typedef>
</namespace>
</namespace>
</namespace>
</header>
<header name="boost/units/base_units/imperial/yard.hpp">
<namespace name="boost">
<namespace name="units">
<namespace name="imperial">
<struct name="yard_base_unit"><inherit access="public">boost::units::base_unit&lt; yard_base_unit, si::meter_base_unit::dimension_type,-301 &gt;</inherit><method-group name="public static functions">
<method name="name" specifiers="static"><type>const char *</type></method>
<method name="symbol" specifiers="static"><type>const char *</type></method>
</method-group>
</struct></namespace>
</namespace>
</namespace>
</header>
</library-reference>