# Boost Filesystem Library test Jamfile

# (C) Copyright Beman Dawes 2002-2006
# Distributed under the Boost Software License, Version 1.0.
# See www.boost.org/LICENSE_1_0.txt

import testing ;

project 
    : requirements
      <library>/boost/filesystem//boost_filesystem
      <library>/boost/system//boost_system
      <toolset>msvc:<asynch-exceptions>on
    ;
    
# Some tests are run both statically and as shared libraries since Filesystem
# has a history of bugs that appear only in one type of build or the other.

path-constant HERE : . ;

   test-suite "filesystem" :
       [ run config_info.cpp :  :  : <link>shared <test-info>always_show_run_output ]
       [ run config_info.cpp :  :  : <link>static <test-info>always_show_run_output : config_info_static ]
       [ run convenience_test.cpp ]
       [ compile macro_default_test.cpp ]
       [ run odr1_test.cpp odr2_test.cpp ]
       [ run deprecated_test.cpp ]                  
       [ run fstream_test.cpp ]
       [ run large_file_support_test.cpp ]
       [ run locale_info.cpp  : : : <test-info>always_show_run_output ]
       [ run operations_test.cpp :  :  : <link>shared <test-info>always_show_run_output ]
       [ run operations_test.cpp :  :  : <link>static : operations_test_static ]
       [ run operations_unit_test.cpp : $(HERE) :  : <link>shared <test-info>always_show_run_output ]
       [ run path_test.cpp :  :  : <link>shared ]                  
       [ run path_test.cpp :  :  : <link>static : path_test_static ]                  
       [ run path_unit_test.cpp :  :  : <link>shared ]                  
       [ run path_unit_test.cpp :  :  : <link>static : path_unit_test_static ]
       [ run relative_test.cpp ]       
       [ run ../example/simple_ls.cpp ]
       [ run ../example/file_status.cpp ]

       # `quick` target (for CI)
       [ run quick.cpp ]
       ;
