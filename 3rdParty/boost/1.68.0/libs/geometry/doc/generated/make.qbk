[/============================================================================
  Boost.Geometry (aka GGL, Generic Geometry Library)

  Copyright (c) 2007-2013 Barend Gehrels, Amsterdam, the Netherlands.
  Copyright (c) 2008-2013 Bruno Lalande, Paris, France.
  Copyright (c) 2009-2013 Mateusz Loskot, London, UK.

  Use, modification and distribution is subject to the Boost Software License,
  Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt)
=============================================================================/]


[/ Generated by doxygen_xml2qbk 1.1.1, don't change, will be overwritten automatically]
[/ Generated from doxy/doxygen_output/xml/group__make.xml]
[section:make_2_2_coordinate_values make (2 coordinate values)]

'''<indexterm><primary>make</primary></indexterm>'''
Construct a geometry. 

[heading Synopsis]
``template<typename Geometry, typename Type>
Geometry make(Type const & c1, Type const & c2)``

[heading Parameters]

[table
[[Type] [Concept] [Name] [Description] ]
[[Geometry] [Any type fulfilling a Geometry Concept ] [ - ] [Must be specified]]
[[Type const &] [numerical type (int, double, ttmath, ...) to specify the coordinates ] [c1] [First coordinate (usually x-coordinate) ]]
[[Type const &] [numerical type (int, double, ttmath, ...) to specify the coordinates ] [c2] [Second coordinate (usually y-coordinate) ]]
]


[heading Returns]
The constructed geometry, here: a 2D point

[heading Header]
Either

`#include <boost/geometry.hpp>`


Or

`#include <boost/geometry/algorithms/make.hpp>`

[heading Example]
[make_2d_point] [make_2d_point_output]

[heading See also]
* [link geometry.reference.algorithms.assign.assign_values_3_2_coordinate_values assign]


[endsect]

[section:make_3_3_coordinate_values make (3 coordinate values)]

'''<indexterm><primary>make</primary></indexterm>'''
Construct a geometry. 

[heading Synopsis]
``template<typename Geometry, typename Type>
Geometry make(Type const & c1, Type const & c2, Type const & c3)``

[heading Parameters]

[table
[[Type] [Concept] [Name] [Description] ]
[[Geometry] [Any type fulfilling a Geometry Concept ] [ - ] [Must be specified]]
[[Type const &] [numerical type (int, double, ttmath, ...) to specify the coordinates ] [c1] [First coordinate (usually x-coordinate) ]]
[[Type const &] [numerical type (int, double, ttmath, ...) to specify the coordinates ] [c2] [Second coordinate (usually y-coordinate) ]]
[[Type const &] [numerical type (int, double, ttmath, ...) to specify the coordinates ] [c3] [Third coordinate (usually z-coordinate) ]]
]


[heading Returns]
The constructed geometry, here: a 3D point

[heading Header]
Either

`#include <boost/geometry.hpp>`


Or

`#include <boost/geometry/algorithms/make.hpp>`

[heading Example]
[make_3d_point] [make_3d_point_output]

[heading See also]
* [link geometry.reference.algorithms.assign.assign_values_4_3_coordinate_values assign]


[endsect]

[section:make_inverse make_inverse]

'''<indexterm><primary>make_inverse</primary></indexterm>'''
Construct a box with inverse infinite coordinates. 

[heading Description]
The make\u005finverse function initializes a 2D or 3D box with large coordinates, the min corner is very large, the max corner is very small. This is useful e.g. in combination with the expand function, to determine the bounding box of a series of geometries. 

[heading Synopsis]
``template<typename Geometry>
Geometry make_inverse()``

[heading Parameters]

[table
[[Type] [Concept] [Name] [Description] ]
[[Geometry] [Any type fulfilling a Geometry Concept ] [ - ] [Must be specified]]
]


[heading Returns]
The constructed geometry, here: a box

[heading Header]
Either

`#include <boost/geometry.hpp>`


Or

`#include <boost/geometry/algorithms/make.hpp>`

[heading Example]
[make_inverse] [make_inverse_output]

[heading See also]
* [link geometry.reference.algorithms.assign.assign_inverse assign_inverse]


[endsect]

[section:make_zero make_zero]

'''<indexterm><primary>make_zero</primary></indexterm>'''
Construct a geometry with its coordinates initialized to zero. 

[heading Description]
The make\u005fzero function initializes a 2D or 3D point or box with coordinates of zero 

[heading Synopsis]
``template<typename Geometry>
Geometry make_zero()``

[heading Parameters]

[table
[[Type] [Concept] [Name] [Description] ]
[[Geometry] [Any type fulfilling a Geometry Concept ] [ - ] [Must be specified]]
]


[heading Returns]
The constructed and zero-initialized geometry 

[heading Header]
Either

`#include <boost/geometry.hpp>`


Or

`#include <boost/geometry/algorithms/make.hpp>`


[endsect]

