<?xml version="1.0" standalone="yes"?>
<library-reference id="posix_time_reference"><title>Posix Time Reference</title><header name="boost/date_time/posix_time/conversion.hpp">
<namespace name="boost">
<namespace name="posix_time">










































<function name="from_time_t"><type><classname>ptime</classname></type><parameter name="t"><paramtype>std::time_t</paramtype></parameter><purpose>Function that converts a time_t into a ptime. </purpose></function>
<function name="to_time_t"><type>std::time_t</type><parameter name="pt"><paramtype><classname>ptime</classname></paramtype></parameter><purpose>Function that converts a ptime into a time_t. </purpose></function>
<function name="to_tm"><type>std::tm</type><parameter name="t"><paramtype>const <classname>boost::posix_time::ptime</classname> &amp;</paramtype></parameter><purpose>Convert a time to a tm structure truncating any fractional seconds. </purpose></function>
<function name="to_tm"><type>std::tm</type><parameter name="td"><paramtype>const <classname>boost::posix_time::time_duration</classname> &amp;</paramtype></parameter><purpose>Convert a <classname alt="boost::posix_time::time_duration">time_duration</classname> to a tm structure truncating any fractional seconds and zeroing fields for date components. </purpose></function>
<function name="ptime_from_tm"><type><classname>ptime</classname></type><parameter name="timetm"><paramtype>const std::tm &amp;</paramtype></parameter><purpose>Convert a tm struct to a ptime ignoring is_dst flag. </purpose></function>
<function name="from_ftime"><type>TimeT</type><template>
          <template-type-parameter name="TimeT"/>
          <template-type-parameter name="FileTimeT"/>
        </template><parameter name="ft"><paramtype>const FileTimeT &amp;</paramtype></parameter><purpose>Function to create a time object from an initialized FILETIME struct. </purpose><description><para>Function to create a time object from an initialized FILETIME struct. A FILETIME struct holds 100-nanosecond units (0.0000001). When built with microsecond resolution the FILETIME's sub second value will be truncated. Nanosecond resolution has no truncation.</para><para><note><para>FILETIME is part of the Win32 API, so it is not portable to non-windows platforms.</para><para>The function is templated on the FILETIME type, so that it can be used with both native FILETIME and the ad-hoc boost::detail::winapi::FILETIME_ type. </para></note>
</para></description></function>
</namespace>
</namespace>
</header>
<header name="boost/date_time/posix_time/date_duration_operators.hpp">
<para>Operators for ptime and optional gregorian types. Operators use snap-to-end-of-month behavior. Further details on this behavior can be found in reference for date_time/date_duration_types.hpp and documentation for month and year iterators. </para><namespace name="boost">
<namespace name="posix_time">


































<function name="operator+"><type><classname>ptime</classname></type><parameter name="t"><paramtype>const <classname>ptime</classname> &amp;</paramtype></parameter><parameter name="m"><paramtype>const boost::gregorian::months &amp;</paramtype></parameter><description><para>Adds a months object and a ptime. Result will be same day-of-month as ptime unless original day was the last day of month. see date_time::months_duration for more details </para></description></function>
<function name="operator+="><type><classname>ptime</classname></type><parameter name="t"><paramtype><classname>ptime</classname> &amp;</paramtype></parameter><parameter name="m"><paramtype>const boost::gregorian::months &amp;</paramtype></parameter><description><para>Adds a months object to a ptime. Result will be same day-of-month as ptime unless original day was the last day of month. see date_time::months_duration for more details </para></description></function>
<function name="operator-"><type><classname>ptime</classname></type><parameter name="t"><paramtype>const <classname>ptime</classname> &amp;</paramtype></parameter><parameter name="m"><paramtype>const boost::gregorian::months &amp;</paramtype></parameter><description><para>Subtracts a months object and a ptime. Result will be same day-of-month as ptime unless original day was the last day of month. see date_time::months_duration for more details </para></description></function>
<function name="operator-="><type><classname>ptime</classname></type><parameter name="t"><paramtype><classname>ptime</classname> &amp;</paramtype></parameter><parameter name="m"><paramtype>const boost::gregorian::months &amp;</paramtype></parameter><description><para>Subtracts a months object from a ptime. Result will be same day-of-month as ptime unless original day was the last day of month. see date_time::months_duration for more details </para></description></function>
<function name="operator+"><type><classname>ptime</classname></type><parameter name="t"><paramtype>const <classname>ptime</classname> &amp;</paramtype></parameter><parameter name="y"><paramtype>const boost::gregorian::years &amp;</paramtype></parameter><description><para>Adds a years object and a ptime. Result will be same month and day-of-month as ptime unless original day was the last day of month. see date_time::years_duration for more details </para></description></function>
<function name="operator+="><type><classname>ptime</classname></type><parameter name="t"><paramtype><classname>ptime</classname> &amp;</paramtype></parameter><parameter name="y"><paramtype>const boost::gregorian::years &amp;</paramtype></parameter><description><para>Adds a years object to a ptime. Result will be same month and day-of-month as ptime unless original day was the last day of month. see date_time::years_duration for more details </para></description></function>
<function name="operator-"><type><classname>ptime</classname></type><parameter name="t"><paramtype>const <classname>ptime</classname> &amp;</paramtype></parameter><parameter name="y"><paramtype>const boost::gregorian::years &amp;</paramtype></parameter><description><para>Subtracts a years object and a ptime. Result will be same month and day-of-month as ptime unless original day was the last day of month. see date_time::years_duration for more details </para></description></function>
<function name="operator-="><type><classname>ptime</classname></type><parameter name="t"><paramtype><classname>ptime</classname> &amp;</paramtype></parameter><parameter name="y"><paramtype>const boost::gregorian::years &amp;</paramtype></parameter><description><para>Subtracts a years object from a ptime. Result will be same month and day-of-month as ptime unless original day was the last day of month. see date_time::years_duration for more details </para></description></function>






</namespace>
</namespace>
</header>
<header name="boost/date_time/posix_time/posix_time.hpp">
<para>Global header file to get all of posix time types </para></header>
<header name="boost/date_time/posix_time/posix_time_config.hpp">
<namespace name="boost">
<namespace name="posix_time">
<class name="time_duration"><inherit access="public">date_time::time_duration&lt; time_duration, time_res_traits &gt;</inherit><purpose>Base time duration type. </purpose><typedef name="rep_type"><type>time_res_traits</type></typedef>
<typedef name="day_type"><type>time_res_traits::day_type</type></typedef>
<typedef name="hour_type"><type>time_res_traits::hour_type</type></typedef>
<typedef name="min_type"><type>time_res_traits::min_type</type></typedef>
<typedef name="sec_type"><type>time_res_traits::sec_type</type></typedef>
<typedef name="fractional_seconds_type"><type>time_res_traits::fractional_seconds_type</type></typedef>
<typedef name="tick_type"><type>time_res_traits::tick_type</type></typedef>
<typedef name="impl_type"><type>time_res_traits::impl_type</type></typedef>
<method-group name="public member functions">
</method-group>
<constructor><parameter name="hour"><paramtype>hour_type</paramtype></parameter><parameter name="min"><paramtype>min_type</paramtype></parameter><parameter name="sec"><paramtype>sec_type</paramtype></parameter><parameter name="fs"><paramtype>fractional_seconds_type</paramtype><default>0</default></parameter></constructor>
<constructor/>
<constructor><parameter name="sv"><paramtype>boost::date_time::special_values</paramtype></parameter><purpose>Construct from special_values. </purpose></constructor>
<method-group name="protected member functions">
</method-group>
<constructor specifiers="explicit"><parameter name="tick_count"><paramtype>impl_type</paramtype></parameter></constructor>
</class><struct name="simple_time_rep"><purpose>Simple implementation for the time rep. </purpose><typedef name="date_type"><type>gregorian::date</type></typedef>
<typedef name="time_duration_type"><type><classname>time_duration</classname></type></typedef>
<data-member name="day"><type>date_type</type></data-member>
<data-member name="time_of_day"><type><classname>time_duration_type</classname></type></data-member>
<method-group name="public member functions">
<method name="is_special" cv="const"><type>bool</type></method>
<method name="is_pos_infinity" cv="const"><type>bool</type></method>
<method name="is_neg_infinity" cv="const"><type>bool</type></method>
<method name="is_not_a_date_time" cv="const"><type>bool</type></method>
</method-group>
<constructor><parameter name="d"><paramtype>date_type</paramtype></parameter><parameter name="tod"><paramtype><classname>time_duration_type</classname></paramtype></parameter></constructor>
</struct><class name="posix_time_system_config"><typedef name="time_rep_type"><type><classname>simple_time_rep</classname></type></typedef>
<typedef name="date_type"><type>gregorian::date</type></typedef>
<typedef name="date_duration_type"><type>gregorian::date_duration</type></typedef>
<typedef name="time_duration_type"><type><classname>time_duration</classname></type></typedef>
<typedef name="int_type"><type>time_res_traits::tick_type</type></typedef>
<typedef name="resolution_traits"><type>time_res_traits</type></typedef>
<method-group name="public member functions">
<method name="BOOST_STATIC_CONSTANT"><type/><parameter name=""><paramtype>boost::int64_t</paramtype></parameter><parameter name=""><paramtype>tick_per_second</paramtype><default>1000000000</default></parameter></method>
</method-group>
</class><class name="millisec_posix_time_system_config"><typedef name="time_rep_type"><type>boost::int64_t</type></typedef>
<typedef name="date_type"><type>gregorian::date</type></typedef>
<typedef name="date_duration_type"><type>gregorian::date_duration</type></typedef>
<typedef name="time_duration_type"><type><classname>time_duration</classname></type></typedef>
<typedef name="int_type"><type>time_res_traits::tick_type</type></typedef>
<typedef name="impl_type"><type>time_res_traits::impl_type</type></typedef>
<typedef name="resolution_traits"><type>time_res_traits</type></typedef>
<method-group name="public member functions">
<method name="BOOST_STATIC_CONSTANT"><type/><parameter name=""><paramtype>boost::int64_t</paramtype></parameter><parameter name=""><paramtype>tick_per_second</paramtype><default>1000000</default></parameter></method>
</method-group>
</class><typedef name="time_res_traits"><type>date_time::time_resolution_traits&lt; boost::date_time::time_resolution_traits_adapted64_impl, boost::date_time::nano, 1000000000, 9 &gt;</type></typedef>
















































</namespace>
</namespace>
</header>
<header name="boost/date_time/posix_time/posix_time_duration.hpp">
<namespace name="boost">
<namespace name="posix_time">
<class name="hours"><inherit access="public">boost::posix_time::time_duration</inherit><purpose>Allows expression of durations as an hour count. </purpose><method-group name="public member functions">
</method-group>
<constructor specifiers="explicit"><parameter name="h"><paramtype>long</paramtype></parameter></constructor>
</class><class name="minutes"><inherit access="public">boost::posix_time::time_duration</inherit><purpose>Allows expression of durations as a minute count. </purpose><method-group name="public member functions">
</method-group>
<constructor specifiers="explicit"><parameter name="m"><paramtype>long</paramtype></parameter></constructor>
</class><class name="seconds"><inherit access="public">boost::posix_time::time_duration</inherit><purpose>Allows expression of durations as a seconds count. </purpose><method-group name="public member functions">
</method-group>
<constructor specifiers="explicit"><parameter name="s"><paramtype>long</paramtype></parameter></constructor>
</class><typedef name="millisec"><purpose>Allows expression of durations as milli seconds. </purpose><type>date_time::subsecond_duration&lt; <classname>time_duration</classname>, 1000 &gt;</type></typedef>
<typedef name="milliseconds"><type>date_time::subsecond_duration&lt; <classname>time_duration</classname>, 1000 &gt;</type></typedef>
<typedef name="microsec"><purpose>Allows expression of durations as micro seconds. </purpose><type>date_time::subsecond_duration&lt; <classname>time_duration</classname>, 1000000 &gt;</type></typedef>
<typedef name="microseconds"><type>date_time::subsecond_duration&lt; <classname>time_duration</classname>, 1000000 &gt;</type></typedef>
<typedef name="nanosec"><purpose>Allows expression of durations as nano seconds. </purpose><type>date_time::subsecond_duration&lt; <classname>time_duration</classname>, 1000000000 &gt;</type></typedef>
<typedef name="nanoseconds"><type>date_time::subsecond_duration&lt; <classname>time_duration</classname>, 1000000000 &gt;</type></typedef>
















































</namespace>
</namespace>
</header>
<header name="boost/date_time/posix_time/posix_time_io.hpp">
<namespace name="boost">
<namespace name="posix_time">
<typedef name="wtime_facet"><purpose>wptime_facet is depricated and will be phased out. use wtime_facet instead </purpose><description><para>ptime_facet is depricated and will be phased out. use time_facet instead wptime_input_facet is depricated and will be phased out. use wtime_input_facet instead ptime_input_facet is depricated and will be phased out. use time_input_facet instead </para></description><type>boost::date_time::time_facet&lt; <classname>ptime</classname>, wchar_t &gt;</type></typedef>
<typedef name="time_facet"><type>boost::date_time::time_facet&lt; <classname>ptime</classname>, char &gt;</type></typedef>
<typedef name="wtime_input_facet"><type>boost::date_time::time_input_facet&lt; <classname>ptime</classname>, wchar_t &gt;</type></typedef>
<typedef name="time_input_facet"><type>boost::date_time::time_input_facet&lt; <classname>ptime</classname>, char &gt;</type></typedef>




























<function name="operator&lt;&lt;"><type>std::basic_ostream&lt; CharT, TraitsT &gt; &amp;</type><template>
          <template-type-parameter name="CharT"/>
          <template-type-parameter name="TraitsT"/>
        </template><parameter name="os"><paramtype>std::basic_ostream&lt; CharT, TraitsT &gt; &amp;</paramtype></parameter><parameter name="p"><paramtype>const <classname>ptime</classname> &amp;</paramtype></parameter></function>
<function name="operator&gt;&gt;"><type>std::basic_istream&lt; CharT, Traits &gt; &amp;</type><template>
          <template-type-parameter name="CharT"/>
          <template-type-parameter name="Traits"/>
        </template><parameter name="is"><paramtype>std::basic_istream&lt; CharT, Traits &gt; &amp;</paramtype></parameter><parameter name="pt"><paramtype><classname>ptime</classname> &amp;</paramtype></parameter><purpose>input operator for ptime </purpose></function>
<function name="operator&lt;&lt;"><type>std::basic_ostream&lt; CharT, TraitsT &gt; &amp;</type><template>
          <template-type-parameter name="CharT"/>
          <template-type-parameter name="TraitsT"/>
        </template><parameter name="os"><paramtype>std::basic_ostream&lt; CharT, TraitsT &gt; &amp;</paramtype></parameter><parameter name="p"><paramtype>const boost::posix_time::time_period &amp;</paramtype></parameter></function>
<function name="operator&gt;&gt;"><type>std::basic_istream&lt; CharT, Traits &gt; &amp;</type><template>
          <template-type-parameter name="CharT"/>
          <template-type-parameter name="Traits"/>
        </template><parameter name="is"><paramtype>std::basic_istream&lt; CharT, Traits &gt; &amp;</paramtype></parameter><parameter name="tp"><paramtype>time_period &amp;</paramtype></parameter><purpose>input operator for time_period </purpose></function>
<function name="operator&lt;&lt;"><type>std::basic_ostream&lt; CharT, Traits &gt; &amp;</type><template>
          <template-type-parameter name="CharT"/>
          <template-type-parameter name="Traits"/>
        </template><parameter name="os"><paramtype>std::basic_ostream&lt; CharT, Traits &gt; &amp;</paramtype></parameter><parameter name="td"><paramtype>const <classname>time_duration</classname> &amp;</paramtype></parameter><purpose>ostream operator for <classname alt="boost::posix_time::time_duration">posix_time::time_duration</classname> </purpose></function>
<function name="operator&gt;&gt;"><type>std::basic_istream&lt; CharT, Traits &gt; &amp;</type><template>
          <template-type-parameter name="CharT"/>
          <template-type-parameter name="Traits"/>
        </template><parameter name="is"><paramtype>std::basic_istream&lt; CharT, Traits &gt; &amp;</paramtype></parameter><parameter name="td"><paramtype><classname>time_duration</classname> &amp;</paramtype></parameter><purpose>input operator for <classname alt="boost::posix_time::time_duration">time_duration</classname> </purpose></function>














</namespace>
</namespace>
</header>
<header name="boost/date_time/posix_time/posix_time_legacy_io.hpp">
<namespace name="boost">
<namespace name="posix_time">






















<function name="operator&lt;&lt;"><type>std::basic_ostream&lt; charT, traits &gt; &amp;</type><template>
          <template-type-parameter name="charT"/>
          <template-type-parameter name="traits"/>
        </template><parameter name="os"><paramtype>std::basic_ostream&lt; charT, traits &gt; &amp;</paramtype></parameter><parameter name="td"><paramtype>const <classname>time_duration</classname> &amp;</paramtype></parameter><purpose>ostream operator for <classname alt="boost::posix_time::time_duration">posix_time::time_duration</classname> </purpose></function>
<function name="operator&lt;&lt;"><type>std::basic_ostream&lt; charT, traits &gt; &amp;</type><template>
          <template-type-parameter name="charT"/>
          <template-type-parameter name="traits"/>
        </template><parameter name="os"><paramtype>std::basic_ostream&lt; charT, traits &gt; &amp;</paramtype></parameter><parameter name="t"><paramtype>const <classname>ptime</classname> &amp;</paramtype></parameter><purpose>ostream operator for <classname alt="boost::posix_time::ptime">posix_time::ptime</classname> </purpose></function>
<function name="operator&lt;&lt;"><type>std::basic_ostream&lt; charT, traits &gt; &amp;</type><template>
          <template-type-parameter name="charT"/>
          <template-type-parameter name="traits"/>
        </template><parameter name="os"><paramtype>std::basic_ostream&lt; charT, traits &gt; &amp;</paramtype></parameter><parameter name="tp"><paramtype>const time_period &amp;</paramtype></parameter><purpose>ostream operator for posix_time::time_period </purpose></function>
<function name="operator&gt;&gt;"><type>std::basic_istream&lt; charT &gt; &amp;</type><template>
          <template-type-parameter name="charT"/>
        </template><parameter name="is"><paramtype>std::basic_istream&lt; charT &gt; &amp;</paramtype></parameter><parameter name="td"><paramtype><classname>time_duration</classname> &amp;</paramtype></parameter></function>
<function name="operator&gt;&gt;"><type>std::basic_istream&lt; charT &gt; &amp;</type><template>
          <template-type-parameter name="charT"/>
        </template><parameter name="is"><paramtype>std::basic_istream&lt; charT &gt; &amp;</paramtype></parameter><parameter name="pt"><paramtype><classname>ptime</classname> &amp;</paramtype></parameter></function>
<function name="operator&gt;&gt;"><type>std::basic_istream&lt; charT &gt; &amp;</type><template>
          <template-type-parameter name="charT"/>
        </template><parameter name="is"><paramtype>std::basic_istream&lt; charT &gt; &amp;</paramtype></parameter><parameter name="tp"><paramtype>time_period &amp;</paramtype></parameter><description><para>operator&gt;&gt; for time_period. time_period must be in "[date time_duration/date time_duration]" format. </para></description></function>




















</namespace>
</namespace>
</header>
<header name="boost/date_time/posix_time/posix_time_system.hpp">
<namespace name="boost">
<namespace name="posix_time">
<typedef name="posix_time_system"><type>date_time::split_timedate_system&lt; <classname>posix_time_system_config</classname>, 1000000000 &gt;</type></typedef>
<typedef name="int64_time_rep"><type>date_time::counted_time_rep&lt; <classname>millisec_posix_time_system_config</classname> &gt;</type></typedef>
















































</namespace>
</namespace>
</header>
<header name="boost/date_time/posix_time/posix_time_types.hpp">
<namespace name="boost">
<namespace name="posix_time">
<typedef name="time_iterator"><purpose>Iterator over a defined time duration. </purpose><type>date_time::time_itr&lt; <classname>ptime</classname> &gt;</type></typedef>
<typedef name="second_clock"><purpose>A time clock that has a resolution of one second. </purpose><type>date_time::second_clock&lt; <classname>ptime</classname> &gt;</type></typedef>
<typedef name="microsec_clock"><purpose>A time clock that has a resolution of one microsecond. </purpose><type>date_time::microsec_clock&lt; <classname>ptime</classname> &gt;</type></typedef>
<typedef name="no_dst"><purpose>Define a dst null dst rule for the posix_time system. </purpose><type>date_time::null_dst_rules&lt; ptime::date_type, <classname>time_duration</classname> &gt;</type></typedef>
<typedef name="us_dst"><purpose>Define US dst rule calculator for the posix_time system. </purpose><type>date_time::us_dst_rules&lt; ptime::date_type, <classname>time_duration</classname> &gt;</type></typedef>
















































</namespace>
</namespace>
</header>
<header name="boost/date_time/posix_time/ptime.hpp">
<namespace name="boost">
<namespace name="posix_time">
<class name="ptime"><inherit access="public">date_time::base_time&lt; ptime, posix_time_system &gt;</inherit><purpose>Time type with no timezone or other adjustments. </purpose><typedef name="time_system_type"><type>posix_time_system</type></typedef>
<typedef name="time_rep_type"><type>time_system_type::time_rep_type</type></typedef>
<typedef name="time_duration_type"><type>time_system_type::time_duration_type</type></typedef>
<typedef name="time_type"><type><classname>ptime</classname></type></typedef>
<method-group name="public member functions">
</method-group>
<constructor><parameter name="d"><paramtype>gregorian::date</paramtype></parameter><parameter name="td"><paramtype>time_duration_type</paramtype></parameter><purpose>Construct with date and offset in day. </purpose></constructor>
<constructor specifiers="explicit"><parameter name="d"><paramtype>gregorian::date</paramtype></parameter><purpose>Construct a time at start of the given day (midnight) </purpose></constructor>
<constructor><parameter name="rhs"><paramtype>const time_rep_type &amp;</paramtype></parameter><purpose>Copy from time_rep. </purpose></constructor>
<constructor><parameter name="sv"><paramtype>const special_values</paramtype></parameter><purpose>Construct from special value. </purpose></constructor>
<constructor/>
</class>















































</namespace>
</namespace>
</header>
<header name="boost/date_time/posix_time/time_formatters.hpp">
<namespace name="boost">
<namespace name="posix_time">










<function name="to_simple_string_type"><type>std::basic_string&lt; charT &gt;</type><template>
          <template-type-parameter name="charT"/>
        </template><parameter name="td"><paramtype><classname>time_duration</classname></paramtype></parameter></function>
<function name="to_iso_string_type"><type>std::basic_string&lt; charT &gt;</type><template>
          <template-type-parameter name="charT"/>
        </template><parameter name="td"><paramtype><classname>time_duration</classname></paramtype></parameter></function>
<function name="to_simple_string_type"><type>std::basic_string&lt; charT &gt;</type><template>
          <template-type-parameter name="charT"/>
        </template><parameter name="t"><paramtype><classname>ptime</classname></paramtype></parameter><purpose>Time to simple format CCYY-mmm-dd hh:mm:ss.fffffff. </purpose></function>
<function name="to_simple_string_type"><type>std::basic_string&lt; charT &gt;</type><template>
          <template-type-parameter name="charT"/>
        </template><parameter name="tp"><paramtype>time_period</paramtype></parameter></function>
<function name="to_iso_string_type"><type>std::basic_string&lt; charT &gt;</type><template>
          <template-type-parameter name="charT"/>
        </template><parameter name="t"><paramtype><classname>ptime</classname></paramtype></parameter></function>
<function name="to_iso_extended_string_type"><type>std::basic_string&lt; charT &gt;</type><template>
          <template-type-parameter name="charT"/>
        </template><parameter name="t"><paramtype><classname>ptime</classname></paramtype></parameter></function>
<function name="to_simple_wstring"><type>std::wstring</type><parameter name="td"><paramtype><classname>time_duration</classname></paramtype></parameter><purpose>Time duration to wstring -hh::mm::ss.fffffff. Example: 10:09:03.0123456. </purpose></function>
<function name="to_iso_wstring"><type>std::wstring</type><parameter name="td"><paramtype><classname>time_duration</classname></paramtype></parameter><purpose>Time duration in iso format -hhmmss,fffffff Example: 10:09:03,0123456. </purpose></function>
<function name="to_simple_wstring"><type>std::wstring</type><parameter name="t"><paramtype><classname>ptime</classname></paramtype></parameter></function>
<function name="to_simple_wstring"><type>std::wstring</type><parameter name="tp"><paramtype>time_period</paramtype></parameter><purpose>Convert to wstring of form [YYYY-mmm-DD HH:MM::SS.ffffff/YYYY-mmm-DD HH:MM::SS.fffffff]. </purpose></function>
<function name="to_iso_wstring"><type>std::wstring</type><parameter name="t"><paramtype><classname>ptime</classname></paramtype></parameter><purpose>Convert iso short form YYYYMMDDTHHMMSS where T is the date-time separator. </purpose></function>
<function name="to_iso_extended_wstring"><type>std::wstring</type><parameter name="t"><paramtype><classname>ptime</classname></paramtype></parameter><purpose>Convert to form YYYY-MM-DDTHH:MM:SS where T is the date-time separator. </purpose></function>


























</namespace>
</namespace>
</header>
<header name="boost/date_time/posix_time/time_formatters_limited.hpp">
<namespace name="boost">
<namespace name="posix_time">




<function name="to_simple_string"><type>std::string</type><parameter name="td"><paramtype><classname>time_duration</classname></paramtype></parameter><purpose>Time duration to string -hh::mm::ss.fffffff. Example: 10:09:03.0123456. </purpose></function>
<function name="to_iso_string"><type>std::string</type><parameter name="td"><paramtype><classname>time_duration</classname></paramtype></parameter><purpose>Time duration in iso format -hhmmss,fffffff Example: 10:09:03,0123456. </purpose></function>
<function name="to_simple_string"><type>std::string</type><parameter name="t"><paramtype><classname>ptime</classname></paramtype></parameter><purpose>Time to simple format CCYY-mmm-dd hh:mm:ss.fffffff. </purpose></function>
<function name="to_simple_string"><type>std::string</type><parameter name="tp"><paramtype>time_period</paramtype></parameter><purpose>Convert to string of form [YYYY-mmm-DD HH:MM::SS.ffffff/YYYY-mmm-DD HH:MM::SS.fffffff]. </purpose></function>
<function name="to_iso_string"><type>std::string</type><parameter name="t"><paramtype><classname>ptime</classname></paramtype></parameter><purpose>Convert iso short form YYYYMMDDTHHMMSS where T is the date-time separator. </purpose></function>
<function name="to_iso_extended_string"><type>std::string</type><parameter name="t"><paramtype><classname>ptime</classname></paramtype></parameter><purpose>Convert to form YYYY-MM-DDTHH:MM:SS where T is the date-time separator. </purpose></function>






































</namespace>
</namespace>
</header>
<header name="boost/date_time/posix_time/time_parsers.hpp">
<namespace name="boost">
<namespace name="posix_time">
<function name="duration_from_string"><type><classname>time_duration</classname></type><parameter name="s"><paramtype>const std::string &amp;</paramtype></parameter><purpose>Creates a <classname alt="boost::posix_time::time_duration">time_duration</classname> object from a delimited string. </purpose><description><para>Expected format for string is "[-]h[h][:mm][:ss][.fff]". A negative duration will be created if the first character in string is a '-', all other '-' will be treated as delimiters. Accepted delimiters are "-:,.". </para></description></function>
<function name="time_from_string"><type><classname>ptime</classname></type><parameter name="s"><paramtype>const std::string &amp;</paramtype></parameter></function>
<function name="from_iso_string"><type><classname>ptime</classname></type><parameter name="s"><paramtype>const std::string &amp;</paramtype></parameter></function>
<function name="from_iso_extended_string"><type><classname>ptime</classname></type><parameter name="s"><paramtype>const std::string &amp;</paramtype></parameter></function>












































</namespace>
</namespace>
</header>
<header name="boost/date_time/posix_time/time_period.hpp">
<namespace name="boost">
<namespace name="posix_time">
<typedef name="time_period"><purpose>Time period type. </purpose><type>date_time::period&lt; <classname>ptime</classname>, <classname>time_duration</classname> &gt;</type></typedef>
















































</namespace>
</namespace>
</header>
<header name="boost/date_time/posix_time/time_serialize.hpp">
<function name="BOOST_SERIALIZATION_SPLIT_FREE"><type/><parameter name=""><paramtype><classname>boost::posix_time::ptime</classname></paramtype></parameter><description><para>time_duration objects are broken down into 4 parts for serialization: types are hour_type, min_type, sec_type, and fractional_seconds_type as defined in the time_duration class </para></description></function>
<function name="load"><type>void</type><template>
          <template-type-parameter name="Archive"/>
        </template><parameter name="ar"><paramtype>Archive &amp;</paramtype></parameter><parameter name="td"><paramtype>posix_time::time_duration &amp;</paramtype></parameter><parameter name="int"><paramtype>unsigned</paramtype></parameter><purpose>Function to load posix_time::time_duration objects using serialization lib. </purpose><description><para>time_duration objects are broken down into 4 parts for serialization: types are hour_type, min_type, sec_type, and fractional_seconds_type as defined in the time_duration class </para></description></function>
<function name="save"><type>void</type><template>
          <template-type-parameter name="Archive"/>
        </template><parameter name="ar"><paramtype>Archive &amp;</paramtype></parameter><parameter name="pt"><paramtype>const posix_time::ptime &amp;</paramtype></parameter><parameter name="int"><paramtype>unsigned</paramtype></parameter><purpose>Function to save posix_time::ptime objects using serialization lib. </purpose><description><para>ptime objects are broken down into 2 parts for serialization: a date object and a time_duration onject </para></description></function>
<function name="load"><type>void</type><template>
          <template-type-parameter name="Archive"/>
        </template><parameter name="ar"><paramtype>Archive &amp;</paramtype></parameter><parameter name="pt"><paramtype>posix_time::ptime &amp;</paramtype></parameter><parameter name="int"><paramtype>unsigned</paramtype></parameter><purpose>Function to load posix_time::ptime objects using serialization lib. </purpose><description><para>ptime objects are broken down into 2 parts for serialization: a date object and a time_duration onject </para></description></function>
<function name="load_construct_data"><type>void</type><template>
          <template-type-parameter name="Archive"/>
        </template><parameter name=""><paramtype>Archive &amp;</paramtype></parameter><parameter name="pt"><paramtype>posix_time::ptime *</paramtype></parameter><parameter name="int"><paramtype>const unsigned</paramtype></parameter><purpose>override needed b/c no default constructor </purpose></function>
<function name="save"><type>void</type><template>
          <template-type-parameter name="Archive"/>
        </template><parameter name="ar"><paramtype>Archive &amp;</paramtype></parameter><parameter name="tp"><paramtype>const posix_time::time_period &amp;</paramtype></parameter><parameter name="int"><paramtype>unsigned</paramtype></parameter><purpose>Function to save posix_time::time_period objects using serialization lib. </purpose><description><para>time_period objects are broken down into 2 parts for serialization: a begining ptime object and an ending ptime object </para></description></function>
<function name="load"><type>void</type><template>
          <template-type-parameter name="Archive"/>
        </template><parameter name="ar"><paramtype>Archive &amp;</paramtype></parameter><parameter name="tp"><paramtype>boost::posix_time::time_period &amp;</paramtype></parameter><parameter name="int"><paramtype>unsigned</paramtype></parameter><purpose>Function to load posix_time::time_period objects using serialization lib. </purpose><description><para>time_period objects are broken down into 2 parts for serialization: a begining ptime object and an ending ptime object </para></description></function>
<function name="load_construct_data"><type>void</type><template>
          <template-type-parameter name="Archive"/>
        </template><parameter name=""><paramtype>Archive &amp;</paramtype></parameter><parameter name="tp"><paramtype>boost::posix_time::time_period *</paramtype></parameter><parameter name="int"><paramtype>const unsigned</paramtype></parameter><purpose>override needed b/c no default constructor </purpose></function>
</header>
</library-reference>