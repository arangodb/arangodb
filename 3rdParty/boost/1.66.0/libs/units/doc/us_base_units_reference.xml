<?xml version="1.0" standalone="yes"?>
<library-reference id="us_base_units_reference"><title>US Base Units Reference</title><header name="boost/units/base_units/us/cup.hpp">
<namespace name="boost">
<namespace name="units">
<struct-specialization name="base_unit_info"><template>
    </template><specialization><template-arg>us::cup_base_unit</template-arg></specialization><method-group name="public static functions">
<method name="name" specifiers="static"><type>const char *</type></method>
<method name="symbol" specifiers="static"><type>const char *</type></method>
</method-group>
</struct-specialization><namespace name="us">
<typedef name="cup_base_unit"><type>scaled_base_unit&lt; <classname>pint_base_unit</classname>, scale&lt; 2, static_rational&lt;-1 &gt; &gt; &gt;</type></typedef>
</namespace>
</namespace>
</namespace>
</header>
<header name="boost/units/base_units/us/dram.hpp">
<namespace name="boost">
<namespace name="units">
<struct-specialization name="base_unit_info"><template>
    </template><specialization><template-arg>us::dram_base_unit</template-arg></specialization><method-group name="public static functions">
<method name="name" specifiers="static"><type>const char *</type></method>
<method name="symbol" specifiers="static"><type>const char *</type></method>
</method-group>
</struct-specialization><namespace name="us">
<typedef name="dram_base_unit"><type>scaled_base_unit&lt; <classname>pound_base_unit</classname>, scale&lt; 16, static_rational&lt;-2 &gt; &gt; &gt;</type></typedef>
</namespace>
</namespace>
</namespace>
</header>
<header name="boost/units/base_units/us/fluid_dram.hpp">
<namespace name="boost">
<namespace name="units">
<struct-specialization name="base_unit_info"><template>
    </template><specialization><template-arg>us::fluid_dram_base_unit</template-arg></specialization><method-group name="public static functions">
<method name="name" specifiers="static"><type>const char *</type></method>
<method name="symbol" specifiers="static"><type>const char *</type></method>
</method-group>
</struct-specialization><namespace name="us">
<typedef name="fluid_dram_base_unit"><type>scaled_base_unit&lt; <classname>pint_base_unit</classname>, scale&lt; 2, static_rational&lt;-7 &gt; &gt; &gt;</type></typedef>
</namespace>
</namespace>
</namespace>
</header>
<header name="boost/units/base_units/us/fluid_ounce.hpp">
<namespace name="boost">
<namespace name="units">
<struct-specialization name="base_unit_info"><template>
    </template><specialization><template-arg>us::fluid_ounce_base_unit</template-arg></specialization><method-group name="public static functions">
<method name="name" specifiers="static"><type>const char *</type></method>
<method name="symbol" specifiers="static"><type>const char *</type></method>
</method-group>
</struct-specialization><namespace name="us">
<typedef name="fluid_ounce_base_unit"><type>scaled_base_unit&lt; <classname>pint_base_unit</classname>, scale&lt; 16, static_rational&lt;-1 &gt; &gt; &gt;</type></typedef>
</namespace>
</namespace>
</namespace>
</header>
<header name="boost/units/base_units/us/foot.hpp">
<namespace name="boost">
<namespace name="units">
<struct-specialization name="base_unit_info"><template>
    </template><specialization><template-arg>us::foot_base_unit</template-arg></specialization><method-group name="public static functions">
<method name="name" specifiers="static"><type>const char *</type></method>
<method name="symbol" specifiers="static"><type>const char *</type></method>
</method-group>
</struct-specialization><namespace name="us">
<typedef name="foot_base_unit"><type>scaled_base_unit&lt; <classname>yard_base_unit</classname>, scale&lt; 3, static_rational&lt;-1 &gt; &gt; &gt;</type></typedef>
</namespace>
</namespace>
</namespace>
</header>
<header name="boost/units/base_units/us/gallon.hpp">
<namespace name="boost">
<namespace name="units">
<struct-specialization name="base_unit_info"><template>
    </template><specialization><template-arg>us::gallon_base_unit</template-arg></specialization><method-group name="public static functions">
<method name="name" specifiers="static"><type>const char *</type></method>
<method name="symbol" specifiers="static"><type>const char *</type></method>
</method-group>
</struct-specialization><namespace name="us">
<typedef name="gallon_base_unit"><type>scaled_base_unit&lt; <classname>pint_base_unit</classname>, scale&lt; 2, static_rational&lt; 3 &gt; &gt; &gt;</type></typedef>
</namespace>
</namespace>
</namespace>
</header>
<header name="boost/units/base_units/us/gill.hpp">
<namespace name="boost">
<namespace name="units">
<struct-specialization name="base_unit_info"><template>
    </template><specialization><template-arg>us::gill_base_unit</template-arg></specialization><method-group name="public static functions">
<method name="name" specifiers="static"><type>const char *</type></method>
<method name="symbol" specifiers="static"><type>const char *</type></method>
</method-group>
</struct-specialization><namespace name="us">
<typedef name="gill_base_unit"><type>scaled_base_unit&lt; <classname>pint_base_unit</classname>, scale&lt; 2, static_rational&lt;-2 &gt; &gt; &gt;</type></typedef>
</namespace>
</namespace>
</namespace>
</header>
<header name="boost/units/base_units/us/grain.hpp">
<namespace name="boost">
<namespace name="units">
<struct-specialization name="base_unit_info"><template>
    </template><specialization><template-arg>us::grain_base_unit</template-arg></specialization><method-group name="public static functions">
<method name="name" specifiers="static"><type>const char *</type></method>
<method name="symbol" specifiers="static"><type>const char *</type></method>
</method-group>
</struct-specialization><namespace name="us">
<typedef name="grain_base_unit"><type>scaled_base_unit&lt; <classname>pound_base_unit</classname>, scale&lt; 7000, static_rational&lt;-1 &gt; &gt; &gt;</type></typedef>
</namespace>
</namespace>
</namespace>
</header>
<header name="boost/units/base_units/us/hundredweight.hpp">
<namespace name="boost">
<namespace name="units">
<struct-specialization name="base_unit_info"><template>
    </template><specialization><template-arg>us::hundredweight_base_unit</template-arg></specialization><method-group name="public static functions">
<method name="name" specifiers="static"><type>const char *</type></method>
<method name="symbol" specifiers="static"><type>const char *</type></method>
</method-group>
</struct-specialization><namespace name="us">
<typedef name="hundredweight_base_unit"><type>scaled_base_unit&lt; <classname>pound_base_unit</classname>, scale&lt; 100, static_rational&lt; 1 &gt; &gt; &gt;</type></typedef>
</namespace>
</namespace>
</namespace>
</header>
<header name="boost/units/base_units/us/inch.hpp">
<namespace name="boost">
<namespace name="units">
<struct-specialization name="base_unit_info"><template>
    </template><specialization><template-arg>us::inch_base_unit</template-arg></specialization><method-group name="public static functions">
<method name="name" specifiers="static"><type>const char *</type></method>
<method name="symbol" specifiers="static"><type>const char *</type></method>
</method-group>
</struct-specialization><namespace name="us">
<typedef name="inch_base_unit"><type>scaled_base_unit&lt; <classname>yard_base_unit</classname>, scale&lt; 36, static_rational&lt;-1 &gt; &gt; &gt;</type></typedef>
</namespace>
</namespace>
</namespace>
</header>
<header name="boost/units/base_units/us/mil.hpp">
<namespace name="boost">
<namespace name="units">
<struct-specialization name="base_unit_info"><template>
    </template><specialization><template-arg>us::mil_base_unit</template-arg></specialization><method-group name="public static functions">
<method name="name" specifiers="static"><type>const char *</type></method>
<method name="symbol" specifiers="static"><type>const char *</type></method>
</method-group>
</struct-specialization><namespace name="us">
<typedef name="mil_base_unit"><type>scaled_base_unit&lt; <classname>yard_base_unit</classname>, scale&lt; 36000, static_rational&lt;-1 &gt; &gt; &gt;</type></typedef>
</namespace>
</namespace>
</namespace>
</header>
<header name="boost/units/base_units/us/mile.hpp">
<namespace name="boost">
<namespace name="units">
<struct-specialization name="base_unit_info"><template>
    </template><specialization><template-arg>us::mile_base_unit</template-arg></specialization><method-group name="public static functions">
<method name="name" specifiers="static"><type>const char *</type></method>
<method name="symbol" specifiers="static"><type>const char *</type></method>
</method-group>
</struct-specialization><namespace name="us">
<typedef name="mile_base_unit"><type>scaled_base_unit&lt; <classname>yard_base_unit</classname>, scale&lt; 1760, static_rational&lt; 1 &gt; &gt; &gt;</type></typedef>
</namespace>
</namespace>
</namespace>
</header>
<header name="boost/units/base_units/us/minim.hpp">
<namespace name="boost">
<namespace name="units">
<struct-specialization name="base_unit_info"><template>
    </template><specialization><template-arg>us::minim_base_unit</template-arg></specialization><method-group name="public static functions">
<method name="name" specifiers="static"><type>const char *</type></method>
<method name="symbol" specifiers="static"><type>const char *</type></method>
</method-group>
</struct-specialization><namespace name="us">
<typedef name="minim_base_unit"><type>scaled_base_unit&lt; <classname>pint_base_unit</classname>, scale&lt; 7680, static_rational&lt;-1 &gt; &gt; &gt;</type></typedef>
</namespace>
</namespace>
</namespace>
</header>
<header name="boost/units/base_units/us/ounce.hpp">
<namespace name="boost">
<namespace name="units">
<struct-specialization name="base_unit_info"><template>
    </template><specialization><template-arg>us::ounce_base_unit</template-arg></specialization><method-group name="public static functions">
<method name="name" specifiers="static"><type>const char *</type></method>
<method name="symbol" specifiers="static"><type>const char *</type></method>
</method-group>
</struct-specialization><namespace name="us">
<typedef name="ounce_base_unit"><type>scaled_base_unit&lt; <classname>pound_base_unit</classname>, scale&lt; 2, static_rational&lt;-4 &gt; &gt; &gt;</type></typedef>
</namespace>
</namespace>
</namespace>
</header>
<header name="boost/units/base_units/us/pint.hpp">
<namespace name="boost">
<namespace name="units">
<namespace name="us">
<struct name="pint_base_unit"><inherit access="public">boost::units::base_unit&lt; pint_base_unit, si::volume::dimension_type,-503 &gt;</inherit><method-group name="public static functions">
<method name="name" specifiers="static"><type>const char *</type></method>
<method name="symbol" specifiers="static"><type>const char *</type></method>
</method-group>
</struct></namespace>
</namespace>
</namespace>
</header>
<header name="boost/units/base_units/us/pound.hpp">
<namespace name="boost">
<namespace name="units">
<namespace name="us">
<struct name="pound_base_unit"><inherit access="public">boost::units::base_unit&lt; pound_base_unit, cgs::gram_base_unit::dimension_type,-502 &gt;</inherit><method-group name="public static functions">
<method name="name" specifiers="static"><type>const char *</type></method>
<method name="symbol" specifiers="static"><type>const char *</type></method>
</method-group>
</struct></namespace>
</namespace>
</namespace>
</header>
<header name="boost/units/base_units/us/pound_force.hpp">
<namespace name="boost">
<namespace name="units">
<namespace name="us">
<struct name="pound_force_base_unit"><inherit access="public">boost::units::base_unit&lt; pound_force_base_unit, si::force::dimension_type,-600 &gt;</inherit><method-group name="public static functions">
<method name="name" specifiers="static"><type>const char *</type></method>
<method name="symbol" specifiers="static"><type>const char *</type></method>
</method-group>
</struct></namespace>
</namespace>
</namespace>
</header>
<header name="boost/units/base_units/us/quart.hpp">
<namespace name="boost">
<namespace name="units">
<struct-specialization name="base_unit_info"><template>
    </template><specialization><template-arg>us::quart_base_unit</template-arg></specialization><method-group name="public static functions">
<method name="name" specifiers="static"><type>const char *</type></method>
<method name="symbol" specifiers="static"><type>const char *</type></method>
</method-group>
</struct-specialization><namespace name="us">
<typedef name="quart_base_unit"><type>scaled_base_unit&lt; <classname>pint_base_unit</classname>, scale&lt; 2, static_rational&lt; 1 &gt; &gt; &gt;</type></typedef>
</namespace>
</namespace>
</namespace>
</header>
<header name="boost/units/base_units/us/tablespoon.hpp">
<namespace name="boost">
<namespace name="units">
<struct-specialization name="base_unit_info"><template>
    </template><specialization><template-arg>us::tablespoon_base_unit</template-arg></specialization><method-group name="public static functions">
<method name="name" specifiers="static"><type>const char *</type></method>
<method name="symbol" specifiers="static"><type>const char *</type></method>
</method-group>
</struct-specialization><namespace name="us">
<typedef name="tablespoon_base_unit"><type>scaled_base_unit&lt; <classname>pint_base_unit</classname>, scale&lt; 2, static_rational&lt;-5 &gt; &gt; &gt;</type></typedef>
</namespace>
</namespace>
</namespace>
</header>
<header name="boost/units/base_units/us/teaspoon.hpp">
<namespace name="boost">
<namespace name="units">
<struct-specialization name="base_unit_info"><template>
    </template><specialization><template-arg>us::teaspoon_base_unit</template-arg></specialization><method-group name="public static functions">
<method name="name" specifiers="static"><type>const char *</type></method>
<method name="symbol" specifiers="static"><type>const char *</type></method>
</method-group>
</struct-specialization><namespace name="us">
<typedef name="teaspoon_base_unit"><type>scaled_base_unit&lt; <classname>pint_base_unit</classname>, scale&lt; 96, static_rational&lt;-1 &gt; &gt; &gt;</type></typedef>
</namespace>
</namespace>
</namespace>
</header>
<header name="boost/units/base_units/us/ton.hpp">
<namespace name="boost">
<namespace name="units">
<struct-specialization name="base_unit_info"><template>
    </template><specialization><template-arg>us::ton_base_unit</template-arg></specialization><method-group name="public static functions">
<method name="name" specifiers="static"><type>const char *</type></method>
<method name="symbol" specifiers="static"><type>const char *</type></method>
</method-group>
</struct-specialization><namespace name="us">
<typedef name="ton_base_unit"><type>scaled_base_unit&lt; <classname>pound_base_unit</classname>, scale&lt; 2000, static_rational&lt; 1 &gt; &gt; &gt;</type></typedef>
</namespace>
</namespace>
</namespace>
</header>
<header name="boost/units/base_units/us/yard.hpp">
<namespace name="boost">
<namespace name="units">
<namespace name="us">
<struct name="yard_base_unit"><inherit access="public">boost::units::base_unit&lt; yard_base_unit, si::meter_base_unit::dimension_type,-501 &gt;</inherit><method-group name="public static functions">
<method name="name" specifiers="static"><type>const char *</type></method>
<method name="symbol" specifiers="static"><type>const char *</type></method>
</method-group>
</struct></namespace>
</namespace>
</namespace>
</header>
</library-reference>