<?xml version="1.0" standalone="yes"?>
<library-reference id="metric_base_units_reference"><title>Metric Base Units Reference</title><header name="boost/units/base_units/metric/angstrom.hpp">
<namespace name="boost">
<namespace name="units">
<struct-specialization name="base_unit_info"><template>
    </template><specialization><template-arg>metric::angstrom_base_unit</template-arg></specialization><method-group name="public static functions">
<method name="name" specifiers="static"><type>const char *</type></method>
<method name="symbol" specifiers="static"><type>const char *</type></method>
</method-group>
</struct-specialization><namespace name="metric">
<typedef name="angstrom_base_unit"><type>scaled_base_unit&lt; boost::units::si::meter_base_unit, scale&lt; 10, static_rational&lt;-10 &gt; &gt; &gt;</type></typedef>
</namespace>
</namespace>
</namespace>
</header>
<header name="boost/units/base_units/metric/are.hpp">
<namespace name="boost">
<namespace name="units">
<namespace name="metric">
<struct name="are_base_unit"><inherit access="public">boost::units::base_unit&lt; are_base_unit, si::area::dimension_type, 10 &gt;</inherit><method-group name="public static functions">
<method name="name" specifiers="static"><type>const char *</type></method>
<method name="symbol" specifiers="static"><type>const char *</type></method>
</method-group>
</struct></namespace>
</namespace>
</namespace>
</header>
<header name="boost/units/base_units/metric/atmosphere.hpp">
<namespace name="boost">
<namespace name="units">
<namespace name="metric">
<struct name="atmosphere_base_unit"><inherit access="public">boost::units::base_unit&lt; atmosphere_base_unit, si::pressure::dimension_type, 33 &gt;</inherit><method-group name="public static functions">
<method name="name" specifiers="static"><type>const char *</type></method>
<method name="symbol" specifiers="static"><type>const char *</type></method>
</method-group>
</struct></namespace>
</namespace>
</namespace>
</header>
<header name="boost/units/base_units/metric/bar.hpp">
<namespace name="boost">
<namespace name="units">
<namespace name="metric">
<struct name="bar_base_unit"><inherit access="public">boost::units::base_unit&lt; bar_base_unit, si::pressure::dimension_type, 14 &gt;</inherit><method-group name="public static functions">
<method name="name" specifiers="static"><type>const char *</type></method>
<method name="symbol" specifiers="static"><type>const char *</type></method>
</method-group>
</struct></namespace>
</namespace>
</namespace>
</header>
<header name="boost/units/base_units/metric/barn.hpp">
<namespace name="boost">
<namespace name="units">
<namespace name="metric">
<struct name="barn_base_unit"><inherit access="public">boost::units::base_unit&lt; barn_base_unit, si::area::dimension_type, 11 &gt;</inherit><method-group name="public static functions">
<method name="name" specifiers="static"><type>const char *</type></method>
<method name="symbol" specifiers="static"><type>const char *</type></method>
</method-group>
</struct></namespace>
</namespace>
</namespace>
</header>
<header name="boost/units/base_units/metric/day.hpp">
<namespace name="boost">
<namespace name="units">
<struct-specialization name="base_unit_info"><template>
    </template><specialization><template-arg>metric::day_base_unit</template-arg></specialization><method-group name="public static functions">
<method name="name" specifiers="static"><type>const char *</type></method>
<method name="symbol" specifiers="static"><type>const char *</type></method>
</method-group>
</struct-specialization><namespace name="metric">
<typedef name="day_base_unit"><type>scaled_base_unit&lt; boost::units::si::second_base_unit, scale&lt; 86400, static_rational&lt; 1 &gt; &gt; &gt;</type></typedef>
</namespace>
</namespace>
</namespace>
</header>
<header name="boost/units/base_units/metric/fermi.hpp">
<namespace name="boost">
<namespace name="units">
<struct-specialization name="base_unit_info"><template>
    </template><specialization><template-arg>metric::fermi_base_unit</template-arg></specialization><method-group name="public static functions">
<method name="name" specifiers="static"><type>const char *</type></method>
<method name="symbol" specifiers="static"><type>const char *</type></method>
</method-group>
</struct-specialization><namespace name="metric">
<typedef name="fermi_base_unit"><type>scaled_base_unit&lt; boost::units::si::meter_base_unit, scale&lt; 10, static_rational&lt;-15 &gt; &gt; &gt;</type></typedef>
</namespace>
</namespace>
</namespace>
</header>
<header name="boost/units/base_units/metric/hectare.hpp">
<namespace name="boost">
<namespace name="units">
<namespace name="metric">
<struct name="hectare_base_unit"><inherit access="public">boost::units::base_unit&lt; hectare_base_unit, si::area::dimension_type, 12 &gt;</inherit><method-group name="public static functions">
<method name="name" specifiers="static"><type>const char *</type></method>
<method name="symbol" specifiers="static"><type>const char *</type></method>
</method-group>
</struct></namespace>
</namespace>
</namespace>
</header>
<header name="boost/units/base_units/metric/hour.hpp">
<namespace name="boost">
<namespace name="units">
<struct-specialization name="base_unit_info"><template>
    </template><specialization><template-arg>metric::hour_base_unit</template-arg></specialization><method-group name="public static functions">
<method name="name" specifiers="static"><type>const char *</type></method>
<method name="symbol" specifiers="static"><type>const char *</type></method>
</method-group>
</struct-specialization><namespace name="metric">
<typedef name="hour_base_unit"><type>scaled_base_unit&lt; boost::units::si::second_base_unit, scale&lt; 60, static_rational&lt; 2 &gt; &gt; &gt;</type></typedef>
</namespace>
</namespace>
</namespace>
</header>
<header name="boost/units/base_units/metric/knot.hpp">
<namespace name="boost">
<namespace name="units">
<namespace name="metric">
<struct name="knot_base_unit"><inherit access="public">boost::units::base_unit&lt; knot_base_unit, boost::units::si::velocity::dimension_type,-403 &gt;</inherit><method-group name="public static functions">
<method name="name" specifiers="static"><type>const char *</type></method>
<method name="symbol" specifiers="static"><type>const char *</type></method>
</method-group>
</struct></namespace>
</namespace>
</namespace>
</header>
<header name="boost/units/base_units/metric/liter.hpp">
<namespace name="boost">
<namespace name="units">
<namespace name="metric">
<struct name="liter_base_unit"><inherit access="public">boost::units::base_unit&lt; liter_base_unit, si::volume::dimension_type, 13 &gt;</inherit><method-group name="public static functions">
<method name="name" specifiers="static"><type>const char *</type></method>
<method name="symbol" specifiers="static"><type>const char *</type></method>
</method-group>
</struct></namespace>
</namespace>
</namespace>
</header>
<header name="boost/units/base_units/metric/micron.hpp">
<namespace name="boost">
<namespace name="units">
<struct-specialization name="base_unit_info"><template>
    </template><specialization><template-arg>metric::micron_base_unit</template-arg></specialization><method-group name="public static functions">
<method name="name" specifiers="static"><type>const char *</type></method>
<method name="symbol" specifiers="static"><type>const char *</type></method>
</method-group>
</struct-specialization><namespace name="metric">
<typedef name="micron_base_unit"><type>scaled_base_unit&lt; boost::units::si::meter_base_unit, scale&lt; 10, static_rational&lt;-6 &gt; &gt; &gt;</type></typedef>
</namespace>
</namespace>
</namespace>
</header>
<header name="boost/units/base_units/metric/minute.hpp">
<namespace name="boost">
<namespace name="units">
<struct-specialization name="base_unit_info"><template>
    </template><specialization><template-arg>metric::minute_base_unit</template-arg></specialization><method-group name="public static functions">
<method name="name" specifiers="static"><type>const char *</type></method>
<method name="symbol" specifiers="static"><type>const char *</type></method>
</method-group>
</struct-specialization><namespace name="metric">
<typedef name="minute_base_unit"><type>scaled_base_unit&lt; boost::units::si::second_base_unit, scale&lt; 60, static_rational&lt; 1 &gt; &gt; &gt;</type></typedef>
</namespace>
</namespace>
</namespace>
</header>
<header name="boost/units/base_units/metric/mmHg.hpp">
<namespace name="boost">
<namespace name="units">
<namespace name="metric">
<struct name="mmHg_base_unit"><inherit access="public">boost::units::base_unit&lt; mmHg_base_unit, si::pressure::dimension_type,-404 &gt;</inherit><method-group name="public static functions">
<method name="name" specifiers="static"><type>const char *</type></method>
<method name="symbol" specifiers="static"><type>const char *</type></method>
</method-group>
</struct></namespace>
</namespace>
</namespace>
</header>
<header name="boost/units/base_units/metric/nautical_mile.hpp">
<namespace name="boost">
<namespace name="units">
<struct-specialization name="base_unit_info"><template>
    </template><specialization><template-arg>metric::nautical_mile_base_unit</template-arg></specialization><method-group name="public static functions">
<method name="name" specifiers="static"><type>const char *</type></method>
<method name="symbol" specifiers="static"><type>const char *</type></method>
</method-group>
</struct-specialization><namespace name="metric">
<typedef name="nautical_mile_base_unit"><type>scaled_base_unit&lt; boost::units::si::meter_base_unit, scale&lt; 1852, static_rational&lt; 1 &gt; &gt; &gt;</type></typedef>
</namespace>
</namespace>
</namespace>
</header>
<header name="boost/units/base_units/metric/ton.hpp">
<namespace name="boost">
<namespace name="units">
<struct-specialization name="base_unit_info"><template>
    </template><specialization><template-arg>metric::ton_base_unit</template-arg></specialization><method-group name="public static functions">
<method name="name" specifiers="static"><type>const char *</type></method>
<method name="symbol" specifiers="static"><type>const char *</type></method>
</method-group>
</struct-specialization><namespace name="metric">
<typedef name="ton_base_unit"><type>scaled_base_unit&lt; boost::units::si::kilogram_base_unit, scale&lt; 1000, static_rational&lt; 1 &gt; &gt; &gt;</type></typedef>
</namespace>
</namespace>
</namespace>
</header>
<header name="boost/units/base_units/metric/torr.hpp">
<namespace name="boost">
<namespace name="units">
<namespace name="metric">
<struct name="torr_base_unit"><inherit access="public">boost::units::base_unit&lt; torr_base_unit, si::pressure::dimension_type,-401 &gt;</inherit><method-group name="public static functions">
<method name="name" specifiers="static"><type>const char *</type></method>
<method name="symbol" specifiers="static"><type>const char *</type></method>
</method-group>
</struct></namespace>
</namespace>
</namespace>
</header>
<header name="boost/units/base_units/metric/year.hpp">
<namespace name="boost">
<namespace name="units">
<struct-specialization name="base_unit_info"><template>
    </template><specialization><template-arg>metric::year_base_unit</template-arg></specialization><method-group name="public static functions">
<method name="name" specifiers="static"><type>const char *</type></method>
<method name="symbol" specifiers="static"><type>const char *</type></method>
</method-group>
</struct-specialization><namespace name="metric">
<typedef name="year_base_unit"><type>scaled_base_unit&lt; boost::units::si::second_base_unit, scale&lt; 31557600, static_rational&lt; 1 &gt; &gt; &gt;</type></typedef>
</namespace>
</namespace>
</namespace>
</header>
</library-reference>