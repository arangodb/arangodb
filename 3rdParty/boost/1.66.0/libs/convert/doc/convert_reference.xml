<?xml version="1.0" standalone="yes"?>
<library-reference id="boost_convert_c___reference"><title>Boost.Convert C++ Reference</title><header name="boost/convert.hpp">
<namespace name="boost">
<namespace name="cnv">
<struct name="reference"><template>
      <template-type-parameter name=""/>
      <template-type-parameter name=""/>
      <template-type-parameter name=""/>
    </template><typedef name="this_type"><type><classname>reference</classname></type></typedef>
<method-group name="public member functions">
<method name="value_or"><type><classname>this_type</classname> &amp;</type><parameter name="fallback"><paramtype>TypeOut const &amp;</paramtype></parameter></method>
<method name="operator()"><type>TypeOut</type><parameter name="value_in"><paramtype>TypeIn const &amp;</paramtype></parameter></method>
</method-group>
<constructor><parameter name="cnv"><paramtype>Converter const &amp;</paramtype></parameter></constructor>
</struct><struct-specialization name="reference"><template>
      <template-type-parameter name="Converter"/>
      <template-type-parameter name="TypeOut"/>
    </template><specialization><template-arg>Converter</template-arg><template-arg>TypeOut</template-arg><template-arg>void</template-arg></specialization><typedef name="this_type"><type><classname>reference</classname></type></typedef>
<method-group name="public member functions">
<method name="value_or"><type><classname>this_type</classname> &amp;</type><parameter name="fallback"><paramtype>TypeOut const &amp;</paramtype></parameter></method>
<method name="operator()"><type>TypeOut</type><template>
          <template-type-parameter name="TypeIn"/>
        </template><parameter name="value_in"><paramtype>TypeIn const &amp;</paramtype></parameter></method>
</method-group>
<constructor><parameter name="cnv"><paramtype>Converter const &amp;</paramtype></parameter></constructor>
</struct-specialization><function name="apply"><type><classname>reference</classname>&lt; Converter, TypeOut, TypeIn &gt;</type><template>
          <template-type-parameter name="TypeOut"/>
          <template-type-parameter name="TypeIn"/>
          <template-type-parameter name="Converter"/>
        </template><parameter name="cnv"><paramtype>Converter const &amp;</paramtype></parameter><purpose>Boost.Convert deployment interface with algorithms. </purpose><description><para>For example, <programlisting language="c++">boost::array&lt;char const*, 3&gt; strs = {{ " 5", "0XF", "not an int" }};
std::vector&lt;int&gt;             ints;
<classname alt="boost::cnv::basic_stream">boost::cnv::cstream</classname>           cnv;

cnv(std::hex)(std::skipws);

std::transform(
    strs.begin(),
    strs.end(),
    std::back_inserter(ints),
    boost::cnv::apply&lt;int&gt;(boost::cref(cnv)).value_or(-1));
</programlisting> </para></description></function>
<function name="apply"><type><classname>reference</classname>&lt; Converter, TypeOut, void &gt;</type><template>
          <template-type-parameter name="TypeOut"/>
          <template-type-parameter name="Converter"/>
        </template><parameter name="cnv"><paramtype>Converter const &amp;</paramtype></parameter></function>
</namespace>
<data-member name="throw_on_failure"><type><emphasis>unspecified</emphasis></type><description><para>boost::throw_on_failure is the 'tag' object to request the exception-throwing behavior. </para></description></data-member>
<function name="convert"><type>boost::optional&lt; TypeOut &gt;</type><template>
          <template-type-parameter name="TypeOut"/>
          <template-type-parameter name="TypeIn"/>
          <template-type-parameter name="Converter"/>
        </template><parameter name="value_in"><paramtype>TypeIn const &amp;</paramtype><description><para>Value of the TypeIn type to be converted to the TypeOut type </para></description></parameter><parameter name="converter"><paramtype>Converter const &amp;</paramtype><description><para>Converter to be used for conversion </para></description></parameter><purpose>Boost.Convert main deployment interface. </purpose><description><para>

For example, <programlisting language="c++"><classname alt="boost::cnv::basic_stream">boost::cnv::cstream</classname> cnv;

boost::optional&lt;int&gt;    i = boost::convert&lt;int&gt;("12", cnv);
boost::optional&lt;string&gt; s = boost::convert&lt;string&gt;(123.456, cnv);
</programlisting> </para></description><returns><para>boost::optional&lt;TypeOut&gt; result of conversion together with the indication of success or failure of the conversion request.</para></returns></function>
<function name="convert"><type>boost::optional&lt; TypeOut &gt;</type><template>
          <template-type-parameter name="TypeOut"/>
          <template-type-parameter name="TypeIn"/>
        </template><parameter name="value_in"><paramtype>TypeIn const &amp;</paramtype></parameter><purpose>Boost.Convert deployment interface with the default converter. </purpose><description><para>For example, <programlisting language="c++">struct boost::cnv::by_default : <classname alt="boost::cnv::basic_stream">boost::cnv::cstream</classname> {};

// boost::cnv::cstream (through boost::cnv::by_default) is deployed
// as the default converter when no converter is provided explicitly.
boost::optional&lt;int&gt;    i = boost::convert&lt;int&gt;("12");
boost::optional&lt;string&gt; s = boost::convert&lt;string&gt;(123.456);
</programlisting> </para></description></function>
<function name="convert"><type>TypeOut</type><template>
          <template-type-parameter name="TypeOut"/>
          <template-type-parameter name="TypeIn"/>
          <template-type-parameter name="Converter"/>
        </template><parameter name="value_in"><paramtype>TypeIn const &amp;</paramtype></parameter><parameter name="converter"><paramtype>Converter const &amp;</paramtype></parameter><parameter name=""><paramtype><emphasis>unspecified</emphasis></paramtype></parameter><purpose>Boost.Convert non-optional deployment interface. </purpose></function>
<function name="convert"><type>enable_if&lt; is_convertible&lt; Fallback, TypeOut &gt;, TypeOut &gt;::type</type><template>
          <template-type-parameter name="TypeOut"/>
          <template-type-parameter name="TypeIn"/>
          <template-type-parameter name="Converter"/>
          <template-type-parameter name="Fallback"/>
        </template><parameter name="value_in"><paramtype>TypeIn const &amp;</paramtype></parameter><parameter name="converter"><paramtype>Converter const &amp;</paramtype></parameter><parameter name="fallback"><paramtype>Fallback const &amp;</paramtype></parameter></function>
<function name="convert"><type>enable_if&lt; cnv::is_fun&lt; Fallback, TypeOut &gt;, TypeOut &gt;::type</type><template>
          <template-type-parameter name="TypeOut"/>
          <template-type-parameter name="TypeIn"/>
          <template-type-parameter name="Converter"/>
          <template-type-parameter name="Fallback"/>
        </template><parameter name="value_in"><paramtype>TypeIn const &amp;</paramtype></parameter><parameter name="converter"><paramtype>Converter const &amp;</paramtype></parameter><parameter name="fallback"><paramtype>Fallback</paramtype></parameter></function>

</namespace>
</header>
<header name="boost/convert/base.hpp">
<namespace name="boost">
<namespace name="cnv">
<struct name="cnvbase"><template>
      <template-type-parameter name=""/>
    </template><typedef name="this_type"><type><classname>cnvbase</classname></type></typedef>
<typedef name="int_type"><type>int</type></typedef>
<typedef name="uint_type"><type>unsigned int</type></typedef>
<typedef name="lint_type"><type>long int</type></typedef>
<typedef name="ulint_type"><type>unsigned long int</type></typedef>
<typedef name="sint_type"><type>short int</type></typedef>
<typedef name="usint_type"><type>unsigned short int</type></typedef>
<typedef name="llint_type"><type>long long int</type></typedef>
<typedef name="ullint_type"><type>unsigned long long int</type></typedef>
<typedef name="flt_type"><type>float</type></typedef>
<typedef name="dbl_type"><type>double</type></typedef>
<typedef name="ldbl_type"><type>long double</type></typedef>
<method-group name="public member functions">
<method name="operator()" cv="const"><type>void</type><template>
          <template-type-parameter name="type_in"/>
          <template-type-parameter name="type_out"/>
        </template><parameter name="in"><paramtype>type_in const &amp;</paramtype></parameter><parameter name="out"><paramtype>boost::optional&lt; type_out &gt; &amp;</paramtype></parameter></method>
<method name="BOOST_CNV_TO_STRING" cv="const"><type/><parameter name="v"><paramtype>int_type</paramtype></parameter><parameter name="r"><paramtype>optional&lt; string_type &gt; &amp;</paramtype></parameter></method>
<method name="BOOST_CNV_TO_STRING" cv="const"><type/><parameter name="v"><paramtype>uint_type</paramtype></parameter><parameter name="r"><paramtype>optional&lt; string_type &gt; &amp;</paramtype></parameter></method>
<method name="BOOST_CNV_TO_STRING" cv="const"><type/><parameter name="v"><paramtype>lint_type</paramtype></parameter><parameter name="r"><paramtype>optional&lt; string_type &gt; &amp;</paramtype></parameter></method>
<method name="BOOST_CNV_TO_STRING" cv="const"><type/><parameter name="v"><paramtype>llint_type</paramtype></parameter><parameter name="r"><paramtype>optional&lt; string_type &gt; &amp;</paramtype></parameter></method>
<method name="BOOST_CNV_TO_STRING" cv="const"><type/><parameter name="v"><paramtype>ulint_type</paramtype></parameter><parameter name="r"><paramtype>optional&lt; string_type &gt; &amp;</paramtype></parameter></method>
<method name="BOOST_CNV_TO_STRING" cv="const"><type/><parameter name="v"><paramtype>ullint_type</paramtype></parameter><parameter name="r"><paramtype>optional&lt; string_type &gt; &amp;</paramtype></parameter></method>
<method name="BOOST_CNV_TO_STRING" cv="const"><type/><parameter name="v"><paramtype>sint_type</paramtype></parameter><parameter name="r"><paramtype>optional&lt; string_type &gt; &amp;</paramtype></parameter></method>
<method name="BOOST_CNV_TO_STRING" cv="const"><type/><parameter name="v"><paramtype>usint_type</paramtype></parameter><parameter name="r"><paramtype>optional&lt; string_type &gt; &amp;</paramtype></parameter></method>
<method name="BOOST_CNV_TO_STRING" cv="const"><type/><parameter name="v"><paramtype>flt_type</paramtype></parameter><parameter name="r"><paramtype>optional&lt; string_type &gt; &amp;</paramtype></parameter></method>
<method name="BOOST_CNV_TO_STRING" cv="const"><type/><parameter name="v"><paramtype>dbl_type</paramtype></parameter><parameter name="r"><paramtype>optional&lt; string_type &gt; &amp;</paramtype></parameter></method>
<method name="BOOST_CNV_TO_STRING" cv="const"><type/><parameter name="v"><paramtype>ldbl_type</paramtype></parameter><parameter name="r"><paramtype>optional&lt; string_type &gt; &amp;</paramtype></parameter></method>
<method name="BOOST_CNV_STRING_TO" cv="const"><type/><parameter name="s"><paramtype>string_type const &amp;</paramtype></parameter><parameter name="r"><paramtype>optional&lt; int_type &gt; &amp;</paramtype></parameter></method>
<method name="BOOST_CNV_STRING_TO" cv="const"><type/><parameter name="s"><paramtype>string_type const &amp;</paramtype></parameter><parameter name="r"><paramtype>optional&lt; uint_type &gt; &amp;</paramtype></parameter></method>
<method name="BOOST_CNV_STRING_TO" cv="const"><type/><parameter name="s"><paramtype>string_type const &amp;</paramtype></parameter><parameter name="r"><paramtype>optional&lt; lint_type &gt; &amp;</paramtype></parameter></method>
<method name="BOOST_CNV_STRING_TO" cv="const"><type/><parameter name="s"><paramtype>string_type const &amp;</paramtype></parameter><parameter name="r"><paramtype>optional&lt; llint_type &gt; &amp;</paramtype></parameter></method>
<method name="BOOST_CNV_STRING_TO" cv="const"><type/><parameter name="s"><paramtype>string_type const &amp;</paramtype></parameter><parameter name="r"><paramtype>optional&lt; ulint_type &gt; &amp;</paramtype></parameter></method>
<method name="BOOST_CNV_STRING_TO" cv="const"><type/><parameter name="s"><paramtype>string_type const &amp;</paramtype></parameter><parameter name="r"><paramtype>optional&lt; ullint_type &gt; &amp;</paramtype></parameter></method>
<method name="BOOST_CNV_STRING_TO" cv="const"><type/><parameter name="s"><paramtype>string_type const &amp;</paramtype></parameter><parameter name="r"><paramtype>optional&lt; sint_type &gt; &amp;</paramtype></parameter></method>
<method name="BOOST_CNV_STRING_TO" cv="const"><type/><parameter name="s"><paramtype>string_type const &amp;</paramtype></parameter><parameter name="r"><paramtype>optional&lt; usint_type &gt; &amp;</paramtype></parameter></method>
<method name="BOOST_CNV_STRING_TO" cv="const"><type/><parameter name="s"><paramtype>string_type const &amp;</paramtype></parameter><parameter name="r"><paramtype>optional&lt; flt_type &gt; &amp;</paramtype></parameter></method>
<method name="BOOST_CNV_STRING_TO" cv="const"><type/><parameter name="s"><paramtype>string_type const &amp;</paramtype></parameter><parameter name="r"><paramtype>optional&lt; dbl_type &gt; &amp;</paramtype></parameter></method>
<method name="BOOST_CNV_STRING_TO" cv="const"><type/><parameter name="s"><paramtype>string_type const &amp;</paramtype></parameter><parameter name="r"><paramtype>optional&lt; ldbl_type &gt; &amp;</paramtype></parameter></method>
<method name="BOOST_CNV_PARAM"><type/><parameter name=""><paramtype><classname>base</classname></paramtype></parameter><parameter name="const"><paramtype>base::type</paramtype></parameter></method>
<method name="BOOST_CNV_PARAM"><type/><parameter name=""><paramtype><classname>adjust</classname></paramtype></parameter><parameter name="const"><paramtype>adjust::type</paramtype></parameter></method>
<method name="BOOST_CNV_PARAM"><type/><parameter name=""><paramtype>precision</paramtype></parameter><parameter name="const"><paramtype>int</paramtype></parameter></method>
<method name="BOOST_CNV_PARAM"><type/><parameter name=""><paramtype>precision</paramtype></parameter><parameter name=""><paramtype>int</paramtype></parameter></method>
<method name="BOOST_CNV_PARAM"><type/><parameter name=""><paramtype>uppercase</paramtype></parameter><parameter name="const"><paramtype>bool</paramtype></parameter></method>
<method name="BOOST_CNV_PARAM"><type/><parameter name=""><paramtype>skipws</paramtype></parameter><parameter name="const"><paramtype>bool</paramtype></parameter></method>
<method name="BOOST_CNV_PARAM"><type/><parameter name=""><paramtype>width</paramtype></parameter><parameter name="const"><paramtype>int</paramtype></parameter></method>
<method name="BOOST_CNV_PARAM"><type/><parameter name=""><paramtype>fill</paramtype></parameter><parameter name="const"><paramtype>char</paramtype></parameter></method>
</method-group>
<method-group name="protected member functions">
<method name="str_to_" cv="const"><type>void</type><template>
          <template-type-parameter name="string_type"/>
          <template-type-parameter name="out_type"/>
        </template><parameter name="str"><paramtype>string_type const &amp;</paramtype></parameter><parameter name="result_out"><paramtype>optional&lt; out_type &gt; &amp;</paramtype></parameter></method>
<method name="to_str_" cv="const"><type>void</type><template>
          <template-type-parameter name="in_type"/>
          <template-type-parameter name="string_type"/>
        </template><parameter name="value_in"><paramtype>in_type</paramtype></parameter><parameter name="result_out"><paramtype>optional&lt; string_type &gt; &amp;</paramtype></parameter></method>
<method name="dncast" cv="const"><type>derived_type const &amp;</type></method>
<method name="dncast"><type>derived_type &amp;</type></method>
</method-group>
<constructor/>
</struct>

</namespace>






</namespace>
<macro name="BOOST_CNV_TO_STRING"/>
<macro name="BOOST_CNV_STRING_TO"/>
<macro name="BOOST_CNV_PARAM" kind="functionlike"><macro-parameter name="param_name"/><macro-parameter name="param_type"/></macro>
</header>
<header name="boost/convert/lexical_cast.hpp">
<namespace name="boost">
<namespace name="cnv">
<struct name="lexical_cast"><purpose>boost::lexical_cast-based converter </purpose><description><para>The purpose of the converter is to<itemizedlist>
<listitem><para>Make use of the boost::lexical_cast functionality and performance that many people have become accustomed to and comfortable with;</para></listitem><listitem><para>Demonstrate how existing independent conversion/transformation-related facilities might be The converter can easily replace boost::lexical_cast, adding flexibility and convenience. </para></listitem></itemizedlist>
</para></description><method-group name="public member functions">
<method name="operator()" cv="const"><type>void</type><template>
          <template-type-parameter name="TypeOut"/>
          <template-type-parameter name="TypeIn"/>
        </template><parameter name="value_in"><paramtype>TypeIn const &amp;</paramtype></parameter><parameter name="result_out"><paramtype>boost::optional&lt; TypeOut &gt; &amp;</paramtype></parameter></method>
</method-group>
</struct>

</namespace>






</namespace>
</header>
<header name="boost/convert/parameters.hpp">
<namespace name="boost">
<namespace name="cnv">
<struct name="adjust"><enum name="type"><enumvalue name="left"/><enumvalue name="right"/><enumvalue name="center"/></enum>
</struct><struct name="base"><enum name="type"><enumvalue name="bin"><default>=2</default></enumvalue><enumvalue name="dec"><default>=10</default></enumvalue><enumvalue name="hex"><default>=16</default></enumvalue><enumvalue name="oct"><default>=8</default></enumvalue></enum>
</struct><struct name="notation"><enum name="type"><enumvalue name="fixed"/><enumvalue name="scientific"/></enum>
</struct><namespace name="parameter">
</namespace>


</namespace>






</namespace>
</header>
<header name="boost/convert/printf.hpp">
<namespace name="boost">
<namespace name="cnv">
<struct name="printf"><inherit access="public">boost::cnv::cnvbase&lt; boost::cnv::printf &gt;</inherit><typedef name="this_type"><type><classname>boost::cnv::printf</classname></type></typedef>
<typedef name="base_type"><type><classname>boost::cnv::cnvbase</classname>&lt; <classname>this_type</classname> &gt;</type></typedef>
<method-group name="public member functions">
<method name="to_str" cv="const"><type>cnv::range&lt; char * &gt;</type><template>
          <template-type-parameter name="in_type"/>
        </template><parameter name="value_in"><paramtype>in_type</paramtype></parameter><parameter name="buf"><paramtype>char *</paramtype></parameter></method>
<method name="str_to" cv="const"><type>void</type><template>
          <template-type-parameter name="string_type"/>
          <template-type-parameter name="out_type"/>
        </template><parameter name="range"><paramtype>cnv::range&lt; string_type &gt;</paramtype></parameter><parameter name="result_out"><paramtype>optional&lt; out_type &gt; &amp;</paramtype></parameter></method>
</method-group>
<method-group name="private member functions">
<method name="pos" cv="const"><type>int</type><template>
          <template-type-parameter name="Type"/>
        </template></method>
<method name="pformat" cv="const"><type>char const *</type><parameter name="pos"><paramtype>int</paramtype></parameter></method>
<method name="format" cv="const"><type>char const *</type><parameter name="pos"><paramtype>int</paramtype></parameter></method>
</method-group>
</struct>

</namespace>






</namespace>
</header>
<header name="boost/convert/spirit.hpp">
<namespace name="boost">
<namespace name="cnv">
<struct name="spirit"><inherit access="public">boost::cnv::cnvbase&lt; boost::cnv::spirit &gt;</inherit><typedef name="this_type"><type><classname>boost::cnv::spirit</classname></type></typedef>
<typedef name="base_type"><type><classname>boost::cnv::cnvbase</classname>&lt; <classname>this_type</classname> &gt;</type></typedef>
<method-group name="public member functions">
<method name="str_to" cv="const"><type>void</type><template>
          <template-type-parameter name="string_type"/>
          <template-type-parameter name="out_type"/>
        </template><parameter name="range"><paramtype>cnv::range&lt; string_type &gt;</paramtype></parameter><parameter name="result_out"><paramtype>optional&lt; out_type &gt; &amp;</paramtype></parameter></method>
<method name="to_str" cv="const"><type>cnv::range&lt; char_type * &gt;</type><template>
          <template-type-parameter name="in_type"/>
          <template-type-parameter name="char_type"/>
        </template><parameter name="value_in"><paramtype>in_type</paramtype></parameter><parameter name="beg"><paramtype>char_type *</paramtype></parameter></method>
</method-group>
</struct>

</namespace>






</namespace>
</header>
<header name="boost/convert/stream.hpp">
<namespace name="boost">
<namespace name="cnv">
<struct name="basic_stream"><template>
      <template-type-parameter name="Char"/>
    </template><inherit access="public">noncopyable</inherit><struct name="ibuffer_type"><inherit access="public">buffer_type</inherit><method-group name="public member functions">
</method-group>
<constructor><parameter name="beg"><paramtype>char_type const *</paramtype></parameter><parameter name="sz"><paramtype>std::size_t</paramtype></parameter></constructor>
</struct><struct name="obuffer_type"><inherit access="public">buffer_type</inherit></struct><typedef name="char_type"><type>Char</type></typedef>
<typedef name="this_type"><type><classname>boost::cnv::basic_stream</classname>&lt; char_type &gt;</type></typedef>
<typedef name="stream_type"><type>std::basic_stringstream&lt; char_type &gt;</type></typedef>
<typedef name="istream_type"><type>std::basic_istream&lt; char_type &gt;</type></typedef>
<typedef name="buffer_type"><type>std::basic_streambuf&lt; char_type &gt;</type></typedef>
<typedef name="stdstr_type"><type>std::basic_string&lt; char_type &gt;</type></typedef>
<typedef name="manipulator_type"><type>std::ios_base &amp;(*</type></typedef>
<method-group name="public member functions">
<method name="BOOST_CNV_STRING_ENABLE" cv="const"><type/><parameter name="v"><paramtype>type const &amp;</paramtype></parameter><parameter name="s"><paramtype>optional&lt; string_type &gt; &amp;</paramtype></parameter></method>
<method name="BOOST_CNV_STRING_ENABLE" cv="const"><type/><parameter name="s"><paramtype>string_type const &amp;</paramtype></parameter><parameter name="r"><paramtype>optional&lt; type &gt; &amp;</paramtype></parameter></method>
<method name="operator()" cv="const"><type>void</type><template>
          <template-type-parameter name="type"/>
        </template><parameter name="s"><paramtype>char_type const *</paramtype></parameter><parameter name="r"><paramtype>optional&lt; type &gt; &amp;</paramtype></parameter></method>
<method name="operator()" cv="const"><type>void</type><template>
          <template-type-parameter name="type"/>
        </template><parameter name="s"><paramtype>stdstr_type const &amp;</paramtype></parameter><parameter name="r"><paramtype>optional&lt; type &gt; &amp;</paramtype></parameter></method>
<method name="operator()"><type><classname>this_type</classname> &amp;</type><template>
          <template-type-parameter name="manipulator"/>
        </template><parameter name="m"><paramtype>manipulator</paramtype></parameter></method>
<method name="operator()"><type><classname>this_type</classname> &amp;</type><parameter name="m"><paramtype>manipulator_type</paramtype></parameter></method>
<method name="operator()"><type><classname>this_type</classname> &amp;</type><parameter name="l"><paramtype>std::locale const &amp;</paramtype></parameter></method>
<method name="BOOST_CNV_PARAM"><type/><parameter name=""><paramtype>locale</paramtype></parameter><parameter name="const"><paramtype>std::locale</paramtype></parameter></method>
<method name="BOOST_CNV_PARAM"><type/><parameter name=""><paramtype>precision</paramtype></parameter><parameter name="const"><paramtype>int</paramtype></parameter></method>
<method name="BOOST_CNV_PARAM"><type/><parameter name=""><paramtype>precision</paramtype></parameter><parameter name=""><paramtype>int</paramtype></parameter></method>
<method name="BOOST_CNV_PARAM"><type/><parameter name=""><paramtype>width</paramtype></parameter><parameter name="const"><paramtype>int</paramtype></parameter></method>
<method name="BOOST_CNV_PARAM"><type/><parameter name=""><paramtype>fill</paramtype></parameter><parameter name="const"><paramtype>char</paramtype></parameter></method>
<method name="BOOST_CNV_PARAM"><type/><parameter name=""><paramtype>uppercase</paramtype></parameter><parameter name="const"><paramtype>bool</paramtype></parameter></method>
<method name="BOOST_CNV_PARAM"><type/><parameter name=""><paramtype>skipws</paramtype></parameter><parameter name="const"><paramtype>bool</paramtype></parameter></method>
<method name="BOOST_CNV_PARAM"><type/><parameter name=""><paramtype><classname>adjust</classname></paramtype></parameter><parameter name="const"><paramtype>boost::cnv::adjust::type</paramtype></parameter></method>
<method name="BOOST_CNV_PARAM"><type/><parameter name=""><paramtype><classname>base</classname></paramtype></parameter><parameter name="const"><paramtype>boost::cnv::base::type</paramtype></parameter></method>
<method name="BOOST_CNV_PARAM"><type/><parameter name=""><paramtype><classname>notation</classname></paramtype></parameter><parameter name="const"><paramtype>boost::cnv::notation::type</paramtype></parameter></method>
<method name="to_str" cv="const"><type>void</type><template>
          <template-type-parameter name="string_type"/>
          <template-type-parameter name="in_type"/>
        </template><parameter name="value_in"><paramtype>in_type const &amp;</paramtype></parameter><parameter name="string_out"><paramtype>boost::optional&lt; string_type &gt; &amp;</paramtype></parameter></method>
<method name="str_to" cv="const"><type>void</type><template>
          <template-type-parameter name="string_type"/>
          <template-type-parameter name="out_type"/>
        </template><parameter name="string_in"><paramtype>boost::cnv::range&lt; string_type &gt;</paramtype></parameter><parameter name="result_out"><paramtype>boost::optional&lt; out_type &gt; &amp;</paramtype></parameter></method>
</method-group>
<constructor/>
<constructor><parameter name="other"><paramtype><classname>this_type</classname> &amp;&amp;</paramtype></parameter></constructor>
<method-group name="private member functions">
<method name="str_to" cv="const"><type>void</type><template>
          <template-type-parameter name="string_type"/>
          <template-type-parameter name="out_type"/>
        </template><parameter name=""><paramtype>cnv::range&lt; string_type &gt;</paramtype></parameter><parameter name=""><paramtype>optional&lt; out_type &gt; &amp;</paramtype></parameter></method>
<method name="to_str" cv="const"><type>void</type><template>
          <template-type-parameter name="string_type"/>
          <template-type-parameter name="in_type"/>
        </template><parameter name=""><paramtype>in_type const &amp;</paramtype></parameter><parameter name=""><paramtype>optional&lt; string_type &gt; &amp;</paramtype></parameter></method>
</method-group>
</struct><typedef name="cstream"><type><classname>boost::cnv::basic_stream</classname>&lt; char &gt;</type></typedef>
<typedef name="wstream"><type><classname>boost::cnv::basic_stream</classname>&lt; wchar_t &gt;</type></typedef>


</namespace>






</namespace>
<macro name="BOOST_CNV_STRING_ENABLE"/>
<macro name="BOOST_CNV_PARAM" kind="functionlike"><macro-parameter name="PARAM_NAME"/><macro-parameter name="PARAM_TYPE"/></macro>
</header>
<header name="boost/convert/strtol.hpp">
<namespace name="boost">
<namespace name="cnv">
<struct name="strtol"><inherit access="public">boost::cnv::cnvbase&lt; boost::cnv::strtol &gt;</inherit><purpose>std::strtol-based extended converter </purpose><description><para>The converter offers a fairly decent overall performance and moderate formatting facilities. </para></description><typedef name="this_type"><type><classname>boost::cnv::strtol</classname></type></typedef>
<typedef name="base_type"><type><classname>boost::cnv::cnvbase</classname>&lt; <classname>this_type</classname> &gt;</type></typedef>
<method-group name="private member functions">
<method name="str_to" cv="const"><type>void</type><template>
          <template-type-parameter name="string_type"/>
        </template><parameter name="v"><paramtype>cnv::range&lt; string_type &gt;</paramtype></parameter><parameter name="r"><paramtype>optional&lt; int_type &gt; &amp;</paramtype></parameter></method>
<method name="str_to" cv="const"><type>void</type><template>
          <template-type-parameter name="string_type"/>
        </template><parameter name="v"><paramtype>cnv::range&lt; string_type &gt;</paramtype></parameter><parameter name="r"><paramtype>optional&lt; sint_type &gt; &amp;</paramtype></parameter></method>
<method name="str_to" cv="const"><type>void</type><template>
          <template-type-parameter name="string_type"/>
        </template><parameter name="v"><paramtype>cnv::range&lt; string_type &gt;</paramtype></parameter><parameter name="r"><paramtype>optional&lt; lint_type &gt; &amp;</paramtype></parameter></method>
<method name="str_to" cv="const"><type>void</type><template>
          <template-type-parameter name="string_type"/>
        </template><parameter name="v"><paramtype>cnv::range&lt; string_type &gt;</paramtype></parameter><parameter name="r"><paramtype>optional&lt; llint_type &gt; &amp;</paramtype></parameter></method>
<method name="str_to" cv="const"><type>void</type><template>
          <template-type-parameter name="string_type"/>
        </template><parameter name="v"><paramtype>cnv::range&lt; string_type &gt;</paramtype></parameter><parameter name="r"><paramtype>optional&lt; uint_type &gt; &amp;</paramtype></parameter></method>
<method name="str_to" cv="const"><type>void</type><template>
          <template-type-parameter name="string_type"/>
        </template><parameter name="v"><paramtype>cnv::range&lt; string_type &gt;</paramtype></parameter><parameter name="r"><paramtype>optional&lt; usint_type &gt; &amp;</paramtype></parameter></method>
<method name="str_to" cv="const"><type>void</type><template>
          <template-type-parameter name="string_type"/>
        </template><parameter name="v"><paramtype>cnv::range&lt; string_type &gt;</paramtype></parameter><parameter name="r"><paramtype>optional&lt; ulint_type &gt; &amp;</paramtype></parameter></method>
<method name="str_to" cv="const"><type>void</type><template>
          <template-type-parameter name="string_type"/>
        </template><parameter name="v"><paramtype>cnv::range&lt; string_type &gt;</paramtype></parameter><parameter name="r"><paramtype>optional&lt; ullint_type &gt; &amp;</paramtype></parameter></method>
<method name="str_to" cv="const"><type>void</type><template>
          <template-type-parameter name="string_type"/>
        </template><parameter name="v"><paramtype>cnv::range&lt; string_type &gt;</paramtype></parameter><parameter name="r"><paramtype>optional&lt; flt_type &gt; &amp;</paramtype></parameter></method>
<method name="str_to" cv="const"><type>void</type><template>
          <template-type-parameter name="string_type"/>
        </template><parameter name="v"><paramtype>cnv::range&lt; string_type &gt;</paramtype></parameter><parameter name="r"><paramtype>optional&lt; dbl_type &gt; &amp;</paramtype></parameter></method>
<method name="str_to" cv="const"><type>void</type><template>
          <template-type-parameter name="string_type"/>
        </template><parameter name="v"><paramtype>cnv::range&lt; string_type &gt;</paramtype></parameter><parameter name="r"><paramtype>optional&lt; ldbl_type &gt; &amp;</paramtype></parameter></method>
<method name="to_str" cv="const"><type>cnv::range&lt; char_type * &gt;</type><template>
          <template-type-parameter name="char_type"/>
        </template><parameter name="v"><paramtype>int_type</paramtype></parameter><parameter name="buf"><paramtype>char_type *</paramtype></parameter></method>
<method name="to_str" cv="const"><type>cnv::range&lt; char_type * &gt;</type><template>
          <template-type-parameter name="char_type"/>
        </template><parameter name="v"><paramtype>uint_type</paramtype></parameter><parameter name="buf"><paramtype>char_type *</paramtype></parameter></method>
<method name="to_str" cv="const"><type>cnv::range&lt; char_type * &gt;</type><template>
          <template-type-parameter name="char_type"/>
        </template><parameter name="v"><paramtype>lint_type</paramtype></parameter><parameter name="buf"><paramtype>char_type *</paramtype></parameter></method>
<method name="to_str" cv="const"><type>cnv::range&lt; char_type * &gt;</type><template>
          <template-type-parameter name="char_type"/>
        </template><parameter name="v"><paramtype>ulint_type</paramtype></parameter><parameter name="buf"><paramtype>char_type *</paramtype></parameter></method>
<method name="to_str" cv="const"><type>cnv::range&lt; char_type * &gt;</type><template>
          <template-type-parameter name="char_type"/>
        </template><parameter name="v"><paramtype>llint_type</paramtype></parameter><parameter name="buf"><paramtype>char_type *</paramtype></parameter></method>
<method name="to_str" cv="const"><type>cnv::range&lt; char_type * &gt;</type><template>
          <template-type-parameter name="char_type"/>
        </template><parameter name="v"><paramtype>ullint_type</paramtype></parameter><parameter name="buf"><paramtype>char_type *</paramtype></parameter></method>
<method name="to_str" cv="const"><type>cnv::range&lt; char_type * &gt;</type><template>
          <template-type-parameter name="char_type"/>
        </template><parameter name="v"><paramtype>dbl_type</paramtype></parameter><parameter name="buf"><paramtype>char_type *</paramtype></parameter></method>
<method name="i_to_str" cv="const"><type>cnv::range&lt; char_type * &gt;</type><template>
          <template-type-parameter name="char_type"/>
          <template-type-parameter name="in_type"/>
        </template><parameter name=""><paramtype>in_type</paramtype></parameter><parameter name=""><paramtype>char_type *</paramtype></parameter></method>
<method name="str_to_i" cv="const"><type>void</type><template>
          <template-type-parameter name="string_type"/>
          <template-type-parameter name="out_type"/>
        </template><parameter name=""><paramtype>cnv::range&lt; string_type &gt;</paramtype></parameter><parameter name=""><paramtype>optional&lt; out_type &gt; &amp;</paramtype></parameter></method>
<method name="str_to_d" cv="const"><type>void</type><template>
          <template-type-parameter name="string_type"/>
          <template-type-parameter name="out_type"/>
        </template><parameter name=""><paramtype>cnv::range&lt; string_type &gt;</paramtype></parameter><parameter name=""><paramtype>optional&lt; out_type &gt; &amp;</paramtype></parameter></method>
</method-group>
<method-group name="private static functions">
<method name="adjust_fraction" specifiers="static"><type>double</type><parameter name=""><paramtype>double</paramtype></parameter><parameter name=""><paramtype>int</paramtype></parameter></method>
<method name="get_char" specifiers="static"><type>int</type><parameter name="v"><paramtype>int</paramtype></parameter></method>
</method-group>
<method-group name="public member functions">
<method name="i_to_str" cv="const"><type>boost::cnv::range&lt; char_type * &gt;</type><template>
          <template-type-parameter name="char_type"/>
          <template-type-parameter name="Type"/>
        </template><parameter name="in_value"><paramtype>Type</paramtype></parameter><parameter name="buf"><paramtype>char_type *</paramtype></parameter></method>
<method name="to_str" cv="const"><type>boost::cnv::range&lt; char_type * &gt;</type><template>
          <template-type-parameter name="char_type"/>
        </template><parameter name="value"><paramtype>double</paramtype></parameter><parameter name="buf"><paramtype>char_type *</paramtype></parameter></method>
<method name="str_to_i" cv="const"><type>void</type><template>
          <template-type-parameter name="string_type"/>
          <template-type-parameter name="out_type"/>
        </template><parameter name="range"><paramtype>cnv::range&lt; string_type &gt;</paramtype></parameter><parameter name="result_out"><paramtype>boost::optional&lt; out_type &gt; &amp;</paramtype></parameter></method>
</method-group>
</struct>

</namespace>






</namespace>
</header>
<header name="boost/make_default.hpp">
<namespace name="boost">





<function name="make_default"><type>T</type><template>
          <template-type-parameter name="T"/>
        </template><description><para>A considerable number of libraries require an instance of a class provided (storage created and initialized). For example, <programlisting language="c++">Type result;
...
istream &gt;&gt; result;
</programlisting> In generic code that results in the Default Constructibility requirement imposed on every type 'Type' to be used with the respective code. Inevitably, that requirement a) either excludes all the classes that for various reasons do not meet that requirement or b) imposes certain (not necessarily desirable) design/implementation onto respective classes.</para><para>Deployment of boost::make_default() eliminates the Default Constructibility requirement with <programlisting language="c++">Type result = boost::make_default&lt;Type&gt;();
...
istream &gt;&gt; result;
</programlisting> Classes with no default constructor can now be included via a boost::make_default() specialization: <programlisting language="c++">namespace boost
{
    template&lt;&gt; inline Type make_default&lt;Type&gt;() { return Type(parameters); }
}
</programlisting> </para></description></function>
</namespace>
</header>
</library-reference>