[/
 / Copyright (c) 2009-20012 Vicente J. Botet Escriba
 /
 / Distributed under the Boost Software License, Version 1.0. (See accompanying
 / file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
 /]


[/===================]
[/section Description]
[/===================]


[/ /////////////////////////////////////////////////////
[heading Stopwatch/Stopclocks framework]

On top of the core facilities, __Boost_Chrono provides:

Stopwatches: Some facility to measure elapsed time with the ability to start, stop, suspend, or resume measurement.

* __StrictStopwatch, __Stopwatch, __SuspendableStopwatch concepts.
* __strict_stopwatch, model of __StrictStopwatch capturing elapsed __Clock times.
* __laps_stopwatch, model of __Stopwatch allowing in addition to start and stop the capture of elapsed __Clock times.
* __suspendable_stopwatch, model of __SuspendableStopwatch allowing in addition to suspend and resume the capture of elapsed __Clock times.
* __laps_stopwatch and __suspendable_stopwatch have __LapsCollector template parameter that allows to store information of the samples defined by a cycle start-stop.

Stopclocks: a complete time reporting package that can be invoked in a single line of code.

* __stopwatch_reporter`<__Stopwatch,__Formatter>`, convenient reporting to an output stream (including wide char streams) of the elapsed time of models of __Stopwatch results.
* Some basic __Formatters.
* `__strict_stopclock<__Clock>` shortcut of `__stopwatch_reporter<__strict_stopwatch<__Clock>>`
* `__stopclock<__Clock>` shortcut of `__stopwatch_reporter<__stopwatch<__Clock>>`
* `__suspendable_stopclock<__Clock>` shortcut of `__stopwatch_reporter<__suspendable_stopwatch<__Clock>>`

] [/////////////////////////////////////////////////////]


