# Copyright Daryle Walker, Hubert Holin, John Maddock 2006 - 2007
# copyright Paul A. Bristow 2006 - 2010
# Distributed under the Boost Software License, Version 1.0.
# (See accompanying file LICENSE_1_0.txt or copy at
# http://www.boost.org/LICENSE_1_0.txt.
# \math_toolkit\libs\math\test\jamfile.v2
# Runs all math toolkit tests, functions & distributions,
# and build math examples.

# bring in the rules for testing
import testing ;
import modules ;
import path ;
import pch ;
import ../../config/checks/config : requires ;

local ntl-path = [ modules.peek : NTL_PATH ] ;
local gmp_path = [ modules.peek : GMP_PATH ] ;
local e_float_path = [ modules.peek : E_FLOAT_PATH ] ;

#
# PCH support is broken when --remove-test-targets is specified on the command
# line.  Disable it until someone fixes this.
#
local remove-test-targets = [ MATCH (--remove-test-targets) : [ modules.peek : ARGV ] ] ;

if $(remove-test-targets)
{
   OBJ_REMOVAL_OPTIONS = <pch>off ;
}

obj no_eh : noeh_support.cpp ;


project
    : requirements
      $(OBJ_REMOVAL_OPTIONS)
      <toolset>acc:<cxxflags>+W2068,2461,2236,4070,4069
      <toolset>intel-win:<cxxflags>-nologo
      <toolset>intel-win:<linkflags>-nologo
      #<toolset>intel-linux:<pch>off
      <toolset>intel-darwin:<pch>off
      <toolset>msvc:<warnings>all
      <toolset>msvc:<asynch-exceptions>on
      <toolset>msvc:<cxxflags>/wd4996
      <toolset>msvc:<cxxflags>/wd4511 # copy constructor could not be generated
      <toolset>msvc:<cxxflags>/wd4512
      <toolset>msvc:<cxxflags>/wd4610
      <toolset>msvc:<cxxflags>/wd4510
      <toolset>msvc:<cxxflags>/wd4127
      <toolset>msvc:<cxxflags>/wd4459
      <toolset>msvc:<cxxflags>/wd4701 # needed for lexical cast - temporary.
      <toolset>msvc:<cxxflags>/wd4189 # local variable is initialized but not referenced
      <toolset>msvc-7.1:<source>../vc71_fix//vc_fix
      <toolset>msvc-7.1:<pch>off
      <toolset>clang-6.0.0:<pch>off  # added to see effect.
      <toolset>gcc,<target-os>windows:<pch>off
      <toolset>borland:<runtime-link>static
      # <toolset>msvc:<cxxflags>/wd4506 has no effect?
      # suppress xstring(237) : warning C4506: no definition for inline function
      <include>../../..
      <source>../../regex/build//boost_regex
      <exception-handling>off:<source>no_eh
      <link>shared:<define>BOOST_REGEX_DYN_LINK=1
      # For simplicities sake, make everything a static lib:
      <link>static
      <define>BOOST_ALL_NO_LIB=1
      <define>BOOST_UBLAS_UNSUPPORTED_COMPILER=0
      <include>.
      <include>../include_private
      <include>$(ntl-path)/include
      <include>$(e_float_path)
      <include>$(gmp_path) <include>$(gmp_path)/mpfr <include>$(gmp_path)/gmpfrxx <include>$(gmp_path)/mpfrc++
      <search>$(gmp_path)
      <search>$(mpfr_path)
      <search>$(mpfr_path)/build.vc10/lib/Win32/Debug
    ;

if $(ntl-path)
{
   lib ntl : [ GLOB $(ntl-path)/src : *.cpp ] ;
}
else
{
   lib ntl ;
}

explicit ntl ;

cpp-pch pch : pch.hpp : <use>../../test/build//boost_unit_test_framework ;
cpp-pch pch_light : pch_light.hpp : <use>../../test/build//boost_unit_test_framework ;
lib compile_test_main : compile_test/main.cpp ;

test-suite special_fun :
   [ run hypot_test.cpp test_instances//test_instances pch_light ../../test/build//boost_unit_test_framework ]
   [ run pow_test.cpp ../../test/build//boost_unit_test_framework ]
   [ run log1p_expm1_test.cpp test_instances//test_instances pch_light ../../test/build//boost_unit_test_framework  ]
   [ run powm1_sqrtp1m1_test.cpp test_instances//test_instances pch_light ../../test/build//boost_unit_test_framework  ]
   [ run special_functions_test.cpp ../../test/build//boost_unit_test_framework  ]
   [ run test_airy.cpp test_instances//test_instances pch_light ../../test/build//boost_unit_test_framework  ]
   [ run test_bessel_j.cpp test_instances//test_instances pch_light ../../test/build//boost_unit_test_framework  ]
   [ run test_bessel_y.cpp test_instances//test_instances pch_light ../../test/build//boost_unit_test_framework  ]
   [ run test_bessel_i.cpp test_instances//test_instances pch_light ../../test/build//boost_unit_test_framework  ]
   [ run test_bessel_k.cpp test_instances//test_instances pch_light ../../test/build//boost_unit_test_framework  ]
   [ run test_bessel_j_prime.cpp test_instances//test_instances pch_light ../../test/build//boost_unit_test_framework  ]
   [ run test_bessel_y_prime.cpp test_instances//test_instances pch_light ../../test/build//boost_unit_test_framework  ]
   [ run test_bessel_i_prime.cpp test_instances//test_instances pch_light ../../test/build//boost_unit_test_framework  ]
   [ run test_bessel_k_prime.cpp test_instances//test_instances pch_light ../../test/build//boost_unit_test_framework  ]
   [ run test_beta.cpp test_instances//test_instances pch_light ../../test/build//boost_unit_test_framework  ]
   [ run test_bessel_airy_zeros.cpp ../../test/build//boost_unit_test_framework  ]
   [ run test_bernoulli_constants.cpp ../../test/build//boost_unit_test_framework  ]
   [ run test_binomial_coeff.cpp pch ../../test/build//boost_unit_test_framework  ]
   [ run test_carlson.cpp test_instances//test_instances pch_light ../../test/build//boost_unit_test_framework
        : # command line
        : # input files
        : # requirements
        <define>TEST1
        : test_carlson_1  ]
   [ run test_carlson.cpp test_instances//test_instances pch_light ../../test/build//boost_unit_test_framework
        : # command line
        : # input files
        : # requirements
        <define>TEST2
      : test_carlson_2  ]
   [ run test_carlson.cpp test_instances//test_instances pch_light ../../test/build//boost_unit_test_framework
        : # command line
        : # input files
        : # requirements
        <define>TEST3
        : test_carlson_3  ]
   [ run test_carlson.cpp test_instances//test_instances pch_light ../../test/build//boost_unit_test_framework
        : # command line
        : # input files
        : # requirements
        <define>TEST4
        : test_carlson_4  ]
   [ run test_cbrt.cpp test_instances//test_instances pch_light ../../test/build//boost_unit_test_framework  ]
   [ run test_difference.cpp ../../test/build//boost_unit_test_framework  ]
   [ run test_digamma.cpp test_instances//test_instances pch_light ../../test/build//boost_unit_test_framework  ]
   [ run test_ellint_1.cpp test_instances//test_instances pch_light ../../test/build//boost_unit_test_framework  ]
   [ run test_ellint_2.cpp test_instances//test_instances pch_light ../../test/build//boost_unit_test_framework  ]
   [ run test_ellint_3.cpp test_instances//test_instances pch_light ../../test/build//boost_unit_test_framework  ]
   [ run test_ellint_d.cpp test_instances//test_instances pch_light ../../test/build//boost_unit_test_framework  ]
   [ run test_jacobi_zeta.cpp test_instances//test_instances pch_light ../../test/build//boost_unit_test_framework  ]
   [ run test_heuman_lambda.cpp test_instances//test_instances pch_light ../../test/build//boost_unit_test_framework  ]
   [ run test_erf.cpp test_instances//test_instances pch_light ../../test/build//boost_unit_test_framework  ]
   [ run test_expint.cpp test_instances//test_instances pch_light ../../test/build//boost_unit_test_framework  ]
   [ run test_factorials.cpp pch ../../test/build//boost_unit_test_framework  ]
   [ run test_gamma.cpp test_instances//test_instances pch_light ../../test/build//boost_unit_test_framework  ]
   [ run test_hankel.cpp ../../test/build//boost_unit_test_framework  ]
   [ run test_hermite.cpp test_instances//test_instances pch_light ../../test/build//boost_unit_test_framework  ]
   [ run test_ibeta.cpp  test_instances//test_instances pch_light ../../test/build//boost_unit_test_framework
        : # command line
        : # input files
        : # requirements
          <define>TEST_FLOAT
          <toolset>intel:<pch>off
        : test_ibeta_float  ]
   [ run test_ibeta.cpp  test_instances//test_instances pch_light ../../test/build//boost_unit_test_framework
        : # command line
        : # input files
        : # requirements
          <define>TEST_DOUBLE
          <toolset>intel:<pch>off
        : test_ibeta_double  ]
   [ run test_ibeta.cpp  test_instances//test_instances pch_light ../../test/build//boost_unit_test_framework
        : # command line
        : # input files
        : # requirements
          <define>TEST_LDOUBLE
          <toolset>intel:<pch>off
        : test_ibeta_long_double  ]
   [ run test_ibeta.cpp  test_instances//test_instances pch_light ../../test/build//boost_unit_test_framework
        : # command line
        : # input files
        : # requirements
          <define>TEST_REAL_CONCEPT
          <define>TEST_DATA=1
          <toolset>intel:<pch>off
        : test_ibeta_real_concept1  ]
   [ run test_ibeta.cpp  test_instances//test_instances pch_light ../../test/build//boost_unit_test_framework
        : # command line
        : # input files
        : # requirements
          <define>TEST_REAL_CONCEPT
          <define>TEST_DATA=2
          <toolset>intel:<pch>off
        : test_ibeta_real_concept2  ]
   [ run test_ibeta.cpp  test_instances//test_instances pch_light ../../test/build//boost_unit_test_framework
        : # command line
        : # input files
        : # requirements
          <define>TEST_REAL_CONCEPT
          <define>TEST_DATA=3
          <toolset>intel:<pch>off
        : test_ibeta_real_concept3  ]
   [ run test_ibeta.cpp  test_instances//test_instances pch_light ../../test/build//boost_unit_test_framework
        : # command line
        : # input files
        : # requirements
          <define>TEST_REAL_CONCEPT
          <define>TEST_DATA=4
          <toolset>intel:<pch>off
        : test_ibeta_real_concept4  ]

   [ run test_ibeta_derivative.cpp  test_instances//test_instances pch_light ../../test/build//boost_unit_test_framework
        : # command line
        : # input files
        : # requirements
          <define>TEST_FLOAT
          <toolset>intel:<pch>off
          <toolset>gcc:<cxxflags>-Wno-overflow
        : test_ibeta_derivative_float  ]
   [ run test_ibeta_derivative.cpp  test_instances//test_instances pch_light ../../test/build//boost_unit_test_framework
        : # command line
        : # input files
        : # requirements
          <define>TEST_DOUBLE
          <toolset>intel:<pch>off
          <toolset>gcc:<cxxflags>-Wno-overflow
        : test_ibeta_derivative_double  ]
   [ run test_ibeta_derivative.cpp  test_instances//test_instances pch_light ../../test/build//boost_unit_test_framework
        : # command line
        : # input files
        : # requirements
          <define>TEST_LDOUBLE
          <toolset>intel:<pch>off
          <toolset>gcc:<cxxflags>-Wno-overflow
        : test_ibeta_derivative_long_double  ]
   [ run test_ibeta_derivative.cpp  test_instances//test_instances pch_light ../../test/build//boost_unit_test_framework
        : # command line
        : # input files
        : # requirements
          <define>TEST_REAL_CONCEPT
          <define>TEST_DATA=1
          <toolset>intel:<pch>off
          <toolset>gcc:<cxxflags>-Wno-overflow
        : test_ibeta_derivative_real_concept1  ]
   [ run test_ibeta_derivative.cpp  test_instances//test_instances pch_light ../../test/build//boost_unit_test_framework
        : # command line
        : # input files
        : # requirements
          <define>TEST_REAL_CONCEPT
          <define>TEST_DATA=2
          <toolset>intel:<pch>off
          <toolset>gcc:<cxxflags>-Wno-overflow
        : test_ibeta_derivative_real_concept2  ]
   [ run test_ibeta_derivative.cpp  test_instances//test_instances pch_light ../../test/build//boost_unit_test_framework
        : # command line
        : # input files
        : # requirements
          <define>TEST_REAL_CONCEPT
          <define>TEST_DATA=3
          <toolset>intel:<pch>off
          <toolset>gcc:<cxxflags>-Wno-overflow
        : test_ibeta_derivative_real_concept3  ]
   [ run test_ibeta_derivative.cpp  test_instances//test_instances pch_light ../../test/build//boost_unit_test_framework
        : # command line
        : # input files
        : # requirements
          <define>TEST_REAL_CONCEPT
          <define>TEST_DATA=4
          <toolset>intel:<pch>off
          <toolset>gcc:<cxxflags>-Wno-overflow
        : test_ibeta_derivative_real_concept4  ]

   [ run test_ibeta_inv.cpp  test_instances//test_instances pch_light ../../test/build//boost_unit_test_framework
        : # command line
        : # input files
        : # requirements
          <define>TEST_FLOAT
          <toolset>intel:<pch>off
        : test_ibeta_inv_float  ]
   [ run test_ibeta_inv.cpp  test_instances//test_instances pch_light ../../test/build//boost_unit_test_framework
        : # command line
        : # input files
        : # requirements
          <define>TEST_DOUBLE
          <toolset>intel:<pch>off
        : test_ibeta_inv_double  ]
   [ run test_ibeta_inv.cpp  test_instances//test_instances pch_light ../../test/build//boost_unit_test_framework
        : # command line
        : # input files
        : # requirements
          <define>TEST_LDOUBLE
          <toolset>intel:<pch>off
        : test_ibeta_inv_long_double  ]
   [ run test_ibeta_inv.cpp  test_instances//test_instances pch_light ../../test/build//boost_unit_test_framework
        : # command line
        : # input files
        : # requirements
          <define>TEST_REAL_CONCEPT
          <define>TEST_DATA=1
          <toolset>intel:<pch>off
        : test_ibeta_inv_real_concept1  ]
   [ run test_ibeta_inv.cpp  test_instances//test_instances pch_light ../../test/build//boost_unit_test_framework
        : # command line
        : # input files
        : # requirements
          <define>TEST_REAL_CONCEPT
          <define>TEST_DATA=2
          <toolset>intel:<pch>off
        : test_ibeta_inv_real_concept2  ]
   [ run test_ibeta_inv.cpp  test_instances//test_instances pch_light ../../test/build//boost_unit_test_framework
        : # command line
        : # input files
        : # requirements
          <define>TEST_REAL_CONCEPT
          <define>TEST_DATA=3
          <toolset>intel:<pch>off
        : test_ibeta_inv_real_concept3  ]
   [ run test_ibeta_inv.cpp  test_instances//test_instances pch_light ../../test/build//boost_unit_test_framework
        : # command line
        : # input files
        : # requirements
          <define>TEST_REAL_CONCEPT
          <define>TEST_DATA=4
          <toolset>intel:<pch>off
        : test_ibeta_inv_real_concept4  ]
   [ run test_ibeta_inv_ab.cpp  test_instances//test_instances pch_light ../../test/build//boost_unit_test_framework
        : # command line
        : # input files
        : # requirements
          <define>TEST_FLOAT
          <toolset>intel:<pch>off
        : test_ibeta_inv_ab_float  ]
   [ run test_ibeta_inv_ab.cpp  test_instances//test_instances pch_light ../../test/build//boost_unit_test_framework
        : # command line
        : # input files
        : # requirements
          <define>TEST_DOUBLE
          <toolset>intel:<pch>off
        : test_ibeta_inv_ab_double  ]
   [ run test_ibeta_inv_ab.cpp  test_instances//test_instances pch_light ../../test/build//boost_unit_test_framework
        : # command line
        : # input files
        : # requirements
          <define>TEST_LDOUBLE
          <toolset>intel:<pch>off
        : test_ibeta_inv_ab_long_double  ]
   [ run test_ibeta_inv_ab.cpp  test_instances//test_instances pch_light ../../test/build//boost_unit_test_framework
        : # command line
        : # input files
        : # requirements
          <define>TEST_REAL_CONCEPT
          <define>TEST_DATA=1
          <toolset>intel:<pch>off
        : test_ibeta_inv_ab_real_concept1  ]
   [ run test_ibeta_inv_ab.cpp  test_instances//test_instances pch_light ../../test/build//boost_unit_test_framework
        : # command line
        : # input files
        : # requirements
          <define>TEST_REAL_CONCEPT
          <define>TEST_DATA=2
          <toolset>intel:<pch>off
        : test_ibeta_inv_ab_real_concept2  ]
   [ run test_ibeta_inv_ab.cpp test_instances//test_instances pch_light ../../test/build//boost_unit_test_framework
        : # command line
        : # input files
        : # requirements
          <define>TEST_REAL_CONCEPT
          <define>TEST_DATA=3
          <toolset>intel:<pch>off
        : test_ibeta_inv_ab_real_concept3  ]
   [ run test_igamma.cpp test_instances//test_instances pch_light ../../test/build//boost_unit_test_framework  ]
   [ run test_igamma_inv.cpp test_instances//test_instances pch_light  ../../test/build//boost_unit_test_framework
        : # command line
        : # input files
        : # requirements
          <define>TEST_FLOAT
          <toolset>intel:<pch>off
        : test_igamma_inv_float  ]
   [ run test_igamma_inv.cpp  test_instances//test_instances pch_light ../../test/build//boost_unit_test_framework
        : # command line
        : # input files
        : # requirements
          <define>TEST_DOUBLE
          <toolset>intel:<pch>off
        : test_igamma_inv_double  ]
   [ run test_igamma_inv.cpp  test_instances//test_instances pch_light ../../test/build//boost_unit_test_framework
        : # command line
        : # input files
        : # requirements
          <define>TEST_LDOUBLE
          <toolset>intel:<pch>off
        : test_igamma_inv_long_double  ]
   [ run test_igamma_inv.cpp  test_instances//test_instances pch_light ../../test/build//boost_unit_test_framework
        : # command line
        : # input files
        : # requirements
          <define>TEST_REAL_CONCEPT
          <toolset>intel:<pch>off
        : test_igamma_inv_real_concept  ]
   [ run test_igamma_inva.cpp  test_instances//test_instances pch_light ../../test/build//boost_unit_test_framework
        : # command line
        : # input files
        : # requirements
          <define>TEST_FLOAT
          <toolset>intel:<pch>off
        : test_igamma_inva_float  ]
   [ run test_igamma_inva.cpp  test_instances//test_instances pch_light ../../test/build//boost_unit_test_framework
        : # command line
        : # input files
        : # requirements
          <define>TEST_DOUBLE
          <toolset>intel:<pch>off
        : test_igamma_inva_double  ]
   [ run test_igamma_inva.cpp  test_instances//test_instances pch_light ../../test/build//boost_unit_test_framework
        : # command line
        : # input files
        : # requirements
          <define>TEST_LDOUBLE
          <toolset>intel:<pch>off
      : test_igamma_inva_long_double  ]
   [ run test_igamma_inva.cpp  test_instances//test_instances pch_light ../../test/build//boost_unit_test_framework
        : # command line
        : # input files
        : # requirements
          <define>TEST_REAL_CONCEPT
          <toolset>intel:<pch>off
        : test_igamma_inva_real_concept  ]
   [ run test_instantiate1.cpp test_instantiate2.cpp  ]
   [ run test_jacobi.cpp pch_light ../../test/build//boost_unit_test_framework  ]
   [ run test_laguerre.cpp test_instances//test_instances pch_light ../../test/build//boost_unit_test_framework  ]

   [ run test_lambert_w.cpp ../../test/build//boost_unit_test_framework  ]
   [ run test_lambert_w.cpp ../../test/build//boost_unit_test_framework : : : <define>BOOST_MATH_TEST_MULTIPRECISION=1  [ check-target-builds ../config//has_float128 "GCC libquadmath and __float128 support" : <define>BOOST_MATH_TEST_FLOAT128 <linkflags>"-Bstatic -lquadmath -Bdynamic" ]  : test_lambert_w_multiprecision_1 ]
   [ run test_lambert_w.cpp ../../test/build//boost_unit_test_framework : : : <define>BOOST_MATH_TEST_MULTIPRECISION=2  [ check-target-builds ../config//has_float128 "GCC libquadmath and __float128 support" : <define>BOOST_MATH_TEST_FLOAT128 <linkflags>"-Bstatic -lquadmath -Bdynamic" ]  : test_lambert_w_multiprecision_2 ]
   [ run test_lambert_w.cpp ../../test/build//boost_unit_test_framework : : : <define>BOOST_MATH_TEST_MULTIPRECISION=3  [ check-target-builds ../config//has_float128 "GCC libquadmath and __float128 support" : <define>BOOST_MATH_TEST_FLOAT128 <linkflags>"-Bstatic -lquadmath -Bdynamic" ]  : test_lambert_w_multiprecision_3 ]
   [ run test_lambert_w.cpp ../../test/build//boost_unit_test_framework : : : <define>BOOST_MATH_TEST_MULTIPRECISION=4 <define>BOOST_MATH_TEST_FLOAT128 [ check-target-builds ../config//has_float128 "GCC libquadmath and __float128 support" : <define>BOOST_MATH_TEST_FLOAT128 <linkflags>"-Bstatic -lquadmath -Bdynamic" ]  : test_lambert_w_multiprecision_4 ]
   [ run test_lambert_w_integrals_float128.cpp ../../test/build//boost_unit_test_framework : : : release [ check-target-builds ../config//has_float128 "GCC libquadmath and __float128 support" : <linkflags>"-Bstatic -lquadmath -Bdynamic" : <build>no ] [ requires cxx11_auto_declarations cxx11_lambdas cxx11_smart_ptr cxx11_unified_initialization_syntax sfinae_expr ] ]
   [ run test_lambert_w_integrals_quad.cpp ../../test/build//boost_unit_test_framework : : : release [ requires cxx11_auto_declarations cxx11_lambdas cxx11_smart_ptr cxx11_unified_initialization_syntax sfinae_expr ] [ check-target-builds ../config//has_float128 "GCC libquadmath and __float128 support" : <define>BOOST_MATH_TEST_FLOAT128 <linkflags>"-Bstatic -lquadmath -Bdynamic" ] ]
   [ run test_lambert_w_integrals_long_double.cpp ../../test/build//boost_unit_test_framework : : : [ requires cxx11_auto_declarations cxx11_lambdas cxx11_smart_ptr cxx11_unified_initialization_syntax sfinae_expr ] ]
   [ run test_lambert_w_integrals_double.cpp ../../test/build//boost_unit_test_framework : : : [ requires cxx11_auto_declarations cxx11_lambdas cxx11_smart_ptr cxx11_unified_initialization_syntax sfinae_expr ] ]
   [ run test_lambert_w_integrals_float.cpp ../../test/build//boost_unit_test_framework : : : [ requires cxx11_auto_declarations cxx11_lambdas cxx11_smart_ptr cxx11_unified_initialization_syntax sfinae_expr ] ]
   [ run test_lambert_w_derivative.cpp ../../test/build//boost_unit_test_framework : : : <define>BOOST_MATH_TEST_MULTIPRECISION  [ check-target-builds ../config//has_float128 "GCC libquadmath and __float128 support" : <define>BOOST_MATH_TEST_FLOAT128 <linkflags>"-Bstatic -lquadmath -Bdynamic" ]  ]

   [ run test_legendre.cpp test_instances//test_instances pch_light ../../test/build//boost_unit_test_framework : : : [ check-target-builds ../config//has_float128 "GCC libquadmath and __float128 support" : <linkflags>"-Bstatic -lquadmath -Bdynamic" ]  ]
   [ run chebyshev_test.cpp  : : : [ check-target-builds ../config//has_float128 "GCC libquadmath and __float128 support" : <linkflags>"-Bstatic -lquadmath -Bdynamic" ]  ]
   [ run chebyshev_transform_test.cpp ../config//fftw3f : : : <define>TEST1 [ requires cxx11_auto_declarations cxx11_range_based_for ] [ check-target-builds ../config//has_fftw3 "libfftw3" : : <build>no ] : chebyshev_transform_test_1 ]
   [ run chebyshev_transform_test.cpp ../config//fftw3 : : : <define>TEST2 [ requires cxx11_auto_declarations cxx11_range_based_for ] [ check-target-builds ../config//has_fftw3 "libfftw3" : : <build>no ] : chebyshev_transform_test_2 ]
   [ run chebyshev_transform_test.cpp ../config//fftw3l : : : <define>TEST3 [ requires cxx11_auto_declarations cxx11_range_based_for ] [ check-target-builds ../config//has_fftw3 "libfftw3" : : <build>no ] : chebyshev_transform_test_3 ]
   [ run chebyshev_transform_test.cpp ../config//fftw3q ../config//quadmath : : : <define>TEST4 [ requires cxx11_auto_declarations cxx11_range_based_for ] [ check-target-builds ../config//has_fftw3 "libfftw3" : : <build>no ] [ check-target-builds ../config//has_float128 "__float128" : : <build>no ] : chebyshev_transform_test_4 ]

   [ run test_ldouble_simple.cpp ../../test/build//boost_unit_test_framework  ]
   # Needs to run in release mode, as it's rather slow:
   [ run test_next.cpp pch ../../test/build//boost_unit_test_framework : : : release  ]
   [ run test_next_decimal.cpp pch ../../test/build//boost_unit_test_framework : : : release  ]
   [ run test_owens_t.cpp ../../test/build//boost_unit_test_framework  ]
   [ run test_polygamma.cpp test_instances//test_instances pch_light ../../test/build//boost_unit_test_framework  ]
   [ run test_trigamma.cpp test_instances//test_instances ../../test/build//boost_unit_test_framework  ]
   [ run test_round.cpp pch ../../test/build//boost_unit_test_framework  ]
   [ run test_spherical_harmonic.cpp test_instances//test_instances pch_light ../../test/build//boost_unit_test_framework  ]
   [ run test_sign.cpp ../../test/build//boost_unit_test_framework  ]
   [ run test_tgamma_ratio.cpp test_instances//test_instances pch_light ../../test/build//boost_unit_test_framework  ]
   [ run test_trig.cpp test_instances//test_instances pch_light ../../test/build//boost_unit_test_framework  ]
   [ run test_zeta.cpp ../../test/build//boost_unit_test_framework test_instances//test_instances pch_light  ]
   [ run test_sinc.cpp ../../test/build//boost_unit_test_framework pch_light ]
   [ run test_tr1.cpp
   ../build//boost_math_tr1
   ../build//boost_math_tr1f
   ../build//boost_math_c99
   ../build//boost_math_c99f
   ../../test/build//boost_unit_test_framework
     ]

   [ run test_tr1.cpp
      ../build//boost_math_tr1l
      ../build//boost_math_c99l
      ../../test/build//boost_unit_test_framework
      : : :
      <define>TEST_LD=1
      [ check-target-builds ../config//has_long_double_support "long double support" : : <build>no ]
      :
      test_tr1_long_double
     ]

   [ run test_tr1.c
      ../build//boost_math_tr1
      ../build//boost_math_tr1f
      ../build//boost_math_c99
      ../build//boost_math_c99f
      ../../test/build//boost_unit_test_framework
      : : : #requirements
      :
      test_tr1_c
    ]

   [ run test_tr1.c
      ../build//boost_math_tr1l
      ../build//boost_math_c99l
      ../../test/build//boost_unit_test_framework
      : : :
      <define>TEST_LD=1
      [ check-target-builds ../config//has_long_double_support "long double support" : : <build>no ]
      :
      test_tr1_c_long_double
    ]
   [ run test_constants.cpp ../../test/build//boost_unit_test_framework  ]
   [ run test_classify.cpp pch ../../test/build//boost_unit_test_framework  ]
   [ run test_error_handling.cpp ../../test/build//boost_unit_test_framework  ]
   [ run legendre_stieltjes_test.cpp ../../test/build//boost_unit_test_framework : : : [ requires cxx11_auto_declarations cxx11_range_based_for ] [ check-target-builds ../config//has_float128 "GCC libquadmath and __float128 support" : <linkflags>-lquadmath ]  ]
   [ run test_minima.cpp pch ../../test/build//boost_unit_test_framework  ]
   [ run test_rationals.cpp ../../test/build//boost_unit_test_framework
      test_rational_instances/test_rational_double1.cpp
      test_rational_instances/test_rational_double2.cpp
      test_rational_instances/test_rational_double3.cpp
      test_rational_instances/test_rational_double4.cpp
      test_rational_instances/test_rational_double5.cpp
      test_rational_instances/test_rational_float1.cpp
      test_rational_instances/test_rational_float2.cpp
      test_rational_instances/test_rational_float3.cpp
      test_rational_instances/test_rational_float4.cpp
      test_rational_instances/test_rational_ldouble1.cpp
      test_rational_instances/test_rational_ldouble2.cpp
      test_rational_instances/test_rational_ldouble3.cpp
      test_rational_instances/test_rational_ldouble4.cpp
      test_rational_instances/test_rational_ldouble5.cpp
      test_rational_instances/test_rational_real_concept1.cpp
      test_rational_instances/test_rational_real_concept2.cpp
      test_rational_instances/test_rational_real_concept3.cpp
      test_rational_instances/test_rational_real_concept4.cpp
      test_rational_instances/test_rational_real_concept5.cpp
   ]
   [ run test_policy.cpp ../../test/build//boost_unit_test_framework  ]
   [ run test_policy_2.cpp ../../test/build//boost_unit_test_framework  ]
   [ run test_policy_3.cpp ../../test/build//boost_unit_test_framework  ]
   [ run test_policy_4.cpp ../../test/build//boost_unit_test_framework  ]
   [ run test_policy_5.cpp ../../test/build//boost_unit_test_framework  ]
   [ run test_policy_6.cpp ../../test/build//boost_unit_test_framework  ]
   [ run test_policy_7.cpp ../../test/build//boost_unit_test_framework  ]
   [ run test_policy_8.cpp ../../test/build//boost_unit_test_framework  ]
   [ compile test_policy_9.cpp  ]
   [ run test_policy_sf.cpp ../../test/build//boost_unit_test_framework  ]
   [ run test_long_double_support.cpp ../../test/build//boost_unit_test_framework
      : : : [ check-target-builds ../config//has_long_double_support "long double support" : : <build>no ] ]
;

test-suite distribution_tests :
   [ run test_arcsine.cpp pch ../../test/build//boost_unit_test_framework  ]
   [ run test_bernoulli.cpp ../../test/build//boost_unit_test_framework  ]
   [ run test_beta_dist.cpp ../../test/build//boost_unit_test_framework  ]
   [ run test_binomial.cpp  ../../test/build//boost_unit_test_framework
        : # command line
        : # input files
        : # requirements
          <define>TEST_FLOAT
          <toolset>intel:<pch>off
        : test_binomial_float  ]
   [ run test_binomial.cpp  ../../test/build//boost_unit_test_framework
        : # command line
        : # input files
        : # requirements
          <define>TEST_DOUBLE
          <toolset>intel:<pch>off
        : test_binomial_double  ]
   [ run test_binomial.cpp  ../../test/build//boost_unit_test_framework
        : # command line
        : # input files
        : # requirements
          <define>TEST_LDOUBLE
          <toolset>intel:<pch>off
        : test_binomial_long_double  ]
   [ run test_binomial.cpp  ../../test/build//boost_unit_test_framework
        : # command line
        : # input files
        : # requirements
          <define>TEST_REAL_CONCEPT
          <define>TEST_ROUNDING=0
          <toolset>intel:<pch>off
        : test_binomial_real_concept0  ]
   [ run test_binomial.cpp  ../../test/build//boost_unit_test_framework
        : # command line
        : # input files
        : # requirements
          <define>TEST_REAL_CONCEPT
          <define>TEST_ROUNDING=1
          <toolset>intel:<pch>off
        : test_binomial_real_concept1  ]
   [ run test_binomial.cpp  ../../test/build//boost_unit_test_framework
        : # command line
        : # input files
        : # requirements
          <define>TEST_REAL_CONCEPT
          <define>TEST_ROUNDING=2
          <toolset>intel:<pch>off
        : test_binomial_real_concept2  ]
   [ run test_binomial.cpp  ../../test/build//boost_unit_test_framework
        : # command line
        : # input files
        : # requirements
          <define>TEST_REAL_CONCEPT
          <define>TEST_ROUNDING=3
          <toolset>intel:<pch>off
        : test_binomial_real_concept3  ]
   [ run test_binomial.cpp  ../../test/build//boost_unit_test_framework
        : # command line
        : # input files
        : # requirements
          <define>TEST_REAL_CONCEPT
          <define>TEST_ROUNDING=4
          <toolset>intel:<pch>off
        : test_binomial_real_concept4  ]
   [ run test_binomial.cpp  ../../test/build//boost_unit_test_framework
        : # command line
        : # input files
        : # requirements
          <define>TEST_REAL_CONCEPT
          <define>TEST_ROUNDING=5
          <toolset>intel:<pch>off
        : test_binomial_real_concept5  ]
   [ run test_binomial.cpp  ../../test/build//boost_unit_test_framework
        : # command line
        : # input files
        : # requirements
          <define>TEST_REAL_CONCEPT
          <define>TEST_ROUNDING=6
          <toolset>intel:<pch>off
        : test_binomial_real_concept6  ]
   [ run test_cauchy.cpp ../../test/build//boost_unit_test_framework  ]
   [ run test_chi_squared.cpp ../../test/build//boost_unit_test_framework  ]
   [ run test_dist_overloads.cpp ../../test/build//boost_unit_test_framework  ]
   [ run test_exponential_dist.cpp ../../test/build//boost_unit_test_framework  ]
   [ run test_extreme_value.cpp ../../test/build//boost_unit_test_framework  ]
   [ run test_find_location.cpp pch ../../test/build//boost_unit_test_framework  ]
   [ run test_find_scale.cpp pch ../../test/build//boost_unit_test_framework  ]
   [ run test_fisher_f.cpp ../../test/build//boost_unit_test_framework  ]
   [ run test_gamma_dist.cpp pch ../../test/build//boost_unit_test_framework  ]
   [ run test_geometric.cpp ../../test/build//boost_unit_test_framework  ]
   [ run test_hyperexponential_dist.cpp ../../test/build//boost_unit_test_framework  ]
   [ run test_hypergeometric_dist.cpp ../../test/build//boost_unit_test_framework
        : # command line
        : # input files
        : # requirements
          <define>TEST_QUANT=0
          <toolset>intel:<pch>off
        : test_hypergeometric_dist0  ]
   [ run test_hypergeometric_dist.cpp ../../test/build//boost_unit_test_framework
        : # command line
        : # input files
        : # requirements
          <define>TEST_QUANT=1
          <toolset>intel:<pch>off
        : test_hypergeometric_dist1  ]
   [ run test_hypergeometric_dist.cpp ../../test/build//boost_unit_test_framework
        : # command line
        : # input files
        : # requirements
          <define>TEST_QUANT=2
          <toolset>intel:<pch>off
        : test_hypergeometric_dist2  ]
   [ run test_hypergeometric_dist.cpp ../../test/build//boost_unit_test_framework
        : # command line
        : # input files
        : # requirements
          <define>TEST_QUANT=3
          <toolset>intel:<pch>off
        : test_hypergeometric_dist3  ]
   [ run test_hypergeometric_dist.cpp ../../test/build//boost_unit_test_framework
        : # command line
        : # input files
        : # requirements
          <define>TEST_QUANT=4
          <toolset>intel:<pch>off
        : test_hypergeometric_dist4  ]
   [ run test_hypergeometric_dist.cpp ../../test/build//boost_unit_test_framework
        : # command line
        : # input files
        : # requirements
          <define>TEST_QUANT=5
          <toolset>intel:<pch>off
        : test_hypergeometric_dist5  ]
   [ run test_inverse_chi_squared_distribution.cpp ../../test/build//boost_unit_test_framework  ]
   [ run test_inverse_gamma_distribution.cpp ../../test/build//boost_unit_test_framework  ]
   [ run test_inverse_gaussian.cpp ../../test/build//boost_unit_test_framework  ]
   [ run test_laplace.cpp ../../test/build//boost_unit_test_framework  ]
   [ run test_inv_hyp.cpp pch ../../test/build//boost_unit_test_framework  ]
   [ run test_logistic_dist.cpp ../../test/build//boost_unit_test_framework  ]
   [ run test_lognormal.cpp ../../test/build//boost_unit_test_framework  ]
   [ run test_negative_binomial.cpp ../../test/build//boost_unit_test_framework
        : # command line
        : # input files
        : # requirements
          <define>TEST_FLOAT
          <toolset>intel:<pch>off
        : test_negative_binomial_float  ]
   [ run test_negative_binomial.cpp ../../test/build//boost_unit_test_framework
        : # command line
        : # input files
        : # requirements
          <define>TEST_DOUBLE
          <toolset>intel:<pch>off
        : test_negative_binomial_double  ]
   [ run test_negative_binomial.cpp ../../test/build//boost_unit_test_framework
        : # command line
        : # input files
        : # requirements
          <define>TEST_LDOUBLE
          <toolset>intel:<pch>off
        : test_negative_binomial_long_double  ]
   [ run test_negative_binomial.cpp ../../test/build//boost_unit_test_framework
        : # command line
        : # input files
        : # requirements
          <define>TEST_REAL_CONCEPT
          <toolset>intel:<pch>off
        : test_negative_binomial_real_concept  ]
   [ run test_nc_chi_squared.cpp  pch ../../test/build//boost_unit_test_framework
        : # command line
        : # input files
        : # requirements
          <define>TEST_FLOAT
          <toolset>intel:<pch>off
        : test_nc_chi_squared_float  ]
   [ run test_nc_chi_squared.cpp  pch ../../test/build//boost_unit_test_framework
        : # command line
        : # input files
        : # requirements
          <define>TEST_DOUBLE
          <toolset>intel:<pch>off
        : test_nc_chi_squared_double  ]
   [ run test_nc_chi_squared.cpp  pch ../../test/build//boost_unit_test_framework
        : # command line
        : # input files
        : # requirements
          <define>TEST_LDOUBLE
          <toolset>intel:<pch>off
        : test_nc_chi_squared_long_double  ]
   [ run test_nc_chi_squared.cpp  pch ../../test/build//boost_unit_test_framework
        : # command line
        : # input files
        : # requirements
          <define>TEST_REAL_CONCEPT
          <toolset>intel:<pch>off
        : test_nc_chi_squared_real_concept  ]
   [ run test_nc_beta.cpp  ../../test/build//boost_unit_test_framework
        : # command line
        : # input files
        : # requirements
          <define>TEST_FLOAT
          <toolset>intel:<pch>off
        : test_nc_beta_float  ]
   [ run test_nc_beta.cpp  ../../test/build//boost_unit_test_framework
        : # command line
        : # input files
        : # requirements
          <define>TEST_DOUBLE
          <toolset>intel:<pch>off
        : test_nc_beta_double  ]
   [ run test_nc_beta.cpp  ../../test/build//boost_unit_test_framework
        : # command line
        : # input files
        : # requirements
          <define>TEST_LDOUBLE
          <toolset>intel:<pch>off
        : test_nc_beta_long_double  ]
   [ run test_nc_beta.cpp  ../../test/build//boost_unit_test_framework
        : # command line
        : # input files
        : # requirements
          <define>TEST_REAL_CONCEPT
          <define>TEST_DATA=1
          <toolset>intel:<pch>off
        : test_nc_beta_real_concept1  ]
   [ run test_nc_beta.cpp  ../../test/build//boost_unit_test_framework
        : # command line
        : # input files
        : # requirements
          <define>TEST_REAL_CONCEPT
          <define>TEST_DATA=2
          <toolset>intel:<pch>off
        : test_nc_beta_real_concept2  ]
   [ run test_nc_f.cpp pch ../../test/build//boost_unit_test_framework  ]
   [ run test_nc_t.cpp  pch ../../test/build//boost_unit_test_framework
        : # command line
        : # input files
        : # requirements
          <define>TEST_FLOAT
          <toolset>intel:<pch>off
        : test_nc_t_float  ]
   [ run test_nc_t.cpp  pch ../../test/build//boost_unit_test_framework
        : # command line
        : # input files
        : # requirements
          <define>TEST_DOUBLE
          <toolset>intel:<pch>off
        : test_nc_t_double  ]
   [ run test_nc_t.cpp  pch ../../test/build//boost_unit_test_framework
        : # command line
        : # input files
        : # requirements
          <define>TEST_LDOUBLE
          <toolset>intel:<pch>off
        : test_nc_t_long_double  ]
   [ run test_nc_t.cpp  pch ../../test/build//boost_unit_test_framework
        : # command line
        : # input files
        : # requirements
          <define>TEST_REAL_CONCEPT
          <toolset>intel:<pch>off
        : test_nc_t_real_concept  ]
   [ run test_normal.cpp pch ../../test/build//boost_unit_test_framework  ]
   [ run test_pareto.cpp ../../test/build//boost_unit_test_framework  ]
   [ run test_poisson.cpp ../../test/build//boost_unit_test_framework
        : # command line
        : # input files
        : # requirements
          <define>TEST_FLOAT
          <toolset>intel:<pch>off
        : test_poisson_float  ]
   [ run test_poisson.cpp  ../../test/build//boost_unit_test_framework
        : # command line
        : # input files
        : # requirements
          <define>TEST_DOUBLE
          <toolset>intel:<pch>off
        : test_poisson_double  ]
   [ run test_poisson.cpp  ../../test/build//boost_unit_test_framework
        : # command line
        : # input files
        : # requirements
          <define>TEST_LDOUBLE
          <toolset>intel:<pch>off
        : test_poisson_long_double  ]
   [ run test_poisson.cpp  ../../test/build//boost_unit_test_framework
        : # command line
        : # input files
        : # requirements
          <define>TEST_REAL_CONCEPT
          <toolset>intel:<pch>off
        : test_poisson_real_concept  ]
   [ run test_rayleigh.cpp ../../test/build//boost_unit_test_framework  ]
   [ run test_students_t.cpp ../../test/build//boost_unit_test_framework  ]
   [ run test_skew_normal.cpp ../../test/build//boost_unit_test_framework  ]
   [ run test_trapezoidal.cpp ../../test/build//boost_unit_test_framework : : :
         release [ requires cxx11_lambdas cxx11_auto_declarations cxx11_decltype cxx11_unified_initialization_syntax cxx11_variadic_templates ]
         [ check-target-builds ../config//has_float128 "GCC libquadmath and __float128 support" : <linkflags>"-Bstatic -lquadmath -Bdynamic" ] ]
   [ run test_triangular.cpp pch ../../test/build//boost_unit_test_framework  ]
   [ run test_uniform.cpp pch ../../test/build//boost_unit_test_framework  ]
   [ run test_weibull.cpp ../../test/build//boost_unit_test_framework  ]

   [ run  compile_test/dist_bernoulli_incl_test.cpp compile_test_main  ]
   [ run  compile_test/dist_beta_incl_test.cpp compile_test_main  ]
   [ run  compile_test/dist_binomial_incl_test.cpp compile_test_main  ]
   [ run  compile_test/dist_cauchy_incl_test.cpp compile_test_main  ]
   [ run  compile_test/dist_chi_squared_incl_test.cpp compile_test_main  ]
   [ run  compile_test/dist_complement_incl_test.cpp compile_test_main  ]
   [ run  compile_test/dist_exponential_incl_test.cpp compile_test_main  ]
   [ run  compile_test/dist_extreme_val_incl_test.cpp compile_test_main  ]
   [ run  compile_test/dist_find_location_incl_test.cpp compile_test_main  ]
   [ run  compile_test/dist_find_scale_incl_test.cpp compile_test_main  ]
   [ run  compile_test/dist_fisher_f_incl_test.cpp compile_test_main  ]
   [ run  compile_test/dist_gamma_incl_test.cpp compile_test_main  ]
   [ run  compile_test/dist_inv_gamma_incl_test.cpp compile_test_main  ]
   [ run  compile_test/dist_inv_chi_sq_incl_test.cpp compile_test_main  ]
   [ run  compile_test/dist_hyperexponential_incl_test.cpp compile_test_main  ]
   [ run  compile_test/dist_hypergeo_incl_test.cpp compile_test_main  ]
   [ run  compile_test/dist_laplace_incl_test.cpp compile_test_main  ]
   [ run  compile_test/dist_logistic_incl_test.cpp compile_test_main  ]
   [ run  compile_test/dist_lognormal_incl_test.cpp compile_test_main  ]
   [ run  compile_test/dist_neg_binom_incl_test.cpp compile_test_main  ]
   [ run  compile_test/dist_nc_chi_squ_incl_test.cpp compile_test_main  ]
   [ run  compile_test/dist_nc_beta_incl_test.cpp compile_test_main  ]
   [ run  compile_test/dist_nc_f_incl_test.cpp compile_test_main  ]
   [ run  compile_test/dist_nc_t_incl_test.cpp compile_test_main  ]
   [ run  compile_test/dist_normal_incl_test.cpp compile_test_main  ]
   [ run  compile_test/dist_poisson_incl_test.cpp compile_test_main  ]
   [ run  compile_test/dist_students_t_incl_test.cpp compile_test_main  ]
   [ run  compile_test/dist_triangular_incl_test.cpp compile_test_main  ]
   [ run  compile_test/dist_uniform_incl_test.cpp compile_test_main  ]
   [ run  compile_test/dist_weibull_incl_test.cpp compile_test_main  ]
   [ run  compile_test/distribution_concept_check.cpp  ]

   [ run test_legacy_nonfinite.cpp ../../test/build//boost_unit_test_framework ]
   [ run test_basic_nonfinite.cpp ../../test/build//boost_unit_test_framework  ]
   [ run test_lexical_cast.cpp ../../test/build//boost_unit_test_framework  ]
   [ run test_nonfinite_trap.cpp ../../test/build//boost_unit_test_framework : : : <exception-handling>off:<build>no  ]
   [ run test_signed_zero.cpp ../../test/build//boost_unit_test_framework  ]
   [ run complex_test.cpp ../../test/build//boost_unit_test_framework  ]
   #
   # Moved from misc for load balancing reasons:
   #
   [ run test_polynomial.cpp ../../test/build//boost_unit_test_framework : : : <define>TEST1 : test_polynomial_1  ]
   [ run test_polynomial.cpp ../../test/build//boost_unit_test_framework : : : <define>TEST2 : test_polynomial_2  ]
   [ run test_polynomial.cpp ../../test/build//boost_unit_test_framework : : : <define>TEST3 : test_polynomial_3  ]
   [ run polynomial_concept_check.cpp ]

   [ compile multiprc_concept_check_1.cpp : <debug-symbols>off <toolset>msvc:<cxxflags>/bigobj release <exception-handling>off:<build>no  ]
   [ compile multiprc_concept_check_2.cpp : <debug-symbols>off <toolset>msvc:<cxxflags>/bigobj release <exception-handling>off:<build>no  ]
   [ compile multiprc_concept_check_3.cpp : <debug-symbols>off <toolset>msvc:<cxxflags>/bigobj release <exception-handling>off:<build>no  ]
   [ compile multiprc_concept_check_4.cpp : <debug-symbols>off <toolset>msvc:<cxxflags>/bigobj release <exception-handling>off:<build>no  ]
   [ compile ntl_concept_check.cpp : [ check-target-builds ../config//has_ntl_rr : : <build>no ] <debug-symbols>off  ]
   [ compile mpfr_concept_check.cpp : [ check-target-builds ../config//has_mpfr_class : : <build>no ] <debug-symbols>off  ]
   [ compile mpreal_concept_check.cpp : [ check-target-builds ../config//has_mpreal : : <build>no ] <debug-symbols>off  ]
   [ compile e_float_concept_check.cpp : [ check-target-builds ../config//has_e_float : : <build>no ] <debug-symbols>off  ]

;

test-suite misc :
   [ run test_print_info_on_type.cpp  ]
   [ run test_barycentric_rational.cpp ../../test/build//boost_unit_test_framework : : :  [ requires cxx11_smart_ptr cxx11_defaulted_functions cxx11_auto_declarations cxx11_unified_initialization_syntax ] [ check-target-builds ../config//has_float128 "GCC libquadmath and __float128 support" : <linkflags>-lquadmath ]  ]
   [ run test_vector_barycentric_rational.cpp ../../test/build//boost_unit_test_framework : : :  [ requires cxx11_smart_ptr cxx11_defaulted_functions cxx11_auto_declarations cxx11_unified_initialization_syntax ]  [ check-target-builds ../../multiprecision/config//has_eigen : : <build>no ] ]
   [ run test_constant_generate.cpp : : : release <define>USE_CPP_FLOAT=1 <exception-handling>off:<build>no  ]
   [ run test_cubic_b_spline.cpp ../../test/build//boost_unit_test_framework : : :  [ requires cxx11_smart_ptr cxx11_defaulted_functions ] <debug-symbols>off <toolset>msvc:<cxxflags>/bigobj release ]
   [ run whittaker_shannon_test.cpp : : :  [ requires cxx11_auto_declarations cxx11_constexpr cxx11_smart_ptr cxx11_defaulted_functions ] ]
   [ run cardinal_quadratic_b_spline_test.cpp : : :  [ requires cxx11_auto_declarations cxx11_constexpr cxx11_smart_ptr cxx11_defaulted_functions ] ]
   [ run catmull_rom_test.cpp ../../test/build//boost_unit_test_framework : : : <define>TEST=1 [ requires cxx11_hdr_array cxx11_hdr_initializer_list ] : catmull_rom_test_1 ]
   [ run catmull_rom_test.cpp ../../test/build//boost_unit_test_framework : : : <define>TEST=2 [ requires cxx11_hdr_array cxx11_hdr_initializer_list ] : catmull_rom_test_2 ]
   [ run catmull_rom_test.cpp ../../test/build//boost_unit_test_framework : : : <define>TEST=3 [ requires cxx11_hdr_array cxx11_hdr_initializer_list ] : catmull_rom_test_3 ]
   [ run compile_test/catmull_rom_incl_test.cpp compile_test_main  : : : [ requires cxx11_hdr_array cxx11_hdr_initializer_list ] ]
   [ run compile_test/catmull_rom_concept_test.cpp compile_test_main   : : : [ requires cxx11_hdr_array cxx11_hdr_initializer_list ] ]
   [ run ooura_fourier_integral_test.cpp ../../test/build//boost_unit_test_framework : : :  [ requires cxx17_if_constexpr cxx17_std_apply ] ]
   [ run univariate_statistics_test.cpp ../../test/build//boost_unit_test_framework : : :  [ requires cxx17_if_constexpr cxx17_std_apply ] ]
   [ run norms_test.cpp ../../test/build//boost_unit_test_framework : : :  [ requires cxx17_if_constexpr cxx17_std_apply ] ]
   [ run signal_statistics_test.cpp : : : [ requires cxx17_if_constexpr cxx17_std_apply ] ]
   [ run bivariate_statistics_test.cpp : : : [ requires cxx17_if_constexpr cxx17_std_apply ] ]
   [ run lanczos_smoothing_test.cpp ../../test/build//boost_unit_test_framework : : : [ requires cxx17_if_constexpr cxx17_std_apply ] ]
   [ run condition_number_test.cpp ../../test/build//boost_unit_test_framework : : :  [ requires cxx17_if_constexpr cxx17_std_apply ] ]
   [ run test_real_concept.cpp ../../test/build//boost_unit_test_framework  ]
   [ run test_remez.cpp pch ../../test/build//boost_unit_test_framework  ]
   [ run test_roots.cpp pch ../../test/build//boost_unit_test_framework  ]
   [ run test_root_iterations.cpp pch ../../test/build//boost_unit_test_framework : : : [ requires cxx11_hdr_tuple ]  ]
   [ run test_root_finding_concepts.cpp ../../test/build//boost_unit_test_framework  ]
   [ run test_toms748_solve.cpp pch ../../test/build//boost_unit_test_framework  ]
   [ run  compile_test/cubic_spline_incl_test.cpp compile_test_main : : :  [ requires cxx11_smart_ptr cxx11_defaulted_functions cxx11_auto_declarations ]  ]
   [ run  compile_test/barycentric_rational_incl_test.cpp compile_test_main : : :  [ requires cxx11_smart_ptr cxx11_defaulted_functions cxx11_auto_declarations cxx11_unified_initialization_syntax ]  ]
   [ run  compile_test/compl_abs_incl_test.cpp compile_test_main  ]
   [ run  compile_test/compl_acos_incl_test.cpp compile_test_main  ]
   [ run  compile_test/compl_acosh_incl_test.cpp compile_test_main  ]
   [ run  compile_test/compl_asin_incl_test.cpp compile_test_main  ]
   [ run  compile_test/compl_asinh_incl_test.cpp compile_test_main  ]
   [ run  compile_test/compl_atan_incl_test.cpp compile_test_main  ]
   [ run  compile_test/compl_atanh_incl_test.cpp compile_test_main  ]
   [ run  compile_test/sf_beta_incl_test.cpp compile_test_main  ]
   [ run  compile_test/sf_bernoulli_incl_test.cpp compile_test_main  ]
   [ run  compile_test/sf_bessel_incl_test.cpp compile_test_main  ]
   [ run  compile_test/sf_bessel_deriv_incl_test.cpp compile_test_main  ]
   [ run  compile_test/sf_binomial_incl_test.cpp compile_test_main  ]
   [ run  compile_test/sf_cbrt_incl_test.cpp compile_test_main  ]
   [ run  compile_test/sf_cos_pi_incl_test.cpp compile_test_main  ]
   [ run  compile_test/sf_digamma_incl_test.cpp compile_test_main  ]
   [ run  compile_test/sf_polygamma_incl_test.cpp compile_test_main  ]
   [ run  compile_test/sf_ellint_1_incl_test.cpp compile_test_main  ]
   [ run  compile_test/sf_ellint_2_incl_test.cpp compile_test_main  ]
   [ run  compile_test/sf_ellint_3_incl_test.cpp compile_test_main  ]
   [ run  compile_test/sf_ellint_d_incl_test.cpp compile_test_main  ]
   [ run  compile_test/sf_jacobi_zeta_incl_test.cpp compile_test_main  ]
   [ run  compile_test/sf_heuman_lambda_incl_test.cpp compile_test_main  ]
   [ run  compile_test/sf_ellint_rc_incl_test.cpp compile_test_main  ]
   [ run  compile_test/sf_ellint_rd_incl_test.cpp compile_test_main  ]
   [ run  compile_test/sf_ellint_rf_incl_test.cpp compile_test_main  ]
   [ run  compile_test/sf_ellint_rj_incl_test.cpp compile_test_main  ]
   [ run  compile_test/sf_ellint_rg_incl_test.cpp compile_test_main  ]
   [ run  compile_test/sf_erf_incl_test.cpp compile_test_main  ]
   [ run  compile_test/sf_expint_incl_test.cpp compile_test_main  ]
   [ run  compile_test/sf_expm1_incl_test.cpp compile_test_main  ]
   [ run  compile_test/sf_factorials_incl_test.cpp compile_test_main  ]
   [ run  compile_test/sf_fpclassify_incl_test.cpp compile_test_main  ]
   [ run  compile_test/sf_gamma_incl_test.cpp compile_test_main  ]
   [ run  compile_test/sf_hermite_incl_test.cpp compile_test_main  ]
   [ run  compile_test/sf_hypot_incl_test.cpp compile_test_main  ]
   [ run  compile_test/sf_laguerre_incl_test.cpp compile_test_main  ]
   [ compile  compile_test/sf_lanczos_incl_test.cpp  ]
   [ run  compile_test/sf_legendre_incl_test.cpp compile_test_main  ]
   [ run  compile_test/sf_legendre_stieltjes_incl_test.cpp compile_test_main : : : [ requires cxx11_auto_declarations ]  ]
   [ run  compile_test/sf_log1p_incl_test.cpp compile_test_main  ]
   [ compile  compile_test/sf_math_fwd_incl_test.cpp  ]
   [ run  compile_test/sf_modf_incl_test.cpp compile_test_main  ]
   [ run  compile_test/sf_next_incl_test.cpp compile_test_main  ]
   [ run  compile_test/sf_powm1_incl_test.cpp compile_test_main  ]
   [ run  compile_test/sf_prime_incl_test.cpp compile_test_main  ]
   [ run  compile_test/sf_relative_distance_incl_test.cpp compile_test_main  ]
   [ run  compile_test/sf_round_incl_test.cpp compile_test_main  ]
   [ run  compile_test/sf_sign_incl_test.cpp compile_test_main  ]
   [ run  compile_test/sf_sin_pi_incl_test.cpp compile_test_main  ]
   [ run  compile_test/sf_sinc_incl_test.cpp compile_test_main  ]
   [ run  compile_test/sf_sinhc_incl_test.cpp compile_test_main  ]
   [ run  compile_test/sf_sph_harm_incl_test.cpp compile_test_main  ]
   [ run  compile_test/sf_sqrt1pm1_incl_test.cpp compile_test_main  ]
   [ run  compile_test/sf_trunc_incl_test.cpp compile_test_main  ]
   [ run  compile_test/sf_ulp_incl_test.cpp compile_test_main  ]
   [ run  compile_test/sf_zeta_incl_test.cpp compile_test_main  ]
   [ run  compile_test/std_real_concept_check.cpp  ]
   [ compile compile_test/std_real_concept_check.cpp  : <define>EMULATE32 : std_real_concept_check_32 ]
   [ compile compile_test/std_real_concept_check.cpp  : <define>EMULATE64 : std_real_concept_check_64 ]
   [ compile compile_test/std_real_concept_check.cpp  : <define>EMULATE80 : std_real_concept_check_80 ]
   [ compile compile_test/std_real_concept_check.cpp  : <define>EMULATE128 : std_real_concept_check_128 ]
   [ run  compile_test/cstdfloat_concept_check_1.cpp
      : : : [ check-target-builds ../config//has_intel_quad "Intel _Quad datatype support" : <cxxflags>-Qoption,cpp,--extended_float_type ]
            [ check-target-builds ../config//has_float128 "GCC libquadmath and __float128 support" : <linkflags>-lquadmath ] ]
   [ run  compile_test/cstdfloat_concept_check_2.cpp  ]
   [ run  compile_test/cstdfloat_concept_check_3.cpp  ]
   [ run  compile_test/cstdfloat_concept_check_4.cpp  ]
   [ run  test_cstdfloat.cpp ../../test/build//boost_unit_test_framework  : : : [ check-target-builds ../config//has_float128 "GCC libquadmath and __float128 support" : <linkflags>-lquadmath ] ]
   [ run  compile_test/sf_airy_incl_test.cpp compile_test_main  ]
   [ run  compile_test/sf_hankel_incl_test.cpp compile_test_main  ]
   [ run  compile_test/sf_jacobi_incl_test.cpp compile_test_main  ]
   [ run  compile_test/sf_owens_t_incl_test.cpp compile_test_main  ]
   [ run  compile_test/dist_skew_norm_incl_test.cpp compile_test_main  ]
   [ run  compile_test/constants_incl_test.cpp compile_test_main  ]
   [ run  compile_test/trapezoidal_incl_test.cpp compile_test_main  : : : [ requires cxx11_auto_declarations cxx11_lambdas cxx11_decltype cxx11_unified_initialization_syntax cxx11_variadic_templates ] ]
   [ compile  compile_test/test_traits.cpp  ]
   [ compile  compile_test/tools_config_inc_test.cpp  ]
   [ compile  compile_test/tools_fraction_inc_test.cpp  ]
   [ compile  compile_test/tools_minima_inc_test.cpp  ]
   [ compile  compile_test/tools_polynomial_inc_test.cpp  ]
   [ compile  compile_test/tools_precision_inc_test.cpp  ]
   [ compile  compile_test/tools_rational_inc_test.cpp  ]
   [ compile  compile_test/tools_real_cast_inc_test.cpp  ]
   [ compile  compile_test/tools_remez_inc_test.cpp  ]
   [ compile  compile_test/tools_roots_inc_test.cpp  ]
   [ compile  compile_test/tools_series_inc_test.cpp  ]
   [ compile  compile_test/tools_solve_inc_test.cpp  ]
   [ compile  compile_test/tools_stats_inc_test.cpp  ]
   [ compile  compile_test/tools_test_data_inc_test.cpp  ]
   [ compile  compile_test/tools_test_inc_test.cpp  ]
   [ compile  compile_test/tools_toms748_inc_test.cpp  ]
   [ compile  compile_test/cubic_spline_concept_test.cpp :  [ requires cxx11_smart_ptr cxx11_defaulted_functions ]  ]
   [ compile  compile_test/barycentric_rational_concept_test.cpp :  [ requires cxx11_smart_ptr cxx11_defaulted_functions cxx11_unified_initialization_syntax ]  ]
   [ compile  compile_test/sf_legendre_stieltjes_concept_test.cpp : [ requires cxx11_auto_declarations cxx11_defaulted_functions cxx11_lambdas ]   ]
   [ compile  compile_test/trapezoidal_concept_test.cpp : [ requires cxx11_auto_declarations cxx11_lambdas cxx11_decltype cxx11_unified_initialization_syntax cxx11_variadic_templates ] ]
   [ run octonion_test.cpp
       ../../test/build//boost_unit_test_framework ]
   [ run quaternion_constexpr_test.cpp ]
   [ run quaternion_test.cpp
       ../../test/build//boost_unit_test_framework : : : [ check-target-builds ../config//has_float128 "GCC libquadmath and __float128 support" : <linkflags>-lquadmath ] ]
   [ run quaternion_mult_incl_test.cpp
       quaternion_mi1.cpp
       quaternion_mi2.cpp
       ../../test/build//boost_unit_test_framework ]

   [ run __temporary_test.cpp test_instances//test_instances : : : <test-info>always_show_run_output <pch>off ]
;

test-suite quadrature :
   [ run  tanh_sinh_quadrature_test.cpp ../../test/build//boost_unit_test_framework
     : : : <toolset>msvc:<cxxflags>/bigobj <define>TEST1 [ check-target-builds ../config//has_float128 "GCC libquadmath and __float128 support" : <linkflags>-lquadmath ]
     [ requires cxx11_auto_declarations cxx11_lambdas cxx11_smart_ptr cxx11_unified_initialization_syntax sfinae_expr ] :
	 tanh_sinh_quadrature_test_1 ]
   [ run  tanh_sinh_quadrature_test.cpp ../../test/build//boost_unit_test_framework
     : : : <toolset>msvc:<cxxflags>/bigobj <define>TEST1A [ check-target-builds ../config//has_float128 "GCC libquadmath and __float128 support" : <linkflags>-lquadmath ]
     [ requires cxx11_auto_declarations cxx11_lambdas cxx11_smart_ptr cxx11_unified_initialization_syntax sfinae_expr ] :
	 tanh_sinh_quadrature_test_1a ]
   [ run  tanh_sinh_quadrature_test.cpp ../../test/build//boost_unit_test_framework
     : : : <toolset>msvc:<cxxflags>/bigobj <define>TEST2 [ check-target-builds ../config//has_float128 "GCC libquadmath and __float128 support" : <linkflags>-lquadmath ]
     [ requires cxx11_auto_declarations cxx11_lambdas cxx11_smart_ptr cxx11_unified_initialization_syntax sfinae_expr ] :
	 tanh_sinh_quadrature_test_2 ]
   [ run  tanh_sinh_quadrature_test.cpp ../../test/build//boost_unit_test_framework
     : : : <toolset>msvc:<cxxflags>/bigobj <define>TEST2A [ check-target-builds ../config//has_float128 "GCC libquadmath and __float128 support" : <linkflags>-lquadmath ]
     [ requires cxx11_auto_declarations cxx11_lambdas cxx11_smart_ptr cxx11_unified_initialization_syntax sfinae_expr ] :
	 tanh_sinh_quadrature_test_2a ]
   [ run  tanh_sinh_quadrature_test.cpp ../../test/build//boost_unit_test_framework
     : : : <toolset>msvc:<cxxflags>/bigobj <define>TEST3 [ check-target-builds ../config//has_float128 "GCC libquadmath and __float128 support" : <linkflags>-lquadmath ]
     [ requires cxx11_auto_declarations cxx11_lambdas cxx11_smart_ptr cxx11_unified_initialization_syntax sfinae_expr ] :
	 tanh_sinh_quadrature_test_3 ]
   [ run  tanh_sinh_quadrature_test.cpp ../../test/build//boost_unit_test_framework
     : : : <toolset>msvc:<cxxflags>/bigobj <define>TEST3A [ check-target-builds ../config//has_float128 "GCC libquadmath and __float128 support" : <linkflags>-lquadmath ]
     [ requires cxx11_auto_declarations cxx11_lambdas cxx11_smart_ptr cxx11_unified_initialization_syntax sfinae_expr ] :
	 tanh_sinh_quadrature_test_3a ]
   [ run  tanh_sinh_quadrature_test.cpp ../../test/build//boost_unit_test_framework
     : : : release <toolset>msvc:<cxxflags>/bigobj <define>TEST4 [ check-target-builds ../config//has_float128 "GCC libquadmath and __float128 support" : <linkflags>-lquadmath ]
     [ requires cxx11_auto_declarations cxx11_lambdas cxx11_smart_ptr cxx11_unified_initialization_syntax sfinae_expr ] :
	 tanh_sinh_quadrature_test_4 ]
   [ run  tanh_sinh_quadrature_test.cpp ../../test/build//boost_unit_test_framework
     : : : release <toolset>msvc:<cxxflags>/bigobj <define>TEST5 [ check-target-builds ../config//has_float128 "GCC libquadmath and __float128 support" : <linkflags>-lquadmath ]
     [ requires cxx11_auto_declarations cxx11_lambdas cxx11_smart_ptr cxx11_unified_initialization_syntax sfinae_expr ] :
	 tanh_sinh_quadrature_test_5 ]
   [ run  tanh_sinh_quadrature_test.cpp ../../test/build//boost_unit_test_framework
     : : : <toolset>msvc:<cxxflags>/bigobj <define>TEST6 [ check-target-builds ../config//has_float128 "GCC libquadmath and __float128 support" : <linkflags>-lquadmath ]
     [ requires cxx11_auto_declarations cxx11_lambdas cxx11_smart_ptr cxx11_unified_initialization_syntax sfinae_expr ] :
	 tanh_sinh_quadrature_test_6 ]
   [ run  tanh_sinh_quadrature_test.cpp ../../test/build//boost_unit_test_framework
     : : : <toolset>msvc:<cxxflags>/bigobj <define>TEST6A [ check-target-builds ../config//has_float128 "GCC libquadmath and __float128 support" : <linkflags>-lquadmath ]
     [ requires cxx11_auto_declarations cxx11_lambdas cxx11_smart_ptr cxx11_unified_initialization_syntax sfinae_expr ] :
	 tanh_sinh_quadrature_test_6a ]
   [ run  tanh_sinh_quadrature_test.cpp ../../test/build//boost_unit_test_framework
     : : : release <toolset>msvc:<cxxflags>/bigobj <define>TEST7 [ check-target-builds ../config//has_float128 "GCC libquadmath and __float128 support" : <linkflags>-lquadmath ]
     [ requires cxx11_auto_declarations cxx11_lambdas cxx11_smart_ptr cxx11_unified_initialization_syntax sfinae_expr ] :
	 tanh_sinh_quadrature_test_7 ]
   [ run  tanh_sinh_quadrature_test.cpp ../../test/build//boost_unit_test_framework
     : : : release <toolset>msvc:<cxxflags>/bigobj <define>TEST8 [ check-target-builds ../config//has_float128 "GCC libquadmath and __float128 support" : <linkflags>-lquadmath ]
     [ requires cxx11_auto_declarations cxx11_lambdas cxx11_smart_ptr cxx11_unified_initialization_syntax sfinae_expr ] :
	 tanh_sinh_quadrature_test_8 ]
   [ run  tanh_sinh_quadrature_test.cpp ../../test/build//boost_unit_test_framework
     : : : release <toolset>msvc:<cxxflags>/bigobj <define>TEST9
     [ requires cxx11_auto_declarations cxx11_lambdas cxx11_smart_ptr cxx11_unified_initialization_syntax sfinae_expr ] :
	 tanh_sinh_quadrature_test_9 ]

   [ run sinh_sinh_quadrature_test.cpp ../../test/build//boost_unit_test_framework
     : : : release [ check-target-builds ../config//has_float128 "GCC libquadmath and __float128 support" : <linkflags>-lquadmath ] [ requires cxx11_auto_declarations cxx11_lambdas cxx11_smart_ptr cxx11_unified_initialization_syntax ] ]
   [ run exp_sinh_quadrature_test.cpp ../../test/build//boost_unit_test_framework
     : : : <define>TEST1 [ check-target-builds ../config//has_float128 "GCC libquadmath and __float128 support" : <linkflags>-lquadmath ] [ requires cxx11_auto_declarations cxx11_lambdas cxx11_smart_ptr cxx11_unified_initialization_syntax ] : exp_sinh_quadrature_test_1 ]

   [ run exp_sinh_quadrature_test.cpp ../../test/build//boost_unit_test_framework
     : : : release <define>TEST2 [ check-target-builds ../config//has_float128 "GCC libquadmath and __float128 support" : <linkflags>-lquadmath ]
     [ requires cxx11_auto_declarations cxx11_lambdas cxx11_smart_ptr cxx11_unified_initialization_syntax ] : exp_sinh_quadrature_test_2 ]
   [ run exp_sinh_quadrature_test.cpp ../../test/build//boost_unit_test_framework
     : : : <define>TEST3 [ check-target-builds ../config//has_float128 "GCC libquadmath and __float128 support" : <linkflags>-lquadmath ]
     [ requires cxx11_auto_declarations cxx11_lambdas cxx11_smart_ptr cxx11_unified_initialization_syntax ] : exp_sinh_quadrature_test_3 ]
   [ run exp_sinh_quadrature_test.cpp ../../test/build//boost_unit_test_framework
     : : : release <define>TEST4 [ check-target-builds ../config//has_float128 "GCC libquadmath and __float128 support" : <linkflags>-lquadmath ]
     [ requires cxx11_auto_declarations cxx11_lambdas cxx11_smart_ptr cxx11_unified_initialization_syntax ] : exp_sinh_quadrature_test_4 ]
   [ run exp_sinh_quadrature_test.cpp ../../test/build//boost_unit_test_framework
     : : : release <define>TEST5 [ check-target-builds ../config//has_float128 "GCC libquadmath and __float128 support" : <linkflags>-lquadmath ]
     [ requires cxx11_auto_declarations cxx11_lambdas cxx11_smart_ptr cxx11_unified_initialization_syntax ] : exp_sinh_quadrature_test_5 ]
   [ run exp_sinh_quadrature_test.cpp ../../test/build//boost_unit_test_framework
     : : : release <define>TEST6 [ check-target-builds ../config//has_float128 "GCC libquadmath and __float128 support" : <linkflags>-lquadmath ]
     [ requires cxx11_auto_declarations cxx11_lambdas cxx11_smart_ptr cxx11_unified_initialization_syntax ] : exp_sinh_quadrature_test_6 ]
   [ run exp_sinh_quadrature_test.cpp ../../test/build//boost_unit_test_framework
     : : : release <define>TEST7 [ check-target-builds ../config//has_float128 "GCC libquadmath and __float128 support" : <linkflags>-lquadmath ]
     [ requires cxx11_auto_declarations cxx11_lambdas cxx11_smart_ptr cxx11_unified_initialization_syntax ] : exp_sinh_quadrature_test_7 ]
   [ run exp_sinh_quadrature_test.cpp ../../test/build//boost_unit_test_framework
     : : : release <define>TEST8 [ check-target-builds ../config//has_float128 "GCC libquadmath and __float128 support" : <linkflags>-lquadmath ]
     [ requires cxx11_auto_declarations cxx11_lambdas cxx11_smart_ptr cxx11_unified_initialization_syntax ] : exp_sinh_quadrature_test_8 ]

   [ run  compile_test/exp_sinh_incl_test.cpp compile_test_main : : : [ requires cxx11_auto_declarations cxx11_lambdas cxx11_smart_ptr cxx11_unified_initialization_syntax ] ]
   [ run  compile_test/sinh_sinh_incl_test.cpp compile_test_main : : : [ requires cxx11_auto_declarations cxx11_lambdas cxx11_smart_ptr cxx11_unified_initialization_syntax ] ]
   [ run  compile_test/tanh_sinh_incl_test.cpp compile_test_main : : : [ requires cxx11_auto_declarations cxx11_lambdas cxx11_smart_ptr cxx11_unified_initialization_syntax sfinae_expr ] ]
   [ compile  compile_test/exp_sinh_concept_test.cpp : [ requires cxx11_auto_declarations cxx11_lambdas cxx11_smart_ptr cxx11_unified_initialization_syntax ] ]
   [ compile  compile_test/sinh_sinh_concept_test.cpp : [ requires cxx11_auto_declarations cxx11_lambdas cxx11_smart_ptr cxx11_unified_initialization_syntax ] ]
   [ compile  compile_test/tanh_sinh_concept_test.cpp : [ requires cxx11_auto_declarations cxx11_lambdas cxx11_smart_ptr cxx11_unified_initialization_syntax sfinae_expr ] ]

   [ run gauss_quadrature_test.cpp : : : <define>TEST1 [ check-target-builds ../config//has_float128 "GCC libquadmath and __float128 support" : <linkflags>-lquadmath ]
     [ requires cxx11_auto_declarations cxx11_lambdas cxx11_smart_ptr cxx11_unified_initialization_syntax ] <debug-symbols>off <toolset>msvc:<cxxflags>/bigobj release : gauss_quadrature_test_1 ]
   [ run gauss_quadrature_test.cpp : : : <define>TEST2 [ check-target-builds ../config//has_float128 "GCC libquadmath and __float128 support" : <linkflags>-lquadmath ]
     [ requires cxx11_auto_declarations cxx11_lambdas cxx11_smart_ptr cxx11_unified_initialization_syntax ] <debug-symbols>off <toolset>msvc:<cxxflags>/bigobj release : gauss_quadrature_test_2 ]
   [ run gauss_quadrature_test.cpp : : : <define>TEST3 [ check-target-builds ../config//has_float128 "GCC libquadmath and __float128 support" : <linkflags>-lquadmath ]
     [ requires cxx11_auto_declarations cxx11_lambdas cxx11_smart_ptr cxx11_unified_initialization_syntax ] <debug-symbols>off <toolset>msvc:<cxxflags>/bigobj release : gauss_quadrature_test_3 ]
   [ run gauss_kronrod_quadrature_test.cpp : : : <define>TEST1 [ check-target-builds ../config//has_float128 "GCC libquadmath and __float128 support" : <linkflags>-lquadmath ]
     [ requires cxx11_auto_declarations cxx11_lambdas cxx11_smart_ptr cxx11_unified_initialization_syntax ] <debug-symbols>off <toolset>msvc:<cxxflags>/bigobj release : gauss_kronrod_quadrature_test_1 ]
   [ run gauss_kronrod_quadrature_test.cpp : : : <define>TEST1A [ check-target-builds ../config//has_float128 "GCC libquadmath and __float128 support" : <linkflags>-lquadmath ]
     [ requires cxx11_auto_declarations cxx11_lambdas cxx11_smart_ptr cxx11_unified_initialization_syntax ] <debug-symbols>off <toolset>msvc:<cxxflags>/bigobj release : gauss_kronrod_quadrature_test_1a ]
   [ run gauss_kronrod_quadrature_test.cpp : : : <define>TEST2 [ check-target-builds ../config//has_float128 "GCC libquadmath and __float128 support" : <linkflags>-lquadmath ]
     [ requires cxx11_auto_declarations cxx11_lambdas cxx11_smart_ptr cxx11_unified_initialization_syntax ] <debug-symbols>off <toolset>msvc:<cxxflags>/bigobj release : gauss_kronrod_quadrature_test_2 ]
   [ run gauss_kronrod_quadrature_test.cpp : : : <define>TEST3 [ check-target-builds ../config//has_float128 "GCC libquadmath and __float128 support" : <linkflags>-lquadmath ]
     [ requires cxx11_auto_declarations cxx11_lambdas cxx11_smart_ptr cxx11_unified_initialization_syntax ] <debug-symbols>off <toolset>msvc:<cxxflags>/bigobj release : gauss_kronrod_quadrature_test_3 ]
   [ run adaptive_gauss_kronrod_quadrature_test.cpp : : : <define>TEST1 [ check-target-builds ../config//has_float128 "GCC libquadmath and __float128 support" : <linkflags>-lquadmath ]
     [ requires cxx11_auto_declarations cxx11_lambdas cxx11_smart_ptr cxx11_unified_initialization_syntax ] <debug-symbols>off <toolset>msvc:<cxxflags>/bigobj release : adaptive_gauss_quadrature_test_1 ]
   [ run adaptive_gauss_kronrod_quadrature_test.cpp : : : <define>TEST1A [ check-target-builds ../config//has_float128 "GCC libquadmath and __float128 support" : <linkflags>-lquadmath ]
     [ requires cxx11_auto_declarations cxx11_lambdas cxx11_smart_ptr cxx11_unified_initialization_syntax ] <debug-symbols>off <toolset>msvc:<cxxflags>/bigobj release : adaptive_gauss_quadrature_test_1a ]
   [ run adaptive_gauss_kronrod_quadrature_test.cpp : : : <define>TEST2 [ check-target-builds ../config//has_float128 "GCC libquadmath and __float128 support" : <linkflags>-lquadmath ]
     [ requires cxx11_auto_declarations cxx11_lambdas cxx11_smart_ptr cxx11_unified_initialization_syntax ] <debug-symbols>off <toolset>msvc:<cxxflags>/bigobj release : adaptive_gauss_quadrature_test_2 ]
   [ run adaptive_gauss_kronrod_quadrature_test.cpp : : : <define>TEST3 [ check-target-builds ../config//has_float128 "GCC libquadmath and __float128 support" : <linkflags>-lquadmath ]
     [ requires cxx11_auto_declarations cxx11_lambdas cxx11_smart_ptr cxx11_unified_initialization_syntax ] <debug-symbols>off <toolset>msvc:<cxxflags>/bigobj release : adaptive_gauss_quadrature_test_3 ]

   [ run naive_monte_carlo_test.cpp ../../atomic/build//boost_atomic : : :
     <toolset>msvc:<cxxflags>/bigobj <define>TEST=1  [ requires cxx11_auto_declarations cxx11_lambdas cxx11_unified_initialization_syntax cxx11_hdr_thread cxx11_hdr_atomic cxx11_decltype cxx11_hdr_future cxx11_hdr_chrono cxx11_hdr_random cxx11_allocator ]
     <target-os>linux:<linkflags>"-pthread" : naive_monte_carlo_test_1
   ]
   [ run naive_monte_carlo_test.cpp ../../atomic/build//boost_atomic : : :
     <toolset>msvc:<cxxflags>/bigobj <define>TEST=2  [ requires cxx11_auto_declarations cxx11_lambdas cxx11_unified_initialization_syntax cxx11_hdr_thread cxx11_hdr_atomic cxx11_decltype cxx11_hdr_future cxx11_hdr_chrono cxx11_hdr_random cxx11_allocator ]
     <target-os>linux:<linkflags>"-pthread" : naive_monte_carlo_test_2
   ]
   [ run naive_monte_carlo_test.cpp ../../atomic/build//boost_atomic : : :
     <toolset>msvc:<cxxflags>/bigobj <define>TEST=3  [ requires cxx11_auto_declarations cxx11_lambdas cxx11_unified_initialization_syntax cxx11_hdr_thread cxx11_hdr_atomic cxx11_decltype cxx11_hdr_future cxx11_hdr_chrono cxx11_hdr_random cxx11_allocator ]
     <target-os>linux:<linkflags>"-pthread" : naive_monte_carlo_test_3
   ]
   [ run naive_monte_carlo_test.cpp ../../atomic/build//boost_atomic : : :
     <toolset>msvc:<cxxflags>/bigobj <define>TEST=4  [ requires cxx11_auto_declarations cxx11_lambdas cxx11_unified_initialization_syntax cxx11_hdr_thread cxx11_hdr_atomic cxx11_decltype cxx11_hdr_future cxx11_hdr_chrono cxx11_hdr_random cxx11_allocator ]
     <target-os>linux:<linkflags>"-pthread" : naive_monte_carlo_test_4
   ]
   [ run naive_monte_carlo_test.cpp ../../atomic/build//boost_atomic : : :
     <toolset>msvc:<cxxflags>/bigobj <define>TEST=5  [ requires cxx11_auto_declarations cxx11_lambdas cxx11_unified_initialization_syntax cxx11_hdr_thread cxx11_hdr_atomic cxx11_decltype cxx11_hdr_future cxx11_hdr_chrono cxx11_hdr_random cxx11_allocator ]
     <target-os>linux:<linkflags>"-pthread" : naive_monte_carlo_test_5
   ]
   [ run naive_monte_carlo_test.cpp ../../atomic/build//boost_atomic : : :
     <toolset>msvc:<cxxflags>/bigobj <define>TEST=6  [ requires cxx11_auto_declarations cxx11_lambdas cxx11_unified_initialization_syntax cxx11_hdr_thread cxx11_hdr_atomic cxx11_decltype cxx11_hdr_future cxx11_hdr_chrono cxx11_hdr_random cxx11_allocator ]
     <target-os>linux:<linkflags>"-pthread" : naive_monte_carlo_test_6
   ]
   [ run naive_monte_carlo_test.cpp ../../atomic/build//boost_atomic : : :
     <toolset>msvc:<cxxflags>/bigobj <define>TEST=7  [ requires cxx11_auto_declarations cxx11_lambdas cxx11_unified_initialization_syntax cxx11_hdr_thread cxx11_hdr_atomic cxx11_decltype cxx11_hdr_future cxx11_hdr_chrono cxx11_hdr_random cxx11_allocator ]
     <target-os>linux:<linkflags>"-pthread" : naive_monte_carlo_test_7
   ]
   [ run naive_monte_carlo_test.cpp ../../atomic/build//boost_atomic : : :
     <toolset>msvc:<cxxflags>/bigobj <define>TEST=8  [ requires cxx11_auto_declarations cxx11_lambdas cxx11_unified_initialization_syntax cxx11_hdr_thread cxx11_hdr_atomic cxx11_decltype cxx11_hdr_future cxx11_hdr_chrono cxx11_hdr_random cxx11_allocator ]
     <target-os>linux:<linkflags>"-pthread" : naive_monte_carlo_test_8
   ]
   [ run naive_monte_carlo_test.cpp ../../atomic/build//boost_atomic : : :
     <toolset>msvc:<cxxflags>/bigobj <define>TEST=9  [ requires cxx11_auto_declarations cxx11_lambdas cxx11_unified_initialization_syntax cxx11_hdr_thread cxx11_hdr_atomic cxx11_decltype cxx11_hdr_future cxx11_hdr_chrono cxx11_hdr_random cxx11_allocator ]
     <target-os>linux:<linkflags>"-pthread" : naive_monte_carlo_test_9
   ]
   [ run naive_monte_carlo_test.cpp ../../atomic/build//boost_atomic : : :
     <toolset>msvc:<cxxflags>/bigobj <define>TEST=10  [ requires cxx11_auto_declarations cxx11_lambdas cxx11_unified_initialization_syntax cxx11_hdr_thread cxx11_hdr_atomic cxx11_decltype cxx11_hdr_future cxx11_hdr_chrono cxx11_hdr_random cxx11_allocator ]
     <target-os>linux:<linkflags>"-pthread" : naive_monte_carlo_test_10
   ]
   [ run naive_monte_carlo_test.cpp ../../atomic/build//boost_atomic : : :
     <toolset>msvc:<cxxflags>/bigobj <define>TEST=11  [ requires cxx11_auto_declarations cxx11_lambdas cxx11_unified_initialization_syntax cxx11_hdr_thread cxx11_hdr_atomic cxx11_decltype cxx11_hdr_future cxx11_hdr_chrono cxx11_hdr_random cxx11_allocator ]
     <target-os>linux:<linkflags>"-pthread" : naive_monte_carlo_test_11
   ]
   [ run naive_monte_carlo_test.cpp ../../atomic/build//boost_atomic : : :
     <toolset>msvc:<cxxflags>/bigobj <define>TEST=12  [ requires cxx11_auto_declarations cxx11_lambdas cxx11_unified_initialization_syntax cxx11_hdr_thread cxx11_hdr_atomic cxx11_decltype cxx11_hdr_future cxx11_hdr_chrono cxx11_hdr_random cxx11_allocator ]
     <target-os>linux:<linkflags>"-pthread" : naive_monte_carlo_test_12
   ]
   [ run naive_monte_carlo_test.cpp ../../atomic/build//boost_atomic : : :
     <toolset>msvc:<cxxflags>/bigobj <define>TEST=13  [ requires cxx11_auto_declarations cxx11_lambdas cxx11_unified_initialization_syntax cxx11_hdr_thread cxx11_hdr_atomic cxx11_decltype cxx11_hdr_future cxx11_hdr_chrono cxx11_hdr_random cxx11_allocator ]
     <target-os>linux:<linkflags>"-pthread" : naive_monte_carlo_test_13
   ]
   [ run naive_monte_carlo_test.cpp ../../atomic/build//boost_atomic : : :
     <toolset>msvc:<cxxflags>/bigobj <define>TEST=14  [ requires cxx11_auto_declarations cxx11_lambdas cxx11_unified_initialization_syntax cxx11_hdr_thread cxx11_hdr_atomic cxx11_decltype cxx11_hdr_future cxx11_hdr_chrono cxx11_hdr_random cxx11_allocator ]
     <target-os>linux:<linkflags>"-pthread" : naive_monte_carlo_test_14
   ]
   [ run naive_monte_carlo_test.cpp ../../atomic/build//boost_atomic : : :
     <toolset>msvc:<cxxflags>/bigobj <define>TEST=15  [ requires cxx11_auto_declarations cxx11_lambdas cxx11_unified_initialization_syntax cxx11_hdr_thread cxx11_hdr_atomic cxx11_decltype cxx11_hdr_future cxx11_hdr_chrono cxx11_hdr_random cxx11_allocator ]
     <target-os>linux:<linkflags>"-pthread" : naive_monte_carlo_test_15
   ]
   [ run naive_monte_carlo_test.cpp ../../atomic/build//boost_atomic : : :
     <toolset>msvc:<cxxflags>/bigobj <define>TEST=16  [ requires cxx11_auto_declarations cxx11_lambdas cxx11_unified_initialization_syntax cxx11_hdr_thread cxx11_hdr_atomic cxx11_decltype cxx11_hdr_future cxx11_hdr_chrono cxx11_hdr_random cxx11_allocator ]
     <target-os>linux:<linkflags>"-pthread" : naive_monte_carlo_test_16
   ]
   [ run naive_monte_carlo_test.cpp ../../atomic/build//boost_atomic : : :
     <toolset>msvc:<cxxflags>/bigobj <define>TEST=17  [ requires cxx11_auto_declarations cxx11_lambdas cxx11_unified_initialization_syntax cxx11_hdr_thread cxx11_hdr_atomic cxx11_decltype cxx11_hdr_future cxx11_hdr_chrono cxx11_hdr_random cxx11_allocator ]
     <target-os>linux:<linkflags>"-pthread" : naive_monte_carlo_test_17
   ]
   [ run naive_monte_carlo_test.cpp ../../atomic/build//boost_atomic : : :
     <toolset>msvc:<cxxflags>/bigobj <define>TEST=18  [ requires cxx11_auto_declarations cxx11_lambdas cxx11_unified_initialization_syntax cxx11_hdr_thread cxx11_hdr_atomic cxx11_decltype cxx11_hdr_future cxx11_hdr_chrono cxx11_hdr_random cxx11_allocator ]
     <target-os>linux:<linkflags>"-pthread" : naive_monte_carlo_test_18
   ]
   [ run naive_monte_carlo_test.cpp ../../atomic/build//boost_atomic : : :
     <toolset>msvc:<cxxflags>/bigobj <define>TEST=19  [ requires cxx11_auto_declarations cxx11_lambdas cxx11_unified_initialization_syntax cxx11_hdr_thread cxx11_hdr_atomic cxx11_decltype cxx11_hdr_future cxx11_hdr_chrono cxx11_hdr_random cxx11_allocator ]
     <target-os>linux:<linkflags>"-pthread" : naive_monte_carlo_test_19
   ]
   [ run naive_monte_carlo_test.cpp ../../atomic/build//boost_atomic : : :
     <toolset>msvc:<cxxflags>/bigobj <define>TEST=20  [ requires cxx11_auto_declarations cxx11_lambdas cxx11_unified_initialization_syntax cxx11_hdr_thread cxx11_hdr_atomic cxx11_decltype cxx11_hdr_future cxx11_hdr_chrono cxx11_hdr_random cxx11_allocator ]
     <target-os>linux:<linkflags>"-pthread" : naive_monte_carlo_test_20
   ]
   [ run naive_monte_carlo_test.cpp ../../atomic/build//boost_atomic : : :
     <toolset>msvc:<cxxflags>/bigobj <define>TEST=21  [ requires cxx11_auto_declarations cxx11_lambdas cxx11_unified_initialization_syntax cxx11_hdr_thread cxx11_hdr_atomic cxx11_decltype cxx11_hdr_future cxx11_hdr_chrono cxx11_hdr_random cxx11_allocator ]
     <target-os>linux:<linkflags>"-pthread" : naive_monte_carlo_test_21
   ]
   [ run naive_monte_carlo_test.cpp ../../atomic/build//boost_atomic : : :
     <toolset>msvc:<cxxflags>/bigobj <define>TEST=22  [ requires cxx11_auto_declarations cxx11_lambdas cxx11_unified_initialization_syntax cxx11_hdr_thread cxx11_hdr_atomic cxx11_decltype cxx11_hdr_future cxx11_hdr_chrono cxx11_hdr_random cxx11_allocator ]
     <target-os>linux:<linkflags>"-pthread" : naive_monte_carlo_test_22
   ]
   [ run naive_monte_carlo_test.cpp ../../atomic/build//boost_atomic : : :
     <toolset>msvc:<cxxflags>/bigobj <define>TEST=23  [ requires cxx11_auto_declarations cxx11_lambdas cxx11_unified_initialization_syntax cxx11_hdr_thread cxx11_hdr_atomic cxx11_decltype cxx11_hdr_future cxx11_hdr_chrono cxx11_hdr_random cxx11_allocator ]
     <target-os>linux:<linkflags>"-pthread" : naive_monte_carlo_test_23
   ]
   [ compile compile_test/naive_monte_carlo_incl_test.cpp ../../atomic/build//boost_atomic :
     [ requires cxx11_auto_declarations cxx11_lambdas cxx11_unified_initialization_syntax cxx11_hdr_thread cxx11_hdr_atomic cxx11_decltype cxx11_hdr_future cxx11_hdr_chrono cxx11_hdr_random cxx11_allocator ]
     <target-os>linux:<linkflags>"-pthread"
   ]
   [ compile compile_test/naive_monte_carlo_concept_test.cpp ../../atomic/build//boost_atomic :
     [ requires cxx11_auto_declarations cxx11_lambdas cxx11_unified_initialization_syntax cxx11_hdr_thread cxx11_hdr_atomic cxx11_decltype cxx11_hdr_future cxx11_hdr_chrono cxx11_hdr_random cxx11_allocator ]
     <target-os>linux:<linkflags>"-pthread"
   ]

   [ compile compile_test/gauss_concept_test.cpp : [ requires cxx11_auto_declarations cxx11_lambdas cxx11_smart_ptr cxx11_unified_initialization_syntax ] ]
   [ compile compile_test/gauss_kronrod_concept_test.cpp : [ requires cxx11_auto_declarations cxx11_lambdas cxx11_smart_ptr cxx11_unified_initialization_syntax ] ]

   [ run test_numerical_differentiation.cpp ../../test/build//boost_unit_test_framework  : : : <toolset>msvc:<cxxflags>/bigobj [ requires cxx11_auto_declarations cxx11_constexpr ] ]
   [ run  compile_test/numerical_differentiation_incl_test.cpp compile_test_main  : : : [ requires cxx11_auto_declarations cxx11_constexpr ] ]
   [ compile  compile_test/numerical_differentiation_concept_test.cpp  : [ requires cxx11_auto_declarations cxx11_constexpr ] ]
   [ run test_autodiff_1.cpp ../../test/build//boost_unit_test_framework : : : <toolset>gcc-mingw:<cxxflags>-Wa,-mbig-obj <debug-symbols>off <toolset>msvc:<cxxflags>/bigobj release [ check-target-builds ../config//has_float128 "GCC libquadmath and __float128 support" : <linkflags>-lquadmath ] [ requires cxx11_inline_namespaces ] ]
   [ run test_autodiff_2.cpp ../../test/build//boost_unit_test_framework : : : <toolset>gcc-mingw:<cxxflags>-Wa,-mbig-obj <debug-symbols>off <toolset>msvc:<cxxflags>/bigobj release [ check-target-builds ../config//has_float128 "GCC libquadmath and __float128 support" : <linkflags>-lquadmath ] [ requires cxx11_inline_namespaces ] ]
   [ run test_autodiff_3.cpp ../../test/build//boost_unit_test_framework : : : <toolset>gcc-mingw:<cxxflags>-Wa,-mbig-obj <debug-symbols>off <toolset>msvc:<cxxflags>/bigobj release [ check-target-builds ../config//has_float128 "GCC libquadmath and __float128 support" : <linkflags>-lquadmath ] [ requires cxx11_inline_namespaces ] ]
   [ run test_autodiff_4.cpp ../../test/build//boost_unit_test_framework : : : <toolset>gcc-mingw:<cxxflags>-Wa,-mbig-obj <debug-symbols>off <toolset>msvc:<cxxflags>/bigobj release [ check-target-builds ../config//has_float128 "GCC libquadmath and __float128 support" : <linkflags>-lquadmath ] [ requires cxx11_inline_namespaces ] ]
   [ run test_autodiff_5.cpp ../../test/build//boost_unit_test_framework : : : <toolset>gcc-mingw:<cxxflags>-Wa,-mbig-obj <debug-symbols>off <toolset>msvc:<cxxflags>/bigobj release [ check-target-builds ../config//has_float128 "GCC libquadmath and __float128 support" : <linkflags>-lquadmath ] [ requires cxx11_inline_namespaces ] ]
   [ run test_autodiff_6.cpp ../../test/build//boost_unit_test_framework : : : <toolset>gcc-mingw:<cxxflags>-Wa,-mbig-obj <debug-symbols>off <toolset>msvc:<cxxflags>/bigobj release [ check-target-builds ../config//has_float128 "GCC libquadmath and __float128 support" : <linkflags>-lquadmath ] [ requires cxx11_inline_namespaces ] ]
   [ run test_autodiff_7.cpp ../../test/build//boost_unit_test_framework : : : <toolset>gcc-mingw:<cxxflags>-Wa,-mbig-obj <debug-symbols>off <toolset>msvc:<cxxflags>/bigobj release [ check-target-builds ../config//has_float128 "GCC libquadmath and __float128 support" : <linkflags>-lquadmath ] [ requires cxx11_inline_namespaces ] ]
   [ run test_autodiff_8.cpp ../../test/build//boost_unit_test_framework : : : <toolset>gcc-mingw:<cxxflags>-Wa,-mbig-obj <debug-symbols>off <toolset>msvc:<cxxflags>/bigobj release [ check-target-builds ../config//has_float128 "GCC libquadmath and __float128 support" : <linkflags>-lquadmath ] [ requires cxx11_inline_namespaces ] ]
;

build-project ../example ;

rule get_float128_tests
{
     local result ;
     for local source in [ glob float128/*.cpp ]
     {
         result += [ run $(source)
            /boost/test//boost_unit_test_framework/<link>static
            /boost/regex//boost_regex/<link>static
           : # command line
           : # input files
           : # requirements
            [ check-target-builds ../config//has_intel_quad "Intel _Quad datatype support" : <cxxflags>-Qoption,cpp,--extended_float_type <define>BOOST_MATH_USE_FLOAT128 ]
            [ check-target-builds ../config//has_float128 "GCC libquadmath and __float128 support" : <linkflags>-lquadmath ]
            [ check-target-builds ../config//has_128bit_floatmax_t "128-bit floatmax_t" : : <build>no ]
            <define>BOOST_ALL_NO_LIB
           : $(source:B)_floatmax_t ] ;
     }
     return $(result) ;
}

test-suite float128_tests : [ get_float128_tests ] ;
