<?xml version="1.0" standalone="yes"?>
<library-reference id="local_time_reference"><title>Local Time Reference</title><header name="boost/date_time/local_time/conversion.hpp">
<namespace name="boost">
<namespace name="local_time">












<function name="to_tm"><type>std::tm</type><parameter name="lt"><paramtype>const <classname>local_date_time</classname> &amp;</paramtype></parameter><purpose>Function that creates a tm struct from a local_date_time. </purpose></function>
</namespace>
</namespace>
</header>
<header name="boost/date_time/local_time/custom_time_zone.hpp">
<namespace name="boost">
<namespace name="local_time">
<class name="custom_time_zone_base"><template>
      <template-type-parameter name="CharT"/>
    </template><inherit access="public">date_time::time_zone_base&lt; posix_time::ptime, CharT &gt;</inherit><purpose>A real time zone. </purpose><typedef name="time_duration_type"><type>boost::posix_time::time_duration</type></typedef>
<typedef name="base_type"><type>date_time::time_zone_base&lt; posix_time::ptime, CharT &gt;</type></typedef>
<typedef name="string_type"><type>base_type::string_type</type></typedef>
<typedef name="stringstream_type"><type>base_type::stringstream_type</type></typedef>
<typedef name="time_zone_names"><type>date_time::time_zone_names_base&lt; CharT &gt;</type></typedef>
<typedef name="char_type"><type>CharT</type></typedef>
<method-group name="public member functions">
<method name="dst_zone_abbrev" cv="const" specifiers="virtual"><type>string_type</type></method>
<method name="std_zone_abbrev" cv="const" specifiers="virtual"><type>string_type</type></method>
<method name="dst_zone_name" cv="const" specifiers="virtual"><type>string_type</type></method>
<method name="std_zone_name" cv="const" specifiers="virtual"><type>string_type</type></method>
<method name="has_dst" cv="const" specifiers="virtual"><type>bool</type><purpose>True if zone uses daylight savings adjustments. </purpose></method>
<method name="dst_local_start_time" cv="const" specifiers="virtual"><type>posix_time::ptime</type><parameter name="y"><paramtype>gregorian::greg_year</paramtype></parameter><purpose>Local time that DST starts – NADT if has_dst is false. </purpose></method>
<method name="dst_local_end_time" cv="const" specifiers="virtual"><type>posix_time::ptime</type><parameter name="y"><paramtype>gregorian::greg_year</paramtype></parameter><purpose>Local time that DST ends – NADT if has_dst is false. </purpose></method>
<method name="base_utc_offset" cv="const" specifiers="virtual"><type>time_duration_type</type><purpose>Base offset from UTC for zone (eg: -07:30:00) </purpose></method>
<method name="dst_offset" cv="const" specifiers="virtual"><type>time_duration_type</type><purpose>Adjustment forward or back made while DST is in effect. </purpose></method>
<method name="to_posix_string" cv="const" specifiers="virtual"><type>string_type</type><purpose>Returns a POSIX time_zone string for this object. </purpose></method>
</method-group>
<constructor><parameter name="zone_names"><paramtype>const time_zone_names &amp;</paramtype></parameter><parameter name="utc_offset"><paramtype>const time_duration_type &amp;</paramtype></parameter><parameter name="dst_shift"><paramtype>const dst_adjustment_offsets &amp;</paramtype></parameter><parameter name="calc_rule"><paramtype>boost::shared_ptr&lt; dst_calc_rule &gt;</paramtype></parameter></constructor>
<destructor/>
</class><typedef name="dst_calc_rule_ptr"><type>boost::shared_ptr&lt; dst_calc_rule &gt;</type></typedef>
<typedef name="custom_time_zone"><type><classname>custom_time_zone_base</classname>&lt; char &gt;</type></typedef>













</namespace>
</namespace>
</header>
<header name="boost/date_time/local_time/date_duration_operators.hpp">
<para>Operators for local_date_time and optional gregorian types. Operators use snap-to-end-of-month behavior. Further details on this behavior can be found in reference for date_time/date_duration_types.hpp and documentation for month and year iterators. </para><namespace name="boost">
<namespace name="local_time">




<function name="operator+"><type><classname>local_date_time</classname></type><parameter name="t"><paramtype>const <classname>local_date_time</classname> &amp;</paramtype></parameter><parameter name="m"><paramtype>const boost::gregorian::months &amp;</paramtype></parameter><description><para>Adds a months object and a local_date_time. Result will be same day-of-month as local_date_time unless original day was the last day of month. see date_time::months_duration for more details </para></description></function>
<function name="operator+="><type><classname>local_date_time</classname></type><parameter name="t"><paramtype><classname>local_date_time</classname> &amp;</paramtype></parameter><parameter name="m"><paramtype>const boost::gregorian::months &amp;</paramtype></parameter><description><para>Adds a months object to a local_date_time. Result will be same day-of-month as local_date_time unless original day was the last day of month. see date_time::months_duration for more details </para></description></function>
<function name="operator-"><type><classname>local_date_time</classname></type><parameter name="t"><paramtype>const <classname>local_date_time</classname> &amp;</paramtype></parameter><parameter name="m"><paramtype>const boost::gregorian::months &amp;</paramtype></parameter><description><para>Subtracts a months object and a local_date_time. Result will be same day-of-month as local_date_time unless original day was the last day of month. see date_time::months_duration for more details </para></description></function>
<function name="operator-="><type><classname>local_date_time</classname></type><parameter name="t"><paramtype><classname>local_date_time</classname> &amp;</paramtype></parameter><parameter name="m"><paramtype>const boost::gregorian::months &amp;</paramtype></parameter><description><para>Subtracts a months object from a local_date_time. Result will be same day-of-month as local_date_time unless original day was the last day of month. see date_time::months_duration for more details </para></description></function>
<function name="operator+"><type><classname>local_date_time</classname></type><parameter name="t"><paramtype>const <classname>local_date_time</classname> &amp;</paramtype></parameter><parameter name="y"><paramtype>const boost::gregorian::years &amp;</paramtype></parameter><description><para>Adds a years object and a local_date_time. Result will be same month and day-of-month as local_date_time unless original day was the last day of month. see date_time::years_duration for more details </para></description></function>
<function name="operator+="><type><classname>local_date_time</classname></type><parameter name="t"><paramtype><classname>local_date_time</classname> &amp;</paramtype></parameter><parameter name="y"><paramtype>const boost::gregorian::years &amp;</paramtype></parameter><description><para>Adds a years object to a local_date_time. Result will be same month and day-of-month as local_date_time unless original day was the last day of month. see date_time::years_duration for more details </para></description></function>
<function name="operator-"><type><classname>local_date_time</classname></type><parameter name="t"><paramtype>const <classname>local_date_time</classname> &amp;</paramtype></parameter><parameter name="y"><paramtype>const boost::gregorian::years &amp;</paramtype></parameter><description><para>Subtracts a years object and a local_date_time. Result will be same month and day-of-month as local_date_time unless original day was the last day of month. see date_time::years_duration for more details </para></description></function>
<function name="operator-="><type><classname>local_date_time</classname></type><parameter name="t"><paramtype><classname>local_date_time</classname> &amp;</paramtype></parameter><parameter name="y"><paramtype>const boost::gregorian::years &amp;</paramtype></parameter><description><para>Subtracts a years object from a local_date_time. Result will be same month and day-of-month as local_date_time unless original day was the last day of month. see date_time::years_duration for more details </para></description></function>

</namespace>
</namespace>
</header>
<header name="boost/date_time/local_time/dst_transition_day_rules.hpp">
<namespace name="boost">
<namespace name="local_time">
<struct name="first_last_rule_spec"><typedef name="date_type"><type>gregorian::date</type></typedef>
<typedef name="start_rule"><type>gregorian::first_kday_of_month</type></typedef>
<typedef name="end_rule"><type>gregorian::last_kday_of_month</type></typedef>
</struct><struct name="last_last_rule_spec"><typedef name="date_type"><type>gregorian::date</type></typedef>
<typedef name="start_rule"><type>gregorian::last_kday_of_month</type></typedef>
<typedef name="end_rule"><type>gregorian::last_kday_of_month</type></typedef>
</struct><struct name="nth_kday_rule_spec"><typedef name="date_type"><type>gregorian::date</type></typedef>
<typedef name="start_rule"><type>gregorian::nth_kday_of_month</type></typedef>
<typedef name="end_rule"><type>gregorian::nth_kday_of_month</type></typedef>
</struct><struct name="nth_last_rule_spec"><typedef name="date_type"><type>gregorian::date</type></typedef>
<typedef name="start_rule"><type>gregorian::nth_kday_of_month</type></typedef>
<typedef name="end_rule"><type>gregorian::last_kday_of_month</type></typedef>
</struct><struct name="partial_date_rule_spec"><typedef name="date_type"><type>gregorian::date</type></typedef>
<typedef name="start_rule"><type>gregorian::partial_date</type></typedef>
<typedef name="end_rule"><type>gregorian::partial_date</type></typedef>
</struct><typedef name="dst_calc_rule"><purpose>Provides rule of the form starting Apr 30 ending Oct 21. </purpose><type>date_time::dst_day_calc_rule&lt; gregorian::date &gt;</type></typedef>
<typedef name="partial_date_dst_rule"><purpose>Provides rule of the form first Sunday in April, last Saturday in Oct. </purpose><type>date_time::day_calc_dst_rule&lt; <classname>partial_date_rule_spec</classname> &gt;</type></typedef>
<typedef name="first_last_dst_rule"><purpose>Provides rule of the form first Sunday in April, last Saturday in Oct. </purpose><type>date_time::day_calc_dst_rule&lt; <classname>first_last_rule_spec</classname> &gt;</type></typedef>
<typedef name="last_last_dst_rule"><purpose>Provides rule of the form last Sunday in April, last Saturday in Oct. </purpose><type>date_time::day_calc_dst_rule&lt; <classname>last_last_rule_spec</classname> &gt;</type></typedef>
<typedef name="nth_last_dst_rule"><purpose>Provides rule in form of [1st|2nd|3rd|4th] Sunday in April, last Sunday in Oct. </purpose><type>date_time::day_calc_dst_rule&lt; <classname>nth_last_rule_spec</classname> &gt;</type></typedef>
<typedef name="nth_kday_dst_rule"><purpose>Provides rule in form of [1st|2nd|3rd|4th] Sunday in April/October. </purpose><type>date_time::day_calc_dst_rule&lt; <classname>nth_kday_rule_spec</classname> &gt;</type></typedef>
<typedef name="nth_day_of_the_week_in_month_dst_rule"><purpose>Provides rule in form of [1st|2nd|3rd|4th] Sunday in April/October. </purpose><type>date_time::day_calc_dst_rule&lt; <classname>nth_kday_rule_spec</classname> &gt;</type></typedef>













</namespace>
</namespace>
</header>
<header name="boost/date_time/local_time/local_date_time.hpp">
<namespace name="boost">
<namespace name="local_time">
<struct name="ambiguous_result"><inherit access="public">logic_error</inherit><purpose>simple exception for reporting when STD or DST cannot be determined </purpose><method-group name="public member functions">
</method-group>
<constructor><parameter name="msg"><paramtype>std::string const &amp;</paramtype><default>std::string()</default></parameter></constructor>
</struct><struct name="dst_not_valid"><inherit access="public">logic_error</inherit><method-group name="public member functions">
</method-group>
<constructor><parameter name="msg"><paramtype>std::string const &amp;</paramtype><default>std::string()</default></parameter></constructor>
</struct><class name="local_date_time_base"><template>
      <template-type-parameter name="utc_time_"><default>posix_time::ptime</default></template-type-parameter>
      <template-type-parameter name="tz_type"><default>date_time::time_zone_base&lt;utc_time_,char&gt;</default></template-type-parameter>
    </template><inherit access="public">date_time::base_time&lt; utc_time_, boost::posix_time::posix_time_system &gt;</inherit><purpose>Representation of "wall-clock" time in a particular time zone. </purpose><description><para>Representation of "wall-clock" time in a particular time zone Local_date_time_base holds a time value (date and time offset from 00:00) along with a time zone. The time value is stored as UTC and conversions to wall clock time are made as needed. This approach allows for operations between wall-clock times in different time zones, and daylight savings time considerations, to be made. Time zones are required to be in the form of a boost::shared_ptr&lt;time_zone_base&gt;. </para></description><enum name="DST_CALC_OPTIONS"><enumvalue name="EXCEPTION_ON_ERROR"/><enumvalue name="NOT_DATE_TIME_ON_ERROR"/></enum>
<typedef name="utc_time_type"><type>utc_time_</type></typedef>
<typedef name="time_duration_type"><type>utc_time_type::time_duration_type</type></typedef>
<typedef name="date_type"><type>utc_time_type::date_type</type></typedef>
<typedef name="date_duration_type"><type>date_type::duration_type</type></typedef>
<typedef name="time_system_type"><type>utc_time_type::time_system_type</type></typedef>
<method-group name="public member functions">
<method name="zone" cv="const"><type>boost::shared_ptr&lt; tz_type &gt;</type><purpose>returns time zone associated with calling instance </purpose></method>
<method name="is_dst" cv="const"><type>bool</type><purpose>returns false is time_zone is NULL and if time value is a special_value </purpose></method>
<method name="utc_time" cv="const"><type>utc_time_type</type><purpose>Returns object's time value as a utc representation. </purpose></method>
<method name="local_time" cv="const"><type>utc_time_type</type><purpose>Returns object's time value as a local representation. </purpose></method>
<method name="to_string" cv="const"><type>std::string</type><purpose>Returns string in the form "2003-Aug-20 05:00:00 EDT". </purpose><description><para>Returns string in the form "2003-Aug-20 05:00:00 EDT". If time_zone is NULL the time zone abbreviation will be "UTC". The time zone abbrev will not be included if calling object is a special_value </para></description></method>
<method name="local_time_in" cv="const"><type><classname>local_date_time_base</classname></type><parameter name="new_tz"><paramtype>boost::shared_ptr&lt; tz_type &gt;</paramtype></parameter><parameter name="td"><paramtype>time_duration_type</paramtype><default>time_duration_type(0, 0, 0)</default></parameter><description><para>returns a <classname alt="boost::local_time::local_date_time_base">local_date_time_base</classname> in the given time zone with the optional time_duration added. </para></description></method>
<method name="zone_name" cv="const"><type>std::string</type><parameter name="as_offset"><paramtype>bool</paramtype><default>false</default></parameter><purpose>Returns name of associated time zone or "Coordinated Universal Time". </purpose><description><para>Optional bool parameter will return time zone as an offset (ie "+07:00" extended iso format). Empty string is returned for classes that do not use a time_zone </para></description></method>
<method name="zone_abbrev" cv="const"><type>std::string</type><parameter name="as_offset"><paramtype>bool</paramtype><default>false</default></parameter><purpose>Returns abbreviation of associated time zone or "UTC". </purpose><description><para>Optional bool parameter will return time zone as an offset (ie "+0700" iso format). Empty string is returned for classes that do not use a time_zone </para></description></method>
<method name="zone_as_posix_string" cv="const"><type>std::string</type><purpose>returns a posix_time_zone string for the associated time_zone. If no time_zone, "UTC+00" is returned. </purpose></method>
<method name="operator==" cv="const"><type>bool</type><parameter name="rhs"><paramtype>const <classname>local_date_time_base</classname> &amp;</paramtype></parameter><purpose>Equality comparison operator. </purpose><description><para>Equality comparison operator </para></description></method>
<method name="operator!=" cv="const"><type>bool</type><parameter name="rhs"><paramtype>const <classname>local_date_time_base</classname> &amp;</paramtype></parameter><purpose>Non-Equality comparison operator. </purpose></method>
<method name="operator&lt;" cv="const"><type>bool</type><parameter name="rhs"><paramtype>const <classname>local_date_time_base</classname> &amp;</paramtype></parameter><purpose>Less than comparison operator. </purpose></method>
<method name="operator&lt;=" cv="const"><type>bool</type><parameter name="rhs"><paramtype>const <classname>local_date_time_base</classname> &amp;</paramtype></parameter><purpose>Less than or equal to comparison operator. </purpose></method>
<method name="operator&gt;" cv="const"><type>bool</type><parameter name="rhs"><paramtype>const <classname>local_date_time_base</classname> &amp;</paramtype></parameter><purpose>Greater than comparison operator. </purpose></method>
<method name="operator&gt;=" cv="const"><type>bool</type><parameter name="rhs"><paramtype>const <classname>local_date_time_base</classname> &amp;</paramtype></parameter><purpose>Greater than or equal to comparison operator. </purpose></method>
<method name="operator+" cv="const"><type><classname>local_date_time_base</classname></type><parameter name="dd"><paramtype>const date_duration_type &amp;</paramtype></parameter><purpose>Local_date_time + date_duration. </purpose></method>
<method name="operator+="><type><classname>local_date_time_base</classname></type><parameter name="dd"><paramtype>const date_duration_type &amp;</paramtype></parameter><purpose>Local_date_time += date_duration. </purpose></method>
<method name="operator-" cv="const"><type><classname>local_date_time_base</classname></type><parameter name="dd"><paramtype>const date_duration_type &amp;</paramtype></parameter><purpose>Local_date_time - date_duration. </purpose></method>
<method name="operator-="><type><classname>local_date_time_base</classname></type><parameter name="dd"><paramtype>const date_duration_type &amp;</paramtype></parameter><purpose>Local_date_time -= date_duration. </purpose></method>
<method name="operator+" cv="const"><type><classname>local_date_time_base</classname></type><parameter name="td"><paramtype>const time_duration_type &amp;</paramtype></parameter><purpose>Local_date_time + time_duration. </purpose></method>
<method name="operator+="><type><classname>local_date_time_base</classname></type><parameter name="td"><paramtype>const time_duration_type &amp;</paramtype></parameter><purpose>Local_date_time += time_duration. </purpose></method>
<method name="operator-" cv="const"><type><classname>local_date_time_base</classname></type><parameter name="td"><paramtype>const time_duration_type &amp;</paramtype></parameter><purpose>Local_date_time - time_duration. </purpose></method>
<method name="operator-="><type><classname>local_date_time_base</classname></type><parameter name="td"><paramtype>const time_duration_type &amp;</paramtype></parameter><purpose>Local_date_time -= time_duration. </purpose></method>
<method name="operator-" cv="const"><type>time_duration_type</type><parameter name="rhs"><paramtype>const <classname>local_date_time_base</classname> &amp;</paramtype></parameter><purpose>local_date_time -= local_date_time --&gt; time_duration_type </purpose></method>
</method-group>
<constructor><parameter name="t"><paramtype>utc_time_type</paramtype><description><para>A UTC time </para></description></parameter><parameter name="tz"><paramtype>boost::shared_ptr&lt; tz_type &gt;</paramtype><description><para>Timezone for to adjust the UTC time to. </para></description></parameter><description><para>This constructor interprets the passed time as a UTC time. So, for example, if the passed timezone is UTC-5 then the time will be adjusted back 5 hours. The time zone allows for automatic calculation of whether the particular time is adjusted for daylight savings, etc. If the time zone shared pointer is null then time stays unadjusted. 
</para></description></constructor>
<constructor><parameter name="d"><paramtype>date_type</paramtype></parameter><parameter name="td"><paramtype>time_duration_type</paramtype></parameter><parameter name="tz"><paramtype>boost::shared_ptr&lt; tz_type &gt;</paramtype></parameter><parameter name="dst_flag"><paramtype>bool</paramtype></parameter><description><para>This constructs a local time – the passed time information understood to be in the passed tz. The DST flag must be passed to indicate whether the time is in daylight savings or not. 
</para></description><throws><simpara><classname>&amp;ndash;</classname> <classname alt="boost::local_time::time_label_invalid">time_label_invalid</classname> if the time passed does not exist in the given locale. The non-existent case occurs typically during the shift-back from daylight savings time. When the clock is shifted forward a range of times (2 am to 3 am in the US) is skipped and hence is invalid. <classname alt="boost::local_time::dst_not_valid">dst_not_valid</classname> if the DST flag is passed for a period where DST is not active. </simpara></throws></constructor>
<constructor><parameter name="d"><paramtype>date_type</paramtype></parameter><parameter name="td"><paramtype>time_duration_type</paramtype></parameter><parameter name="tz"><paramtype>boost::shared_ptr&lt; tz_type &gt;</paramtype></parameter><parameter name="calc_option"><paramtype>DST_CALC_OPTIONS</paramtype></parameter><description><para>This constructs a local time – the passed time information understood to be in the passed tz. The DST flag is calculated according to the specified rule. </para></description></constructor>
<destructor><purpose>Simple destructor, releases time zone if last referrer. </purpose></destructor>
<constructor><parameter name="rhs"><paramtype>const <classname>local_date_time_base</classname> &amp;</paramtype></parameter><purpose>Copy constructor. </purpose></constructor>
<constructor specifiers="explicit"><parameter name="sv"><paramtype>const boost::date_time::special_values</paramtype></parameter><parameter name="tz"><paramtype>boost::shared_ptr&lt; tz_type &gt;</paramtype><default>boost::shared_ptr&lt; tz_type &gt;()</default></parameter><purpose>Special values constructor. </purpose></constructor>
<method-group name="public static functions">
<method name="check_dst" specifiers="static"><type>time_is_dst_result</type><parameter name="d"><paramtype>date_type</paramtype></parameter><parameter name="td"><paramtype>time_duration_type</paramtype></parameter><parameter name="tz"><paramtype>boost::shared_ptr&lt; tz_type &gt;</paramtype></parameter><purpose>Determines if given time label is in daylight savings for given zone. </purpose><description><para>Determines if given time label is in daylight savings for given zone. Takes a date and time_duration representing a local time, along with time zone, and returns a time_is_dst_result object as result. </para></description></method>
</method-group>
<method-group name="private member functions">
<method name="construction_adjustment"><type>utc_time_type</type><parameter name="t"><paramtype>utc_time_type</paramtype></parameter><parameter name="z"><paramtype>boost::shared_ptr&lt; tz_type &gt;</paramtype></parameter><parameter name="dst_flag"><paramtype>bool</paramtype></parameter><description><para>Adjust the passed in time to UTC? </para></description></method>
<method name="zone_as_offset" cv="const"><type>std::string</type><parameter name="td"><paramtype>const time_duration_type &amp;</paramtype></parameter><parameter name="separator"><paramtype>const std::string &amp;</paramtype></parameter><description><para>Simple formatting code – todo remove this? </para></description></method>
</method-group>
</class><struct name="time_label_invalid"><inherit access="public">logic_error</inherit><purpose>simple exception for when time label given cannot exist </purpose><method-group name="public member functions">
</method-group>
<constructor><parameter name="msg"><paramtype>std::string const &amp;</paramtype><default>std::string()</default></parameter></constructor>
</struct><typedef name="local_date_time"><purpose>Use the default parameters to define local_date_time. </purpose><type><classname>local_date_time_base</classname></type></typedef>













</namespace>
</namespace>
</header>
<header name="boost/date_time/local_time/local_time.hpp">
</header>
<header name="boost/date_time/local_time/local_time_io.hpp">
<namespace name="boost">
<namespace name="local_time">
<typedef name="wlocal_time_facet"><type>boost::date_time::time_facet&lt; <classname>local_date_time</classname>, wchar_t &gt;</type></typedef>
<typedef name="local_time_facet"><type>boost::date_time::time_facet&lt; <classname>local_date_time</classname>, char &gt;</type></typedef>
<typedef name="wlocal_time_input_facet"><type>boost::date_time::time_input_facet&lt; local_date_time::utc_time_type, wchar_t &gt;</type></typedef>
<typedef name="local_time_input_facet"><type>boost::date_time::time_input_facet&lt; local_date_time::utc_time_type, char &gt;</type></typedef>
<function name="operator&lt;&lt;"><type>std::basic_ostream&lt; CharT, TraitsT &gt; &amp;</type><template>
          <template-type-parameter name="CharT"/>
          <template-type-parameter name="TraitsT"/>
        </template><parameter name="os"><paramtype>std::basic_ostream&lt; CharT, TraitsT &gt; &amp;</paramtype></parameter><parameter name="ldt"><paramtype>const <classname>local_date_time</classname> &amp;</paramtype></parameter><purpose>operator&lt;&lt; for local_date_time - see local_time docs for formatting details </purpose></function>
<function name="operator&gt;&gt;"><type>std::basic_istream&lt; CharT, Traits &gt; &amp;</type><template>
          <template-type-parameter name="CharT"/>
          <template-type-parameter name="Traits"/>
        </template><parameter name="is"><paramtype>std::basic_istream&lt; CharT, Traits &gt; &amp;</paramtype></parameter><parameter name="ldt"><paramtype><classname>local_date_time</classname> &amp;</paramtype></parameter><purpose>input operator for local_date_time </purpose></function>
<function name="operator&lt;&lt;"><type>std::basic_ostream&lt; CharT, TraitsT &gt; &amp;</type><template>
          <template-type-parameter name="CharT"/>
          <template-type-parameter name="TraitsT"/>
        </template><parameter name="os"><paramtype>std::basic_ostream&lt; CharT, TraitsT &gt; &amp;</paramtype></parameter><parameter name="p"><paramtype>const boost::local_time::local_time_period &amp;</paramtype></parameter><purpose>output operator for local_time_period </purpose></function>
<function name="operator&gt;&gt;"><type>std::basic_istream&lt; CharT, Traits &gt; &amp;</type><template>
          <template-type-parameter name="CharT"/>
          <template-type-parameter name="Traits"/>
        </template><parameter name="is"><paramtype>std::basic_istream&lt; CharT, Traits &gt; &amp;</paramtype></parameter><parameter name="tp"><paramtype>boost::local_time::local_time_period &amp;</paramtype></parameter><purpose>input operator for local_time_period </purpose></function>









</namespace>
</namespace>
</header>
<header name="boost/date_time/local_time/local_time_types.hpp">
<namespace name="boost">
<namespace name="local_time">
<typedef name="local_time_period"><type>boost::date_time::period&lt; <classname>local_date_time</classname>, boost::posix_time::time_duration &gt;</type></typedef>
<typedef name="local_time_iterator"><type>date_time::time_itr&lt; <classname>local_date_time</classname> &gt;</type></typedef>
<typedef name="local_sec_clock"><type>date_time::second_clock&lt; <classname>local_date_time</classname> &gt;</type></typedef>
<typedef name="local_microsec_clock"><type>date_time::microsec_clock&lt; <classname>local_date_time</classname> &gt;</type></typedef>
<typedef name="time_zone"><type>date_time::time_zone_base&lt; posix_time::ptime, char &gt;</type></typedef>
<typedef name="wtime_zone"><type>date_time::time_zone_base&lt; posix_time::ptime, wchar_t &gt;</type></typedef>
<typedef name="time_zone_ptr"><purpose>Shared Pointer for custom_time_zone and posix_time_zone objects. </purpose><type>boost::shared_ptr&lt; time_zone &gt;</type></typedef>
<typedef name="wtime_zone_ptr"><type>boost::shared_ptr&lt; wtime_zone &gt;</type></typedef>
<typedef name="time_zone_names"><type>date_time::time_zone_names_base&lt; char &gt;</type></typedef>
<typedef name="wtime_zone_names"><type>date_time::time_zone_names_base&lt; wchar_t &gt;</type></typedef>













</namespace>
</namespace>
</header>
<header name="boost/date_time/local_time/posix_time_zone.hpp">
<namespace name="boost">
<namespace name="local_time">
<struct name="bad_adjustment"><inherit access="public">out_of_range</inherit><purpose>simple exception for UTC daylight savings adjustment </purpose><method-group name="public member functions">
</method-group>
<constructor><parameter name="msg"><paramtype>std::string const &amp;</paramtype><default>std::string()</default></parameter></constructor>
</struct><struct name="bad_offset"><inherit access="public">out_of_range</inherit><purpose>simple exception for UTC and Daylight savings start/end offsets </purpose><method-group name="public member functions">
</method-group>
<constructor><parameter name="msg"><paramtype>std::string const &amp;</paramtype><default>std::string()</default></parameter></constructor>
</struct><class name="posix_time_zone_base"><template>
      <template-type-parameter name="CharT"/>
    </template><inherit access="public">date_time::time_zone_base&lt; posix_time::ptime, CharT &gt;</inherit><purpose>A time zone class constructed from a POSIX time zone string. </purpose><description><para>A POSIX time zone string takes the form of:<sbr/>
 "std offset dst [offset],start[/time],end[/time]" (w/no spaces) 'std' specifies the abbrev of the time zone.<sbr/>
 'offset' is the offset from UTC.<sbr/>
 'dst' specifies the abbrev of the time zone during daylight savings time.<sbr/>
 The second offset is how many hours changed during DST. Default=1<sbr/>
 'start' and'end' are the dates when DST goes into (and out of) effect.<sbr/>
 'offset' takes the form of: [+|-]hh[:mm[:ss]] {h=0-23, m/s=0-59}<sbr/>
 'time' and 'offset' take the same form. Time defaults=02:00:00<sbr/>
 'start' and 'end' can be one of three forms:<sbr/>
 Mm.w.d {month=1-12, week=1-5 (5 is always last), day=0-6}<sbr/>
 Jn {n=1-365 Feb29 is never counted}<sbr/>
 n {n=0-365 Feb29 is counted in leap years}<sbr/>
 Example "PST-5PDT01:00:00,M4.1.0/02:00:00,M10.1.0/02:00:00" <sbr/>
 Exceptions will be thrown under these conditions:<sbr/>
 An invalid date spec (see date class)<sbr/>
 A <classname alt="boost::local_time::bad_offset">boost::local_time::bad_offset</classname> exception will be thrown for:<sbr/>
 A DST start or end offset that is negative or more than 24 hours<sbr/>
 A UTC zone that is greater than +14 or less than -12 hours<sbr/>
 A <classname alt="boost::local_time::bad_adjustment">boost::local_time::bad_adjustment</classname> exception will be thrown for:<sbr/>
 A DST adjustment that is 24 hours or more (positive or negative)<sbr/>
</para><para>Note that UTC zone offsets can be greater than +12: <ulink url="http://www.worldtimezone.com/utc/utc+1200.html">http://www.worldtimezone.com/utc/utc+1200.html</ulink> </para></description><typedef name="time_duration_type"><type>boost::posix_time::time_duration</type></typedef>
<typedef name="time_zone_names"><type>date_time::time_zone_names_base&lt; CharT &gt;</type></typedef>
<typedef name="base_type"><type>date_time::time_zone_base&lt; posix_time::ptime, CharT &gt;</type></typedef>
<typedef name="string_type"><type>base_type::string_type</type></typedef>
<typedef name="char_type"><type>CharT</type></typedef>
<typedef name="stringstream_type"><type>base_type::stringstream_type</type></typedef>
<typedef name="char_separator_type"><type>boost::char_separator&lt; char_type, std::char_traits&lt; char_type &gt; &gt;</type></typedef>
<typedef name="tokenizer_type"><type>boost::tokenizer&lt; char_separator_type, typename string_type::const_iterator, string_type &gt;</type></typedef>
<typedef name="tokenizer_iterator_type"><type>tokenizer_type::iterator</type></typedef>
<method-group name="public member functions">
<method name="std_zone_abbrev" cv="const" specifiers="virtual"><type>string_type</type><purpose>String for the zone when not in daylight savings (eg: EST) </purpose></method>
<method name="dst_zone_abbrev" cv="const" specifiers="virtual"><type>string_type</type><purpose>String for the timezone when in daylight savings (eg: EDT) </purpose><description><para>For those time zones that have no DST, an empty string is used </para></description></method>
<method name="std_zone_name" cv="const" specifiers="virtual"><type>string_type</type><purpose>String for the zone when not in daylight savings (eg: Eastern Standard Time) </purpose><description><para>The full STD name is not extracted from the posix time zone string. Therefore, the STD abbreviation is used in it's place </para></description></method>
<method name="dst_zone_name" cv="const" specifiers="virtual"><type>string_type</type><purpose>String for the timezone when in daylight savings (eg: Eastern Daylight Time) </purpose><description><para>The full DST name is not extracted from the posix time zone string. Therefore, the STD abbreviation is used in it's place. For time zones that have no DST, an empty string is used </para></description></method>
<method name="has_dst" cv="const" specifiers="virtual"><type>bool</type><purpose>True if zone uses daylight savings adjustments otherwise false. </purpose></method>
<method name="dst_local_start_time" cv="const" specifiers="virtual"><type>posix_time::ptime</type><parameter name="y"><paramtype>gregorian::greg_year</paramtype></parameter><purpose>Local time that DST starts – NADT if has_dst is false. </purpose></method>
<method name="dst_local_end_time" cv="const" specifiers="virtual"><type>posix_time::ptime</type><parameter name="y"><paramtype>gregorian::greg_year</paramtype></parameter><purpose>Local time that DST ends – NADT if has_dst is false. </purpose></method>
<method name="base_utc_offset" cv="const" specifiers="virtual"><type>time_duration_type</type><purpose>Base offset from UTC for zone (eg: -07:30:00) </purpose></method>
<method name="dst_offset" cv="const" specifiers="virtual"><type>time_duration_type</type><purpose>Adjustment forward or back made while DST is in effect. </purpose></method>
<method name="to_posix_string" cv="const" specifiers="virtual"><type>string_type</type><purpose>Returns a POSIX time_zone string for this object. </purpose></method>
</method-group>
<constructor><parameter name="s"><paramtype>const string_type &amp;</paramtype></parameter><purpose>Construct from a POSIX time zone string. </purpose></constructor>
<destructor/>
<method-group name="private member functions">
<method name="calc_zone"><type>void</type><parameter name="obj"><paramtype>const string_type &amp;</paramtype></parameter><description><para>Extract time zone abbreviations for STD &amp; DST as well as the offsets for the time shift that occurs and how much of a shift. At this time full time zone names are NOT extracted so the abbreviations are used in their place </para></description></method>
<method name="calc_rules"><type>void</type><parameter name="start"><paramtype>const string_type &amp;</paramtype></parameter><parameter name="end"><paramtype>const string_type &amp;</paramtype></parameter></method>
<method name="M_func"><type>void</type><parameter name="s"><paramtype>const string_type &amp;</paramtype></parameter><parameter name="e"><paramtype>const string_type &amp;</paramtype></parameter></method>
<method name="julian_no_leap"><type>void</type><parameter name="s"><paramtype>const string_type &amp;</paramtype></parameter><parameter name="e"><paramtype>const string_type &amp;</paramtype></parameter><purpose>Julian day. Feb29 is never counted, even in leap years. </purpose></method>
<method name="julian_day"><type>void</type><parameter name="s"><paramtype>const string_type &amp;</paramtype></parameter><parameter name="e"><paramtype>const string_type &amp;</paramtype></parameter><purpose>Julian day. Feb29 is always counted, but exception thrown in non-leap years. </purpose></method>
</method-group>
<method-group name="private static functions">
<method name="td_as_string" specifiers="static"><type>std::string</type><parameter name="td"><paramtype>const time_duration_type &amp;</paramtype></parameter><purpose>helper function used when throwing exceptions </purpose></method>
</method-group>
</class><typedef name="dst_adjustment_offsets"><type>boost::date_time::dst_adjustment_offsets&lt; boost::posix_time::time_duration &gt;</type></typedef>
<typedef name="posix_time_zone"><type><classname>posix_time_zone_base</classname>&lt; char &gt;</type></typedef>













</namespace>
</namespace>
</header>
<header name="boost/date_time/local_time/tz_database.hpp">
<namespace name="boost">
<namespace name="local_time">
<typedef name="tz_database"><purpose>Object populated with boost::shared_ptr&lt;time_zone_base&gt; objects. </purpose><description><para>Object populated with boost::shared_ptr&lt;time_zone_base&gt; objects Database is populated from specs stored in external csv file. See date_time::tz_db_base for greater detail </para></description><type>date_time::tz_db_base&lt; <classname>custom_time_zone</classname>, nth_kday_dst_rule &gt;</type></typedef>













</namespace>
</namespace>
</header>
</library-reference>