<?xml version="1.0" standalone="yes"?>
<library-reference id="gregorian_reference"><title>Gregorian Reference</title><header name="boost/date_time/gregorian/conversion.hpp">
<namespace name="boost">
<namespace name="gregorian">








































































<function name="to_tm"><type>std::tm</type><parameter name="d"><paramtype>const <classname>date</classname> &amp;</paramtype></parameter><purpose>Converts a date to a tm struct. Throws out_of_range exception if date is a special value. </purpose></function>
<function name="date_from_tm"><type><classname>date</classname></type><parameter name="datetm"><paramtype>const std::tm &amp;</paramtype></parameter><purpose>Converts a tm structure into a date dropping the any time values. </purpose></function>
</namespace>
</namespace>
</header>
<header name="boost/date_time/gregorian/formatters.hpp">
<namespace name="boost">
<namespace name="gregorian">




























































<function name="to_simple_string_type"><type>std::basic_string&lt; charT &gt;</type><template>
          <template-type-parameter name="charT"/>
        </template><parameter name="d"><paramtype>const <classname>date</classname> &amp;</paramtype></parameter></function>
<function name="to_simple_string_type"><type>std::basic_string&lt; charT &gt;</type><template>
          <template-type-parameter name="charT"/>
        </template><parameter name="d"><paramtype>const date_period &amp;</paramtype></parameter></function>
<function name="to_iso_string_type"><type>std::basic_string&lt; charT &gt;</type><template>
          <template-type-parameter name="charT"/>
        </template><parameter name="d"><paramtype>const date_period &amp;</paramtype></parameter></function>
<function name="to_iso_extended_string_type"><type>std::basic_string&lt; charT &gt;</type><template>
          <template-type-parameter name="charT"/>
        </template><parameter name="d"><paramtype>const <classname>date</classname> &amp;</paramtype></parameter></function>
<function name="to_iso_string_type"><type>std::basic_string&lt; charT &gt;</type><template>
          <template-type-parameter name="charT"/>
        </template><parameter name="d"><paramtype>const <classname>date</classname> &amp;</paramtype></parameter></function>
<function name="to_sql_string_type"><type>std::basic_string&lt; charT &gt;</type><template>
          <template-type-parameter name="charT"/>
        </template><parameter name="d"><paramtype>const <classname>date</classname> &amp;</paramtype></parameter></function>
<function name="to_simple_wstring"><type>std::wstring</type><parameter name="d"><paramtype>const date_period &amp;</paramtype></parameter><purpose>Convert date period to simple string. Example: [2002-Jan-01/2002-Jan-02]. </purpose></function>
<function name="to_simple_wstring"><type>std::wstring</type><parameter name="d"><paramtype>const <classname>date</classname> &amp;</paramtype></parameter><purpose>To YYYY-mmm-DD string where mmm 3 char month name. Example: 2002-Jan-01. </purpose></function>
<function name="to_iso_wstring"><type>std::wstring</type><parameter name="d"><paramtype>const date_period &amp;</paramtype></parameter><purpose>Date period to iso standard format CCYYMMDD/CCYYMMDD. Example: 20021225/20021231. </purpose></function>
<function name="to_iso_extended_wstring"><type>std::wstring</type><parameter name="d"><paramtype>const <classname>date</classname> &amp;</paramtype></parameter><purpose>Convert to iso extended format string CCYY-MM-DD. Example 2002-12-31. </purpose></function>
<function name="to_iso_wstring"><type>std::wstring</type><parameter name="d"><paramtype>const <classname>date</classname> &amp;</paramtype></parameter><purpose>Convert to iso standard string YYYYMMDD. Example: 20021231. </purpose></function>
<function name="to_sql_wstring"><type>std::wstring</type><parameter name="d"><paramtype>const <classname>date</classname> &amp;</paramtype></parameter></function>


</namespace>
</namespace>
</header>
<header name="boost/date_time/gregorian/formatters_limited.hpp">
<namespace name="boost">
<namespace name="gregorian">






















































<function name="to_simple_string"><type>std::string</type><parameter name="d"><paramtype>const <classname>date</classname> &amp;</paramtype></parameter><purpose>To YYYY-mmm-DD string where mmm 3 char month name. Example: 2002-Jan-01. </purpose></function>
<function name="to_simple_string"><type>std::string</type><parameter name="d"><paramtype>const date_period &amp;</paramtype></parameter><purpose>Convert date period to simple string. Example: [2002-Jan-01/2002-Jan-02]. </purpose></function>
<function name="to_iso_string"><type>std::string</type><parameter name="d"><paramtype>const date_period &amp;</paramtype></parameter><purpose>Date period to iso standard format CCYYMMDD/CCYYMMDD. Example: 20021225/20021231. </purpose></function>
<function name="to_iso_extended_string"><type>std::string</type><parameter name="d"><paramtype>const <classname>date</classname> &amp;</paramtype></parameter><purpose>Convert to iso extended format string CCYY-MM-DD. Example 2002-12-31. </purpose></function>
<function name="to_iso_string"><type>std::string</type><parameter name="d"><paramtype>const <classname>date</classname> &amp;</paramtype></parameter><purpose>Convert to iso standard string YYYYMMDD. Example: 20021231. </purpose></function>
<function name="to_sql_string"><type>std::string</type><parameter name="d"><paramtype>const <classname>date</classname> &amp;</paramtype></parameter></function>














</namespace>
</namespace>
</header>
<header name="boost/date_time/gregorian/greg_calendar.hpp">
<namespace name="boost">
<namespace name="gregorian">
<class name="gregorian_calendar"><inherit access="public">date_time::gregorian_calendar_base&lt; greg_year_month_day, fancy_date_rep::int_type &gt;</inherit><purpose>Gregorian calendar for this implementation, hard work in the base. </purpose><typedef name="day_of_week_type"><purpose>Type to hold a weekday (eg: Sunday, Monday,...) </purpose><type><classname>greg_weekday</classname></type></typedef>
<typedef name="day_of_year_type"><purpose>Counter type from 1 to 366 for gregorian dates. </purpose><type>greg_day_of_year_rep</type></typedef>
<typedef name="date_rep_type"><purpose>Internal date representation that handles infinity, not a date. </purpose><type>fancy_date_rep</type></typedef>
<typedef name="date_traits_type"><purpose>Date rep implements the traits stuff as well. </purpose><type>fancy_date_rep</type></typedef>
</class><typedef name="fancy_date_rep"><purpose>An internal date representation that includes infinities, not a date. </purpose><type>date_time::int_adapter&lt; uint32_t &gt;</type></typedef>










































































</namespace>
</namespace>
</header>
<header name="boost/date_time/gregorian/greg_date.hpp">
<namespace name="boost">
<namespace name="gregorian">
<class name="date"><inherit access="public">date_time::date&lt; date, gregorian_calendar, date_duration &gt;</inherit><purpose>A date type based on <classname alt="boost::gregorian::gregorian_calendar">gregorian_calendar</classname>. </purpose><description><para>This class is the primary interface for programming with greogorian dates. The is a lightweight type that can be freely passed by value. All comparison operators are supported. </para></description><typedef name="year_type"><type>gregorian_calendar::year_type</type></typedef>
<typedef name="month_type"><type>gregorian_calendar::month_type</type></typedef>
<typedef name="day_type"><type>gregorian_calendar::day_type</type></typedef>
<typedef name="day_of_year_type"><type>gregorian_calendar::day_of_year_type</type></typedef>
<typedef name="ymd_type"><type>gregorian_calendar::ymd_type</type></typedef>
<typedef name="date_rep_type"><type>gregorian_calendar::date_rep_type</type></typedef>
<typedef name="date_int_type"><type>gregorian_calendar::date_int_type</type></typedef>
<typedef name="duration_type"><type><classname>date_duration</classname></type></typedef>
<method-group name="public member functions">
<method name="julian_day" cv="const"><type>date_int_type</type><purpose>Return the Julian Day number for the date. </purpose></method>
<method name="day_of_year" cv="const"><type>day_of_year_type</type><purpose>Return the day of year 1..365 or 1..366 (for leap year) </purpose></method>
<method name="modjulian_day" cv="const"><type>date_int_type</type><purpose>Return the Modified Julian Day number for the date. </purpose></method>
<method name="week_number" cv="const"><type>int</type><purpose>Return the iso 8601 week number 1..53. </purpose></method>
<method name="day_number" cv="const"><type>date_int_type</type><purpose>Return the day number from the calendar. </purpose></method>
<method name="end_of_month" cv="const"><type><classname>date</classname></type><purpose>Return the last day of the current month. </purpose></method>
</method-group>
<constructor><purpose>Default constructor constructs with not_a_date_time. </purpose></constructor>
<constructor><parameter name="y"><paramtype>year_type</paramtype></parameter><parameter name="m"><paramtype>month_type</paramtype></parameter><parameter name="d"><paramtype>day_type</paramtype></parameter><purpose>Main constructor with year, month, day. </purpose></constructor>
<constructor specifiers="explicit"><parameter name="ymd"><paramtype>const ymd_type &amp;</paramtype></parameter><purpose>Constructor from a ymd_type structure. </purpose></constructor>
<constructor specifiers="explicit"><parameter name="rhs"><paramtype>const date_int_type &amp;</paramtype></parameter><purpose>Needed copy constructor. </purpose></constructor>
<constructor specifiers="explicit"><parameter name="rhs"><paramtype>date_rep_type</paramtype></parameter><purpose>Needed copy constructor. </purpose></constructor>
<constructor specifiers="explicit"><parameter name="sv"><paramtype>special_values</paramtype></parameter><purpose>Constructor for infinities, not a date, max and min date. </purpose></constructor>
</class>









































































</namespace>
</namespace>
</header>
<header name="boost/date_time/gregorian/greg_day.hpp">
<namespace name="boost">
<namespace name="gregorian">
<struct name="bad_day_of_month"><inherit access="public">out_of_range</inherit><purpose>Exception type for gregorian day of month (1..31) </purpose><method-group name="public member functions">
</method-group>
<constructor/>
<constructor><parameter name="s"><paramtype>const std::string &amp;</paramtype></parameter><purpose>Allow other classes to throw with unique string for bad day like Feb 29. </purpose></constructor>
</struct><class name="greg_day"><inherit access="public">greg_day_rep</inherit><purpose>Represent a day of the month (range 1 - 31) </purpose><description><para>This small class allows for simple conversion an integer value into a day of the month for a standard gregorian calendar. The type is automatically range checked so values outside of the range 1-31 will cause a <classname alt="boost::gregorian::bad_day_of_month">bad_day_of_month</classname> exception </para></description><method-group name="public member functions">
<method name="as_number" cv="const"><type>value_type</type></method>
<method name="conversion-operator" cv="const"><type>value_type</type></method>
</method-group>
<constructor><parameter name="day_of_month"><paramtype>value_type</paramtype></parameter></constructor>
</class><typedef name="greg_day_policies"><purpose>Policy class that declares error handling and day of month ranges. </purpose><type>CV::simple_exception_policy&lt; unsigned short, 1, 31, <classname>bad_day_of_month</classname> &gt;</type></typedef>
<typedef name="greg_day_rep"><purpose>Generated represetation for gregorian day of month. </purpose><type>CV::constrained_value&lt; greg_day_policies &gt;</type></typedef>










































































</namespace>
</namespace>
</header>
<header name="boost/date_time/gregorian/greg_day_of_year.hpp">
<namespace name="boost">
<namespace name="gregorian">
<struct name="bad_day_of_year"><inherit access="public">out_of_range</inherit><purpose>Exception type for day of year (1..366) </purpose><method-group name="public member functions">
</method-group>
<constructor/>
</struct><typedef name="greg_day_of_year_policies"><purpose>A day of the year range (1..366) </purpose><type>CV::simple_exception_policy&lt; unsigned short, 1, 366, <classname>bad_day_of_year</classname> &gt;</type></typedef>
<typedef name="greg_day_of_year_rep"><purpose>Define a range representation type for the day of the year 1..366. </purpose><type>CV::constrained_value&lt; greg_day_of_year_policies &gt;</type></typedef>










































































</namespace>
</namespace>
</header>
<header name="boost/date_time/gregorian/greg_duration.hpp">
<namespace name="boost">
<namespace name="gregorian">
<class name="date_duration"><inherit access="public">boost::date_time::date_duration&lt; date_duration_rep &gt;</inherit><purpose>Durations in days for gregorian system. </purpose><typedef name="duration_rep"><type>base_type::duration_rep</type></typedef>
<method-group name="public member functions">
<method name="operator==" cv="const"><type>bool</type><parameter name="rhs"><paramtype>const <classname>date_duration</classname> &amp;</paramtype></parameter></method>
<method name="operator!=" cv="const"><type>bool</type><parameter name="rhs"><paramtype>const <classname>date_duration</classname> &amp;</paramtype></parameter></method>
<method name="operator&lt;" cv="const"><type>bool</type><parameter name="rhs"><paramtype>const <classname>date_duration</classname> &amp;</paramtype></parameter></method>
<method name="operator&gt;" cv="const"><type>bool</type><parameter name="rhs"><paramtype>const <classname>date_duration</classname> &amp;</paramtype></parameter></method>
<method name="operator&lt;=" cv="const"><type>bool</type><parameter name="rhs"><paramtype>const <classname>date_duration</classname> &amp;</paramtype></parameter></method>
<method name="operator&gt;=" cv="const"><type>bool</type><parameter name="rhs"><paramtype>const <classname>date_duration</classname> &amp;</paramtype></parameter></method>
<method name="operator-="><type><classname>date_duration</classname> &amp;</type><parameter name="rhs"><paramtype>const <classname>date_duration</classname> &amp;</paramtype></parameter><purpose>Subtract another duration – result is signed. </purpose></method>
<method name="operator+="><type><classname>date_duration</classname> &amp;</type><parameter name="rhs"><paramtype>const <classname>date_duration</classname> &amp;</paramtype></parameter><purpose>Add a duration – result is signed. </purpose></method>
<method name="operator-" cv="const"><type><classname>date_duration</classname></type><purpose>unary- Allows for dd = -date_duration(2); -&gt; dd == -2 </purpose></method>
<method name="operator/="><type><classname>date_duration</classname> &amp;</type><parameter name="divisor"><paramtype>int</paramtype></parameter><purpose>Division operations on a duration with an integer. </purpose></method>
</method-group>
<constructor specifiers="explicit"><parameter name="day_count"><paramtype>duration_rep</paramtype><default>0</default></parameter><purpose>Construct from a day count. </purpose></constructor>
<constructor><parameter name="sv"><paramtype>date_time::special_values</paramtype></parameter><purpose>construct from special_values </purpose></constructor>
<constructor><parameter name="other"><paramtype>const <classname>date_duration</classname> &amp;</paramtype></parameter><purpose>Copy constructor. </purpose></constructor>
<constructor><parameter name="other"><paramtype>const base_type &amp;</paramtype></parameter><purpose>Construct from another <classname alt="boost::gregorian::date_duration">date_duration</classname>. </purpose></constructor>
<method-group name="public static functions">
<method name="unit" specifiers="static"><type><classname>date_duration</classname></type><purpose>Returns the smallest duration – used by to calculate 'end'. </purpose></method>
</method-group>
</class><typedef name="date_duration_rep"><purpose>An internal date representation that includes infinities, not a date. </purpose><type>boost::date_time::duration_traits_adapted</type></typedef>
<typedef name="days"><purpose>Shorthand for <classname alt="boost::gregorian::date_duration">date_duration</classname>. </purpose><type><classname>date_duration</classname></type></typedef>










































































</namespace>
</namespace>
</header>
<header name="boost/date_time/gregorian/greg_duration_types.hpp">
<namespace name="boost">
<namespace name="gregorian">
<struct name="greg_durations_config"><purpose>config struct for additional duration types (ie months_duration&lt;&gt; &amp; years_duration&lt;&gt;) </purpose><typedef name="date_type"><type><classname>date</classname></type></typedef>
<typedef name="int_rep"><type>date_time::int_adapter&lt; int &gt;</type></typedef>
<typedef name="month_adjustor_type"><type>date_time::month_functor&lt; <classname>date_type</classname> &gt;</type></typedef>
</struct><class name="weeks_duration"><inherit access="public">boost::gregorian::date_duration</inherit><method-group name="public member functions">
</method-group>
<constructor><parameter name="w"><paramtype>duration_rep</paramtype></parameter></constructor>
<constructor><parameter name="sv"><paramtype>date_time::special_values</paramtype></parameter></constructor>
</class><typedef name="months"><type>date_time::months_duration&lt; <classname>greg_durations_config</classname> &gt;</type></typedef>
<typedef name="years"><type>date_time::years_duration&lt; <classname>greg_durations_config</classname> &gt;</type></typedef>
<typedef name="weeks"><type><classname>weeks_duration</classname></type></typedef>










































































</namespace>
</namespace>
</header>
<header name="boost/date_time/gregorian/greg_facet.hpp">
<namespace name="boost">
<namespace name="gregorian">
<struct name="greg_facet_config"><purpose>Configuration of the output facet template. </purpose><typedef name="month_type"><type><classname>boost::gregorian::greg_month</classname></type></typedef>
<typedef name="special_value_enum"><type>boost::date_time::special_values</type></typedef>
<typedef name="month_enum"><type>boost::gregorian::months_of_year</type></typedef>
<typedef name="weekday_enum"><type>boost::date_time::weekdays</type></typedef>
</struct><typedef name="greg_base_facet"><purpose>Create the base facet type for <classname alt="boost::gregorian::date">gregorian::date</classname>. </purpose><type>boost::date_time::date_names_put&lt; <classname>greg_facet_config</classname> &gt;</type></typedef>


































<function name="operator&lt;&lt;"><type>std::basic_ostream&lt; charT, traits &gt; &amp;</type><template>
          <template-type-parameter name="charT"/>
          <template-type-parameter name="traits"/>
        </template><parameter name="os"><paramtype>std::basic_ostream&lt; charT, traits &gt; &amp;</paramtype></parameter><parameter name="d"><paramtype>const <classname>date</classname> &amp;</paramtype></parameter><purpose>ostream operator for <classname alt="boost::gregorian::date">gregorian::date</classname> </purpose><description><para>Uses the date facet to determine various output parameters including:<itemizedlist>
<listitem><para>string values for the month (eg: Jan, Feb, Mar) (default: English)</para>
</listitem><listitem><para>string values for special values (eg: not-a-date-time) (default: English)</para>
</listitem><listitem><para>selection of long, short strings, or numerical month representation (default: short string)</para>
</listitem><listitem><para>month day year order (default yyyy-mmm-dd) </para>
</listitem></itemizedlist>
</para></description></function>
<function name="operator&lt;&lt;"><type>std::basic_ostream&lt; charT, traits &gt; &amp;</type><template>
          <template-type-parameter name="charT"/>
          <template-type-parameter name="traits"/>
        </template><parameter name="os"><paramtype>std::basic_ostream&lt; charT, traits &gt; &amp;</paramtype></parameter><parameter name="m"><paramtype>const <classname>greg_month</classname> &amp;</paramtype></parameter><purpose>operator&lt;&lt; for <classname alt="boost::gregorian::greg_month">gregorian::greg_month</classname> typically streaming: Jan, Feb, Mar... </purpose><description><para>Uses the date facet to determine output string as well as selection of long or short strings. Default if no facet is installed is to output a 2 wide numeric value for the month eg: 01 == Jan, 02 == Feb, ... 12 == Dec. </para></description></function>
<function name="operator&lt;&lt;"><type>std::basic_ostream&lt; charT, traits &gt; &amp;</type><template>
          <template-type-parameter name="charT"/>
          <template-type-parameter name="traits"/>
        </template><parameter name="os"><paramtype>std::basic_ostream&lt; charT, traits &gt; &amp;</paramtype></parameter><parameter name="wd"><paramtype>const <classname>greg_weekday</classname> &amp;</paramtype></parameter><purpose>operator&lt;&lt; for <classname alt="boost::gregorian::greg_weekday">gregorian::greg_weekday</classname> typically streaming: Sun, Mon, Tue, ... </purpose><description><para>Uses the date facet to determine output string as well as selection of long or short string. Default if no facet is installed is to output a 3 char english string for the day of the week. </para></description></function>
<function name="operator&lt;&lt;"><type>std::basic_ostream&lt; charT, traits &gt; &amp;</type><template>
          <template-type-parameter name="charT"/>
          <template-type-parameter name="traits"/>
        </template><parameter name="os"><paramtype>std::basic_ostream&lt; charT, traits &gt; &amp;</paramtype></parameter><parameter name="dp"><paramtype>const date_period &amp;</paramtype></parameter><purpose>operator&lt;&lt; for gregorian::date_period typical output: [2002-Jan-01/2002-Jan-31] </purpose><description><para>Uses the date facet to determine output string as well as selection of long or short string fr dates. Default if no facet is installed is to output a 3 char english string for the day of the week. </para></description></function>
<function name="operator&lt;&lt;"><type>std::basic_ostream&lt; charT, traits &gt; &amp;</type><template>
          <template-type-parameter name="charT"/>
          <template-type-parameter name="traits"/>
        </template><parameter name="os"><paramtype>std::basic_ostream&lt; charT, traits &gt; &amp;</paramtype></parameter><parameter name="dd"><paramtype>const <classname>date_duration</classname> &amp;</paramtype></parameter></function>
<function name="operator&lt;&lt;"><type>std::basic_ostream&lt; charT, traits &gt; &amp;</type><template>
          <template-type-parameter name="charT"/>
          <template-type-parameter name="traits"/>
        </template><parameter name="os"><paramtype>std::basic_ostream&lt; charT, traits &gt; &amp;</paramtype></parameter><parameter name="pd"><paramtype>const partial_date &amp;</paramtype></parameter><purpose>operator&lt;&lt; for gregorian::partial_date. Output: "Jan 1" </purpose></function>
<function name="operator&lt;&lt;"><type>std::basic_ostream&lt; charT, traits &gt; &amp;</type><template>
          <template-type-parameter name="charT"/>
          <template-type-parameter name="traits"/>
        </template><parameter name="os"><paramtype>std::basic_ostream&lt; charT, traits &gt; &amp;</paramtype></parameter><parameter name="nkd"><paramtype>const nth_kday_of_month &amp;</paramtype></parameter><purpose>operator&lt;&lt; for gregorian::nth_kday_of_month. Output: "first Mon of Jun" </purpose></function>
<function name="operator&lt;&lt;"><type>std::basic_ostream&lt; charT, traits &gt; &amp;</type><template>
          <template-type-parameter name="charT"/>
          <template-type-parameter name="traits"/>
        </template><parameter name="os"><paramtype>std::basic_ostream&lt; charT, traits &gt; &amp;</paramtype></parameter><parameter name="fkd"><paramtype>const first_kday_of_month &amp;</paramtype></parameter><purpose>operator&lt;&lt; for gregorian::first_kday_of_month. Output: "first Mon of Jun" </purpose></function>
<function name="operator&lt;&lt;"><type>std::basic_ostream&lt; charT, traits &gt; &amp;</type><template>
          <template-type-parameter name="charT"/>
          <template-type-parameter name="traits"/>
        </template><parameter name="os"><paramtype>std::basic_ostream&lt; charT, traits &gt; &amp;</paramtype></parameter><parameter name="lkd"><paramtype>const last_kday_of_month &amp;</paramtype></parameter><purpose>operator&lt;&lt; for gregorian::last_kday_of_month. Output: "last Mon of Jun" </purpose></function>
<function name="operator&lt;&lt;"><type>std::basic_ostream&lt; charT, traits &gt; &amp;</type><template>
          <template-type-parameter name="charT"/>
          <template-type-parameter name="traits"/>
        </template><parameter name="os"><paramtype>std::basic_ostream&lt; charT, traits &gt; &amp;</paramtype></parameter><parameter name="fka"><paramtype>const first_kday_after &amp;</paramtype></parameter><purpose>operator&lt;&lt; for gregorian::first_kday_after. Output: "first Mon after" </purpose></function>
<function name="operator&lt;&lt;"><type>std::basic_ostream&lt; charT, traits &gt; &amp;</type><template>
          <template-type-parameter name="charT"/>
          <template-type-parameter name="traits"/>
        </template><parameter name="os"><paramtype>std::basic_ostream&lt; charT, traits &gt; &amp;</paramtype></parameter><parameter name="fkb"><paramtype>const first_kday_before &amp;</paramtype></parameter><purpose>operator&lt;&lt; for gregorian::first_kday_before. Output: "first Mon before" </purpose></function>
<function name="operator&gt;&gt;"><type>std::basic_istream&lt; charT &gt; &amp;</type><template>
          <template-type-parameter name="charT"/>
        </template><parameter name="is"><paramtype>std::basic_istream&lt; charT &gt; &amp;</paramtype></parameter><parameter name="d"><paramtype><classname>date</classname> &amp;</paramtype></parameter><purpose>operator&gt;&gt; for <classname alt="boost::gregorian::date">gregorian::date</classname> </purpose></function>
<function name="operator&gt;&gt;"><type>std::basic_istream&lt; charT &gt; &amp;</type><template>
          <template-type-parameter name="charT"/>
        </template><parameter name="is"><paramtype>std::basic_istream&lt; charT &gt; &amp;</paramtype></parameter><parameter name="dd"><paramtype><classname>date_duration</classname> &amp;</paramtype></parameter><purpose>operator&gt;&gt; for <classname alt="boost::gregorian::date_duration">gregorian::date_duration</classname> </purpose></function>
<function name="operator&gt;&gt;"><type>std::basic_istream&lt; charT &gt; &amp;</type><template>
          <template-type-parameter name="charT"/>
        </template><parameter name="is"><paramtype>std::basic_istream&lt; charT &gt; &amp;</paramtype></parameter><parameter name="dp"><paramtype>date_period &amp;</paramtype></parameter><purpose>operator&gt;&gt; for gregorian::date_period </purpose></function>
<function name="generate_locale"><type>BOOST_DATE_TIME_DECL std::locale</type><parameter name="loc"><paramtype>std::locale &amp;</paramtype></parameter><parameter name="type"><paramtype>char</paramtype></parameter><purpose>generates a locale with the set of gregorian name-strings of type char* </purpose></function>
<function name="create_facet_def"><type>BOOST_DATE_TIME_DECL boost::date_time::all_date_names_put&lt; <classname>greg_facet_config</classname>, char &gt; *</type><parameter name="type"><paramtype>char</paramtype></parameter><purpose>Returns a pointer to a facet with a default set of names (English) </purpose></function>
<function name="generate_locale"><type>BOOST_DATE_TIME_DECL std::locale</type><parameter name="loc"><paramtype>std::locale &amp;</paramtype></parameter><parameter name="type"><paramtype>wchar_t</paramtype></parameter><purpose>generates a locale with the set of gregorian name-strings of type wchar_t* </purpose></function>
<function name="create_facet_def"><type>BOOST_DATE_TIME_DECL boost::date_time::all_date_names_put&lt; <classname>greg_facet_config</classname>, wchar_t &gt; *</type><parameter name="type"><paramtype>wchar_t</paramtype></parameter><purpose>Returns a pointer to a facet with a default set of names (English) </purpose></function>
<function name="operator&gt;&gt;"><type>std::basic_istream&lt; charT &gt; &amp;</type><template>
          <template-type-parameter name="charT"/>
        </template><parameter name="is"><paramtype>std::basic_istream&lt; charT &gt; &amp;</paramtype></parameter><parameter name="m"><paramtype><classname>greg_month</classname> &amp;</paramtype></parameter><purpose>operator&gt;&gt; for <classname alt="boost::gregorian::greg_month">gregorian::greg_month</classname> - throws exception if invalid month given </purpose></function>
<function name="operator&gt;&gt;"><type>std::basic_istream&lt; charT &gt; &amp;</type><template>
          <template-type-parameter name="charT"/>
        </template><parameter name="is"><paramtype>std::basic_istream&lt; charT &gt; &amp;</paramtype></parameter><parameter name="wd"><paramtype><classname>greg_weekday</classname> &amp;</paramtype></parameter><purpose>operator&gt;&gt; for <classname alt="boost::gregorian::greg_weekday">gregorian::greg_weekday</classname> - throws exception if invalid weekday given </purpose></function>




















</namespace>
</namespace>
</header>
<header name="boost/date_time/gregorian/greg_month.hpp">
<namespace name="boost">
<namespace name="gregorian">
<struct name="bad_month"><inherit access="public">out_of_range</inherit><purpose>Exception thrown if a <classname alt="boost::gregorian::greg_month">greg_month</classname> is constructed with a value out of range. </purpose><method-group name="public member functions">
</method-group>
<constructor/>
</struct><class name="greg_month"><inherit access="public">greg_month_rep</inherit><purpose>Wrapper class to represent months in gregorian based calendar. </purpose><typedef name="month_enum"><type>date_time::months_of_year</type></typedef>
<typedef name="month_map_type"><type>std::map&lt; std::string, unsigned short &gt;</type></typedef>
<typedef name="month_map_ptr_type"><type>boost::shared_ptr&lt; month_map_type &gt;</type></typedef>
<method-group name="public member functions">
<method name="conversion-operator" cv="const"><type>value_type</type><purpose>Convert the value back to a short. </purpose></method>
<method name="as_number" cv="const"><type>value_type</type><purpose>Returns month as number from 1 to 12. </purpose></method>
<method name="as_enum" cv="const"><type>month_enum</type></method>
<method name="as_short_string" cv="const"><type>const char *</type></method>
<method name="as_long_string" cv="const"><type>const char *</type></method>
<method name="as_short_wstring" cv="const"><type>const wchar_t *</type></method>
<method name="as_long_wstring" cv="const"><type>const wchar_t *</type></method>
<method name="as_short_string" cv="const"><type>const char *</type><parameter name=""><paramtype>char</paramtype></parameter></method>
<method name="as_long_string" cv="const"><type>const char *</type><parameter name=""><paramtype>char</paramtype></parameter></method>
<method name="as_short_string" cv="const"><type>const wchar_t *</type><parameter name=""><paramtype>wchar_t</paramtype></parameter></method>
<method name="as_long_string" cv="const"><type>const wchar_t *</type><parameter name=""><paramtype>wchar_t</paramtype></parameter></method>
</method-group>
<constructor><parameter name="theMonth"><paramtype>month_enum</paramtype></parameter><purpose>Construct a month from the months_of_year enumeration. </purpose></constructor>
<constructor><parameter name="theMonth"><paramtype>value_type</paramtype></parameter><purpose>Construct from a short value. </purpose></constructor>
<method-group name="public static functions">
<method name="get_month_map_ptr" specifiers="static"><type>month_map_ptr_type</type><purpose>Shared pointer to a map of Month strings (Names &amp; Abbrev) &amp; numbers. </purpose></method>
</method-group>
</class><typedef name="months_of_year"><type>date_time::months_of_year</type></typedef>
<typedef name="greg_month_policies"><purpose>Build a policy class for the greg_month_rep. </purpose><type>CV::simple_exception_policy&lt; unsigned short, 1, 12, <classname>bad_month</classname> &gt;</type></typedef>
<typedef name="greg_month_rep"><purpose>A constrained range that implements the gregorian_month rules. </purpose><type>CV::constrained_value&lt; greg_month_policies &gt;</type></typedef>










































































</namespace>
</namespace>
</header>
<header name="boost/date_time/gregorian/greg_serialize.hpp">
</header>
<header name="boost/date_time/gregorian/greg_weekday.hpp">
<namespace name="boost">
<namespace name="gregorian">
<struct name="bad_weekday"><inherit access="public">out_of_range</inherit><purpose>Exception that flags that a weekday number is incorrect. </purpose><method-group name="public member functions">
</method-group>
<constructor/>
</struct><class name="greg_weekday"><inherit access="public">greg_weekday_rep</inherit><purpose>Represent a day within a week (range 0==Sun to 6==Sat) </purpose><typedef name="weekday_enum"><type>boost::date_time::weekdays</type></typedef>
<method-group name="public member functions">
<method name="as_number" cv="const"><type>value_type</type></method>
<method name="as_short_string" cv="const"><type>const char *</type></method>
<method name="as_long_string" cv="const"><type>const char *</type></method>
<method name="as_short_wstring" cv="const"><type>const wchar_t *</type></method>
<method name="as_long_wstring" cv="const"><type>const wchar_t *</type></method>
<method name="as_enum" cv="const"><type>weekday_enum</type></method>
</method-group>
<constructor><parameter name="day_of_week_num"><paramtype>value_type</paramtype></parameter></constructor>
</class><typedef name="greg_weekday_policies"><type>CV::simple_exception_policy&lt; unsigned short, 0, 6, <classname>bad_weekday</classname> &gt;</type></typedef>
<typedef name="greg_weekday_rep"><type>CV::constrained_value&lt; greg_weekday_policies &gt;</type></typedef>










































































</namespace>
</namespace>
</header>
<header name="boost/date_time/gregorian/greg_year.hpp">
<namespace name="boost">
<namespace name="gregorian">
<struct name="bad_year"><inherit access="public">out_of_range</inherit><purpose>Exception type for gregorian year. </purpose><method-group name="public member functions">
</method-group>
<constructor/>
</struct><class name="greg_year"><inherit access="public">greg_year_rep</inherit><purpose>Represent a year (range 1400 - 9999) </purpose><description><para>This small class allows for simple conversion an integer value into a year for the gregorian calendar. This currently only allows a range of 1400 to 9999. Both ends of the range are a bit arbitrary at the moment, but they are the limits of current testing of the library. As such they may be increased in the future. </para></description><method-group name="public member functions">
<method name="conversion-operator" cv="const"><type>value_type</type></method>
</method-group>
<constructor><parameter name="year"><paramtype>value_type</paramtype></parameter></constructor>
</class><typedef name="greg_year_policies"><purpose>Policy class that declares error handling gregorian year type. </purpose><type>CV::simple_exception_policy&lt; unsigned short, 1400, 9999, <classname>bad_year</classname> &gt;</type></typedef>
<typedef name="greg_year_rep"><purpose>Generated representation for gregorian year. </purpose><type>CV::constrained_value&lt; greg_year_policies &gt;</type></typedef>










































































</namespace>
</namespace>
</header>
<header name="boost/date_time/gregorian/greg_ymd.hpp">
<namespace name="boost">
<namespace name="gregorian">
<typedef name="greg_year_month_day"><type>date_time::year_month_day_base&lt; <classname>greg_year</classname>, <classname>greg_month</classname>, <classname>greg_day</classname> &gt;</type></typedef>










































































</namespace>
</namespace>
</header>
<header name="boost/date_time/gregorian/gregorian.hpp">
<para>Single file header that provides overall include for all elements of the gregorian date-time system. This includes the various types defined, but also other functions for formatting and parsing. </para></header>
<header name="boost/date_time/gregorian/gregorian_io.hpp">
<namespace name="boost">
<namespace name="gregorian">
<typedef name="wperiod_formatter"><type>boost::date_time::period_formatter&lt; wchar_t &gt;</type></typedef>
<typedef name="period_formatter"><type>boost::date_time::period_formatter&lt; char &gt;</type></typedef>
<typedef name="wdate_facet"><type>boost::date_time::date_facet&lt; <classname>date</classname>, wchar_t &gt;</type></typedef>
<typedef name="date_facet"><type>boost::date_time::date_facet&lt; <classname>date</classname>, char &gt;</type></typedef>
<typedef name="period_parser"><type>boost::date_time::period_parser&lt; <classname>date</classname>, char &gt;</type></typedef>
<typedef name="wperiod_parser"><type>boost::date_time::period_parser&lt; <classname>date</classname>, wchar_t &gt;</type></typedef>
<typedef name="special_values_formatter"><type>boost::date_time::special_values_formatter&lt; char &gt;</type></typedef>
<typedef name="wspecial_values_formatter"><type>boost::date_time::special_values_formatter&lt; wchar_t &gt;</type></typedef>
<typedef name="special_values_parser"><type>boost::date_time::special_values_parser&lt; <classname>date</classname>, char &gt;</type></typedef>
<typedef name="wspecial_values_parser"><type>boost::date_time::special_values_parser&lt; <classname>date</classname>, wchar_t &gt;</type></typedef>
<typedef name="date_input_facet"><type>boost::date_time::date_input_facet&lt; <classname>date</classname>, char &gt;</type></typedef>
<typedef name="wdate_input_facet"><type>boost::date_time::date_input_facet&lt; <classname>date</classname>, wchar_t &gt;</type></typedef>










<function name="operator&lt;&lt;"><type>std::basic_ostream&lt; CharT, TraitsT &gt; &amp;</type><template>
          <template-type-parameter name="CharT"/>
          <template-type-parameter name="TraitsT"/>
        </template><parameter name="os"><paramtype>std::basic_ostream&lt; CharT, TraitsT &gt; &amp;</paramtype></parameter><parameter name="d"><paramtype>const <classname>boost::gregorian::date</classname> &amp;</paramtype></parameter></function>
<function name="operator&gt;&gt;"><type>std::basic_istream&lt; CharT, Traits &gt; &amp;</type><template>
          <template-type-parameter name="CharT"/>
          <template-type-parameter name="Traits"/>
        </template><parameter name="is"><paramtype>std::basic_istream&lt; CharT, Traits &gt; &amp;</paramtype></parameter><parameter name="d"><paramtype><classname>date</classname> &amp;</paramtype></parameter><purpose>input operator for date </purpose></function>
<function name="operator&lt;&lt;"><type>std::basic_ostream&lt; CharT, TraitsT &gt; &amp;</type><template>
          <template-type-parameter name="CharT"/>
          <template-type-parameter name="TraitsT"/>
        </template><parameter name="os"><paramtype>std::basic_ostream&lt; CharT, TraitsT &gt; &amp;</paramtype></parameter><parameter name="dd"><paramtype>const <classname>boost::gregorian::date_duration</classname> &amp;</paramtype></parameter></function>
<function name="operator&gt;&gt;"><type>std::basic_istream&lt; CharT, Traits &gt; &amp;</type><template>
          <template-type-parameter name="CharT"/>
          <template-type-parameter name="Traits"/>
        </template><parameter name="is"><paramtype>std::basic_istream&lt; CharT, Traits &gt; &amp;</paramtype></parameter><parameter name="dd"><paramtype><classname>date_duration</classname> &amp;</paramtype></parameter><purpose>input operator for <classname alt="boost::gregorian::date_duration">date_duration</classname> </purpose></function>
<function name="operator&lt;&lt;"><type>std::basic_ostream&lt; CharT, TraitsT &gt; &amp;</type><template>
          <template-type-parameter name="CharT"/>
          <template-type-parameter name="TraitsT"/>
        </template><parameter name="os"><paramtype>std::basic_ostream&lt; CharT, TraitsT &gt; &amp;</paramtype></parameter><parameter name="dp"><paramtype>const boost::gregorian::date_period &amp;</paramtype></parameter></function>
<function name="operator&gt;&gt;"><type>std::basic_istream&lt; CharT, Traits &gt; &amp;</type><template>
          <template-type-parameter name="CharT"/>
          <template-type-parameter name="Traits"/>
        </template><parameter name="is"><paramtype>std::basic_istream&lt; CharT, Traits &gt; &amp;</paramtype></parameter><parameter name="dp"><paramtype>date_period &amp;</paramtype></parameter><purpose>input operator for date_period </purpose></function>
<function name="operator&lt;&lt;"><type>std::basic_ostream&lt; CharT, TraitsT &gt; &amp;</type><template>
          <template-type-parameter name="CharT"/>
          <template-type-parameter name="TraitsT"/>
        </template><parameter name="os"><paramtype>std::basic_ostream&lt; CharT, TraitsT &gt; &amp;</paramtype></parameter><parameter name="gm"><paramtype>const <classname>boost::gregorian::greg_month</classname> &amp;</paramtype></parameter></function>
<function name="operator&gt;&gt;"><type>std::basic_istream&lt; CharT, Traits &gt; &amp;</type><template>
          <template-type-parameter name="CharT"/>
          <template-type-parameter name="Traits"/>
        </template><parameter name="is"><paramtype>std::basic_istream&lt; CharT, Traits &gt; &amp;</paramtype></parameter><parameter name="m"><paramtype><classname>greg_month</classname> &amp;</paramtype></parameter><purpose>input operator for <classname alt="boost::gregorian::greg_month">greg_month</classname> </purpose></function>
<function name="operator&lt;&lt;"><type>std::basic_ostream&lt; CharT, TraitsT &gt; &amp;</type><template>
          <template-type-parameter name="CharT"/>
          <template-type-parameter name="TraitsT"/>
        </template><parameter name="os"><paramtype>std::basic_ostream&lt; CharT, TraitsT &gt; &amp;</paramtype></parameter><parameter name="gw"><paramtype>const <classname>boost::gregorian::greg_weekday</classname> &amp;</paramtype></parameter></function>
<function name="operator&gt;&gt;"><type>std::basic_istream&lt; CharT, Traits &gt; &amp;</type><template>
          <template-type-parameter name="CharT"/>
          <template-type-parameter name="Traits"/>
        </template><parameter name="is"><paramtype>std::basic_istream&lt; CharT, Traits &gt; &amp;</paramtype></parameter><parameter name="wd"><paramtype><classname>greg_weekday</classname> &amp;</paramtype></parameter><purpose>input operator for <classname alt="boost::gregorian::greg_weekday">greg_weekday</classname> </purpose></function>
<function name="operator&gt;&gt;"><type>std::basic_istream&lt; CharT, Traits &gt; &amp;</type><template>
          <template-type-parameter name="CharT"/>
          <template-type-parameter name="Traits"/>
        </template><parameter name="is"><paramtype>std::basic_istream&lt; CharT, Traits &gt; &amp;</paramtype></parameter><parameter name="gd"><paramtype><classname>greg_day</classname> &amp;</paramtype></parameter><purpose>input operator for <classname alt="boost::gregorian::greg_day">greg_day</classname> </purpose></function>
<function name="operator&gt;&gt;"><type>std::basic_istream&lt; CharT, Traits &gt; &amp;</type><template>
          <template-type-parameter name="CharT"/>
          <template-type-parameter name="Traits"/>
        </template><parameter name="is"><paramtype>std::basic_istream&lt; CharT, Traits &gt; &amp;</paramtype></parameter><parameter name="gy"><paramtype><classname>greg_year</classname> &amp;</paramtype></parameter><purpose>input operator for <classname alt="boost::gregorian::greg_year">greg_year</classname> </purpose></function>
<function name="operator&lt;&lt;"><type>std::basic_ostream&lt; CharT, TraitsT &gt; &amp;</type><template>
          <template-type-parameter name="CharT"/>
          <template-type-parameter name="TraitsT"/>
        </template><parameter name="os"><paramtype>std::basic_ostream&lt; CharT, TraitsT &gt; &amp;</paramtype></parameter><parameter name="pd"><paramtype>const boost::gregorian::partial_date &amp;</paramtype></parameter></function>
<function name="operator&gt;&gt;"><type>std::basic_istream&lt; CharT, Traits &gt; &amp;</type><template>
          <template-type-parameter name="CharT"/>
          <template-type-parameter name="Traits"/>
        </template><parameter name="is"><paramtype>std::basic_istream&lt; CharT, Traits &gt; &amp;</paramtype></parameter><parameter name="pd"><paramtype>partial_date &amp;</paramtype></parameter><purpose>input operator for partial_date </purpose></function>
<function name="operator&lt;&lt;"><type>std::basic_ostream&lt; CharT, TraitsT &gt; &amp;</type><template>
          <template-type-parameter name="CharT"/>
          <template-type-parameter name="TraitsT"/>
        </template><parameter name="os"><paramtype>std::basic_ostream&lt; CharT, TraitsT &gt; &amp;</paramtype></parameter><parameter name="nkd"><paramtype>const boost::gregorian::nth_day_of_the_week_in_month &amp;</paramtype></parameter></function>
<function name="operator&gt;&gt;"><type>std::basic_istream&lt; CharT, Traits &gt; &amp;</type><template>
          <template-type-parameter name="CharT"/>
          <template-type-parameter name="Traits"/>
        </template><parameter name="is"><paramtype>std::basic_istream&lt; CharT, Traits &gt; &amp;</paramtype></parameter><parameter name="nday"><paramtype>nth_day_of_the_week_in_month &amp;</paramtype></parameter><purpose>input operator for nth_day_of_the_week_in_month </purpose></function>
<function name="operator&lt;&lt;"><type>std::basic_ostream&lt; CharT, TraitsT &gt; &amp;</type><template>
          <template-type-parameter name="CharT"/>
          <template-type-parameter name="TraitsT"/>
        </template><parameter name="os"><paramtype>std::basic_ostream&lt; CharT, TraitsT &gt; &amp;</paramtype></parameter><parameter name="fkd"><paramtype>const boost::gregorian::first_day_of_the_week_in_month &amp;</paramtype></parameter></function>
<function name="operator&gt;&gt;"><type>std::basic_istream&lt; CharT, Traits &gt; &amp;</type><template>
          <template-type-parameter name="CharT"/>
          <template-type-parameter name="Traits"/>
        </template><parameter name="is"><paramtype>std::basic_istream&lt; CharT, Traits &gt; &amp;</paramtype></parameter><parameter name="fkd"><paramtype>first_day_of_the_week_in_month &amp;</paramtype></parameter><purpose>input operator for first_day_of_the_week_in_month </purpose></function>
<function name="operator&lt;&lt;"><type>std::basic_ostream&lt; CharT, TraitsT &gt; &amp;</type><template>
          <template-type-parameter name="CharT"/>
          <template-type-parameter name="TraitsT"/>
        </template><parameter name="os"><paramtype>std::basic_ostream&lt; CharT, TraitsT &gt; &amp;</paramtype></parameter><parameter name="lkd"><paramtype>const boost::gregorian::last_day_of_the_week_in_month &amp;</paramtype></parameter></function>
<function name="operator&gt;&gt;"><type>std::basic_istream&lt; CharT, Traits &gt; &amp;</type><template>
          <template-type-parameter name="CharT"/>
          <template-type-parameter name="Traits"/>
        </template><parameter name="is"><paramtype>std::basic_istream&lt; CharT, Traits &gt; &amp;</paramtype></parameter><parameter name="lkd"><paramtype>last_day_of_the_week_in_month &amp;</paramtype></parameter><purpose>input operator for last_day_of_the_week_in_month </purpose></function>
<function name="operator&lt;&lt;"><type>std::basic_ostream&lt; CharT, TraitsT &gt; &amp;</type><template>
          <template-type-parameter name="CharT"/>
          <template-type-parameter name="TraitsT"/>
        </template><parameter name="os"><paramtype>std::basic_ostream&lt; CharT, TraitsT &gt; &amp;</paramtype></parameter><parameter name="fda"><paramtype>const boost::gregorian::first_day_of_the_week_after &amp;</paramtype></parameter></function>
<function name="operator&gt;&gt;"><type>std::basic_istream&lt; CharT, Traits &gt; &amp;</type><template>
          <template-type-parameter name="CharT"/>
          <template-type-parameter name="Traits"/>
        </template><parameter name="is"><paramtype>std::basic_istream&lt; CharT, Traits &gt; &amp;</paramtype></parameter><parameter name="fka"><paramtype>first_day_of_the_week_after &amp;</paramtype></parameter><purpose>input operator for first_day_of_the_week_after </purpose></function>
<function name="operator&lt;&lt;"><type>std::basic_ostream&lt; CharT, TraitsT &gt; &amp;</type><template>
          <template-type-parameter name="CharT"/>
          <template-type-parameter name="TraitsT"/>
        </template><parameter name="os"><paramtype>std::basic_ostream&lt; CharT, TraitsT &gt; &amp;</paramtype></parameter><parameter name="fdb"><paramtype>const boost::gregorian::first_day_of_the_week_before &amp;</paramtype></parameter></function>
<function name="operator&gt;&gt;"><type>std::basic_istream&lt; CharT, Traits &gt; &amp;</type><template>
          <template-type-parameter name="CharT"/>
          <template-type-parameter name="Traits"/>
        </template><parameter name="is"><paramtype>std::basic_istream&lt; CharT, Traits &gt; &amp;</paramtype></parameter><parameter name="fkb"><paramtype>first_day_of_the_week_before &amp;</paramtype></parameter><purpose>input operator for first_day_of_the_week_before </purpose></function>








































</namespace>
</namespace>
</header>
<header name="boost/date_time/gregorian/gregorian_types.hpp">
<para>Single file header that defines most of the types for the gregorian date-time system. </para><namespace name="boost">
<namespace name="gregorian">
<typedef name="date_period"><purpose>Date periods for the gregorian system. </purpose><type>date_time::period&lt; <classname>date</classname>, <classname>date_duration</classname> &gt;</type></typedef>
<typedef name="year_based_generator"><purpose>A unifying date_generator base type. </purpose><description><para>A unifying date_generator base type for: partial_date, nth_day_of_the_week_in_month, first_day_of_the_week_in_month, and last_day_of_the_week_in_month </para></description><type>date_time::year_based_generator&lt; <classname>date</classname> &gt;</type></typedef>
<typedef name="partial_date"><purpose>A date generation object type. </purpose><type>date_time::partial_date&lt; <classname>date</classname> &gt;</type></typedef>
<typedef name="nth_kday_of_month"><type>date_time::nth_kday_of_month&lt; <classname>date</classname> &gt;</type></typedef>
<typedef name="nth_day_of_the_week_in_month"><type>nth_kday_of_month</type></typedef>
<typedef name="first_kday_of_month"><type>date_time::first_kday_of_month&lt; <classname>date</classname> &gt;</type></typedef>
<typedef name="first_day_of_the_week_in_month"><type>first_kday_of_month</type></typedef>
<typedef name="last_kday_of_month"><type>date_time::last_kday_of_month&lt; <classname>date</classname> &gt;</type></typedef>
<typedef name="last_day_of_the_week_in_month"><type>last_kday_of_month</type></typedef>
<typedef name="first_kday_after"><type>date_time::first_kday_after&lt; <classname>date</classname> &gt;</type></typedef>
<typedef name="first_day_of_the_week_after"><type>first_kday_after</type></typedef>
<typedef name="first_kday_before"><type>date_time::first_kday_before&lt; <classname>date</classname> &gt;</type></typedef>
<typedef name="first_day_of_the_week_before"><type>first_kday_before</type></typedef>
<typedef name="day_clock"><purpose>A clock to get the current day from the local computer. </purpose><type>date_time::day_clock&lt; <classname>date</classname> &gt;</type></typedef>
<typedef name="date_iterator"><purpose>Base date_iterator type for gregorian types. </purpose><type>date_time::date_itr_base&lt; <classname>date</classname> &gt;</type></typedef>
<typedef name="day_iterator"><purpose>A day level iterator. </purpose><type>date_time::date_itr&lt; date_time::day_functor&lt; <classname>date</classname> &gt;, <classname>date</classname> &gt;</type></typedef>
<typedef name="week_iterator"><purpose>A week level iterator. </purpose><type>date_time::date_itr&lt; date_time::week_functor&lt; <classname>date</classname> &gt;, <classname>date</classname> &gt;</type></typedef>
<typedef name="month_iterator"><purpose>A month level iterator. </purpose><type>date_time::date_itr&lt; date_time::month_functor&lt; <classname>date</classname> &gt;, <classname>date</classname> &gt;</type></typedef>
<typedef name="year_iterator"><purpose>A year level iterator. </purpose><type>date_time::date_itr&lt; date_time::year_functor&lt; <classname>date</classname> &gt;, <classname>date</classname> &gt;</type></typedef>










































































</namespace>
</namespace>
</header>
<header name="boost/date_time/gregorian/parsers.hpp">
<namespace name="boost">
<namespace name="gregorian">
<function name="special_value_from_string"><type>BOOST_DATE_TIME_DECL special_values</type><parameter name="s"><paramtype>const std::string &amp;</paramtype></parameter><purpose>Return special_value from string argument. </purpose><description><para>Return special_value from string argument. If argument is not one of the special value names (defined in src/gregorian/names.hpp), return 'not_special' </para></description></function>
<function name="from_string"><type><classname>date</classname></type><parameter name="s"><paramtype>std::string</paramtype></parameter><purpose>Deprecated: Use from_simple_string. </purpose></function>
<function name="from_simple_string"><type><classname>date</classname></type><parameter name="s"><paramtype>std::string</paramtype></parameter><purpose>From delimited date string where with order year-month-day eg: 2002-1-25 or 2003-Jan-25 (full month name is also accepted) </purpose></function>
<function name="from_us_string"><type><classname>date</classname></type><parameter name="s"><paramtype>std::string</paramtype></parameter><purpose>From delimited date string where with order year-month-day eg: 1-25-2003 or Jan-25-2003 (full month name is also accepted) </purpose></function>
<function name="from_uk_string"><type><classname>date</classname></type><parameter name="s"><paramtype>std::string</paramtype></parameter><purpose>From delimited date string where with order day-month-year eg: 25-1-2002 or 25-Jan-2003 (full month name is also accepted) </purpose></function>
<function name="from_undelimited_string"><type><classname>date</classname></type><parameter name="s"><paramtype>std::string</paramtype></parameter><purpose>From iso type date string where with order year-month-day eg: 20020125. </purpose></function>
<function name="date_from_iso_string"><type><classname>date</classname></type><parameter name="s"><paramtype>const std::string &amp;</paramtype></parameter><purpose>From iso type date string where with order year-month-day eg: 20020125. </purpose></function>
<function name="from_stream"><type><classname>date</classname></type><template>
          <template-type-parameter name="iterator_type"/>
        </template><parameter name="beg"><paramtype>iterator_type</paramtype></parameter><parameter name="end"><paramtype>iterator_type</paramtype></parameter><purpose>Stream should hold a date in the form of: 2002-1-25. Month number, abbrev, or name are accepted. </purpose></function>
<function name="date_period_from_string"><type>date_period</type><parameter name="s"><paramtype>const std::string &amp;</paramtype></parameter><purpose>Function to parse a date_period from a string (eg: [2003-Oct-31/2003-Dec-25]) </purpose></function>
<function name="date_period_from_wstring"><type>date_period</type><parameter name="s"><paramtype>const std::wstring &amp;</paramtype></parameter><purpose>Function to parse a date_period from a wstring (eg: [2003-Oct-31/2003-Dec-25]) </purpose></function>
































































</namespace>
</namespace>
</header>
</library-reference>