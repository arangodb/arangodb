#~ Copyright Rene Rivera 2008
#~ Distributed under the Boost Software License, Version 1.0.
#~ (See accompanying file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)

import testing ;

project preprocessor_tests : requirements <warnings>on
                                          <toolset>gcc-4.3.0:<warnings>all
                                          <toolset>gcc-4.3.0:<cxxflags>-Wno-variadic-macros
                                          <toolset>gcc-4.4.0:<warnings>all
                                          <toolset>gcc-4.4.0:<cxxflags>-Wno-variadic-macros 
                                          <toolset>gcc-4.5.0:<warnings>all
                                          <toolset>gcc-4.5.0:<cxxflags>-Wno-variadic-macros
                                          <toolset>gcc-4.5.0:<linkflags>"-Wl,--enable-auto-import"
                                          <toolset>gcc-4.5.2:<warnings>all
                                          <toolset>gcc-4.5.2:<cxxflags>-Wno-variadic-macros
                                          <toolset>msvc:<warnings>all
                                          ;

alias preprocessor : : 
        <toolset>gcc
        <toolset-gcc:version>3.4
    ;
    
alias preprocessor : : 
        <toolset>gcc
        <toolset-gcc:version>4.1
    ;
    
alias preprocessor : : 
        <toolset>gcc
        <toolset-gcc:version>4.2
    ;
    
alias preprocessor
   :   
        [ compile arithmetic.cpp ]
        [ compile array.cpp ]
        [ compile comparison.cpp ]
        [ compile control.cpp ]
        [ compile debug.cpp ]
        [ compile facilities.cpp ]
        [ compile iteration.cpp ]
        [ compile list.cpp ]
        [ compile logical.cpp ]
        [ compile punctuation.cpp ]
        [ compile repetition.cpp ]
        [ compile selection.cpp ]
        [ compile seq.cpp ]
        [ compile slot.cpp ]
        [ compile stringize.cpp ]
        [ compile tuple.cpp ]
        [ compile variadic.cpp ]
  ;

alias preprocessor_nvm
   :   
        [ compile arithmetic.cpp : <define>BOOST_PP_VARIADICS=0 : arithmetic_nvm ]
        [ compile array.cpp : <define>BOOST_PP_VARIADICS=0 : array_nvm ]
        [ compile comparison.cpp : <define>BOOST_PP_VARIADICS=0 : comparison_nvm ]
        [ compile control.cpp : <define>BOOST_PP_VARIADICS=0 : control_nvm ]
        [ compile debug.cpp : <define>BOOST_PP_VARIADICS=0 : debug_nvm ]
        [ compile facilities.cpp : <define>BOOST_PP_VARIADICS=0 : facilities_nvm ]
        [ compile iteration.cpp : <define>BOOST_PP_VARIADICS=0 : iteration_nvm ]
        [ compile list.cpp : <define>BOOST_PP_VARIADICS=0 : list_nvm ]
        [ compile logical.cpp : <define>BOOST_PP_VARIADICS=0 : logical_nvm ]
        [ compile repetition.cpp : <define>BOOST_PP_VARIADICS=0 : repetition_nvm ]
        [ compile selection.cpp : <define>BOOST_PP_VARIADICS=0 : selection_nvm ]
        [ compile seq.cpp : <define>BOOST_PP_VARIADICS=0 : seq_nvm ]
        [ compile slot.cpp : <define>BOOST_PP_VARIADICS=0 : slot_nvm ]
        [ compile stringize.cpp : <define>BOOST_PP_VARIADICS=0 : stringize_nvm ]
        [ compile tuple.cpp : <define>BOOST_PP_VARIADICS=0 : tuple_nvm ]
  ;

alias preprocessor_c
   :   
        [ compile arithmetic.c 
          : 
          : arithmetic_c 
        ]
        [ compile array.c 
          : 
          : array_c 
        ]
        [ compile comparison.c 
          : 
          : comparison_c 
        ]
        [ compile control.c 
          : 
          : control_c 
        ]
        [ compile debug.c 
          : 
          : debug_c 
        ]
        [ compile facilities.c 
          : 
          : facilities_c 
        ]
        [ compile list.c 
          : 
          : list_c 
        ]
        [ compile logical.c 
          : 
          : logical_c 
        ]
        [ compile punctuation.c 
          : 
          : punctuation_c 
        ]
        [ compile selection.c 
          : 
          : selection_c 
        ]
        [ compile seq.c 
          : 
          : seq_c 
        ]
        [ compile slot.c 
          : 
          : slot_c 
        ]
        [ compile stringize.c 
          : 
          : stringize_c 
        ]
        [ compile tuple.c 
          : 
          : tuple_c 
        ]
        [ compile variadic.c 
          : 
          : variadic_c 
        ]
  ;

alias preprocessor_c_nvm
   :   
        [ compile arithmetic.c 
          : <define>BOOST_PP_VARIADICS=0            
          : arithmetic_c_nvm 
        ]
        [ compile array.c 
          : <define>BOOST_PP_VARIADICS=0            
          : array_c_nvm 
        ]
        [ compile comparison.c 
          : <define>BOOST_PP_VARIADICS=0
          : comparison_c_nvm 
        ]
        [ compile control.c 
          : <define>BOOST_PP_VARIADICS=0
          : control_c_nvm 
        ]
        [ compile debug.c 
          : <define>BOOST_PP_VARIADICS=0
          : debug_c_nvm 
        ]
        [ compile facilities.c 
          : <define>BOOST_PP_VARIADICS=0
          : facilities_c_nvm 
        ]
        [ compile list.c 
          : <define>BOOST_PP_VARIADICS=0
          : list_c_nvm 
        ]
        [ compile logical.c 
          : <define>BOOST_PP_VARIADICS=0
          : logical_c_nvm 
        ]
        [ compile selection.c 
          : <define>BOOST_PP_VARIADICS=0
          : selection_c_nvm 
        ]
        [ compile seq.c 
          : <define>BOOST_PP_VARIADICS=0
          : seq_c_nvm 
        ]
        [ compile slot.c 
          : <define>BOOST_PP_VARIADICS=0
          : slot_c_nvm 
        ]
        [ compile stringize.c 
          : <define>BOOST_PP_VARIADICS=0
          : stringize_c_nvm 
        ]
        [ compile tuple.c 
          : <define>BOOST_PP_VARIADICS=0
          : tuple_c_nvm 
        ]
  ;
  
alias preprocessor_isempty : : 
        <toolset>gcc
        <toolset-gcc:version>3.4
    ;
    
alias preprocessor_isempty : : 
        <toolset>gcc
        <toolset-gcc:version>4.1
    ;
    
alias preprocessor_isempty : : 
        <toolset>gcc
        <toolset-gcc:version>4.2
    ;
    
alias preprocessor_isempty
  :   
       [ compile isempty.cpp ]
       [ compile-fail isempty_variadic_standard_failure.cpp : <define>BOOST_PP_VARIADICS=1 ]
       [ compile-fail isempty_variadic_standard_failure2.cpp : <define>BOOST_PP_VARIADICS=1 ]
 ; 
  
alias preprocessor_isempty_nvm
   :   
       [ compile isempty.cpp : <define>BOOST_PP_VARIADICS=0 : isempty_nvm ]
  ;
  
alias preprocessor_isempty_c
  :   
       [ compile isempty.c 
         : 
         : isempty_c 
       ]
       [ compile-fail isempty_variadic_standard_failure.c 
         : <define>BOOST_PP_VARIADICS=1
         : isempty_variadic_standard_failure_c 
       ]
       [ compile-fail isempty_variadic_standard_failure2.c 
         : <define>BOOST_PP_VARIADICS=1
         : isempty_variadic_standard_failure2_c 
       ]
 ;
  
alias preprocessor_isempty_c_nvm
   :   
        [ compile isempty.c 
          : <define>BOOST_PP_VARIADICS=0
          : isempty_c_nvm 
        ]
  ;

alias preprocessor_config
   :   
        [ run config_info.cpp ]
  ;
