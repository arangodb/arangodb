# -*- python -*-
#
# Copyright (c) 2017 Stefan Seefeld
# All rights reserved.
#
# Distributed under the Boost Software License, Version 1.0.
# (See accompanying file LICENSE_1_0.txt or copy at
# http://www.boost.org/LICENSE_1_0.txt)

from faber import platform
from faber.feature import set
from faber.tools.compiler import define, libs, linkpath
from faber.artefacts.binary import binary
from faber.test import test, report, fail
from os.path import join

boost_suffix = options.get_with('boost-suffix')
boost_suffix = '-' + boost_suffix if boost_suffix else ''
boost_unit_test_framework = 'boost_unit_test_framework' + boost_suffix
boost_filesystem = 'boost_filesystem' + boost_suffix
boost_system = 'boost_system' + boost_suffix

test_features = set(define('BOOST_TEST_DYN_LINK'),
                    libs(boost_unit_test_framework,
                         boost_system,
                         boost_filesystem))


def gil_test(name, sources, features, condition=True):
    return test(name, binary(name, sources, features=features, condition=condition))


# TODO: Add `subchroma_image.cpp` after fixing run-time failure,
#       for details see https://github.com/boostorg/gil/pull/164
tests = [gil_test('toolbox',
                  ['test.cpp', 'channel_type.cpp', 'channel_view.cpp', 'cmyka.cpp',
                   'get_num_bits.cpp', 'get_pixel_type.cpp', 'gray_alpha.cpp', 'gray_to_rgba.cpp',
                   'hsl_hsv_test.cpp', 'indexed_image_test.cpp', 'is_bit_aligned.cpp',
                   'is_homogeneous.cpp', 'is_similar.cpp', 'lab_test.cpp', 'pixel_bit_size.cpp',
                   'rgb_to_luminance.cpp', 'xyz_test.cpp'],
                  features=test_features),
]

default = report('report', tests, fail_on_failures=True)
