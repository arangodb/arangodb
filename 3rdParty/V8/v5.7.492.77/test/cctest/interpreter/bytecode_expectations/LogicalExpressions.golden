#
# Autogenerated by generate-bytecode-expectations.
#

---
wrap: yes

---
snippet: "
  var x = 0; return x || 3;
"
frame size: 1
parameter count: 1
bytecode array length: 9
bytecodes: [
  /*   30 E> */ B(StackCheck),
  /*   42 S> */ B(LdaZero),
                B(Star), R(0),
  /*   45 S> */ B(JumpIfToBooleanTrue), U8(4),
                B(LdaSmi), U8(3),
  /*   60 S> */ B(Return),
]
constant pool: [
]
handlers: [
]

---
snippet: "
  var x = 0; return (x == 1) || 3;
"
frame size: 1
parameter count: 1
bytecode array length: 14
bytecodes: [
  /*   30 E> */ B(StackCheck),
  /*   42 S> */ B(LdaZero),
                B(Star), R(0),
  /*   45 S> */ B(LdaSmi), U8(1),
  /*   55 E> */ B(TestEqual), R(0), U8(2),
                B(JumpIfTrue), U8(4),
                B(LdaSmi), U8(3),
  /*   67 S> */ B(Return),
]
constant pool: [
]
handlers: [
]

---
snippet: "
  var x = 0; return x && 3;
"
frame size: 1
parameter count: 1
bytecode array length: 9
bytecodes: [
  /*   30 E> */ B(StackCheck),
  /*   42 S> */ B(LdaZero),
                B(Star), R(0),
  /*   45 S> */ B(JumpIfToBooleanFalse), U8(4),
                B(LdaSmi), U8(3),
  /*   60 S> */ B(Return),
]
constant pool: [
]
handlers: [
]

---
snippet: "
  var x = 0; return (x == 0) && 3;
"
frame size: 1
parameter count: 1
bytecode array length: 13
bytecodes: [
  /*   30 E> */ B(StackCheck),
  /*   42 S> */ B(LdaZero),
                B(Star), R(0),
  /*   45 S> */ B(LdaZero),
  /*   55 E> */ B(TestEqual), R(0), U8(2),
                B(JumpIfFalse), U8(4),
                B(LdaSmi), U8(3),
  /*   67 S> */ B(Return),
]
constant pool: [
]
handlers: [
]

---
snippet: "
  var x = 0; return x || (1, 2, 3);
"
frame size: 1
parameter count: 1
bytecode array length: 9
bytecodes: [
  /*   30 E> */ B(StackCheck),
  /*   42 S> */ B(LdaZero),
                B(Star), R(0),
  /*   45 S> */ B(JumpIfToBooleanTrue), U8(4),
                B(LdaSmi), U8(3),
  /*   68 S> */ B(Return),
]
constant pool: [
]
handlers: [
]

---
snippet: "
  var a = 2, b = 3, c = 4; return a || (a, b, a, b, c = 5, 3);
"
frame size: 3
parameter count: 1
bytecode array length: 24
bytecodes: [
  /*   30 E> */ B(StackCheck),
  /*   42 S> */ B(LdaSmi), U8(2),
                B(Star), R(0),
  /*   49 S> */ B(LdaSmi), U8(3),
                B(Star), R(1),
  /*   56 S> */ B(LdaSmi), U8(4),
                B(Star), R(2),
  /*   59 S> */ B(Ldar), R(0),
                B(JumpIfToBooleanTrue), U8(8),
                B(LdaSmi), U8(5),
                B(Star), R(2),
                B(LdaSmi), U8(3),
  /*   95 S> */ B(Return),
]
constant pool: [
]
handlers: [
]

---
snippet: "
  var x = 1; var a = 2, b = 3; return x || (
    a = 1, b = 2, 
    a = 1, b = 2, 
    a = 1, b = 2, 
    a = 1, b = 2, 
    a = 1, b = 2, 
    a = 1, b = 2, 
    a = 1, b = 2, 
    a = 1, b = 2, 
    a = 1, b = 2, 
    a = 1, b = 2, 
    a = 1, b = 2, 
    a = 1, b = 2, 
    a = 1, b = 2, 
    a = 1, b = 2, 
    a = 1, b = 2, 
    a = 1, b = 2, 
    a = 1, b = 2, 
    a = 1, b = 2, 
    a = 1, b = 2, 
    a = 1, b = 2, 
    a = 1, b = 2, 
    a = 1, b = 2, 
    a = 1, b = 2, 
    a = 1, b = 2, 
    a = 1, b = 2, 
    a = 1, b = 2, 
    a = 1, b = 2, 
    a = 1, b = 2, 
    a = 1, b = 2, 
    a = 1, b = 2, 
    a = 1, b = 2, 
    a = 1, b = 2, 3);
"
frame size: 3
parameter count: 1
bytecode array length: 276
bytecodes: [
  /*   30 E> */ B(StackCheck),
  /*   42 S> */ B(LdaSmi), U8(1),
                B(Star), R(0),
  /*   53 S> */ B(LdaSmi), U8(2),
                B(Star), R(1),
  /*   60 S> */ B(LdaSmi), U8(3),
                B(Star), R(2),
  /*   63 S> */ B(Ldar), R(0),
                B(JumpIfToBooleanTrueConstant), U8(0),
                B(LdaSmi), U8(1),
                B(Star), R(1),
                B(LdaSmi), U8(2),
                B(Star), R(2),
                B(LdaSmi), U8(1),
                B(Star), R(1),
                B(LdaSmi), U8(2),
                B(Star), R(2),
                B(LdaSmi), U8(1),
                B(Star), R(1),
                B(LdaSmi), U8(2),
                B(Star), R(2),
                B(LdaSmi), U8(1),
                B(Star), R(1),
                B(LdaSmi), U8(2),
                B(Star), R(2),
                B(LdaSmi), U8(1),
                B(Star), R(1),
                B(LdaSmi), U8(2),
                B(Star), R(2),
                B(LdaSmi), U8(1),
                B(Star), R(1),
                B(LdaSmi), U8(2),
                B(Star), R(2),
                B(LdaSmi), U8(1),
                B(Star), R(1),
                B(LdaSmi), U8(2),
                B(Star), R(2),
                B(LdaSmi), U8(1),
                B(Star), R(1),
                B(LdaSmi), U8(2),
                B(Star), R(2),
                B(LdaSmi), U8(1),
                B(Star), R(1),
                B(LdaSmi), U8(2),
                B(Star), R(2),
                B(LdaSmi), U8(1),
                B(Star), R(1),
                B(LdaSmi), U8(2),
                B(Star), R(2),
                B(LdaSmi), U8(1),
                B(Star), R(1),
                B(LdaSmi), U8(2),
                B(Star), R(2),
                B(LdaSmi), U8(1),
                B(Star), R(1),
                B(LdaSmi), U8(2),
                B(Star), R(2),
                B(LdaSmi), U8(1),
                B(Star), R(1),
                B(LdaSmi), U8(2),
                B(Star), R(2),
                B(LdaSmi), U8(1),
                B(Star), R(1),
                B(LdaSmi), U8(2),
                B(Star), R(2),
                B(LdaSmi), U8(1),
                B(Star), R(1),
                B(LdaSmi), U8(2),
                B(Star), R(2),
                B(LdaSmi), U8(1),
                B(Star), R(1),
                B(LdaSmi), U8(2),
                B(Star), R(2),
                B(LdaSmi), U8(1),
                B(Star), R(1),
                B(LdaSmi), U8(2),
                B(Star), R(2),
                B(LdaSmi), U8(1),
                B(Star), R(1),
                B(LdaSmi), U8(2),
                B(Star), R(2),
                B(LdaSmi), U8(1),
                B(Star), R(1),
                B(LdaSmi), U8(2),
                B(Star), R(2),
                B(LdaSmi), U8(1),
                B(Star), R(1),
                B(LdaSmi), U8(2),
                B(Star), R(2),
                B(LdaSmi), U8(1),
                B(Star), R(1),
                B(LdaSmi), U8(2),
                B(Star), R(2),
                B(LdaSmi), U8(1),
                B(Star), R(1),
                B(LdaSmi), U8(2),
                B(Star), R(2),
                B(LdaSmi), U8(1),
                B(Star), R(1),
                B(LdaSmi), U8(2),
                B(Star), R(2),
                B(LdaSmi), U8(1),
                B(Star), R(1),
                B(LdaSmi), U8(2),
                B(Star), R(2),
                B(LdaSmi), U8(1),
                B(Star), R(1),
                B(LdaSmi), U8(2),
                B(Star), R(2),
                B(LdaSmi), U8(1),
                B(Star), R(1),
                B(LdaSmi), U8(2),
                B(Star), R(2),
                B(LdaSmi), U8(1),
                B(Star), R(1),
                B(LdaSmi), U8(2),
                B(Star), R(2),
                B(LdaSmi), U8(1),
                B(Star), R(1),
                B(LdaSmi), U8(2),
                B(Star), R(2),
                B(LdaSmi), U8(1),
                B(Star), R(1),
                B(LdaSmi), U8(2),
                B(Star), R(2),
                B(LdaSmi), U8(1),
                B(Star), R(1),
                B(LdaSmi), U8(2),
                B(Star), R(2),
                B(LdaSmi), U8(1),
                B(Star), R(1),
                B(LdaSmi), U8(2),
                B(Star), R(2),
                B(LdaSmi), U8(1),
                B(Star), R(1),
                B(LdaSmi), U8(2),
                B(Star), R(2),
                B(LdaSmi), U8(3),
  /*  624 S> */ B(Return),
]
constant pool: [
  Smi [260],
]
handlers: [
]

---
snippet: "
  var x = 0; var a = 2, b = 3; return x && (
    a = 1, b = 2, 
    a = 1, b = 2, 
    a = 1, b = 2, 
    a = 1, b = 2, 
    a = 1, b = 2, 
    a = 1, b = 2, 
    a = 1, b = 2, 
    a = 1, b = 2, 
    a = 1, b = 2, 
    a = 1, b = 2, 
    a = 1, b = 2, 
    a = 1, b = 2, 
    a = 1, b = 2, 
    a = 1, b = 2, 
    a = 1, b = 2, 
    a = 1, b = 2, 
    a = 1, b = 2, 
    a = 1, b = 2, 
    a = 1, b = 2, 
    a = 1, b = 2, 
    a = 1, b = 2, 
    a = 1, b = 2, 
    a = 1, b = 2, 
    a = 1, b = 2, 
    a = 1, b = 2, 
    a = 1, b = 2, 
    a = 1, b = 2, 
    a = 1, b = 2, 
    a = 1, b = 2, 
    a = 1, b = 2, 
    a = 1, b = 2, 
    a = 1, b = 2, 3);
"
frame size: 3
parameter count: 1
bytecode array length: 275
bytecodes: [
  /*   30 E> */ B(StackCheck),
  /*   42 S> */ B(LdaZero),
                B(Star), R(0),
  /*   53 S> */ B(LdaSmi), U8(2),
                B(Star), R(1),
  /*   60 S> */ B(LdaSmi), U8(3),
                B(Star), R(2),
  /*   63 S> */ B(Ldar), R(0),
                B(JumpIfToBooleanFalseConstant), U8(0),
                B(LdaSmi), U8(1),
                B(Star), R(1),
                B(LdaSmi), U8(2),
                B(Star), R(2),
                B(LdaSmi), U8(1),
                B(Star), R(1),
                B(LdaSmi), U8(2),
                B(Star), R(2),
                B(LdaSmi), U8(1),
                B(Star), R(1),
                B(LdaSmi), U8(2),
                B(Star), R(2),
                B(LdaSmi), U8(1),
                B(Star), R(1),
                B(LdaSmi), U8(2),
                B(Star), R(2),
                B(LdaSmi), U8(1),
                B(Star), R(1),
                B(LdaSmi), U8(2),
                B(Star), R(2),
                B(LdaSmi), U8(1),
                B(Star), R(1),
                B(LdaSmi), U8(2),
                B(Star), R(2),
                B(LdaSmi), U8(1),
                B(Star), R(1),
                B(LdaSmi), U8(2),
                B(Star), R(2),
                B(LdaSmi), U8(1),
                B(Star), R(1),
                B(LdaSmi), U8(2),
                B(Star), R(2),
                B(LdaSmi), U8(1),
                B(Star), R(1),
                B(LdaSmi), U8(2),
                B(Star), R(2),
                B(LdaSmi), U8(1),
                B(Star), R(1),
                B(LdaSmi), U8(2),
                B(Star), R(2),
                B(LdaSmi), U8(1),
                B(Star), R(1),
                B(LdaSmi), U8(2),
                B(Star), R(2),
                B(LdaSmi), U8(1),
                B(Star), R(1),
                B(LdaSmi), U8(2),
                B(Star), R(2),
                B(LdaSmi), U8(1),
                B(Star), R(1),
                B(LdaSmi), U8(2),
                B(Star), R(2),
                B(LdaSmi), U8(1),
                B(Star), R(1),
                B(LdaSmi), U8(2),
                B(Star), R(2),
                B(LdaSmi), U8(1),
                B(Star), R(1),
                B(LdaSmi), U8(2),
                B(Star), R(2),
                B(LdaSmi), U8(1),
                B(Star), R(1),
                B(LdaSmi), U8(2),
                B(Star), R(2),
                B(LdaSmi), U8(1),
                B(Star), R(1),
                B(LdaSmi), U8(2),
                B(Star), R(2),
                B(LdaSmi), U8(1),
                B(Star), R(1),
                B(LdaSmi), U8(2),
                B(Star), R(2),
                B(LdaSmi), U8(1),
                B(Star), R(1),
                B(LdaSmi), U8(2),
                B(Star), R(2),
                B(LdaSmi), U8(1),
                B(Star), R(1),
                B(LdaSmi), U8(2),
                B(Star), R(2),
                B(LdaSmi), U8(1),
                B(Star), R(1),
                B(LdaSmi), U8(2),
                B(Star), R(2),
                B(LdaSmi), U8(1),
                B(Star), R(1),
                B(LdaSmi), U8(2),
                B(Star), R(2),
                B(LdaSmi), U8(1),
                B(Star), R(1),
                B(LdaSmi), U8(2),
                B(Star), R(2),
                B(LdaSmi), U8(1),
                B(Star), R(1),
                B(LdaSmi), U8(2),
                B(Star), R(2),
                B(LdaSmi), U8(1),
                B(Star), R(1),
                B(LdaSmi), U8(2),
                B(Star), R(2),
                B(LdaSmi), U8(1),
                B(Star), R(1),
                B(LdaSmi), U8(2),
                B(Star), R(2),
                B(LdaSmi), U8(1),
                B(Star), R(1),
                B(LdaSmi), U8(2),
                B(Star), R(2),
                B(LdaSmi), U8(1),
                B(Star), R(1),
                B(LdaSmi), U8(2),
                B(Star), R(2),
                B(LdaSmi), U8(1),
                B(Star), R(1),
                B(LdaSmi), U8(2),
                B(Star), R(2),
                B(LdaSmi), U8(1),
                B(Star), R(1),
                B(LdaSmi), U8(2),
                B(Star), R(2),
                B(LdaSmi), U8(1),
                B(Star), R(1),
                B(LdaSmi), U8(2),
                B(Star), R(2),
                B(LdaSmi), U8(1),
                B(Star), R(1),
                B(LdaSmi), U8(2),
                B(Star), R(2),
                B(LdaSmi), U8(3),
  /*  624 S> */ B(Return),
]
constant pool: [
  Smi [260],
]
handlers: [
]

---
snippet: "
  var x = 1; var a = 2, b = 3; return (x > 3) || (
    a = 1, b = 2, 
    a = 1, b = 2, 
    a = 1, b = 2, 
    a = 1, b = 2, 
    a = 1, b = 2, 
    a = 1, b = 2, 
    a = 1, b = 2, 
    a = 1, b = 2, 
    a = 1, b = 2, 
    a = 1, b = 2, 
    a = 1, b = 2, 
    a = 1, b = 2, 
    a = 1, b = 2, 
    a = 1, b = 2, 
    a = 1, b = 2, 
    a = 1, b = 2, 
    a = 1, b = 2, 
    a = 1, b = 2, 
    a = 1, b = 2, 
    a = 1, b = 2, 
    a = 1, b = 2, 
    a = 1, b = 2, 
    a = 1, b = 2, 
    a = 1, b = 2, 
    a = 1, b = 2, 
    a = 1, b = 2, 
    a = 1, b = 2, 
    a = 1, b = 2, 
    a = 1, b = 2, 
    a = 1, b = 2, 
    a = 1, b = 2, 
    a = 1, b = 2, 3);
"
frame size: 3
parameter count: 1
bytecode array length: 279
bytecodes: [
  /*   30 E> */ B(StackCheck),
  /*   42 S> */ B(LdaSmi), U8(1),
                B(Star), R(0),
  /*   53 S> */ B(LdaSmi), U8(2),
                B(Star), R(1),
  /*   60 S> */ B(LdaSmi), U8(3),
                B(Star), R(2),
  /*   63 S> */ B(LdaSmi), U8(3),
  /*   73 E> */ B(TestGreaterThan), R(0), U8(2),
                B(JumpIfTrueConstant), U8(0),
                B(LdaSmi), U8(1),
                B(Star), R(1),
                B(LdaSmi), U8(2),
                B(Star), R(2),
                B(LdaSmi), U8(1),
                B(Star), R(1),
                B(LdaSmi), U8(2),
                B(Star), R(2),
                B(LdaSmi), U8(1),
                B(Star), R(1),
                B(LdaSmi), U8(2),
                B(Star), R(2),
                B(LdaSmi), U8(1),
                B(Star), R(1),
                B(LdaSmi), U8(2),
                B(Star), R(2),
                B(LdaSmi), U8(1),
                B(Star), R(1),
                B(LdaSmi), U8(2),
                B(Star), R(2),
                B(LdaSmi), U8(1),
                B(Star), R(1),
                B(LdaSmi), U8(2),
                B(Star), R(2),
                B(LdaSmi), U8(1),
                B(Star), R(1),
                B(LdaSmi), U8(2),
                B(Star), R(2),
                B(LdaSmi), U8(1),
                B(Star), R(1),
                B(LdaSmi), U8(2),
                B(Star), R(2),
                B(LdaSmi), U8(1),
                B(Star), R(1),
                B(LdaSmi), U8(2),
                B(Star), R(2),
                B(LdaSmi), U8(1),
                B(Star), R(1),
                B(LdaSmi), U8(2),
                B(Star), R(2),
                B(LdaSmi), U8(1),
                B(Star), R(1),
                B(LdaSmi), U8(2),
                B(Star), R(2),
                B(LdaSmi), U8(1),
                B(Star), R(1),
                B(LdaSmi), U8(2),
                B(Star), R(2),
                B(LdaSmi), U8(1),
                B(Star), R(1),
                B(LdaSmi), U8(2),
                B(Star), R(2),
                B(LdaSmi), U8(1),
                B(Star), R(1),
                B(LdaSmi), U8(2),
                B(Star), R(2),
                B(LdaSmi), U8(1),
                B(Star), R(1),
                B(LdaSmi), U8(2),
                B(Star), R(2),
                B(LdaSmi), U8(1),
                B(Star), R(1),
                B(LdaSmi), U8(2),
                B(Star), R(2),
                B(LdaSmi), U8(1),
                B(Star), R(1),
                B(LdaSmi), U8(2),
                B(Star), R(2),
                B(LdaSmi), U8(1),
                B(Star), R(1),
                B(LdaSmi), U8(2),
                B(Star), R(2),
                B(LdaSmi), U8(1),
                B(Star), R(1),
                B(LdaSmi), U8(2),
                B(Star), R(2),
                B(LdaSmi), U8(1),
                B(Star), R(1),
                B(LdaSmi), U8(2),
                B(Star), R(2),
                B(LdaSmi), U8(1),
                B(Star), R(1),
                B(LdaSmi), U8(2),
                B(Star), R(2),
                B(LdaSmi), U8(1),
                B(Star), R(1),
                B(LdaSmi), U8(2),
                B(Star), R(2),
                B(LdaSmi), U8(1),
                B(Star), R(1),
                B(LdaSmi), U8(2),
                B(Star), R(2),
                B(LdaSmi), U8(1),
                B(Star), R(1),
                B(LdaSmi), U8(2),
                B(Star), R(2),
                B(LdaSmi), U8(1),
                B(Star), R(1),
                B(LdaSmi), U8(2),
                B(Star), R(2),
                B(LdaSmi), U8(1),
                B(Star), R(1),
                B(LdaSmi), U8(2),
                B(Star), R(2),
                B(LdaSmi), U8(1),
                B(Star), R(1),
                B(LdaSmi), U8(2),
                B(Star), R(2),
                B(LdaSmi), U8(1),
                B(Star), R(1),
                B(LdaSmi), U8(2),
                B(Star), R(2),
                B(LdaSmi), U8(1),
                B(Star), R(1),
                B(LdaSmi), U8(2),
                B(Star), R(2),
                B(LdaSmi), U8(1),
                B(Star), R(1),
                B(LdaSmi), U8(2),
                B(Star), R(2),
                B(LdaSmi), U8(1),
                B(Star), R(1),
                B(LdaSmi), U8(2),
                B(Star), R(2),
                B(LdaSmi), U8(1),
                B(Star), R(1),
                B(LdaSmi), U8(2),
                B(Star), R(2),
                B(LdaSmi), U8(3),
  /*  630 S> */ B(Return),
]
constant pool: [
  Smi [260],
]
handlers: [
]

---
snippet: "
  var x = 0; var a = 2, b = 3; return (x < 5) && (
    a = 1, b = 2, 
    a = 1, b = 2, 
    a = 1, b = 2, 
    a = 1, b = 2, 
    a = 1, b = 2, 
    a = 1, b = 2, 
    a = 1, b = 2, 
    a = 1, b = 2, 
    a = 1, b = 2, 
    a = 1, b = 2, 
    a = 1, b = 2, 
    a = 1, b = 2, 
    a = 1, b = 2, 
    a = 1, b = 2, 
    a = 1, b = 2, 
    a = 1, b = 2, 
    a = 1, b = 2, 
    a = 1, b = 2, 
    a = 1, b = 2, 
    a = 1, b = 2, 
    a = 1, b = 2, 
    a = 1, b = 2, 
    a = 1, b = 2, 
    a = 1, b = 2, 
    a = 1, b = 2, 
    a = 1, b = 2, 
    a = 1, b = 2, 
    a = 1, b = 2, 
    a = 1, b = 2, 
    a = 1, b = 2, 
    a = 1, b = 2, 
    a = 1, b = 2, 3);
"
frame size: 3
parameter count: 1
bytecode array length: 278
bytecodes: [
  /*   30 E> */ B(StackCheck),
  /*   42 S> */ B(LdaZero),
                B(Star), R(0),
  /*   53 S> */ B(LdaSmi), U8(2),
                B(Star), R(1),
  /*   60 S> */ B(LdaSmi), U8(3),
                B(Star), R(2),
  /*   63 S> */ B(LdaSmi), U8(5),
  /*   73 E> */ B(TestLessThan), R(0), U8(2),
                B(JumpIfFalseConstant), U8(0),
                B(LdaSmi), U8(1),
                B(Star), R(1),
                B(LdaSmi), U8(2),
                B(Star), R(2),
                B(LdaSmi), U8(1),
                B(Star), R(1),
                B(LdaSmi), U8(2),
                B(Star), R(2),
                B(LdaSmi), U8(1),
                B(Star), R(1),
                B(LdaSmi), U8(2),
                B(Star), R(2),
                B(LdaSmi), U8(1),
                B(Star), R(1),
                B(LdaSmi), U8(2),
                B(Star), R(2),
                B(LdaSmi), U8(1),
                B(Star), R(1),
                B(LdaSmi), U8(2),
                B(Star), R(2),
                B(LdaSmi), U8(1),
                B(Star), R(1),
                B(LdaSmi), U8(2),
                B(Star), R(2),
                B(LdaSmi), U8(1),
                B(Star), R(1),
                B(LdaSmi), U8(2),
                B(Star), R(2),
                B(LdaSmi), U8(1),
                B(Star), R(1),
                B(LdaSmi), U8(2),
                B(Star), R(2),
                B(LdaSmi), U8(1),
                B(Star), R(1),
                B(LdaSmi), U8(2),
                B(Star), R(2),
                B(LdaSmi), U8(1),
                B(Star), R(1),
                B(LdaSmi), U8(2),
                B(Star), R(2),
                B(LdaSmi), U8(1),
                B(Star), R(1),
                B(LdaSmi), U8(2),
                B(Star), R(2),
                B(LdaSmi), U8(1),
                B(Star), R(1),
                B(LdaSmi), U8(2),
                B(Star), R(2),
                B(LdaSmi), U8(1),
                B(Star), R(1),
                B(LdaSmi), U8(2),
                B(Star), R(2),
                B(LdaSmi), U8(1),
                B(Star), R(1),
                B(LdaSmi), U8(2),
                B(Star), R(2),
                B(LdaSmi), U8(1),
                B(Star), R(1),
                B(LdaSmi), U8(2),
                B(Star), R(2),
                B(LdaSmi), U8(1),
                B(Star), R(1),
                B(LdaSmi), U8(2),
                B(Star), R(2),
                B(LdaSmi), U8(1),
                B(Star), R(1),
                B(LdaSmi), U8(2),
                B(Star), R(2),
                B(LdaSmi), U8(1),
                B(Star), R(1),
                B(LdaSmi), U8(2),
                B(Star), R(2),
                B(LdaSmi), U8(1),
                B(Star), R(1),
                B(LdaSmi), U8(2),
                B(Star), R(2),
                B(LdaSmi), U8(1),
                B(Star), R(1),
                B(LdaSmi), U8(2),
                B(Star), R(2),
                B(LdaSmi), U8(1),
                B(Star), R(1),
                B(LdaSmi), U8(2),
                B(Star), R(2),
                B(LdaSmi), U8(1),
                B(Star), R(1),
                B(LdaSmi), U8(2),
                B(Star), R(2),
                B(LdaSmi), U8(1),
                B(Star), R(1),
                B(LdaSmi), U8(2),
                B(Star), R(2),
                B(LdaSmi), U8(1),
                B(Star), R(1),
                B(LdaSmi), U8(2),
                B(Star), R(2),
                B(LdaSmi), U8(1),
                B(Star), R(1),
                B(LdaSmi), U8(2),
                B(Star), R(2),
                B(LdaSmi), U8(1),
                B(Star), R(1),
                B(LdaSmi), U8(2),
                B(Star), R(2),
                B(LdaSmi), U8(1),
                B(Star), R(1),
                B(LdaSmi), U8(2),
                B(Star), R(2),
                B(LdaSmi), U8(1),
                B(Star), R(1),
                B(LdaSmi), U8(2),
                B(Star), R(2),
                B(LdaSmi), U8(1),
                B(Star), R(1),
                B(LdaSmi), U8(2),
                B(Star), R(2),
                B(LdaSmi), U8(1),
                B(Star), R(1),
                B(LdaSmi), U8(2),
                B(Star), R(2),
                B(LdaSmi), U8(1),
                B(Star), R(1),
                B(LdaSmi), U8(2),
                B(Star), R(2),
                B(LdaSmi), U8(1),
                B(Star), R(1),
                B(LdaSmi), U8(2),
                B(Star), R(2),
                B(LdaSmi), U8(3),
  /*  630 S> */ B(Return),
]
constant pool: [
  Smi [260],
]
handlers: [
]

---
snippet: "
  return 0 && 3;
"
frame size: 0
parameter count: 1
bytecode array length: 3
bytecodes: [
  /*   30 E> */ B(StackCheck),
  /*   34 S> */ B(LdaZero),
  /*   49 S> */ B(Return),
]
constant pool: [
]
handlers: [
]

---
snippet: "
  return 1 || 3;
"
frame size: 0
parameter count: 1
bytecode array length: 4
bytecodes: [
  /*   30 E> */ B(StackCheck),
  /*   34 S> */ B(LdaSmi), U8(1),
  /*   49 S> */ B(Return),
]
constant pool: [
]
handlers: [
]

---
snippet: "
  var x = 1; return x && 3 || 0, 1;
"
frame size: 1
parameter count: 1
bytecode array length: 15
bytecodes: [
  /*   30 E> */ B(StackCheck),
  /*   42 S> */ B(LdaSmi), U8(1),
                B(Star), R(0),
  /*   45 S> */ B(JumpIfToBooleanFalse), U8(4),
                B(LdaSmi), U8(3),
                B(JumpIfToBooleanTrue), U8(3),
                B(LdaZero),
                B(LdaSmi), U8(1),
  /*   68 S> */ B(Return),
]
constant pool: [
]
handlers: [
]

