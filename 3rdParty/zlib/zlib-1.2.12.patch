diff --git a/3rdParty/zlib/zlib-1.2.12/CMakeLists.txt b/3rdParty/zlib/zlib-1.2.12/CMakeLists.txt
index e6fbb37d105..960d3cadc8b 100644
--- a/3rdParty/zlib/zlib-1.2.12/CMakeLists.txt
+++ b/3rdParty/zlib/zlib-1.2.12/CMakeLists.txt
@@ -1,6 +1,10 @@
 cmake_minimum_required(VERSION 2.4.4)
 set(CMAKE_ALLOW_LOOSE_LOOP_CONSTRUCTS ON)
 
+if (POLICY CMP0048)
+  cmake_policy(SET CMP0048 NEW)
+endif ()
+
 project(zlib C)
 
 set(VERSION "1.2.12")
@@ -60,7 +64,7 @@ endif()
 check_include_file(unistd.h Z_HAVE_UNISTD_H)
 
 if(MSVC)
-    set(CMAKE_DEBUG_POSTFIX "d")
+    # set(CMAKE_DEBUG_POSTFIX "d")
     add_definitions(-D_CRT_SECURE_NO_DEPRECATE)
     add_definitions(-D_CRT_NONSTDC_NO_DEPRECATE)
     include_directories(${CMAKE_CURRENT_SOURCE_DIR})
@@ -183,10 +187,10 @@ if(MINGW)
     set(ZLIB_DLL_SRCS ${CMAKE_CURRENT_BINARY_DIR}/zlib1rc.obj)
 endif(MINGW)
 
-add_library(zlib SHARED ${ZLIB_SRCS} ${ZLIB_ASMS} ${ZLIB_DLL_SRCS} ${ZLIB_PUBLIC_HDRS} ${ZLIB_PRIVATE_HDRS})
+# add_library(zlib SHARED ${ZLIB_SRCS} ${ZLIB_ASMS} ${ZLIB_DLL_SRCS} ${ZLIB_PUBLIC_HDRS} ${ZLIB_PRIVATE_HDRS})
 add_library(zlibstatic STATIC ${ZLIB_SRCS} ${ZLIB_ASMS} ${ZLIB_PUBLIC_HDRS} ${ZLIB_PRIVATE_HDRS})
-set_target_properties(zlib PROPERTIES DEFINE_SYMBOL ZLIB_DLL)
-set_target_properties(zlib PROPERTIES SOVERSION 1)
+# set_target_properties(zlib PROPERTIES DEFINE_SYMBOL ZLIB_DLL)
+# set_target_properties(zlib PROPERTIES SOVERSION 1)
 
 if(NOT CYGWIN)
     # This property causes shared libraries on Linux to have the full version
@@ -196,15 +200,15 @@ if(NOT CYGWIN)
     #
     # This has no effect with MSVC, on that platform the version info for
     # the DLL comes from the resource file win32/zlib1.rc
-    set_target_properties(zlib PROPERTIES VERSION ${ZLIB_FULL_VERSION})
+    # set_target_properties(zlib PROPERTIES VERSION ${ZLIB_FULL_VERSION})
 endif()
 
 if(UNIX)
     # On unix-like platforms the library is almost always called libz
-   set_target_properties(zlib zlibstatic PROPERTIES OUTPUT_NAME z)
-   if(NOT APPLE)
-     set_target_properties(zlib PROPERTIES LINK_FLAGS "-Wl,--version-script,\"${CMAKE_CURRENT_SOURCE_DIR}/zlib.map\"")
-   endif()
+    # set_target_properties(zlib zlibstatic PROPERTIES OUTPUT_NAME z)
+    # if(NOT APPLE)
+    #   set_target_properties(zlib PROPERTIES LINK_FLAGS "-Wl,--version-script,\"${CMAKE_CURRENT_SOURCE_DIR}/zlib.map\"")
+    # endif()
 elseif(BUILD_SHARED_LIBS AND WIN32)
     # Creates zlib1.dll when building shared library version
     set_target_properties(zlib PROPERTIES SUFFIX "1.dll")
@@ -230,20 +234,49 @@ endif()
 # Example binaries
 #============================================================================
 
-add_executable(example test/example.c)
-target_link_libraries(example zlib)
-add_test(example example)
+# add_executable(example test/example.c)
+# target_link_libraries(example zlib)
+# add_test(example example)
 
-add_executable(minigzip test/minigzip.c)
-target_link_libraries(minigzip zlib)
+# add_executable(minigzip test/minigzip.c)
+# target_link_libraries(minigzip zlib)
 
-if(HAVE_OFF64_T)
-    add_executable(example64 test/example.c)
-    target_link_libraries(example64 zlib)
-    set_target_properties(example64 PROPERTIES COMPILE_FLAGS "-D_FILE_OFFSET_BITS=64")
-    add_test(example64 example64)
+# if(HAVE_OFF64_T)
+#     add_executable(example64 test/example.c)
+#     target_link_libraries(example64 zlib)
+#     set_target_properties(example64 PROPERTIES COMPILE_FLAGS "-D_FILE_OFFSET_BITS=64")
+#     add_test(example64 example64)
 
-    add_executable(minigzip64 test/minigzip.c)
-    target_link_libraries(minigzip64 zlib)
-    set_target_properties(minigzip64 PROPERTIES COMPILE_FLAGS "-D_FILE_OFFSET_BITS=64")
-endif()
+#     add_executable(minigzip64 test/minigzip.c)
+#     target_link_libraries(minigzip64 zlib)
+#     set_target_properties(minigzip64 PROPERTIES COMPILE_FLAGS "-D_FILE_OFFSET_BITS=64")
+# endif()
+
+set(ZLIB_VERSION
+  ${VERSION}
+  CACHE INTERNAL
+  "${PROJECT_NAME}: Version"
+)
+
+#if (WINDOWS)
+  set(ZLIB_LIBS
+    zlibstatic
+    CACHE INTERNAL
+    "${PROJECT_NAME}: Libraries"
+  )
+#else ()
+#  set(ZLIB_LIBS
+#    z
+#    CACHE INTERNAL
+#    "${PROJECT_NAME}: Libraries"
+#  )
+#endif ()
+list(APPEND LINK_DIRECTORIES "${zlib_BINARY_DIR}")
+
+set(ZLIB_INCLUDE_DIR
+  ${PROJECT_SOURCE_DIR} ${PROJECT_BINARY_DIR}
+  CACHE INTERNAL
+  "${PROJECT_NAME}: Include Directories"
+)
+
+set(LINK_DIRECTORIES "${LINK_DIRECTORIES}" PARENT_SCOPE)
