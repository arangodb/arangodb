"use strict";

const fs = require('fs');

const executeExternal = require('internal').executeExternal;
const statusExternal = require('internal').statusExternal;

exports.sync = function (cmd, args, makeLineHandler, done) {
  const lineHandler = makeLineHandler(() => undefined);
  const proc = executeExternal(cmd, args, true, []);
  if (proc.error) {
    return done(proc.error);
  }
  let b = '';
  let rc = {status: 'RUNNING'};
  let rawLines = [];
  let found = true;

  let buf = fs.readPipe(proc.pid);
  do {
    b += buf;
    found = true;
    while ((b.length > 0) && found) {
      found = false;
      let lineStart = 0;
      let maxBuffer = b.length;
      for (let j = 0; j < maxBuffer; j++) {
        if (b[j] === '\n') { // \n
          // OK, we've got a complete line. lets parse it.
          rawLines.push(b.slice(lineStart, j));
          lineStart = j + 1;
          j = maxBuffer;
          found = true;
        }
      }
      b = b.slice(lineStart, b.length);
    }
    buf = fs.readPipe(proc.pid);
    if (buf.length === 0) {
      rc = statusExternal(proc.pid);
      if (rc.status === 'NOT-FOUND') {
        break;
      }
    }
  } while (rc.status === 'RUNNING');
  for (var i = 0; i < rawLines.length; i++) {
    lineHandler(rawLines[i]);
  }

  return done(null);
};

exports.continuous = function (activator, activatorOptions, options) {
    var cmd = activatorOptions.cmd;
    var args = activatorOptions.args;
    var makeLineHandler = activatorOptions.makeLineHandler;
    var done = activatorOptions.done;
    var sync = options.sync;

    var completed = false;
    var canceller;
    var makeInterceptHandler = function (stopper) {
        var handler = makeLineHandler(function () {
            completed = true;
            stopper();
        });

        return handler;
    };

    function runActivator() {
        canceller = activator(cmd, args, makeInterceptHandler, function (err) {
            if (err) {
                completed = true;
                return done(err);
            } else if (!completed && !sync) {
                setTimeout(runActivator, 0);
                return;
            } else if (completed) {
                done(null);
            }
        });
    }

    if (!sync) {
        runActivator();
        return { cancel:
            function() {
                completed = true;
                canceller.cancel();
            }
        };
    }

    do {
        runActivator();
    } while(!completed);
};
