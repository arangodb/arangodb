{"version":3,"sources":["../src/index.js"],"names":["convert","TYPES","alternatives","schema","joi","transformer","result","oneOf","_inner","matches","forEach","match","push","is","Error","then","otherwise","date","_flags","timestamp","type","format","any","array","_tests","test","name","uniqueItems","minItems","maxItems","arg","ordereds","length","ordered","map","item","list","inclusions","requireds","items","binary","contentMediaType","_meta","contentEncoding","encoding","boolean","number","exclusiveMaximum","maximum","exclusiveMinimum","minimum","multipleOf","JSON","parse","repeat","string","pattern","String","replace","minLength","maxLength","object","properties","additionalProperties","Boolean","allowUnknown","patterns","regex","rule","children","property","presence","key","required","isJoi","_type","_description","description","_examples","examples","example","_settings","language","label","title","default","undefined","_valids","_set","size","Array","isArray","allowOnly","module","exports"],"mappings":"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","file":"index.js","sourcesContent":["import assert from 'assert';\n\n// Converter helpers for Joi types.\n\nlet TYPES = {\n\n  alternatives: (schema, joi, transformer) => {\n\n    var result = schema.oneOf = [];\n\n    joi._inner.matches.forEach(function (match) {\n\n      if (match.schema) {\n        return result.push(convert(match.schema, transformer));\n      }\n\n      if (!match.is) {\n        throw new Error('joi.when requires an \"is\"');\n      }\n      if (!(match.then || match.otherwise)) {\n        throw new Error('joi.when requires one or both of \"then\" and \"otherwise\"');\n      }\n\n      if (match.then) {\n        result.push(convert(match.then, transformer));\n      }\n\n      if (match.otherwise) {\n        result.push(convert(match.otherwise, transformer));\n      }\n\n    });\n    return schema;\n  },\n\n  date: (schema, joi) => {\n    if (joi._flags.timestamp) {\n      schema.type = 'integer';\n      return schema;\n    }\n\n    schema.type = 'string';\n    schema.format = 'date-time';\n    return schema;\n  },\n\n  any: (schema) => {\n    schema.type = [\n      \"array\",\n      \"boolean\",\n      'number',\n      \"object\",\n      'string',\n      \"null\"\n    ];\n    return schema;\n  },\n\n  array: (schema, joi, transformer) => {\n    schema.type = 'array';\n\n    joi._tests.forEach((test) => {\n      switch (test.name) {\n        case 'unique':\n          schema.uniqueItems = true;\n          break;\n        case 'length':\n          schema.minItems = schema.maxItems = test.arg;\n          break;\n        case 'min':\n          schema.minItems = test.arg;\n          break;\n        case 'max':\n          schema.maxItems = test.arg;\n          break;\n      }\n    });\n\n    if (joi._inner) {\n      if (joi._inner.ordereds.length) {\n        schema.ordered = joi._inner.ordereds.map((item) => convert(item, transformer));\n      }\n\n      let list;\n      if (joi._inner.inclusions.length) {\n        list = joi._inner.inclusions;\n      } else if (joi._inner.requireds.length) {\n        list = joi._inner.requireds;\n      }\n\n      if (list) {\n        schema.items = convert(list[0], transformer);\n      }\n    }\n\n    return schema;\n  },\n\n  binary: (schema, joi) => {\n    schema.type = 'string';\n    schema.contentMediaType = joi._meta.length > 0 && joi._meta[0].contentMediaType ? joi._meta[0].contentMediaType : 'text/plain';\n    schema.contentEncoding = joi._flags.encoding ? joi._flags.encoding : 'binary';\n    return schema;\n  },\n\n  boolean: (schema) => {\n    schema.type = 'boolean';\n    return schema;\n  },\n\n  number: (schema, joi) => {\n    schema.type = 'number';\n    joi._tests.forEach((test) => {\n      switch (test.name) {\n        case 'integer':\n          schema.type = 'integer';\n          break;\n        case 'less':\n          schema.exclusiveMaximum = true;\n          schema.maximum = test.arg;\n          break;\n        case 'greater':\n          schema.exclusiveMinimum = true;\n          schema.minimum = test.arg;\n          break;\n        case 'min':\n          schema.minimum = test.arg;\n          break;\n        case 'max':\n          schema.maximum = test.arg;\n          break;\n        case 'precision':\n          let multipleOf \n          if (test.arg > 1) {\n            multipleOf = JSON.parse('0.' + '0'.repeat((test.arg - 1)) + '1');\n          } else {\n            multipleOf = 1;\n          }\n          schema.multipleOf = multipleOf;\n          break;\n      }\n    });\n    return schema;\n  },\n\n  string: (schema, joi) => {\n    schema.type = 'string';\n\n    joi._tests.forEach((test) => {\n      switch (test.name) {\n        case 'email':\n          schema.format = 'email';\n          break;\n        case 'regex':\n          // for backward compatibility\n          const arg = test.arg;\n\n          // This is required for backward compatibility\n          // Location \"pattern\" had changed since Joi v9.0.0\n          //\n          // For example:\n          //\n          // before Joi v9: test.arg\n          // since Joi v9: test.arg.pattern\n\n          const pattern = arg && arg.pattern ? arg.pattern : arg;\n          schema.pattern = String(pattern).replace(/^\\//,'').replace(/\\/$/,'');\n          break;\n        case 'min':\n          schema.minLength = test.arg;\n          break;\n        case 'max':\n          schema.maxLength = test.arg;\n          break;\n        case 'length':\n          schema.minLength = schema.maxLength = test.arg;\n          break;\n        case 'uri':\n          schema.format = 'uri';\n          break;\n      }\n    });\n\n    return schema;\n  },\n\n  object: (schema, joi, transformer) => {\n    schema.type = 'object';\n    schema.properties = {};\n    schema.additionalProperties = Boolean(joi._flags.allowUnknown);\n    schema.patterns = joi._inner.patterns.map((pattern) => {\n      return {regex: pattern.regex, rule: convert(pattern.rule, transformer)};\n    });\n\n    if (!joi._inner.children) {\n      return schema;\n    }\n\n    joi._inner.children.forEach((property) => {\n      if(property.schema._flags.presence !== 'forbidden') {\n        schema.properties[property.key] = convert(property.schema, transformer);\n        if (property.schema._flags.presence === 'required') {\n          schema.required = schema.required || [];\n          schema.required.push(property.key);\n        }\n      }\n    });\n\n    return schema;\n  }\n};\n\n/**\n * Converts the supplied joi validation object into a JSON schema object,\n * optionally applying a transformation.\n *\n * @param {JoiValidation} joi\n * @param {TransformFunction} [transformer=null]\n * @returns {JSONSchema}\n */\nexport default function convert(joi,transformer=null) {\n\n  assert('object'===typeof joi && true === joi.isJoi, 'requires a joi schema object');\n\n  assert(joi._type, 'joi schema object must have a type');\n\n  if(!TYPES[joi._type]){\n    throw new Error(`sorry, do not know how to convert unknown joi type: \"${joi._type}\"`);\n  }\n\n  if(transformer){\n    assert('function'===typeof transformer, 'transformer must be a function');\n  }\n\n  // JSON Schema root for this type.\n  let schema = {};\n\n  // Copy over the details that all schemas may have...\n  if (joi._description) {\n    schema.description = joi._description;\n  }\n\n  if (joi._examples && joi._examples.length > 0) {\n    schema.examples = joi._examples;\n  } \n  \n  if (joi._examples && joi._examples.length === 1) {\n    schema.example = joi._examples[0];\n  }\n\n  // Add the label as a title if it exists\n  if (joi._settings && joi._settings.language && joi._settings.language.label) {\n    schema.title = joi._settings.language.label;\n  } else if (joi._flags && joi._flags.label) {\n    schema.title = joi._flags.label;\n  }\n\n  // Checking for undefined and null explicitly to allow false and 0 values\n  if (joi._flags && joi._flags.default !== undefined && joi._flags.default !== null) {\n    schema['default'] = joi._flags.default;\n  }\n\n  if (joi._valids && joi._valids._set && (joi._valids._set.size || joi._valids._set.length)) {\n    if(Array.isArray(joi._inner.children) || !joi._flags.allowOnly) {\n      return {\n        'anyOf': [\n          {\n            'type': joi._type,\n            'enum': [...joi._valids._set]\n          },\n          TYPES[joi._type](schema, joi, transformer)\n        ]\n      };\n    }\n    schema['enum']=[...joi._valids._set];\n  }\n\n  let result = TYPES[joi._type](schema, joi, transformer);\n\n  if(transformer){\n    result = transformer(result, joi);\n  }\n\n  return result;\n}\n\nmodule.exports = exports = convert;\nconvert.TYPES = TYPES;\n\n/**\n * Joi Validation Object\n * @typedef {object} JoiValidation\n */\n\n/**\n * Transformation Function - applied just before `convert()` returns and called as `function(object):object`\n * @typedef {function} TransformFunction\n */\n\n/**\n * JSON Schema Object\n * @typedef {object} JSONSchema\n */\n"]}