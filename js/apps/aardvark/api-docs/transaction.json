{
    "basePath": "/",
    "swaggerVersion": "1.1",
    "apiVersion": "0.1",
    "apis": [
        {
            "operations": [
                {
                    "errorResponses": [
                        {
                            "reason": "If the transaction is fully executed and committed on the server,  <em>HTTP 200</em> will be returned. ",
                            "code": "200"
                        },
                        {
                            "reason": "If the transaction specification is either missing or malformed, the server will respond with <em>HTTP 400</em>. ",
                            "code": "400"
                        },
                        {
                            "reason": "Exceptions thrown by users will make the server respond with a return code of  <em>HTTP 500</em>  ",
                            "code": "500"
                        }
                    ],
                    "parameters": [
                        {
                            "dataType": "String",
                            "paramType": "body",
                            "required": "true",
                            "name": "body",
                            "description": "Contains the <em>collections</em> and <em>action</em>. "
                        }
                    ],
                    "notes": "<br><br>The transaction description must be passed in the body of the POST request. <br><br>The following attributes must be specified inside the JSON object: <br><br>- <em>collections</em>: contains the list of collections to be used in the  transaction (mandatory). <em>collections</em> must be a JSON array that can   have the optional sub-attributes <em>read</em> and <em>write</em>. <em>read</em>   and <em>write</em> must each be either lists of collections names or strings   with a single collection name.  <br><br>- <em>action</em>: the actual transaction operations to be executed, in the  form of stringified Javascript code. The code will be executed on server   side, with late binding. It is thus critical that the code specified in   <em>action</em> properly sets up all the variables it needs.    If the code specified in <em>action</em> ends with a return statement, the   value returned will also be returned by the REST API in the <em>result</em>   attribute if the transaction committed successfully. <br><br>The following optional attributes may also be specified in the request: <br><br>- <em>waitForSync</em>: an optional boolean flag that, if set, will force the   transaction to write all data to disk before returning. <br><br>- <em>lockTimeout</em>: an optional numeric value that can be used to set a  timeout for waiting on collection locks. If not specified, a default    value will be used. Setting <em>lockTimeout</em> to <em>0</em> will make ArangoDB    not time out waiting for a lock. <br><br>- <em>replicate</em>: whether or not to replicate the operations from this  transaction. If not specified, the default value is <em>true</em>. <br><br>- <em>params</em>: optional arguments passed to <em>action</em>.<br><br>If the transaction is fully executed and committed on the server,  <em>HTTP 200</em> will be returned. Additionally, the return value of the  code defined in <em>action</em> will be returned in the <em>result</em> attribute. <br><br>For successfully committed transactions, the returned JSON object has the  following properties: <br><br>- <em>error</em>: boolean flag to indicate if an error occurred (<em>false</em>  in this case) <br><br>- <em>code</em>: the HTTP status code<br><br>- <em>result</em>: the return value of the transaction<br><br>If the transaction specification is either missing or malformed, the server will respond with <em>HTTP 400</em>. <br><br>The body of the response will then contain a JSON object with additional error details. The object has the following attributes: <br><br>- <em>error</em>: boolean flag to indicate that an error occurred (<em>true</em> in this case)<br><br>- <em>code</em>: the HTTP status code<br><br>- <em>errorNum</em>: the server error number<br><br>- <em>errorMessage</em>: a descriptive error message<br><br>If a transaction fails to commit, either by an exception thrown in the  <em>action</em> code, or by an internal error, the server will respond with  an error.  Any other errors will be returned with any of the return codes <em>HTTP 400</em>, <em>HTTP 409</em>, or <em>HTTP 500</em>. <br><br>",
                    "summary": "executes a transaction",
                    "httpMethod": "POST",
                    "examples": "Executing a transaction on a single collection: <br><br><pre><code class=\"json\" >unix> curl -X POST --data @- --dump - http://localhost:8529/_api/transaction\n{\"collections\":{\"write\":\"products\"},\"action\":\"function () { var db = require('internal').db; db.products.save({}); return db.products.count(); }\"}\n\nHTTP/1.1 200 OK\ncontent-type: application/json; charset=utf-8\n\n{ \n  \"result\" : 1, \n  \"error\" : false, \n  \"code\" : 200 \n}\n\n</code></pre><br>Executing a transaction using multiple collections: <br><br><pre><code class=\"json\" >unix> curl -X POST --data @- --dump - http://localhost:8529/_api/transaction\n{\"collections\":{\"write\":[\"products\",\"materials\"]},\"action\":\"function () { var db = require('internal').db; db.products.save({}); db.materials.save({}); return 'worked!'; }\"}\n\nHTTP/1.1 200 OK\ncontent-type: application/json; charset=utf-8\n\n{ \n  \"result\" : \"worked!\", \n  \"error\" : false, \n  \"code\" : 200 \n}\n\n</code></pre><br>Aborting a transaction due to an internal error: <br><br><pre><code class=\"json\" >unix> curl -X POST --data @- --dump - http://localhost:8529/_api/transaction\n{\"collections\":{\"write\":\"products\"},\"action\":\"function () { var db = require('internal').db; db.products.save({ _key: 'abc'}); db.products.save({ _key: 'abc'}); }\"}\n\nHTTP/1.1 400 Bad Request\ncontent-type: application/json; charset=utf-8\n\n{ \n  \"error\" : true, \n  \"code\" : 400, \n  \"errorNum\" : 1210, \n  \"errorMessage\" : \"cannot save document: unique constraint violated\" \n}\n\n</code></pre><br>Aborting a transaction by explicitly throwing an exception: <br><br><pre><code class=\"json\" >unix> curl -X POST --data @- --dump - http://localhost:8529/_api/transaction\n{\"collections\":{\"read\":\"products\"},\"action\":\"function () { throw 'doh!'; }\"}\n\nHTTP/1.1 500 Internal Error\ncontent-type: application/json; charset=utf-8\n\n{ \n  \"error\" : true, \n  \"code\" : 500, \n  \"errorNum\" : 500, \n  \"errorMessage\" : \"doh!\" \n}\n\n</code></pre><br>Referring to a non-existing collection: <br><br><pre><code class=\"json\" >unix> curl -X POST --data @- --dump - http://localhost:8529/_api/transaction\n{\"collections\":{\"read\":\"products\"},\"action\":\"function () { return true; }\"}\n\nHTTP/1.1 404 Not Found\ncontent-type: application/json; charset=utf-8\n\n{ \n  \"error\" : true, \n  \"code\" : 404, \n  \"errorNum\" : 1203, \n  \"errorMessage\" : \"collection not found\" \n}\n\n</code></pre><br>",
                    "nickname": "executesATransaction"
                }
            ],
            "path": "/_api/transaction"
        }
    ]
}
