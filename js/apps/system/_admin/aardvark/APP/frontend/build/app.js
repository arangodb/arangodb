/*global $, d3, _, console, alert*/
/*global AbstractAdapter*/
////////////////////////////////////////////////////////////////////////////////
/// @brief Graph functionality
///
/// @file
///
/// DISCLAIMER
///
/// Copyright 2010-2012 triagens GmbH, Cologne, Germany
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///
///     http://www.apache.org/licenses/LICENSE-2.0
///
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// Copyright holder is triAGENS GmbH, Cologne, Germany
///
/// @author Michael Hackstein
/// @author Copyright 2011-2013, triAGENS GmbH, Cologne, Germany
////////////////////////////////////////////////////////////////////////////////

function JSONAdapter(jsonPath, nodes, edges, viewer, width, height) {
  "use strict";

  var self = this,
  initialX = {},
  initialY = {},
  absAdapter = new AbstractAdapter(nodes, edges, this, viewer),
  findNode = function(n) {
    var res = $.grep(nodes, function(e){
      return e._id === n._id;
    });
    if (res.length === 0) {
      return false;
    }
    if (res.length === 1) {
      return res[0];
    }
    throw "Too many nodes with the same ID, should never happen";
  },
  insertNode = function(data) {
    var node = {
      _data: data,
      _id: data._id,
      children: data.children
    };
    delete data.children;
    initialY.getStart();
    node.x = initialX.getStart();
    node.y = initialY.getStart();
    nodes.push(node);
    node._outboundCounter = 0;
    node._inboundCounter = 0;
    return node;
  },

  insertEdge = function(source, target) {
    edges.push({source: source, target: target});
    source._outboundCounter++;
    target._inboundCounter++;
  };

  initialX.range = width / 2;
  initialX.start = width / 4;
  initialX.getStart = function () {
    return this.start + Math.random() * this.range;
  };

  initialY.range = height / 2;
  initialY.start = height / 4;
  initialY.getStart = function () {
    return this.start + Math.random() * this.range;
  };

  self.loadNode = function(nodeId, callback) {
    self.loadNodeFromTreeById(nodeId, callback);
  };

  self.loadInitialNode = function(nodeId, callback) {
    var json = jsonPath + nodeId + ".json";
    absAdapter.cleanUp();
    d3.json(json, function(error, node) {
      if (error !== undefined && error !== null) {
        console.log(error);
      }
      var n = absAdapter.insertInitialNode(node);
      self.requestCentralityChildren(nodeId, function(c) {
        n._centrality = c;
      });
      _.each(node.children, function(c) {
        var t = absAdapter.insertNode(c),
          e = {
            _from: n._id,
            _to: t._id,
            _id: n._id + "-" + t._id
          };
        absAdapter.insertEdge(e);
        self.requestCentralityChildren(t._id, function(c) {
          t._centrality = c;
        });
        delete t._data.children;
      });
      delete n._data.children;
      if (callback) {
        callback(n);
      }
    });
  };

  self.loadNodeFromTreeById = function(nodeId, callback) {
    var json = jsonPath + nodeId + ".json";
    d3.json(json, function(error, node) {
      if (error !== undefined && error !== null) {
        console.log(error);
      }
      var n = absAdapter.insertNode(node);
      self.requestCentralityChildren(nodeId, function(c) {
        n._centrality = c;
      });
      _.each(node.children, function(c) {
        var check = absAdapter.insertNode(c),
        e = {
          _from: n._id,
          _to: check._id,
          _id: n._id + "-" + check._id
        };
        absAdapter.insertEdge(e);
        self.requestCentralityChildren(check._id, function(c) {
          n._centrality = c;
        });
        delete check._data.children;
      });
      delete n._data.children;
      if (callback) {
        callback(n);
      }
    });
  };

  self.requestCentralityChildren = function(nodeId, callback) {
    var json = jsonPath + nodeId + ".json";
    d3.json(json, function(error, node) {
      if (error !== undefined && error !== null) {
        console.log(error);
      }
      if (callback !== undefined) {
        if (node.children !== undefined) {
          callback(node.children.length);
        } else {
          callback(0);
        }
      }
    });
  };

  self.loadNodeFromTreeByAttributeValue = function(attribute, value, callback) {
    throw "Sorry this adapter is read-only";
  };

  self.loadInitialNodeByAttributeValue = function(attribute, value, callback) {
    throw "Sorry this adapter is read-only";
  };

  self.createEdge = function(edgeToCreate, callback){
      throw "Sorry this adapter is read-only";
  };

  self.deleteEdge = function(edgeToDelete, callback){
      throw "Sorry this adapter is read-only";
  };

  self.patchEdge = function(edgeToPatch, patchData, callback){
      throw "Sorry this adapter is read-only";
  };

  self.createNode = function(nodeToCreate, callback){
      throw "Sorry this adapter is read-only";
  };

  self.deleteNode = function(nodeToDelete, callback){
      throw "Sorry this adapter is read-only";
  };

  self.patchNode = function(nodeToPatch, patchData, callback){
      throw "Sorry this adapter is read-only";
  };

  self.setNodeLimit = function (limit, callback) {

  };

  self.setChildLimit = function (limit) {

  };

  self.expandCommunity = function (commNode, callback) {

  };

  self.setWidth = function() {
  };

  self.explore = absAdapter.explore;

}

/*global $, _ */
/*global console */
/*global NodeReducer, ModularityJoiner, WebWorkerWrapper, CommunityNode*/
////////////////////////////////////////////////////////////////////////////////
/// @brief Graph functionality
///
/// @file
///
/// DISCLAIMER
///
/// Copyright 2010-2012 triagens GmbH, Cologne, Germany
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///
///     http://www.apache.org/licenses/LICENSE-2.0
///
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// Copyright holder is triAGENS GmbH, Cologne, Germany
///
/// @author Michael Hackstein
/// @author Copyright 2011-2013, triAGENS GmbH, Cologne, Germany
////////////////////////////////////////////////////////////////////////////////


function AbstractAdapter(nodes, edges, descendant, viewer, config) {
  "use strict";

  if (nodes === undefined) {
    throw "The nodes have to be given.";
  }
  if (edges === undefined) {
    throw "The edges have to be given.";
  }
  if (descendant === undefined) {
    throw "An inheriting class has to be given.";
  }
  if (viewer === undefined) {
    throw "A reference to the graph viewer has to be given.";
  }
  config = config || {};


  var self = this,
    isRunning = false,
    initialX = {},
    initialY = {},
    cachedCommunities = {},
    joinedInCommunities = {},
    limit,
    reducer,
    joiner,
    childLimit,
    collapseCounter = 0,
    collapsePrevEdge = {},
    collapsePrevNode = {},

    changeTo = function (config) {
      if (config.prioList !== undefined) {
        reducer.changePrioList(config.prioList || []);
      }
    },

    setWidth = function(w) {
      initialX.range = w / 2;
      initialX.start = w / 4;
      initialX.getStart = function () {
        return this.start + Math.random() * this.range;
      };
    },

    setHeight = function(h) {
      initialY.range = h / 2;
      initialY.start = h / 4;
      initialY.getStart = function () {
        return this.start + Math.random() * this.range;
      };
    },

    findNode = function(id) {
      var intId = joinedInCommunities[id] || id,
        res = $.grep(nodes, function(e){
          return e._id === intId;
        });
      if (res.length === 0) {
        return false;
      }
      if (res.length === 1) {
        return res[0];
      }
      throw "Too many nodes with the same ID, should never happen";
    },

    findEdge = function(id) {
      var res = $.grep(edges, function(e){
        return e._id === id;
      });
      if (res.length === 0) {
        return false;
      }
      if (res.length === 1) {
        return res[0];
      }
      throw "Too many edges with the same ID, should never happen";
    },

    insertNode = function(data, x, y) {
      var node = {
        _data: data,
        _id: data._id
      },
        n = findNode(node._id);
      if (n) {
        return n;
      }
      node.x = x || initialX.getStart();
      node.y = y || initialY.getStart();
      node.weight = 1;
      nodes.push(node);
      node._outboundCounter = 0;
      node._inboundCounter = 0;
      return node;
    },

    insertInitialNode = function(data) {
      var n = insertNode(data);
      n.x = initialX.start * 2;
      n.y = initialY.start * 2;
      n.fixed = true;
      return n;
    },

    cleanUp = function() {
      nodes.length = 0;
      edges.length = 0;
      joinedInCommunities = {};
      cachedCommunities = {};
      viewer.cleanUp();
    },

    insertEdge = function(data) {
      var source,
        target,
        informJoiner = true,
        edge = {
          _data: data,
          _id: data._id
        },
        e = findEdge(edge._id),
        edgeToPush,
        com;
      if (e) {
        return e;
      }
      source = findNode(data._from);
      target = findNode(data._to);
      if (!source) {
        throw "Unable to insert Edge, source node not existing " + data._from;
      }
      if (!target) {
        throw "Unable to insert Edge, target node not existing " + data._to;
      }
      edge.source = source;
      if (edge.source._isCommunity) {
        com = cachedCommunities[edge.source._id];
        edge.source = com.getNode(data._from);
        edge.source._outboundCounter++;
        com.insertOutboundEdge(edge);
        informJoiner = false;
      } else {
        source._outboundCounter++;
      }
      edge.target = target;
      if (edge.target._isCommunity) {
        com = cachedCommunities[edge.target._id];
        edge.target = com.getNode(data._to);
        edge.target._inboundCounter++;
        com.insertInboundEdge(edge);
        informJoiner = false;
      } else {
        target._inboundCounter++;
      }
      edges.push(edge);
      if (informJoiner) {
        joiner.call("insertEdge", source._id, target._id);
      }


      /* Archive
      if (cachedCommunities[source._id] !== undefined) {
        edgeToPush = {};
        edgeToPush.type = "s";
        edgeToPush._id = edge._id;
        edgeToPush.source = $.grep(cachedCommunities[source._id].nodes, function(e){
          return e._id === data._from;
        })[0];
        edgeToPush.source._outboundCounter++;
        cachedCommunities[source._id].edges.push(edgeToPush);
        informJoiner = false;
      } else {
        source._outboundCounter++;
      }
      if (cachedCommunities[target._id] !== undefined) {
        edgeToPush = {};
        edgeToPush.type = "t";
        edgeToPush._id = edge._id;
        edgeToPush.target = $.grep(cachedCommunities[target._id].nodes, function(e){
          return e._id === data._to;
        })[0];
        edgeToPush.target._inboundCounter++;
        cachedCommunities[target._id].edges.push(edgeToPush);
        informJoiner = false;
      } else {
        target._inboundCounter++;
      }
      if (informJoiner) {
        joiner.call("insertEdge", source._id, target._id);
      }
      */
      return edge;
    },

    removeNode = function (node) {
      var i;
      for ( i = 0; i < nodes.length; i++ ) {
        if ( nodes[i] === node ) {
          nodes.splice( i, 1 );
          return;
        }
      }
    },

    removeEdgeWithIndex = function (index, notInformJoiner) {
      var e = edges[index],
        s = e.source._id,
        t = e.target._id;
      edges.splice(index, 1);
      if (!notInformJoiner) {
        joiner.call("deleteEdge",s , t);
      }
    },

    removeEdge = function (edge, notInformJoiner) {
      var i;
      for ( i = 0; i < edges.length; i++ ) {
        if ( edges[i] === edge ) {
          removeEdgeWithIndex(i, notInformJoiner);
          return;
        }
      }
    },

    removeEdgesForNode = function (node) {
      var i;
      for (i = 0; i < edges.length; i++ ) {
        if (edges[i].source === node) {
          node._outboundCounter--;
          edges[i].target._inboundCounter--;
          removeEdgeWithIndex(i);
          i--;
        } else if (edges[i].target === node) {
          node._inboundCounter--;
          edges[i].source._outboundCounter--;
          removeEdgeWithIndex(i);
          i--;
        }
      }
    },
    /* Archive
    combineCommunityEdges = function (nodes, commNode) {
      var i, j, s, t,
        cachedCommEdges = cachedCommunities[commNode._id].edges,
        edgeToPush;
      for (i = 0; i < edges.length; i++ ) {
        edgeToPush = {};
        // s and t keep old values yay!
        s = edges[i].source;
        t = edges[i].target;
        for (j = 0; j < nodes.length; j++) {
          if (s === nodes[j]) {
            if (edgeToPush.type !== undefined) {
              edges[i].target = edgeToPush.target;
              delete edgeToPush.target;
              edgeToPush.type = "b";
              edgeToPush.edge = edges[i];
              edges.splice(i, 1);
              i--;
              break;
            }
            edges[i].source = commNode;
            edgeToPush.type = "s";
            edgeToPush._id = edges[i]._id;
            edgeToPush.source = s;

            if (!/^\*community/.test(t._id)) {
              joiner.call("deleteEdge", s._id, t._id);
            }
          }
          if (t === nodes[j]) {
            if (edgeToPush.type !== undefined) {
              edges[i].source = edgeToPush.source;
              delete edgeToPush.source;
              edgeToPush.type = "b";
              edgeToPush.edge = edges[i];
              edges.splice(i, 1);
              i--;
              break;
            }
            edges[i].target = commNode;
            edgeToPush.type = "t";
            edgeToPush._id = edges[i]._id;
            edgeToPush.target = t;
            if (!/^\*community/.test(s._id)) {
              joiner.call("deleteEdge", s._id, t._id);
            }
          }
        }
        if (edgeToPush.type !== undefined) {
          cachedCommEdges.push(edgeToPush);
        }
      }
    },
    */
    combineCommunityEdges = function (nodes, commNode) {
      var i, j, s, t, shouldRemove;
      for (i = 0; i < edges.length; i++) {
        // s and t keep old values yay!
        s = edges[i].source;
        t = edges[i].target;
        for (j = 0; j < nodes.length; j++) {
          shouldRemove = false;
          if (s === nodes[j]) {
            shouldRemove = commNode.insertOutboundEdge(edges[i]);
            if (!t._isCommunity) {
              joiner.call("deleteEdge", s._id, t._id);
            }
            s = edges[i].source;
          }
          if (t === nodes[j]) {
            shouldRemove = commNode.insertInboundEdge(edges[i]);
            if (!s._isCommunity) {
              joiner.call("deleteEdge", s._id, t._id);
            }
            t = edges[i].target;
          }
          if (shouldRemove) {
            edges.splice(i, 1);
            i--;
          }
        }
      }
    },

    // Helper function to easily remove all outbound edges for one node
    removeOutboundEdgesFromNode = function ( node ) {
      if (node._outboundCounter > 0) {
        var removed = [],
        i;
        for ( i = 0; i < edges.length; i++ ) {
          if ( edges[i].source === node ) {
            removed.push(edges[i]);
            node._outboundCounter--;
            removeEdgeWithIndex(i, edges[i].target._isCommunity);
            if (node._outboundCounter === 0) {
              break;
            }
            i--;
          }
        }
        return removed;
      }
    },
    /* Archive
    collapseCommunity = function (community, reason) {
      if (!community || community.length === 0) {
        return;
      }
      var commId = "*community_" + Math.floor(Math.random()* 1000000),
        commNode = {
          _id: commId,
          edges: []
        },
        nodesToRemove = _.map(community, function(id) {
          return findNode(id);
        });
      commNode.x = nodesToRemove[0].x;
      commNode.y = nodesToRemove[0].y;
      commNode._size = community.length;
      if (reason) {
        commNode._reason = reason;
      }
      cachedCommunities[commId] = {};
      cachedCommunities[commId].nodes = nodesToRemove;
      cachedCommunities[commId].edges = [];

      combineCommunityEdges(nodesToRemove, commNode);
      _.each(nodesToRemove, function(n) {
        joinedInCommunities[n._id] = commId;
        removeNode(n);
      });
      nodes.push(commNode);
      isRunning = false;
    },
    */

    collapseCommunity = function (community, reason) {
      if (!community || community.length === 0) {
        return;
      }
      var
        nodesToRemove = _.map(community, function(id) {
          return findNode(id);
        }),
        commNode = new CommunityNode(self, nodesToRemove),
        commId = commNode._id;
      if (reason) {
        commNode._reason = reason;
      }
      cachedCommunities[commId] = commNode;

      combineCommunityEdges(nodesToRemove, commNode);
      _.each(nodesToRemove, function(n) {
        joinedInCommunities[n._id] = commId;
        removeNode(n);
      });
      nodes.push(commNode);
      isRunning = false;
    },

    joinerCb = function (d) {
      var data = d.data;
      if (data.error) {
        console.log(data.cmd);
        console.log(data.error);
        return;
      }
      switch (data.cmd) {
        case "debug":
          //console.log(data.result);
          break;
        case "getCommunity":
          collapseCommunity(data.result);
          break;
        default:
      }
    },

    requestCollapse = function (focus) {
      if (isRunning) {
        return;
      }
      isRunning = true;
      if (focus) {
        joiner.call("getCommunity", limit, focus._id);
      } else {
        joiner.call("getCommunity", limit);
      }
    },

    checkNodeLimit = function (focus) {
      var curRendered = nodes.length,
        commToColapse,
        bestComVal = -Infinity;
      _.each(cachedCommunities, function(c) {
        if (c._expanded === true) {
          if (bestComVal < c._size && c !== focus) {
            commToColapse = c;
            bestComVal = c._size;
          }
          curRendered += c._size;
        }
      });
      if (limit < curRendered) {
        if (commToColapse) {
          commToColapse.collapse();
        } else {
          requestCollapse(focus);
        }
      }
    },
    /* Archive
    expandCommunity = function (commNode) {
      var commId = commNode._id,
        nodesToAdd = cachedCommunities[commId].nodes,
        edgesToChange = cachedCommunities[commId].edges,
        com;
      removeNode(commNode);
      if (limit < nodes.length + nodesToAdd.length) {
        requestCollapse();
      }
      _.each(nodesToAdd, function(n) {
        delete joinedInCommunities[n._id];
        nodes.push(n);
      });
      _.each(edgesToChange, function(e) {
        var edge;
        switch(e.type) {
          case "t":
            edge = findEdge(e._id);
            edge.target = e.target;
            if (!/^\*community/.test(edge.source._id)) {
              joiner.call("insertEdge", edge.source._id, edge.target._id);
            }
            break;
          case "s":
            edge = findEdge(e._id);
            edge.source = e.source;
            if (!/^\*community/.test(edge.target._id)) {
              joiner.call("insertEdge", edge.source._id, edge.target._id);
            }
            break;
          case "b":
            edges.push(e.edge);
            joiner.call("insertEdge", e.edge.source._id, e.edge.target._id);
            break;
        }

      });
      delete cachedCommunities[commId];
    },
    */

    dissolveCommunity = function (commNode) {
      var dissolveInfo = commNode.getDissolveInfo(),
        nodesToAdd = dissolveInfo.nodes,
        internalEdges = dissolveInfo.edges.both,
        inboundEdges = dissolveInfo.edges.inbound,
        outboundEdges = dissolveInfo.edges.outbound;
      removeNode(commNode);
      if (limit < nodes.length + nodesToAdd.length) {
        requestCollapse();
      }
      _.each(nodesToAdd, function(n) {
        delete joinedInCommunities[n._id];
        nodes.push(n);
      });
      _.each(inboundEdges, function(edge) {
        edge.target = edge._target;
        delete edge._target;
        if (!edge.source._isCommunity) {
          joiner.call("insertEdge", edge.source._id, edge.target._id);
        }
      });
      _.each(outboundEdges, function(edge) {
        edge.source = edge._source;
        delete edge._source;
        if (!edge.target._isCommunity) {
          joiner.call("insertEdge", edge.source._id, edge.target._id);
        }
      });
      _.each(internalEdges, function(edge) {
        edge.source = edge._source;
        delete edge._source;
        edge.target = edge._target;
        delete edge._target;
        edges.push(edge);
        joiner.call("insertEdge", edge.source._id, edge.target._id);
      });
      delete cachedCommunities[commNode._id];
    },

    expandCommunity = function(commNode) {
      commNode.expand();
      checkNodeLimit(commNode);
    },

    checkSizeOfInserted = function (inserted) {
      if (_.size(inserted) > childLimit) {
        var buckets = reducer.bucketNodes(_.values(inserted), childLimit);
        _.each(buckets, function(b) {
          if (b.nodes.length > 1) {
            var ids = _.map(b.nodes, function(n) {
              return n._id;
            });
            collapseCommunity(ids, b.reason);
          }
        });
      }
    },

    setNodeLimit = function (pLimit, callback) {
      limit = pLimit;
      checkNodeLimit();
      if (callback !== undefined) {
        callback();
      }
    },

    setChildLimit = function (pLimit) {
      childLimit = pLimit;
    },

    handleRemovedEdge,

    collapseNodeInCommunity = function(node, commNode) {
      node._expanded = false;
      var removedEdges = commNode.removeOutboundEdgesFromNode(node);
      _.each(removedEdges, function(e) {
        handleRemovedEdge(e);
        removeEdge(e, true);
      });
    },

    collapseNode = function(node) {

      node._expanded = false;
      if (joinedInCommunities[node._id]) {
        cachedCommunities[joinedInCommunities[node._id]].collapseNode(node);
      }
      var removedEdges = removeOutboundEdgesFromNode(node);

      var checkEdges = [];
      _.each(removedEdges, function(edge) {
        if (collapseCounter === 0) {
          collapsePrevEdge = edge;
          collapsePrevNode = node;
          checkEdges.push(edge);
        }
        else {
          if (node !== undefined) {
            if (node._id === collapsePrevEdge.target._id) {
              if (edge.target._id === collapsePrevNode._id) {
                checkEdges.push(collapsePrevEdge);
              }
            }
            else {
              checkEdges.push(edge);
            }
            collapsePrevEdge = edge;
            collapsePrevNode = node;
          }
        }

        collapseCounter++;
      });


      _.each(checkEdges, handleRemovedEdge);
      collapseCounter = 0;
    },

    collapseExploreCommunity = function(commNode) {
      var disInfo = commNode.getDissolveInfo();
      removeNode(commNode);
      _.each(disInfo.nodes, function (n) {
        delete joinedInCommunities[n._id];
      });
      _.each(disInfo.edges.outbound, function(e) {
        handleRemovedEdge(e);
        removeEdge(e, true);
      });
      delete cachedCommunities[commNode._id];
    },

    expandNode = function(n, startCallback) {
      if (n._isCommunity) {
        self.expandCommunity(n, startCallback);
      } else {
        n._expanded = true;
        descendant.loadNode(n._id, startCallback);
      }
    },

    explore = function (node, startCallback) {
      if (!node._expanded) {
        expandNode(node, startCallback);
      } else {
        collapseNode(node);
      }

    };

  handleRemovedEdge = function (e) {
    var n = e.target, t;
    if (n._isCommunity) {
      t = e._target;
      n.removeInboundEdge(e);
      t._inboundCounter--;
      if (t._inboundCounter === 0) {
        collapseNodeInCommunity(t, n);
        n.removeNode(t);
        delete joinedInCommunities[t._id];
      }
      if (n._inboundCounter === 0) {
        collapseExploreCommunity(n);
      }
      return;
    }
    n._inboundCounter--;
    if (n._inboundCounter === 0) {
      collapseNode(n);
      removeNode(n);
    }
  };

  childLimit = Number.POSITIVE_INFINITY;

  if (config.prioList) {
    reducer = new NodeReducer(config.prioList);
  } else {
    reducer = new NodeReducer();
  }
  joiner = new WebWorkerWrapper(ModularityJoiner, joinerCb);

  initialX.getStart = function() {return 0;};
  initialY.getStart = function() {return 0;};

  this.cleanUp = cleanUp;

  this.setWidth = setWidth;
  this.setHeight = setHeight;
  this.insertNode = insertNode;
  this.insertInitialNode = insertInitialNode;
  this.insertEdge = insertEdge;

  this.removeNode = removeNode;
  this.removeEdge = removeEdge;
  this.removeEdgesForNode = removeEdgesForNode;

  this.expandCommunity = expandCommunity;

  this.setNodeLimit = setNodeLimit;
  this.setChildLimit = setChildLimit;

  this.checkSizeOfInserted = checkSizeOfInserted;
  this.checkNodeLimit = checkNodeLimit;

  this.explore = explore;

  this.changeTo = changeTo;

  this.getPrioList = reducer.getPrioList;

  this.dissolveCommunity = dissolveCommunity;
}

/*global $, d3, _, console, document*/
/*global AbstractAdapter*/
////////////////////////////////////////////////////////////////////////////////
/// @brief Graph functionality
///
/// @file
///
/// DISCLAIMER
///
/// Copyright 2010-2012 triagens GmbH, Cologne, Germany
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///
///     http://www.apache.org/licenses/LICENSE-2.0
///
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// Copyright holder is triAGENS GmbH, Cologne, Germany
///
/// @author Michael Hackstein
/// @author Copyright 2011-2013, triAGENS GmbH, Cologne, Germany
////////////////////////////////////////////////////////////////////////////////

function ArangoAdapter(nodes, edges, viewer, config) {

  "use strict";

  if (nodes === undefined) {
    throw "The nodes have to be given.";
  }
  if (edges === undefined) {
    throw "The edges have to be given.";
  }
  if (viewer === undefined) {
    throw "A reference to the graph viewer has to be given.";
  }
  if (config === undefined) {
    throw "A configuration with node- and edgeCollection has to be given.";
  }
  if (config.graph === undefined) {
    if (config.nodeCollection === undefined) {
      throw "The nodeCollection or a graphname has to be given.";
    }
    if (config.edgeCollection === undefined) {
      throw "The edgeCollection or a graphname has to be given.";
    }
  }

  var self = this,
    absAdapter,
    absConfig = {},
    api = {},
    queries = {},
    nodeCollection,
    edgeCollection,
    graphName,
    direction,

    setGraphName = function(name) {
      graphName = name;
    },

    setNodeCollection = function(name) {
      nodeCollection = name;
      api.node = api.base + "document?collection=" + nodeCollection;
    },

    setEdgeCollection = function(name) {
      edgeCollection = name;
      api.edge = api.base + "edge?collection=" + edgeCollection;
    },

    getCollectionsFromGraph = function(name) {
      $.ajax({
        cache: false,
        type: 'GET',
        async: false,
        url: api.graph + "/" + name,
        contentType: "application/json",
        success: function(data) {
          setNodeCollection(data.graph.vertices);
          setEdgeCollection(data.graph.edges);
        }
      });
    },

    parseConfig = function(config) {
      var arangodb = config.baseUrl || "";
      if (config.width !== undefined) {
        absAdapter.setWidth(config.width);
      }
      if (config.height !== undefined) {
        absAdapter.setHeight(config.height);
      }
      if (config.undirected !== undefined) {
        if (config.undirected === true) {
          direction = "any";
        } else {
          direction = "outbound";
        }
      } else {
        direction = "outbound";
      }
      api.base = arangodb + "_api/";
      api.cursor = api.base + "cursor";
      api.graph = api.base + "graph";
      api.collection = api.base + "collection/";
      api.document = api.base + "document/";
      api.any = api.base + "simple/any";
      if (config.graph) {
        getCollectionsFromGraph(config.graph);
        setGraphName(config.graph);
      } else {
        setNodeCollection(config.nodeCollection);
        setEdgeCollection(config.edgeCollection);
        setGraphName(undefined);
      }
    },

    sendQuery = function(query, bindVars, onSuccess) {
      if (query !== queries.getAllGraphs) {
        if (query !== queries.connectedEdges) {
          bindVars["@nodes"] = nodeCollection;
          if (query !== queries.childrenCentrality) {
            bindVars.dir = direction;
          }
        }
        bindVars["@edges"] = edgeCollection;
      }
      var data = {
        query: query,
        bindVars: bindVars
      };
      $.ajax({
        type: "POST",
        url: api.cursor,
        data: JSON.stringify(data),
        contentType: "application/json",
        dataType: "json",
        processData: false,
        success: function(data) {
          onSuccess(data.result);
        },
        error: function(data) {
          try {
            console.log(data.statusText);
            throw "[" + data.errorNum + "] " + data.errorMessage;
          }
          catch (e) {
            throw "Undefined ERROR";
          }
        }
      });
    },

    getNRandom = function(n, callback) {
      var list = [],
        i = 0,
        onSuccess = function(data) {
          list.push(data.document || {});
          if (list.length === n) {
            callback(list);
          }
        };
      for (i = 0; i < n; i++) {
        $.ajax({
          cache: false,
          type: 'PUT',
          url: api.any,
          data: JSON.stringify({
            collection: nodeCollection
          }),
          contentType: "application/json",
          success: onSuccess
        });
      }
    },

    parseResultOfTraversal = function (result, callback) {
      if (result.length === 0) {
        if (callback) {
          callback({
            errorCode: 404
          });
        }
        return;
      }
      result = result[0];
      var inserted = {},
        n = absAdapter.insertNode(result[0].vertex),
        oldLength = nodes.length,
        com, buckets;

      _.each(result, function(visited) {
        var node = absAdapter.insertNode(visited.vertex),
          path = visited.path;
        if (oldLength < nodes.length) {
          inserted[node._id] = node;
          oldLength = nodes.length;
        }
        _.each(path.vertices, function(connectedNode) {
          var ins = absAdapter.insertNode(connectedNode);
          if (oldLength < nodes.length) {
            inserted[ins._id] = ins;
            oldLength = nodes.length;
          }
        });
        _.each(path.edges, function(edge) {
          absAdapter.insertEdge(edge);
        });
      });
      delete inserted[n._id];
      absAdapter.checkSizeOfInserted(inserted);
      absAdapter.checkNodeLimit(n);
      if (callback) {
        callback(n);
      }
    },
    /* Archive
    parseResultOfQuery = function (result, callback) {
      _.each(result, function (node) {
        var n = findNode(node._id);
        if (!n) {
          absAdapter.insertNode(node);
          n = node;
        } else {
          n.children = node.children;
        }
        self.requestCentralityChildren(node._id, function(c) {
          n._centrality = c;
        });
        _.each(n.children, function(id) {
          var check = findNode(id),
          newnode;
          if (check) {
            absAdapter.insertEdge(n, check);
            self.requestCentralityChildren(id, function(c) {
              n._centrality = c;
            });
          } else {
            newnode = {_id: id};
            absAdapter.insertNode(newnode);
            absAdapter.insertEdge(n, newnode);
            self.requestCentralityChildren(id, function(c) {
              newnode._centrality = c;
            });
          }
        });
        if (callback) {
          callback(n);
        }
      });
    },
    */


    insertInitialCallback = function(callback) {
      return function (n) {
        if (n && n.errorCode) {
          callback(n);
          return;
        }
        callback(absAdapter.insertInitialNode(n));
      };
    },


    permanentlyRemoveEdgesOfNode = function (nodeId) {
       sendQuery(queries.connectedEdges, {
         id: nodeId
       }, function(res) {
         _.each(res, self.deleteEdge);
       });
    };


  if (config.prioList) {
    absConfig.prioList = config.prioList;
  }
  absAdapter = new AbstractAdapter(nodes, edges, this, viewer, absConfig);

  parseConfig(config);

  queries.getAllGraphs = "FOR g IN _graphs"
    + " return g._key";
  queries.randomDocuments = "FOR u IN @@nodes"
    + " sort rand()"
    + " limit 10"
    + " return u";
  queries.nodeById = "FOR n IN @@nodes"
    + " FILTER n._id == @id"
    + " LET links = ("
    + "  FOR l IN @@edges"
    + "  FILTER n._id == l._from"
    + "   FOR t IN @@nodes"
    + "   FILTER t._id == l._to"
    + "   RETURN t._id"
    + " )"
    + " RETURN MERGE(n, {\"children\" : links})";
  queries.traversalById = "RETURN TRAVERSAL("
    + "@@nodes, "
    + "@@edges, "
    + "@id, "
    + "@dir, {"
    + "strategy: \"depthfirst\","
    + "maxDepth: 1,"
    + "paths: true"
    + "})";
  queries.traversalByAttribute = function(attr) {
    return "FOR n IN @@nodes"
      + " FILTER n." + attr
      + " == @value"
      + " RETURN TRAVERSAL("
      + "@@nodes, "
      + "@@edges, "
      + "n._id, "
      + "@dir, {"
      + "strategy: \"depthfirst\","
      + "maxDepth: 1,"
      + "paths: true"
      + "})";
  };
  queries.childrenCentrality = "FOR u IN @@nodes"
    + " FILTER u._id == @id"
    + " LET g = ("
    + " FOR l in @@edges"
    + " FILTER l._from == u._id"
    + " RETURN 1 )"
    + " RETURN length(g)";
  queries.connectedEdges = "FOR e IN @@edges"
   + " FILTER e._to == @id"
   + " || e._from == @id"
   + " RETURN e";
   /* Archive
  self.oldLoadNodeFromTreeById = function(nodeId, callback) {
    sendQuery(queries.nodeById, {
      id: nodeId
    }, function(res) {
      parseResultOfQuery(res, callback);
    });
  };
  */

  self.explore = absAdapter.explore;

  self.loadNode = function(nodeId, callback) {
    self.loadNodeFromTreeById(nodeId, callback);
  };

  self.loadRandomNode = function(callback) {
    var self = this;
    getNRandom(1, function(list) {
      var r = list[0];
      if (r._id) {
        self.loadInitialNode(r._id, callback);
        return;
      }
      return;
    });
  };

  self.loadInitialNode = function(nodeId, callback) {
    absAdapter.cleanUp();
    self.loadNode(nodeId, insertInitialCallback(callback));
  };

  self.loadNodeFromTreeById = function(nodeId, callback) {
    sendQuery(queries.traversalById, {
      id: nodeId
    }, function(res) {
      parseResultOfTraversal(res, callback);
    });
  };

  self.loadNodeFromTreeByAttributeValue = function(attribute, value, callback) {
    sendQuery(queries.traversalByAttribute(attribute), {
      value: value
    }, function(res) {
      parseResultOfTraversal(res, callback);
    });
  };

  self.loadInitialNodeByAttributeValue = function(attribute, value, callback) {
    absAdapter.cleanUp();
    self.loadNodeFromTreeByAttributeValue(attribute, value, insertInitialCallback(callback));
  };

  self.requestCentralityChildren = function(nodeId, callback) {
    sendQuery(queries.childrenCentrality,{
      id: nodeId
    }, function(res) {
      callback(res[0]);
    });
  };

  self.createEdge = function (edgeToAdd, callback) {
    $.ajax({
      cache: false,
      type: "POST",
      url: api.edge + "&from=" + edgeToAdd.source._id + "&to=" + edgeToAdd.target._id,
      data: JSON.stringify({}),
      dataType: "json",
      contentType: "application/json",
      processData: false,
      success: function(data) {
        data._from = edgeToAdd.source._id;
        data._to = edgeToAdd.target._id;
        delete data.error;
        var edge = absAdapter.insertEdge(data);
        callback(edge);
      },
      error: function(data) {
        throw data.statusText;
      }
    });
  };

  self.deleteEdge = function (edgeToRemove, callback) {
    $.ajax({
      cache: false,
      type: "DELETE",
      url: api.document + edgeToRemove._id,
      contentType: "application/json",
      dataType: "json",
      processData: false,
      success: function() {
        absAdapter.removeEdge(edgeToRemove);
        if (callback !== undefined && _.isFunction(callback)) {
          callback();
        }
      },
      error: function(data) {
        throw data.statusText;
      }
    });

  };

  self.patchEdge = function (edgeToPatch, patchData, callback) {
    $.ajax({
      cache: false,
      type: "PUT",
      url: api.document + edgeToPatch._id,
      data: JSON.stringify(patchData),
      dataType: "json",
      contentType: "application/json",
      processData: false,
      success: function(data) {
        edgeToPatch._data = $.extend(edgeToPatch._data, patchData);
        callback();
      },
      error: function(data) {
        throw data.statusText;
      }
    });
  };

  self.createNode = function (nodeToAdd, callback) {
    $.ajax({
      cache: false,
      type: "POST",
      url: api.node,
      data: JSON.stringify(nodeToAdd),
      dataType: "json",
      contentType: "application/json",
      processData: false,
      success: function(data) {
        if (data.error === false) {
          nodeToAdd._key = data._key;
          nodeToAdd._id = data._id;
          nodeToAdd._rev = data._rev;
          absAdapter.insertNode(nodeToAdd);
          callback(nodeToAdd);
        }
      },
      error: function(data) {
        throw data.statusText;
      }
    });
  };

  self.deleteNode = function (nodeToRemove, callback) {
    $.ajax({
      cache: false,
      type: "DELETE",
      url: api.document + nodeToRemove._id,
      dataType: "json",
      contentType: "application/json",
      processData: false,
      success: function() {
        absAdapter.removeEdgesForNode(nodeToRemove);
        permanentlyRemoveEdgesOfNode(nodeToRemove._id);
        absAdapter.removeNode(nodeToRemove);
        if (callback !== undefined && _.isFunction(callback)) {
          callback();
        }
      },
      error: function(data) {
        throw data.statusText;
      }
    });
  };

  self.patchNode = function (nodeToPatch, patchData, callback) {
    $.ajax({
      cache: false,
      type: "PUT",
      url: api.document + nodeToPatch._id,
      data: JSON.stringify(patchData),
      dataType: "json",
      contentType: "application/json",
      processData: false,
      success: function(data) {
        nodeToPatch._data = $.extend(nodeToPatch._data, patchData);
        callback(nodeToPatch);
      },
      error: function(data) {
        throw data.statusText;
      }
    });
  };

  self.changeToCollections = function (nodesCol, edgesCol, dir) {
    absAdapter.cleanUp();
    setNodeCollection(nodesCol);
    setEdgeCollection(edgesCol);
    if (dir !== undefined) {
      if (dir === true) {
        direction = "any";
      } else {
        direction = "outbound";
      }
    }

    setGraphName(undefined);
  };

  self.changeToGraph = function (name, dir) {
    absAdapter.cleanUp();
    getCollectionsFromGraph(name);
    if (dir !== undefined) {
      if (dir === true) {
        direction = "any";
      } else {
        direction = "outbound";
      }
    }
    setGraphName(name);
  };

  self.setNodeLimit = function (pLimit, callback) {
    absAdapter.setNodeLimit(pLimit, callback);
  };

  self.setChildLimit = function (pLimit) {
    absAdapter.setChildLimit(pLimit);
  };

  self.expandCommunity = function (commNode, callback) {
    absAdapter.expandCommunity(commNode);
    if (callback !== undefined) {
      callback();
    }
  };

  self.getCollections = function(callback) {
    if (callback && callback.length >= 2) {
      $.ajax({
        cache: false,
        type: "GET",
        url: api.collection,
        contentType: "application/json",
        dataType: "json",
        processData: false,
        success: function(data) {
          var cols = data.collections,
            docs = [],
            edgeCols = [];
          _.each(cols, function(c) {
            if (!c.name.match(/^_/)) {
              if (c.type === 3) {
                edgeCols.push(c.name);
              } else if (c.type === 2){
                docs.push(c.name);
              }
            }
          });
          callback(docs, edgeCols);
        },
        error: function(data) {
          throw data.statusText;
        }
      });
    }
  };

  self.getGraphs = function(callback) {
    if (callback && callback.length >= 1) {
      sendQuery(
        queries.getAllGraphs,
        {},
        callback
      );
    }
  };

  self.getAttributeExamples = function(callback) {
    if (callback && callback.length >= 1) {
      getNRandom(10, function(l) {
        var ret = _.sortBy(
          _.uniq(
            _.flatten(
              _.map(l, function(o) {
                return _.keys(o);
              })
            )
          ), function(e) {
            return e.toLowerCase();
          }
        );
        callback(ret);
      });
    }
  };

  self.getNodeCollection = function () {
    return nodeCollection;
  };

  self.getEdgeCollection = function () {
    return edgeCollection;
  };

  self.getDirection = function () {
    return direction;
  };

  self.getGraphName = function () {
    return graphName;
  };

  self.setWidth = absAdapter.setWidth;
  self.changeTo = absAdapter.changeTo;
  self.getPrioList = absAdapter.getPrioList;
}

/*global _, $, d3*/
////////////////////////////////////////////////////////////////////////////////
/// @brief Graph functionality
///
/// @file
///
/// DISCLAIMER
///
/// Copyright 2010-2012 triagens GmbH, Cologne, Germany
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///
///     http://www.apache.org/licenses/LICENSE-2.0
///
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// Copyright holder is triAGENS GmbH, Cologne, Germany
///
/// @author Michael Hackstein
/// @author Copyright 2011-2013, triAGENS GmbH, Cologne, Germany
////////////////////////////////////////////////////////////////////////////////

function ColourMapper() {
  "use strict";

  var mapping = {},
    reverseMapping = {},
    colours = [],
    listener,
    self = this,
    nextColour = 0;

  colours.push({back: "#C8E6C9", front: "black"});
  colours.push({back: "#8aa249", front: "white"});
  colours.push({back: "#8BC34A", front: "black"});
  colours.push({back: "#388E3C", front: "white"});
  colours.push({back: "#4CAF50", front: "white"});
  colours.push({back: "#212121", front: "white"});
  colours.push({back: "#727272", front: "white"});
  colours.push({back: "#B6B6B6", front: "black"});
  colours.push({back: "#e5f0a3", front: "black"});
  colours.push({back: "#6c4313", front: "white"});
  colours.push({back: "#9d8564", front: "white"});

  /*
  colours.push({back: "navy", front: "white"});
  colours.push({back: "green", front: "white"});
  colours.push({back: "gold", front: "black"});
  colours.push({back: "red", front: "black"});
  colours.push({back: "saddlebrown", front: "white"});
  colours.push({back: "skyblue", front: "black"});
  colours.push({back: "olive", front: "black"});
  colours.push({back: "deeppink", front: "black"});
  colours.push({back: "orange", front: "black"});
  colours.push({back: "silver", front: "black"});
  colours.push({back: "blue", front: "white"});
  colours.push({back: "yellowgreen", front: "black"});
  colours.push({back: "firebrick", front: "black"});
  colours.push({back: "rosybrown", front: "black"});
  colours.push({back: "hotpink", front: "black"});
  colours.push({back: "purple", front: "white"});
  colours.push({back: "cyan", front: "black"});
  colours.push({back: "teal", front: "black"});
  colours.push({back: "peru", front: "black"});
  colours.push({back: "maroon", front: "white"});
  */

  this.getColour = function(value) {
    if (mapping[value] === undefined) {
      mapping[value] = colours[nextColour];
      if (reverseMapping[colours[nextColour].back] === undefined) {
        reverseMapping[colours[nextColour].back] = {
          front: colours[nextColour].front,
          list: []
        };
      }
      reverseMapping[colours[nextColour].back].list.push(value);
      nextColour++;
      if (nextColour === colours.length) {
        nextColour = 0;
      }
    }
    if (listener !== undefined) {
      listener(self.getList());
    }
    return mapping[value].back;
  };

  this.getCommunityColour = function() {
    return "#333333";
  };

  this.getForegroundColour = function(value) {
    if (mapping[value] === undefined) {
      mapping[value] = colours[nextColour];
      if (reverseMapping[colours[nextColour].back] === undefined) {
        reverseMapping[colours[nextColour].back] = {
          front: colours[nextColour].front,
          list: []
        };
      }
      reverseMapping[colours[nextColour].back].list.push(value);
      nextColour++;
      if (nextColour === colours.length) {
        nextColour = 0;
      }
    }
    if (listener !== undefined) {
      listener(self.getList());
    }
    return mapping[value].front;
  };

  this.getForegroundCommunityColour = function() {
    return "white";
  };



  this.reset = function() {
    mapping = {};
    reverseMapping = {};
    nextColour = 0;
    if (listener !== undefined) {
      listener(self.getList());
    }
  };

  this.getList = function() {
    return reverseMapping;
  };

  this.setChangeListener = function(callback) {
    listener = callback;
  };

  this.reset();
}

/*global _, document, ForceLayouter, DomObserverFactory*/
////////////////////////////////////////////////////////////////////////////////
/// @brief Graph functionality
///
/// @file
///
/// DISCLAIMER
///
/// Copyright 2010-2012 triagens GmbH, Cologne, Germany
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///
///     http://www.apache.org/licenses/LICENSE-2.0
///
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// Copyright holder is triAGENS GmbH, Cologne, Germany
///
/// @author Michael Hackstein
/// @author Copyright 2011-2013, triAGENS GmbH, Cologne, Germany
////////////////////////////////////////////////////////////////////////////////



function CommunityNode(parent, initial) {
  "use strict";

  if (_.isUndefined(parent)
    || !_.isFunction(parent.dissolveCommunity)
    || !_.isFunction(parent.checkNodeLimit)) {
    throw "A parent element has to be given.";
  }

  initial = initial || [];

  var

  ////////////////////////////////////
  // Private variables              //
  ////////////////////////////////////
    self = this,
    bBox,
    bBoxBorder,
    bBoxTitle,
    nodes = {},
    observer,
    nodeArray = [],
    intEdgeArray = [],
    internal = {},
    inbound = {},
    outbound = {},
    outReferences = {},
    layouter,
  ////////////////////////////////////
  // Private functions              //
  ////////////////////////////////////

    getDistance = function(def) {
      if (self._expanded) {
        return 2 * def * Math.sqrt(nodeArray.length);
      }
      return def;
    },

    getCharge = function(def) {
      if (self._expanded) {
        return 4 * def * Math.sqrt(nodeArray.length);
      }
      return def;
    },

    compPosi = function(p) {
      var d = self.position,
        x = p.x * d.z + d.x,
        y = p.y * d.z + d.y,
        z = p.z * d.z;
      return {
        x: x,
        y: y,
        z: z
      };
    },

    getSourcePosition = function(e) {
      if (self._expanded) {
        return compPosi(e._source.position);
      }
      return self.position;
    },


    getTargetPosition = function(e) {
      if (self._expanded) {
        return compPosi(e._target.position);
      }
      return self.position;
    },

    updateBoundingBox = function() {
      var boundingBox = document.getElementById(self._id).getBBox();
      bBox.attr("transform", "translate(" + (boundingBox.x - 5) + "," + (boundingBox.y - 25) + ")");
      bBoxBorder.attr("width", boundingBox.width + 10)
        .attr("height", boundingBox.height + 30);
      bBoxTitle.attr("width", boundingBox.width + 10);
    },

    getObserver = function() {
      if (!observer) {
        var factory = new DomObserverFactory();
        observer = factory.createObserver(function(e){
          if (_.any(e, function(obj) {
            return obj.attributeName === "transform";
          })) {
            updateBoundingBox();
            observer.disconnect();
          }
        });
      }
      return observer;
    },

    updateNodeArray = function() {
      layouter.stop();
      nodeArray.length = 0;
      _.each(nodes, function(v) {
        nodeArray.push(v);
      });
      layouter.start();
    },

    updateEdgeArray = function() {
      layouter.stop();
      intEdgeArray.length = 0;
      _.each(internal, function(e) {
        intEdgeArray.push(e);
      });
      layouter.start();
    },

    toArray = function(obj) {
      var res = [];
      _.each(obj, function(v) {
        res.push(v);
      });
      return res;
    },

    hasNode = function(id) {
      return !!nodes[id];
    },

    getNodes = function() {
      return nodeArray;
    },

    getNode = function(id) {
      return nodes[id];
    },

    insertNode = function(n) {
      nodes[n._id] = n;
      updateNodeArray();
      self._size++;
    },

    insertInitialNodes = function(ns) {
      _.each(ns, function(n) {
        nodes[n._id] = n;
        self._size++;
      });
      updateNodeArray();
    },

    removeNode = function(n) {
      var id = n._id || n;
      delete nodes[id];
      updateNodeArray();
      self._size--;
    },

    removeInboundEdge = function(e) {
      var id;
      if (!_.has(e, "_id")) {
        id = e;
        e = internal[id] || inbound[id];
      } else {
        id = e._id;
      }
      e.target = e._target;
      delete e._target;
      if (internal[id]) {
        delete internal[id];
        self._outboundCounter++;
        outbound[id] = e;
        updateEdgeArray();
        return;
      }
      delete inbound[id];
      self._inboundCounter--;
      return;
    },

    removeOutboundEdge = function(e) {
      var id;
      if (!_.has(e, "_id")) {
        id = e;
        e = internal[id] || outbound[id];
      } else {
        id = e._id;
      }
      e.source = e._source;
      delete e._source;
      delete outReferences[e.source._id][id];
      if (internal[id]) {
        delete internal[id];
        self._inboundCounter++;
        inbound[id] = e;
        updateEdgeArray();
        return;
      }
      delete outbound[id];
      self._outboundCounter--;
      return;
    },

    removeOutboundEdgesFromNode = function(n) {
      var id = n._id || n,
        res = [];
      _.each(outReferences[id], function(e) {
        removeOutboundEdge(e);
        res.push(e);
      });
      delete outReferences[id];
      return res;
    },

    insertInboundEdge = function(e) {
      e._target = e.target;
      e.target = self;
      if (outbound[e._id]) {
        delete outbound[e._id];
        self._outboundCounter--;
        internal[e._id] = e;
        updateEdgeArray();
        return true;
      }
      inbound[e._id] = e;
      self._inboundCounter++;
      return false;
    },

    insertOutboundEdge = function(e) {
      var sId = e.source._id;
      e._source = e.source;
      e.source = self;
      outReferences[sId] = outReferences[sId] || {};
      outReferences[sId][e._id] = e;
      if (inbound[e._id]) {
        delete inbound[e._id];
        self._inboundCounter--;
        internal[e._id] = e;
        updateEdgeArray();
        return true;
      }
      self._outboundCounter++;
      outbound[e._id] = e;
      return false;
    },

    getDissolveInfo = function() {
      return {
        nodes: nodeArray,
        edges: {
          both: intEdgeArray,
          inbound: toArray(inbound),
          outbound: toArray(outbound)
        }
      };
    },

    expand = function() {
      this._expanded = true;
    },

    dissolve = function() {
      parent.dissolveCommunity(self);
    },

    collapse = function() {
      this._expanded = false;
    },

    addCollapsedLabel = function(g, colourMapper) {
      var width = g.select("rect").attr("width"),
        textN = g.append("text") // Append a label for the node
          .attr("text-anchor", "middle") // Define text-anchor
          .attr("fill", colourMapper.getForegroundCommunityColour())
          .attr("stroke", "none"); // Make it readable
      width *= 2;
      width /= 3;
      if (self._reason && self._reason.key) {
        textN.append("tspan")
          .attr("x", "0")
          .attr("dy", "-4")
          .text(self._reason.key + ":");
        textN.append("tspan")
          .attr("x", "0")
          .attr("dy", "16")
          .text(self._reason.value);
      }
      textN.append("tspan")
        .attr("x", width)
        .attr("y", "0")
        .attr("fill", colourMapper.getCommunityColour())
        .text(self._size);
    },

    addCollapsedShape = function(g, shapeFunc, start, colourMapper) {
      var inner = g.append("g")
        .attr("stroke", colourMapper.getForegroundCommunityColour())
        .attr("fill", colourMapper.getCommunityColour());
      shapeFunc(inner, 9);
      shapeFunc(inner, 6);
      shapeFunc(inner, 3);
      shapeFunc(inner);
      inner.on("click", function() {
        self.expand();
        parent.checkNodeLimit(self);
        start();
      });
      addCollapsedLabel(inner, colourMapper);
    },

    addNodeShapes = function(g, shapeQue) {
      var interior = g.selectAll(".node")
      .data(nodeArray, function(d) {
        return d._id;
      });
      interior.enter()
        .append("g")
        .attr("class", "node")
        .attr("id", function(d) {
          return d._id;
        });
      // Remove all old
      interior.exit().remove();
      interior.selectAll("* > *").remove();
      shapeQue(interior);
    },

    addBoundingBox = function(g, start) {
      bBox = g.append("g");
      bBoxBorder = bBox.append("rect")
        .attr("rx", "8")
        .attr("ry", "8")
        .attr("fill", "none")
        .attr("stroke", "black");
      bBoxTitle = bBox.append("rect")
        .attr("rx", "8")
        .attr("ry", "8")
        .attr("height", "20")
        .attr("fill", "#686766")
        .attr("stroke", "none");
      bBox.append("image")
        .attr("id", self._id + "_dissolve")
        .attr("xlink:href", "img/icon_delete.png")
        .attr("width", "16")
        .attr("height", "16")
        .attr("x", "5")
        .attr("y", "2")
        .attr("style", "cursor:pointer")
        .on("click", function() {
          self.dissolve();
          start();
        });
      bBox.append("image")
        .attr("id", self._id + "_collapse")
        .attr("xlink:href", "img/gv_collapse.png")
        .attr("width", "16")
        .attr("height", "16")
        .attr("x", "25")
        .attr("y", "2")
        .attr("style", "cursor:pointer")
        .on("click", function() {
          self.collapse();
          start();
        });
      var title = bBox.append("text")
        .attr("x", "45")
        .attr("y", "15")
        .attr("fill", "white")
        .attr("stroke", "none")
        .attr("text-anchor", "left");
      if (self._reason) {
        title.text(self._reason.text);
      }
      getObserver().observe(document.getElementById(self._id), {
        subtree:true,
        attributes:true
      });
    },

    addDistortion = function(distFunc) {
      if (self._expanded) {
        var oldFocus = distFunc.focus(),
          newFocus = [
            oldFocus[0] - self.position.x,
            oldFocus[1] - self.position.y
          ];
        distFunc.focus(newFocus);
        _.each(nodeArray, function(n) {
          n.position = distFunc(n);
          n.position.x /= self.position.z;
          n.position.y /= self.position.z;
          n.position.z /= self.position.z;
        });
        distFunc.focus(oldFocus);
      }
    },

    shapeAll = function(g, shapeFunc, shapeQue, start, colourMapper) {
      // First unbind all click events that are proably still bound
      g.on("click", null);
      if (self._expanded) {
        addBoundingBox(g, start);
        addNodeShapes(g, shapeQue, start, colourMapper);
        return;
      }
      addCollapsedShape(g, shapeFunc, start, colourMapper);
    },

    updateEdges = function(g, addPosition, addUpdate) {
      if (self._expanded) {
        var interior = g.selectAll(".link"),
          line = interior.select("line");
        addPosition(line, interior);
        addUpdate(interior);
      }
    },

    shapeEdges = function(g, addQue) {
      var idFunction = function(d) {
          return d._id;
        },
	line,
	interior;
      if (self._expanded) {
        interior = g
          .selectAll(".link")
          .data(intEdgeArray, idFunction);
        // Append the group and class to all new
        interior.enter()
          .append("g")
          .attr("class", "link") // link is CSS class that might be edited
          .attr("id", idFunction);
        // Remove all old
        interior.exit().remove();
        // Remove all elements that are still included.
        interior.selectAll("* > *").remove();
        line = interior.append("line");
        addQue(line, interior);
      }
    },

    collapseNode = function(n) {
      removeOutboundEdgesFromNode(n);
    };

  ////////////////////////////////////
  // Setup                          //
  ////////////////////////////////////

  layouter = new ForceLayouter({
    distance: 100,
    gravity: 0.1,
    charge: -500,
    width: 1,
    height: 1,
    nodes: nodeArray,
    links: intEdgeArray
  });

  ////////////////////////////////////
  // Values required for shaping    //
  ////////////////////////////////////
  this._id = "*community_" + Math.floor(Math.random()* 1000000);
  if (initial.length > 0) {
    this.x = initial[0].x;
    this.y = initial[0].y;
  } else {
    this.x = 0;
    this.y = 0;
  }
  this._size = 0;
  this._inboundCounter = 0;
  this._outboundCounter = 0;
  this._expanded = false;
  // Easy check for the other classes,
  // no need for a regex on the _id any more.
  this._isCommunity = true;

  insertInitialNodes(initial);

  ////////////////////////////////////
  // Public functions               //
  ////////////////////////////////////

  this.hasNode = hasNode;
  this.getNodes = getNodes;
  this.getNode = getNode;
  this.getDistance = getDistance;
  this.getCharge = getCharge;


  this.insertNode = insertNode;
  this.insertInboundEdge = insertInboundEdge;
  this.insertOutboundEdge = insertOutboundEdge;

  this.removeNode = removeNode;
  this.removeInboundEdge = removeInboundEdge;
  this.removeOutboundEdge = removeOutboundEdge;
  this.removeOutboundEdgesFromNode = removeOutboundEdgesFromNode;


  this.collapseNode = collapseNode;

  this.dissolve = dissolve;
  this.getDissolveInfo = getDissolveInfo;

  this.collapse = collapse;
  this.expand = expand;

  this.shapeNodes = shapeAll;
  this.shapeInnerEdges = shapeEdges;
  this.updateInnerEdges = updateEdges;


  this.addDistortion = addDistortion;

  this.getSourcePosition = getSourcePosition;

  this.getTargetPosition = getTargetPosition;
}

/*global window */

//////////////////////////////////
/// @brief Graph functionality
///
/// @file
///
/// DISCLAIMER
///
/// Copyright 2010-2012 triagens GmbH, Cologne, Germany
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///
///     http://www.apache.org/licenses/LICENSE-2.0
///
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// Copyright holder is triAGENS GmbH, Cologne, Germany
///
/// @author Michael Hackstein
/// @author Copyright 2011-2013, triAGENS GmbH, Cologne, Germany
////////////////////////////////////////////////////////////////////////////////


function DomObserverFactory() {
  "use strict";

  var Constructor = window.WebKitMutationObserver || window.MutationObserver;

  this.createObserver = function(callback) {
    if (!Constructor) {
      throw "Observer not supported";
    }
    return new Constructor(callback);
  };
}

/*global _, $, d3*/
/*global ColourMapper, ContextMenu*/
////////////////////////////////////////////////////////////////////////////////
/// @brief Graph functionality
///
/// @file
///
/// DISCLAIMER
///
/// Copyright 2010-2012 triagens GmbH, Cologne, Germany
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///
///     http://www.apache.org/licenses/LICENSE-2.0
///
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// Copyright holder is triAGENS GmbH, Cologne, Germany
///
/// @author Michael Hackstein
/// @author Copyright 2011-2013, triAGENS GmbH, Cologne, Germany
////////////////////////////////////////////////////////////////////////////////

/*
* config example format:
* {
*   shape: {
*     type: EdgeShaper.shapes.ARROW
*   }
*   label: "key" \\ function(edge)
*   actions: {
*     click: function(edge)
*   }
* }
*
*
*/

function EdgeShaper(parent, config, idfunc) {
  "use strict";

  var self = this,
    edges = [],
    communityNodes = {},
    contextMenu = new ContextMenu("gv_edge_cm"),
    findFirstValue = function(list, data) {
      if (_.isArray(list)) {
        return data[_.find(list, function(val) {
          return data[val];
        })];
      }
      return data[list];
    },
    splitLabel = function(label) {
      if (label === undefined) {
        return [""];
      }
      if (typeof label !== "string") {
        label = String(label);
      }
      var chunks = label.match(/[\w\W]{1,10}(\s|$)|\S+?(\s|$)/g);
      chunks[0] = $.trim(chunks[0]);
      chunks[1] = $.trim(chunks[1]);
      if (chunks[0].length > 12) {
        chunks[0] = $.trim(label.substring(0,10)) + "-";
        chunks[1] = $.trim(label.substring(10));
        if (chunks[1].length > 12) {
          chunks[1] = chunks[1].split(/\W/)[0];
          if (chunks[1].length > 12) {
            chunks[1] = chunks[1].substring(0,10) + "...";
          }
        }
        chunks.length = 2;
      }
      if (chunks.length > 2) {
        chunks.length = 2;
        chunks[1] += "...";
      }
      return chunks;
    },
    toplevelSVG,
    visibleLabels = true,
    followEdge = {},
    followEdgeG,
    idFunction = function(d) {
      return d._id;
    },
    noop = function (line, g) {

    },
    colourMapper = new ColourMapper(),
    resetColourMap = function() {
      colourMapper.reset();
    },
    events,
    addUpdate = noop,
    addShape = noop,
    addLabel = noop,
    addColor = noop,

    unbindEvents = function() {
     events = {
       click: noop,
       dblclick: noop,
       mousedown: noop,
       mouseup: noop,
       mousemove: noop,
       mouseout: noop,
       mouseover: noop
     };
    },


    getCorner = function(s, t) {
      return Math.atan2(t.y - s.y, t.x - s.x) * 180 / Math.PI;
    },

    getDistance = function(s, t) {
      var res = Math.sqrt(
        (t.y - s.y)
        * (t.y - s.y)
        + (t.x - s.x)
        * (t.x - s.x)
      ),
      m;
      if (s.x === t.x) {
        res -= t.z * 18;
      } else {
        m = Math.abs((t.y - s.y) / (t.x - s.x));
        if (m < 0.4) {
          res -= Math.abs((res * t.z * 45) / (t.x - s.x));
        } else {
          res -= Math.abs((res * t.z * 18) / (t.y - s.y));
        }
      }
      return res;
    },

    addEvents = function (line, g) {
      _.each(events, function (func, type) {
        g.on(type, func);
      });
    },

    bindEvent = function (type, func) {
      if (type === "update") {
        addUpdate = func;
      } else if (events[type] === undefined) {
        throw "Sorry Unknown Event " + type + " cannot be bound.";
      } else {
        events[type] = func;
      }
    },

    calculateNodePositions = function (e) {
      var sp, tp, s, t;
      s = e.source;
      t = e.target;
      if (s._isCommunity) {
        communityNodes[s._id] = s;
        sp = s.getSourcePosition(e);
      } else {
        sp = s.position;
      }
      if (t._isCommunity) {
        communityNodes[t._id] = t;
        tp = t.getTargetPosition(e);
      } else {
        tp = t.position;
      }
      return {
        s: sp,
        t: tp
      };
    },

    addPosition = function (line, g) {
      communityNodes = {};
      g.attr("transform", function(d) {
        var p = calculateNodePositions(d);
        return "translate("
          + p.s.x + ", "
          + p.s.y + ")"
          + "rotate("
          + getCorner(p.s, p.t)
          + ")";
      });
      line.attr("x2", function(d) {
        var p = calculateNodePositions(d);
        return getDistance(p.s, p.t);
      });
    },

    addQue = function (line, g) {
      addShape(line, g);
      if (visibleLabels) {
        addLabel(line, g);
      }
      addColor(line, g);
      addEvents(line, g);
      addPosition(line, g);
    },

    shapeEdges = function (newEdges) {
      if (newEdges !== undefined) {
        edges = newEdges;
      }
      var line,
        g = self.parent
          .selectAll(".link")
          .data(edges, idFunction);
      // Append the group and class to all new
      g.enter()
        .append("g")
        .attr("class", "link") // link is CSS class that might be edited
        .attr("id", idFunction);
      // Remove all old
      g.exit().remove();
      // Remove all elements that are still included.
      g.selectAll("* > *").remove();
      line = g.append("line");
      addQue(line, g);
      _.each(communityNodes, function(c) {
        c.shapeInnerEdges(d3.select(this), addQue);
      });
      contextMenu.bindMenu($(".link"));
    },

    updateEdges = function () {
      var g = self.parent.selectAll(".link"),
        line = g.select("line");
      addPosition(line, g);
      addUpdate(g);
      _.each(communityNodes, function(c) {
        c.updateInnerEdges(d3.select(this), addPosition, addUpdate);
      });
    },

    parseShapeFlag = function (shape) {
      $("svg defs marker#arrow").remove();
      switch (shape.type) {
        case EdgeShaper.shapes.NONE:
          addShape = noop;
          break;
        case EdgeShaper.shapes.ARROW:
          addShape = function (line, g) {
            line.attr("marker-end", "url(#arrow)");
          };
          if (toplevelSVG.selectAll("defs")[0].length === 0) {
            toplevelSVG.append("defs");
          }
          toplevelSVG
            .select("defs")
            .append("marker")
            .attr("id", "arrow")
            .attr("refX", "10")
            .attr("refY", "5")
            .attr("markerUnits", "strokeWidth")
            .attr("markerHeight", "10")
            .attr("markerWidth", "10")
            .attr("orient", "auto")
            .append("path")
              .attr("d", "M 0 0 L 10 5 L 0 10 z");
          break;
        default:
          throw "Sorry given Shape not known!";
      }
    },

    parseLabelFlag = function (label) {
      if (_.isFunction(label)) {
        addLabel = function (line, g) {
          g.append("text") // Append a label for the edge
            .attr("text-anchor", "middle") // Define text-anchor
            .text(label);
        };
      } else {
        addLabel = function (line, g) {
          g.append("text") // Append a label for the edge
            .attr("text-anchor", "middle") // Define text-anchor
            .text(function(d) {
              // Which value should be used as label
              var chunks = splitLabel(findFirstValue(label, d._data));
              return chunks[0] || "";
            });
        };
      }
      addUpdate = function (edges) {
        edges.select("text")
          .attr("transform", function(d) {
            var p = calculateNodePositions(d);
            return "translate("
              + getDistance(p.s, p.t) / 2
              + ", -3)";
          });
      };
    },

    parseActionFlag = function (actions) {
      if (actions.reset !== undefined && actions.reset) {
        unbindEvents();
      }
      _.each(actions, function(func, type) {
        if (type !== "reset") {
          bindEvent(type, func);
        }
      });
    },

    parseColorFlag = function (color) {
      $("svg defs #gradientEdgeColor").remove();
      resetColourMap();
      switch (color.type) {
        case "single":
          addColor = function (line, g) {
            line.attr("stroke", color.stroke);
          };
          break;
        case "gradient":
          if (toplevelSVG.selectAll("defs")[0].length === 0) {
            toplevelSVG.append("defs");
          }
          var gradient = toplevelSVG
            .select("defs")
            .append("linearGradient")
            .attr("id", "gradientEdgeColor");
          gradient.append("stop")
            .attr("offset", "0")
            .attr("stop-color", color.source);
          gradient.append("stop")
            .attr("offset", "0.4")
            .attr("stop-color", color.source);
          gradient.append("stop")
            .attr("offset", "0.6")
            .attr("stop-color", color.target);
          gradient.append("stop")
            .attr("offset", "1")
            .attr("stop-color", color.target);
          addColor = function (line, g) {
            line.attr("stroke", "url(#gradientEdgeColor)");
            line.attr("y2", "0.0000000000000001");
          };
          break;
        case "attribute":
          addColor = function (line, g) {
             g.attr("stroke", function(e) {
               return colourMapper.getColour(e._data[color.key]);
             });
          };
          break;
        default:
          throw "Sorry given colour-scheme not known";
      }
    },

    parseConfig = function(config) {
      if (config.shape !== undefined) {
        parseShapeFlag(config.shape);
      }
      if (config.label !== undefined) {
        parseLabelFlag(config.label);
        self.label = config.label;
      }
      if (config.actions !== undefined) {
        parseActionFlag(config.actions);
      }
      if (config.color !== undefined) {
        parseColorFlag(config.color);
      }
    };

  self.parent = parent;

  unbindEvents();

  toplevelSVG = parent;
  while (toplevelSVG[0][0] && toplevelSVG[0][0].ownerSVGElement) {
    toplevelSVG = d3.select(toplevelSVG[0][0].ownerSVGElement);
  }

  if (config === undefined) {
    config = {
      color: {
        type: "single",
        stroke: "#686766"
      }
    };
  }

  if (config.color === undefined) {
    config.color = {
      type: "single",
      stroke: "#686766"
    };
  }

  parseConfig(config);

  if (_.isFunction(idfunc)) {
    idFunction = idfunc;
  }

  followEdgeG = toplevelSVG.append("g");


  /////////////////////////////////////////////////////////
  /// Public functions
  /////////////////////////////////////////////////////////

  self.changeTo = function(config) {
    parseConfig(config);
    shapeEdges();
    updateEdges();
  };

  self.drawEdges = function (edges) {
    shapeEdges(edges);
    updateEdges();
  };

  self.updateEdges = function () {
    updateEdges();
  };

  self.reshapeEdges = function() {
    shapeEdges();
  };

  self.activateLabel = function(toogle) {
    if (toogle) {
      visibleLabels = true;
    } else {
      visibleLabels = false;
    }
    shapeEdges();
  };

  self.addAnEdgeFollowingTheCursor = function(x, y) {
    followEdge = followEdgeG.append("line");
    followEdge.attr("stroke", "black")
      .attr("id", "connectionLine")
      .attr("x1", x)
      .attr("y1", y)
      .attr("x2", x)
      .attr("y2", y);
    return function(x, y) {
      followEdge.attr("x2", x).attr("y2", y);
    };
  };

  self.removeCursorFollowingEdge = function() {
    if (followEdge.remove) {
      followEdge.remove();
      followEdge = {};
    }
  };

  self.addMenuEntry = function(name, func) {
    contextMenu.addEntry(name, func);
  };

  self.getLabel = function() {
    return self.label || "";
  };

  self.resetColourMap = resetColourMap;
}

EdgeShaper.shapes = Object.freeze({
  "NONE": 0,
  "ARROW": 1
});

/*global _, $, window, d3*/
/*global EventLibrary*/
////////////////////////////////////////////////////////////////////////////////
/// @brief Graph functionality
///
/// @file
///
/// DISCLAIMER
///
/// Copyright 2010-2012 triagens GmbH, Cologne, Germany
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///
///     http://www.apache.org/licenses/LICENSE-2.0
///
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// Copyright holder is triAGENS GmbH, Cologne, Germany
///
/// @author Michael Hackstein
/// @author Copyright 2011-2013, triAGENS GmbH, Cologne, Germany
////////////////////////////////////////////////////////////////////////////////
function EventDispatcher(nodeShaper, edgeShaper, config) {
  "use strict";

  var eventlib,
    svgBase,
    svgTemp,
    svgObj,
    self = this,
    parseNodeEditorConfig = function(config) {
      if (config.shaper === undefined) {
        config.shaper = nodeShaper;
      }
      if (eventlib.checkNodeEditorConfig(config)) {
        var insert = new eventlib.InsertNode(config),
          patch = new eventlib.PatchNode(config),
          del = new eventlib.DeleteNode(config);

        self.events.CREATENODE = function(getNewData, callback, x, y) {
          var data;
          if (!_.isFunction(getNewData)) {
            data = getNewData;
          } else {
            data = getNewData();
          }
          return function() {
            insert(data, callback, x, y);
          };
        };
        self.events.PATCHNODE = function(node, getNewData, callback) {
          if (!_.isFunction(getNewData)) {
            throw "Please give a function to extract the new node data";
          }
          return function() {
            patch(node, getNewData(), callback);
          };
        };

        self.events.DELETENODE = function(callback) {
          return function(node) {
            del(node, callback);
          };
        };
      }
    },

    parseEdgeEditorConfig = function(config) {
      if (config.shaper === undefined) {
        config.shaper = edgeShaper;
      }
      if (eventlib.checkEdgeEditorConfig(config)) {
        var insert = new eventlib.InsertEdge(config),
          patch = new eventlib.PatchEdge(config),
          del = new eventlib.DeleteEdge(config),
          edgeStart = null,
          didInsert = false;

        self.events.STARTCREATEEDGE = function(callback) {
          return function(node) {
            var e = d3.event || window.event;
            edgeStart = node;
            didInsert = false;
            if (callback !== undefined) {
              callback(node, e);
            }
            // Necessary to omit dragging of the graph
            e.stopPropagation();
          };
        };

        self.events.CANCELCREATEEDGE = function(callback) {
          return function() {
            edgeStart = null;
            if (callback !== undefined && !didInsert) {
              callback();
            }
          };
        };

        self.events.FINISHCREATEEDGE = function(callback) {
          return function(node) {
            if (edgeStart !== null && node !== edgeStart) {
              insert(edgeStart, node, callback);
              didInsert = true;
            }
          };
        };

        self.events.PATCHEDGE = function(edge, getNewData, callback) {
          if (!_.isFunction(getNewData)) {
            throw "Please give a function to extract the new node data";
          }
          return function() {
            patch(edge, getNewData(), callback);
          };
        };

        self.events.DELETEEDGE = function(callback) {
          return function(edge) {
            del(edge, callback);
          };
        };
      }
    },

    bindSVGEvents = function() {
      svgObj = svgObj || $("svg");
      svgObj.unbind();
      _.each(svgBase, function(fs, ev) {
        svgObj.bind(ev, function(trigger) {
          _.each(fs, function(f) {
            f(trigger);
          });
          if (!! svgTemp[ev]) {
            svgTemp[ev](trigger);
          }
        });
      });
    };

  if (nodeShaper === undefined) {
    throw "NodeShaper has to be given.";
  }

  if (edgeShaper === undefined) {
    throw "EdgeShaper has to be given.";
  }

  eventlib = new EventLibrary();

  svgBase = {
    click: [],
    dblclick: [],
    mousedown: [],
    mouseup: [],
    mousemove: [],
    mouseout: [],
    mouseover: []
  };
  svgTemp = {};

  self.events = {};

  if (config !== undefined) {
    if (config.expand !== undefined) {
      if (eventlib.checkExpandConfig(config.expand)) {
        self.events.EXPAND = new eventlib.Expand(config.expand);
        nodeShaper.setGVStartFunction(function() {
         config.expand.reshapeNodes();
         config.expand.startCallback();
        });
      }
    }
    if (config.drag !== undefined) {
      if (eventlib.checkDragConfig(config.drag)) {
        self.events.DRAG = eventlib.Drag(config.drag);
      }
    }
    if (config.nodeEditor !== undefined) {
      parseNodeEditorConfig(config.nodeEditor);
    }
    if (config.edgeEditor !== undefined) {
      parseEdgeEditorConfig(config.edgeEditor);
    }
  }
  Object.freeze(self.events);

  //Check for expand config
  self.bind = function (object, event, func) {
    if (func === undefined || !_.isFunction(func)) {
      throw "You have to give a function that should be bound as a third argument";
    }
    var actions = {};
    switch (object) {
      case "nodes":
        actions[event] = func;
        nodeShaper.changeTo({
          actions: actions
        });
        break;
      case "edges":
        actions[event] = func;
        edgeShaper.changeTo({
          actions: actions
        });
        break;
      case "svg":
        svgTemp[event] = func;
        bindSVGEvents();
        break;
      default:
        if (object.bind !== undefined) {
          object.unbind(event);
          object.bind(event, func);
        } else {
          throw "Sorry cannot bind to object. Please give either "
          + "\"nodes\", \"edges\" or a jQuery-selected DOM-Element";
        }
    }
  };

  self.rebind = function (object, actions) {
    actions = actions || {};
    actions.reset = true;
    switch (object) {
      case "nodes":
        nodeShaper.changeTo({
          actions: actions
        });
        break;
      case "edges":
        edgeShaper.changeTo({
          actions: actions
        });
        break;
      case "svg":
        svgTemp = {};
        _.each(actions, function(fs, ev) {
          if (ev !== "reset") {
            svgTemp[ev] = fs;
          }
        });
        bindSVGEvents();
        break;
      default:
          throw "Sorry cannot rebind to object. Please give either "
          + "\"nodes\", \"edges\" or \"svg\"";
    }
  };

  self.fixSVG = function(event, action) {
    if (svgBase[event] === undefined) {
      throw "Sorry unkown event";
    }
    svgBase[event].push(action);
    bindSVGEvents();
  };
  /*
  self.unbind = function () {
    throw "Not implemented";
  };
  */
  Object.freeze(self.events);
}

/*global _*/

////////////////////////////////////////////////////////////////////////////////
/// @brief Graph functionality
///
/// @file
///
/// DISCLAIMER
///
/// Copyright 2010-2012 triagens GmbH, Cologne, Germany
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///
///     http://www.apache.org/licenses/LICENSE-2.0
///
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// Copyright holder is triAGENS GmbH, Cologne, Germany
///
/// @author Michael Hackstein
/// @author Copyright 2011-2013, triAGENS GmbH, Cologne, Germany
////////////////////////////////////////////////////////////////////////////////

// configs:
//  expand: {
//    startCallback,
//    loadNode,
//    reshapeNodes
//  }
//
//  nodeEditor: {
//    nodes,
//    adapter,
//    shaper
//  }
//
//  edgeEditor: {
//    edges,
//    adapter,
//    shaper
//  }
//
//
//
function EventLibrary() {
  "use strict";

  var self = this;

  this.checkExpandConfig = function(config) {
    if (config.startCallback === undefined) {
      throw "A callback to the Start-method has to be defined";
    }
    if (config.adapter === undefined || config.adapter.explore === undefined) {
      throw "An adapter to load data has to be defined";
    }
    if (config.reshapeNodes === undefined) {
      throw "A callback to reshape nodes has to be defined";
    }
    return true;
  };

  this.Expand = function (config) {
    self.checkExpandConfig(config);
    var
      startCallback = config.startCallback,
      explore = config.adapter.explore,
      reshapeNodes = config.reshapeNodes;
    return function(n) {
      explore(n, startCallback);
      reshapeNodes();
      startCallback();
    };
  };

  this.checkDragConfig = function (config) {
    if (config.layouter === undefined) {
      throw "A layouter has to be defined";
    }
    if (config.layouter.drag === undefined || !_.isFunction(config.layouter.drag)) {
      throw "The layouter has to offer a drag function";
    }
    return true;
  };

  this.Drag = function (config) {
    self.checkDragConfig(config);
    return config.layouter.drag;
  };

  this.checkNodeEditorConfig = function (config) {
    if (config.adapter === undefined) {
      throw "An adapter has to be defined";
    }
    if (config.shaper === undefined) {
      throw "A node shaper has to be defined";
    }
    return true;
  };

  this.checkEdgeEditorConfig = function (config) {
    if (config.adapter === undefined) {
      throw "An adapter has to be defined";
    }
    if (config.shaper === undefined) {
      throw "An edge Shaper has to be defined";
    }
    return true;
  };

  this.InsertNode = function (config) {
    self.checkNodeEditorConfig(config);
    var adapter = config.adapter,
      nodeShaper = config.shaper;

    return function(data, callback, x, y) {
      var cb, d;
      if (_.isFunction(data) && !callback) {
        cb = data;
        d = {};
      } else {
        cb = callback;
        d = data;
      }
      adapter.createNode(d, function(newNode) {
        nodeShaper.reshapeNodes();
        cb(newNode);
      }, x, y);
    };
  };

  this.PatchNode = function (config) {
    self.checkNodeEditorConfig(config);
    var adapter = config.adapter,
    nodeShaper = config.shaper;

    return function(nodeToPatch, patchData, callback) {
      adapter.patchNode(nodeToPatch, patchData, function(patchedNode) {
        nodeShaper.reshapeNodes();
        callback(patchedNode);
      });
    };
  };

  this.DeleteNode = function (config) {
    self.checkNodeEditorConfig(config);
    var adapter = config.adapter,
    nodeShaper = config.shaper;

    return function(nodeToDelete, callback) {
      adapter.deleteNode(nodeToDelete, function() {
        nodeShaper.reshapeNodes();
        callback();
      });
    };
  };

  this.SelectNodeCollection = function(config) {
    self.checkNodeEditorConfig(config);
    var adapter = config.adapter;
    if (!_.isFunction(adapter.useNodeCollection)) {
      throw "The adapter has to support collection changes";
    }
    return function(name, callback) {
      adapter.useNodeCollection(name);
      callback();
    };
  };

  this.InsertEdge = function (config) {
    self.checkEdgeEditorConfig(config);
    var adapter = config.adapter,
    edgeShaper = config.shaper;
    return function(source, target, callback) {
      adapter.createEdge({source: source, target: target}, function(newEdge) {
        edgeShaper.reshapeEdges();
        callback(newEdge);
      });
    };
  };

  this.PatchEdge = function (config) {
    self.checkEdgeEditorConfig(config);
    var adapter = config.adapter,
    edgeShaper = config.shaper;
    return function(edgeToPatch, patchData, callback) {
      adapter.patchEdge(edgeToPatch, patchData, function(patchedEdge) {
        edgeShaper.reshapeEdges();
        callback(patchedEdge);
      });
    };
  };

  this.DeleteEdge = function (config) {
    self.checkEdgeEditorConfig(config);
    var adapter = config.adapter,
    edgeShaper = config.shaper;
    return function(edgeToDelete, callback) {
      adapter.deleteEdge(edgeToDelete, function() {
        edgeShaper.reshapeEdges();
        callback();
      });
    };
  };

}

/*global _, d3*/
////////////////////////////////////////////////////////////////////////////////
/// @brief Graph functionality
///
/// @file
///
/// DISCLAIMER
///
/// Copyright 2010-2012 triagens GmbH, Cologne, Germany
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///
///     http://www.apache.org/licenses/LICENSE-2.0
///
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// Copyright holder is triAGENS GmbH, Cologne, Germany
///
/// @author Michael Hackstein
/// @author Copyright 2011-2013, triAGENS GmbH, Cologne, Germany
////////////////////////////////////////////////////////////////////////////////


/*
* example config:
* {
*   nodes: nodes,
*   links: links,
*
*   (optional)
*   width: width,
*   height: height,
*   distance: distance,
*   gravity: gravity,
*   onUpdate: callback
* }
*/

function ForceLayouter(config) {
  "use strict";
  var self = this,
    force = d3.layout.force(),
    /*
    distance = config.distance || 240, // 80
    gravity = config.gravity || 0.01, // 0.08
    charge = config.charge || -1000, // -240
    */
    defaultCharge = config.charge || -600,
    defaultDistance = config.distance || 80,
    gravity = config.gravity || 0.01,
    distance = function(d) {
      var res = 0;
      if (d.source._isCommunity) {
        res += d.source.getDistance(defaultDistance);
      } else {
        res += defaultDistance;
      }
      if (d.target._isCommunity) {
        res += d.target.getDistance(defaultDistance);
      } else {
        res += defaultDistance;
      }
      return res;
    },
    charge = function(d) {
      if (d._isCommunity) {
        return d.getCharge(defaultCharge);
      }
      return defaultCharge;
    },

    onUpdate = config.onUpdate || function () {},
    width = config.width || 880,
    height = config.height || 680,
    parseConfig = function(config) {
      if (config.distance) {
        defaultDistance = config.distance;
      }
      if (config.gravity) {
        force.gravity(config.gravity);
      }
      if (config.charge) {
        defaultCharge = config.charge;
      }
    };

  if (config.nodes === undefined) {
    throw "No nodes defined";
  }
  if (config.links === undefined) {
    throw "No links defined";
  }
  // Set up the force
  force.nodes(config.nodes); // Set nodes
  force.links(config.links); // Set edges
  force.size([width, height]); // Set width and height
  force.linkDistance(distance); // Set distance between nodes
  force.gravity(gravity); // Set gravity
  force.charge(charge); // Set charge
  force.on("tick", function(){}); // Bind tick function

  self.start = function() {
    force.start(); // Start Force computation
  };

  self.stop = function() {
    force.stop(); // Stop Force computation
  };

  self.drag = force.drag;

  self.setCombinedUpdateFunction = function(nodeShaper, edgeShaper, additional) {
    if (additional !== undefined) {
      onUpdate = function() {
        if (force.alpha() < 0.1) {
          nodeShaper.updateNodes();
          edgeShaper.updateEdges();
          additional();
          if (force.alpha() < 0.05) {
            self.stop();
          }
        }
      };
      force.on("tick", onUpdate);
    } else {
      onUpdate = function() {
        if (force.alpha() < 0.1) {
          nodeShaper.updateNodes();
          edgeShaper.updateEdges();
          if (force.alpha() < 0.05) {
            self.stop();
          }
        }
      };
      force.on("tick", onUpdate);
    }
  };

  self.changeTo = function(config) {
    parseConfig(config);
  };

  self.changeWidth = function(w) {
    width = w;
    force.size([width, height]); // Set width and height
  };
}

/*global $, d3, _, console, document*/
/*global AbstractAdapter*/
////////////////////////////////////////////////////////////////////////////////
/// @brief Graph functionality
///
/// @file
///
/// DISCLAIMER
///
/// Copyright 2010-2012 triagens GmbH, Cologne, Germany
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///
///     http://www.apache.org/licenses/LICENSE-2.0
///
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// Copyright holder is triAGENS GmbH, Cologne, Germany
///
/// @author Michael Hackstein
/// @author Copyright 2011-2013, triAGENS GmbH, Cologne, Germany
////////////////////////////////////////////////////////////////////////////////

function FoxxAdapter(nodes, edges, route, viewer, config) {
  "use strict";

  if (nodes === undefined) {
    throw "The nodes have to be given.";
  }
  if (edges === undefined) {
    throw "The edges have to be given.";
  }
  if (route === undefined) {
    throw "The route has to be given.";
  }
  if (viewer === undefined) {
    throw "A reference to the graph viewer has to be given.";
  }

  config = config || {};

  var self = this,
    absConfig = {},
    absAdapter,
    routes = {},
    baseRoute = route,
    requestBase = {
      cache: false,
      contentType: "application/json",
      dataType: "json",
      processData: false,
      error: function(data) {
        try {
          console.log(data.statusText);
          throw "[" + data.errorNum + "] " + data.errorMessage;
        }
        catch (e) {
          console.log(e);
          throw "Undefined ERROR";
        }
      }
    },

    fillRoutes = function () {
      routes.query = {
        get: function(id, cb) {
          var reqinfo = $.extend(requestBase, {
            type: "GET",
            url: baseRoute + "/query/" + id,
            success: cb
          });
          $.ajax(reqinfo);
        }
      };
      routes.nodes = {
        post: function(data, cb) {
          var reqinfo = $.extend(requestBase, {
            type: "POST",
            url: baseRoute + "/nodes",
            data: JSON.stringify(data),
            success: cb
          });
          $.ajax(reqinfo);
        },
        put: function(id, data, cb) {
          var reqinfo = $.extend(requestBase, {
            type: "PUT",
            url: baseRoute + "/nodes/" + id,
            data: JSON.stringify(data),
            success: cb
          });
          $.ajax(reqinfo);
        },
        del: function(id, cb) {
          var reqinfo = $.extend(requestBase, {
            type: "DELETE",
            url: baseRoute + "/nodes/" + id,
            success: cb
          });
          $.ajax(reqinfo);
        }
      };
      routes.edges = {
        post: function(data, cb) {
          var reqinfo = $.extend(requestBase, {
            type: "POST",
            url: baseRoute + "/edges",
            data: JSON.stringify(data),
            success: cb
          });
          $.ajax(reqinfo);
        },
        put: function(id, data, cb) {
          var reqinfo = $.extend(requestBase, {
            type: "PUT",
            url: baseRoute + "/edges/" + id,
            data: JSON.stringify(data),
            success: cb
          });
          $.ajax(reqinfo);
        },
        del: function(id, cb) {
          var reqinfo = $.extend(requestBase, {
            type: "DELETE",
            url: baseRoute + "/edges/" + id,
            success: cb
          });
          $.ajax(reqinfo);
        }
      };
      routes.forNode = {
        del: function(id, cb) {
          var reqinfo = $.extend(requestBase, {
            type: "DELETE",
            url: baseRoute + "/edges/forNode/" + id,
            success: cb
          });
          $.ajax(reqinfo);
        }
      };
    },

    sendGet = function (type, id, callback) {
      routes[type].get(id, callback);
    },

    sendPost = function (type, data, callback) {
      routes[type].post(data, callback);
    },

    sendDelete = function (type, id, callback) {
      routes[type].del(id, callback);
    },

    sendPut = function (type, id, data, callback) {
      routes[type].put(id, data, callback);
    },

    parseConfig = function(config) {
      /*
      if (config.host === undefined) {
        arangodb = "http://" + document.location.host;
      } else {
        arangodb = config.host;
      }
      */
      if (config.width !== undefined) {
        absAdapter.setWidth(config.width);
      }
      if (config.height !== undefined) {
        absAdapter.setHeight(config.height);
      }
    },

    parseResult = function (result, callback) {
      var inserted = {},
        first = result.first,
        oldLength = nodes.length;
      first = absAdapter.insertNode(first);
      _.each(result.nodes, function(n) {
        n = absAdapter.insertNode(n);
        if (oldLength < nodes.length) {
          inserted[n._id] = n;
          oldLength = nodes.length;
        }
      });
      _.each(result.edges, function(e) {
        absAdapter.insertEdge(e);
      });
      delete inserted[first._id];
      absAdapter.checkSizeOfInserted(inserted);
      absAdapter.checkNodeLimit(first);
      if (callback !== undefined && _.isFunction(callback)) {
        callback(first);
      }
    };

  if (config.prioList) {
    absConfig.prioList = config.prioList;
  }
  absAdapter = new AbstractAdapter(nodes, edges, this, viewer, absConfig);

  parseConfig(config);
  fillRoutes();

  self.explore = absAdapter.explore;

  self.loadNode = function(nodeId, callback) {
    sendGet("query", nodeId, function(result) {
      parseResult(result, callback);
    });
  };

  self.loadInitialNode = function(nodeId, callback) {
    absAdapter.cleanUp();
    var cb = function(n) {
      callback(absAdapter.insertInitialNode(n));
    };
    self.loadNode(nodeId, cb);
  };

  self.requestCentralityChildren = function(nodeId, callback) {
    /*
    sendQuery(queries.childrenCentrality,{
      id: nodeId
    }, function(res) {
      callback(res[0]);
    });
    */
  };

  self.createEdge = function (edgeToAdd, callback) {
    var toSend = _.clone(edgeToAdd);
    toSend._from = edgeToAdd.source._id;
    toSend._to = edgeToAdd.target._id;
    delete toSend.source;
    delete toSend.target;
    sendPost("edges", toSend, function(data) {
      data._from = edgeToAdd.source._id;
      data._to = edgeToAdd.target._id;
      delete data.error;
      var edge = absAdapter.insertEdge(data);
      if (callback !== undefined && _.isFunction(callback)) {
        callback(edge);
      }
    });
  };

  self.deleteEdge = function (edgeToRemove, callback) {
    sendDelete("edges", edgeToRemove._id, function() {
      absAdapter.removeEdge(edgeToRemove);
      if (callback !== undefined && _.isFunction(callback)) {
        callback();
      }
    });
  };

  self.patchEdge = function (edgeToPatch, patchData, callback) {
    sendPut("edges", edgeToPatch._id, patchData, function(data) {
      edgeToPatch._data = $.extend(edgeToPatch._data, patchData);
      if (callback !== undefined && _.isFunction(callback)) {
        callback();
      }
    });
  };

  self.createNode = function (nodeToAdd, callback) {
    sendPost("nodes", nodeToAdd, function(data) {
      absAdapter.insertNode(data);
      if (callback !== undefined && _.isFunction(callback)) {
        callback(data);
      }
    });
  };

  self.deleteNode = function (nodeToRemove, callback) {
    sendDelete("nodes", nodeToRemove._id, function() {
      absAdapter.removeEdgesForNode(nodeToRemove);
      sendDelete("forNode", nodeToRemove._id, function() {});
      absAdapter.removeNode(nodeToRemove);
      if (callback !== undefined && _.isFunction(callback)) {
        callback();
      }
    });
  };

  self.patchNode = function (nodeToPatch, patchData, callback) {
    sendPut("nodes", nodeToPatch._id, patchData, function(data) {
      nodeToPatch._data = $.extend(nodeToPatch._data, patchData);
      if (callback !== undefined && _.isFunction(callback)) {
        callback(nodeToPatch);
      }
    });
  };

  self.setNodeLimit = function (pLimit, callback) {
    absAdapter.setNodeLimit(pLimit, callback);
  };

  self.setChildLimit = function (pLimit) {
    absAdapter.setChildLimit(pLimit);
  };

  self.expandCommunity = function (commNode, callback) {
    absAdapter.expandCommunity(commNode);
    if (callback !== undefined) {
      callback();
    }
  };

  self.setWidth = absAdapter.setWidth;
  self.changeTo = absAdapter.changeTo;
  self.getPrioList = absAdapter.getPrioList;
}

/*global $, d3, _, console, document*/
/*global AbstractAdapter, arangoHelper*/
////////////////////////////////////////////////////////////////////////////////
/// @brief Graph functionality
///
/// @file
///
/// DISCLAIMER
///
/// Copyright 2010-2012 triagens GmbH, Cologne, Germany
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///
///     http://www.apache.org/licenses/LICENSE-2.0
///
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// Copyright holder is triAGENS GmbH, Cologne, Germany
///
/// @author Michael Hackstein
/// @author Copyright 2011-2013, triAGENS GmbH, Cologne, Germany
////////////////////////////////////////////////////////////////////////////////

function GharialAdapter(nodes, edges, viewer, config) {
  "use strict";

  if (nodes === undefined) {
    throw "The nodes have to be given.";
  }
  if (edges === undefined) {
    throw "The edges have to be given.";
  }
  if (viewer === undefined) {
    throw "A reference to the graph viewer has to be given.";
  }
  if (config === undefined) {
    throw "A configuration with graphName has to be given.";
  }
  if (config.graphName === undefined) {
    throw "The graphname has to be given.";
  }

  var self = this,
    absAdapter,
    absConfig = {},
    api = {},
    queries = {},
    nodeCollections,
    selectedNodeCol,
    edgeCollections,
    selectedEdgeCol,
    graphName,
    direction,

    getCollectionsFromGraph = function(name) {
      $.ajax({
        cache: false,
        type: 'GET',
        async: false,
        url: api.graph + "/" + name + "/edge",
        contentType: "application/json",
        success: function(data) {
          edgeCollections = data.collections;
          selectedEdgeCol = edgeCollections[0];
        }
      });
      $.ajax({
        cache: false,
        type: 'GET',
        async: false,
        url: api.graph + "/" + name + "/vertex",
        contentType: "application/json",
        success: function(data) {
          nodeCollections = data.collections;
          selectedNodeCol = nodeCollections[0];
        }
      });
    },

    setGraphName = function(name) {
      graphName = name;
      getCollectionsFromGraph(name);
      api.edges = api.graph + "/" + graphName + "/edge/";
      api.vertices = api.graph + "/" + graphName + "/vertex/";
      api.any = api.base + "simple/any";
    },

    parseConfig = function(config) {
      var arangodb = config.baseUrl || "";
      if (config.width !== undefined) {
        absAdapter.setWidth(config.width);
      }
      if (config.height !== undefined) {
        absAdapter.setHeight(config.height);
      }
      if (config.undirected !== undefined) {
        if (config.undirected === true) {
          direction = "any";
        } else {
          direction = "outbound";
        }
      } else {
        // currently there is a bug with outbound-direction graphs.
        // any should be default at the moment
        direction = "any";
      }

      api.base = arangodb + "_api/";
      api.cursor = api.base + "cursor";
      api.graph = api.base + "gharial";

      if (config.graphName) {
        setGraphName(config.graphName);
      }
    },

    sendQuery = function(query, bindVars, onSuccess) {
      if (query !== queries.getAllGraphs) {
        bindVars.graph = graphName;
        if (query !== queries.connectedEdges
          && query !== queries.childrenCentrality
          && query !== queries.randomVertices) {
            bindVars.dir = direction;
        }
      }
      var data = {
        query: query,
        bindVars: bindVars
      };
      $.ajax({
        type: "POST",
        url: api.cursor,
        data: JSON.stringify(data),
        contentType: "application/json",
        dataType: "json",
        processData: false,
        success: function(data) {
          onSuccess(data.result);
        },
        error: function(data) {
          try {
            console.log(data.statusText);
            throw "[" + data.errorNum + "] " + data.errorMessage;
          }
          catch (e) {
            throw "Undefined ERROR";
          }
        }
      });
    },

    getNRandom = function(n, collection) {
      var data = {
        query: queries.randomVertices,
        bindVars: {
          "@collection" : collection,
          limit: n
        }
      };
      var result;

      $.ajax({
        type: "POST",
        url: api.cursor,
        data: JSON.stringify(data),
        contentType: "application/json",
        dataType: "json",
        processData: false,
        async: false,
        success: function(data) {
          result = data.result;
        },
        error: function(data) {
          try {
            console.log(data.statusText);
            throw "[" + data.errorNum + "] " + data.errorMessage;
          }
          catch (e) {
            throw "Undefined ERROR";
          }
        }
      });
      return result;
    },

    parseResultOfTraversal = function (result, callback) {
      if (result.length === 0
        || result[0].length === 0
        || result[0][0].length === 0) {
        if (callback) {
          callback({
            errorCode: 404
          });
        }
        return;
      }
      result = result[0][0];
      var inserted = {},
        n = absAdapter.insertNode(result[0].vertex),
        oldLength = nodes.length;

      _.each(result, function(visited) {
        var node = absAdapter.insertNode(visited.vertex),
          path = visited.path;
        if (oldLength < nodes.length) {
          inserted[node._id] = node;
          oldLength = nodes.length;
        }
        _.each(path.vertices, function(connectedNode) {
          var ins = absAdapter.insertNode(connectedNode);
          if (oldLength < nodes.length) {
            inserted[ins._id] = ins;
            oldLength = nodes.length;
          }
        });
        _.each(path.edges, function(edge) {
          absAdapter.insertEdge(edge);
        });
      });
      delete inserted[n._id];
      absAdapter.checkSizeOfInserted(inserted);
      absAdapter.checkNodeLimit(n);
      if (callback) {
        callback(n);
      }
    },

    insertInitialCallback = function(callback) {
      return function (n) {
        if (n && n.errorCode) {
          callback(n);
          return;
        }
        callback(absAdapter.insertInitialNode(n));
      };
    };


  if (config.prioList) {
    absConfig.prioList = config.prioList;
  }
  absAdapter = new AbstractAdapter(nodes, edges, this, viewer, absConfig);
  parseConfig(config);

  queries.getAllGraphs = "FOR g IN _graphs"
    + " return g._key";
  queries.traversal = "RETURN GRAPH_TRAVERSAL("
      + "@graph, "
      + "@example, "
      + "@dir, {"
      + "strategy: \"depthfirst\","
      + "maxDepth: 1,"
      + "paths: true"
      + "})";
  queries.childrenCentrality = "RETURN LENGTH(GRAPH_EDGES(@graph, @id, {direction: any}))";
  queries.connectedEdges = "RETURN GRAPH_EDGES(@graph, @id)";
  queries.randomVertices = "FOR x IN @@collection SORT RAND() LIMIT @limit RETURN x";

  self.explore = absAdapter.explore;

  self.loadNode = function(nodeId, callback) {
    self.loadNodeFromTreeById(nodeId, callback);
  };

  //origin nodes to display, real display may be more (depending on their relations)
  self.NODES_TO_DISPLAY = 19;
  self.TOTAL_NODES = 0;

  self.definedNodes = [];
  self.randomNodes = [];

  self.loadRandomNode = function(callback, size) {
    var collections = _.shuffle(self.getNodeCollections()), i;
    for (i = 0; i < collections.length; ++i) {

      if (size !== undefined) {
        if (size === 'all') {
          self.NODES_TO_DISPLAY = self.TOTAL_NODES;
        }
        else {
          self.NODES_TO_DISPLAY = parseInt(size, 10) - 1;
        }

        if (self.NODES_TO_DISPLAY >= self.TOTAL_NODES) {
          $('.infoField').hide();
        }
        else {
          $('.infoField').show();
        }
      }

      var list = getNRandom(self.NODES_TO_DISPLAY, collections[i]);
      if (list.length > 0) {
        var counter = 0;
        _.each(list, function(node) {
          self.randomNodes.push(node);
        });
        self.loadInitialNode(list[0]._id, callback);
        return;
      }
    }

    // no vertex found
    callback({errorCode: 404});
  };

  self.loadInitialNode = function(nodeId, callback) {
    absAdapter.cleanUp();
    self.loadNode(nodeId, insertInitialCallback(callback));
  };

  self.getRandomNodes = function () {
    var nodeArray = [];
    var nodes = [];

    if (self.definedNodes.length > 0) {
      _.each(self.definedNodes, function(node) {
        nodes.push(node);
      });
    }
    if (self.randomNodes.length > 0) {
      _.each(self.randomNodes, function(node) {
        nodes.push(node);
      });
    }

    var counter = 0;
    _.each(nodes, function(node) {
      if (counter < self.NODES_TO_DISPLAY) {
        nodeArray.push({
          vertex: node,
          path: {
            edges: [],
            vertices: [node]
          }
        });
        counter++;
      }
    });

  return nodeArray;
  };

  self.loadNodeFromTreeById = function(nodeId, callback) {
    sendQuery(queries.traversal, {
      example: nodeId
    }, function(res) {

      var nodes = [];
      nodes = self.getRandomNodes();

      if (nodes.length > 0) {
        _.each(nodes, function(node) {
          sendQuery(queries.traversal, {
            example: node.vertex._id
          }, function(res2) {
            _.each(res2[0][0], function(obj) {
              res[0][0].push(obj);
            });
            parseResultOfTraversal(res, callback);
          });
        });
      }
      else {
        sendQuery(queries.traversal, {
          example: nodeId
        }, function(res) {
          parseResultOfTraversal(res, callback);
        });
      }
    });

  };

  self.loadNodeFromTreeByAttributeValue = function(attribute, value, callback) {
    var example = {};
    example[attribute] = value;
    sendQuery(queries.traversal, {
      example: example
    }, function(res) {
      parseResultOfTraversal(res, callback);
    });
  };

  self.getNodeExampleFromTreeByAttributeValue = function(attribute, value, callback) {
    var example = {};

    example[attribute] = value;
    sendQuery(queries.traversal, {
      example: example
    }, function(res) {

      if (res[0][0] === undefined) {
        arangoHelper.arangoError("Graph error", "no nodes found");
        throw "No suitable nodes have been found.";
      }
      else {
        _.each(res[0][0], function(node) {
          if (node.vertex[attribute] === value) {
            var nodeToAdd = {};
            nodeToAdd._key = node.vertex._key;
            nodeToAdd._id = node.vertex._id;
            nodeToAdd._rev = node.vertex._rev;
            absAdapter.insertNode(nodeToAdd);
            callback(nodeToAdd);
          }

        });
      }
    });

  };

  self.loadAdditionalNodeByAttributeValue = function(attribute, value, callback) {
    self.getNodeExampleFromTreeByAttributeValue(attribute, value, callback);
  };

  self.loadInitialNodeByAttributeValue = function(attribute, value, callback) {
    absAdapter.cleanUp();
    self.loadNodeFromTreeByAttributeValue(attribute, value, insertInitialCallback(callback));
  };

  self.requestCentralityChildren = function(nodeId, callback) {
    sendQuery(queries.childrenCentrality,{
      id: nodeId
    }, function(res) {
      callback(res[0]);
    });
  };

  self.createEdge = function (info, callback) {
    var edgeToAdd = {};
    edgeToAdd._from = info.source._id;
    edgeToAdd._to = info.target._id;
    $.ajax({
      cache: false,
      type: "POST",
      url: api.edges + selectedEdgeCol,
      data: JSON.stringify(edgeToAdd),
      dataType: "json",
      contentType: "application/json",
      processData: false,
      success: function(data) {
        if (data.error === false) {
          var toInsert = data.edge, edge;
          toInsert._from = edgeToAdd._from;
          toInsert._to = edgeToAdd._to;
          edge = absAdapter.insertEdge(toInsert);
          callback(edge);
        }
      },
      error: function(data) {
        var text = "";
        try {
          text = JSON.parse(data.responseText).errorMessage + ' (' + JSON.parse(data.responseText).errorNum + ')';
          arangoHelper.arangoError(data.statusText, text);
        }
        catch (e) {
          throw data.statusText;
        }
      }
    });
  };

  self.deleteEdge = function (edgeToRemove, callback) {
    $.ajax({
      cache: false,
      type: "DELETE",
      url: api.edges + edgeToRemove._id,
      contentType: "application/json",
      dataType: "json",
      processData: false,
      success: function() {
        absAdapter.removeEdge(edgeToRemove);
        if (callback !== undefined && _.isFunction(callback)) {
          callback();
        }
      },
      error: function(data) {
        var text = "";
        try {
          text = JSON.parse(data.responseText).errorMessage + ' (' + JSON.parse(data.responseText).errorNum + ')';
          arangoHelper.arangoError(data.statusText, text);
        }
        catch (e) {
          throw data.statusText;
        }
      }
    });

  };

  self.patchEdge = function (edgeToPatch, patchData, callback) {
    $.ajax({
      cache: false,
      type: "PUT",
      url: api.edges + edgeToPatch._id,
      data: JSON.stringify(patchData),
      dataType: "json",
      contentType: "application/json",
      processData: false,
      success: function() {
        edgeToPatch._data = $.extend(edgeToPatch._data, patchData);
        callback();
      },
      error: function(data) {
        var text = "";
        try {
          text = JSON.parse(data.responseText).errorMessage + ' (' + JSON.parse(data.responseText).errorNum + ')';
          arangoHelper.arangoError(data.statusText, text);
        }
        catch (e) {
          throw data.statusText;
        }
      }
    });
  };

  self.createNode = function (nodeToAdd, callback) {
    $.ajax({
      cache: false,
      type: "POST",
      url: api.vertices + selectedNodeCol,
      data: JSON.stringify(nodeToAdd),
      dataType: "json",
      contentType: "application/json",
      processData: false,
      success: function(data) {
        if (data.error === false) {
          nodeToAdd._key = data.vertex._key;
          nodeToAdd._id = data.vertex._id;
          nodeToAdd._rev = data.vertex._rev;
          absAdapter.insertNode(nodeToAdd);
          callback(nodeToAdd);
        }
      },
      error: function(data) {
        var text = "";
        try {
          text = JSON.parse(data.responseText).errorMessage + ' (' + JSON.parse(data.responseText).errorNum + ')';
          arangoHelper.arangoError(data.statusText, text);
        }
        catch (e) {
          throw data.statusText;
        }
      }
    });
  };

  self.deleteNode = function (nodeToRemove, callback) {
    $.ajax({
      cache: false,
      type: "DELETE",
      url: api.vertices + nodeToRemove._id,
      dataType: "json",
      contentType: "application/json",
      processData: false,
      success: function() {
        absAdapter.removeEdgesForNode(nodeToRemove);
        absAdapter.removeNode(nodeToRemove);
        if (callback !== undefined && _.isFunction(callback)) {
          callback();
        }
      },
      error: function(data) {
        var text = "";
        try {
          text = JSON.parse(data.responseText).errorMessage + ' (' + JSON.parse(data.responseText).errorNum + ')';
          arangoHelper.arangoError(data.statusText, text);
        }
        catch (e) {
          throw data.statusText;
        }
      }
    });
  };

  self.patchNode = function (nodeToPatch, patchData, callback) {
    $.ajax({
      cache: false,
      type: "PUT",
      url: api.vertices + nodeToPatch._id,
      data: JSON.stringify(patchData),
      dataType: "json",
      contentType: "application/json",
      processData: false,
      success: function() {
        nodeToPatch._data = $.extend(nodeToPatch._data, patchData);
        callback(nodeToPatch);
      },
      error: function(data) {
        throw data.statusText;
      }
    });
  };

  self.changeToGraph = function (name, dir) {
    absAdapter.cleanUp();
    setGraphName(name);
    if (dir !== undefined) {
      if (dir === true) {
        direction = "any";
      } else {
        direction = "outbound";
      }
    }
  };

  self.setNodeLimit = function (pLimit, callback) {
    absAdapter.setNodeLimit(pLimit, callback);
  };

  self.setChildLimit = function (pLimit) {
    absAdapter.setChildLimit(pLimit);
  };

  self.expandCommunity = function (commNode, callback) {
    absAdapter.expandCommunity(commNode);
    if (callback !== undefined) {
      callback();
    }
  };

  self.getGraphs = function(callback) {
    if (callback && callback.length >= 1) {
      sendQuery(
        queries.getAllGraphs,
        {},
        callback
      );
    }
  };

  self.getAttributeExamples = function(callback) {
    if (callback && callback.length >= 1) {
      var ret = [ ];
      var collections = _.shuffle(self.getNodeCollections()), i;
      for (i = 0; i < collections.length; ++i) {
        var l = getNRandom(10, collections[i]);

        //count vertices of graph
        $.ajax({
          cache: false,
          type: 'GET',
          async: false,
          url: "/_api/collection/" + encodeURIComponent(collections[i]) + "/count",
          contentType: "application/json",
          success: function(data) {
            self.TOTAL_NODES = self.TOTAL_NODES + data.count;
          }
        });

        if (l.length > 0) {
          ret = ret.concat(_.flatten(
           _.map(l, function(o) {
             return _.keys(o);
           })
          ));
        }
      }
          
      var ret = _.sortBy(
        _.uniq(ret), function(e) {
          return e.toLowerCase();
        }
      );

      callback(ret);
    }
  };


  self.getEdgeCollections = function() {
    return edgeCollections;
  };

  self.getSelectedEdgeCollection = function() {
    return selectedEdgeCol;
  };

  self.useEdgeCollection = function(name) {
    if (!_.contains(edgeCollections, name)) {
      throw "Collection " + name + " is not available in the graph.";
    }
    selectedEdgeCol = name;
  };

  self.getNodeCollections = function() {
    return nodeCollections;
  };

  self.getSelectedNodeCollection = function() {
    return selectedNodeCol;
  };

  self.useNodeCollection = function(name) {
    if (!_.contains(nodeCollections, name)) {
      throw "Collection " + name + " is not available in the graph.";
    }
    selectedNodeCol = name;
  };

  self.getDirection = function () {
    return direction;
  };

  self.getGraphName = function () {
    return graphName;
  };

  self.setWidth = absAdapter.setWidth;
  self.changeTo = absAdapter.changeTo;
  self.getPrioList = absAdapter.getPrioList;
}

/*global _*/
////////////////////////////////////////////////////////////////////////////////
/// @brief Graph functionality
///
/// @file
///
/// DISCLAIMER
///
/// Copyright 2010-2012 triagens GmbH, Cologne, Germany
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///
///     http://www.apache.org/licenses/LICENSE-2.0
///
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// Copyright holder is triAGENS GmbH, Cologne, Germany
///
/// @author Michael Hackstein
/// @author Copyright 2011-2013, triAGENS GmbH, Cologne, Germany
////////////////////////////////////////////////////////////////////////////////

function ModularityJoiner() {
  "use strict";

  var
  // Copy of underscore.js. importScripts doesn't work
    breaker = {},
    nativeForEach = Array.prototype.forEach,
    nativeKeys = Object.keys,
    nativeIsArray = Array.isArray,
    toString = Object.prototype.toString,
    nativeIndexOf = Array.prototype.indexOf,
    nativeMap = Array.prototype.map,
    nativeSome = Array.prototype.some,
    _ = {
      isArray: nativeIsArray || function(obj) {
        return toString.call(obj) === '[object Array]';
      },
      isFunction: function(obj) {
        return typeof obj === 'function';
      },
      isString: function(obj) {
        return toString.call(obj) === '[object String]';
      },
      each: function(obj, iterator, context) {
        if (obj === null || obj === undefined) {
          return;
        }
        var i, l, key;
        if (nativeForEach && obj.forEach === nativeForEach) {
          obj.forEach(iterator, context);
        } else if (obj.length === +obj.length) {
          for (i = 0, l = obj.length; i < l; i++) {
            if (iterator.call(context, obj[i], i, obj) === breaker) {
              return;
            }
          }
        } else {
          for (key in obj) {
            if (obj.hasOwnProperty(key)) {
              if (iterator.call(context, obj[key], key, obj) === breaker) {
                return;
              }
            }
          }
        }
      },
      keys: nativeKeys || function(obj) {
        if (typeof obj !== "object" || Array.isArray(obj)) {
          throw new TypeError('Invalid object');
        }
        var keys = [], key;
        for (key in obj) {
          if (obj.hasOwnProperty(key)) {
            keys[keys.length] = key;
          }
        }
        return keys;
      },
      min: function(obj, iterator, context) {
        if (!iterator && _.isArray(obj) && obj[0] === +obj[0] && obj.length < 65535) {
          return Math.min.apply(Math, obj);
        }
        if (!iterator && _.isEmpty(obj)) {
          return Infinity;
        }
        var result = {computed : Infinity, value: Infinity};
        _.each(obj, function(value, index, list) {
          var computed = iterator ? iterator.call(context, value, index, list) : value;
          if (computed < result.computed) {
            result = {value : value, computed : computed};
          }
        });
        return result.value;
      },
      map: function(obj, iterator, context) {
        var results = [];
        if (obj === null) {
          return results;
        }
        if (nativeMap && obj.map === nativeMap) {
          return obj.map(iterator, context);
        }
        _.each(obj, function(value, index, list) {
          results[results.length] = iterator.call(context, value, index, list);
        });
        return results;
      },
      pluck: function(obj, key) {
        return _.map(obj, function(value){ return value[key]; });
      },
      uniq: function(array, isSorted, iterator, context) {
        if (_.isFunction(isSorted)) {
          context = iterator;
          iterator = isSorted;
          isSorted = false;
        }
        var initial = iterator ? _.map(array, iterator, context) : array,
          results = [],
          seen = [];
        _.each(initial, function(value, index) {
          if (isSorted) {
            if (!index || seen[seen.length - 1] !== value) {
              seen.push(value);
              results.push(array[index]);
            }
          } else if (!_.contains(seen, value)) {
            seen.push(value);
            results.push(array[index]);
          }
        });
        return results;
      },
      union: function() {
        return _.uniq(Array.prototype.concat.apply(Array.prototype, arguments));
      },
      isEmpty: function(obj) {
        var key;
        if (obj === null) {
          return true;
        }
        if (_.isArray(obj) || _.isString(obj)) {
          return obj.length === 0;
        }
        for (key in obj) {
          if (obj.hasOwnProperty(key)) {
            return false;
          }
        }
        return true;
      },
      any: function(obj, iterator, context) {
        iterator =  iterator || _.identity;
        var result = false;
        if (obj === null) {
          return result;
        }
        if (nativeSome && obj.some === nativeSome) {
          return obj.some(iterator, context);
        }
        _.each(obj, function(value, index, list) {
          if (result) {
            return breaker;
          }
          result = iterator.call(context, value, index, list);
          return breaker;
        });
        return !!result;
      },
      contains: function(obj, target) {
        if (obj === null) {
          return false;
        }
        if (nativeIndexOf && obj.indexOf === nativeIndexOf) {
          return obj.indexOf(target) !== -1;
        }
        return _.any(obj, function(value) {
          return value === target;
        });
      },
      values: function(obj) {
        var values = [], key;
        for (key in obj) {
          if (obj.hasOwnProperty(key)) {
            values.push(obj[key]);
          }
        }
        return values;
      }
    },
    matrix = {},
    backwardMatrix = {},
    degrees = {},
    m = 0,
    revM = 0,
    a = null,
    dQ = null,
    heap = null,
    isRunning = false,
    comms = {},

    ////////////////////////////////////
    // Private functions              //
    ////////////////////////////////////

    setHeapToMax = function(id) {
      var maxT,
        maxV = Number.NEGATIVE_INFINITY;
      _.each(dQ[id], function(v, t) {
        if (maxV < v) {
          maxV = v;
          maxT = t;
        }
      });
      if (maxV < 0) {
        delete heap[id];
        return;
      }
      heap[id] = maxT;
    },

    setHeapToMaxInList = function(l, id) {
      setHeapToMax(id);
    },

    isSetDQVal = function(i, j) {
      if (i < j) {
        return dQ[i] && dQ[i][j];
      }
      return dQ[j] && dQ[j][i];
    },

    // This does not check if everything exists,
    // do it before!
    getDQVal = function(i, j) {
      if (i < j) {
        return dQ[i][j];
      }
      return dQ[j][i];
    },

    setDQVal = function(i, j, v) {
      if (i < j) {
        dQ[i] = dQ[i] || {};
        dQ[i][j] = v;
        return;
      }
      dQ[j] = dQ[j] || {};
      dQ[j][i] = v;
    },

    delDQVal = function(i, j) {
      if (i < j) {
        if (!dQ[i]) {
          return;
        }
        delete dQ[i][j];
        if (_.isEmpty(dQ[i])) {
          delete dQ[i];
        }
        return;
      }
      if (i === j) {
        return;
      }
      delDQVal(j, i);
    },

    updateHeap = function(i, j) {
      var hv, val;
      if (i < j) {
        if (!isSetDQVal(i, j)) {
          setHeapToMax(i);
          return;
        }
        val = getDQVal(i, j);
        if (heap[i] === j) {
          setHeapToMax(i);
          return;
        }
        if (!isSetDQVal(i, heap[i])) {
          setHeapToMax(i);
          return;
        }
        hv = getDQVal(i, heap[i]);
        if (hv < val) {
          heap[i] = j;
        }
        return;
      }
      if (i === j) {
        return;
      }
      updateHeap(j, i);
    },

    updateDegrees = function(low, high) {
      a[low]._in += a[high]._in;
      a[low]._out += a[high]._out;
      delete a[high];
    },

    insertEdge = function(s, t) {
      matrix[s] = matrix[s] || {};
      matrix[s][t] = (matrix[s][t] || 0) + 1;
      backwardMatrix[t] = backwardMatrix[t] || {};
      backwardMatrix[t][s] = (backwardMatrix[t][s] || 0) + 1;
      degrees[s] = degrees[s] || {_in: 0, _out:0};
      degrees[t] = degrees[t] || {_in: 0, _out:0};
      degrees[s]._out++;
      degrees[t]._in++;
      m++;
      revM = Math.pow(m, -1);
    },

    deleteEdge = function(s, t) {
      if (matrix[s]) {
        matrix[s][t]--;
        if (matrix[s][t] === 0) {
          delete matrix[s][t];
        }
        backwardMatrix[t][s]--;
        if (backwardMatrix[t][s] === 0) {
          delete backwardMatrix[t][s];
        }
        degrees[s]._out--;
        degrees[t]._in--;
        m--;
        if (m > 0) {
          revM = Math.pow(m, -1);
        } else {
          revM = 0;
        }
        if (_.isEmpty(matrix[s])) {
          delete matrix[s];
        }
        if (_.isEmpty(backwardMatrix[t])) {
          delete backwardMatrix[t];
        }
        if (degrees[s]._in === 0 && degrees[s]._out === 0) {
          delete degrees[s];
        }
        if (degrees[t]._in === 0 && degrees[t]._out === 0) {
          delete degrees[t];
        }
      }
    },

    makeInitialDegrees = function() {
      a = {};
      _.each(degrees, function (n, id) {
        a[id] = {
          _in: n._in / m,
          _out: n._out / m
        };
      });
      return a;
    },

    notConnectedPenalty = function(s, t) {
      return a[s]._out * a[t]._in + a[s]._in * a[t]._out;
    },

    neighbors = function(sID) {
      var outbound = _.keys(matrix[sID] || {}),
        inbound = _.keys(backwardMatrix[sID] || {});
      return _.union(outbound, inbound);
    },

    makeInitialDQ = function() {
      dQ = {};
      _.each(matrix, function(tars, s) {
        var bw = backwardMatrix[s] || {},
          keys = neighbors(s);
        _.each(keys, function(t) {
          var ast = (tars[t] || 0),
            value;
          ast += (bw[t] || 0);
          value = ast * revM - notConnectedPenalty(s, t);
          if (value > 0) {
            setDQVal(s, t, value);
          }
          return;
        });
      });

    },

    makeInitialHeap = function() {
      heap = {};
      _.each(dQ, setHeapToMaxInList);
      return heap;
    },

    // i < j && i != j != k
    updateDQAndHeapValue = function (i, j, k) {
      var val;
      if (isSetDQVal(k, i)) {
        val = getDQVal(k, i);
        if (isSetDQVal(k, j)) {
          val += getDQVal(k, j);
          setDQVal(k, i, val);
          delDQVal(k, j);
          updateHeap(k, i);
          updateHeap(k, j);
          return;
        }
        val -= notConnectedPenalty(k, j);
        if (val < 0) {
          delDQVal(k, i);
        }
        updateHeap(k, i);
        return;
      }
      if (isSetDQVal(k, j)) {
        val = getDQVal(k, j);
        val -= notConnectedPenalty(k, i);
        if (val > 0) {
          setDQVal(k, i, val);
        }
        updateHeap(k, i);
        delDQVal(k, j);
        updateHeap(k, j);
      }
    },

    updateDQAndHeap = function (low, high) {
      _.each(dQ, function (list, s) {
        if (s === low || s === high) {
          _.each(list, function(v, t) {
            if (t === high) {
              delDQVal(low, high);
              updateHeap(low, high);
              return;
            }
            updateDQAndHeapValue(low, high, t);
          });
          return;
        }
        updateDQAndHeapValue(low, high, s);
      });
    },

  ////////////////////////////////////
  // getters                        //
  ////////////////////////////////////

  getAdjacencyMatrix = function() {
    return matrix;
  },

  getHeap = function() {
    return heap;
  },

  getDQ = function() {
    return dQ;
  },

  getDegrees = function() {
    return a;
  },

  getCommunities = function() {
    return comms;
  },

  getBest = function() {
    var bestL, bestS, bestV = Number.NEGATIVE_INFINITY;
    _.each(heap, function(lID, sID) {
      if (bestV < dQ[sID][lID]) {
        bestL = lID;
        bestS = sID;
        bestV = dQ[sID][lID];
      }
    });
    if (bestV <= 0) {
      return null;
    }
    return {
      sID: bestS,
      lID: bestL,
      val: bestV
    };
  },

  getBestCommunity = function (communities) {
    var bestQ = Number.NEGATIVE_INFINITY,
      bestC;
    _.each(communities, function (obj) {
      if (obj.q > bestQ) {
        bestQ = obj.q;
        bestC = obj.nodes;
      }
    });
    return bestC;
  },

  ////////////////////////////////////
  // setup                          //
  ////////////////////////////////////

  setup = function() {
    makeInitialDegrees();
    makeInitialDQ();
    makeInitialHeap();
    comms = {};
  },


  ////////////////////////////////////
  // computation                    //
  ////////////////////////////////////

  joinCommunity = function(comm) {
    var s = comm.sID,
      l = comm.lID,
      q = comm.val;

    comms[s] = comms[s] || {nodes: [s], q: 0};
    if (comms[l]) {
      comms[s].nodes = comms[s].nodes.concat(comms[l].nodes);
      comms[s].q += comms[l].q;
      delete comms[l];
    } else {
      comms[s].nodes.push(l);
    }
    comms[s].q += q;
    updateDQAndHeap(s, l);
    updateDegrees(s, l);
  },

  //////////////////////////////////////////////
  // Evaluate value of community by distance  //
  //////////////////////////////////////////////

  floatDistStep = function(dist, depth, todo) {
    if (todo.length === 0) {
      return true;
    }
    var nextTodo = [];
    _.each(todo, function(t) {
      if (dist[t] !== Number.POSITIVE_INFINITY) {
        return;
      }
      dist[t] = depth;
      nextTodo = nextTodo.concat(neighbors(t));
    });
    return floatDistStep(dist, depth+1, nextTodo);
  },

  floatDist = function(sID) {
    var dist = {};
    _.each(matrix, function(u, n) {
      dist[n] = Number.POSITIVE_INFINITY;
    });
    dist[sID] = 0;
    if (floatDistStep(dist, 1, neighbors(sID))) {
      return dist;
    }
    throw "FAIL!";
  },

  minDist = function(dist) {
    return function(a) {
      return dist[a];
    };
  },

  ////////////////////////////////////
  // Get only the Best Community    //
  ////////////////////////////////////

  getCommunity = function(limit, focus) {
    var coms = {},
      res = [],
      dist = {},
      best,
      sortByDistance = function (a, b) {
        var d1 = dist[_.min(a,minDist(dist))],
          d2 = dist[_.min(b,minDist(dist))],
          val = d2 - d1;
        if (val === 0) {
          val = coms[b[b.length-1]].q - coms[a[a.length-1]].q;
        }
        return val;
      };
    setup();
    best = getBest();
    while (best !== null) {
      joinCommunity(best);
      best = getBest();
    }
    coms = getCommunities();
    if (focus !== undefined) {
      _.each(coms, function(obj, key) {
        if (_.contains(obj.nodes, focus)) {
          delete coms[key];
        }
      });

      res = _.pluck(_.values(coms), "nodes");
      dist = floatDist(focus);
      res.sort(sortByDistance);
      return res[0];
    }
    return getBestCommunity(coms);
  };

  ////////////////////////////////////
  // Public functions               //
  ////////////////////////////////////

  this.insertEdge = insertEdge;

  this.deleteEdge = deleteEdge;

  this.getAdjacencyMatrix = getAdjacencyMatrix;

  this.getHeap = getHeap;

  this.getDQ = getDQ;

  this.getDegrees = getDegrees;

  this.getCommunities = getCommunities;

  this.getBest = getBest;

  this.setup = setup;

  this.joinCommunity = joinCommunity;

  this.getCommunity = getCommunity;
}

/*global _*/
////////////////////////////////////////////////////////////////////////////////
/// @brief Graph functionality
///
/// @file
///
/// DISCLAIMER
///
/// Copyright 2010-2012 triagens GmbH, Cologne, Germany
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///
///     http://www.apache.org/licenses/LICENSE-2.0
///
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// Copyright holder is triAGENS GmbH, Cologne, Germany
///
/// @author Michael Hackstein
/// @author Copyright 2011-2013, triAGENS GmbH, Cologne, Germany
////////////////////////////////////////////////////////////////////////////////

function NodeReducer(prioList) {
  "use strict";

  prioList = prioList || [];

  var

    ////////////////////////////////////
    // Private functions              //
    ////////////////////////////////////

    /////////////////////////////
    // Functions for Buckets   //
    /////////////////////////////

   addNode = function(bucket, node) {
     bucket.push(node);
   },

   getSimilarityValue = function(bucketContainer, node) {
     if (!bucketContainer.reason.example) {
       bucketContainer.reason.example = node;
       return 1;
     }
     var data = node._data || {},
       comp = bucketContainer.reason.example._data || {},
       props = _.union(_.keys(comp), _.keys(data)),
       countMatch = 0,
       propCount = 0;
     _.each(props, function(key) {
       if (comp[key] !== undefined && data[key] !== undefined) {
         countMatch++;
         if (comp[key] === data[key]) {
           countMatch += 4;
         }
       }
     });
     propCount = props.length * 5;
     propCount++;
     countMatch++;
     return countMatch / propCount;
   },

   getPrioList = function() {
     return prioList;
   },

   changePrioList = function (list) {
     prioList = list;
   },

   bucketByPrioList = function (toSort, numBuckets) {
     var res = {},
       resArray = [];
     _.each(toSort, function(n) {
       var d = n._data,
         sortTo = {},
         key,
         resKey,
         i = 0;
       for (i = 0; i < prioList.length; i++) {
         key = prioList[i];
         if (d[key] !== undefined) {
           resKey = d[key];
           res[key] = res[key] || {};
           res[key][resKey] = res[key][resKey] || [];
           res[key][resKey].push(n);
           return;
         }
       }
       resKey = "default";
       res[resKey] = res[resKey] || [];
       res[resKey].push(n);
     });
     _.each(res, function(list, key) {
       _.each(list, function(list, value) {
         var reason = {
           key: key,
           value: value,
           text: key + ": " + value
         };
         resArray.push({
           reason: reason,
           nodes: list
         });
       });
     });
     return resArray;
   },

  bucketNodes = function(toSort, numBuckets) {

    var res = [],
    threshold = 0.5;
    if (toSort.length <= numBuckets) {
      res = _.map(toSort, function(n) {
        return {
          reason: {
            type: "single",
            text: "One Node"
          },
          nodes: [n]
        };
      });
      return res;
    }
    if (!_.isEmpty(prioList)) {
      return bucketByPrioList(toSort, numBuckets);
    }
    _.each(toSort, function(n) {
      var i, shortest, sLength;
      shortest = 0;
      sLength = Number.POSITIVE_INFINITY;
      for (i = 0; i < numBuckets; i++) {
        res[i] = res[i] || {
          reason: {
            type: "similar",
            text: "Similar Nodes"
          },
          nodes: []
        };
        if (getSimilarityValue(res[i], n) > threshold) {
          addNode(res[i].nodes, n);
          return;
        }
        if (sLength > res[i].nodes.length) {
          shortest = i;
          sLength = res[i].nodes.length;
        }
      }
      addNode(res[shortest].nodes, n);
    });
    return res;
  };

  ////////////////////////////////////
  // Public functions               //
  ////////////////////////////////////

  this.bucketNodes = bucketNodes;

  this.changePrioList = changePrioList;

  this.getPrioList = getPrioList;

}

/*global $, _, d3*/
/*global ColourMapper, ContextMenu*/
////////////////////////////////////////////////////////////////////////////////
/// @brief Graph functionality
///
/// @file
///
/// DISCLAIMER
///
/// Copyright 2010-2012 triagens GmbH, Cologne, Germany
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///
///     http://www.apache.org/licenses/LICENSE-2.0
///
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// Copyright holder is triAGENS GmbH, Cologne, Germany
///
/// @author Michael Hackstein
/// @author Copyright 2011-2013, triAGENS GmbH, Cologne, Germany
////////////////////////////////////////////////////////////////////////////////




/*
* flags example format:
* {
*   shape: {
*     type: NodeShaper.shapes.CIRCLE,
*     radius: value || function(node)
*   },
*   label: "key" || function(node),
*   actions: {
*     "click": function(node),
*     "drag": function(node)
*   },
*   update: function(node)
* }
*
* {
*   shape: {
*     type: NodeShaper.shapes.RECT,
*     width: value || function(node),
*     height: value || function(node),
*   },
*   label: "key" || function(node),
*   actions: {
*     "click": function(node),
*     "drag": function(node)
*   },
*   update: function(node)
* }
*
* <image x="0" y="0" height="1140" width="1040" xlink:href="like_a_sir_original.svg"/>
*
* {
*   shape: {
*     type: NodeShaper.shapes.IMAGE,
*     width: value || function(node),
*     height: value || function(node),
*   },
*   actions: {
*     "click": function(node),
*     "drag": function(node)
*   },
*   update: function(node)
* }
*
*/
function NodeShaper(parent, flags, idfunc) {
  "use strict";

  var self = this,
    nodes = [],
    visibleLabels = true,
    contextMenu = new ContextMenu("gv_node_cm"),
    findFirstValue = function(list, data) {
      if (_.isArray(list)) {
        return data[_.find(list, function(val) {
          return data[val];
        })];
      }
      return data[list];
    },
    splitLabel = function(label) {
      if (label === undefined) {
        return [""];
      }
      if (typeof label !== "string") {
        label = String(label);
      }
      var chunks = label.match(/[\w\W]{1,10}(\s|$)|\S+?(\s|$)/g);
      chunks[0] = $.trim(chunks[0]);
      chunks[1] = $.trim(chunks[1]);
      if (chunks[0].length > 12) {
        //chunks[0] = $.trim(label.substring(0,10)) + "-";
        chunks[0] = $.trim(label.substring(0,10));
        chunks[1] = $.trim(label.substring(10));
        if (chunks[1].length > 12) {
          chunks[1] = chunks[1].split(/\W/)[0];
          if (chunks[1].length > 2) {
            chunks[1] = chunks[1].substring(0,5) + "...";
          }
        }
        chunks.length = 2;
      }
      if (chunks.length > 2) {
        chunks.length = 2;
        chunks[1] += "...";
      }
      return chunks;
    },
    noop = function (node) {

    },
    start = noop,
    defaultDistortion = function(n) {
      return {
        x: n.x,
        y: n.y,
        z: 1
      };
    },
    distortion = defaultDistortion,
    addDistortion = function() {
      _.each(nodes, function(n) {
        n.position = distortion(n);
        if (n._isCommunity) {
          n.addDistortion(distortion);
        }
      });
    },
    colourMapper = new ColourMapper(),
    resetColourMap = function() {
      colourMapper.reset();
    },
    events,
    addUpdate,
    idFunction = function(d) {
      return d._id;
    },
    addColor = noop,
    addShape = noop,
    addLabel = noop,
    addLabelColor = function() {return "black";},

    unbindEvents = function() {
      // Hard unbind the dragging
      self.parent
        .selectAll(".node")
        .on("mousedown.drag", null);
      events = {
        click: noop,
        dblclick: noop,
        drag: noop,
        mousedown: noop,
        mouseup: noop,
        mousemove: noop,
        mouseout: noop,
        mouseover: noop
      };
      addUpdate = noop;
    },

    addEvents = function (nodes) {
      _.each(events, function (func, type) {
        if (type === "drag") {
          nodes.call(func);
        } else {
          nodes.on(type, func);
        }

      });
    },

    addQue = function (g) {
      var community = g.filter(function(n) {
          return n._isCommunity;
        }),
        normal = g.filter(function(n) {
          return !n._isCommunity;
        });
      addShape(normal);
      community.each(function(c) {
        c.shapeNodes(d3.select(this), addShape, addQue, start, colourMapper);
      });
      if (visibleLabels) {
        addLabel(normal);
      }
      addColor(normal);
      addEvents(normal);
      addDistortion();
    },

    bindEvent = function (type, func) {
      if (type === "update") {
        addUpdate = func;
      } else if (events[type] === undefined) {
        throw "Sorry Unknown Event " + type + " cannot be bound.";
      } else {
        events[type] = func;
      }
    },

    updateNodes = function () {
      var nodes = self.parent.selectAll(".node");
      addDistortion();
      nodes.attr("transform", function(d) {
        return "translate(" + d.position.x + "," + d.position.y + ")scale(" + d.position.z + ")";
      });
      addUpdate(nodes);
    },

    shapeNodes = function (newNodes) {
      if (newNodes !== undefined) {
        nodes = newNodes;
      }
      var g = self.parent
        .selectAll(".node")
        .data(nodes, idFunction);
      // Append the group and class to all new
      g.enter()
        .append("g")
        .attr("class", function(d) {
          if (d._isCommunity) {
            return "node communitynode";
          }
          return "node";
        }) // node is CSS class that might be edited
        .attr("id", idFunction);
      // Remove all old
      g.exit().remove();
      g.selectAll("* > *").remove();
      addQue(g);
      updateNodes();
      contextMenu.bindMenu($(".node"));
    },

    parseShapeFlag = function (shape) {
      var radius, width, height, translateX, translateY,
        fallback, source;
      switch (shape.type) {
        case NodeShaper.shapes.NONE:
          addShape = noop;
          break;
        case NodeShaper.shapes.CIRCLE:
          radius = shape.radius || 25;
          addShape = function (node, shift) {
            node
              .append("circle") // Display nodes as circles
              .attr("r", radius); // Set radius
            if (shift) {
              node.attr("cx", -shift)
                .attr("cy", -shift);
            }
          };
          break;
        case NodeShaper.shapes.RECT:
          width = shape.width || 90;
          height = shape.height || 36;
          if (_.isFunction(width)) {
            translateX = function(d) {
              return -(width(d) / 2);
            };
          } else {
            translateX = function(d) {
              return -(width / 2);
            };
          }
          if (_.isFunction(height)) {
            translateY = function(d) {
              return -(height(d) / 2);
            };
          } else {
            translateY = function() {
              return -(height / 2);
            };
          }
          addShape = function(node, shift) {
            shift = shift || 0;
            node.append("rect") // Display nodes as rectangles
              .attr("width", width) // Set width
              .attr("height", height) // Set height
              .attr("x", function(d) { return translateX(d) - shift;})
              .attr("y", function(d) { return translateY(d) - shift;})
              .attr("rx", "8")
              .attr("ry", "8");
          };
          break;
        case NodeShaper.shapes.IMAGE:
          width = shape.width || 32;
          height = shape.height || 32;
          fallback = shape.fallback || "";
          source = shape.source || fallback;
          if (_.isFunction(width)) {
            translateX = function(d) {
              return -(width(d) / 2);
            };
          } else {
            translateX = -(width / 2);
          }
          if (_.isFunction(height)) {
            translateY = function(d) {
              return -(height(d) / 2);
            };
          } else {
            translateY = -(height / 2);
          }
          addShape = function(node) {
            var img = node.append("image") // Display nodes as images
              .attr("width", width) // Set width
              .attr("height", height) // Set height
              .attr("x", translateX)
              .attr("y", translateY);
            if (_.isFunction(source)) {
              img.attr("xlink:href", source);
            } else {
              img.attr("xlink:href", function(d) {
                if (d._data[source]) {
                  return d._data[source];
                }
                return fallback;
              });
            }
          };
          break;
        case undefined:
          break;
        default:
          throw "Sorry given Shape not known!";
      }
    },

    adjustLabelFontSize = function (nodes) {
      var texts = [], childText = '';

      _.each(nodes, function(node) {
        texts = $(node).find('text');

        $(node).css("width", "90px");
        $(node).css("height", "36px");

         $(node).textfill({
           innerTag: 'text',
           maxFontPixels: 16,
           minFontPixels: 10,
           explicitWidth: 90,
           explicitHeight: 36,
         });
      });
    },

    parseLabelFlag = function (label) {
      if (_.isFunction(label)) {
        addLabel = function (node) {
          var textN = node.append("text") // Append a label for the node
            .attr("text-anchor", "middle") // Define text-anchor
            .attr("fill", addLabelColor) // Force a black color
            .attr("stroke", "none"); // Make it readable
            textN.each(function(d) {
              var chunks = splitLabel(label(d));
              var title = chunks[0];
              if (chunks.length === 2) {
                title = title + chunks[1];
              }
              if (title.length > 15) {
                title = title.substring(0, 13) + "...";
              }
              if (title === undefined || title === '') {
                title = "ATTR NOT SET";
              }
              d3.select(this).append("tspan")
                .attr("x", "0")
                .attr("dy", "5")
                .text(title);
              /*if (chunks.length === 2) {
                d3.select(this).append("tspan")
                  .attr("x", "0")
                  .attr("dy", "16")
                  .text(chunks[1]);
              }*/
            });
          adjustLabelFontSize(node);
        };
      } else {
        addLabel = function (node) {
          var textN = node.append("text") // Append a label for the node
            .attr("text-anchor", "middle") // Define text-anchor
            .attr("fill", addLabelColor) // Force a black color
            .attr("stroke", "none"); // Make it readable
          textN.each(function(d) {
            var chunks = splitLabel(findFirstValue(label, d._data));
            var title = chunks[0];
            if (chunks.length === 2) {
              title = title + chunks[1];
            }
            if (title.length > 15) {
              title = title.substring(0, 13) + "...";
            }
            if (title === undefined || title === '') {
              title = "ATTR NOT SET";
            }
            d3.select(this).append("tspan")
              .attr("x", "0")
              .attr("dy", "5")
              .text(title);
            /*if (chunks.length === 2) {
              d3.select(this).append("tspan")
                .attr("x", "0")
                .attr("dy", "16")
                .text(chunks[1]);
            }*/
          });
          adjustLabelFontSize(node);
        };
      }
    },

    parseActionFlag = function (actions) {
      if (actions.reset !== undefined && actions.reset) {
        unbindEvents();
      }
      _.each(actions, function(func, type) {
        if (type !== "reset") {
          bindEvent(type, func);
        }
      });
    },

    parseColorFlag = function (color) {
      resetColourMap();
      switch (color.type) {
        case "single":
          addColor = function (g) {
            g.attr("fill", color.fill);
          };
          addLabelColor = function (d) {
            return color.stroke;
          };
          break;
        case "expand":
          addColor = function (g) {
            g.attr("fill", function(n) {
              if (n._expanded) {
                return color.expanded;
              }
              return color.collapsed;
            });
          };
          addLabelColor = function (d) {
            return "white";
          };
          break;
        case "attribute":
          addColor = function (g) {
             g.attr("fill", function(n) {
               if (n._data === undefined) {
                 return colourMapper.getCommunityColour();
               }
               return colourMapper.getColour(findFirstValue(color.key, n._data));
             }).attr("stroke", function(n) {
               if (!n._expanded) {
                 // if node is not expanded
                 return "transparent";
               }
               // if node is expanded
               return "#fff";
             }).attr("fill-opacity", function(n) {
               if (!n._expanded) {
                 // if node is not expanded
                 return "0.3";
               }
               // if node is expanded
               return "1";
             });
          };
          addLabelColor = function (n) {
            if (n._data === undefined) {
              return colourMapper.getForegroundCommunityColour();
            }
            return colourMapper.getForegroundColour(findFirstValue(color.key, n._data));
          };
          break;
        default:
          throw "Sorry given colour-scheme not known";
      }
    },

    parseDistortionFlag = function (dist) {
      if (dist === "reset") {
        distortion = defaultDistortion;
      } else if (_.isFunction(dist)) {
        distortion = dist;
      } else {
        throw "Sorry distortion cannot be parsed.";
      }
    },

    parseConfig = function(config) {
      if (config.shape !== undefined) {
        parseShapeFlag(config.shape);
      }
      if (config.label !== undefined) {
        parseLabelFlag(config.label);
        self.label = config.label;
      }
      if (config.actions !== undefined) {
        parseActionFlag(config.actions);
      }
      if (config.color !== undefined) {
        parseColorFlag(config.color);
        self.color = config.color;
      }
      if (config.distortion !== undefined) {
        parseDistortionFlag(config.distortion);
      }
    };

  self.parent = parent;

  unbindEvents();

  if (flags === undefined) {
    flags = {};
  }

  if (flags.shape === undefined) {
   flags.shape = {
     type: NodeShaper.shapes.RECT
   };
  }

  if (flags.color === undefined) {
    flags.color = {
      type: "single",
      fill: "#333333",
      stroke: "white"
    };
  }

  if (flags.distortion === undefined) {
    flags.distortion = "reset";
  }

  parseConfig(flags);

  if (_.isFunction(idfunc)) {
    idFunction = idfunc;
  }


  /////////////////////////////////////////////////////////
  /// Public functions
  /////////////////////////////////////////////////////////

  self.changeTo = function(config) {
    parseConfig(config);
    shapeNodes();
  };

  self.drawNodes = function (nodes) {
    shapeNodes(nodes);
  };

  self.updateNodes = function () {
    updateNodes();
  };

  self.reshapeNodes = function() {
    shapeNodes();
  };

  self.activateLabel = function(toogle) {
    if (toogle) {
      visibleLabels = true;
    } else {
      visibleLabels = false;
    }
    shapeNodes();
  };

  self.getColourMapping = function() {
    return colourMapper.getList();
  };

  self.setColourMappingListener = function(callback) {
    colourMapper.setChangeListener(callback);
  };

  self.setGVStartFunction = function(func) {
    start = func;
  };

  self.getLabel = function() {
    return self.label || "";
  };

  self.getColor = function() {
    return self.color.key || "";
  };

  self.addMenuEntry = function(name, func) {
    contextMenu.addEntry(name, func);
  };

  self.resetColourMap = resetColourMap;
}

NodeShaper.shapes = Object.freeze({
  "NONE": 0,
  "CIRCLE": 1,
  "RECT": 2,
  "IMAGE": 3
});

/*global $, d3, _, console, document, window*/
/*global AbstractAdapter*/
////////////////////////////////////////////////////////////////////////////////
/// @brief Graph functionality
///
/// @file
///
/// DISCLAIMER
///
/// Copyright 2010-2012 triagens GmbH, Cologne, Germany
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///
///     http://www.apache.org/licenses/LICENSE-2.0
///
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// Copyright holder is triAGENS GmbH, Cologne, Germany
///
/// @author Michael Hackstein
/// @author Copyright 2011-2013, triAGENS GmbH, Cologne, Germany
////////////////////////////////////////////////////////////////////////////////

function PreviewAdapter(nodes, edges, viewer, config) {
  "use strict";

  if (nodes === undefined) {
    throw "The nodes have to be given.";
  }
  if (edges === undefined) {
    throw "The edges have to be given.";
  }
  if (viewer === undefined) {
    throw "A reference to the graph viewer has to be given.";
  }

  var self = this,
    absAdapter = new AbstractAdapter(nodes, edges, this, viewer),

    parseConfig = function(config) {
      if (config.width !== undefined) {
        absAdapter.setWidth(config.width);
      }
      if (config.height !== undefined) {
        absAdapter.setHeight(config.height);
      }
    },

    parseResult = function (result, callback) {
      var inserted = {},
        first = result.first;
      first = absAdapter.insertNode(first);
      _.each(result.nodes, function(n) {
        n = absAdapter.insertNode(n);
        inserted[n._id] = n;
      });
      _.each(result.edges, function(e) {
        absAdapter.insertEdge(e);
      });
      delete inserted[first._id];
      if (callback !== undefined && _.isFunction(callback)) {
        callback(first);
      }
    };

  config = config || {};

  parseConfig(config);

  self.loadInitialNode = function(nodeId, callback) {
    absAdapter.cleanUp();
    var cb = function(n) {
      callback(absAdapter.insertInitialNode(n));
    };
    self.loadNode(nodeId, cb);
  };

  self.loadNode = function(nodeId, callback) {
    var ns = [],
      es = [],
      result = {},
      n1 = {
        _id: 1,
        label: "Node 1",
        image: "img/stored.png"
      },
      n2 = {
        _id: 2,
        label: "Node 2"
      },
      n3 = {
        _id: 3,
        label: "Node 3"
      },
      n4 = {
        _id: 4,
        label: "Node 4"
      },
      n5 = {
        _id: 5,
        label: "Node 5"
      },
      e12 = {
        _id: "1-2",
        _from: 1,
        _to: 2,
        label: "Edge 1"
      },
      e13 = {
        _id: "1-3",
        _from: 1,
        _to: 3,
        label: "Edge 2"
      },
      e14 = {
        _id: "1-4",
        _from: 1,
        _to: 4,
        label: "Edge 3"
      },
      e15 = {
        _id: "1-5",
        _from: 1,
        _to: 5,
        label: "Edge 4"
      },
      e23 = {
        _id: "2-3",
        _from: 2,
        _to: 3,
        label: "Edge 5"
      };

    ns.push(n1);
    ns.push(n2);
    ns.push(n3);
    ns.push(n4);
    ns.push(n5);

    es.push(e12);
    es.push(e13);
    es.push(e14);
    es.push(e15);
    es.push(e23);

    result.first = n1;
    result.nodes = ns;
    result.edges = es;

    parseResult(result, callback);
  };

  self.explore = absAdapter.explore;

  self.requestCentralityChildren = function(nodeId, callback) {};

  self.createEdge = function (edgeToAdd, callback) {
    window.alert("Server-side: createEdge was triggered.");
  };

  self.deleteEdge = function (edgeToRemove, callback) {
    window.alert("Server-side: deleteEdge was triggered.");
  };

  self.patchEdge = function (edgeToPatch, patchData, callback) {
    window.alert("Server-side: patchEdge was triggered.");
  };

  self.createNode = function (nodeToAdd, callback) {
    window.alert("Server-side: createNode was triggered.");
  };

  self.deleteNode = function (nodeToRemove, callback) {
    window.alert("Server-side: deleteNode was triggered.");
    window.alert("Server-side: onNodeDelete was triggered.");
  };

  self.patchNode = function (nodeToPatch, patchData, callback) {
    window.alert("Server-side: patchNode was triggered.");
  };

  self.setNodeLimit = function (pLimit, callback) {
    absAdapter.setNodeLimit(pLimit, callback);
  };

  self.setChildLimit = function (pLimit) {
    absAdapter.setChildLimit(pLimit);
  };

  self.setWidth = absAdapter.setWidth;

  self.expandCommunity = function (commNode, callback) {
    absAdapter.expandCommunity(commNode);
    if (callback !== undefined) {
      callback();
    }
  };

}

/*global window, _*/
// These values are injected
/*global w:true, Construct, self*/
////////////////////////////////////////////////////////////////////////////////
/// @brief Graph functionality
///
/// @file
///
/// DISCLAIMER
///
/// Copyright 2010-2012 triagens GmbH, Cologne, Germany
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///
///     http://www.apache.org/licenses/LICENSE-2.0
///
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// Copyright holder is triAGENS GmbH, Cologne, Germany
///
/// @author Michael Hackstein
/// @author Copyright 2011-2013, triAGENS GmbH, Cologne, Germany
////////////////////////////////////////////////////////////////////////////////


function WebWorkerWrapper(Class, callback) {
  "use strict";

  if (Class === undefined) {
    throw "A class has to be given.";
  }

  if (callback === undefined) {
    throw "A callback has to be given.";
  }
  var args = Array.prototype.slice.call(arguments),
    exports = {},
    createInBlobContext = function() {
      var onmessage = function(e) {
        switch(e.data.cmd) {
          case "construct":
            try {
              w = new (Function.prototype.bind.apply(
                Construct, [null].concat(e.data.args)
              ))();
              if (w) {
                self.postMessage({
                  cmd: "construct",
                  result: true
                });
              } else {
                self.postMessage({
                  cmd: "construct",
                  result: false
                });
              }
            } catch (err) {
              self.postMessage({
                cmd: "construct",
                result: false,
                error: err.message || err
            });
            }
            break;
          default:
            var msg = {
              cmd: e.data.cmd
            },
            res;
            if (w && typeof w[e.data.cmd] === "function") {
              try {
                res = w[e.data.cmd].apply(w, e.data.args);
                if (res) {
                  msg.result = res;
                }
                self.postMessage(msg);
              } catch (err1) {
                msg.error = err1.message || err1;
                self.postMessage(msg);
              }
            } else {
              msg.error = "Method not known";
              self.postMessage(msg);
            }
        }
      },

      BlobObject = function(c) {
        var code = "var w, Construct = "
          + c.toString()
          + ";self.onmessage = "
          + onmessage.toString();
        return new window.Blob(code.split());
      },
      worker,
      url = window.webkitURL || window.URL,
      blobPointer = new BlobObject(Class);
    worker = new window.Worker(url.createObjectURL(blobPointer));
    worker.onmessage = callback;
    return worker;
  },
  Wrap = function() {
    return Class.apply(this, args);
  },
  worker;

  try {
    worker = createInBlobContext();
    exports.call = function(cmd) {
      var args = Array.prototype.slice.call(arguments);
      args.shift();
      worker.postMessage({
        cmd: cmd,
        args: args
      });
    };

    args.shift();
    args.shift();
    args.unshift("construct");
    exports.call.apply(this, args);
    return exports;
  } catch (e) {
    args.shift();
    args.shift();
    Wrap.prototype = Class.prototype;
    try {
      worker = new Wrap();
    } catch (err) {
      callback({
        data: {
          cmd: "construct",
          error: err
        }
      });
      return;
    }
    exports.call = function(cmd) {
      var args = Array.prototype.slice.call(arguments),
        resp = {
          data: {
            cmd: cmd
          }
        };
      if (!_.isFunction(worker[cmd])) {
        resp.data.error = "Method not known";
        callback(resp);
        return;
      }
      args.shift();
      try {
        resp.data.result = worker[cmd].apply(worker, args);
        callback(resp);
      } catch (e) {
        resp.data.error = e;
        callback(resp);
      }
    };
    callback({
      data: {
        cmd: "construct",
        result: true
      }
    });
    return exports;
  }
}

/*global $, _, d3*/
/*global ColourMapper*/
////////////////////////////////////////////////////////////////////////////////
/// @brief Graph functionality
///
/// @file
///
/// DISCLAIMER
///
/// Copyright 2010-2012 triagens GmbH, Cologne, Germany
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///
///     http://www.apache.org/licenses/LICENSE-2.0
///
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// Copyright holder is triAGENS GmbH, Cologne, Germany
///
/// @author Michael Hackstein
/// @author Copyright 2011-2013, triAGENS GmbH, Cologne, Germany
////////////////////////////////////////////////////////////////////////////////


function ZoomManager(width, height, svg, g, nodeShaper, edgeShaper, config, limitCallback) {
  "use strict";

  if (width === undefined || width < 0) {
    throw("A width has to be given.");
  }
  if (height === undefined || height < 0) {
    throw("A height has to be given.");
  }
  if (svg === undefined || svg.node === undefined || svg.node().tagName.toLowerCase() !== "svg") {
    throw("A svg has to be given.");
  }
  if (g === undefined || g.node === undefined || g.node().tagName.toLowerCase() !== "g") {
    throw("A group has to be given.");
  }
  if (
    nodeShaper === undefined
    || nodeShaper.activateLabel === undefined
    || nodeShaper.changeTo === undefined
    || nodeShaper.updateNodes === undefined
  ) {
    throw("The Node shaper has to be given.");
  }
  if (
    edgeShaper === undefined
    || edgeShaper.activateLabel === undefined
    || edgeShaper.updateEdges === undefined
  ) {
    throw("The Edge shaper has to be given.");
  }


  var self = this,
    fontSize,
    nodeRadius,
    labelToggle,
    currentZoom,
    currentTranslation,
    lastD3Translation,
    lastD3Scale,
    currentLimit,
    fisheye,
    currentDistortion,
    currentDistortionRadius,
    baseDist,
    baseDRadius,
    size =  width * height,
    zoom,
    slider,
    minZoom,
    limitCB = limitCallback || function() {},

    calcNodeLimit = function () {
      var div, reqSize;
      if (currentZoom >= labelToggle) {
        reqSize = fontSize * currentZoom;
        reqSize *= reqSize;
        div = 60 * reqSize;
      } else {
        reqSize = nodeRadius * currentZoom;
        reqSize *= reqSize;
        div = 4 * Math.PI * reqSize;
      }
      return Math.floor(size / div);
    },

    calcDistortionValues = function () {
      currentDistortion = baseDist / currentZoom - 0.99999999; // Always > 0
      currentDistortionRadius = baseDRadius / currentZoom;
      fisheye.distortion(currentDistortion);
      fisheye.radius(currentDistortionRadius);
    },

    reactToZoom = function(scale, transX, transY, fromButton) {
      if (fromButton) {
        if (scale !== null) {
          currentZoom = scale;
        }
      } else {
        currentZoom = scale;
      }
      if (transX !== null) {
        currentTranslation[0] += transX;
      }
      if (transY !== null) {
        currentTranslation[1] += transY;
      }
      currentLimit = calcNodeLimit();
      limitCB(currentLimit);
      nodeShaper.activateLabel(currentZoom >= labelToggle);
      edgeShaper.activateLabel(currentZoom >= labelToggle);
      calcDistortionValues();

      var transT = "translate(" + currentTranslation + ")",
      scaleT = " scale(" + currentZoom + ")";
      if (g._isCommunity) {
        g.attr("transform", transT);
      } else {
        g.attr("transform", transT + scaleT);
      }
      if (slider) {
         slider.slider("option", "value", currentZoom);
      }
    },

    getScaleDelta = function(nextScale) {
      var diff = lastD3Scale - nextScale;
      lastD3Scale = nextScale;
      return diff;
    },

    getTranslationDelta = function(nextTrans) {
      var tmp = [];
      tmp[0] = nextTrans[0] - lastD3Translation[0];
      tmp[1] = nextTrans[1] - lastD3Translation[1];
      lastD3Translation[0] = nextTrans[0];
      lastD3Translation[1] = nextTrans[1];
      return tmp;
    },

    parseConfig = function (conf) {
      if (conf === undefined) {
        conf = {};
      }
      var fontMax = conf.maxFont || 16,
      fontMin = conf.minFont || 6,
      rMax = conf.maxRadius || 25,
      rMin = conf.minRadius || 4;
      baseDist = conf.focusZoom || 1;
      baseDRadius = conf.focusRadius || 100;
      minZoom = rMin/rMax;
      fontSize = fontMax;
      nodeRadius = rMax;

      labelToggle = fontMin / fontMax;
      currentZoom = 1;
      currentTranslation = [0, 0];
      lastD3Translation = [0, 0];
      calcDistortionValues();

      currentLimit = calcNodeLimit();

      zoom = d3.behavior.zoom()
        .scaleExtent([minZoom, 1])
        .on("zoom", function() {
          //  scaleDiff = getScaleDelta(d3.event.scale),
          var
            sEvent = d3.event.sourceEvent,
            scale = currentZoom,
            translation;
          if (sEvent.type === "mousewheel" || sEvent.type === "DOMMouseScroll") {
            if (sEvent.wheelDelta) {
              if (sEvent.wheelDelta > 0) {
                scale += 0.01;
                if (scale > 1) {
                  scale = 1;
                }
              } else {
                scale -= 0.01;
                if (scale < minZoom) {
                  scale = minZoom;
                }
              }
            } else {
              if (sEvent.detail > 0) {
                scale += 0.01;
                if (scale > 1) {
                  scale = 1;
                }
              } else {
                scale -= 0.01;
                if (scale < minZoom) {
                  scale = minZoom;
                }
              }
            }
            translation = [0, 0];
          } else {
            translation = getTranslationDelta(d3.event.translate);
          }

          reactToZoom(scale, translation[0], translation[1]);
       });

    },
    mouseMoveHandle = function() {
      /*
      var focus = d3.mouse(this);
      focus[0] -= currentTranslation[0];
      focus[0] /= currentZoom;
      focus[1] -= currentTranslation[1];
      focus[1] /= currentZoom;
      fisheye.focus(focus);
      nodeShaper.updateNodes();
      edgeShaper.updateEdges();*/
    };



  fisheye = d3.fisheye.circular();

  parseConfig(config);

  svg.call(zoom);

  nodeShaper.changeTo({
    distortion: fisheye
  });

  svg.on("mousemove", mouseMoveHandle);

  self.translation = function() {
    return null;
  };

  self.scaleFactor = function() {
    return currentZoom;
  };

  self.scaledMouse = function() {
    return null;
  };

  self.getDistortion = function() {
    return currentDistortion;
  };

  self.getDistortionRadius = function() {
    return currentDistortionRadius;
  };

  self.getNodeLimit = function() {
    return currentLimit;
  };

  self.getMinimalZoomFactor = function() {
    return minZoom;
  };

  self.registerSlider = function(s) {
    slider = s;
  };

  self.triggerScale = function(s) {
    reactToZoom(s, null, null, true);
  };

  self.triggerTranslation = function(x, y) {
    reactToZoom(null, x, y, true);
  };

  self.changeWidth = function(w) {
    size =  width * height;
  };

}

/*global $, _, d3*/
/*global document*/
/*global modalDialogHelper, uiComponentsHelper*/
////////////////////////////////////////////////////////////////////////////////
/// @brief Graph functionality
///
/// @file
///
/// DISCLAIMER
///
/// Copyright 2010-2012 triagens GmbH, Cologne, Germany
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///
///     http://www.apache.org/licenses/LICENSE-2.0
///
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// Copyright holder is triAGENS GmbH, Cologne, Germany
///
/// @author Michael Hackstein
/// @author Copyright 2011-2013, triAGENS GmbH, Cologne, Germany
////////////////////////////////////////////////////////////////////////////////
function ArangoAdapterControls(list, adapter) {
  "use strict";

  if (list === undefined) {
    throw "A list element has to be given.";
  }
  if (adapter === undefined) {
    throw "The ArangoAdapter has to be given.";
  }
  this.addControlChangeCollections = function(callback) {
    var prefix = "control_adapter_collections",
      idprefix = prefix + "_";

    adapter.getCollections(function(nodeCols, edgeCols) {
      adapter.getGraphs(function(graphs) {
        uiComponentsHelper.createButton(list, "Collections", prefix, function() {
          modalDialogHelper.createModalDialog("Switch Collections",
            idprefix, [{
              type: "decission",
              id: "collections",
              group: "loadtype",
              text: "Select existing collections",
              isDefault: (adapter.getGraphName() === undefined),
              interior: [
                {
                  type: "list",
                  id: "node_collection",
                  text: "Vertex collection",
                  objects: nodeCols,
                  selected: adapter.getNodeCollection()
                },{
                  type: "list",
                  id: "edge_collection",
                  text: "Edge collection",
                  objects: edgeCols,
                  selected: adapter.getEdgeCollection()
                }
              ]
            },{
              type: "decission",
              id: "graphs",
              group: "loadtype",
              text: "Select existing graph",
              isDefault: (adapter.getGraphName() !== undefined),
              interior: [
                {
                  type: "list",
                  id: "graph",
                  objects: graphs,
                  selected: adapter.getGraphName()
                }
              ]
            },{
              type: "checkbox",
              text: "Start with random vertex",
              id: "random",
              selected: true
            },{
              type: "checkbox",
              id: "undirected",
              selected: (adapter.getDirection() === "any")
            }], function () {
              var nodes = $("#" + idprefix + "node_collection")
                .children("option")
                .filter(":selected")
                .text(),
                edges = $("#" + idprefix + "edge_collection")
                  .children("option")
                  .filter(":selected")
                  .text(),
                graph = $("#" + idprefix + "graph")
                  .children("option")
                  .filter(":selected")
                  .text(),
                undirected = !!$("#" + idprefix + "undirected").prop("checked"),
                random = !!$("#" + idprefix + "random").prop("checked"),
                selected = $("input[type='radio'][name='loadtype']:checked").prop("id");
              if (selected === idprefix + "collections") {
                adapter.changeToCollections(nodes, edges, undirected);
              } else {
                adapter.changeToGraph(graph, undirected);
              }
              if (random) {
                adapter.loadRandomNode(callback);
                return;
              }
              if (_.isFunction(callback)) {
                callback();
              }
            }
          );
        });
      });
    });
  };

  this.addControlChangePriority = function() {
    var prefix = "control_adapter_priority",
      idprefix = prefix + "_",
      prioList = adapter.getPrioList(),
      label = "Group vertices";

      uiComponentsHelper.createButton(list, label, prefix, function() {
        modalDialogHelper.createModalChangeDialog(label,
          idprefix, [{
            type: "extendable",
            id: "attribute",
            objects: adapter.getPrioList()
          }], function () {
            var list = $("input[id^=" + idprefix + "attribute_]"),
              prios = [];
            list.each(function(i, t) {
              var val = $(t).val();
              if (val !== "") {
                prios.push(val);
              }
            });
            adapter.changeTo({
              prioList: prios
            });
          }
        );
      });
    /*
    adapter.getCollections(function(nodeCols, edgeCols) {
      uiComponentsHelper.createButton(list, "Collections", prefix, function() {
        modalDialogHelper.createModalDialog("Switch Collections",
          idprefix, [{
            type: "list",
            id: "nodecollection",
            objects: nodeCols
          },{
            type: "list",
            id: "edgecollection",
            objects: edgeCols
          },{
            type: "checkbox",
            id: "undirected"
          }], function () {
            var  = $("#" + idprefix + "nodecollection").attr("value"),
              edges = $("#" + idprefix + "edgecollection").attr("value"),
              undirected = !!$("#" + idprefix + "undirected").attr("checked");
            adapter.changeTo(nodes, edges, undirected);

          }
        );
      });
    });
    */
  };

  this.addAll = function() {
    this.addControlChangeCollections();
    this.addControlChangePriority();
  };
}

/*global $, _, d3*/
/*global document*/
/*global EdgeShaper, modalDialogHelper, uiComponentsHelper*/
////////////////////////////////////////////////////////////////////////////////
/// @brief Graph functionality
///
/// @file
///
/// DISCLAIMER
///
/// Copyright 2010-2012 triagens GmbH, Cologne, Germany
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///
///     http://www.apache.org/licenses/LICENSE-2.0
///
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// Copyright holder is triAGENS GmbH, Cologne, Germany
///
/// @author Michael Hackstein
/// @author Copyright 2011-2013, triAGENS GmbH, Cologne, Germany
////////////////////////////////////////////////////////////////////////////////
function ContextMenu(id) {
  "use strict";

  if (id === undefined) {
    throw("An id has to be given.");
  }
  var div,
      ul,
      jqId = "#" + id,
      menu,

    addEntry = function(label, callback) {
      var item, inner;
      item = document.createElement("div");
      item.className = "context-menu-item";
      inner = document.createElement("div");
      inner.className = "context-menu-item-inner";
      inner.appendChild(document.createTextNode(label));
      inner.onclick = function() {
        callback(d3.select(menu.target).data()[0]);
      };
      item.appendChild(inner);
      div.appendChild(item);
    },

    bindMenu = function($objects) {
      menu = $.contextMenu.create(jqId, {
        shadow: false
      });
      $objects.each(function() {
        $(this).bind('contextmenu', function(e){
          menu.show(this,e);
          return false;
        });
      });
    },

    divFactory = function() {
      div = document.getElementById(id);
      if (div) {
        div.parentElement.removeChild(div);
      }
      div = document.createElement("div");
      div.className = "context-menu context-menu-theme-osx";
      div.id = id;
      document.body.appendChild(div);
      return div;
    };

  divFactory();

  this.addEntry = addEntry;
  this.bindMenu = bindMenu;
}


/*global $, _, d3*/
/*global document, Storage, localStorage, window*/
/*global EdgeShaper, modalDialogHelper, uiComponentsHelper*/
////////////////////////////////////////////////////////////////////////////////
/// @brief Graph functionality
///
/// @file
///
/// DISCLAIMER
///
/// Copyright 2010-2012 triagens GmbH, Cologne, Germany
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///
///     http://www.apache.org/licenses/LICENSE-2.0
///
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// Copyright holder is triAGENS GmbH, Cologne, Germany
///
/// @author Michael Hackstein
/// @author Copyright 2011-2013, triAGENS GmbH, Cologne, Germany
////////////////////////////////////////////////////////////////////////////////
function EdgeShaperControls(list, shaper) {
  "use strict";

  if (list === undefined) {
    throw "A list element has to be given.";
  }
  if (shaper === undefined) {
    throw "The EdgeShaper has to be given.";
  }
  var self = this;

  this.addControlOpticShapeNone = function() {
    var prefix = "control_edge_none",
    idprefix = prefix + "_";
    uiComponentsHelper.createButton(list, "None", prefix, function() {
      shaper.changeTo({
        shape: {
          type: EdgeShaper.shapes.NONE
        }
      });
    });
  };

  this.addControlOpticShapeArrow = function() {
    var prefix = "control_edge_arrow",
      idprefix = prefix + "_";
    uiComponentsHelper.createButton(list, "Arrow", prefix, function() {
      shaper.changeTo({
        shape: {
          type: EdgeShaper.shapes.ARROW
        }
      });
    });
  };



  this.addControlOpticLabel = function() {
    var prefix = "control_edge_label",
      idprefix = prefix + "_";
    uiComponentsHelper.createButton(list, "Configure Label", prefix, function() {
      modalDialogHelper.createModalDialog("Switch Label Attribute",
        idprefix, [{
          type: "text",
          id: "key",
          text: "Edge label attribute",
          value: shaper.getLabel()
        }], function () {
          var key = $("#" + idprefix + "key").attr("value");
          shaper.changeTo({
            label: key
          });
        }
      );
    });
  };

  this.addControlOpticLabelList = function() {
    var prefix = "control_edge_label",
      idprefix = prefix + "_";
    uiComponentsHelper.createButton(list, "Configure Label", prefix, function() {
      modalDialogHelper.createModalDialog("Change Label Attribute",
        idprefix, [{
          type: "extendable",
          id: "label",
          text: "Edge label attribute",
          objects: shaper.getLabel()
        }], function () {
          var lblList = $("input[id^=" + idprefix + "label_]"),
            labels = [];
          lblList.each(function(i, t) {
            var val = $(t).val();
            if (val !== "") {
              labels.push(val);
            }
          });

          var obj = {
            label: labels
          };
          self.applyLocalStorage(obj);
          shaper.changeTo(obj);
        }
      );
    });
  };

  this.applyLocalStorage = function(obj) {
    if (Storage !== "undefined") {
      try {
        var toStore = JSON.parse(localStorage.getItem('graphSettings')),
        graphName = (window.location.hash).split("/")[1],
        dbName = (window.location.pathname).split('/')[2],
        combinedGraphName = graphName + dbName;

        _.each(obj, function(value, key) {
          if (key !== undefined) {
            if (!toStore[combinedGraphName].viewer.hasOwnProperty('edgeShaper')) {
              toStore[combinedGraphName].viewer.edgeShaper = {};
            } 
            toStore[combinedGraphName].viewer.edgeShaper[key] = value;
          }
        });

        localStorage.setItem('graphSettings', JSON.stringify(toStore));
      }
      catch (e) {
        console.log(e);
      }
    }
  };

  this.addControlOpticSingleColour = function() {
    var prefix = "control_edge_singlecolour",
      idprefix = prefix + "_";
    uiComponentsHelper.createButton(list, "Single Colour", prefix, function() {
      modalDialogHelper.createModalDialog("Switch to Colour",
        idprefix, [{
          type: "text",
          id: "stroke"
        }], function () {
          var stroke = $("#" + idprefix + "stroke").attr("value");
          shaper.changeTo({
            color: {
              type: "single",
              stroke: stroke
            }
          });
        }
      );
    });
  };

  this.addControlOpticAttributeColour = function() {
    var prefix = "control_edge_attributecolour",
      idprefix = prefix + "_";
    uiComponentsHelper.createButton(list, "Colour by Attribute", prefix, function() {
      modalDialogHelper.createModalDialog("Display colour by attribute",
        idprefix, [{
          type: "text",
          id: "key"
        }], function () {
          var key = $("#" + idprefix + "key").attr("value");
          shaper.changeTo({
            color: {
              type: "attribute",
              key: key
            }
          });
        }
      );
    });
  };

  this.addControlOpticGradientColour = function() {
    var prefix = "control_edge_gradientcolour",
      idprefix = prefix + "_";
    uiComponentsHelper.createButton(list, "Gradient Colour", prefix, function() {
      modalDialogHelper.createModalDialog("Change colours for gradient",
        idprefix, [{
          type: "text",
          id: "source"
        },{
          type: "text",
          id: "target"
        }], function () {
          var source = $("#" + idprefix + "source").attr("value"),
          target = $("#" + idprefix + "target").attr("value");
          shaper.changeTo({
            color: {
              type: "gradient",
              source: source,
              target: target
            }
          });
        }
      );
    });
  };

  this.addAllOptics = function () {
    self.addControlOpticShapeNone();
    self.addControlOpticShapeArrow();
    self.addControlOpticLabel();
    self.addControlOpticSingleColour();
    self.addControlOpticAttributeColour();
    self.addControlOpticGradientColour();
  };

  this.addAllActions = function () {

  };

  this.addAll = function () {
    self.addAllOptics();
    self.addAllActions();
  };

}

/*global $, _, d3*/
/*global document, window, prompt*/
/*global modalDialogHelper, uiComponentsHelper */
/*global EventDispatcher, arangoHelper*/
////////////////////////////////////////////////////////////////////////////////
/// @brief Graph functionality
///
/// @file
///
/// DISCLAIMER
///
/// Copyright 2010-2012 triagens GmbH, Cologne, Germany
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///
///     http://www.apache.org/licenses/LICENSE-2.0
///
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// Copyright holder is triAGENS GmbH, Cologne, Germany
///
/// @author Michael Hackstein
/// @author Copyright 2011-2013, triAGENS GmbH, Cologne, Germany
////////////////////////////////////////////////////////////////////////////////

function EventDispatcherControls(list, nodeShaper, edgeShaper, start, dispatcherConfig) {
  "use strict";

  if (list === undefined) {
    throw "A list element has to be given.";
  }
  if (nodeShaper === undefined) {
    throw "The NodeShaper has to be given.";
  }
  if (edgeShaper === undefined) {
    throw "The EdgeShaper has to be given.";
  }
  if (start === undefined) {
    throw "The Start callback has to be given.";
  }

  var self = this,
    /*
    icons = {
      expand: "expand",
      add: "add",
      trash: "trash",
      drag: "drag",
      edge: "connect",
      edit: "edit",
      view: "view"
    },
    */
    icons = {
      expand: {
        icon: "hand-pointer-o",
        title: "Expand a node."
      },
      add: {
        icon: "plus-square",
        title: "Add a node."
      },
      trash: {
        icon: "minus-square",
        title: "Remove a node/edge."
      },
      drag: {
        icon: "hand-rock-o",
        title: "Drag a node."
      },
      edge: {
        icon: "external-link-square",
        title: "Create an edge between two nodes."
      },
      edit: {
        icon: "pencil-square",
        title: "Edit attributes of a node."
      },
      view: {
        icon: "search",
        title: "View attributes of a node."
      }
    },
    dispatcher = new EventDispatcher(nodeShaper, edgeShaper, dispatcherConfig),
    adapter = dispatcherConfig.edgeEditor.adapter,
    askForCollection = (!!adapter
      && _.isFunction(adapter.useNodeCollection)
      && _.isFunction(adapter.useEdgeCollection)),


    appendToList = function(button) {
      list.appendChild(button);
    },
    createIcon = function(icon, title, callback) {
      var btn = uiComponentsHelper.createIconButton(
        icon,
        "control_event_" + title,
        callback
      );
      appendToList(btn);
    },
    rebindNodes = function(actions) {
      dispatcher.rebind("nodes", actions);
    },
    rebindEdges = function(actions) {
      dispatcher.rebind("edges", actions);
    },
    rebindSVG = function(actions) {
      dispatcher.rebind("svg", actions);
    },
    getCursorPosition = function (ev) {
      var e = ev || window.event,
        res = {};
      res.x = e.clientX;
      res.y = e.clientY;
      res.x += document.body.scrollLeft;
      res.y += document.body.scrollTop;
      return res;
    },
    getCursorPositionInSVG = function (ev) {
      var pos = getCursorPosition(ev),
          off = $('svg#graphViewerSVG').offset(),
          svg, bBox, bCR;
      svg = d3.select("svg#graphViewerSVG").node();
      // Normal case. SVG has no clipped view box.
      bCR = svg.getBoundingClientRect();
      if ($("svg#graphViewerSVG").height() <= bCR.height ) {
        return {
          x: pos.x - off.left,
          y: pos.y - off.top
        };
      }
      // Firefox case. SVG has a clipped view box.
      bBox = svg.getBBox();
      return {
        x: pos.x - (bCR.left - bBox.x),
        y: pos.y - (bCR.top - bBox.y)
      };
    },
    callbacks = {
      nodes: {},
      edges: {},
      svg: {}
    },

  /*******************************************
  * Create callbacks wenn clicking on objects
  *
  *******************************************/

    createNewNodeCB = function() {
      var prefix = "control_event_new_node",
        idprefix = prefix + "_",
        createCallback = function(ev) {
          var pos = getCursorPositionInSVG(ev);
          modalDialogHelper.createModalCreateDialog(
            "Create New Node",
            idprefix,
            {},
            function(data) {
              dispatcher.events.CREATENODE(data, function(node) {
                $("#" + idprefix + "modal").modal('hide');
                nodeShaper.reshapeNodes();
                start();
              }, pos.x, pos.y)();
            }
          );
        };
      callbacks.nodes.newNode = createCallback;
    },
    createViewCBs = function() {
      var prefix = "control_event_view",
        idprefix = prefix + "_",
        nodeCallback = function(n) {
          modalDialogHelper.createModalViewDialog(
            "View Node " + n._id,
            "control_event_node_view_",
            n._data,
            function() {
              modalDialogHelper.createModalEditDialog(
                "Edit Node " + n._id,
                "control_event_node_edit_",
                n._data,
                function(newData) {
                  dispatcher.events.PATCHNODE(n, newData, function() {
                    $("#control_event_node_edit_modal").modal('hide');
                  })();
                }
              );
            }
          );
        },
        edgeCallback = function(e) {
          modalDialogHelper.createModalViewDialog(
            "View Edge " + e._id,
            "control_event_edge_view_",
            e._data,
            function() {
              modalDialogHelper.createModalEditDialog(
                "Edit Edge " + e._id,
                "control_event_edge_edit_",
                e._data,
                function(newData) {
                  dispatcher.events.PATCHEDGE(e, newData, function() {
                    $("#control_event_edge_edit_modal").modal('hide');
                  })();
                }
              );
            }
          );
        };

      callbacks.nodes.view = nodeCallback;
      callbacks.edges.view = edgeCallback;
    },
    createConnectCBs = function() {
      var prefix = "control_event_connect",
        idprefix = prefix + "_",
        nodesDown = dispatcher.events.STARTCREATEEDGE(function(startNode, ev) {
          var pos = getCursorPositionInSVG(ev),
             moveCB = edgeShaper.addAnEdgeFollowingTheCursor(pos.x, pos.y);
          dispatcher.bind("svg", "mousemove", function(ev) {
            var pos = getCursorPositionInSVG(ev);
            moveCB(pos.x, pos.y);
          });
        }),
        nodesUp = dispatcher.events.FINISHCREATEEDGE(function(edge){
          edgeShaper.removeCursorFollowingEdge();
          dispatcher.bind("svg", "mousemove", function(){
            return undefined;
          });
          start();
        }),
        svgUp = function() {
          dispatcher.events.CANCELCREATEEDGE();
          edgeShaper.removeCursorFollowingEdge();
          dispatcher.bind("svg", "mousemove", function(){
            return undefined;
          });
        };
      callbacks.nodes.startEdge = nodesDown;
      callbacks.nodes.endEdge = nodesUp;
      callbacks.svg.cancelEdge = svgUp;
    },

    createEditsCBs = function() {
      var nodeCallback = function(n) {
        /*var deleteCallback = function() {
          console.log("callback");
          dispatcher.events.DELETENODE(function() {
            $("#control_event_node_delete_modal").modal('hide');
            nodeShaper.reshapeNodes();
            edgeShaper.reshapeEdges();
            start();
          })(n);
        };*/

        arangoHelper.openDocEditor(n._id, 'document');
          /*
          modalDialogHelper.createModalEditDialog(
            "Edit Node " + n._id,
            "control_event_node_edit_",
            n._data,
            function(newData) {
              dispatcher.events.PATCHNODE(n, newData, function() {
                $("#control_event_node_edit_modal").modal('hide');
              })();
            }
          );
          */
        },
        edgeCallback = function(e) {
          arangoHelper.openDocEditor(e._id, 'edge');
          /*modalDialogHelper.createModalEditDialog(
            "Edit Edge " + e._id,
            "control_event_edge_edit_",
            e._data,
            function(newData) {
              dispatcher.events.PATCHEDGE(e, newData, function() {
                $("#control_event_edge_edit_modal").modal('hide');
              })();
            }
          );*/
        };
      callbacks.nodes.edit = nodeCallback;
      callbacks.edges.edit = edgeCallback;
    },

    createDeleteCBs = function() {
      var nodeCallback = function(n) {
          modalDialogHelper.createModalDeleteDialog(
            "Delete Node " + n._id,
            "control_event_node_delete_",
            n,
            function(n) {
              dispatcher.events.DELETENODE(function() {
                $("#control_event_node_delete_modal").modal('hide');
                nodeShaper.reshapeNodes();
                edgeShaper.reshapeEdges();
                start();
              })(n);
            }
          );
        },
        edgeCallback = function(e) {
          modalDialogHelper.createModalDeleteDialog(
            "Delete Edge " + e._id,
            "control_event_edge_delete_",
            e,
            function(e) {
              dispatcher.events.DELETEEDGE(function() {
                $("#control_event_edge_delete_modal").modal('hide');
                nodeShaper.reshapeNodes();
                edgeShaper.reshapeEdges();
                start();
              })(e);
            }
          );
        };
      callbacks.nodes.del = nodeCallback;
      callbacks.edges.del = edgeCallback;
    },

    createSpotCB = function() {
     callbacks.nodes.spot = dispatcher.events.EXPAND;
    };

  createNewNodeCB();
  createViewCBs();
  createConnectCBs();
  createEditsCBs();
  createDeleteCBs();
  createSpotCB();

  /*******************************************
  * Raw rebind objects
  *
  *******************************************/
  this.dragRebinds = function() {
    return {
      nodes: {
        drag: dispatcher.events.DRAG
      }
    };
  };

  this.newNodeRebinds = function() {
    return {
      svg: {
        click: callbacks.nodes.newNode
      }
    };
  };

  this.viewRebinds = function() {
      return {
        nodes: {
          click: callbacks.nodes.view
        },
        edges: {
          click: callbacks.edges.view
        }
      };
  };

  this.connectNodesRebinds = function() {
    return {
      nodes: {
        mousedown: callbacks.nodes.startEdge,
        mouseup: callbacks.nodes.endEdge
      },
      svg: {
        mouseup: callbacks.svg.cancelEdge
      }
    };
  };

  this.editRebinds = function() {
      return {
        nodes: {
          click: callbacks.nodes.edit
        },
        edges: {
          click: callbacks.edges.edit
        }
      };
  };

  this.expandRebinds = function() {
    return {
      nodes: {
        click: callbacks.nodes.spot
      }
    };
  };

  this.deleteRebinds = function() {
    return {
      nodes: {
        click: callbacks.nodes.del
      },
      edges: {
        click: callbacks.edges.del
      }
    };
  };

  this.rebindAll = function(obj) {
    rebindNodes(obj.nodes);
    rebindEdges(obj.edges);
    rebindSVG(obj.svg);
  };

  /*******************************************
  * Inject controls into right-click menus
  *
  *******************************************/

  //nodeShaper.addMenuEntry("View", callbacks.nodes.view);
  nodeShaper.addMenuEntry("Edit", callbacks.nodes.edit);
  nodeShaper.addMenuEntry("Spot", callbacks.nodes.spot);
  nodeShaper.addMenuEntry("Trash", callbacks.nodes.del);

  //edgeShaper.addMenuEntry("View", callbacks.edges.view);
  edgeShaper.addMenuEntry("Edit", callbacks.edges.edit);
  edgeShaper.addMenuEntry("Trash", callbacks.edges.del);


  /*******************************************
  * Functions to add controls
  *
  *******************************************/


  this.addControlNewNode = function() {
    var icon = icons.add,
      idprefix = "select_node_collection",
      callback = function() {
        if (askForCollection && adapter.getNodeCollections().length > 1) {
          modalDialogHelper.createModalDialog("Select Vertex Collection",
            idprefix, [{
              type: "list",
              id: "vertex",
              objects: adapter.getNodeCollections(),
              text: "Select collection",
              selected: adapter.getSelectedNodeCollection()
            }], function () {
              var nodeCollection = $("#" + idprefix + "vertex")
                  .children("option")
                  .filter(":selected")
                  .text();
              adapter.useNodeCollection(nodeCollection);
            },
            "Select"
          );
        }
        self.rebindAll(self.newNodeRebinds());
      };
    createIcon(icon, "new_node", callback);
  };

  this.addControlView = function() {
    var icon = icons.view,
      callback = function() {
        self.rebindAll(self.viewRebinds());
      };
    createIcon(icon, "view", callback);
  };

  this.addControlDrag = function() {
    var icon = icons.drag,
      callback = function() {
        self.rebindAll(self.dragRebinds());
      };
    createIcon(icon, "drag", callback);
  };

  this.addControlEdit = function() {
    var icon = icons.edit,
      callback = function() {
        self.rebindAll(self.editRebinds());
      };
    createIcon(icon, "edit", callback);
  };

  this.addControlExpand = function() {
    var icon = icons.expand,
      callback = function() {
        self.rebindAll(self.expandRebinds());
      };
    createIcon(icon, "expand", callback);
  };

  this.addControlDelete = function() {
    var icon = icons.trash,
      callback = function() {
        self.rebindAll(self.deleteRebinds());
      };
    createIcon(icon, "delete", callback);
  };

  this.addControlConnect = function() {
    var icon = icons.edge,
      idprefix = "select_edge_collection",
      callback = function() {
        if (askForCollection && adapter.getEdgeCollections().length > 1) {
          modalDialogHelper.createModalDialog("Select Edge Collection",
            idprefix, [{
              type: "list",
              id: "edge",
              objects: adapter.getEdgeCollections(),
              text: "Select collection",
              selected: adapter.getSelectedEdgeCollection()
            }], function () {
              var edgeCollection = $("#" + idprefix + "edge")
                  .children("option")
                  .filter(":selected")
                  .text();
              adapter.useEdgeCollection(edgeCollection);
            },
            "Select"
          );
        }
        self.rebindAll(self.connectNodesRebinds());
      };
    createIcon(icon, "connect", callback);
  };

  this.addAll = function () {
    self.addControlExpand();
    self.addControlDrag();
    //self.addControlView();
    self.addControlEdit();
    self.addControlConnect();
    self.addControlNewNode();
    self.addControlDelete();
  };
}

/*global $, _, d3*/
/*global document*/
/*global modalDialogHelper, uiComponentsHelper*/
////////////////////////////////////////////////////////////////////////////////
/// @brief Graph functionality
///
/// @file
///
/// DISCLAIMER
///
/// Copyright 2010-2012 triagens GmbH, Cologne, Germany
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///
///     http://www.apache.org/licenses/LICENSE-2.0
///
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// Copyright holder is triAGENS GmbH, Cologne, Germany
///
/// @author Michael Hackstein
/// @author Copyright 2011-2013, triAGENS GmbH, Cologne, Germany
////////////////////////////////////////////////////////////////////////////////
function GharialAdapterControls(list, adapter) {
  "use strict";

  if (list === undefined) {
    throw "A list element has to be given.";
  }
  if (adapter === undefined) {
    throw "The GharialAdapter has to be given.";
  }
  this.addControlChangeGraph = function(callback) {
    var prefix = "control_adapter_graph",
      idprefix = prefix + "_";

    adapter.getGraphs(function(graphs) {
      uiComponentsHelper.createButton(list, "Switch Graph", prefix, function() {
        modalDialogHelper.createModalDialog("Switch Graph",
          idprefix, [{
            type: "list",
            id: "graph",
            objects: graphs,
            text: "Select graph",
            selected: adapter.getGraphName()
          },{
            type: "checkbox",
            text: "Start with random vertex",
            id: "random",
            selected: true
          },//currently disabled outbound only view
          /*{
            type: "checkbox",
            id: "undirected",
            selected: (adapter.getDirection() === "any")
          }*/], function () {
            var graph = $("#" + idprefix + "graph")
                .children("option")
                .filter(":selected")
                .text(),
              undirected = !!$("#" + idprefix + "undirected").prop("checked"),
              random = !!$("#" + idprefix + "random").prop("checked");
            adapter.changeToGraph(graph, undirected);
            if (random) {
              adapter.loadRandomNode(callback);
              return;
            }
            if (_.isFunction(callback)) {
              callback();
            }
          }
        );
      });
    });
  };

  this.addControlChangePriority = function() {
    var prefix = "control_adapter_priority",
      idprefix = prefix + "_",
      label = "Group vertices";

    uiComponentsHelper.createButton(list, label, prefix, function() {
      modalDialogHelper.createModalChangeDialog(label + " by attribute",
        idprefix, [{
          type: "extendable",
          id: "attribute",
          objects: adapter.getPrioList()
        }], function () {
          var attrList = $("input[id^=" + idprefix + "attribute_]"),
            prios = [];
          _.each(attrList, function(t) {
            var val = $(t).val();
            if (val !== "") {
              prios.push(val);
            }
          });
          adapter.changeTo({
            prioList: prios
          });
        }
      );
    });
  };

  this.addAll = function() {
    this.addControlChangeGraph();
    this.addControlChangePriority();
  };
}

/*global document, $, _ */
/*global d3, window*/
/*global GraphViewer, EventDispatcherControls, EventDispatcher, NodeShaper */
////////////////////////////////////////////////////////////////////////////////
/// @brief Graph functionality
///
/// @file
///
/// DISCLAIMER
///
/// Copyright 2010-2012 triagens GmbH, Cologne, Germany
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///
///     http://www.apache.org/licenses/LICENSE-2.0
///
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// Copyright holder is triAGENS GmbH, Cologne, Germany
///
/// @author Michael Hackstein
/// @author Copyright 2011-2013, triAGENS GmbH, Cologne, Germany
////////////////////////////////////////////////////////////////////////////////

/*******************************************************************************
* Assume the widget is imported via an iframe.
* Hence we append everything directly to the body
* and make use of all available space.
*******************************************************************************/

function GraphViewerPreview(container, viewerConfig) {
  "use strict";

  /*******************************************************************************
  * Internal variables and functions
  *******************************************************************************/

  var svg,
    width,
    height,
    viewer,
    createTB,
    adapterConfig,
    dispatcherUI,
    //mousePointerBox = document.createElement("div"),


    createSVG = function() {
      return d3.select(container)
        .append("svg")
        .attr("id", "graphViewerSVG")
        .attr("width",width)
        .attr("height",height)
        .attr("class", "graph-viewer")
        .attr("style", "width:" + width + "px;height:" + height + ";");
    },

    shouldCreateToolbox = function(config) {
      var counter = 0;
      _.each(config, function(v, k) {
        if (v === false) {
          delete config[k];
        } else {
          counter++;
        }
      });
      return counter > 0;
    },

    addRebindsToList = function(list, rebinds) {
      _.each(rebinds, function(acts, obj) {
        list[obj] = list[obj] || {};
        _.each(acts, function(func, trigger) {
          list[obj][trigger] = func;
        });
      });
    },

    parseActions = function(config) {
      if (!config) {
        return;
      }
      var allActions = {};
      if (config.drag) {
        addRebindsToList(allActions, dispatcherUI.dragRebinds());
      }
      if (config.create) {
        addRebindsToList(allActions, dispatcherUI.newNodeRebinds());
        addRebindsToList(allActions, dispatcherUI.connectNodesRebinds());
      }
      if (config.remove) {
        addRebindsToList(allActions, dispatcherUI.deleteRebinds());
      }
      if (config.expand) {
        addRebindsToList(allActions, dispatcherUI.expandRebinds());
      }
      if (config.edit) {
        addRebindsToList(allActions, dispatcherUI.editRebinds());
      }
      dispatcherUI.rebindAll(allActions);
    },

    createToolbox = function(config) {
      var toolbox = document.createElement("div");
      dispatcherUI = new EventDispatcherControls(
        toolbox,
        viewer.nodeShaper,
        viewer.edgeShaper,
        viewer.start,
        viewer.dispatcherConfig
      );
      toolbox.id = "toolbox";
      toolbox.className = "btn-group btn-group-vertical pull-left toolbox";
      container.appendChild(toolbox);
      /*
      mousePointerBox.id = "mousepointer";
      mousePointerBox.className = "mousepointer";
      container.appendChild(mousePointerBox);
      */
      _.each(config, function(v, k) {
        switch(k) {
          case "expand":
            dispatcherUI.addControlExpand();
            break;
          case "create":
            dispatcherUI.addControlNewNode();
            dispatcherUI.addControlConnect();
            break;
          case "drag":
            dispatcherUI.addControlDrag();
            break;
          case "edit":
            dispatcherUI.addControlEdit();
            break;
          case "remove":
            dispatcherUI.addControlDelete();
            break;
        }
      });
    },

    createDispatcherOnly = function(config) {
      var toolbox = document.createElement("div");
      dispatcherUI = new EventDispatcherControls(
        toolbox,
//        mousePointerBox,
        viewer.nodeShaper,
        viewer.edgeShaper,
        viewer.start,
        viewer.dispatcherConfig
      );
    },

    changeConfigToPreviewGraph = function() {
      if (viewerConfig) {
        // Fix nodeShaper:
        if (viewerConfig.nodeShaper) {
          if (viewerConfig.nodeShaper.label) {
            viewerConfig.nodeShaper.label = "label";
          }
          if (
            viewerConfig.nodeShaper.shape
            && viewerConfig.nodeShaper.shape.type === NodeShaper.shapes.IMAGE
            && viewerConfig.nodeShaper.shape.source
          ) {
            viewerConfig.nodeShaper.shape.source = "image";
          }
        }
        // Fix nodeShaper:
        if (viewerConfig.edgeShaper) {
          if (viewerConfig.edgeShaper.label) {
            viewerConfig.edgeShaper.label = "label";
          }
        }
      }
    },

    createViewer = function() {
      changeConfigToPreviewGraph();
      return new GraphViewer(svg, width, height, adapterConfig, viewerConfig);
    };


  /*******************************************************************************
  * Execution start
  *******************************************************************************/

  width = container.offsetWidth;
  height = container.offsetHeight;
  adapterConfig = {
    type: "preview"
  };

  viewerConfig = viewerConfig || {};
  createTB = shouldCreateToolbox(viewerConfig.toolbox);
  if (createTB) {
    width -= 43;
  }
  svg = createSVG();
  viewer = createViewer();
  if (createTB) {
    createToolbox(viewerConfig.toolbox);
  } else {
    createDispatcherOnly();
  }
  viewer.loadGraph("1");
  parseActions(viewerConfig.actions);

}

/*global document, $, _ */
/*global EventDispatcherControls, NodeShaperControls, EdgeShaperControls */
/*global LayouterControls, GharialAdapterControls*/
/*global GraphViewer, d3, window, arangoHelper, Storage, localStorage*/
////////////////////////////////////////////////////////////////////////////////
/// @brief Graph functionality
///
/// @file
///
/// DISCLAIMER
///
/// Copyright 2010-2012 triagens GmbH, Cologne, Germany
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///
///     http://www.apache.org/licenses/LICENSE-2.0
///
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// Copyright holder is triAGENS GmbH, Cologne, Germany
///
/// @author Michael Hackstein
/// @author Copyright 2011-2013, triAGENS GmbH, Cologne, Germany
////////////////////////////////////////////////////////////////////////////////

function GraphViewerUI(container, adapterConfig, optWidth, optHeight, viewerConfig, startNode) {
  "use strict";

  if (container === undefined) {
    throw "A parent element has to be given.";
  }
  if (!container.id) {
    throw "The parent element needs an unique id.";
  }
  if (adapterConfig === undefined) {
    throw "An adapter configuration has to be given";
  }

  var graphViewer,
    width = (optWidth + 20 || container.offsetWidth - 81 + 20),
    height = optHeight || container.offsetHeight,
    menubar = document.createElement("ul"),
    background = document.createElement("div"),
    colourList,
    nodeShaperUI,
    edgeShaperUI,
    adapterUI,
    slider,
    searchAttrExampleList,
    searchAttrExampleList2,
    //mousePointerBox = document.createElement("div"),
    svg,

    makeDisplayInformationDiv = function() {
      if (graphViewer.adapter.NODES_TO_DISPLAY < graphViewer.adapter.TOTAL_NODES) {
        $('.headerBar').append(
          '<div class="infoField">Graph too big. A random section is rendered.<div class="fa fa-info-circle"></div></div>'
        );
        $('.infoField .fa-info-circle').attr("title", "You can display additional/other vertices by using the toolbar buttons.").tooltip();
      }
    },

    makeFilterDiv = function() {
      var
        div = document.createElement("div"),
        innerDiv = document.createElement("div"),
        queryLine = document.createElement("div"),
        searchAttrDiv = document.createElement("div"),
        searchAttrExampleToggle = document.createElement("button"),
        searchAttrExampleCaret = document.createElement("span"),
        searchValueField = document.createElement("input"),
        searchStart = document.createElement("i"),
        equalsField = document.createElement("span"),
        searchAttrField,

        showSpinner = function() {
          $(background).css("cursor", "progress");
        },

        hideSpinner = function() {
          $(background).css("cursor", "");
        },

        alertError = function(msg) {
          window.alert(msg);
        },

        resultCB = function(res) {
          hideSpinner();
          if (res && res.errorCode && res.errorCode === 404) {
            arangoHelper.arangoError("Graph error", "could not find a matching node.");
            return;
          }
          return;
        },

        searchFunction = function() {
          showSpinner();
          if (searchAttrField.value === ""
            || searchAttrField.value === undefined) {
            graphViewer.loadGraph(
              searchValueField.value,
              resultCB
            );
          } else {
            graphViewer.loadGraphWithAttributeValue(
              searchAttrField.value,
              searchValueField.value,
              resultCB
            );
          }
        };

      div.id = "filterDropdown";
      div.className = "headerDropdown smallDropdown";
      innerDiv.className = "dropdownInner";
      queryLine.className = "queryline";

      searchAttrField = document.createElement("input");
      searchAttrExampleList = document.createElement("ul");

      searchAttrDiv.className = "pull-left input-append searchByAttribute";
      searchAttrField.id = "attribute";
      searchAttrField.type = "text";
      searchAttrField.placeholder = "Attribute name";
      searchAttrExampleToggle.id = "attribute_example_toggle";
      searchAttrExampleToggle.className = "button-neutral gv_example_toggle";
      searchAttrExampleCaret.className = "caret gv_caret";
      searchAttrExampleList.className = "gv-dropdown-menu";
      searchValueField.id = "value";
      searchValueField.className = "searchInput gv_searchInput";
      //searchValueField.className = "filterValue";
      searchValueField.type = "text";
      searchValueField.placeholder = "Attribute value";
      searchStart.id = "loadnode";
      searchStart.className = "fa fa-search";
      equalsField.className = "searchEqualsLabel";
      equalsField.appendChild(document.createTextNode("=="));

      innerDiv.appendChild(queryLine);
      queryLine.appendChild(searchAttrDiv);

      searchAttrDiv.appendChild(searchAttrField);
      searchAttrDiv.appendChild(searchAttrExampleToggle);
      searchAttrDiv.appendChild(searchAttrExampleList);
      searchAttrExampleToggle.appendChild(searchAttrExampleCaret);
      queryLine.appendChild(equalsField);
      queryLine.appendChild(searchValueField);
      queryLine.appendChild(searchStart);

      searchStart.onclick = searchFunction;
      $(searchValueField).keypress(function(e) {
        if (e.keyCode === 13 || e.which === 13) {
          searchFunction();
          return false;
        }
      });

      searchAttrExampleToggle.onclick = function() {
        $(searchAttrExampleList).slideToggle(200);
      };

      var title = document.createElement("p");
      title.className = "dropdown-title";
      title.innerHTML = "Filter graph by attribute:";
      div.appendChild(title);

      div.appendChild(innerDiv);
      return div;
    },

    makeNodeDiv = function () {
      var
        div2 = document.createElement("div"),
        innerDiv2 = document.createElement("div"),
        queryLine2 = document.createElement("div"),
        searchAttrDiv2 = document.createElement("div"),
        searchAttrExampleToggle2 = document.createElement("button"),
        searchAttrExampleCaret2 = document.createElement("span"),
        searchValueField2 = document.createElement("input"),
        searchStart2 = document.createElement("i"),
        equalsField2 = document.createElement("span"),
        searchAttrField2,

        showSpinner = function() {
          $(background).css("cursor", "progress");
        },

        hideSpinner = function() {
          $(background).css("cursor", "");
        },

        alertError = function(msg) {
          window.alert(msg);
        },

        resultCB2 = function(res) {
          hideSpinner();
          if (res && res.errorCode && res.errorCode === 404) {
            arangoHelper.arangoError("Graph error", "could not find a matching node.");
            return;
          }
          return;
        },

        addCustomNode = function() {
          showSpinner();
          if (searchAttrField2.value !== "") {
            graphViewer.loadGraphWithAdditionalNode(
              searchAttrField2.value,
              searchValueField2.value,
              resultCB2
            );
          }
        };

      div2.id = "nodeDropdown";
      div2.className = "headerDropdown smallDropdown";
      innerDiv2.className = "dropdownInner";
      queryLine2.className = "queryline";

      searchAttrField2 = document.createElement("input");
      searchAttrExampleList2 = document.createElement("ul");

      searchAttrDiv2.className = "pull-left input-append searchByAttribute";
      searchAttrField2.id = "attribute";
      searchAttrField2.type = "text";
      searchAttrField2.placeholder = "Attribute name";
      searchAttrExampleToggle2.id = "attribute_example_toggle2";
      searchAttrExampleToggle2.className = "button-neutral gv_example_toggle";
      searchAttrExampleCaret2.className = "caret gv_caret";
      searchAttrExampleList2.className = "gv-dropdown-menu";
      searchValueField2.id = "value";
      searchValueField2.className = "searchInput gv_searchInput";
      //searchValueField.className = "filterValue";
      searchValueField2.type = "text";
      searchValueField2.placeholder = "Attribute value";
      searchStart2.id = "loadnode";
      searchStart2.className = "fa fa-search";
      equalsField2.className = "searchEqualsLabel";
      equalsField2.appendChild(document.createTextNode("=="));

      innerDiv2.appendChild(queryLine2);
      queryLine2.appendChild(searchAttrDiv2);

      searchAttrDiv2.appendChild(searchAttrField2);
      searchAttrDiv2.appendChild(searchAttrExampleToggle2);
      searchAttrDiv2.appendChild(searchAttrExampleList2);
      searchAttrExampleToggle2.appendChild(searchAttrExampleCaret2);
      queryLine2.appendChild(equalsField2);
      queryLine2.appendChild(searchValueField2);
      queryLine2.appendChild(searchStart2);

      updateAttributeExamples(searchAttrExampleList2);
      //searchAttrExampleList2.onclick = function() {
      //  updateAttributeExamples(searchAttrExampleList2);
      //};

      searchStart2.onclick = addCustomNode;
      $(searchValueField2).keypress(function(e) {
        if (e.keyCode === 13 || e.which === 13) {
          addCustomNode();
          return false;
        }
      });

      searchAttrExampleToggle2.onclick = function() {
        $(searchAttrExampleList2).slideToggle(200);
      };

      var title = document.createElement("p");
      title.className = "dropdown-title";
      title.innerHTML = "Add specific node by attribute:";
      div2.appendChild(title);

      div2.appendChild(innerDiv2);
      return div2;
    },

    makeConfigureDiv = function () {
      var div, innerDiv, nodeList, nodeHeader, colList, colHeader,
          edgeList, edgeHeader;
      div = document.createElement("div");
      div.id = "configureDropdown";
      div.className = "headerDropdown";
      innerDiv = document.createElement("div");
      innerDiv.className = "dropdownInner";
      nodeList = document.createElement("ul");
      nodeHeader = document.createElement("li");
      nodeHeader.className = "nav-header";
      nodeHeader.appendChild(document.createTextNode("Vertices"));
      edgeList = document.createElement("ul");
      edgeHeader = document.createElement("li");
      edgeHeader.className = "nav-header";
      edgeHeader.appendChild(document.createTextNode("Edges"));
      colList = document.createElement("ul");
      colHeader = document.createElement("li");
      colHeader.className = "nav-header";
      colHeader.appendChild(document.createTextNode("Connection"));
      nodeList.appendChild(nodeHeader);
      edgeList.appendChild(edgeHeader);
      colList.appendChild(colHeader);
      innerDiv.appendChild(nodeList);
      innerDiv.appendChild(edgeList);
      innerDiv.appendChild(colList);
      div.appendChild(innerDiv);
      return {
        configure: div,
        nodes: nodeList,
        edges: edgeList,
        col: colList
      };
    },

    makeConfigure = function (div, idConf, idFilter, idNode) {
      var ul, lists,
      liConf, aConf, spanConf,
      liNode, aNode, spanNode,
      liFilter, aFilter, spanFilter;

      div.className = "headerButtonBar";
      ul = document.createElement("ul");
      ul.className = "headerButtonList";

      div.appendChild(ul);

      //CONF
      liConf = document.createElement("li");
      liConf.className = "enabled";
      aConf = document.createElement("a");
      aConf.id = idConf;
      aConf.className = "headerButton";
      spanConf = document.createElement("span");
      spanConf.className = "icon_arangodb_settings2";
      $(spanConf).attr("title", "Configure");

      ul.appendChild(liConf);
      liConf.appendChild(aConf);
      aConf.appendChild(spanConf);

      //NODE
      liNode = document.createElement("li");
      liNode.className = "enabled";
      aNode = document.createElement("a");
      aNode.id = idNode;
      aNode.className = "headerButton";
      spanNode = document.createElement("span");
      spanNode.className = "fa fa-search-plus";
      $(spanNode).attr("title", "Show additional vertices");

      ul.appendChild(liNode);
      liNode.appendChild(aNode);
      aNode.appendChild(spanNode);

      //FILTER
      liFilter = document.createElement("li");
      liFilter.className = "enabled";
      aFilter = document.createElement("a");
      aFilter.id = idFilter;
      aFilter.className = "headerButton";
      spanFilter = document.createElement("span");
      spanFilter.className = "icon_arangodb_filter";
      $(spanFilter).attr("title", "Filter");

      ul.appendChild(liFilter);
      liFilter.appendChild(aFilter);
      aFilter.appendChild(spanFilter);

      lists = makeConfigureDiv();
      lists.filter = makeFilterDiv();
      lists.node = makeNodeDiv();

      aConf.onclick = function () {
        $('#filterdropdown').removeClass('activated');
        $('#nodedropdown').removeClass('activated');
        $('#configuredropdown').toggleClass('activated');
        $(lists.configure).slideToggle(200);
        $(lists.filter).hide();
        $(lists.node).hide();
      };

      aNode.onclick = function () {
        $('#filterdropdown').removeClass('activated');
        $('#configuredropdown').removeClass('activated');
        $('#nodedropdown').toggleClass('activated');
        $(lists.node).slideToggle(200);
        $(lists.filter).hide();
        $(lists.configure).hide();
      };

      aFilter.onclick = function () {
        $('#configuredropdown').removeClass('activated');
        $('#nodedropdown').removeClass('activated');
        $('#filterdropdown').toggleClass('activated');
        $(lists.filter).slideToggle(200);
        $(lists.node).hide();
        $(lists.configure).hide();
      };

      return lists;
    },

    createSVG = function () {
      return d3.select("#" + container.id + " #background")
        .append("svg")
        .attr("id", "graphViewerSVG")
        .attr("width",width)
        .attr("height",height)
        .attr("class", "graph-viewer")
        .style("width", width + "px")
        .style("height", height + "px");
    },

    createZoomUIWidget = function() {
      var zoomUI = document.createElement("div"),
        zoomButtons = document.createElement("div"),
        btnTop = document.createElement("button"),
        btnLeft = document.createElement("button"),
        btnRight = document.createElement("button"),
        btnBottom = document.createElement("button");
      zoomUI.className = "gv_zoom_widget";
      zoomButtons.className = "gv_zoom_buttons_bg";

      btnTop.className = "btn btn-icon btn-zoom btn-zoom-top gv-zoom-btn pan-top";
      btnLeft.className = "btn btn-icon btn-zoom btn-zoom-left gv-zoom-btn pan-left";
      btnRight.className = "btn btn-icon btn-zoom btn-zoom-right gv-zoom-btn pan-right";
      btnBottom.className = "btn btn-icon btn-zoom btn-zoom-bottom gv-zoom-btn pan-bottom";
      btnTop.onclick = function() {
        graphViewer.zoomManager.triggerTranslation(0, -10);
      };
      btnLeft.onclick = function() {
        graphViewer.zoomManager.triggerTranslation(-10, 0);
      };
      btnRight.onclick = function() {
        graphViewer.zoomManager.triggerTranslation(10, 0);
      };
      btnBottom.onclick = function() {
        graphViewer.zoomManager.triggerTranslation(0, 10);
      };

      zoomButtons.appendChild(btnTop);
      zoomButtons.appendChild(btnLeft);
      zoomButtons.appendChild(btnRight);
      zoomButtons.appendChild(btnBottom);

      slider = document.createElement("div");
      slider.id = "gv_zoom_slider";
      slider.className = "gv_zoom_slider";

      background.appendChild(zoomUI);
      background.insertBefore(zoomUI, svg[0][0]);

      zoomUI.appendChild(zoomButtons);
      zoomUI.appendChild(slider);
      $( "#gv_zoom_slider" ).slider({
        orientation: "vertical",
        min: graphViewer.zoomManager.getMinimalZoomFactor(),
        max: 1,
        value: 1,
        step: 0.01,
        slide: function( event, ui ) {
          graphViewer.zoomManager.triggerScale(ui.value);
        }
      });
      graphViewer.zoomManager.registerSlider($("#gv_zoom_slider"));
    },

    createToolbox = function() {
      var toolbox = document.createElement("div"),
        dispatcherUI = new EventDispatcherControls(
          toolbox,
          graphViewer.nodeShaper,
          graphViewer.edgeShaper,
          graphViewer.start,
          graphViewer.dispatcherConfig
        );
      toolbox.id = "toolbox";
      toolbox.className = "btn-group btn-group-vertical toolbox";
      background.insertBefore(toolbox, svg[0][0]);
      dispatcherUI.addAll();
      // Default selection
      $("#control_event_expand").click();


    },

    createOptionBox = function() {
      //create select option box 
      var optionBox = '<li class="enabled" style="float:right">'+
      '<select id="graphSize" class="documents-size">'+
      '<optgroup label="Starting points:">'+
      '<option value="5" selected="">5 vertices</option>'+
      '<option value="10">10 vertices</option>'+
      '<option value="20">20 vertices</option>'+
      '<option value="50">50 vertices</option>'+
      '<option value="100">100 vertices</option>'+
      '<option value="500">500 vertices</option>'+
      '<option value="1000">1000 vertices</option>'+
      '<option value="2500">2500 vertices</option>'+
      '<option value="5000">5000 vertices</option>'+
      '<option value="all">All vertices</option>'+
      '</select>'+
      '</optgroup>'+
      '</li>';
      $('.headerBar .headerButtonList').prepend(optionBox);
    },

    updateAttributeExamples = function(e) {
      var element;

      if (e) {
        element = $(e);
      }
      else {
        element = $(searchAttrExampleList);
      }

      element.innerHTML = "";
      var throbber = document.createElement("li"),
        throbberImg = document.createElement("img");
      $(throbber).append(throbberImg);
      throbberImg.className = "gv-throbber";
      element.append(throbber);
      graphViewer.adapter.getAttributeExamples(function(res) {
        $(element).html('');
        _.each(res, function(r) {
          var entry = document.createElement("li"),
            link = document.createElement("a"),
            lbl = document.createElement("label");
          $(entry).append(link);
          $(link).append(lbl);
          $(lbl).append(document.createTextNode(r));
          lbl.className = "gv_dropdown_label";
          element.append(entry);
          entry.onclick = function() {
            element.value = r;
            $(element).parent().find('input').val(r);
            $(element).slideToggle(200);
          };
        });
      });
    },

    createMenu = function() {

      var transparentHeader = document.createElement("div"),
        buttons = document.createElement("div"),
        title = document.createElement("a"),
        configureLists = makeConfigure(
          buttons,
          "configuredropdown",
          "filterdropdown",
          "nodedropdown"
        );

      nodeShaperUI = new NodeShaperControls(
        configureLists.nodes,
        graphViewer.nodeShaper
      );
      edgeShaperUI = new EdgeShaperControls(
        configureLists.edges,
        graphViewer.edgeShaper
      );
      adapterUI = new GharialAdapterControls(
        configureLists.col,
        graphViewer.adapter
      );

      menubar.id = "menubar";

      transparentHeader.className = "headerBar";

      buttons.id = "modifiers";

      title.appendChild(document.createTextNode("Graph Viewer"));
      title.className = "arangoHeader";

      /*
      nodeShaperDropDown.id = "nodeshapermenu";
      edgeShaperDropDown.id = "edgeshapermenu";
      layouterDropDown.id = "layoutermenu";
      adapterDropDown.id = "adaptermenu";
      */

      menubar.appendChild(transparentHeader);
      menubar.appendChild(configureLists.configure);
      menubar.appendChild(configureLists.filter);
      menubar.appendChild(configureLists.node);
      transparentHeader.appendChild(buttons);
      transparentHeader.appendChild(title);

      adapterUI.addControlChangeGraph(function() {
        updateAttributeExamples();
        graphViewer.start(true);
      });
      adapterUI.addControlChangePriority();
      // nodeShaperUI.addControlOpticLabelAndColour(graphViewer.adapter);
      nodeShaperUI.addControlOpticLabelAndColourList(graphViewer.adapter);
      edgeShaperUI.addControlOpticLabelList();

      /*
      buttons.appendChild(nodeShaperDropDown);
      buttons.appendChild(edgeShaperDropDown);
      buttons.appendChild(layouterDropDown);
      buttons.appendChild(adapterDropDown);

      nodeShaperUI.addAll();
      edgeShaperUI.addAll();
      layouterUI.addAll();
      adapterUI.addAll();
      */
      updateAttributeExamples();
    },

    createColourList = function() {
      colourList = nodeShaperUI.createColourMappingList();
      colourList.className = "gv-colour-list";
      background.insertBefore(colourList, svg[0][0]);
    };

  container.appendChild(menubar);
  container.appendChild(background);
  background.className = "contentDiv gv-background ";
  background.id = "background";

  viewerConfig = viewerConfig || {};
  viewerConfig.zoom = true;


  svg = createSVG();

  if (Storage !== "undefined") {
    this.graphSettings = {};

    this.loadLocalStorage = function() {
      //graph name not enough, need to set db name also
      var dbName = adapterConfig.baseUrl.split('/')[2],
      combinedGraphName = adapterConfig.graphName + dbName;
      
      if (localStorage.getItem('graphSettings') === null || localStorage.getItem('graphSettings')  === 'null') {
        var obj = {};
        obj[combinedGraphName] = {
          viewer: viewerConfig,
          adapter: adapterConfig
        };
        localStorage.setItem('graphSettings', JSON.stringify(obj));
      }
      else {
        try {
          var settings = JSON.parse(localStorage.getItem('graphSettings'));
          this.graphSettings = settings;

          if (settings[combinedGraphName].viewer !== undefined) {
            viewerConfig = settings[combinedGraphName].viewer;  
          }
          if (settings[combinedGraphName].adapter !== undefined) {
            adapterConfig = settings[combinedGraphName].adapter;
          }
        }
        catch (e) {
          console.log("Could not load graph settings, resetting graph settings.");
          this.graphSettings[combinedGraphName] = {
            viewer: viewerConfig,
            adapter: adapterConfig
          };
          localStorage.setItem('graphSettings', JSON.stringify(this.graphSettings));
        }
      }

    };
    this.loadLocalStorage();
    
    this.writeLocalStorage = function() {

    };
  }

  graphViewer = new GraphViewer(svg, width, height, adapterConfig, viewerConfig);

  createToolbox();
  createZoomUIWidget();
  createMenu();
  createColourList();
  makeDisplayInformationDiv();
  createOptionBox();

  $('#graphSize').on('change', function() {
    var size = $('#graphSize').find(":selected").val();
      graphViewer.loadGraphWithRandomStart(function(node) {
        if (node && node.errorCode) {
          window.alert("Sorry your graph seems to be empty");
        }
      }, size);
  });

  if (startNode) {
    if (typeof startNode === "string") {
      graphViewer.loadGraph(startNode);
    } else {
      graphViewer.loadGraphWithRandomStart(function(node) {
        if (node && node.errorCode) {
          window.alert("Sorry your graph seems to be empty");
        }
      });
    }
  }

  this.changeWidth = function(w) {
    graphViewer.changeWidth(w);
    var reducedW = w - 55;
    svg.attr("width", reducedW)
      .style("width", reducedW + "px");
  };

  //add events for writing/reading local storage (input fields)


  
}

/*global document, $, _ */
/*global d3, window*/
/*global GraphViewer, EventDispatcherControls, EventDispatcher */
////////////////////////////////////////////////////////////////////////////////
/// @brief Graph functionality
///
/// @file
///
/// DISCLAIMER
///
/// Copyright 2010-2012 triagens GmbH, Cologne, Germany
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///
///     http://www.apache.org/licenses/LICENSE-2.0
///
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// Copyright holder is triAGENS GmbH, Cologne, Germany
///
/// @author Michael Hackstein
/// @author Copyright 2011-2013, triAGENS GmbH, Cologne, Germany
////////////////////////////////////////////////////////////////////////////////

/*******************************************************************************
* Assume the widget is imported via an iframe.
* Hence we append everything directly to the body
* and make use of all available space.
*******************************************************************************/

function GraphViewerWidget(viewerConfig, startNode) {
  "use strict";

  /*******************************************************************************
  * Internal variables and functions
  *******************************************************************************/

  var svg,
    container,
    width,
    height,
    viewer,
    createTB,
    adapterConfig,
    dispatcherUI,
    //mousePointerBox = document.createElement("div"),


    createSVG = function() {
      return d3.select(container)
        .append("svg")
        .attr("id", "graphViewerSVG")
        .attr("width",width)
        .attr("height",height)
        .attr("class", "graph-viewer")
        .attr("style", "width:" + width + "px;height:" + height + "px;");
    },

    shouldCreateToolbox = function(config) {
      var counter = 0;
      _.each(config, function(v, k) {
        if (v === false) {
          delete config[k];
        } else {
          counter++;
        }
      });
      return counter > 0;
    },

    addRebindsToList = function(list, rebinds) {
      _.each(rebinds, function(acts, obj) {
        list[obj] = list[obj] || {};
        _.each(acts, function(func, trigger) {
          list[obj][trigger] = func;
        });
      });
    },

    parseActions = function(config) {
      if (!config) {
        return;
      }
      var allActions = {};
      if (config.drag) {
        addRebindsToList(allActions, dispatcherUI.dragRebinds());
      }
      if (config.create) {
        addRebindsToList(allActions, dispatcherUI.newNodeRebinds());
        addRebindsToList(allActions, dispatcherUI.connectNodesRebinds());
      }
      if (config.remove) {
        addRebindsToList(allActions, dispatcherUI.deleteRebinds());
      }
      if (config.expand) {
        addRebindsToList(allActions, dispatcherUI.expandRebinds());
      }
      if (config.edit) {
        addRebindsToList(allActions, dispatcherUI.editRebinds());
      }
      dispatcherUI.rebindAll(allActions);
    },

    createToolbox = function(config) {
      var toolbox = document.createElement("div");
      dispatcherUI = new EventDispatcherControls(
        toolbox,
        viewer.nodeShaper,
        viewer.edgeShaper,
        viewer.start,
        viewer.dispatcherConfig
      );
      toolbox.id = "toolbox";
      toolbox.className = "btn-group btn-group-vertical pull-left toolbox";
      container.appendChild(toolbox);
      /*
      mousePointerBox.id = "mousepointer";
      mousePointerBox.className = "mousepointer";
      container.appendChild(mousePointerBox);
      */
      _.each(config, function(v, k) {
        switch(k) {
          case "expand":
            dispatcherUI.addControlExpand();
            break;
          case "create":
            dispatcherUI.addControlNewNode();
            dispatcherUI.addControlConnect();
            break;
          case "drag":
            dispatcherUI.addControlDrag();
            break;
          case "edit":
            dispatcherUI.addControlEdit();
            break;
          case "remove":
            dispatcherUI.addControlDelete();
            break;
        }
      });
    },

    createDispatcherOnly = function(config) {
      var toolbox = document.createElement("div");
      dispatcherUI = new EventDispatcherControls(
        toolbox,
//        mousePointerBox,
        viewer.nodeShaper,
        viewer.edgeShaper,
        viewer.start,
        viewer.dispatcherConfig
      );
    },

    createViewer = function() {
      return new GraphViewer(svg, width, height, adapterConfig, viewerConfig);
    };


  /*******************************************************************************
  * Execution start
  *******************************************************************************/

  container = document.body;
  width = container.offsetWidth;
  height = container.offsetHeight;
  adapterConfig = {
    type: "foxx",
    route: "."
  };

  viewerConfig = viewerConfig || {};
  createTB = shouldCreateToolbox(viewerConfig.toolbox);
  if (createTB) {
    width -= 43;
  }
  svg = createSVG();
  viewer = createViewer();
  if (createTB) {
    createToolbox(viewerConfig.toolbox);
  } else {
    createDispatcherOnly();
  }
  if (startNode) {
    viewer.loadGraph(startNode);
  }
  parseActions(viewerConfig.actions);

}

/*global $, _, d3*/
/*global document*/
/*global EdgeShaper, modalDialogHelper, uiComponentsHelper*/
////////////////////////////////////////////////////////////////////////////////
/// @brief Graph functionality
///
/// @file
///
/// DISCLAIMER
///
/// Copyright 2010-2012 triagens GmbH, Cologne, Germany
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///
///     http://www.apache.org/licenses/LICENSE-2.0
///
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// Copyright holder is triAGENS GmbH, Cologne, Germany
///
/// @author Michael Hackstein
/// @author Copyright 2011-2013, triAGENS GmbH, Cologne, Germany
////////////////////////////////////////////////////////////////////////////////
function LayouterControls(list, layouter) {
  "use strict";

  if (list === undefined) {
    throw "A list element has to be given.";
  }
  if (layouter === undefined) {
    throw "The Layouter has to be given.";
  }
  var self = this;

  this.addControlGravity = function() {
    var prefix = "control_layout_gravity",
      idprefix = prefix + "_";
    uiComponentsHelper.createButton(list, "Gravity", prefix, function() {
      modalDialogHelper.createModalDialog("Switch Gravity Strength",
        idprefix, [{
          type: "text",
          id: "value"
        }], function () {
          var value = $("#" + idprefix + "value").attr("value");
          layouter.changeTo({
            gravity: value
          });
        }
      );
    });
  };

  this.addControlCharge = function() {
    var prefix = "control_layout_charge",
      idprefix = prefix + "_";
    uiComponentsHelper.createButton(list, "Charge", prefix, function() {
      modalDialogHelper.createModalDialog("Switch Charge Strength",
        idprefix, [{
          type: "text",
          id: "value"
        }], function () {
          var value = $("#" + idprefix + "value").attr("value");
          layouter.changeTo({
            charge: value
          });
        }
      );
    });
  };

  this.addControlDistance = function() {
    var prefix = "control_layout_distance",
      idprefix = prefix + "_";
    uiComponentsHelper.createButton(list, "Distance", prefix, function() {
      modalDialogHelper.createModalDialog("Switch Distance Strength",
        idprefix, [{
          type: "text",
          id: "value"
        }], function () {
          var value = $("#" + idprefix + "value").attr("value");
          layouter.changeTo({
            distance: value
          });
        }
      );
    });
  };


  this.addAll = function () {
    self.addControlDistance();
    self.addControlGravity();
    self.addControlCharge();
  };

}

/*global document, $, _ */

////////////////////////////////////////////////////////////////////////////////
/// @brief Graph functionality
///
/// @file
///
/// DISCLAIMER
///
/// Copyright 2010-2012 triagens GmbH, Cologne, Germany
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///
///     http://www.apache.org/licenses/LICENSE-2.0
///
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// Copyright holder is triAGENS GmbH, Cologne, Germany
///
/// @author Michael Hackstein
/// @author Copyright 2011-2013, triAGENS GmbH, Cologne, Germany
////////////////////////////////////////////////////////////////////////////////

var modalDialogHelper = modalDialogHelper || {};

(function dialogHelper() {
  "use strict";

  var
    bindSubmit = function(button) {
      $(document).bind("keypress.key13", function(e) {
        if (e.which && e.which === 13) {
          $(button).click();
        }
      });
    },

    unbindSubmit = function() {
      $(document).unbind("keypress.key13");
    },

    createDialogWithObject = function (title, buttonTitle, idprefix, object, callback) {
      var tableToJSON,
        callbackCapsule = function() {
          callback(tableToJSON);
        },
        table = modalDialogHelper.modalDivTemplate(title, buttonTitle, idprefix, callbackCapsule),
        firstRow = document.createElement("tr"),
        firstCell = document.createElement("th"),
        secondCell = document.createElement("th"),
        thirdCell = document.createElement("th"),
        addRow = document.createElement("button"),
        newCounter = 1,
        insertRow;

      tableToJSON = function() {
        var result = {};
        _.each($("#" + idprefix + "table tr:not(#first_row)"), function(tr) {

          var key = $(".keyCell input", tr).val(),
            value = $(".valueCell input", tr).val();
          result[key] = value;
        });
        return result;
      };

      table.appendChild(firstRow);
      firstRow.id = "first_row";
      firstRow.appendChild(firstCell);
      firstCell.className = "keyCell";

      firstRow.appendChild(secondCell);
      secondCell.className = "valueCell";

      firstRow.appendChild(thirdCell);

      thirdCell.className = "actionCell";
      thirdCell.appendChild(addRow);

      addRow.id = idprefix + "new";
      addRow.className = "graphViewer-icon-button gv-icon-small add";

      insertRow = function(value, key) {
        var internalRegex = /^_(id|rev|key|from|to)/,
          tr = document.createElement("tr"),
          actTh = document.createElement("th"),
          keyTh = document.createElement("th"),
          valueTh = document.createElement("th"),
          deleteInput,
          keyInput,
          valueInput;
        if (internalRegex.test(key)) {
          return;
        }
        table.appendChild(tr);

        tr.appendChild(keyTh);
        keyTh.className = "keyCell";
        keyInput = document.createElement("input");
        keyInput.type = "text";
        keyInput.id = idprefix + key + "_key";
        keyInput.value = key;
        keyTh.appendChild(keyInput);


        tr.appendChild(valueTh);
        valueTh.className = "valueCell";
        valueInput = document.createElement("input");
        valueInput.type = "text";
        valueInput.id = idprefix + key + "_value";
        if ("object" === typeof value) {
          valueInput.value = JSON.stringify(value);
        } else {
          valueInput.value = value;
        }

        valueTh.appendChild(valueInput);


        tr.appendChild(actTh);
        actTh.className = "actionCell";
        deleteInput = document.createElement("button");
        deleteInput.id = idprefix + key + "_delete";
        deleteInput.className = "graphViewer-icon-button gv-icon-small delete";

        actTh.appendChild(deleteInput);

        deleteInput.onclick = function() {
          table.removeChild(tr);
        };

      };

      addRow.onclick = function() {
        insertRow("", "new_" + newCounter);
        newCounter++;
      };

      _.each(object, insertRow);
      $("#" + idprefix + "modal").modal('show');
    },

    createViewWithObject = function (title, buttonTitle, idprefix, object, callback) {
      var table = modalDialogHelper.modalDivTemplate(title, buttonTitle, idprefix, callback),
        firstRow = document.createElement("tr"),
        firstCell = document.createElement("th"),
        pre = document.createElement("pre");
      table.appendChild(firstRow);
      firstRow.appendChild(firstCell);
      firstCell.appendChild(pre);
      pre.className = "gv-object-view";
      pre.innerHTML = JSON.stringify(object, null, 2);
      $("#" + idprefix + "modal").modal('show');
    },

    createTextInput = function(id, value) {
      var input = document.createElement("input");
        input.type = "text";
        input.id = id;
        input.value = value;
        return input;
    },

    createCheckboxInput = function(id, selected) {
      var input = document.createElement("input");
      input.type = "checkbox";
      input.id = id;
      input.checked = selected;
      return input;
    },

    createListInput = function(id, list, selected) {
      var input = document.createElement("select");
      input.id = id;
      _.each(
        _.sortBy(list, function(e) {
          return e.toLowerCase();
        }), function(entry) {
        var option = document.createElement("option");
        option.value = entry;
        option.selected = (entry === selected);
        option.appendChild(
          document.createTextNode(entry)
        );
        input.appendChild(option);
      });
      return input;
    },

    displayDecissionRowsOfGroup = function(group) {
      var options = $(".decission_" + group),
      selected = $("input[type='radio'][name='" + group + "']:checked").attr("id");
      options.each(function() {
        if ($(this).attr("decider") === selected) {
          $(this).css("display", "");
        } else {
          $(this).css("display", "none");
        }
      });
    },

    insertModalRow,

    insertDecissionInput = function(idPre, idPost, group,
      text, isDefault, interior, contentTh, table) {
      var input = document.createElement("input"),
        id = idPre + idPost,
        lbl = document.createElement("label"),
        tBody = document.createElement("tbody");
      input.id = id;
      input.type = "radio";
      input.name = group;
      input.className = "gv-radio-button";
      lbl.className = "radio";
      contentTh.appendChild(lbl);
      lbl.appendChild(input);
      lbl.appendChild(document.createTextNode(text));
      table.appendChild(tBody);
      $(tBody).toggleClass("decission_" + group, true);
      $(tBody).attr("decider", id);
      _.each(interior, function(o) {
        insertModalRow(tBody, idPre, o);
      });
      if (isDefault) {
        input.checked = true;
      } else {
        input.checked = false;
      }
      lbl.onclick = function(e) {
        displayDecissionRowsOfGroup(group);
        e.stopPropagation();
      };
      displayDecissionRowsOfGroup(group);
    },

    insertExtendableInput = function(idPre, idPost, list, contentTh, table, tr) {
      var rows = [],
        i,
        id = idPre + idPost,
        lastId = 1,
        buttonTh = document.createElement("th"),
        addLineButton = document.createElement("button"),
        input = document.createElement("input"),
        addNewLine = function(content) {
          lastId++;
          var innerTr = document.createElement("tr"),
            innerLabelTh = document.createElement("th"),
            innerContentTh = document.createElement("th"),
            innerButtonTh = document.createElement("th"),
            innerInput = document.createElement("input"),
            removeRow = document.createElement("button"),
            lastItem;
          innerInput.type = "text";
          innerInput.id = id + "_" + lastId;
          innerInput.value = content || "";
          if (rows.length === 0) {
            lastItem = $(tr);
          } else {
            lastItem = $(rows[rows.length - 1]);
          }
          lastItem.after(innerTr);
          innerTr.appendChild(innerLabelTh);
          innerLabelTh.className = "collectionTh capitalize";
          innerLabelTh.appendChild(document.createTextNode(idPost + " " + lastId + ":"));
          innerTr.appendChild(innerContentTh);
          innerContentTh.className = "collectionTh";
          innerContentTh.appendChild(innerInput);
          removeRow.id = id + "_" + lastId + "_remove";
          removeRow.className = "graphViewer-icon-button gv-icon-small delete";
          removeRow.onclick = function() {
            table.removeChild(innerTr);
            rows.splice(rows.indexOf(innerTr), 1 );
          };
          innerButtonTh.appendChild(removeRow);
          innerTr.appendChild(innerButtonTh);
          rows.push(innerTr);
        };
      input.type = "text";
      input.id = id + "_1";
      contentTh.appendChild(input);
      buttonTh.appendChild(addLineButton);
      tr.appendChild(buttonTh);
      addLineButton.onclick = function() {
        addNewLine();
      };
      addLineButton.id = id + "_addLine";
      addLineButton.className = "graphViewer-icon-button gv-icon-small add";
      if (typeof list === "string" && list.length > 0) {
        list = [list];
      }
      if (list.length > 0) {
        input.value = list[0];
      }
      for (i = 1; i < list.length; i++) {
        addNewLine(list[i]);
      }
    },

    modalContent = function(title, idprefix) {
      // Create needed Elements

      var div = document.createElement("div"),
        headerDiv = document.createElement("div"),
        buttonDismiss = document.createElement("button"),
        header = document.createElement("a"),
        bodyDiv = document.createElement("div"),
        bodyTable = document.createElement("table");

      // Set Classnames and attributes.
      div.id = idprefix + "modal";
      div.className = "modal hide fade createModalDialog";
      div.setAttribute("tabindex", "-1");
      div.setAttribute("role", "dialog");
      div.setAttribute("aria-labelledby", "myModalLabel");
      div.setAttribute("aria-hidden", true);
      div.style.display = "none";
      div.onhidden = function() {
        unbindSubmit();
        document.body.removeChild(div);
      };

      headerDiv.className = "modal-header";
      header.className = "arangoHeader";
      buttonDismiss.id = idprefix + "modal_dismiss";
      buttonDismiss.className = "close";
      buttonDismiss.dataDismiss = "modal";
      buttonDismiss.ariaHidden = "true";
      buttonDismiss.appendChild(document.createTextNode("×"));

      header.appendChild(document.createTextNode(title));

      bodyDiv.className = "modal-body";

      bodyTable.id = idprefix + "table";

      // Append in correct ordering
      div.appendChild(headerDiv);
      div.appendChild(bodyDiv);

      headerDiv.appendChild(buttonDismiss);
      headerDiv.appendChild(header);

      bodyDiv.appendChild(bodyTable);

      document.body.appendChild(div);

      buttonDismiss.onclick = function() {
        unbindSubmit();
        $("#" + idprefix + "modal").modal('hide');
      };

      return {
        div: div,
        bodyTable: bodyTable
      };
    };

  insertModalRow = function(table, idprefix, o) {
    var tr = document.createElement("tr"),
      labelTh = document.createElement("th"),
      contentTh = document.createElement("th");
    table.appendChild(tr);
    tr.appendChild(labelTh);
    labelTh.className = "collectionTh";
    if (o.text) {
      labelTh.appendChild(document.createTextNode(o.text + ":"));
    } else {
      labelTh.className += " capitalize";
      if (o.type && o.type === "extenadable") {
        labelTh.appendChild(document.createTextNode(o.id + ":"));
      } else {
        labelTh.appendChild(document.createTextNode(o.id + ":"));
      }
    }
    tr.appendChild(contentTh);
    contentTh.className = "collectionTh";
    switch(o.type) {
      case "text":
        contentTh.appendChild(createTextInput(idprefix + o.id, o.value || ""));
        break;
      case "checkbox":
        contentTh.appendChild(createCheckboxInput(idprefix + o.id, o.selected || false));
        break;
      case "list":
        contentTh.appendChild(createListInput(idprefix + o.id, o.objects, o.selected || undefined));
        break;
      case "extendable":
        insertExtendableInput(idprefix, o.id, o.objects, contentTh, table, tr);
        break;
      case "decission":
        insertDecissionInput(idprefix, o.id, o.group, o.text,
          o.isDefault, o.interior, contentTh, table);
        labelTh.innerHTML = "";
        break;
      default:
        //Sorry unknown
        table.removeChild(tr);
        break;
    }
    return tr;
  };


  modalDialogHelper.modalDivTemplate = function (title, buttonTitle, idprefix, callback) {

    buttonTitle = buttonTitle || "Switch";

    var footerDiv = document.createElement("div"),
      buttonCancel = document.createElement("button"),
      buttonSubmit = document.createElement("button"),
      content = modalContent(title, idprefix);

    footerDiv.className = "modal-footer";

    buttonCancel.id = idprefix + "cancel";
    buttonCancel.className = "button-close btn-margin";
    buttonCancel.appendChild(document.createTextNode("Close"));

    buttonSubmit.id = idprefix + "submit";
    buttonSubmit.className = "button-success";
    buttonSubmit.style.marginRight = "8px";
    buttonSubmit.appendChild(document.createTextNode(buttonTitle));

    content.div.appendChild(footerDiv);
    footerDiv.appendChild(buttonSubmit);
    footerDiv.appendChild(buttonCancel);

    // Add click events
    buttonCancel.onclick = function() {
      unbindSubmit();
      $("#" + idprefix + "modal").modal('hide');
    };
    buttonSubmit.onclick = function() {
      unbindSubmit();
      callback();
      $("#" + idprefix + "modal").modal('hide');
    };
    bindSubmit(buttonSubmit);
    // Return the table which has to be filled somewhere else
    return content.bodyTable;
  };

  modalDialogHelper.createModalDialog = function(title, idprefix, objects, callback, buttonTitle) {
    var table =  modalDialogHelper.modalDivTemplate(title, buttonTitle, idprefix, callback);
    _.each(objects, function(o) {
      insertModalRow(table, idprefix, o);
    });
    $("#" + idprefix + "modal").modal('show');
  };

  modalDialogHelper.createModalChangeDialog = function(title, idprefix, objects, callback) {
    var table =  modalDialogHelper.modalDivTemplate(title, "Change", idprefix, callback);
    _.each(objects, function(o) {
      insertModalRow(table, idprefix, o);
    });
    $("#" + idprefix + "modal").modal('show');
  };

  modalDialogHelper.createModalEditDialog = function(title, idprefix, object, callback) {
    createDialogWithObject(title, "Save", idprefix, object, callback);
  };

  modalDialogHelper.createModalCreateDialog = function(title, idprefix, object, callback) {
    createDialogWithObject(title, "Create", idprefix, object, callback);
  };

  modalDialogHelper.createModalViewDialog = function(title, idprefix, object, callback) {
    createViewWithObject(title, "Edit", idprefix, object, callback);
  };

  modalDialogHelper.createModalDeleteDialog = function(title, idprefix, object, callback) {
    var footerDiv = document.createElement("div"),
      buttonCancel = document.createElement("button"),
      buttonSubmit = document.createElement("button"),
      content = modalContent(title, idprefix);

    footerDiv.className = "modal-footer";

    buttonCancel.id = idprefix + "cancel";
    buttonCancel.className = "button-close btn-margin";
    buttonCancel.appendChild(document.createTextNode("Close"));

    buttonSubmit.id = idprefix + "submit";
    buttonSubmit.className = "button-danger";
    buttonSubmit.style.marginRight = "8px";
    buttonSubmit.appendChild(document.createTextNode("Delete"));

    content.div.appendChild(footerDiv);
    footerDiv.appendChild(buttonSubmit);
    footerDiv.appendChild(buttonCancel);

    // Add click events
    buttonCancel.onclick = function() {
      unbindSubmit();
      $("#" + idprefix + "modal").modal('hide');
    };
    buttonSubmit.onclick = function() {
      unbindSubmit();
      callback(object);
      $("#" + idprefix + "modal").modal('hide');
    };
    bindSubmit(buttonSubmit);
    $("#" + idprefix + "modal").modal('show');
  };

}());

/*global $, _, d3*/
/*global document, Storage, localStorage, window*/
/*global NodeShaper, modalDialogHelper, uiComponentsHelper*/
////////////////////////////////////////////////////////////////////////////////
/// @brief Graph functionality
///
/// @file
///
/// DISCLAIMER
///
/// Copyright 2010-2012 triagens GmbH, Cologne, Germany
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///
///     http://www.apache.org/licenses/LICENSE-2.0
///
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// Copyright holder is triAGENS GmbH, Cologne, Germany
///
/// @author Michael Hackstein
/// @author Copyright 2011-2013, triAGENS GmbH, Cologne, Germany
////////////////////////////////////////////////////////////////////////////////
function NodeShaperControls(list, shaper) {
  "use strict";

  if (list === undefined) {
    throw "A list element has to be given.";
  }
  if (shaper === undefined) {
    throw "The NodeShaper has to be given.";
  }
  var self = this,
    colourDiv,

    fillColourDiv = function(mapping) {
      while (colourDiv.hasChildNodes()) {
          colourDiv.removeChild(colourDiv.lastChild);
      }
      var list = document.createElement("ul");
      colourDiv.appendChild(list);
      _.each(mapping, function(obj, col) {
        var ul = document.createElement("ul"),
          els = obj.list,
          fore = obj.front;
        ul.style.backgroundColor = col;
        ul.style.color = fore;
        _.each(els, function(e) {
          var li = document.createElement("li");
          li.appendChild(document.createTextNode(e));
          ul.appendChild(li);
        });
        list.appendChild(ul);
      });
    };

  this.addControlOpticShapeNone = function() {
    uiComponentsHelper.createButton(list, "None", "control_node_none", function() {
      shaper.changeTo({
        shape: {
          type: NodeShaper.shapes.NONE
        }
      });
    });
  };

  this.applyLocalStorage = function(obj) {
    if (Storage !== "undefined") {
      try {
        var toStore = JSON.parse(localStorage.getItem('graphSettings')),
        graphName = (window.location.hash).split("/")[1],
        dbName = (window.location.pathname).split('/')[2],
        combinedGraphName = graphName + dbName;

        _.each(obj, function(value, key) {
          if (key !== undefined) {
            toStore[combinedGraphName].viewer.nodeShaper[key] = value;
          }
        });

        localStorage.setItem('graphSettings', JSON.stringify(toStore));
      }
      catch (e) {
        console.log(e);
      }
    }
  };

  this.addControlOpticShapeCircle = function() {
    var prefix = "control_node_circle",
      idprefix = prefix + "_";
    uiComponentsHelper.createButton(list, "Circle", prefix, function() {
      modalDialogHelper.createModalDialog("Switch to Circle",
        idprefix, [{
          type: "text",
          id: "radius"
        }], function () {
          var r = $("#" + idprefix + "radius").attr("value");
          shaper.changeTo({
            shape: {
              type: NodeShaper.shapes.CIRCLE,
              radius: r
            }
          });
        }
      );
    });
  };

  this.addControlOpticShapeRect = function() {
    var prefix = "control_node_rect",
      idprefix = prefix + "_";
    uiComponentsHelper.createButton(list, "Rectangle", prefix, function() {
      modalDialogHelper.createModalDialog("Switch to Rectangle",
        "control_node_rect_", [{
          type: "text",
          id: "width"
        },{
          type: "text",
          id: "height"
        }], function () {
          var w = $("#" + idprefix + "width").attr("value"),
          h = $("#" + idprefix + "height").attr("value");
          shaper.changeTo({
            shape: {
              type: NodeShaper.shapes.RECT,
              width: w,
              height: h
            }
          });
        }
      );
    });
  };

  this.addControlOpticLabel = function() {
    var prefix = "control_node_label",
      idprefix = prefix + "_";
    uiComponentsHelper.createButton(list, "Configure Label", prefix, function() {
      modalDialogHelper.createModalChangeDialog("Change label attribute",
        idprefix, [{
          type: "text",
          id: "key"
        }], function () {
          var key = $("#" + idprefix + "key").attr("value");
          var shaperObj = {
            label: key
          };
          self.applyLocalStorage(shaperObj);
          shaper.changeTo(shaperObj);
        }
      );
    });
  };

  //////////////////////////////////////////////////////////////////
  //  Colour Buttons
  //////////////////////////////////////////////////////////////////

  this.addControlOpticSingleColour = function() {
    var prefix = "control_node_singlecolour",
      idprefix = prefix + "_";
    uiComponentsHelper.createButton(list, "Single Colour", prefix, function() {
      modalDialogHelper.createModalDialog("Switch to Colour",
        idprefix, [{
          type: "text",
          id: "fill"
        },{
          type: "text",
          id: "stroke"
        }], function () {
          var fill = $("#" + idprefix + "fill").attr("value"),
          stroke = $("#" + idprefix + "stroke").attr("value");
          shaper.changeTo({
            color: {
              type: "single",
              fill: fill,
              stroke: stroke
            }
          });
        }
      );
    });
  };

  this.addControlOpticAttributeColour = function() {
    var prefix = "control_node_attributecolour",
      idprefix = prefix + "_";
    uiComponentsHelper.createButton(list, "Colour by Attribute", prefix, function() {
      modalDialogHelper.createModalDialog("Display colour by attribute",
        idprefix, [{
          type: "text",
          id: "key"
        }], function () {
          var key = $("#" + idprefix + "key").attr("value");
          shaper.changeTo({
            color: {
              type: "attribute",
              key: key
            }
          });
        }
      );
    });
  };

  this.addControlOpticExpandColour = function() {
    var prefix = "control_node_expandcolour",
      idprefix = prefix + "_";
    uiComponentsHelper.createButton(list, "Expansion Colour", prefix, function() {
      modalDialogHelper.createModalDialog("Display colours for expansion",
        idprefix, [{
          type: "text",
          id: "expanded"
        },{
          type: "text",
          id: "collapsed"
        }], function () {
          var expanded = $("#" + idprefix + "expanded").attr("value"),
          collapsed = $("#" + idprefix + "collapsed").attr("value");
          shaper.changeTo({
            color: {
              type: "expand",
              expanded: expanded,
              collapsed: collapsed
            }
          });
        }
      );
    });
  };

  //////////////////////////////////////////////////////////////////
  //  Mixed Buttons
  //////////////////////////////////////////////////////////////////

  this.addControlOpticLabelAndColour = function(adapter) {
    var prefix = "control_node_labelandcolour",
      idprefix = prefix + "_";
    uiComponentsHelper.createButton(list, "Configure Label", prefix, function() {
      modalDialogHelper.createModalChangeDialog("Change label attribute",
        idprefix, [{
          type: "text",
          id: "label-attribute",
          text: "Vertex label attribute",
          value: shaper.getLabel() || ""
        },{
          type: "decission",
          id: "samecolour",
          group: "colour",
          text: "Use this attribute for coloring, too",
          isDefault: (shaper.getLabel() === shaper.getColor())
        },{
          type: "decission",
          id: "othercolour",
          group: "colour",
          text: "Use different attribute for coloring",
          isDefault: (shaper.getLabel() !== shaper.getColor()),
          interior: [
            {
              type: "text",
              id: "colour-attribute",
              text: "Color attribute",
              value: shaper.getColor() || ""
            }
          ]
        }], function () {
          var key = $("#" + idprefix + "label-attribute").attr("value"),
            colourkey = $("#" + idprefix + "colour-attribute").attr("value"),
            selected = $("input[type='radio'][name='colour']:checked").attr("id");
          if (selected === idprefix + "samecolour") {
            colourkey = key;
          }
          var shaperObj = {
            label: key,
            color: {
              type: "attribute",
              key: colourkey
            }
          };
          self.applyLocalStorage(shaperObj);
          shaper.changeTo(shaperObj);
          if (colourDiv === undefined) {
            colourDiv = self.createColourMappingList();
          }
        }
      );
    });
  };

  this.addControlOpticLabelAndColourList = function(adapter) {
    var prefix = "control_node_labelandcolourlist",
      idprefix = prefix + "_";
    uiComponentsHelper.createButton(list, "Configure Label", prefix, function() {
      modalDialogHelper.createModalChangeDialog("Change label attribute",
        idprefix, [{
          type: "extendable",
          id: "label",
          text: "Vertex label attribute",
          objects: shaper.getLabel()
        },{
          type: "decission",
          id: "samecolour",
          group: "colour",
          text: "Use this attribute for coloring, too",
          isDefault: (shaper.getLabel() === shaper.getColor())
        },{
          type: "decission",
          id: "othercolour",
          group: "colour",
          text: "Use different attribute for coloring",
          isDefault: (shaper.getLabel() !== shaper.getColor()),
          interior: [
            {
              type: "extendable",
              id: "colour",
              text: "Color attribute",
              objects: shaper.getColor() || ""
            }
          ]
        }], function () {
          var lblList = $("input[id^=" + idprefix + "label_]"),
            colList = $("input[id^=" + idprefix + "colour_]"),
            selected = $("input[type='radio'][name='colour']:checked").attr("id"),
            labels = [], colours = [];
          lblList.each(function(i, t) {
            var val = $(t).val();
            if (val !== "") {
              labels.push(val);
            }
          });
          colList.each(function(i, t) {
            var val = $(t).val();
            if (val !== "") {
              colours.push(val);
            }
          });
          if (selected === idprefix + "samecolour") {
            colours = labels;
          }

          var shaperObj = {
            label: labels,
            color: {
              type: "attribute",
              key: colours
            }
          };

          self.applyLocalStorage(shaperObj);

          shaper.changeTo(shaperObj);
          if (colourDiv === undefined) {
            colourDiv = self.createColourMappingList();
          }
        }
      );
    });
  };

  //////////////////////////////////////////////////////////////////
  //  Multiple Buttons
  //////////////////////////////////////////////////////////////////

  this.addAllOptics = function () {
    self.addControlOpticShapeNone();
    self.addControlOpticShapeCircle();
    self.addControlOpticShapeRect();
    self.addControlOpticLabel();
    self.addControlOpticSingleColour();
    self.addControlOpticAttributeColour();
    self.addControlOpticExpandColour();
  };

  this.addAllActions = function () {

  };

  this.addAll = function () {
    self.addAllOptics();
    self.addAllActions();
  };

  //////////////////////////////////////////////////////////////////
  //  Colour Mapping List
  //////////////////////////////////////////////////////////////////

  this.createColourMappingList = function() {
    if (colourDiv !== undefined) {
      return colourDiv;
    }
    colourDiv = document.createElement("div");
    colourDiv.id = "node_colour_list";
    fillColourDiv(shaper.getColourMapping());
    shaper.setColourMappingListener(fillColourDiv);
    return colourDiv;
  };
}

/*global document, $, _ */

////////////////////////////////////////////////////////////////////////////////
/// @brief Graph functionality
///
/// @file
///
/// DISCLAIMER
///
/// Copyright 2010-2012 triagens GmbH, Cologne, Germany
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///
///     http://www.apache.org/licenses/LICENSE-2.0
///
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// Copyright holder is triAGENS GmbH, Cologne, Germany
///
/// @author Michael Hackstein
/// @author Copyright 2011-2013, triAGENS GmbH, Cologne, Germany
////////////////////////////////////////////////////////////////////////////////

var uiComponentsHelper = uiComponentsHelper || {};

(function componentsHelper() {
  "use strict";

  uiComponentsHelper.createButton = function(list, title, prefix, callback) {
    var li = document.createElement("li"),
      button = document.createElement("button");
    li.className = "graph_control " + prefix;
    li.id = prefix;
    li.appendChild(button);
    button.className = "button-primary gv_dropdown_entry";
    button.appendChild(document.createTextNode(title));
    list.appendChild(li);
    button.id = prefix + "_button";
    button.onclick = callback;
  };

  uiComponentsHelper.createIconButton = function(iconInfo, prefix, callback) {
    var button = document.createElement("div"),
        icon = document.createElement("h6"),
        label = document.createElement("h6");
    button.className = "gv_action_button";
    button.id = prefix;
    button.onclick = function() {
      $(".gv_action_button").each(function(i, btn) {
        $(btn).toggleClass("active", false);
      });

      if (button.id === "control_event_new_node") {
        $('.node').css('cursor', 'pointer');
        $('.gv-background').css('cursor', 'copy');
      }
      else if (button.id === "control_event_drag") {
        $('.node').css('cursor', '-webkit-grabbing');
        $('.gv-background').css('cursor', 'default');
      }
      else if (button.id === "control_event_expand") {
        $('.node').css('cursor', 'grabbing');
        $('.gv-background').css('cursor', 'default');
      }
      else if (button.id === "control_event_view") {
        $('.node').css('cursor', '-webkit-zoom-in');
        $('.gv-background').css('cursor', 'default');
      }
      else if (button.id === "control_event_edit") {
        $('.gv-background .node').css('cursor', 'context-menu');
        $('.gv-background').css('cursor', 'default');
      }
      else if (button.id === "control_event_connect") {
        $('.node').css('cursor', 'ne-resize');
        $('.gv-background').css('cursor', 'default');
      }
      else if (button.id === "control_event_delete") {
        $('.node').css('cursor', 'pointer');
        $('.gv-background').css('cursor', 'default');
      }

      $(button).toggleClass("active", true);
      callback();
    };
    icon.className = "fa gv_icon_icon fa-" + iconInfo.icon;
    icon.title = iconInfo.title;
    label.className = "gv_button_title";
    button.appendChild(icon);
    button.appendChild(label);
    label.appendChild(document.createTextNode(iconInfo.title));
    return button;
  };

}());

/*global _, $*/
/*global ArangoAdapter, JSONAdapter, FoxxAdapter, PreviewAdapter, GharialAdapter*/
/*global ForceLayouter, EdgeShaper, NodeShaper, ZoomManager */
////////////////////////////////////////////////////////////////////////////////
/// @brief Graph functionality
///
/// @file
///
/// DISCLAIMER
///
/// Copyright 2010-2012 triagens GmbH, Cologne, Germany
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///
///     http://www.apache.org/licenses/LICENSE-2.0
///
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// Copyright holder is triAGENS GmbH, Cologne, Germany
///
/// @author Michael Hackstein
/// @author Copyright 2011-2013, triAGENS GmbH, Cologne, Germany
////////////////////////////////////////////////////////////////////////////////

function GraphViewer(svg, width, height, adapterConfig, config) {
  "use strict";

  // Make the html aware of xmlns:xlink
  $("html").attr("xmlns:xlink", "http://www.w3.org/1999/xlink");

  // Check if all required inputs are given
  if (svg === undefined || svg.append === undefined) {
    throw "SVG has to be given and has to be selected using d3.select";
  }

  if (width === undefined || width <= 0) {
    throw "A width greater 0 has to be given";
  }

  if (height === undefined || height <= 0) {
    throw "A height greater 0 has to be given";
  }

  if (adapterConfig === undefined || adapterConfig.type === undefined) {
    throw "An adapter configuration has to be given";
  }

  // Globally disable the right-click menu
  /*
  svg[0][0].oncontextmenu = function() {
    return false;
  };
  */
  var self = this,
    adapter,
    nodeShaper,
    edgeShaper,
    layouter,
    zoomManager,
    graphContainer,
    nodeContainer,
    edgeContainer,
    fixedSize,
    edges = [],
    nodes = [],

  parseLayouterConfig = function (config) {
    if (!config) {
      // Default
      config = {};
      config.nodes = nodes;
      config.links = edges;
      config.width = width;
      config.height = height;
      layouter = new ForceLayouter(config);
      return;
    }
    switch (config.type.toLowerCase()) {
      case "force":
        config.nodes = nodes;
        config.links = edges;
        config.width = width;
        config.height = height;
        layouter = new ForceLayouter(config);
        break;
      default:
        throw "Sorry unknown layout type.";
    }
  },

  nodeLimitCallBack = function(limit) {
    adapter.setNodeLimit(limit, self.start);
  },

  parseZoomConfig = function(config) {
    if (config) {
      zoomManager = new ZoomManager(width, height, svg,
        graphContainer, nodeShaper, edgeShaper,
        {}, nodeLimitCallBack);
    }
  },

  parseConfig = function(config) {
    var esConf = config.edgeShaper || {},
      nsConf = config.nodeShaper || {},
      idFunc = nsConf.idfunc || undefined,
      zConf = config.zoom || false;
    esConf.shape = esConf.shape || {
      type: EdgeShaper.shapes.ARROW
    };
    parseLayouterConfig(config.layouter);
    edgeContainer = graphContainer.append("g");
    edgeShaper = new EdgeShaper(edgeContainer, esConf);
    nodeContainer = graphContainer.append("g");
    nodeShaper = new NodeShaper(nodeContainer, nsConf, idFunc);
    layouter.setCombinedUpdateFunction(nodeShaper, edgeShaper);
    parseZoomConfig(zConf);
  };

  switch (adapterConfig.type.toLowerCase()) {
    case "arango":
      adapterConfig.width = width;
      adapterConfig.height = height;
      adapter = new ArangoAdapter(
        nodes,
        edges,
        this,
        adapterConfig
      );
      adapter.setChildLimit(10);
      break;
    case "gharial":
      adapterConfig.width = width;
      adapterConfig.height = height;
      adapter = new GharialAdapter(
        nodes,
        edges,
        this,
        adapterConfig
      );
      adapter.setChildLimit(10);
      break;
    case "foxx":
      adapterConfig.width = width;
      adapterConfig.height = height;
      adapter = new FoxxAdapter(
        nodes,
        edges,
        adapterConfig.route,
        this,
        adapterConfig
      );
      break;
    case "json":
      adapter = new JSONAdapter(
        adapterConfig.path,
        nodes,
        edges,
        this,
        width,
        height
      );
      break;
    case "preview":
      adapterConfig.width = width;
      adapterConfig.height = height;
      adapter = new PreviewAdapter(
        nodes,
        edges,
        this,
        adapterConfig
      );
      break;
    default:
      throw "Sorry unknown adapter type.";
  }

  graphContainer = svg.append("g");

  parseConfig(config || {});

  this.start = function(expand) {
    layouter.stop();

    if (expand) {
      if ($('.infoField').text() !== '') {
        _.each(nodes, function(node) {
          _.each(adapter.randomNodes, function(compare) {
            if (node._id === compare._id) {
              node._expanded = true;
            }
          });
        });
      }
      else {
        _.each(nodes, function(node) {
          node._expanded = true;
        });
      }
    }

    //expand all wanted nodes
    nodeShaper.drawNodes(nodes);
    edgeShaper.drawEdges(edges);
    layouter.start();
  };

  this.loadGraph = function(nodeId, callback) {
//    loadNode
//  loadInitialNode
    adapter.loadInitialNode(nodeId, function (node) {
      if (node.errorCode) {
        callback(node);
        return;
      }
      node._expanded = true;
      self.start();
      if (_.isFunction(callback)) {
        callback();
      }
    });
  };

  this.loadGraphWithRandomStart = function(callback, size) {
    adapter.loadRandomNode(function (node) {
      if (node.errorCode && node.errorCode === 404) {
        callback(node);
        return;
      }
      node._expanded = true;
      self.start(true);
      if (_.isFunction(callback)) {
        callback();
      }
    }, size);
  };

  this.loadGraphWithAdditionalNode = function(attribute, value, callback) {
    adapter.loadAdditionalNodeByAttributeValue(attribute, value, function (node) {
      if (node.errorCode) {
        callback(node);
        return;
      }
      node._expanded = true;
      self.start();
      if (_.isFunction(callback)) {
        callback();
      }
    });
  };

  this.loadGraphWithAttributeValue = function(attribute, value, callback) {

    //clear random and defined nodes
    adapter.randomNodes = [];
    adapter.definedNodes = [];

    adapter.loadInitialNodeByAttributeValue(attribute, value, function (node) {
      if (node.errorCode) {
        callback(node);
        return;
      }
      node._expanded = true;

      self.start();
      if (_.isFunction(callback)) {
        callback();
      }
    });
  };

  this.cleanUp = function() {
    nodeShaper.resetColourMap();
    edgeShaper.resetColourMap();
  };

  this.changeWidth = function(w) {
    layouter.changeWidth(w);
    zoomManager.changeWidth(w);
    adapter.setWidth(w);
  };

  this.dispatcherConfig = {
    expand: {
      edges: edges,
      nodes: nodes,
      startCallback: self.start,
      adapter: adapter,
      reshapeNodes: nodeShaper.reshapeNodes
    },
    drag: {
      layouter: layouter
    },
    nodeEditor: {
      nodes: nodes,
      adapter: adapter
    },
    edgeEditor: {
      edges: edges,
      adapter: adapter
    }
  };
  this.adapter = adapter;
  this.nodeShaper = nodeShaper;
  this.edgeShaper = edgeShaper;
  this.layouter = layouter;
  this.zoomManager = zoomManager;
}

/*jshint unused: false */
/*global window, $, document, _ */

(function() {
  "use strict";
  var isCoordinator;

  window.isCoordinator = function() {
    if (isCoordinator === undefined) {
      $.ajax(
        "cluster/amICoordinator",
        {
          async: false,
          success: function(d) {
            isCoordinator = d;
          }
        }
      );
    }
    return isCoordinator;
  };

  window.versionHelper = {
    fromString: function (s) {
      var parts = s.replace(/-[a-zA-Z0-9_\-]*$/g, '').split('.');
      return {
        major: parseInt(parts[0], 10) || 0,
        minor: parseInt(parts[1], 10) || 0,
        patch: parseInt(parts[2], 10) || 0,
        toString: function() {
          return this.major + "." + this.minor + "." + this.patch;
        }
      };
    },
    toString: function (v) {
      return v.major + '.' + v.minor + '.' + v.patch;
    }
  };

  window.arangoHelper = {
    lastNotificationMessage: null,

    CollectionTypes: {},
    systemAttributes: function () {
      return {
        '_id' : true,
        '_rev' : true,
        '_key' : true,
        '_bidirectional' : true,
        '_vertices' : true,
        '_from' : true,
        '_to' : true,
        '$id' : true
      };
    },

    setCheckboxStatus: function(id) {
      _.each($(id).find('ul').find('li'), function(element) {
         if (!$(element).hasClass("nav-header")) {
           if ($(element).find('input').attr('checked')) {
             if ($(element).find('i').hasClass('css-round-label')) {
               $(element).find('i').addClass('fa-dot-circle-o');
             }
             else {
               $(element).find('i').addClass('fa-check-square-o');
             }
           }
           else {
             if ($(element).find('i').hasClass('css-round-label')) {
               $(element).find('i').addClass('fa-circle-o');
             }
             else {
               $(element).find('i').addClass('fa-square-o');
             }
           }
         }
      });
    },

    calculateCenterDivHeight: function() {
      var navigation = $('.navbar').height();
      var footer = $('.footer').height();
      var windowHeight = $(window).height();

      return windowHeight - footer - navigation - 110;
    },

    fixTooltips: function (selector, placement) {
      $(selector).tooltip({
        placement: placement,
        hide: false,
        show: false
      });
    },

    currentDatabase: function () {
      var returnVal = false;
      $.ajax({
        type: "GET",
        cache: false,
        url: "/_api/database/current",
        contentType: "application/json",
        processData: false,
        async: false,
        success: function(data) {
          returnVal = data.result.name;
        },
        error: function() {
          returnVal = false;
        }
      });
      return returnVal;
    },

    allHotkeys: {
      global: {
        name: "Site wide",
        content: [{
          label: "scroll up",
          letter: "j"
        },{
          label: "scroll down",
          letter: "k"
        }]
      },
      jsoneditor: {
        name: "AQL editor",
        content: [{
          label: "Submit",
          letter: "Ctrl + Return"
        },{
          label: "Toggle comments",
          letter: "Ctrl + Shift + C"
        },{
          label: "Undo",
          letter: "Ctrl + Z"
        },{
          label: "Redo",
          letter: "Ctrl + Shift + Z"
        }]
      },
      doceditor: {
        name: "Document editor",
        content: [{
          label: "Insert",
          letter: "Ctrl + Insert"
        },{
          label: "Save",
          letter: "Ctrl + Return, CMD + Return"
        },{
          label: "Append",
          letter: "Ctrl + Shift + Insert"
        },{
          label: "Duplicate",
          letter: "Ctrl + D"
        },{
          label: "Remove",
          letter: "Ctrl + Delete"
        }]
      },
      modals: {
        name: "Modal",
        content: [{
          label: "Submit",
          letter: "Return"
        },{
          label: "Close",
          letter: "Esc"
        },{
          label: "Navigate buttons",
          letter: "Arrow keys"
        },{
          label: "Navigate content",
          letter: "Tab"
        }]
      }
    },

    hotkeysFunctions: {
      scrollDown: function () {
        window.scrollBy(0,180);
      },
      scrollUp: function () {
        window.scrollBy(0,-180);
      },
      showHotkeysModal: function () {
        var buttons = [],
        content = window.arangoHelper.allHotkeys;

        window.modalView.show("modalHotkeys.ejs", "Keyboard Shortcuts", buttons, content);
      }
    },

    enableKeyboardHotkeys: function (enable) {
      var hotkeys = window.arangoHelper.hotkeysFunctions;
      if (enable === true) {
        $(document).on('keydown', null, 'j', hotkeys.scrollDown);
        $(document).on('keydown', null, 'k', hotkeys.scrollUp);
      }
    },

    databaseAllowed: function () {
      var currentDB = this.currentDatabase(),
      returnVal = false;
      $.ajax({
        type: "GET",
        cache: false,
        url: "/_db/"+ encodeURIComponent(currentDB) + "/_api/database/",
        contentType: "application/json",
        processData: false,
        async: false,
        success: function() {
          returnVal = true;
        },
        error: function() {
          returnVal = false;
        }
      });
      return returnVal;
    },

    arangoNotification: function (title, content, info) {
      window.App.notificationList.add({title:title, content: content, info: info, type: 'success'});
    },

    arangoError: function (title, content, info) {
      window.App.notificationList.add({title:title, content: content, info: info, type: 'error'});
    },

    openDocEditor: function (id, type, callback) {
      var ids = id.split("/"),
      self = this;

      var docFrameView = new window.DocumentView({
        collection: window.App.arangoDocumentStore
      });

      docFrameView.breadcrumb = function(){};

      docFrameView.colid = ids[0];
      docFrameView.docid = ids[1];

      docFrameView.el = '.arangoFrame .innerDiv';
      docFrameView.render();
      docFrameView.setType(type);

      //remove header
      $('.arangoFrame .headerBar').remove();
      //append close button
      $('.arangoFrame .outerDiv').prepend('<i class="fa fa-times"></i>');
      //add close events
      $('.arangoFrame .outerDiv').click(function() {
        self.closeDocEditor();
      });
      $('.arangoFrame .innerDiv').click(function(e) {
        e.stopPropagation();
      });
      $('.fa-times').click(function() {
        self.closeDocEditor();
      });

      $('.arangoFrame').show();
       
      docFrameView.customView = true;
      docFrameView.customDeleteFunction = function() {
        window.modalView.hide();
        $('.arangoFrame').hide();
        //callback();
      };

      $('.arangoFrame #deleteDocumentButton').click(function(){
        docFrameView.deleteDocumentModal();
      });
      $('.arangoFrame #saveDocumentButton').click(function(){
        docFrameView.saveDocument();
      });
      $('.arangoFrame #deleteDocumentButton').css('display', 'none');
    },

    closeDocEditor: function () {
      $('.arangoFrame .outerDiv .fa-times').remove();
      $('.arangoFrame').hide();
    },

    addAardvarkJob: function (object, callback) {
      $.ajax({
          cache: false,
          type: "POST",
          url: "/_admin/aardvark/job",
          data: JSON.stringify(object),
          contentType: "application/json",
          processData: false,
          success: function (data) {
            if (callback) {
              callback(false, data);
            }
          },
          error: function(data) {
            if (callback) {
              callback(true, data);
            }
          }
      });
    },

    deleteAardvarkJob: function (id, callback) {
      $.ajax({
          cache: false,
          type: "DELETE",
          url: "/_admin/aardvark/job/" + encodeURIComponent(id),
          contentType: "application/json",
          processData: false,
          success: function (data) {
            if (callback) {
              callback(false, data);
            }
          },
          error: function(data) {
            if (callback) {
              callback(true, data);
            }
          }
      });
    },

    deleteAllAardvarkJobs: function (callback) {
      $.ajax({
          cache: false,
          type: "DELETE",
          url: "/_admin/aardvark/job",
          contentType: "application/json",
          processData: false,
          success: function (data) {
            if (callback) {
              callback(false, data);
            }
          },
          error: function(data) {
            if (callback) {
              callback(true, data);
            }
          }
      });
    },

    getAardvarkJobs: function (callback) {
      var result;

      $.ajax({
          cache: false,
          type: "GET",
          url: "/_admin/aardvark/job",
          contentType: "application/json",
          processData: false,
          async: false,
          success: function (data) {
            if (callback) {
              callback(false, data);
            }
            result = data;
          },
          error: function(data) {
            if (callback) {
              callback(true, data);
            }
          }
      });
      return result;
    },

    getPendingJobs: function() {
      var result; 

      $.ajax({
          cache: false,
          type: "GET",
          url: "/_api/job/pending",
          contentType: "application/json",
          processData: false,
          async: false,
          success: function (data) {
            result = data;
          },
          error: function(data) {
            console.log("pending jobs error: " + data);
          }
      });
      return result;
    },

    syncAndReturnUninishedAardvarkJobs: function(type) {

      var AaJobs = this.getAardvarkJobs(),
      pendingJobs = this.getPendingJobs(),
      array = [];

      if (pendingJobs.length > 0) {
        _.each(AaJobs, function(aardvark) {
          if (aardvark.type === type || aardvark.type === undefined) {

             var found = false; 
            _.each(pendingJobs, function(pending) {
              if (aardvark.id === pending) {
                found = true;
              } 
            });

            if (found) {
              array.push({
                collection: aardvark.collection,
                id: aardvark.id,
                type: aardvark.type,
                desc: aardvark.desc 
              });
            }
            else {
              window.arangoHelper.deleteAardvarkJob(aardvark.id);
            }
          }
        });
      }
      else {
        this.deleteAllAardvarkJobs(); 
      }

      return array;
    }, 

    getRandomToken: function () {
      return Math.round(new Date().getTime());
    },

    isSystemAttribute: function (val) {
      var a = this.systemAttributes();
      return a[val];
    },

    isSystemCollection: function (val) {
      return val.name.substr(0, 1) === '_';
      // the below code is completely inappropriate as it will
      // load the collection just for the check whether it
      // is a system collection. as a consequence, the below
      // code would load ALL collections when the web interface
      // is called
      /*
         var returnVal = false;
         $.ajax({
type: "GET",
url: "/_api/collection/" + encodeURIComponent(val) + "/properties",
contentType: "application/json",
processData: false,
async: false,
success: function(data) {
returnVal = data.isSystem;
},
error: function(data) {
returnVal = false;
}
});
return returnVal;
*/
    },

    setDocumentStore : function (a) {
      this.arangoDocumentStore = a;
    },

    collectionApiType: function (identifier, refresh) {
      // set "refresh" to disable caching collection type
      if (refresh || this.CollectionTypes[identifier] === undefined) {
        this.CollectionTypes[identifier] = this.arangoDocumentStore
        .getCollectionInfo(identifier).type;
      }
      if (this.CollectionTypes[identifier] === 3) {
        return "edge";
      }
      return "document";
    },

    collectionType: function (val) {
      if (! val || val.name === '') {
        return "-";
      }
      var type;
      if (val.type === 2) {
        type = "document";
      }
      else if (val.type === 3) {
        type = "edge";
      }
      else {
        type = "unknown";
      }

      if (this.isSystemCollection(val)) {
        type += " (system)";
      }

      return type;
    },

    formatDT: function (dt) {
      var pad = function (n) {
        return n < 10 ? '0' + n : n;
      };

      return dt.getUTCFullYear() + '-'
      + pad(dt.getUTCMonth() + 1) + '-'
      + pad(dt.getUTCDate()) + ' '
      + pad(dt.getUTCHours()) + ':'
      + pad(dt.getUTCMinutes()) + ':'
      + pad(dt.getUTCSeconds());
    },

    escapeHtml: function (val) {
      // HTML-escape a string
      return String(val).replace(/&/g, '&amp;')
      .replace(/</g, '&lt;')
      .replace(/>/g, '&gt;')
      .replace(/"/g, '&quot;')
      .replace(/'/g, '&#39;');
    }

  };
}());

/*jshint unused: false */
/*global EJS, window, _, $*/
(function() {
  "use strict";
  // For tests the templates are loaded some where else.
  // We need to use a different engine there.
  if (!window.hasOwnProperty("TEST_BUILD")) {
    var TemplateEngine = function() {
      var exports = {};
      exports.createTemplate = function(id) {
        var template = $("#" + id.replace(".", "\\.")).html();
        return {
          render: function(params) {
            return _.template(template, params);
          }
        };
      };
      return exports;
    };
    window.templateEngine = new TemplateEngine();
  }
}());

/*jshint node:false, browser:true, strict: false, unused: false */
/*global global:true, $, jqconsole */

////////////////////////////////////////////////////////////////////////////////
/// @brief ArangoDB web browser shell
///
/// @file
///
/// DISCLAIMER
///
/// Copyright 2012-2013 triagens GmbH, Cologne, Germany
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///
///     http://www.apache.org/licenses/LICENSE-2.0
///
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// Copyright holder is triAGENS GmbH, Cologne, Germany
///
/// @author Achim Brandt
/// @author Dr. Frank Celler
/// @author Copyright 2012-2013, triAGENS GmbH, Cologne, Germany
////////////////////////////////////////////////////////////////////////////////

// -----------------------------------------------------------------------------
// --SECTION--                                                            Module
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
// --SECTION--                                      constructors and destructors
// -----------------------------------------------------------------------------

////////////////////////////////////////////////////////////////////////////////
/// @addtogroup ArangoShell
/// @{
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
/// @brief Module constructor
////////////////////////////////////////////////////////////////////////////////

function Module (id) {
  this.id = id;
  this.exports = {};
  this.definition = null;
}

////////////////////////////////////////////////////////////////////////////////
/// @brief module cache
////////////////////////////////////////////////////////////////////////////////

Module.prototype.moduleCache = {};
Module.prototype.moduleCache["/internal"] = new Module("/internal");

////////////////////////////////////////////////////////////////////////////////
/// @}
////////////////////////////////////////////////////////////////////////////////

// -----------------------------------------------------------------------------
// --SECTION--                                                  public variables
// -----------------------------------------------------------------------------

if (typeof global === 'undefined' && typeof window !== 'undefined') {
  global = window;
}

////////////////////////////////////////////////////////////////////////////////
/// @addtogroup ArangoShell
/// @{
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
/// @brief module
////////////////////////////////////////////////////////////////////////////////

global.module = Module.prototype.moduleCache["/"] = new Module("/");

////////////////////////////////////////////////////////////////////////////////
/// @}
////////////////////////////////////////////////////////////////////////////////

// -----------------------------------------------------------------------------
// --SECTION--                                                   private methods
// -----------------------------------------------------------------------------

////////////////////////////////////////////////////////////////////////////////
/// @addtogroup ArangoShell
/// @{
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
/// @brief normalises a path
////////////////////////////////////////////////////////////////////////////////

Module.prototype.normalise = function (path) {
  var i;
  var n;
  var p;
  var q;
  var x;

  if (path === "") {
    return this.id;
  }

  p = path.split('/');

  // relative path
  if (p[0] === "." || p[0] === "..") {
    q = this.id.split('/');
    q.pop();
    q = q.concat(p);
  }

  // absolute path
  else {
    q = p;
  }

  // normalize path
  n = [];

  for (i = 0;  i < q.length;  ++i) {
    x = q[i];

    if (x === "..") {
      if (n.length === 0) {
        throw "cannot cross module top";
      }

      n.pop();
    }
    else if (x !== "" && x !== ".") {
      n.push(x);
    }
  }

  return "/" + n.join('/');
};

////////////////////////////////////////////////////////////////////////////////
/// @}
////////////////////////////////////////////////////////////////////////////////

// -----------------------------------------------------------------------------
// --SECTION--                                                    public methods
// -----------------------------------------------------------------------------

////////////////////////////////////////////////////////////////////////////////
/// @addtogroup ArangoShell
/// @{
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
/// @brief define
////////////////////////////////////////////////////////////////////////////////

Module.prototype.define = function (path, definition) {

  // first get rid of any ".." and "."
  path = this.normalise(path);
  var match = path.match(/(.+)\/index$/);
  if (match) {
    path = match[1];
  }

  // check if you already know the module, return the exports
  if (! Module.prototype.moduleCache.hasOwnProperty(path)) {
    Module.prototype.moduleCache[path] = new Module(path);
  }

  Module.prototype.moduleCache[path].definition = definition;
};

////////////////////////////////////////////////////////////////////////////////
/// @brief require
////////////////////////////////////////////////////////////////////////////////

Module.prototype.require = function (path) {
  var module;

  // first get rid of any ".." and "."
  path = this.normalise(path);

  // check if you already know the module, return the exports
  if (Module.prototype.moduleCache.hasOwnProperty(path)) {
    module = Module.prototype.moduleCache[path];
  }
  else {
    module = Module.prototype.moduleCache[path] = new Module(path);
  }

  if (module.definition !== null) {
    var definition;

    definition = module.definition;
    module.definition = null;
    definition.call(window, module.exports, module);
  }
  return module.exports;
};

function require (path) {
  return global.module.require(path);
}

////////////////////////////////////////////////////////////////////////////////
/// @brief print
////////////////////////////////////////////////////////////////////////////////

function print () {
  var internal = require("internal");
  internal.print.apply(internal.print, arguments);
}

////////////////////////////////////////////////////////////////////////////////
/// @}
////////////////////////////////////////////////////////////////////////////////

// -----------------------------------------------------------------------------
// --SECTION--                                                  ArangoConnection
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
// --SECTION--                                      constructors and destructors
// -----------------------------------------------------------------------------

////////////////////////////////////////////////////////////////////////////////
/// @addtogroup ArangoShell
/// @{
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
/// @brief arango server connection
////////////////////////////////////////////////////////////////////////////////

function ArangoConnection () {
  this._databaseName = "_system";

  var path = global.document.location.pathname;

  if (path.substr(0, 5) === '/_db/') {
    var i = 5, n = path.length;
    while (i < n) {
      if (path[i] === '/') {
        break;
      }
      i++;
    }

    if (i > 5) {
      this._databaseName = path.substring(5, i);
    }
  }
}

////////////////////////////////////////////////////////////////////////////////
/// @}
////////////////////////////////////////////////////////////////////////////////

// -----------------------------------------------------------------------------
// --SECTION--                                                    public methods
// -----------------------------------------------------------------------------

////////////////////////////////////////////////////////////////////////////////
/// @addtogroup ArangoShell
/// @{
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
/// @brief getDatabaseName
////////////////////////////////////////////////////////////////////////////////

ArangoConnection.prototype.getDatabaseName = function () {
  return this._databaseName;
};

////////////////////////////////////////////////////////////////////////////////
/// @brief setDatabaseName
////////////////////////////////////////////////////////////////////////////////

ArangoConnection.prototype.setDatabaseName = function (name) {
  this._databaseName = name;
};

////////////////////////////////////////////////////////////////////////////////
/// @brief databasePrefix
////////////////////////////////////////////////////////////////////////////////

ArangoConnection.prototype.databasePrefix = function (url) {
  if (url.substr(0, 7) === 'http://' || url.substr(0, 8) === 'https://') {
    return url;
  }

  if (url.substr(0, 5) !== '/_db/') {
    if (url[0] === '/') {
      // relative URL, starting at /
      return "/_db/" + this.getDatabaseName() + url;
    }
  }

  // everything else
  return url;
};

////////////////////////////////////////////////////////////////////////////////
/// @brief get
////////////////////////////////////////////////////////////////////////////////

ArangoConnection.prototype.get = function (url) {
  var msg = null;

  $.ajax({
    async: false,
    cache: false,
    type: "GET",
    url: url,
    contentType: "application/json",
    dataType: "json",
    processData: false,
    success: function(data) {
      msg = data;
    },
    error: function(data) {
      try {
        msg = JSON.parse(data.responseText);
      }
      catch (err) {
        msg = data.responseText;
      }
    }
  });

  return msg;
};

ArangoConnection.prototype.GET = ArangoConnection.prototype.get;

////////////////////////////////////////////////////////////////////////////////
/// @brief delete
////////////////////////////////////////////////////////////////////////////////

ArangoConnection.prototype._delete = function (url) {
  var msg = null;

  $.ajax({
    async: false,
    type: "DELETE",
    url: url,
    contentType: "application/json",
    dataType: "json",
    processData: false,
    success: function(data) {
      msg = data;
    },
    error: function(data) {
      try {
        msg = JSON.parse(data.responseText);
      }
      catch (err) {
        msg = data.responseText;
      }
    }
  });

  return msg;
};

ArangoConnection.prototype.DELETE = ArangoConnection.prototype._delete;

////////////////////////////////////////////////////////////////////////////////
/// @brief post
////////////////////////////////////////////////////////////////////////////////

ArangoConnection.prototype.post = function (url, body) {
  var msg = null;

  $.ajax({
    async: false,
    type: "POST",
    url: url,
    data: body,
    contentType: "application/json",
    dataType: "json",
    processData: false,
    success: function(data) {
      msg = data;
    },
    error: function(data) {
      try {
        msg = JSON.parse(data.responseText);
      }
      catch (err) {
        msg = data.responseText;
      }
    }
  });

  return msg;
};

ArangoConnection.prototype.POST = ArangoConnection.prototype.post;

////////////////////////////////////////////////////////////////////////////////
/// @brief put
////////////////////////////////////////////////////////////////////////////////

ArangoConnection.prototype.put = function (url, body) {
  var msg = null;

  $.ajax({
    async: false,
    type: "PUT",
    url: url,
    data: body,
    contentType: "application/json",
    dataType: "json",
    processData: false,
    success: function(data) {
      msg = data;
    },
    error: function(data) {
      try {
        msg = JSON.parse(data.responseText);
      }
      catch (err) {
        msg = data.responseText;
      }
    }
  });

  return msg;
};

ArangoConnection.prototype.PUT = ArangoConnection.prototype.put;

////////////////////////////////////////////////////////////////////////////////
/// @brief patch
////////////////////////////////////////////////////////////////////////////////

ArangoConnection.prototype.patch = function (url, body) {
  var msg = null;

  $.ajax({
    async: false,
    type: "PATCH",
    url: url,
    data: body,
    contentType: "application/json",
    dataType: "json",
    processData: false,
    success: function(data) {
      msg = data;
    },
    error: function(data) {
      try {
        msg = JSON.parse(data.responseText);
      }
      catch (err) {
        msg = data.responseText;
      }
    }
  });

  return msg;
};

ArangoConnection.prototype.PATCH = ArangoConnection.prototype.patch;

////////////////////////////////////////////////////////////////////////////////
/// @}
////////////////////////////////////////////////////////////////////////////////

// -----------------------------------------------------------------------------
// --SECTION--                                                 Module "internal"
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
// --SECTION--                                                  public variables
// -----------------------------------------------------------------------------

////////////////////////////////////////////////////////////////////////////////
/// @addtogroup ArangoShell
/// @{
////////////////////////////////////////////////////////////////////////////////

(function () {
  var internal = Module.prototype.moduleCache["/internal"].exports;

////////////////////////////////////////////////////////////////////////////////
/// @brief arango
////////////////////////////////////////////////////////////////////////////////

  internal.arango = new ArangoConnection();

////////////////////////////////////////////////////////////////////////////////
/// @brief browserOutputBuffer
////////////////////////////////////////////////////////////////////////////////

  internal.browserOutputBuffer = "";

////////////////////////////////////////////////////////////////////////////////
/// @}
////////////////////////////////////////////////////////////////////////////////

// -----------------------------------------------------------------------------
// --SECTION--                                                  public functions
// -----------------------------------------------------------------------------

////////////////////////////////////////////////////////////////////////////////
/// @addtogroup ArangoShell
/// @{
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
/// @brief outputs text to shell window
////////////////////////////////////////////////////////////////////////////////

  internal.output = function () {
    var i;

    for (i = 0;  i < arguments.length;  ++i) {
      var value = arguments[i];
      var text;

      if (value === null) {
        text = "null";
      }
      else if (value === undefined) {
        text = "undefined";
      }
      else if (typeof(value) === "object") {
        try {
          text = JSON.stringify(value);
        }
        catch (err) {
          text = String(value);
        }
      }
      else {
        text = String(value);
      }

      require('internal').browserOutputBuffer += text;
    }
  };

////////////////////////////////////////////////////////////////////////////////
/// @brief outputs text to browser window
////////////////////////////////////////////////////////////////////////////////

  internal.print = internal.printBrowser = function () {
    require('internal').printShell.apply(require('internal').printShell, arguments);

    jqconsole.Write('==> ' + require('internal').browserOutputBuffer, 'jssuccess');
    require('internal').browserOutputBuffer = "";
  };

////////////////////////////////////////////////////////////////////////////////
/// @brief globally rewrite URLs for AJAX requests to contain the database name
////////////////////////////////////////////////////////////////////////////////

  $(global.document).ajaxSend(function(event, jqxhr, settings) {
    settings.url = require('internal').arango.databasePrefix(settings.url);
  });

////////////////////////////////////////////////////////////////////////////////
/// @}
////////////////////////////////////////////////////////////////////////////////

  global.DEFINE_MODULE = function (name, exports) {
    var path = Module.prototype.normalise(name);
    var module = Module.prototype.moduleCache[path];
    if (module) {
      Object.keys(module.exports).forEach(function (key) {
        exports[key] = module.exports[key];
      });
    } else {
      module = new Module(path);
      Module.prototype.moduleCache[path] = module;
    }
    module.exports = exports;
  };

}());

// -----------------------------------------------------------------------------
// --SECTION--                                                       END-OF-FILE
// -----------------------------------------------------------------------------

// Local Variables:
// mode: outline-minor
// outline-regexp: "/// @brief\\|/// @addtogroup\\|// --SECTION--\\|/// @page\\|/// @}"
// End:

module.define("underscore", function(exports, module) {
//     Underscore.js 1.8.3
//     http://underscorejs.org
//     (c) 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
//     Underscore may be freely distributed under the MIT license.

(function() {

  // Baseline setup
  // --------------

  // Establish the root object, `window` in the browser, or `exports` on the server.
  var root = this;

  // Save the previous value of the `_` variable.
  var previousUnderscore = root._;

  // Save bytes in the minified (but not gzipped) version:
  var ArrayProto = Array.prototype, ObjProto = Object.prototype, FuncProto = Function.prototype;

  // Create quick reference variables for speed access to core prototypes.
  var
    push             = ArrayProto.push,
    slice            = ArrayProto.slice,
    toString         = ObjProto.toString,
    hasOwnProperty   = ObjProto.hasOwnProperty;

  // All **ECMAScript 5** native function implementations that we hope to use
  // are declared here.
  var
    nativeIsArray      = Array.isArray,
    nativeKeys         = Object.keys,
    nativeBind         = FuncProto.bind,
    nativeCreate       = Object.create;

  // Naked function reference for surrogate-prototype-swapping.
  var Ctor = function(){};

  // Create a safe reference to the Underscore object for use below.
  var _ = function(obj) {
    if (obj instanceof _) return obj;
    if (!(this instanceof _)) return new _(obj);
    this._wrapped = obj;
  };

  // Export the Underscore object for **Node.js**, with
  // backwards-compatibility for the old `require()` API. If we're in
  // the browser, add `_` as a global object.
  if (typeof exports !== 'undefined') {
    if (typeof module !== 'undefined' && module.exports) {
      exports = module.exports = _;
    }
    exports._ = _;
  } else {
    root._ = _;
  }

  // Current version.
  _.VERSION = '1.8.3';

  // Internal function that returns an efficient (for current engines) version
  // of the passed-in callback, to be repeatedly applied in other Underscore
  // functions.
  var optimizeCb = function(func, context, argCount) {
    if (context === void 0) return func;
    switch (argCount == null ? 3 : argCount) {
      case 1: return function(value) {
        return func.call(context, value);
      };
      case 2: return function(value, other) {
        return func.call(context, value, other);
      };
      case 3: return function(value, index, collection) {
        return func.call(context, value, index, collection);
      };
      case 4: return function(accumulator, value, index, collection) {
        return func.call(context, accumulator, value, index, collection);
      };
    }
    return function() {
      return func.apply(context, arguments);
    };
  };

  // A mostly-internal function to generate callbacks that can be applied
  // to each element in a collection, returning the desired result — either
  // identity, an arbitrary callback, a property matcher, or a property accessor.
  var cb = function(value, context, argCount) {
    if (value == null) return _.identity;
    if (_.isFunction(value)) return optimizeCb(value, context, argCount);
    if (_.isObject(value)) return _.matcher(value);
    return _.property(value);
  };
  _.iteratee = function(value, context) {
    return cb(value, context, Infinity);
  };

  // An internal function for creating assigner functions.
  var createAssigner = function(keysFunc, undefinedOnly) {
    return function(obj) {
      var length = arguments.length;
      if (length < 2 || obj == null) return obj;
      for (var index = 1; index < length; index++) {
        var source = arguments[index],
            keys = keysFunc(source),
            l = keys.length;
        for (var i = 0; i < l; i++) {
          var key = keys[i];
          if (!undefinedOnly || obj[key] === void 0) obj[key] = source[key];
        }
      }
      return obj;
    };
  };

  // An internal function for creating a new object that inherits from another.
  var baseCreate = function(prototype) {
    if (!_.isObject(prototype)) return {};
    if (nativeCreate) return nativeCreate(prototype);
    Ctor.prototype = prototype;
    var result = new Ctor;
    Ctor.prototype = null;
    return result;
  };

  var property = function(key) {
    return function(obj) {
      return obj == null ? void 0 : obj[key];
    };
  };

  // Helper for collection methods to determine whether a collection
  // should be iterated as an array or as an object
  // Related: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength
  // Avoids a very nasty iOS 8 JIT bug on ARM-64. #2094
  var MAX_ARRAY_INDEX = Math.pow(2, 53) - 1;
  var getLength = property('length');
  var isArrayLike = function(collection) {
    var length = getLength(collection);
    return typeof length == 'number' && length >= 0 && length <= MAX_ARRAY_INDEX;
  };

  // Collection Functions
  // --------------------

  // The cornerstone, an `each` implementation, aka `forEach`.
  // Handles raw objects in addition to array-likes. Treats all
  // sparse array-likes as if they were dense.
  _.each = _.forEach = function(obj, iteratee, context) {
    iteratee = optimizeCb(iteratee, context);
    var i, length;
    if (isArrayLike(obj)) {
      for (i = 0, length = obj.length; i < length; i++) {
        iteratee(obj[i], i, obj);
      }
    } else {
      var keys = _.keys(obj);
      for (i = 0, length = keys.length; i < length; i++) {
        iteratee(obj[keys[i]], keys[i], obj);
      }
    }
    return obj;
  };

  // Return the results of applying the iteratee to each element.
  _.map = _.collect = function(obj, iteratee, context) {
    iteratee = cb(iteratee, context);
    var keys = !isArrayLike(obj) && _.keys(obj),
        length = (keys || obj).length,
        results = Array(length);
    for (var index = 0; index < length; index++) {
      var currentKey = keys ? keys[index] : index;
      results[index] = iteratee(obj[currentKey], currentKey, obj);
    }
    return results;
  };

  // Create a reducing function iterating left or right.
  function createReduce(dir) {
    // Optimized iterator function as using arguments.length
    // in the main function will deoptimize the, see #1991.
    function iterator(obj, iteratee, memo, keys, index, length) {
      for (; index >= 0 && index < length; index += dir) {
        var currentKey = keys ? keys[index] : index;
        memo = iteratee(memo, obj[currentKey], currentKey, obj);
      }
      return memo;
    }

    return function(obj, iteratee, memo, context) {
      iteratee = optimizeCb(iteratee, context, 4);
      var keys = !isArrayLike(obj) && _.keys(obj),
          length = (keys || obj).length,
          index = dir > 0 ? 0 : length - 1;
      // Determine the initial value if none is provided.
      if (arguments.length < 3) {
        memo = obj[keys ? keys[index] : index];
        index += dir;
      }
      return iterator(obj, iteratee, memo, keys, index, length);
    };
  }

  // **Reduce** builds up a single result from a list of values, aka `inject`,
  // or `foldl`.
  _.reduce = _.foldl = _.inject = createReduce(1);

  // The right-associative version of reduce, also known as `foldr`.
  _.reduceRight = _.foldr = createReduce(-1);

  // Return the first value which passes a truth test. Aliased as `detect`.
  _.find = _.detect = function(obj, predicate, context) {
    var key;
    if (isArrayLike(obj)) {
      key = _.findIndex(obj, predicate, context);
    } else {
      key = _.findKey(obj, predicate, context);
    }
    if (key !== void 0 && key !== -1) return obj[key];
  };

  // Return all the elements that pass a truth test.
  // Aliased as `select`.
  _.filter = _.select = function(obj, predicate, context) {
    var results = [];
    predicate = cb(predicate, context);
    _.each(obj, function(value, index, list) {
      if (predicate(value, index, list)) results.push(value);
    });
    return results;
  };

  // Return all the elements for which a truth test fails.
  _.reject = function(obj, predicate, context) {
    return _.filter(obj, _.negate(cb(predicate)), context);
  };

  // Determine whether all of the elements match a truth test.
  // Aliased as `all`.
  _.every = _.all = function(obj, predicate, context) {
    predicate = cb(predicate, context);
    var keys = !isArrayLike(obj) && _.keys(obj),
        length = (keys || obj).length;
    for (var index = 0; index < length; index++) {
      var currentKey = keys ? keys[index] : index;
      if (!predicate(obj[currentKey], currentKey, obj)) return false;
    }
    return true;
  };

  // Determine if at least one element in the object matches a truth test.
  // Aliased as `any`.
  _.some = _.any = function(obj, predicate, context) {
    predicate = cb(predicate, context);
    var keys = !isArrayLike(obj) && _.keys(obj),
        length = (keys || obj).length;
    for (var index = 0; index < length; index++) {
      var currentKey = keys ? keys[index] : index;
      if (predicate(obj[currentKey], currentKey, obj)) return true;
    }
    return false;
  };

  // Determine if the array or object contains a given item (using `===`).
  // Aliased as `includes` and `include`.
  _.contains = _.includes = _.include = function(obj, item, fromIndex, guard) {
    if (!isArrayLike(obj)) obj = _.values(obj);
    if (typeof fromIndex != 'number' || guard) fromIndex = 0;
    return _.indexOf(obj, item, fromIndex) >= 0;
  };

  // Invoke a method (with arguments) on every item in a collection.
  _.invoke = function(obj, method) {
    var args = slice.call(arguments, 2);
    var isFunc = _.isFunction(method);
    return _.map(obj, function(value) {
      var func = isFunc ? method : value[method];
      return func == null ? func : func.apply(value, args);
    });
  };

  // Convenience version of a common use case of `map`: fetching a property.
  _.pluck = function(obj, key) {
    return _.map(obj, _.property(key));
  };

  // Convenience version of a common use case of `filter`: selecting only objects
  // containing specific `key:value` pairs.
  _.where = function(obj, attrs) {
    return _.filter(obj, _.matcher(attrs));
  };

  // Convenience version of a common use case of `find`: getting the first object
  // containing specific `key:value` pairs.
  _.findWhere = function(obj, attrs) {
    return _.find(obj, _.matcher(attrs));
  };

  // Return the maximum element (or element-based computation).
  _.max = function(obj, iteratee, context) {
    var result = -Infinity, lastComputed = -Infinity,
        value, computed;
    if (iteratee == null && obj != null) {
      obj = isArrayLike(obj) ? obj : _.values(obj);
      for (var i = 0, length = obj.length; i < length; i++) {
        value = obj[i];
        if (value > result) {
          result = value;
        }
      }
    } else {
      iteratee = cb(iteratee, context);
      _.each(obj, function(value, index, list) {
        computed = iteratee(value, index, list);
        if (computed > lastComputed || computed === -Infinity && result === -Infinity) {
          result = value;
          lastComputed = computed;
        }
      });
    }
    return result;
  };

  // Return the minimum element (or element-based computation).
  _.min = function(obj, iteratee, context) {
    var result = Infinity, lastComputed = Infinity,
        value, computed;
    if (iteratee == null && obj != null) {
      obj = isArrayLike(obj) ? obj : _.values(obj);
      for (var i = 0, length = obj.length; i < length; i++) {
        value = obj[i];
        if (value < result) {
          result = value;
        }
      }
    } else {
      iteratee = cb(iteratee, context);
      _.each(obj, function(value, index, list) {
        computed = iteratee(value, index, list);
        if (computed < lastComputed || computed === Infinity && result === Infinity) {
          result = value;
          lastComputed = computed;
        }
      });
    }
    return result;
  };

  // Shuffle a collection, using the modern version of the
  // [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher–Yates_shuffle).
  _.shuffle = function(obj) {
    var set = isArrayLike(obj) ? obj : _.values(obj);
    var length = set.length;
    var shuffled = Array(length);
    for (var index = 0, rand; index < length; index++) {
      rand = _.random(0, index);
      if (rand !== index) shuffled[index] = shuffled[rand];
      shuffled[rand] = set[index];
    }
    return shuffled;
  };

  // Sample **n** random values from a collection.
  // If **n** is not specified, returns a single random element.
  // The internal `guard` argument allows it to work with `map`.
  _.sample = function(obj, n, guard) {
    if (n == null || guard) {
      if (!isArrayLike(obj)) obj = _.values(obj);
      return obj[_.random(obj.length - 1)];
    }
    return _.shuffle(obj).slice(0, Math.max(0, n));
  };

  // Sort the object's values by a criterion produced by an iteratee.
  _.sortBy = function(obj, iteratee, context) {
    iteratee = cb(iteratee, context);
    return _.pluck(_.map(obj, function(value, index, list) {
      return {
        value: value,
        index: index,
        criteria: iteratee(value, index, list)
      };
    }).sort(function(left, right) {
      var a = left.criteria;
      var b = right.criteria;
      if (a !== b) {
        if (a > b || a === void 0) return 1;
        if (a < b || b === void 0) return -1;
      }
      return left.index - right.index;
    }), 'value');
  };

  // An internal function used for aggregate "group by" operations.
  var group = function(behavior) {
    return function(obj, iteratee, context) {
      var result = {};
      iteratee = cb(iteratee, context);
      _.each(obj, function(value, index) {
        var key = iteratee(value, index, obj);
        behavior(result, value, key);
      });
      return result;
    };
  };

  // Groups the object's values by a criterion. Pass either a string attribute
  // to group by, or a function that returns the criterion.
  _.groupBy = group(function(result, value, key) {
    if (_.has(result, key)) result[key].push(value); else result[key] = [value];
  });

  // Indexes the object's values by a criterion, similar to `groupBy`, but for
  // when you know that your index values will be unique.
  _.indexBy = group(function(result, value, key) {
    result[key] = value;
  });

  // Counts instances of an object that group by a certain criterion. Pass
  // either a string attribute to count by, or a function that returns the
  // criterion.
  _.countBy = group(function(result, value, key) {
    if (_.has(result, key)) result[key]++; else result[key] = 1;
  });

  // Safely create a real, live array from anything iterable.
  _.toArray = function(obj) {
    if (!obj) return [];
    if (_.isArray(obj)) return slice.call(obj);
    if (isArrayLike(obj)) return _.map(obj, _.identity);
    return _.values(obj);
  };

  // Return the number of elements in an object.
  _.size = function(obj) {
    if (obj == null) return 0;
    return isArrayLike(obj) ? obj.length : _.keys(obj).length;
  };

  // Split a collection into two arrays: one whose elements all satisfy the given
  // predicate, and one whose elements all do not satisfy the predicate.
  _.partition = function(obj, predicate, context) {
    predicate = cb(predicate, context);
    var pass = [], fail = [];
    _.each(obj, function(value, key, obj) {
      (predicate(value, key, obj) ? pass : fail).push(value);
    });
    return [pass, fail];
  };

  // Array Functions
  // ---------------

  // Get the first element of an array. Passing **n** will return the first N
  // values in the array. Aliased as `head` and `take`. The **guard** check
  // allows it to work with `_.map`.
  _.first = _.head = _.take = function(array, n, guard) {
    if (array == null) return void 0;
    if (n == null || guard) return array[0];
    return _.initial(array, array.length - n);
  };

  // Returns everything but the last entry of the array. Especially useful on
  // the arguments object. Passing **n** will return all the values in
  // the array, excluding the last N.
  _.initial = function(array, n, guard) {
    return slice.call(array, 0, Math.max(0, array.length - (n == null || guard ? 1 : n)));
  };

  // Get the last element of an array. Passing **n** will return the last N
  // values in the array.
  _.last = function(array, n, guard) {
    if (array == null) return void 0;
    if (n == null || guard) return array[array.length - 1];
    return _.rest(array, Math.max(0, array.length - n));
  };

  // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.
  // Especially useful on the arguments object. Passing an **n** will return
  // the rest N values in the array.
  _.rest = _.tail = _.drop = function(array, n, guard) {
    return slice.call(array, n == null || guard ? 1 : n);
  };

  // Trim out all falsy values from an array.
  _.compact = function(array) {
    return _.filter(array, _.identity);
  };

  // Internal implementation of a recursive `flatten` function.
  var flatten = function(input, shallow, strict, startIndex) {
    var output = [], idx = 0;
    for (var i = startIndex || 0, length = getLength(input); i < length; i++) {
      var value = input[i];
      if (isArrayLike(value) && (_.isArray(value) || _.isArguments(value))) {
        //flatten current level of array or arguments object
        if (!shallow) value = flatten(value, shallow, strict);
        var j = 0, len = value.length;
        output.length += len;
        while (j < len) {
          output[idx++] = value[j++];
        }
      } else if (!strict) {
        output[idx++] = value;
      }
    }
    return output;
  };

  // Flatten out an array, either recursively (by default), or just one level.
  _.flatten = function(array, shallow) {
    return flatten(array, shallow, false);
  };

  // Return a version of the array that does not contain the specified value(s).
  _.without = function(array) {
    return _.difference(array, slice.call(arguments, 1));
  };

  // Produce a duplicate-free version of the array. If the array has already
  // been sorted, you have the option of using a faster algorithm.
  // Aliased as `unique`.
  _.uniq = _.unique = function(array, isSorted, iteratee, context) {
    if (!_.isBoolean(isSorted)) {
      context = iteratee;
      iteratee = isSorted;
      isSorted = false;
    }
    if (iteratee != null) iteratee = cb(iteratee, context);
    var result = [];
    var seen = [];
    for (var i = 0, length = getLength(array); i < length; i++) {
      var value = array[i],
          computed = iteratee ? iteratee(value, i, array) : value;
      if (isSorted) {
        if (!i || seen !== computed) result.push(value);
        seen = computed;
      } else if (iteratee) {
        if (!_.contains(seen, computed)) {
          seen.push(computed);
          result.push(value);
        }
      } else if (!_.contains(result, value)) {
        result.push(value);
      }
    }
    return result;
  };

  // Produce an array that contains the union: each distinct element from all of
  // the passed-in arrays.
  _.union = function() {
    return _.uniq(flatten(arguments, true, true));
  };

  // Produce an array that contains every item shared between all the
  // passed-in arrays.
  _.intersection = function(array) {
    var result = [];
    var argsLength = arguments.length;
    for (var i = 0, length = getLength(array); i < length; i++) {
      var item = array[i];
      if (_.contains(result, item)) continue;
      for (var j = 1; j < argsLength; j++) {
        if (!_.contains(arguments[j], item)) break;
      }
      if (j === argsLength) result.push(item);
    }
    return result;
  };

  // Take the difference between one array and a number of other arrays.
  // Only the elements present in just the first array will remain.
  _.difference = function(array) {
    var rest = flatten(arguments, true, true, 1);
    return _.filter(array, function(value){
      return !_.contains(rest, value);
    });
  };

  // Zip together multiple lists into a single array -- elements that share
  // an index go together.
  _.zip = function() {
    return _.unzip(arguments);
  };

  // Complement of _.zip. Unzip accepts an array of arrays and groups
  // each array's elements on shared indices
  _.unzip = function(array) {
    var length = array && _.max(array, getLength).length || 0;
    var result = Array(length);

    for (var index = 0; index < length; index++) {
      result[index] = _.pluck(array, index);
    }
    return result;
  };

  // Converts lists into objects. Pass either a single array of `[key, value]`
  // pairs, or two parallel arrays of the same length -- one of keys, and one of
  // the corresponding values.
  _.object = function(list, values) {
    var result = {};
    for (var i = 0, length = getLength(list); i < length; i++) {
      if (values) {
        result[list[i]] = values[i];
      } else {
        result[list[i][0]] = list[i][1];
      }
    }
    return result;
  };

  // Generator function to create the findIndex and findLastIndex functions
  function createPredicateIndexFinder(dir) {
    return function(array, predicate, context) {
      predicate = cb(predicate, context);
      var length = getLength(array);
      var index = dir > 0 ? 0 : length - 1;
      for (; index >= 0 && index < length; index += dir) {
        if (predicate(array[index], index, array)) return index;
      }
      return -1;
    };
  }

  // Returns the first index on an array-like that passes a predicate test
  _.findIndex = createPredicateIndexFinder(1);
  _.findLastIndex = createPredicateIndexFinder(-1);

  // Use a comparator function to figure out the smallest index at which
  // an object should be inserted so as to maintain order. Uses binary search.
  _.sortedIndex = function(array, obj, iteratee, context) {
    iteratee = cb(iteratee, context, 1);
    var value = iteratee(obj);
    var low = 0, high = getLength(array);
    while (low < high) {
      var mid = Math.floor((low + high) / 2);
      if (iteratee(array[mid]) < value) low = mid + 1; else high = mid;
    }
    return low;
  };

  // Generator function to create the indexOf and lastIndexOf functions
  function createIndexFinder(dir, predicateFind, sortedIndex) {
    return function(array, item, idx) {
      var i = 0, length = getLength(array);
      if (typeof idx == 'number') {
        if (dir > 0) {
            i = idx >= 0 ? idx : Math.max(idx + length, i);
        } else {
            length = idx >= 0 ? Math.min(idx + 1, length) : idx + length + 1;
        }
      } else if (sortedIndex && idx && length) {
        idx = sortedIndex(array, item);
        return array[idx] === item ? idx : -1;
      }
      if (item !== item) {
        idx = predicateFind(slice.call(array, i, length), _.isNaN);
        return idx >= 0 ? idx + i : -1;
      }
      for (idx = dir > 0 ? i : length - 1; idx >= 0 && idx < length; idx += dir) {
        if (array[idx] === item) return idx;
      }
      return -1;
    };
  }

  // Return the position of the first occurrence of an item in an array,
  // or -1 if the item is not included in the array.
  // If the array is large and already in sort order, pass `true`
  // for **isSorted** to use binary search.
  _.indexOf = createIndexFinder(1, _.findIndex, _.sortedIndex);
  _.lastIndexOf = createIndexFinder(-1, _.findLastIndex);

  // Generate an integer Array containing an arithmetic progression. A port of
  // the native Python `range()` function. See
  // [the Python documentation](http://docs.python.org/library/functions.html#range).
  _.range = function(start, stop, step) {
    if (stop == null) {
      stop = start || 0;
      start = 0;
    }
    step = step || 1;

    var length = Math.max(Math.ceil((stop - start) / step), 0);
    var range = Array(length);

    for (var idx = 0; idx < length; idx++, start += step) {
      range[idx] = start;
    }

    return range;
  };

  // Function (ahem) Functions
  // ------------------

  // Determines whether to execute a function as a constructor
  // or a normal function with the provided arguments
  var executeBound = function(sourceFunc, boundFunc, context, callingContext, args) {
    if (!(callingContext instanceof boundFunc)) return sourceFunc.apply(context, args);
    var self = baseCreate(sourceFunc.prototype);
    var result = sourceFunc.apply(self, args);
    if (_.isObject(result)) return result;
    return self;
  };

  // Create a function bound to a given object (assigning `this`, and arguments,
  // optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if
  // available.
  _.bind = function(func, context) {
    if (nativeBind && func.bind === nativeBind) return nativeBind.apply(func, slice.call(arguments, 1));
    if (!_.isFunction(func)) throw new TypeError('Bind must be called on a function');
    var args = slice.call(arguments, 2);
    var bound = function() {
      return executeBound(func, bound, context, this, args.concat(slice.call(arguments)));
    };
    return bound;
  };

  // Partially apply a function by creating a version that has had some of its
  // arguments pre-filled, without changing its dynamic `this` context. _ acts
  // as a placeholder, allowing any combination of arguments to be pre-filled.
  _.partial = function(func) {
    var boundArgs = slice.call(arguments, 1);
    var bound = function() {
      var position = 0, length = boundArgs.length;
      var args = Array(length);
      for (var i = 0; i < length; i++) {
        args[i] = boundArgs[i] === _ ? arguments[position++] : boundArgs[i];
      }
      while (position < arguments.length) args.push(arguments[position++]);
      return executeBound(func, bound, this, this, args);
    };
    return bound;
  };

  // Bind a number of an object's methods to that object. Remaining arguments
  // are the method names to be bound. Useful for ensuring that all callbacks
  // defined on an object belong to it.
  _.bindAll = function(obj) {
    var i, length = arguments.length, key;
    if (length <= 1) throw new Error('bindAll must be passed function names');
    for (i = 1; i < length; i++) {
      key = arguments[i];
      obj[key] = _.bind(obj[key], obj);
    }
    return obj;
  };

  // Memoize an expensive function by storing its results.
  _.memoize = function(func, hasher) {
    var memoize = function(key) {
      var cache = memoize.cache;
      var address = '' + (hasher ? hasher.apply(this, arguments) : key);
      if (!_.has(cache, address)) cache[address] = func.apply(this, arguments);
      return cache[address];
    };
    memoize.cache = {};
    return memoize;
  };

  // Delays a function for the given number of milliseconds, and then calls
  // it with the arguments supplied.
  _.delay = function(func, wait) {
    var args = slice.call(arguments, 2);
    return setTimeout(function(){
      return func.apply(null, args);
    }, wait);
  };

  // Defers a function, scheduling it to run after the current call stack has
  // cleared.
  _.defer = _.partial(_.delay, _, 1);

  // Returns a function, that, when invoked, will only be triggered at most once
  // during a given window of time. Normally, the throttled function will run
  // as much as it can, without ever going more than once per `wait` duration;
  // but if you'd like to disable the execution on the leading edge, pass
  // `{leading: false}`. To disable execution on the trailing edge, ditto.
  _.throttle = function(func, wait, options) {
    var context, args, result;
    var timeout = null;
    var previous = 0;
    if (!options) options = {};
    var later = function() {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    };
    return function() {
      var now = _.now();
      if (!previous && options.leading === false) previous = now;
      var remaining = wait - (now - previous);
      context = this;
      args = arguments;
      if (remaining <= 0 || remaining > wait) {
        if (timeout) {
          clearTimeout(timeout);
          timeout = null;
        }
        previous = now;
        result = func.apply(context, args);
        if (!timeout) context = args = null;
      } else if (!timeout && options.trailing !== false) {
        timeout = setTimeout(later, remaining);
      }
      return result;
    };
  };

  // Returns a function, that, as long as it continues to be invoked, will not
  // be triggered. The function will be called after it stops being called for
  // N milliseconds. If `immediate` is passed, trigger the function on the
  // leading edge, instead of the trailing.
  _.debounce = function(func, wait, immediate) {
    var timeout, args, context, timestamp, result;

    var later = function() {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    };

    return function() {
      context = this;
      args = arguments;
      timestamp = _.now();
      var callNow = immediate && !timeout;
      if (!timeout) timeout = setTimeout(later, wait);
      if (callNow) {
        result = func.apply(context, args);
        context = args = null;
      }

      return result;
    };
  };

  // Returns the first function passed as an argument to the second,
  // allowing you to adjust arguments, run code before and after, and
  // conditionally execute the original function.
  _.wrap = function(func, wrapper) {
    return _.partial(wrapper, func);
  };

  // Returns a negated version of the passed-in predicate.
  _.negate = function(predicate) {
    return function() {
      return !predicate.apply(this, arguments);
    };
  };

  // Returns a function that is the composition of a list of functions, each
  // consuming the return value of the function that follows.
  _.compose = function() {
    var args = arguments;
    var start = args.length - 1;
    return function() {
      var i = start;
      var result = args[start].apply(this, arguments);
      while (i--) result = args[i].call(this, result);
      return result;
    };
  };

  // Returns a function that will only be executed on and after the Nth call.
  _.after = function(times, func) {
    return function() {
      if (--times < 1) {
        return func.apply(this, arguments);
      }
    };
  };

  // Returns a function that will only be executed up to (but not including) the Nth call.
  _.before = function(times, func) {
    var memo;
    return function() {
      if (--times > 0) {
        memo = func.apply(this, arguments);
      }
      if (times <= 1) func = null;
      return memo;
    };
  };

  // Returns a function that will be executed at most one time, no matter how
  // often you call it. Useful for lazy initialization.
  _.once = _.partial(_.before, 2);

  // Object Functions
  // ----------------

  // Keys in IE < 9 that won't be iterated by `for key in ...` and thus missed.
  var hasEnumBug = !{toString: null}.propertyIsEnumerable('toString');
  var nonEnumerableProps = ['valueOf', 'isPrototypeOf', 'toString',
                      'propertyIsEnumerable', 'hasOwnProperty', 'toLocaleString'];

  function collectNonEnumProps(obj, keys) {
    var nonEnumIdx = nonEnumerableProps.length;
    var constructor = obj.constructor;
    var proto = (_.isFunction(constructor) && constructor.prototype) || ObjProto;

    // Constructor is a special case.
    var prop = 'constructor';
    if (_.has(obj, prop) && !_.contains(keys, prop)) keys.push(prop);

    while (nonEnumIdx--) {
      prop = nonEnumerableProps[nonEnumIdx];
      if (prop in obj && obj[prop] !== proto[prop] && !_.contains(keys, prop)) {
        keys.push(prop);
      }
    }
  }

  // Retrieve the names of an object's own properties.
  // Delegates to **ECMAScript 5**'s native `Object.keys`
  _.keys = function(obj) {
    if (!_.isObject(obj)) return [];
    if (nativeKeys) return nativeKeys(obj);
    var keys = [];
    for (var key in obj) if (_.has(obj, key)) keys.push(key);
    // Ahem, IE < 9.
    if (hasEnumBug) collectNonEnumProps(obj, keys);
    return keys;
  };

  // Retrieve all the property names of an object.
  _.allKeys = function(obj) {
    if (!_.isObject(obj)) return [];
    var keys = [];
    for (var key in obj) keys.push(key);
    // Ahem, IE < 9.
    if (hasEnumBug) collectNonEnumProps(obj, keys);
    return keys;
  };

  // Retrieve the values of an object's properties.
  _.values = function(obj) {
    var keys = _.keys(obj);
    var length = keys.length;
    var values = Array(length);
    for (var i = 0; i < length; i++) {
      values[i] = obj[keys[i]];
    }
    return values;
  };

  // Returns the results of applying the iteratee to each element of the object
  // In contrast to _.map it returns an object
  _.mapObject = function(obj, iteratee, context) {
    iteratee = cb(iteratee, context);
    var keys =  _.keys(obj),
          length = keys.length,
          results = {},
          currentKey;
      for (var index = 0; index < length; index++) {
        currentKey = keys[index];
        results[currentKey] = iteratee(obj[currentKey], currentKey, obj);
      }
      return results;
  };

  // Convert an object into a list of `[key, value]` pairs.
  _.pairs = function(obj) {
    var keys = _.keys(obj);
    var length = keys.length;
    var pairs = Array(length);
    for (var i = 0; i < length; i++) {
      pairs[i] = [keys[i], obj[keys[i]]];
    }
    return pairs;
  };

  // Invert the keys and values of an object. The values must be serializable.
  _.invert = function(obj) {
    var result = {};
    var keys = _.keys(obj);
    for (var i = 0, length = keys.length; i < length; i++) {
      result[obj[keys[i]]] = keys[i];
    }
    return result;
  };

  // Return a sorted list of the function names available on the object.
  // Aliased as `methods`
  _.functions = _.methods = function(obj) {
    var names = [];
    for (var key in obj) {
      if (_.isFunction(obj[key])) names.push(key);
    }
    return names.sort();
  };

  // Extend a given object with all the properties in passed-in object(s).
  _.extend = createAssigner(_.allKeys);

  // Assigns a given object with all the own properties in the passed-in object(s)
  // (https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)
  _.extendOwn = _.assign = createAssigner(_.keys);

  // Returns the first key on an object that passes a predicate test
  _.findKey = function(obj, predicate, context) {
    predicate = cb(predicate, context);
    var keys = _.keys(obj), key;
    for (var i = 0, length = keys.length; i < length; i++) {
      key = keys[i];
      if (predicate(obj[key], key, obj)) return key;
    }
  };

  // Return a copy of the object only containing the whitelisted properties.
  _.pick = function(object, oiteratee, context) {
    var result = {}, obj = object, iteratee, keys;
    if (obj == null) return result;
    if (_.isFunction(oiteratee)) {
      keys = _.allKeys(obj);
      iteratee = optimizeCb(oiteratee, context);
    } else {
      keys = flatten(arguments, false, false, 1);
      iteratee = function(value, key, obj) { return key in obj; };
      obj = Object(obj);
    }
    for (var i = 0, length = keys.length; i < length; i++) {
      var key = keys[i];
      var value = obj[key];
      if (iteratee(value, key, obj)) result[key] = value;
    }
    return result;
  };

   // Return a copy of the object without the blacklisted properties.
  _.omit = function(obj, iteratee, context) {
    if (_.isFunction(iteratee)) {
      iteratee = _.negate(iteratee);
    } else {
      var keys = _.map(flatten(arguments, false, false, 1), String);
      iteratee = function(value, key) {
        return !_.contains(keys, key);
      };
    }
    return _.pick(obj, iteratee, context);
  };

  // Fill in a given object with default properties.
  _.defaults = createAssigner(_.allKeys, true);

  // Creates an object that inherits from the given prototype object.
  // If additional properties are provided then they will be added to the
  // created object.
  _.create = function(prototype, props) {
    var result = baseCreate(prototype);
    if (props) _.extendOwn(result, props);
    return result;
  };

  // Create a (shallow-cloned) duplicate of an object.
  _.clone = function(obj) {
    if (!_.isObject(obj)) return obj;
    return _.isArray(obj) ? obj.slice() : _.extend({}, obj);
  };

  // Invokes interceptor with the obj, and then returns obj.
  // The primary purpose of this method is to "tap into" a method chain, in
  // order to perform operations on intermediate results within the chain.
  _.tap = function(obj, interceptor) {
    interceptor(obj);
    return obj;
  };

  // Returns whether an object has a given set of `key:value` pairs.
  _.isMatch = function(object, attrs) {
    var keys = _.keys(attrs), length = keys.length;
    if (object == null) return !length;
    var obj = Object(object);
    for (var i = 0; i < length; i++) {
      var key = keys[i];
      if (attrs[key] !== obj[key] || !(key in obj)) return false;
    }
    return true;
  };


  // Internal recursive comparison function for `isEqual`.
  var eq = function(a, b, aStack, bStack) {
    // Identical objects are equal. `0 === -0`, but they aren't identical.
    // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).
    if (a === b) return a !== 0 || 1 / a === 1 / b;
    // A strict comparison is necessary because `null == undefined`.
    if (a == null || b == null) return a === b;
    // Unwrap any wrapped objects.
    if (a instanceof _) a = a._wrapped;
    if (b instanceof _) b = b._wrapped;
    // Compare `[[Class]]` names.
    var className = toString.call(a);
    if (className !== toString.call(b)) return false;
    switch (className) {
      // Strings, numbers, regular expressions, dates, and booleans are compared by value.
      case '[object RegExp]':
      // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')
      case '[object String]':
        // Primitives and their corresponding object wrappers are equivalent; thus, `"5"` is
        // equivalent to `new String("5")`.
        return '' + a === '' + b;
      case '[object Number]':
        // `NaN`s are equivalent, but non-reflexive.
        // Object(NaN) is equivalent to NaN
        if (+a !== +a) return +b !== +b;
        // An `egal` comparison is performed for other numeric values.
        return +a === 0 ? 1 / +a === 1 / b : +a === +b;
      case '[object Date]':
      case '[object Boolean]':
        // Coerce dates and booleans to numeric primitive values. Dates are compared by their
        // millisecond representations. Note that invalid dates with millisecond representations
        // of `NaN` are not equivalent.
        return +a === +b;
    }

    var areArrays = className === '[object Array]';
    if (!areArrays) {
      if (typeof a != 'object' || typeof b != 'object') return false;

      // Objects with different constructors are not equivalent, but `Object`s or `Array`s
      // from different frames are.
      var aCtor = a.constructor, bCtor = b.constructor;
      if (aCtor !== bCtor && !(_.isFunction(aCtor) && aCtor instanceof aCtor &&
                               _.isFunction(bCtor) && bCtor instanceof bCtor)
                          && ('constructor' in a && 'constructor' in b)) {
        return false;
      }
    }
    // Assume equality for cyclic structures. The algorithm for detecting cyclic
    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.

    // Initializing stack of traversed objects.
    // It's done here since we only need them for objects and arrays comparison.
    aStack = aStack || [];
    bStack = bStack || [];
    var length = aStack.length;
    while (length--) {
      // Linear search. Performance is inversely proportional to the number of
      // unique nested structures.
      if (aStack[length] === a) return bStack[length] === b;
    }

    // Add the first object to the stack of traversed objects.
    aStack.push(a);
    bStack.push(b);

    // Recursively compare objects and arrays.
    if (areArrays) {
      // Compare array lengths to determine if a deep comparison is necessary.
      length = a.length;
      if (length !== b.length) return false;
      // Deep compare the contents, ignoring non-numeric properties.
      while (length--) {
        if (!eq(a[length], b[length], aStack, bStack)) return false;
      }
    } else {
      // Deep compare objects.
      var keys = _.keys(a), key;
      length = keys.length;
      // Ensure that both objects contain the same number of properties before comparing deep equality.
      if (_.keys(b).length !== length) return false;
      while (length--) {
        // Deep compare each member
        key = keys[length];
        if (!(_.has(b, key) && eq(a[key], b[key], aStack, bStack))) return false;
      }
    }
    // Remove the first object from the stack of traversed objects.
    aStack.pop();
    bStack.pop();
    return true;
  };

  // Perform a deep comparison to check if two objects are equal.
  _.isEqual = function(a, b) {
    return eq(a, b);
  };

  // Is a given array, string, or object empty?
  // An "empty" object has no enumerable own-properties.
  _.isEmpty = function(obj) {
    if (obj == null) return true;
    if (isArrayLike(obj) && (_.isArray(obj) || _.isString(obj) || _.isArguments(obj))) return obj.length === 0;
    return _.keys(obj).length === 0;
  };

  // Is a given value a DOM element?
  _.isElement = function(obj) {
    return !!(obj && obj.nodeType === 1);
  };

  // Is a given value an array?
  // Delegates to ECMA5's native Array.isArray
  _.isArray = nativeIsArray || function(obj) {
    return toString.call(obj) === '[object Array]';
  };

  // Is a given variable an object?
  _.isObject = function(obj) {
    var type = typeof obj;
    return type === 'function' || type === 'object' && !!obj;
  };

  // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp, isError.
  _.each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp', 'Error'], function(name) {
    _['is' + name] = function(obj) {
      return toString.call(obj) === '[object ' + name + ']';
    };
  });

  // Define a fallback version of the method in browsers (ahem, IE < 9), where
  // there isn't any inspectable "Arguments" type.
  if (!_.isArguments(arguments)) {
    _.isArguments = function(obj) {
      return _.has(obj, 'callee');
    };
  }

  // Optimize `isFunction` if appropriate. Work around some typeof bugs in old v8,
  // IE 11 (#1621), and in Safari 8 (#1929).
  if (typeof /./ != 'function' && typeof Int8Array != 'object') {
    _.isFunction = function(obj) {
      return typeof obj == 'function' || false;
    };
  }

  // Is a given object a finite number?
  _.isFinite = function(obj) {
    return isFinite(obj) && !isNaN(parseFloat(obj));
  };

  // Is the given value `NaN`? (NaN is the only number which does not equal itself).
  _.isNaN = function(obj) {
    return _.isNumber(obj) && obj !== +obj;
  };

  // Is a given value a boolean?
  _.isBoolean = function(obj) {
    return obj === true || obj === false || toString.call(obj) === '[object Boolean]';
  };

  // Is a given value equal to null?
  _.isNull = function(obj) {
    return obj === null;
  };

  // Is a given variable undefined?
  _.isUndefined = function(obj) {
    return obj === void 0;
  };

  // Shortcut function for checking if an object has a given property directly
  // on itself (in other words, not on a prototype).
  _.has = function(obj, key) {
    return obj != null && hasOwnProperty.call(obj, key);
  };

  // Utility Functions
  // -----------------

  // Run Underscore.js in *noConflict* mode, returning the `_` variable to its
  // previous owner. Returns a reference to the Underscore object.
  _.noConflict = function() {
    root._ = previousUnderscore;
    return this;
  };

  // Keep the identity function around for default iteratees.
  _.identity = function(value) {
    return value;
  };

  // Predicate-generating functions. Often useful outside of Underscore.
  _.constant = function(value) {
    return function() {
      return value;
    };
  };

  _.noop = function(){};

  _.property = property;

  // Generates a function for a given object that returns a given property.
  _.propertyOf = function(obj) {
    return obj == null ? function(){} : function(key) {
      return obj[key];
    };
  };

  // Returns a predicate for checking whether an object has a given set of
  // `key:value` pairs.
  _.matcher = _.matches = function(attrs) {
    attrs = _.extendOwn({}, attrs);
    return function(obj) {
      return _.isMatch(obj, attrs);
    };
  };

  // Run a function **n** times.
  _.times = function(n, iteratee, context) {
    var accum = Array(Math.max(0, n));
    iteratee = optimizeCb(iteratee, context, 1);
    for (var i = 0; i < n; i++) accum[i] = iteratee(i);
    return accum;
  };

  // Return a random integer between min and max (inclusive).
  _.random = function(min, max) {
    if (max == null) {
      max = min;
      min = 0;
    }
    return min + Math.floor(Math.random() * (max - min + 1));
  };

  // A (possibly faster) way to get the current timestamp as an integer.
  _.now = Date.now || function() {
    return new Date().getTime();
  };

   // List of HTML entities for escaping.
  var escapeMap = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#x27;',
    '`': '&#x60;'
  };
  var unescapeMap = _.invert(escapeMap);

  // Functions for escaping and unescaping strings to/from HTML interpolation.
  var createEscaper = function(map) {
    var escaper = function(match) {
      return map[match];
    };
    // Regexes for identifying a key that needs to be escaped
    var source = '(?:' + _.keys(map).join('|') + ')';
    var testRegexp = RegExp(source);
    var replaceRegexp = RegExp(source, 'g');
    return function(string) {
      string = string == null ? '' : '' + string;
      return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;
    };
  };
  _.escape = createEscaper(escapeMap);
  _.unescape = createEscaper(unescapeMap);

  // If the value of the named `property` is a function then invoke it with the
  // `object` as context; otherwise, return it.
  _.result = function(object, property, fallback) {
    var value = object == null ? void 0 : object[property];
    if (value === void 0) {
      value = fallback;
    }
    return _.isFunction(value) ? value.call(object) : value;
  };

  // Generate a unique integer id (unique within the entire client session).
  // Useful for temporary DOM ids.
  var idCounter = 0;
  _.uniqueId = function(prefix) {
    var id = ++idCounter + '';
    return prefix ? prefix + id : id;
  };

  // By default, Underscore uses ERB-style template delimiters, change the
  // following template settings to use alternative delimiters.
  _.templateSettings = {
    evaluate    : /<%([\s\S]+?)%>/g,
    interpolate : /<%=([\s\S]+?)%>/g,
    escape      : /<%-([\s\S]+?)%>/g
  };

  // When customizing `templateSettings`, if you don't want to define an
  // interpolation, evaluation or escaping regex, we need one that is
  // guaranteed not to match.
  var noMatch = /(.)^/;

  // Certain characters need to be escaped so that they can be put into a
  // string literal.
  var escapes = {
    "'":      "'",
    '\\':     '\\',
    '\r':     'r',
    '\n':     'n',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  var escaper = /\\|'|\r|\n|\u2028|\u2029/g;

  var escapeChar = function(match) {
    return '\\' + escapes[match];
  };

  // JavaScript micro-templating, similar to John Resig's implementation.
  // Underscore templating handles arbitrary delimiters, preserves whitespace,
  // and correctly escapes quotes within interpolated code.
  // NB: `oldSettings` only exists for backwards compatibility.
  _.template = function(text, settings, oldSettings) {
    if (!settings && oldSettings) settings = oldSettings;
    settings = _.defaults({}, settings, _.templateSettings);

    // Combine delimiters into one regular expression via alternation.
    var matcher = RegExp([
      (settings.escape || noMatch).source,
      (settings.interpolate || noMatch).source,
      (settings.evaluate || noMatch).source
    ].join('|') + '|$', 'g');

    // Compile the template source, escaping string literals appropriately.
    var index = 0;
    var source = "__p+='";
    text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {
      source += text.slice(index, offset).replace(escaper, escapeChar);
      index = offset + match.length;

      if (escape) {
        source += "'+\n((__t=(" + escape + "))==null?'':_.escape(__t))+\n'";
      } else if (interpolate) {
        source += "'+\n((__t=(" + interpolate + "))==null?'':__t)+\n'";
      } else if (evaluate) {
        source += "';\n" + evaluate + "\n__p+='";
      }

      // Adobe VMs need the match returned to produce the correct offest.
      return match;
    });
    source += "';\n";

    // If a variable is not specified, place data values in local scope.
    if (!settings.variable) source = 'with(obj||{}){\n' + source + '}\n';

    source = "var __t,__p='',__j=Array.prototype.join," +
      "print=function(){__p+=__j.call(arguments,'');};\n" +
      source + 'return __p;\n';

    try {
      var render = new Function(settings.variable || 'obj', '_', source);
    } catch (e) {
      e.source = source;
      throw e;
    }

    var template = function(data) {
      return render.call(this, data, _);
    };

    // Provide the compiled source as a convenience for precompilation.
    var argument = settings.variable || 'obj';
    template.source = 'function(' + argument + '){\n' + source + '}';

    return template;
  };

  // Add a "chain" function. Start chaining a wrapped Underscore object.
  _.chain = function(obj) {
    var instance = _(obj);
    instance._chain = true;
    return instance;
  };

  // OOP
  // ---------------
  // If Underscore is called as a function, it returns a wrapped object that
  // can be used OO-style. This wrapper holds altered versions of all the
  // underscore functions. Wrapped objects may be chained.

  // Helper function to continue chaining intermediate results.
  var result = function(instance, obj) {
    return instance._chain ? _(obj).chain() : obj;
  };

  // Add your own custom functions to the Underscore object.
  _.mixin = function(obj) {
    _.each(_.functions(obj), function(name) {
      var func = _[name] = obj[name];
      _.prototype[name] = function() {
        var args = [this._wrapped];
        push.apply(args, arguments);
        return result(this, func.apply(_, args));
      };
    });
  };

  // Add all of the Underscore functions to the wrapper object.
  _.mixin(_);

  // Add all mutator Array functions to the wrapper.
  _.each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {
    var method = ArrayProto[name];
    _.prototype[name] = function() {
      var obj = this._wrapped;
      method.apply(obj, arguments);
      if ((name === 'shift' || name === 'splice') && obj.length === 0) delete obj[0];
      return result(this, obj);
    };
  });

  // Add all accessor Array functions to the wrapper.
  _.each(['concat', 'join', 'slice'], function(name) {
    var method = ArrayProto[name];
    _.prototype[name] = function() {
      return result(this, method.apply(this._wrapped, arguments));
    };
  });

  // Extracts the result from a wrapped and chained object.
  _.prototype.value = function() {
    return this._wrapped;
  };

  // Provide unwrapping proxy for some methods used in engine operations
  // such as arithmetic and JSON stringification.
  _.prototype.valueOf = _.prototype.toJSON = _.prototype.value;

  _.prototype.toString = function() {
    return '' + this._wrapped;
  };

  // AMD registration happens at the end for compatibility with AMD loaders
  // that may not enforce next-turn semantics on modules. Even though general
  // practice for AMD registration is to be anonymous, underscore registers
  // as a named module because, like jQuery, it is a base library that is
  // popular enough to be bundled in a third party lib, but not be part of
  // an AMD load request. Those cases could generate an error when an
  // anonymous define() is called outside of a loader request.
  if (typeof define === 'function' && define.amd) {
    define('underscore', [], function() {
      return _;
    });
  }
}.call(this));
});

/*eslint camelcase:0 */ /*jshint esnext:true, -W051:true */ /*eslint-disable */'use strict';global.DEFINE_MODULE('internal',(function(){'use strict'; /*eslint-enable */var exports={}; ////////////////////////////////////////////////////////////////////////////////
/// @brief module "internal"
///
/// @file
///
/// DISCLAIMER
///
/// Copyright 2004-2013 triAGENS GmbH, Cologne, Germany
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///
///     http://www.apache.org/licenses/LICENSE-2.0
///
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// Copyright holder is triAGENS GmbH, Cologne, Germany
///
/// @author Dr. Frank Celler
/// @author Copyright 2010-2013, triAGENS GmbH, Cologne, Germany
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
/// @brief ArangoError
////////////////////////////////////////////////////////////////////////////////
if(global.ArangoError){exports.ArangoError = global.ArangoError;delete global.ArangoError;}else {exports.ArangoError = function(error){if(error !== undefined){this.error = error.error;this.code = error.code;this.errorNum = error.errorNum;this.errorMessage = error.errorMessage;}};exports.ArangoError.prototype = new Error();}Object.defineProperty(exports.ArangoError.prototype,'message',{configurable:true,enumerable:true,get:function get(){return this.errorMessage;}});exports.ArangoError.prototype.name = 'ArangoError';exports.ArangoError.prototype._PRINT = function(context){context.output += '[' + this.toString() + ']';};exports.ArangoError.prototype.toString = function(){return this.name + ' ' + this.errorNum + ': ' + this.message;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief threadNumber
////////////////////////////////////////////////////////////////////////////////
exports.threadNumber = 0;if(global.THREAD_NUMBER){exports.threadNumber = global.THREAD_NUMBER;delete global.THREAD_NUMBER;} ////////////////////////////////////////////////////////////////////////////////
/// @brief developmentMode. this is only here for backwards compatibility
////////////////////////////////////////////////////////////////////////////////
exports.developmentMode = false; ////////////////////////////////////////////////////////////////////////////////
/// @brief quiet
////////////////////////////////////////////////////////////////////////////////
exports.quiet = false;if(global.ARANGO_QUIET){exports.quiet = global.ARANGO_QUIET;delete global.ARANGO_QUIET;} ////////////////////////////////////////////////////////////////////////////////
/// @brief valgrind
////////////////////////////////////////////////////////////////////////////////
exports.valgrind = false;if(global.VALGRIND){exports.valgrind = global.VALGRIND;delete global.VALGRIND;} ////////////////////////////////////////////////////////////////////////////////
/// @brief valgrind
////////////////////////////////////////////////////////////////////////////////
exports.coverage = false;if(global.COVERAGE){exports.coverage = global.COVERAGE;delete global.COVERAGE;} ////////////////////////////////////////////////////////////////////////////////
/// @brief version
////////////////////////////////////////////////////////////////////////////////
exports.version = 'unknown';if(global.VERSION){exports.version = global.VERSION;delete global.VERSION;} ////////////////////////////////////////////////////////////////////////////////
/// @brief platform
////////////////////////////////////////////////////////////////////////////////
exports.platform = 'unknown';if(global.SYS_PLATFORM){exports.platform = global.SYS_PLATFORM;delete global.SYS_PLATFORM;} ////////////////////////////////////////////////////////////////////////////////
/// @brief bytesSentDistribution
////////////////////////////////////////////////////////////////////////////////
exports.bytesSentDistribution = [];if(global.BYTES_SENT_DISTRIBUTION){exports.bytesSentDistribution = global.BYTES_SENT_DISTRIBUTION;delete global.BYTES_SENT_DISTRIBUTION;} ////////////////////////////////////////////////////////////////////////////////
/// @brief bytesReceivedDistribution
////////////////////////////////////////////////////////////////////////////////
exports.bytesReceivedDistribution = [];if(global.BYTES_RECEIVED_DISTRIBUTION){exports.bytesReceivedDistribution = global.BYTES_RECEIVED_DISTRIBUTION;delete global.BYTES_RECEIVED_DISTRIBUTION;} ////////////////////////////////////////////////////////////////////////////////
/// @brief connectionTimeDistribution
////////////////////////////////////////////////////////////////////////////////
exports.connectionTimeDistribution = [];if(global.CONNECTION_TIME_DISTRIBUTION){exports.connectionTimeDistribution = global.CONNECTION_TIME_DISTRIBUTION;delete global.CONNECTION_TIME_DISTRIBUTION;} ////////////////////////////////////////////////////////////////////////////////
/// @brief requestTimeDistribution
////////////////////////////////////////////////////////////////////////////////
exports.requestTimeDistribution = [];if(global.REQUEST_TIME_DISTRIBUTION){exports.requestTimeDistribution = global.REQUEST_TIME_DISTRIBUTION;delete global.REQUEST_TIME_DISTRIBUTION;} ////////////////////////////////////////////////////////////////////////////////
/// @brief startupPath
////////////////////////////////////////////////////////////////////////////////
exports.startupPath = '';if(global.STARTUP_PATH){exports.startupPath = global.STARTUP_PATH;delete global.STARTUP_PATH;}if(exports.startupPath === ''){exports.startupPath = '.';} ////////////////////////////////////////////////////////////////////////////////
/// @brief configureEndpoint
////////////////////////////////////////////////////////////////////////////////
if(global.CONFIGURE_ENDPOINT){exports.configureEndpoint = global.CONFIGURE_ENDPOINT;delete global.CONFIGURE_ENDPOINT;} ////////////////////////////////////////////////////////////////////////////////
/// @brief removeEndpoint
////////////////////////////////////////////////////////////////////////////////
if(global.REMOVE_ENDPOINT){exports.removeEndpoint = global.REMOVE_ENDPOINT;delete global.REMOVE_ENDPOINT;} ////////////////////////////////////////////////////////////////////////////////
/// @brief listEndpoints
////////////////////////////////////////////////////////////////////////////////
if(global.LIST_ENDPOINTS){exports.listEndpoints = global.LIST_ENDPOINTS;delete global.LIST_ENDPOINTS;} ////////////////////////////////////////////////////////////////////////////////
/// @brief base64Decode
////////////////////////////////////////////////////////////////////////////////
if(global.SYS_BASE64DECODE){exports.base64Decode = global.SYS_BASE64DECODE;delete global.SYS_BASE64DECODE;} ////////////////////////////////////////////////////////////////////////////////
/// @brief base64Encode
////////////////////////////////////////////////////////////////////////////////
if(global.SYS_BASE64ENCODE){exports.base64Encode = global.SYS_BASE64ENCODE;delete global.SYS_BASE64ENCODE;} ////////////////////////////////////////////////////////////////////////////////
/// @brief debugSegfault
////////////////////////////////////////////////////////////////////////////////
if(global.SYS_DEBUG_SEGFAULT){exports.debugSegfault = global.SYS_DEBUG_SEGFAULT;delete global.SYS_DEBUG_SEGFAULT;} ////////////////////////////////////////////////////////////////////////////////
/// @brief debugSetFailAt
////////////////////////////////////////////////////////////////////////////////
if(global.SYS_DEBUG_SET_FAILAT){exports.debugSetFailAt = global.SYS_DEBUG_SET_FAILAT;delete global.SYS_DEBUG_SET_FAILAT;} ////////////////////////////////////////////////////////////////////////////////
/// @brief debugRemoveFailAt
////////////////////////////////////////////////////////////////////////////////
if(global.SYS_DEBUG_REMOVE_FAILAT){exports.debugRemoveFailAt = global.SYS_DEBUG_REMOVE_FAILAT;delete global.SYS_DEBUG_REMOVE_FAILAT;} ////////////////////////////////////////////////////////////////////////////////
/// @brief debugClearFailAt
////////////////////////////////////////////////////////////////////////////////
if(global.SYS_DEBUG_CLEAR_FAILAT){exports.debugClearFailAt = global.SYS_DEBUG_CLEAR_FAILAT;delete global.SYS_DEBUG_CLEAR_FAILAT;} ////////////////////////////////////////////////////////////////////////////////
/// @brief debugCanUseFailAt
////////////////////////////////////////////////////////////////////////////////
if(global.SYS_DEBUG_CAN_USE_FAILAT){exports.debugCanUseFailAt = global.SYS_DEBUG_CAN_USE_FAILAT;delete global.SYS_DEBUG_CAN_USE_FAILAT;} ////////////////////////////////////////////////////////////////////////////////
/// @brief download
////////////////////////////////////////////////////////////////////////////////
if(global.SYS_DOWNLOAD){exports.download = global.SYS_DOWNLOAD;delete global.SYS_DOWNLOAD;} ////////////////////////////////////////////////////////////////////////////////
/// @brief executeScript
////////////////////////////////////////////////////////////////////////////////
if(global.SYS_EXECUTE){exports.executeScript = global.SYS_EXECUTE;delete global.SYS_EXECUTE;} ////////////////////////////////////////////////////////////////////////////////
/// @brief getCurrentRequest
////////////////////////////////////////////////////////////////////////////////
if(global.SYS_GET_CURRENT_REQUEST){exports.getCurrentRequest = global.SYS_GET_CURRENT_REQUEST;delete global.SYS_GET_CURRENT_REQUEST;} ////////////////////////////////////////////////////////////////////////////////
/// @brief getCurrentResponse
////////////////////////////////////////////////////////////////////////////////
if(global.SYS_GET_CURRENT_RESPONSE){exports.getCurrentResponse = global.SYS_GET_CURRENT_RESPONSE;delete global.SYS_GET_CURRENT_RESPONSE;} ////////////////////////////////////////////////////////////////////////////////
/// @brief extend
////////////////////////////////////////////////////////////////////////////////
exports.extend = function(target,source){Object.getOwnPropertyNames(source).forEach(function(propName){Object.defineProperty(target,propName,Object.getOwnPropertyDescriptor(source,propName));});return target;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief load
////////////////////////////////////////////////////////////////////////////////
if(global.SYS_LOAD){exports.load = global.SYS_LOAD;delete global.SYS_LOAD;} ////////////////////////////////////////////////////////////////////////////////
/// @brief logLevel
////////////////////////////////////////////////////////////////////////////////
if(global.SYS_LOG_LEVEL){exports.logLevel = global.SYS_LOG_LEVEL;delete global.SYS_LOG_LEVEL;} ////////////////////////////////////////////////////////////////////////////////
/// @brief md5
////////////////////////////////////////////////////////////////////////////////
if(global.SYS_MD5){exports.md5 = global.SYS_MD5;delete global.SYS_MD5;} ////////////////////////////////////////////////////////////////////////////////
/// @brief genRandomNumbers
////////////////////////////////////////////////////////////////////////////////
if(global.SYS_GEN_RANDOM_NUMBERS){exports.genRandomNumbers = global.SYS_GEN_RANDOM_NUMBERS;delete global.SYS_GEN_RANDOM_NUMBERS;} ////////////////////////////////////////////////////////////////////////////////
/// @brief genRandomAlphaNumbers
////////////////////////////////////////////////////////////////////////////////
if(global.SYS_GEN_RANDOM_ALPHA_NUMBERS){exports.genRandomAlphaNumbers = global.SYS_GEN_RANDOM_ALPHA_NUMBERS;delete global.SYS_GEN_RANDOM_ALPHA_NUMBERS;} ////////////////////////////////////////////////////////////////////////////////
/// @brief genRandomSalt
////////////////////////////////////////////////////////////////////////////////
if(global.SYS_GEN_RANDOM_SALT){exports.genRandomSalt = global.SYS_GEN_RANDOM_SALT;delete global.SYS_GEN_RANDOM_SALT;} ////////////////////////////////////////////////////////////////////////////////
/// @brief hmac
////////////////////////////////////////////////////////////////////////////////
if(global.SYS_HMAC){exports.hmac = global.SYS_HMAC;delete global.SYS_HMAC;} ////////////////////////////////////////////////////////////////////////////////
/// @brief pbkdf2-hmac
////////////////////////////////////////////////////////////////////////////////
if(global.SYS_PBKDF2){exports.pbkdf2 = global.SYS_PBKDF2;delete global.SYS_PBKDF2;} ////////////////////////////////////////////////////////////////////////////////
/// @brief createNonce
////////////////////////////////////////////////////////////////////////////////
if(global.SYS_CREATE_NONCE){exports.createNonce = global.SYS_CREATE_NONCE;delete global.SYS_CREATE_NONCE;} ////////////////////////////////////////////////////////////////////////////////
/// @brief checkAndMarkNonce
////////////////////////////////////////////////////////////////////////////////
if(global.SYS_CHECK_AND_MARK_NONCE){exports.checkAndMarkNonce = global.SYS_CHECK_AND_MARK_NONCE;delete global.SYS_CHECK_AND_MARK_NONCE;} ////////////////////////////////////////////////////////////////////////////////
/// @brief output
////////////////////////////////////////////////////////////////////////////////
if(global.SYS_OUTPUT){exports.stdOutput = global.SYS_OUTPUT;exports.output = exports.stdOutput;delete global.SYS_OUTPUT;} ////////////////////////////////////////////////////////////////////////////////
/// @brief parse
////////////////////////////////////////////////////////////////////////////////
if(global.SYS_PARSE){exports.parse = global.SYS_PARSE;delete global.SYS_PARSE;} ////////////////////////////////////////////////////////////////////////////////
/// @brief parseFile
////////////////////////////////////////////////////////////////////////////////
if(global.SYS_PARSE_FILE){exports.parseFile = global.SYS_PARSE_FILE;delete global.SYS_PARSE_FILE;} ////////////////////////////////////////////////////////////////////////////////
/// @brief processStatistics
////////////////////////////////////////////////////////////////////////////////
if(global.SYS_PROCESS_STATISTICS){exports.processStatistics = global.SYS_PROCESS_STATISTICS;delete global.SYS_PROCESS_STATISTICS;} ////////////////////////////////////////////////////////////////////////////////
/// @brief rand
////////////////////////////////////////////////////////////////////////////////
if(global.SYS_RAND){exports.rand = global.SYS_RAND;delete global.SYS_RAND;} ////////////////////////////////////////////////////////////////////////////////
/// @brief sha512
////////////////////////////////////////////////////////////////////////////////
if(global.SYS_SHA512){exports.sha512 = global.SYS_SHA512;delete global.SYS_SHA512;} ////////////////////////////////////////////////////////////////////////////////
/// @brief sha384
////////////////////////////////////////////////////////////////////////////////
if(global.SYS_SHA384){exports.sha384 = global.SYS_SHA384;delete global.SYS_SHA384;} ////////////////////////////////////////////////////////////////////////////////
/// @brief sha256
////////////////////////////////////////////////////////////////////////////////
if(global.SYS_SHA256){exports.sha256 = global.SYS_SHA256;delete global.SYS_SHA256;} ////////////////////////////////////////////////////////////////////////////////
/// @brief sha224
////////////////////////////////////////////////////////////////////////////////
if(global.SYS_SHA224){exports.sha224 = global.SYS_SHA224;delete global.SYS_SHA224;} ////////////////////////////////////////////////////////////////////////////////
/// @brief sha1
////////////////////////////////////////////////////////////////////////////////
if(global.SYS_SHA1){exports.sha1 = global.SYS_SHA1;delete global.SYS_SHA1;} ////////////////////////////////////////////////////////////////////////////////
/// @brief serverStatistics
////////////////////////////////////////////////////////////////////////////////
if(global.SYS_SERVER_STATISTICS){exports.serverStatistics = global.SYS_SERVER_STATISTICS;delete global.SYS_SERVER_STATISTICS;} ////////////////////////////////////////////////////////////////////////////////
/// @brief sleep
////////////////////////////////////////////////////////////////////////////////
if(global.SYS_SLEEP){exports.sleep = global.SYS_SLEEP;delete global.SYS_SLEEP;} ////////////////////////////////////////////////////////////////////////////////
/// @brief time
////////////////////////////////////////////////////////////////////////////////
if(global.SYS_TIME){exports.time = global.SYS_TIME;delete global.SYS_TIME;} ////////////////////////////////////////////////////////////////////////////////
/// @brief wait
////////////////////////////////////////////////////////////////////////////////
if(global.SYS_WAIT){exports.wait = global.SYS_WAIT;delete global.SYS_WAIT;} ////////////////////////////////////////////////////////////////////////////////
/// @brief importCsvFile
////////////////////////////////////////////////////////////////////////////////
if(global.SYS_IMPORT_CSV_FILE){exports.importCsvFile = global.SYS_IMPORT_CSV_FILE;delete global.SYS_IMPORT_CSV_FILE;} ////////////////////////////////////////////////////////////////////////////////
/// @brief importJsonFile
////////////////////////////////////////////////////////////////////////////////
if(global.SYS_IMPORT_JSON_FILE){exports.importJsonFile = global.SYS_IMPORT_JSON_FILE;delete global.SYS_IMPORT_JSON_FILE;} ////////////////////////////////////////////////////////////////////////////////
/// @brief processCsvFile
////////////////////////////////////////////////////////////////////////////////
if(global.SYS_PROCESS_CSV_FILE){exports.processCsvFile = global.SYS_PROCESS_CSV_FILE;delete global.SYS_PROCESS_CSV_FILE;} ////////////////////////////////////////////////////////////////////////////////
/// @brief processJsonFile
////////////////////////////////////////////////////////////////////////////////
if(global.SYS_PROCESS_JSON_FILE){exports.processJsonFile = global.SYS_PROCESS_JSON_FILE;delete global.SYS_PROCESS_JSON_FILE;} ////////////////////////////////////////////////////////////////////////////////
/// @brief clientStatistics
////////////////////////////////////////////////////////////////////////////////
if(global.SYS_CLIENT_STATISTICS){exports.clientStatistics = global.SYS_CLIENT_STATISTICS;delete global.SYS_CLIENT_STATISTICS;} ////////////////////////////////////////////////////////////////////////////////
/// @brief httpStatistics
////////////////////////////////////////////////////////////////////////////////
if(global.SYS_HTTP_STATISTICS){exports.httpStatistics = global.SYS_HTTP_STATISTICS;delete global.SYS_HTTP_STATISTICS;} ////////////////////////////////////////////////////////////////////////////////
/// @brief executeExternal
////////////////////////////////////////////////////////////////////////////////
if(global.SYS_EXECUTE_EXTERNAL){exports.executeExternal = global.SYS_EXECUTE_EXTERNAL;delete global.SYS_EXECUTE_EXTERNAL;} ////////////////////////////////////////////////////////////////////////////////
/// @brief executeExternalAndWait - instantly waits for the exit, returns
/// joint result.
////////////////////////////////////////////////////////////////////////////////
if(global.SYS_EXECUTE_EXTERNAL_AND_WAIT){exports.executeExternalAndWait = global.SYS_EXECUTE_EXTERNAL_AND_WAIT;delete global.SYS_EXECUTE_EXTERNAL_AND_WAIT;} ////////////////////////////////////////////////////////////////////////////////
/// @brief killExternal
////////////////////////////////////////////////////////////////////////////////
if(global.SYS_KILL_EXTERNAL){exports.killExternal = global.SYS_KILL_EXTERNAL;delete global.SYS_KILL_EXTERNAL;} ////////////////////////////////////////////////////////////////////////////////
/// @brief statusExternal
////////////////////////////////////////////////////////////////////////////////
if(global.SYS_STATUS_EXTERNAL){exports.statusExternal = global.SYS_STATUS_EXTERNAL;delete global.SYS_STATUS_EXTERNAL;} ////////////////////////////////////////////////////////////////////////////////
/// @brief registerTask
////////////////////////////////////////////////////////////////////////////////
if(global.SYS_REGISTER_TASK){exports.registerTask = global.SYS_REGISTER_TASK;delete global.SYS_REGISTER_TASK;} ////////////////////////////////////////////////////////////////////////////////
/// @brief unregisterTask
////////////////////////////////////////////////////////////////////////////////
if(global.SYS_UNREGISTER_TASK){exports.unregisterTask = global.SYS_UNREGISTER_TASK;delete global.SYS_UNREGISTER_TASK;} ////////////////////////////////////////////////////////////////////////////////
/// @brief getTasks
////////////////////////////////////////////////////////////////////////////////
if(global.SYS_GET_TASK){exports.getTask = global.SYS_GET_TASK;delete global.SYS_GET_TASK;} ////////////////////////////////////////////////////////////////////////////////
/// @brief testPort
////////////////////////////////////////////////////////////////////////////////
if(global.SYS_TEST_PORT){exports.testPort = global.SYS_TEST_PORT;delete global.SYS_TEST_PORT;} ////////////////////////////////////////////////////////////////////////////////
/// @brief isIP
////////////////////////////////////////////////////////////////////////////////
if(global.SYS_IS_IP){exports.isIP = global.SYS_IS_IP;delete global.SYS_IS_IP;} ////////////////////////////////////////////////////////////////////////////////
/// @brief unitTests
////////////////////////////////////////////////////////////////////////////////
exports.unitTests = function(){return global.SYS_UNIT_TESTS;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief setUnitTestsResult
////////////////////////////////////////////////////////////////////////////////
exports.setUnitTestsResult = function(value){global.SYS_UNIT_TESTS_RESULT = value;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief structured to flat commandline arguments
/// @param longOptsEqual whether long-options are in the type --opt=value
///                      or --opt value
////////////////////////////////////////////////////////////////////////////////
exports.toArgv = function(structure,longOptsEqual){if(typeof longOptsEqual === 'undefined'){longOptsEqual = false;}var vec=[];for(var key in structure) {if(structure.hasOwnProperty(key)){if(key === 'commandSwitches'){var multivec='';for(var _i=0;_i < structure[key].length;_i++) {if(structure[key][_i].length > 1){vec.push(structure[key][_i]);}else {multivec += structure[key][_i];}}if(multivec.length > 0){vec.push(multivec);}}else if(key === 'flatCommands'){vec = vec.concat(structure[key]);}else {if(longOptsEqual){vec.push('--' + key + '=' + structure[key]);}else {vec.push('--' + key);if(structure[key] !== false){if(structure[key] !== true){vec.push(structure[key]);}else {vec.push('true');}}else {vec.push('false');}}}}}return vec;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief argv to structured
////////////////////////////////////////////////////////////////////////////////
exports.parseArgv = function(argv,startOffset){var i;function setOption(ret,option,value){if(option.indexOf(':') > 0){var n=option.indexOf(':');var topOption=option.slice(0,n);if(!ret.hasOwnProperty(topOption)){ret[topOption] = {};}setOption(ret[topOption],option.slice(n + 1,option.length),value);}else if(argv[i + 1] === 'true'){ret[option] = true;}else if(argv[i + 1] === 'false'){ret[option] = false;}else if(!isNaN(argv[i + 1])){ret[option] = parseInt(argv[i + 1]);}else {ret[option] = argv[i + 1];}}function setSwitch(ret,option){if(!ret.hasOwnProperty('commandSwitches')){ret.commandSwitches = [];}ret.commandSwitches.push(option);}function setSwitchVec(ret,option){for(var i=0;i < option.length;i++) {setSwitch(ret,option[i]);}}function setFlatCommand(ret,thisString){if(!ret.hasOwnProperty('flatCommands')){ret.flatCommands = [];}ret.flatCommands.push(thisString);}var inFlat=false;var ret={};for(i = startOffset;i < argv.length;i++) {var thisString=argv[i];if(!inFlat){if(thisString.length > 2 && thisString.slice(0,2) === '--'){var option=thisString.slice(2,thisString.length);if(argv.length > i && argv[i + 1].slice(0,1) !== '-'){setOption(ret,option,argv[i + 1]);i++;}else {setSwitch(ret,option);}}else if(thisString === '--'){inFlat = true;}else if(thisString.length > 1 && thisString.slice(0,1) === '-'){setSwitchVec(ret,thisString.slice(1,thisString.length));}else {setFlatCommand(ret,thisString);}}else {setFlatCommand(ret,thisString);}}return ret;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief COLORS
////////////////////////////////////////////////////////////////////////////////
exports.COLORS = {};if(global.COLORS){exports.COLORS = global.COLORS;delete global.COLORS;}else {['COLOR_RED','COLOR_BOLD_RED','COLOR_GREEN','COLOR_BOLD_GREEN','COLOR_BLUE','COLOR_BOLD_BLUE','COLOR_YELLOW','COLOR_BOLD_YELLOW','COLOR_WHITE','COLOR_BOLD_WHITE','COLOR_CYAN','COLOR_BOLD_CYAN','COLOR_MAGENTA','COLOR_BOLD_MAGENTA','COLOR_BLACK','COLOR_BOLD_BLACK','COLOR_BLINK','COLOR_BRIGHT','COLOR_RESET'].forEach(function(color){exports.COLORS[color] = '';});}exports.COLORS.COLOR_PUNCTUATION = exports.COLORS.COLOR_RESET;exports.COLORS.COLOR_STRING = exports.COLORS.COLOR_BRIGHT;exports.COLORS.COLOR_NUMBER = exports.COLORS.COLOR_BRIGHT;exports.COLORS.COLOR_INDEX = exports.COLORS.COLOR_BRIGHT;exports.COLORS.COLOR_TRUE = exports.COLORS.COLOR_BRIGHT;exports.COLORS.COLOR_FALSE = exports.COLORS.COLOR_BRIGHT;exports.COLORS.COLOR_NULL = exports.COLORS.COLOR_BRIGHT;exports.COLORS.COLOR_UNDEFINED = exports.COLORS.COLOR_BRIGHT; ////////////////////////////////////////////////////////////////////////////////
/// @brief quote cache
////////////////////////////////////////////////////////////////////////////////
var characterQuoteCache={'\b':'\\b', // ASCII 8, Backspace
'\t':'\\t', // ASCII 9, Tab
'\n':'\\n', // ASCII 10, Newline
'\f':'\\f', // ASCII 12, Formfeed
'\r':'\\r', // ASCII 13, Carriage Return
'\"':'\\"','\\':'\\\\'}; ////////////////////////////////////////////////////////////////////////////////
/// @brief colors
////////////////////////////////////////////////////////////////////////////////
var colors=exports.COLORS; ////////////////////////////////////////////////////////////////////////////////
/// @brief useColor
////////////////////////////////////////////////////////////////////////////////
var useColor=false;if(global.COLOR_OUTPUT){useColor = global.COLOR_OUTPUT;delete global.COLOR_OUTPUT;} ////////////////////////////////////////////////////////////////////////////////
/// @brief usePrettyPrint
////////////////////////////////////////////////////////////////////////////////
var usePrettyPrint=false;if(global.PRETTY_PRINT){usePrettyPrint = global.PRETTY_PRINT;delete global.PRETTY_PRINT;}var printRecursive; ////////////////////////////////////////////////////////////////////////////////
/// @brief quotes a single character
////////////////////////////////////////////////////////////////////////////////
function quoteSingleJsonCharacter(c){if(characterQuoteCache.hasOwnProperty(c)){return characterQuoteCache[c];}var charCode=c.charCodeAt(0);var result;if(charCode < 16){result = '\\u000';}else if(charCode < 256){result = '\\u00';}else if(charCode < 4096){result = '\\u0';}else {result = '\\u';}result += charCode.toString(16);characterQuoteCache[c] = result;return result;} ////////////////////////////////////////////////////////////////////////////////
/// @brief quotes a string character
////////////////////////////////////////////////////////////////////////////////
var quotable=/[\\\"\x00-\x1f]/g;function quoteJsonString(str){return '"' + str.replace(quotable,quoteSingleJsonCharacter) + '"';} ////////////////////////////////////////////////////////////////////////////////
/// @brief prints the ident for pretty printing
////////////////////////////////////////////////////////////////////////////////
function printIndent(context){var j;var indent='';if(context.prettyPrint){indent += '\n';for(j = 0;j < context.level;++j) {indent += '  ';}}context.output += indent;} ////////////////////////////////////////////////////////////////////////////////
/// @brief prints the JSON representation of an array
////////////////////////////////////////////////////////////////////////////////
function printArray(object,context){var useColor=context.useColor;if(object.length === 0){if(useColor){context.output += colors.COLOR_PUNCTUATION;}context.output += '[ ]';if(useColor){context.output += colors.COLOR_RESET;}}else {if(useColor){context.output += colors.COLOR_PUNCTUATION;}context.output += '[';if(useColor){context.output += colors.COLOR_RESET;}var newLevel=context.level + 1;var sep=' ';context.level = newLevel;for(var _i2=0;_i2 < object.length;_i2++) {if(useColor){context.output += colors.COLOR_PUNCTUATION;}context.output += sep;if(useColor){context.output += colors.COLOR_RESET;}printIndent(context);var path=context.path;context.path += '[' + _i2 + ']';printRecursive(object[_i2],context);if(context.emit && context.output.length >= context.emit){exports.output(context.output);context.output = '';}context.path = path;sep = ', ';}context.level = newLevel - 1;context.output += ' ';printIndent(context);if(useColor){context.output += colors.COLOR_PUNCTUATION;}context.output += ']';if(useColor){context.output += colors.COLOR_RESET;}}} ////////////////////////////////////////////////////////////////////////////////
/// @brief prints an object
////////////////////////////////////////////////////////////////////////////////
function printObject(object,context){var useColor=context.useColor;var sep=' ';if(useColor){context.output += colors.COLOR_PUNCTUATION;}context.output += '{';if(useColor){context.output += colors.COLOR_RESET;}var newLevel=context.level + 1;context.level = newLevel;var keys;try{keys = Object.keys(object);}catch(err) { // ES6 proxy objects don't support key enumeration
keys = [];}for(var _i3=0,n=keys.length;_i3 < n;++_i3) {var k=keys[_i3];var val=object[k];if(useColor){context.output += colors.COLOR_PUNCTUATION;}context.output += sep;if(useColor){context.output += colors.COLOR_RESET;}printIndent(context);if(useColor){context.output += colors.COLOR_INDEX;}context.output += quoteJsonString(k);if(useColor){context.output += colors.COLOR_RESET;}context.output += ' : ';var path=context.path;context.path += '[' + k + ']';printRecursive(val,context);context.path = path;sep = ', ';if(context.emit && context.output.length >= context.emit){exports.output(context.output);context.output = '';}}context.level = newLevel - 1;context.output += ' ';printIndent(context);if(useColor){context.output += colors.COLOR_PUNCTUATION;}context.output += '}';if(useColor){context.output += colors.COLOR_RESET;}} ////////////////////////////////////////////////////////////////////////////////
/// @brief prints objects to standard output without a new-line
////////////////////////////////////////////////////////////////////////////////
var funcRE=/function ([^\(]*)?\(\) \{ \[native code\] \}/;var func2RE=/function ([^\(]*)?\((.*)\) \{/;exports.printRecursive = printRecursive = function(value,context){var useColor=context.useColor;var customInspect=context.customInspect;var useToString=context.useToString;var limitString=context.limitString;var showFunction=context.showFunction;if(typeof context.seen === 'undefined'){context.seen = [];context.names = [];}var p=context.seen.indexOf(value);if(p >= 0){context.output += context.names[p];}else {if(value && (value instanceof Object || typeof value === 'object' && Object.getPrototypeOf(value) === null)){context.seen.push(value);context.names.push(context.path);if(customInspect && typeof value._PRINT === 'function'){value._PRINT(context);if(context.emit && context.output.length >= context.emit){exports.output(context.output);context.output = '';}}else if(value instanceof Array){printArray(value,context);}else if(value.toString === Object.prototype.toString || typeof value === 'object' && Object.getPrototypeOf(value) === null){var handled=false;try{if(value instanceof Set || value instanceof Map || value instanceof WeakSet || value instanceof WeakMap || typeof value[Symbol.iterator] === 'function'){ // ES6 iterators
context.output += value.toString();handled = true;}}catch(err) { // ignore any errors thrown above, and simply fall back to normal printing
}if(!handled){ // all other objects
printObject(value,context);}if(context.emit && context.output.length >= context.emit){exports.output(context.output);context.output = '';}}else if(typeof value === 'function'){ // it's possible that toString() throws, and this looks quite ugly
try{var s=value.toString();if(context.level > 0 && !showFunction){var a=s.split('\n');var f=a[0];var m=funcRE.exec(f);if(m !== null){if(m[1] === undefined){context.output += 'function { [native code] }';}else {context.output += 'function ' + m[1] + ' { [native code] }';}}else {m = func2RE.exec(f);if(m !== null){if(m[1] === undefined){context.output += 'function ' + '(' + m[2] + ') { ... }';}else {context.output += 'function ' + m[1] + ' (' + m[2] + ') { ... }';}}else {f = f.substr(8,f.length - 10).trim();context.output += '[Function "' + f + '" ...]';}}}else {context.output += s;}}catch(e1) {exports.stdOutput(String(e1));context.output += '[Function]';}}else if(useToString && typeof value.toString === 'function'){try{context.output += value.toString();}catch(e2) {context.output += '[Object ';printObject(value,context);context.output += ']';}}else {context.output += '[Object ';printObject(value,context);context.output += ']';}}else if(value === undefined){if(useColor){context.output += colors.COLOR_UNDEFINED;}context.output += 'undefined';if(useColor){context.output += colors.COLOR_RESET;}}else if(typeof value === 'string'){if(useColor){context.output += colors.COLOR_STRING;}if(limitString){if(limitString < value.length){value = value.substr(0,limitString) + '...';}}context.output += quoteJsonString(value);if(useColor){context.output += colors.COLOR_RESET;}}else if(typeof value === 'boolean'){if(useColor){context.output += value?colors.COLOR_TRUE:colors.COLOR_FALSE;}context.output += String(value);if(useColor){context.output += colors.COLOR_RESET;}}else if(typeof value === 'number'){if(useColor){context.output += colors.COLOR_NUMBER;}context.output += String(value);if(useColor){context.output += colors.COLOR_RESET;}}else if(value === null){if(useColor){context.output += colors.COLOR_NULL;}context.output += String(value);if(useColor){context.output += colors.COLOR_RESET;}} /* jshint notypeof: true */else if(typeof value === 'symbol'){ /* jshint notypeof: false */ // handle ES6 symbols
if(useColor){context.output += colors.COLOR_NULL;}context.output += value.toString();if(useColor){context.output += colors.COLOR_RESET;}}else {context.output += String(value);}}}; ////////////////////////////////////////////////////////////////////////////////
/// @brief buffers output instead of printing it
////////////////////////////////////////////////////////////////////////////////
function bufferOutput(){for(var _i4=0;_i4 < arguments.length;++_i4) {var value=arguments[_i4];var text;if(value === null){text = 'null';}else if(value === undefined){text = 'undefined';}else if(typeof value === 'object'){try{text = JSON.stringify(value);}catch(err) {text = String(value);}}else {text = String(value);}exports.outputBuffer += text;}} ////////////////////////////////////////////////////////////////////////////////
/// @brief prints all arguments
///
/// @FUN{exports.printShell(@FA{arg1}, @FA{arg2}, @FA{arg3}, ...)}
///
/// Only available in shell mode.
///
/// Prints the arguments. If an argument is an object having a function
/// @FN{_PRINT}, then this function is called. A final newline is printed.
////////////////////////////////////////////////////////////////////////////////
function printShell(){var output=exports.output;for(var _i5=0;_i5 < arguments.length;++_i5) {if(_i5 > 0){output(' ');}if(typeof arguments[_i5] === 'string'){output(arguments[_i5]);}else {var context={customInspect:true,emit:16384,level:0,limitString:printShell.limitString,names:[],output:'',path:'~',prettyPrint:usePrettyPrint,seen:[],showFunction:false,useColor:useColor,useToString:true};printRecursive(arguments[_i5],context);output(context.output);}}output('\n');}printShell.limitString = 80; ////////////////////////////////////////////////////////////////////////////////
/// @brief flatten
////////////////////////////////////////////////////////////////////////////////
var hasOwnProperty=Function.prototype.call.bind(Object.prototype.hasOwnProperty);exports.flatten = function(obj,seen){if(!obj || typeof obj !== 'object' && typeof obj !== 'function'){return obj;}if(obj instanceof Date){return obj.toJSON();}if(!seen){seen = [];}var result=Object.create(null),src=obj,keys,key,val;if(typeof obj === 'function'){result.__exec = String(obj);}while(src) {if(seen.indexOf(src) !== -1 || obj.constructor && src === obj.constructor.prototype){break;}seen.push(src);keys = Object.getOwnPropertyNames(src);for(var _i6=0;_i6 < keys.length;_i6++) {key = keys[_i6];if(typeof src !== 'function' || key !== 'arguments' && key !== 'caller' && key !== 'callee'){if(key.charAt(0) !== '_' && !hasOwnProperty(result,key)){val = obj[key];if(seen.indexOf(val) !== -1 && (typeof val === 'object' || typeof val === 'function')){result[key] = '[Circular]';}else {result[key] = exports.flatten(val,seen);}}}}src = Object.getPrototypeOf(src);}if(obj.constructor && obj.constructor.name){if(obj instanceof Error && obj.name === Error.name){result.name = obj.constructor.name;}else if(!hasOwnProperty(result,'constructor')){result.constructor = {name:obj.constructor.name};}}return result;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief inspect
////////////////////////////////////////////////////////////////////////////////
exports.inspect = function(object,options){var context={customInspect:options && options.customInspect,emit:false,level:0,limitString:false,names:[],output:'',prettyPrint:true,path:'~',seen:[],showFunction:true,useColor:false,useToString:false};if(options && options.hasOwnProperty('prettyPrint')){context.prettyPrint = options.prettyPrint;}printRecursive(object,context);return context.output;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief sprintf
////////////////////////////////////////////////////////////////////////////////
if(global.SYS_SPRINTF){exports.sprintf = global.SYS_SPRINTF;delete global.SYS_SPRINTF;} ////////////////////////////////////////////////////////////////////////////////
/// @brief printf
////////////////////////////////////////////////////////////////////////////////
var sprintf=exports.sprintf;exports.printf = function(){exports.output(sprintf.apply(sprintf,arguments));}; ////////////////////////////////////////////////////////////////////////////////
/// @brief print
////////////////////////////////////////////////////////////////////////////////
exports.print = exports.printShell = printShell; ////////////////////////////////////////////////////////////////////////////////
/// @brief printObject
////////////////////////////////////////////////////////////////////////////////
exports.printObject = printObject;exports.isCaptureMode = function(){return exports.output === bufferOutput;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief startCaptureMode
////////////////////////////////////////////////////////////////////////////////
exports.startCaptureMode = function(){var old=exports.output;exports.outputBuffer = '';exports.output = bufferOutput;return old;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief stopCaptureMode
////////////////////////////////////////////////////////////////////////////////
exports.stopCaptureMode = function(old){var buffer=exports.outputBuffer;exports.outputBuffer = '';if(old !== undefined){exports.output = old;}else {exports.output = exports.stdOutput;}return buffer;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief startPager
////////////////////////////////////////////////////////////////////////////////
exports.startPager = function(){};if(global.SYS_START_PAGER){exports.startPager = global.SYS_START_PAGER;delete global.SYS_START_PAGER;} ////////////////////////////////////////////////////////////////////////////////
/// @brief stopPager
////////////////////////////////////////////////////////////////////////////////
exports.stopPager = function(){};if(global.SYS_STOP_PAGER){exports.stopPager = global.SYS_STOP_PAGER;delete global.SYS_STOP_PAGER;} ////////////////////////////////////////////////////////////////////////////////
/// @brief startPrettyPrint
////////////////////////////////////////////////////////////////////////////////
exports.startPrettyPrint = function(silent){if(!usePrettyPrint && !silent){exports.print('using pretty printing');}usePrettyPrint = true;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief stopPrettyPrint
////////////////////////////////////////////////////////////////////////////////
exports.stopPrettyPrint = function(silent){if(usePrettyPrint && !silent){exports.print('disabled pretty printing');}usePrettyPrint = false;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief startColorPrint
////////////////////////////////////////////////////////////////////////////////
exports.startColorPrint = function(color,silent){var schemes={arangodb:{COLOR_PUNCTUATION:exports.COLORS.COLOR_RESET,COLOR_STRING:exports.COLORS.COLOR_BOLD_MAGENTA,COLOR_NUMBER:exports.COLORS.COLOR_BOLD_GREEN,COLOR_INDEX:exports.COLORS.COLOR_BOLD_CYAN,COLOR_TRUE:exports.COLORS.COLOR_BOLD_MAGENTA,COLOR_FALSE:exports.COLORS.COLOR_BOLD_MAGENTA,COLOR_NULL:exports.COLORS.COLOR_BOLD_YELLOW,COLOR_UNDEFINED:exports.COLORS.COLOR_BOLD_YELLOW}};if(!useColor && !silent){exports.print('starting color printing');}if(color === undefined || color === null){color = null;}else if(typeof color === 'string'){color = color.toLowerCase();var c;if(schemes.hasOwnProperty(color)){colors = schemes[color];for(c in exports.COLORS) {if(exports.COLORS.hasOwnProperty(c) && !colors.hasOwnProperty(c)){colors[c] = exports.COLORS[c];}}}else {colors = exports.COLORS;var setColor=function setColor(key){['COLOR_STRING','COLOR_NUMBER','COLOR_INDEX','COLOR_TRUE','COLOR_FALSE','COLOR_NULL','COLOR_UNDEFINED'].forEach(function(what){colors[what] = exports.COLORS[key];});};for(c in exports.COLORS) {if(exports.COLORS.hasOwnProperty(c) && c.replace(/^COLOR_/,'').toLowerCase() === color){setColor(c);break;}}}}useColor = true;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief stopColorPrint
////////////////////////////////////////////////////////////////////////////////
exports.stopColorPrint = function(silent){if(useColor && !silent){exports.print('disabled color printing');}useColor = false;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief env
////////////////////////////////////////////////////////////////////////////////
if(typeof ENV !== 'undefined'){exports.env = new global.ENV();delete global.ENV;} ////////////////////////////////////////////////////////////////////////////////
/// @brief options
////////////////////////////////////////////////////////////////////////////////
if(typeof SYS_OPTIONS !== 'undefined'){exports.options = global.SYS_OPTIONS;delete global.SYS_OPTIONS;} ////////////////////////////////////////////////////////////////////////////////
/// @brief print
////////////////////////////////////////////////////////////////////////////////
global.print = exports.print; ////////////////////////////////////////////////////////////////////////////////
/// @brief printf
////////////////////////////////////////////////////////////////////////////////
global.printf = function printf(){var internal=require('internal');internal.printf.apply(internal.printf,arguments);}; ////////////////////////////////////////////////////////////////////////////////
/// @brief print_plain
////////////////////////////////////////////////////////////////////////////////
global.print_plain = function print_plain(){var output=require('internal').output;var printRecursive=require('internal').printRecursive;for(var _i7=0;_i7 < arguments.length;++_i7) {if(_i7 > 0){output(' ');}if(typeof arguments[_i7] === 'string'){output(arguments[_i7]);}else {var context={names:[],seen:[],path:'~',level:0,output:'',prettyPrint:false,useColor:false,customInspect:true};printRecursive(arguments[_i7],context);output(context.output);}}output('\n');}; ////////////////////////////////////////////////////////////////////////////////
/// @brief start_pretty_print
////////////////////////////////////////////////////////////////////////////////
global.start_pretty_print = function start_pretty_print(){require('internal').startPrettyPrint();}; ////////////////////////////////////////////////////////////////////////////////
/// @brief stop_pretty_print
////////////////////////////////////////////////////////////////////////////////
global.stop_pretty_print = function stop_pretty_print(){require('internal').stopPrettyPrint();}; ////////////////////////////////////////////////////////////////////////////////
/// @brief start_color_print
////////////////////////////////////////////////////////////////////////////////
global.start_color_print = function start_color_print(color){require('internal').startColorPrint(color,false);}; ////////////////////////////////////////////////////////////////////////////////
/// @brief stop_color_print
////////////////////////////////////////////////////////////////////////////////
global.stop_color_print = function stop_color_print(){require('internal').stopColorPrint();};if(global.EXPORTS_SLOW_BUFFER){Object.keys(global.EXPORTS_SLOW_BUFFER).forEach(function(key){exports[key] = global.EXPORTS_SLOW_BUFFER[key];});delete global.EXPORTS_SLOW_BUFFER;}if(global.APP_PATH){exports.appPath = global.APP_PATH;delete global.APP_PATH;}return exports;})()); /*jshint maxlen: 240 */ /*global require */ ////////////////////////////////////////////////////////////////////////////////
/// @brief auto-generated file generated from errors.dat
////////////////////////////////////////////////////////////////////////////////
(function(){"use strict";var internal=require("internal");internal.errors = {"ERROR_NO_ERROR":{"code":0,"message":"no error"},"ERROR_FAILED":{"code":1,"message":"failed"},"ERROR_SYS_ERROR":{"code":2,"message":"system error"},"ERROR_OUT_OF_MEMORY":{"code":3,"message":"out of memory"},"ERROR_INTERNAL":{"code":4,"message":"internal error"},"ERROR_ILLEGAL_NUMBER":{"code":5,"message":"illegal number"},"ERROR_NUMERIC_OVERFLOW":{"code":6,"message":"numeric overflow"},"ERROR_ILLEGAL_OPTION":{"code":7,"message":"illegal option"},"ERROR_DEAD_PID":{"code":8,"message":"dead process identifier"},"ERROR_NOT_IMPLEMENTED":{"code":9,"message":"not implemented"},"ERROR_BAD_PARAMETER":{"code":10,"message":"bad parameter"},"ERROR_FORBIDDEN":{"code":11,"message":"forbidden"},"ERROR_OUT_OF_MEMORY_MMAP":{"code":12,"message":"out of memory in mmap"},"ERROR_CORRUPTED_CSV":{"code":13,"message":"csv is corrupt"},"ERROR_FILE_NOT_FOUND":{"code":14,"message":"file not found"},"ERROR_CANNOT_WRITE_FILE":{"code":15,"message":"cannot write file"},"ERROR_CANNOT_OVERWRITE_FILE":{"code":16,"message":"cannot overwrite file"},"ERROR_TYPE_ERROR":{"code":17,"message":"type error"},"ERROR_LOCK_TIMEOUT":{"code":18,"message":"lock timeout"},"ERROR_CANNOT_CREATE_DIRECTORY":{"code":19,"message":"cannot create directory"},"ERROR_CANNOT_CREATE_TEMP_FILE":{"code":20,"message":"cannot create temporary file"},"ERROR_REQUEST_CANCELED":{"code":21,"message":"canceled request"},"ERROR_DEBUG":{"code":22,"message":"intentional debug error"},"ERROR_AID_NOT_FOUND":{"code":23,"message":"internal error with attribute ID in shaper"},"ERROR_LEGEND_INCOMPLETE":{"code":24,"message":"internal error if a legend could not be created"},"ERROR_IP_ADDRESS_INVALID":{"code":25,"message":"IP address is invalid"},"ERROR_LEGEND_NOT_IN_WAL_FILE":{"code":26,"message":"internal error if a legend for a marker does not yet exist in the same WAL file"},"ERROR_FILE_EXISTS":{"code":27,"message":"file exists"},"ERROR_LOCKED":{"code":28,"message":"locked"},"ERROR_DEADLOCK":{"code":29,"message":"deadlock detected"},"ERROR_HTTP_BAD_PARAMETER":{"code":400,"message":"bad parameter"},"ERROR_HTTP_UNAUTHORIZED":{"code":401,"message":"unauthorized"},"ERROR_HTTP_FORBIDDEN":{"code":403,"message":"forbidden"},"ERROR_HTTP_NOT_FOUND":{"code":404,"message":"not found"},"ERROR_HTTP_METHOD_NOT_ALLOWED":{"code":405,"message":"method not supported"},"ERROR_HTTP_PRECONDITION_FAILED":{"code":412,"message":"precondition failed"},"ERROR_HTTP_SERVER_ERROR":{"code":500,"message":"internal server error"},"ERROR_HTTP_CORRUPTED_JSON":{"code":600,"message":"invalid JSON object"},"ERROR_HTTP_SUPERFLUOUS_SUFFICES":{"code":601,"message":"superfluous URL suffices"},"ERROR_ARANGO_ILLEGAL_STATE":{"code":1000,"message":"illegal state"},"ERROR_ARANGO_SHAPER_FAILED":{"code":1001,"message":"could not shape document"},"ERROR_ARANGO_DATAFILE_SEALED":{"code":1002,"message":"datafile sealed"},"ERROR_ARANGO_UNKNOWN_COLLECTION_TYPE":{"code":1003,"message":"unknown type"},"ERROR_ARANGO_READ_ONLY":{"code":1004,"message":"read only"},"ERROR_ARANGO_DUPLICATE_IDENTIFIER":{"code":1005,"message":"duplicate identifier"},"ERROR_ARANGO_DATAFILE_UNREADABLE":{"code":1006,"message":"datafile unreadable"},"ERROR_ARANGO_DATAFILE_EMPTY":{"code":1007,"message":"datafile empty"},"ERROR_ARANGO_RECOVERY":{"code":1008,"message":"logfile recovery error"},"ERROR_ARANGO_CORRUPTED_DATAFILE":{"code":1100,"message":"corrupted datafile"},"ERROR_ARANGO_ILLEGAL_PARAMETER_FILE":{"code":1101,"message":"illegal or unreadable parameter file"},"ERROR_ARANGO_CORRUPTED_COLLECTION":{"code":1102,"message":"corrupted collection"},"ERROR_ARANGO_MMAP_FAILED":{"code":1103,"message":"mmap failed"},"ERROR_ARANGO_FILESYSTEM_FULL":{"code":1104,"message":"filesystem full"},"ERROR_ARANGO_NO_JOURNAL":{"code":1105,"message":"no journal"},"ERROR_ARANGO_DATAFILE_ALREADY_EXISTS":{"code":1106,"message":"cannot create/rename datafile because it already exists"},"ERROR_ARANGO_DATADIR_LOCKED":{"code":1107,"message":"database directory is locked"},"ERROR_ARANGO_COLLECTION_DIRECTORY_ALREADY_EXISTS":{"code":1108,"message":"cannot create/rename collection because directory already exists"},"ERROR_ARANGO_MSYNC_FAILED":{"code":1109,"message":"msync failed"},"ERROR_ARANGO_DATADIR_UNLOCKABLE":{"code":1110,"message":"cannot lock database directory"},"ERROR_ARANGO_SYNC_TIMEOUT":{"code":1111,"message":"sync timeout"},"ERROR_ARANGO_CONFLICT":{"code":1200,"message":"conflict"},"ERROR_ARANGO_DATADIR_INVALID":{"code":1201,"message":"invalid database directory"},"ERROR_ARANGO_DOCUMENT_NOT_FOUND":{"code":1202,"message":"document not found"},"ERROR_ARANGO_COLLECTION_NOT_FOUND":{"code":1203,"message":"collection not found"},"ERROR_ARANGO_COLLECTION_PARAMETER_MISSING":{"code":1204,"message":"parameter 'collection' not found"},"ERROR_ARANGO_DOCUMENT_HANDLE_BAD":{"code":1205,"message":"illegal document handle"},"ERROR_ARANGO_MAXIMAL_SIZE_TOO_SMALL":{"code":1206,"message":"maximal size of journal too small"},"ERROR_ARANGO_DUPLICATE_NAME":{"code":1207,"message":"duplicate name"},"ERROR_ARANGO_ILLEGAL_NAME":{"code":1208,"message":"illegal name"},"ERROR_ARANGO_NO_INDEX":{"code":1209,"message":"no suitable index known"},"ERROR_ARANGO_UNIQUE_CONSTRAINT_VIOLATED":{"code":1210,"message":"unique constraint violated"},"ERROR_ARANGO_INDEX_NOT_FOUND":{"code":1212,"message":"index not found"},"ERROR_ARANGO_CROSS_COLLECTION_REQUEST":{"code":1213,"message":"cross collection request not allowed"},"ERROR_ARANGO_INDEX_HANDLE_BAD":{"code":1214,"message":"illegal index handle"},"ERROR_ARANGO_CAP_CONSTRAINT_ALREADY_DEFINED":{"code":1215,"message":"cap constraint already defined"},"ERROR_ARANGO_DOCUMENT_TOO_LARGE":{"code":1216,"message":"document too large"},"ERROR_ARANGO_COLLECTION_NOT_UNLOADED":{"code":1217,"message":"collection must be unloaded"},"ERROR_ARANGO_COLLECTION_TYPE_INVALID":{"code":1218,"message":"collection type invalid"},"ERROR_ARANGO_VALIDATION_FAILED":{"code":1219,"message":"validator failed"},"ERROR_ARANGO_ATTRIBUTE_PARSER_FAILED":{"code":1220,"message":"parsing attribute name definition failed"},"ERROR_ARANGO_DOCUMENT_KEY_BAD":{"code":1221,"message":"illegal document key"},"ERROR_ARANGO_DOCUMENT_KEY_UNEXPECTED":{"code":1222,"message":"unexpected document key"},"ERROR_ARANGO_DATADIR_NOT_WRITABLE":{"code":1224,"message":"server database directory not writable"},"ERROR_ARANGO_OUT_OF_KEYS":{"code":1225,"message":"out of keys"},"ERROR_ARANGO_DOCUMENT_KEY_MISSING":{"code":1226,"message":"missing document key"},"ERROR_ARANGO_DOCUMENT_TYPE_INVALID":{"code":1227,"message":"invalid document type"},"ERROR_ARANGO_DATABASE_NOT_FOUND":{"code":1228,"message":"database not found"},"ERROR_ARANGO_DATABASE_NAME_INVALID":{"code":1229,"message":"database name invalid"},"ERROR_ARANGO_USE_SYSTEM_DATABASE":{"code":1230,"message":"operation only allowed in system database"},"ERROR_ARANGO_ENDPOINT_NOT_FOUND":{"code":1231,"message":"endpoint not found"},"ERROR_ARANGO_INVALID_KEY_GENERATOR":{"code":1232,"message":"invalid key generator"},"ERROR_ARANGO_INVALID_EDGE_ATTRIBUTE":{"code":1233,"message":"edge attribute missing"},"ERROR_ARANGO_INDEX_DOCUMENT_ATTRIBUTE_MISSING":{"code":1234,"message":"index insertion warning - attribute missing in document"},"ERROR_ARANGO_INDEX_CREATION_FAILED":{"code":1235,"message":"index creation failed"},"ERROR_ARANGO_WRITE_THROTTLE_TIMEOUT":{"code":1236,"message":"write-throttling timeout"},"ERROR_ARANGO_COLLECTION_TYPE_MISMATCH":{"code":1237,"message":"collection type mismatch"},"ERROR_ARANGO_COLLECTION_NOT_LOADED":{"code":1238,"message":"collection not loaded"},"ERROR_ARANGO_DATAFILE_FULL":{"code":1300,"message":"datafile full"},"ERROR_ARANGO_EMPTY_DATADIR":{"code":1301,"message":"server database directory is empty"},"ERROR_REPLICATION_NO_RESPONSE":{"code":1400,"message":"no response"},"ERROR_REPLICATION_INVALID_RESPONSE":{"code":1401,"message":"invalid response"},"ERROR_REPLICATION_MASTER_ERROR":{"code":1402,"message":"master error"},"ERROR_REPLICATION_MASTER_INCOMPATIBLE":{"code":1403,"message":"master incompatible"},"ERROR_REPLICATION_MASTER_CHANGE":{"code":1404,"message":"master change"},"ERROR_REPLICATION_LOOP":{"code":1405,"message":"loop detected"},"ERROR_REPLICATION_UNEXPECTED_MARKER":{"code":1406,"message":"unexpected marker"},"ERROR_REPLICATION_INVALID_APPLIER_STATE":{"code":1407,"message":"invalid applier state"},"ERROR_REPLICATION_UNEXPECTED_TRANSACTION":{"code":1408,"message":"invalid transaction"},"ERROR_REPLICATION_INVALID_APPLIER_CONFIGURATION":{"code":1410,"message":"invalid replication applier configuration"},"ERROR_REPLICATION_RUNNING":{"code":1411,"message":"cannot perform operation while applier is running"},"ERROR_REPLICATION_APPLIER_STOPPED":{"code":1412,"message":"replication stopped"},"ERROR_REPLICATION_NO_START_TICK":{"code":1413,"message":"no start tick"},"ERROR_REPLICATION_START_TICK_NOT_PRESENT":{"code":1414,"message":"start tick not present"},"ERROR_CLUSTER_NO_AGENCY":{"code":1450,"message":"could not connect to agency"},"ERROR_CLUSTER_NO_COORDINATOR_HEADER":{"code":1451,"message":"missing coordinator header"},"ERROR_CLUSTER_COULD_NOT_LOCK_PLAN":{"code":1452,"message":"could not lock plan in agency"},"ERROR_CLUSTER_COLLECTION_ID_EXISTS":{"code":1453,"message":"collection ID already exists"},"ERROR_CLUSTER_COULD_NOT_CREATE_COLLECTION_IN_PLAN":{"code":1454,"message":"could not create collection in plan"},"ERROR_CLUSTER_COULD_NOT_READ_CURRENT_VERSION":{"code":1455,"message":"could not read version in current in agency"},"ERROR_CLUSTER_COULD_NOT_CREATE_COLLECTION":{"code":1456,"message":"could not create collection"},"ERROR_CLUSTER_TIMEOUT":{"code":1457,"message":"timeout in cluster operation"},"ERROR_CLUSTER_COULD_NOT_REMOVE_COLLECTION_IN_PLAN":{"code":1458,"message":"could not remove collection from plan"},"ERROR_CLUSTER_COULD_NOT_REMOVE_COLLECTION_IN_CURRENT":{"code":1459,"message":"could not remove collection from current"},"ERROR_CLUSTER_COULD_NOT_CREATE_DATABASE_IN_PLAN":{"code":1460,"message":"could not create database in plan"},"ERROR_CLUSTER_COULD_NOT_CREATE_DATABASE":{"code":1461,"message":"could not create database"},"ERROR_CLUSTER_COULD_NOT_REMOVE_DATABASE_IN_PLAN":{"code":1462,"message":"could not remove database from plan"},"ERROR_CLUSTER_COULD_NOT_REMOVE_DATABASE_IN_CURRENT":{"code":1463,"message":"could not remove database from current"},"ERROR_CLUSTER_SHARD_GONE":{"code":1464,"message":"no responsible shard found"},"ERROR_CLUSTER_CONNECTION_LOST":{"code":1465,"message":"cluster internal HTTP connection broken"},"ERROR_CLUSTER_MUST_NOT_SPECIFY_KEY":{"code":1466,"message":"must not specify _key for this collection"},"ERROR_CLUSTER_GOT_CONTRADICTING_ANSWERS":{"code":1467,"message":"got contradicting answers from different shards"},"ERROR_CLUSTER_NOT_ALL_SHARDING_ATTRIBUTES_GIVEN":{"code":1468,"message":"not all sharding attributes given"},"ERROR_CLUSTER_MUST_NOT_CHANGE_SHARDING_ATTRIBUTES":{"code":1469,"message":"must not change the value of a shard key attribute"},"ERROR_CLUSTER_UNSUPPORTED":{"code":1470,"message":"unsupported operation or parameter"},"ERROR_CLUSTER_ONLY_ON_COORDINATOR":{"code":1471,"message":"this operation is only valid on a coordinator in a cluster"},"ERROR_CLUSTER_READING_PLAN_AGENCY":{"code":1472,"message":"error reading Plan in agency"},"ERROR_CLUSTER_COULD_NOT_TRUNCATE_COLLECTION":{"code":1473,"message":"could not truncate collection"},"ERROR_CLUSTER_AQL_COMMUNICATION":{"code":1474,"message":"error in cluster internal communication for AQL"},"ERROR_ARANGO_DOCUMENT_NOT_FOUND_OR_SHARDING_ATTRIBUTES_CHANGED":{"code":1475,"message":"document not found or sharding attributes changed"},"ERROR_CLUSTER_COULD_NOT_DETERMINE_ID":{"code":1476,"message":"could not determine my ID from my local info"},"ERROR_CLUSTER_ONLY_ON_DBSERVER":{"code":1477,"message":"this operation is only valid on a DBserver in a cluster"},"ERROR_QUERY_KILLED":{"code":1500,"message":"query killed"},"ERROR_QUERY_PARSE":{"code":1501,"message":"%s"},"ERROR_QUERY_EMPTY":{"code":1502,"message":"query is empty"},"ERROR_QUERY_SCRIPT":{"code":1503,"message":"runtime error '%s'"},"ERROR_QUERY_NUMBER_OUT_OF_RANGE":{"code":1504,"message":"number out of range"},"ERROR_QUERY_VARIABLE_NAME_INVALID":{"code":1510,"message":"variable name '%s' has an invalid format"},"ERROR_QUERY_VARIABLE_REDECLARED":{"code":1511,"message":"variable '%s' is assigned multiple times"},"ERROR_QUERY_VARIABLE_NAME_UNKNOWN":{"code":1512,"message":"unknown variable '%s'"},"ERROR_QUERY_COLLECTION_LOCK_FAILED":{"code":1521,"message":"unable to read-lock collection %s"},"ERROR_QUERY_TOO_MANY_COLLECTIONS":{"code":1522,"message":"too many collections"},"ERROR_QUERY_DOCUMENT_ATTRIBUTE_REDECLARED":{"code":1530,"message":"document attribute '%s' is assigned multiple times"},"ERROR_QUERY_FUNCTION_NAME_UNKNOWN":{"code":1540,"message":"usage of unknown function '%s()'"},"ERROR_QUERY_FUNCTION_ARGUMENT_NUMBER_MISMATCH":{"code":1541,"message":"invalid number of arguments for function '%s()', expected number of arguments: minimum: %d, maximum: %d"},"ERROR_QUERY_FUNCTION_ARGUMENT_TYPE_MISMATCH":{"code":1542,"message":"invalid argument type in call to function '%s()'"},"ERROR_QUERY_INVALID_REGEX":{"code":1543,"message":"invalid regex value"},"ERROR_QUERY_BIND_PARAMETERS_INVALID":{"code":1550,"message":"invalid structure of bind parameters"},"ERROR_QUERY_BIND_PARAMETER_MISSING":{"code":1551,"message":"no value specified for declared bind parameter '%s'"},"ERROR_QUERY_BIND_PARAMETER_UNDECLARED":{"code":1552,"message":"bind parameter '%s' was not declared in the query"},"ERROR_QUERY_BIND_PARAMETER_TYPE":{"code":1553,"message":"bind parameter '%s' has an invalid value or type"},"ERROR_QUERY_INVALID_LOGICAL_VALUE":{"code":1560,"message":"invalid logical value"},"ERROR_QUERY_INVALID_ARITHMETIC_VALUE":{"code":1561,"message":"invalid arithmetic value"},"ERROR_QUERY_DIVISION_BY_ZERO":{"code":1562,"message":"division by zero"},"ERROR_QUERY_ARRAY_EXPECTED":{"code":1563,"message":"array expected"},"ERROR_QUERY_FAIL_CALLED":{"code":1569,"message":"FAIL(%s) called"},"ERROR_QUERY_GEO_INDEX_MISSING":{"code":1570,"message":"no suitable geo index found for geo restriction on '%s'"},"ERROR_QUERY_FULLTEXT_INDEX_MISSING":{"code":1571,"message":"no suitable fulltext index found for fulltext query on '%s'"},"ERROR_QUERY_INVALID_DATE_VALUE":{"code":1572,"message":"invalid date value"},"ERROR_QUERY_MULTI_MODIFY":{"code":1573,"message":"multi-modify query"},"ERROR_QUERY_INVALID_AGGREGATE_EXPRESSION":{"code":1574,"message":"invalid aggregate expression"},"ERROR_QUERY_COMPILE_TIME_OPTIONS":{"code":1575,"message":"query options must be readable at query compile time"},"ERROR_QUERY_EXCEPTION_OPTIONS":{"code":1576,"message":"query options expected"},"ERROR_QUERY_COLLECTION_USED_IN_EXPRESSION":{"code":1577,"message":"collection '%s' used as expression operand"},"ERROR_QUERY_DISALLOWED_DYNAMIC_CALL":{"code":1578,"message":"disallowed dynamic call to '%s'"},"ERROR_QUERY_ACCESS_AFTER_MODIFICATION":{"code":1579,"message":"access after data-modification"},"ERROR_QUERY_FUNCTION_INVALID_NAME":{"code":1580,"message":"invalid user function name"},"ERROR_QUERY_FUNCTION_INVALID_CODE":{"code":1581,"message":"invalid user function code"},"ERROR_QUERY_FUNCTION_NOT_FOUND":{"code":1582,"message":"user function '%s()' not found"},"ERROR_QUERY_FUNCTION_RUNTIME_ERROR":{"code":1583,"message":"user function runtime error: %s"},"ERROR_QUERY_BAD_JSON_PLAN":{"code":1590,"message":"bad execution plan JSON"},"ERROR_QUERY_NOT_FOUND":{"code":1591,"message":"query ID not found"},"ERROR_QUERY_IN_USE":{"code":1592,"message":"query with this ID is in use"},"ERROR_CURSOR_NOT_FOUND":{"code":1600,"message":"cursor not found"},"ERROR_CURSOR_BUSY":{"code":1601,"message":"cursor is busy"},"ERROR_TRANSACTION_INTERNAL":{"code":1650,"message":"internal transaction error"},"ERROR_TRANSACTION_NESTED":{"code":1651,"message":"nested transactions detected"},"ERROR_TRANSACTION_UNREGISTERED_COLLECTION":{"code":1652,"message":"unregistered collection used in transaction"},"ERROR_TRANSACTION_DISALLOWED_OPERATION":{"code":1653,"message":"disallowed operation inside transaction"},"ERROR_TRANSACTION_ABORTED":{"code":1654,"message":"transaction aborted"},"ERROR_USER_INVALID_NAME":{"code":1700,"message":"invalid user name"},"ERROR_USER_INVALID_PASSWORD":{"code":1701,"message":"invalid password"},"ERROR_USER_DUPLICATE":{"code":1702,"message":"duplicate user"},"ERROR_USER_NOT_FOUND":{"code":1703,"message":"user not found"},"ERROR_USER_CHANGE_PASSWORD":{"code":1704,"message":"user must change his password"},"ERROR_APPLICATION_INVALID_NAME":{"code":1750,"message":"invalid application name"},"ERROR_APPLICATION_INVALID_MOUNT":{"code":1751,"message":"invalid mount"},"ERROR_APPLICATION_DOWNLOAD_FAILED":{"code":1752,"message":"application download failed"},"ERROR_APPLICATION_UPLOAD_FAILED":{"code":1753,"message":"application upload failed"},"ERROR_KEYVALUE_INVALID_KEY":{"code":1800,"message":"invalid key declaration"},"ERROR_KEYVALUE_KEY_EXISTS":{"code":1801,"message":"key already exists"},"ERROR_KEYVALUE_KEY_NOT_FOUND":{"code":1802,"message":"key not found"},"ERROR_KEYVALUE_KEY_NOT_UNIQUE":{"code":1803,"message":"key is not unique"},"ERROR_KEYVALUE_KEY_NOT_CHANGED":{"code":1804,"message":"key value not changed"},"ERROR_KEYVALUE_KEY_NOT_REMOVED":{"code":1805,"message":"key value not removed"},"ERROR_KEYVALUE_NO_VALUE":{"code":1806,"message":"missing value"},"ERROR_TASK_INVALID_ID":{"code":1850,"message":"invalid task id"},"ERROR_TASK_DUPLICATE_ID":{"code":1851,"message":"duplicate task id"},"ERROR_TASK_NOT_FOUND":{"code":1852,"message":"task not found"},"ERROR_GRAPH_INVALID_GRAPH":{"code":1901,"message":"invalid graph"},"ERROR_GRAPH_COULD_NOT_CREATE_GRAPH":{"code":1902,"message":"could not create graph"},"ERROR_GRAPH_INVALID_VERTEX":{"code":1903,"message":"invalid vertex"},"ERROR_GRAPH_COULD_NOT_CREATE_VERTEX":{"code":1904,"message":"could not create vertex"},"ERROR_GRAPH_COULD_NOT_CHANGE_VERTEX":{"code":1905,"message":"could not change vertex"},"ERROR_GRAPH_INVALID_EDGE":{"code":1906,"message":"invalid edge"},"ERROR_GRAPH_COULD_NOT_CREATE_EDGE":{"code":1907,"message":"could not create edge"},"ERROR_GRAPH_COULD_NOT_CHANGE_EDGE":{"code":1908,"message":"could not change edge"},"ERROR_GRAPH_TOO_MANY_ITERATIONS":{"code":1909,"message":"too many iterations - try increasing the value of 'maxIterations'"},"ERROR_GRAPH_INVALID_FILTER_RESULT":{"code":1910,"message":"invalid filter result"},"ERROR_GRAPH_COLLECTION_MULTI_USE":{"code":1920,"message":"multi use of edge collection in edge def"},"ERROR_GRAPH_COLLECTION_USE_IN_MULTI_GRAPHS":{"code":1921,"message":"edge collection already used in edge def"},"ERROR_GRAPH_CREATE_MISSING_NAME":{"code":1922,"message":"missing graph name"},"ERROR_GRAPH_CREATE_MALFORMED_EDGE_DEFINITION":{"code":1923,"message":"malformed edge definition"},"ERROR_GRAPH_NOT_FOUND":{"code":1924,"message":"graph not found"},"ERROR_GRAPH_DUPLICATE":{"code":1925,"message":"graph already exists"},"ERROR_GRAPH_VERTEX_COL_DOES_NOT_EXIST":{"code":1926,"message":"vertex collection does not exist or is not part of the graph"},"ERROR_GRAPH_WRONG_COLLECTION_TYPE_VERTEX":{"code":1927,"message":"not a vertex collection"},"ERROR_GRAPH_NOT_IN_ORPHAN_COLLECTION":{"code":1928,"message":"not in orphan collection"},"ERROR_GRAPH_COLLECTION_USED_IN_EDGE_DEF":{"code":1929,"message":"collection already used in edge def"},"ERROR_GRAPH_EDGE_COLLECTION_NOT_USED":{"code":1930,"message":"edge collection not used in graph"},"ERROR_GRAPH_NOT_AN_ARANGO_COLLECTION":{"code":1931,"message":" is not an ArangoCollection"},"ERROR_GRAPH_NO_GRAPH_COLLECTION":{"code":1932,"message":"collection _graphs does not exist"},"ERROR_GRAPH_INVALID_EXAMPLE_ARRAY_OBJECT_STRING":{"code":1933,"message":"Invalid example type. Has to be String, Array or Object"},"ERROR_GRAPH_INVALID_EXAMPLE_ARRAY_OBJECT":{"code":1934,"message":"Invalid example type. Has to be Array or Object"},"ERROR_GRAPH_INVALID_NUMBER_OF_ARGUMENTS":{"code":1935,"message":"Invalid number of arguments. Expected: "},"ERROR_GRAPH_INVALID_PARAMETER":{"code":1936,"message":"Invalid parameter type."},"ERROR_GRAPH_INVALID_ID":{"code":1937,"message":"Invalid id"},"ERROR_GRAPH_COLLECTION_USED_IN_ORPHANS":{"code":1938,"message":"collection used in orphans"},"ERROR_GRAPH_EDGE_COL_DOES_NOT_EXIST":{"code":1939,"message":"edge collection does not exist or is not part of the graph"},"ERROR_GRAPH_EMPTY":{"code":1940,"message":"empty graph"},"ERROR_SESSION_UNKNOWN":{"code":1950,"message":"unknown session"},"ERROR_SESSION_EXPIRED":{"code":1951,"message":"session expired"},"SIMPLE_CLIENT_UNKNOWN_ERROR":{"code":2000,"message":"unknown client error"},"SIMPLE_CLIENT_COULD_NOT_CONNECT":{"code":2001,"message":"could not connect to server"},"SIMPLE_CLIENT_COULD_NOT_WRITE":{"code":2002,"message":"could not write to server"},"SIMPLE_CLIENT_COULD_NOT_READ":{"code":2003,"message":"could not read from server"},"ERROR_MALFORMED_MANIFEST_FILE":{"code":3000,"message":"malformed manifest file"},"ERROR_INVALID_APPLICATION_MANIFEST":{"code":3001,"message":"manifest file is invalid"},"ERROR_INVALID_FOXX_OPTIONS":{"code":3004,"message":"invalid foxx options"},"ERROR_INVALID_MOUNTPOINT":{"code":3007,"message":"mountpoint is invalid"},"ERROR_APP_NOT_FOUND":{"code":3009,"message":"App not found"},"ERROR_APP_NEEDS_CONFIGURATION":{"code":3010,"message":"App not configured"},"ERROR_MODULE_NOT_FOUND":{"code":3100,"message":"cannot locate module"},"ERROR_MODULE_FAILURE":{"code":3103,"message":"failed to invoke module"},"RESULT_ELEMENT_EXISTS":{"code":10000,"message":"element not inserted into structure, because it already exists"},"RESULT_ELEMENT_NOT_FOUND":{"code":10001,"message":"element not found in structure"},"ERROR_QUEUE_ALREADY_EXISTS":{"code":21000,"message":"named queue already exists"},"ERROR_DISPATCHER_IS_STOPPING":{"code":21001,"message":"dispatcher stopped"},"ERROR_QUEUE_UNKNOWN":{"code":21002,"message":"named queue does not exist"},"ERROR_QUEUE_FULL":{"code":21003,"message":"named queue is full"}};})(); /*jshint -W051:true */ /*global jqconsole, Symbol */ /*eslint-disable */global.DEFINE_MODULE('console',(function(){'use strict'; /*eslint-enable */ ////////////////////////////////////////////////////////////////////////////////
/// @brief module "console"
///
/// @file
///
/// DISCLAIMER
///
/// Copyright 2004-2013 triAGENS GmbH, Cologne, Germany
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///
///     http://www.apache.org/licenses/LICENSE-2.0
///
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// Copyright holder is triAGENS GmbH, Cologne, Germany
///
/// @author Dr. Frank Celler
/// @author Copyright 2010-2013, triAGENS GmbH, Cologne, Germany
////////////////////////////////////////////////////////////////////////////////
var exports={};var internal=require('internal');var sprintf=internal.sprintf;var inspect=internal.inspect; ////////////////////////////////////////////////////////////////////////////////
/// @brief group level
////////////////////////////////////////////////////////////////////////////////
var groupLevel=''; ////////////////////////////////////////////////////////////////////////////////
/// @brief timers
////////////////////////////////////////////////////////////////////////////////
var timers;try{timers = Object.create(null);}catch(e) {timers = {};} ////////////////////////////////////////////////////////////////////////////////
/// @brief internal logging
////////////////////////////////////////////////////////////////////////////////
var log;if(global.SYS_LOG){ // this will work when we are in arangod but not in the browser / web interface
log = global.SYS_LOG;delete global.SYS_LOG;}else { // this will work in the web interface
log = function(level,message){if(typeof jqconsole !== 'undefined'){jqconsole.Write(message + '\n','jssuccess');}};} ////////////////////////////////////////////////////////////////////////////////
/// @brief internal logging with group level
////////////////////////////////////////////////////////////////////////////////
function logGroup(level,msg){log(level,groupLevel + msg);} ////////////////////////////////////////////////////////////////////////////////
/// @brief try to prettify
////////////////////////////////////////////////////////////////////////////////
function prepareArgs(args){var ShapedJson=require('internal').ShapedJson;var result=[];if(args.length > 0 && typeof args[0] !== 'string'){result.push('%s');}for(var _i8=0;_i8 < args.length;++_i8) {var arg=args[_i8];if(typeof arg === 'object'){if(ShapedJson !== undefined && arg instanceof ShapedJson){arg = inspect(arg,{prettyPrint:false});}else if(arg === null){arg = 'null';}else if(arg instanceof Date || arg instanceof RegExp){arg = String(arg);}else if(Object.prototype.isPrototypeOf(arg) || Array.isArray(arg)){arg = inspect(arg,{prettyPrint:false});}}result.push(arg);}return result;} ////////////////////////////////////////////////////////////////////////////////
/// @brief assert
////////////////////////////////////////////////////////////////////////////////
exports.assert = function(condition){if(condition){return;}var args=Array.prototype.slice.call(arguments,1);var msg;try{msg = sprintf.apply(sprintf,prepareArgs(args));}catch(e) {msg = msg = e + ': ' + args;}logGroup('error',msg);require('assert').ok(condition,msg);}; ////////////////////////////////////////////////////////////////////////////////
/// @brief debug
////////////////////////////////////////////////////////////////////////////////
exports.debug = function(){var msg;try{msg = sprintf.apply(sprintf,prepareArgs(arguments));}catch(e) {msg = e + ': ' + arguments;}logGroup('debug',msg);}; ////////////////////////////////////////////////////////////////////////////////
/// @brief debugLines
////////////////////////////////////////////////////////////////////////////////
exports.debugLines = function(){var msg;try{msg = sprintf.apply(sprintf,prepareArgs(arguments));}catch(e) {msg = e + ': ' + arguments;}var a=msg.split('\n');for(var _i9=0;_i9 < a.length;++_i9) {logGroup('debug',a[_i9]);}}; ////////////////////////////////////////////////////////////////////////////////
/// @brief dir
////////////////////////////////////////////////////////////////////////////////
exports.dir = function(object){logGroup('info',inspect(object));}; ////////////////////////////////////////////////////////////////////////////////
/// @brief error
////////////////////////////////////////////////////////////////////////////////
exports.error = function(){var msg;try{msg = sprintf.apply(sprintf,prepareArgs(arguments));}catch(e) {msg = e + ': ' + arguments;}logGroup('error',msg);}; ////////////////////////////////////////////////////////////////////////////////
/// @brief errorLines
////////////////////////////////////////////////////////////////////////////////
exports.errorLines = function(){var msg;try{msg = sprintf.apply(sprintf,prepareArgs(arguments));}catch(e) {msg = e + ': ' + arguments;}var a=msg.split('\n');for(var _i10=0;_i10 < a.length;++_i10) {logGroup('error',a[_i10]);}}; ////////////////////////////////////////////////////////////////////////////////
/// @brief getline
////////////////////////////////////////////////////////////////////////////////
if(global.SYS_GETLINE){exports.getline = global.SYS_GETLINE;delete global.SYS_GETLINE;} ////////////////////////////////////////////////////////////////////////////////
/// @brief group
////////////////////////////////////////////////////////////////////////////////
exports.group = function(){var msg;try{msg = sprintf.apply(sprintf,prepareArgs(arguments));}catch(e) {msg = e + ': ' + arguments;}groupLevel = groupLevel + '  ';logGroup('info',msg);}; ////////////////////////////////////////////////////////////////////////////////
/// @brief groupCollapsed
////////////////////////////////////////////////////////////////////////////////
exports.groupCollapsed = function(){var msg;try{msg = sprintf.apply(sprintf,prepareArgs(arguments));}catch(e) {msg = e + ': ' + arguments;}logGroup('info',msg);groupLevel = groupLevel + '  ';}; ////////////////////////////////////////////////////////////////////////////////
/// @brief groupEnd
////////////////////////////////////////////////////////////////////////////////
exports.groupEnd = function(){groupLevel = groupLevel.substr(2);}; ////////////////////////////////////////////////////////////////////////////////
/// @brief info
////////////////////////////////////////////////////////////////////////////////
exports.info = function(){var msg;try{msg = sprintf.apply(sprintf,prepareArgs(arguments));}catch(e) {msg = e + ': ' + arguments;}logGroup('info',msg);}; ////////////////////////////////////////////////////////////////////////////////
/// @brief infoLines
////////////////////////////////////////////////////////////////////////////////
exports.infoLines = function(){var msg;try{msg = sprintf.apply(sprintf,prepareArgs(arguments));}catch(e) {msg = e + ': ' + arguments;}var a=msg.split('\n');for(var _i11=0;_i11 < a.length;++_i11) {logGroup('info',a[_i11]);}}; ////////////////////////////////////////////////////////////////////////////////
/// @brief log
////////////////////////////////////////////////////////////////////////////////
exports.log = exports.info;exports._log = log; ////////////////////////////////////////////////////////////////////////////////
/// @brief logLines
////////////////////////////////////////////////////////////////////////////////
exports.logLines = exports.infoLines; ////////////////////////////////////////////////////////////////////////////////
/// @brief time
////////////////////////////////////////////////////////////////////////////////
exports.time = function(label){if(typeof label !== 'string'){throw new Error('label must be a string');}var symbol=typeof Symbol === 'undefined'?'%' + label:Symbol['for'](label);timers[symbol] = Date.now();}; ////////////////////////////////////////////////////////////////////////////////
/// @brief timeEnd
////////////////////////////////////////////////////////////////////////////////
exports.timeEnd = function(label){var symbol=typeof Symbol === 'undefined'?'%' + label:Symbol['for'](label);var time=timers[symbol];if(!time){throw new Error('No such label: ' + label);}var duration=Date.now() - time;delete timers[symbol];logGroup('info',sprintf('%s: %dms',label,duration));}; ////////////////////////////////////////////////////////////////////////////////
/// @brief trace
////////////////////////////////////////////////////////////////////////////////
exports.trace = function(){var err=new Error();err.name = 'Trace';err.message = sprintf.apply(sprintf,prepareArgs(arguments));Error.captureStackTrace(err,exports.trace);var a=err.stack.split('\n');while(!a[a.length - 1]) {a.pop();}for(var _i12=0;_i12 < a.length;++_i12) {logGroup('info',a[_i12]);}}; ////////////////////////////////////////////////////////////////////////////////
/// @brief warn
////////////////////////////////////////////////////////////////////////////////
exports.warn = function(){var msg;try{msg = sprintf.apply(sprintf,prepareArgs(arguments));}catch(e) {msg = e + ': ' + arguments;}logGroup('warning',msg);}; ////////////////////////////////////////////////////////////////////////////////
/// @brief warnLines
////////////////////////////////////////////////////////////////////////////////
exports.warnLines = function(){var msg;try{msg = sprintf.apply(sprintf,prepareArgs(arguments));}catch(e) {msg = e + ': ' + arguments;}var a=msg.split('\n');var i;for(i = 0;i < a.length;++i) {logGroup('warning',a[i]);}};return exports;})()); /*jshint -W051:true */ /*eslint-disable */(function(){'use strict'; /*eslint-enable */ ////////////////////////////////////////////////////////////////////////////////
/// @brief module "internal"
///
/// @file
///
/// DISCLAIMER
///
/// Copyright 2004-2013 triAGENS GmbH, Cologne, Germany
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///
///     http://www.apache.org/licenses/LICENSE-2.0
///
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// Copyright holder is triAGENS GmbH, Cologne, Germany
///
/// @author Dr. Frank Celler
/// @author Copyright 2010-2013, triAGENS GmbH, Cologne, Germany
////////////////////////////////////////////////////////////////////////////////
var exports=require('internal'); ////////////////////////////////////////////////////////////////////////////////
/// @brief hide global variables
////////////////////////////////////////////////////////////////////////////////
if(global.ArangoConnection){exports.ArangoConnection = global.ArangoConnection;}if(global.SYS_ARANGO){exports.arango = global.SYS_ARANGO;delete global.SYS_ARANGO;} ////////////////////////////////////////////////////////////////////////////////
/// @brief write-ahead log functionality
////////////////////////////////////////////////////////////////////////////////
exports.wal = {flush:function flush(waitForSync,waitForCollector){if(exports.arango){var wfs=waitForSync?'true':'false';var wfc=waitForCollector?'true':'false';exports.arango.PUT('/_admin/wal/flush?waitForSync=' + wfs + '&waitForCollector=' + wfc,'');return;}throw 'not connected';},properties:function properties(value){if(exports.arango){if(value !== undefined){return exports.arango.PUT('/_admin/wal/properties',JSON.stringify(value));}return exports.arango.GET('/_admin/wal/properties','');}throw 'not connected';},transactions:function transactions(){if(exports.arango){return exports.arango.GET('/_admin/wal/transactions','');}throw 'not connected';}}; ////////////////////////////////////////////////////////////////////////////////
/// @brief reloads the AQL user functions
////////////////////////////////////////////////////////////////////////////////
exports.reloadAqlFunctions = function(){if(exports.arango){exports.arango.POST('/_admin/aql/reload','');return;}throw 'not connected';}; ////////////////////////////////////////////////////////////////////////////////
/// @brief rebuilds the routing cache
////////////////////////////////////////////////////////////////////////////////
exports.reloadRouting = function(){if(exports.arango){exports.arango.POST('/_admin/routing/reload','');return;}throw 'not connected';}; ////////////////////////////////////////////////////////////////////////////////
/// @brief rebuilds the routing cache
////////////////////////////////////////////////////////////////////////////////
exports.routingCache = function(){if(exports.arango){return exports.arango.GET('/_admin/routing/routes','');}throw 'not connected';}; ////////////////////////////////////////////////////////////////////////////////
/// @brief rebuilds the authentication cache
////////////////////////////////////////////////////////////////////////////////
exports.reloadAuth = function(){if(exports.arango){exports.arango.POST('/_admin/auth/reload','');return;}throw 'not connected';}; ////////////////////////////////////////////////////////////////////////////////
/// @brief execute javascript file on the server
////////////////////////////////////////////////////////////////////////////////
exports.executeServer = function(body){if(exports.arango){return exports.arango.POST('/_admin/execute',body);}throw 'not connected';}; ////////////////////////////////////////////////////////////////////////////////
/// @brief logs a request in curl format
////////////////////////////////////////////////////////////////////////////////
exports.appendCurlRequest = function(shellAppender,jsonAppender,rawAppender){return function(method,url,body,headers){var response;var curl;var i;var jsonBody=false;if(typeof body !== 'string' && body !== undefined){jsonBody = true;body = exports.inspect(body);}curl = 'shell> curl ';if(method === 'POST'){response = exports.arango.POST_RAW(url,body,headers);curl += '-X ' + method + ' ';}else if(method === 'PUT'){response = exports.arango.PUT_RAW(url,body,headers);curl += '-X ' + method + ' ';}else if(method === 'GET'){response = exports.arango.GET_RAW(url,headers);}else if(method === 'DELETE'){response = exports.arango.DELETE_RAW(url,headers);curl += '-X ' + method + ' ';}else if(method === 'PATCH'){response = exports.arango.PATCH_RAW(url,body,headers);curl += '-X ' + method + ' ';}else if(method === 'HEAD'){response = exports.arango.HEAD_RAW(url,headers);curl += '-X ' + method + ' ';}else if(method === 'OPTION'){response = exports.arango.OPTION_RAW(url,body,headers);curl += '-X ' + method + ' ';}if(headers !== undefined && headers !== ''){for(i in headers) {if(headers.hasOwnProperty(i)){curl += '--header \'' + i + ': ' + headers[i] + '\' ';}}}if(body !== undefined && body !== ''){curl += '--data-binary @- ';}curl += '--dump - http://localhost:8529' + url;shellAppender(curl);if(body !== undefined && body !== '' && body){rawAppender(' &lt;&lt;EOF\n');if(jsonBody){jsonAppender(body);}else {rawAppender(body);}rawAppender('\nEOF');}rawAppender('\n\n');return response;};}; ////////////////////////////////////////////////////////////////////////////////
/// @brief logs a raw response
////////////////////////////////////////////////////////////////////////////////
exports.appendRawResponse = function(appender,syntaxAppender){return function(response){var key;var headers=response.headers; // generate header
appender('HTTP/1.1 ' + headers['http/1.1'] + '\n');for(key in headers) {if(headers.hasOwnProperty(key)){if(key !== 'http/1.1' && key !== 'server' && key !== 'connection' && key !== 'content-length'){appender(key + ': ' + headers[key] + '\n');}}}appender('\n'); // append body
if(response.body !== undefined){syntaxAppender(exports.inspect(response.body));appender('\n');}};}; ////////////////////////////////////////////////////////////////////////////////
/// @brief logs a response in JSON
////////////////////////////////////////////////////////////////////////////////
exports.appendJsonResponse = function(appender,syntaxAppender){return function(response){var syntaxAppend=exports.appendRawResponse(syntaxAppender,syntaxAppender); // copy original body (this is necessary because 'response' is passed by reference)
var copy=response.body; // overwrite body with parsed JSON && append
response.body = JSON.parse(response.body);syntaxAppend(response); // restore original body
response.body = copy;};}; ////////////////////////////////////////////////////////////////////////////////
/// @brief log function
////////////////////////////////////////////////////////////////////////////////
exports.log = function(level,msg){exports.output(level,': ',msg,'\n');}; ////////////////////////////////////////////////////////////////////////////////
/// @brief sprintf wrapper
////////////////////////////////////////////////////////////////////////////////
try{if(typeof window !== 'undefined'){exports.sprintf = function(format){var n=arguments.length;if(n === 0){return '';}if(n <= 1){return String(format);}var i;var args=[];for(i = 1;i < arguments.length;++i) {args.push(arguments[i]);}i = 0;return format.replace(/%[dfs]/,function(){return String(args[i++]);});};}}catch(e) { // noop
}})(); /*eslint no-extend-native:0 */ /*eslint-disable */(function(){'use strict'; /*eslint-enable */ ////////////////////////////////////////////////////////////////////////////////
/// @brief monkey-patches to built-in prototypes
///
/// @file
///
/// DISCLAIMER
///
/// Copyright 2004-2013 triAGENS GmbH, Cologne, Germany
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///
///     http://www.apache.org/licenses/LICENSE-2.0
///
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// Copyright holder is triAGENS GmbH, Cologne, Germany
///
/// @author Dr. Frank Celler
/// @author Lucas Dohmen
/// @author Copyright 2011-2013, triAGENS GmbH, Cologne, Germany
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
/// @brief shallow copies properties
////////////////////////////////////////////////////////////////////////////////
Object.defineProperty(Object.prototype,'_shallowCopy',{get:function get(){var self=this;return this.propertyKeys.reduce(function(previous,key){previous[key] = self[key];return previous;},{});}}); ////////////////////////////////////////////////////////////////////////////////
/// @brief returns the property keys
////////////////////////////////////////////////////////////////////////////////
Object.defineProperty(Object.prototype,'propertyKeys',{get:function get(){return Object.keys(this).filter(function(key){return key.charAt(0) !== '_' && key.charAt(0) !== '$';});}});})();module.define("@arangodb/aql/queries",function(exports,module){'use strict'; ////////////////////////////////////////////////////////////////////////////////
/// @brief AQL query management
///
/// @file
///
/// DISCLAIMER
///
/// Copyright 2012 triagens GmbH, Cologne, Germany
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///
///     http://www.apache.org/licenses/LICENSE-2.0
///
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// Copyright holder is triAGENS GmbH, Cologne, Germany
///
/// @author Jan Steemann
/// @author Copyright 2013, triAGENS GmbH, Cologne, Germany
////////////////////////////////////////////////////////////////////////////////
var internal=require("internal");var arangosh=require("@arangodb/arangosh"); ////////////////////////////////////////////////////////////////////////////////
/// @brief clears the slow query log
////////////////////////////////////////////////////////////////////////////////
exports.clearSlow = function(){var db=internal.db;var requestResult=db._connection.DELETE("/_api/query/slow","");arangosh.checkRequestResult(requestResult);return requestResult;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief returns the slow queries
////////////////////////////////////////////////////////////////////////////////
exports.slow = function(){var db=internal.db;var requestResult=db._connection.GET("/_api/query/slow","");arangosh.checkRequestResult(requestResult);return requestResult;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief returns the current queries
////////////////////////////////////////////////////////////////////////////////
exports.current = function(){var db=internal.db;var requestResult=db._connection.GET("/_api/query/current","");arangosh.checkRequestResult(requestResult);return requestResult;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief configures the query tracking properties
////////////////////////////////////////////////////////////////////////////////
exports.properties = function(config){var db=internal.db;var requestResult;if(config === undefined){requestResult = db._connection.GET("/_api/query/properties");}else {requestResult = db._connection.PUT("/_api/query/properties",JSON.stringify(config));}arangosh.checkRequestResult(requestResult);return requestResult;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief kills a query
////////////////////////////////////////////////////////////////////////////////
exports.kill = function(id){if(typeof id === 'object' && id.hasOwnProperty('id')){id = id.id;}var db=internal.db;var requestResult=db._connection.DELETE("/_api/query/" + encodeURIComponent(id),"");arangosh.checkRequestResult(requestResult);return requestResult;};});module.define("@arangodb/arango-collection",function(exports,module){ /*jshint strict: false */ ////////////////////////////////////////////////////////////////////////////////
/// @brief ArangoCollection
///
/// @file
///
/// DISCLAIMER
///
/// Copyright 2013 triagens GmbH, Cologne, Germany
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///
///     http://www.apache.org/licenses/LICENSE-2.0
///
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// Copyright holder is triAGENS GmbH, Cologne, Germany
///
/// @author Achim Brandt
/// @author Dr. Frank Celler
/// @author Copyright 2012-2013, triAGENS GmbH, Cologne, Germany
////////////////////////////////////////////////////////////////////////////////
var internal=require("internal");var arangosh=require("@arangodb/arangosh"); ////////////////////////////////////////////////////////////////////////////////
/// @brief add options from arguments to index specification
////////////////////////////////////////////////////////////////////////////////
function addIndexOptions(body,parameters){body.fields = [];var setOption=function setOption(k){if(!body.hasOwnProperty(k)){body[k] = parameters[i][k];}};var i;for(i = 0;i < parameters.length;++i) {if(typeof parameters[i] === "string"){ // set fields
body.fields.push(parameters[i]);}else if(typeof parameters[i] === "object" && !Array.isArray(parameters[i]) && parameters[i] !== null){ // set arbitrary options
Object.keys(parameters[i]).forEach(setOption);break;}}return body;} ////////////////////////////////////////////////////////////////////////////////
/// @brief constructor
////////////////////////////////////////////////////////////////////////////////
function ArangoCollection(database,data){this._database = database;this._dbName = database._name();if(typeof data === "string"){this._id = null;this._name = data;this._status = null;this._type = null;}else if(data !== undefined){this._id = data.id;this._name = data.name;this._status = data.status;this._type = data.type;}else {this._id = null;this._name = null;this._status = null;this._type = null;}}exports.ArangoCollection = ArangoCollection; // must be called after exporting ArangoCollection
require("@arangodb/arango-collection-common");var ArangoError=require("@arangodb").ArangoError; ////////////////////////////////////////////////////////////////////////////////
/// @brief append the waitForSync parameter to a URL
////////////////////////////////////////////////////////////////////////////////
ArangoCollection.prototype._appendSyncParameter = function(url,waitForSync){if(waitForSync){if(url.indexOf('?') === -1){url += '?';}else {url += '&';}url += 'waitForSync=true';}return url;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief prefix a URL with the database name of the collection
////////////////////////////////////////////////////////////////////////////////
ArangoCollection.prototype._prefixurl = function(url){if(url.substr(0,5) === '/_db/'){return url;}if(url[0] === '/'){return '/_db/' + encodeURIComponent(this._dbName) + url;}return '/_db/' + encodeURIComponent(this._dbName) + '/' + url;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief return the base url for collection usage
////////////////////////////////////////////////////////////////////////////////
ArangoCollection.prototype._baseurl = function(suffix){var url=this._database._collectionurl(this.name());if(suffix){url += "/" + suffix;}return this._prefixurl(url);}; ////////////////////////////////////////////////////////////////////////////////
/// @brief return the base url for document usage
////////////////////////////////////////////////////////////////////////////////
ArangoCollection.prototype._documenturl = function(id){var s=id.split("/"),url;if(s.length === 1){url = this._database._documenturl(this.name() + "/" + id,this.name());}else {url = this._database._documenturl(id,this.name());}return this._prefixurl(url);}; ////////////////////////////////////////////////////////////////////////////////
/// @brief return the base url for collection index usage
////////////////////////////////////////////////////////////////////////////////
ArangoCollection.prototype._indexurl = function(){return this._prefixurl("/_api/index?collection=" + encodeURIComponent(this.name()));}; ////////////////////////////////////////////////////////////////////////////////
/// @brief executes an edge query
////////////////////////////////////////////////////////////////////////////////
ArangoCollection.prototype._edgesQuery = function(vertex,direction){ // if vertex is a list, iterator and concat
if(vertex instanceof Array){var edges=[];var i;for(i = 0;i < vertex.length;++i) {var e=this._edgesQuery(vertex[i],direction);edges.push.apply(edges,e);}return edges;}if(vertex.hasOwnProperty("_id")){vertex = vertex._id;} // get the edges
var url="/_api/edges/" + encodeURIComponent(this.name()) + "?vertex=" + encodeURIComponent(vertex) + (direction?"&direction=" + direction:"");var requestResult=this._database._connection.GET(this._prefixurl(url));arangosh.checkRequestResult(requestResult);return requestResult.edges;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief converts into an array
////////////////////////////////////////////////////////////////////////////////
ArangoCollection.prototype.toArray = function(){return this.all().toArray();}; ////////////////////////////////////////////////////////////////////////////////
/// @brief print the help for ArangoCollection
////////////////////////////////////////////////////////////////////////////////
var helpArangoCollection=arangosh.createHelpHeadline("ArangoCollection help") + 'ArangoCollection constructor:                                             ' + "\n" + ' > col = db.mycoll;                                                       ' + "\n" + ' > col = db._create("mycoll");                                            ' + "\n" + '                                                                          ' + "\n" + 'Administration Functions:                                                 ' + "\n" + '  name()                                collection name                   ' + "\n" + '  status()                              status of the collection          ' + "\n" + '  type()                                type of the collection            ' + "\n" + '  truncate()                            delete all documents              ' + "\n" + '  properties()                          show collection properties        ' + "\n" + '  drop()                                delete a collection               ' + "\n" + '  load()                                load a collection                 ' + "\n" + '  unload()                              unload a collection               ' + "\n" + '  rename(<new-name>)                    renames a collection              ' + "\n" + '  getIndexes()                          return defined indexes            ' + "\n" + '  refresh()                             refreshes the status and name     ' + "\n" + '  _help()                               this help                         ' + "\n" + '                                                                          ' + "\n" + 'Document Functions:                                                       ' + "\n" + '  count()                               return number of documents        ' + "\n" + '  save(<data>)                          create document and return handle ' + "\n" + '  document(<id>)                        get document by handle (_id or _key)' + "\n" + '  replace(<id>, <data>, <overwrite>)    overwrite document                ' + "\n" + '  update(<id>, <data>, <overwrite>,     partially update document         ' + "\n" + '         <keepNull>)                                                      ' + "\n" + '  remove(<id>)                          delete document                   ' + "\n" + '  exists(<id>)                          checks whether a document exists  ' + "\n" + '  first()                               first inserted/updated document   ' + "\n" + '  last()                                last inserted/updated document    ' + "\n" + '                                                                          ' + "\n" + 'Attributes:                                                               ' + "\n" + '  _database                             database object                   ' + "\n" + '  _id                                   collection identifier             ';ArangoCollection.prototype._help = function(){internal.print(helpArangoCollection);}; ////////////////////////////////////////////////////////////////////////////////
/// @brief gets the name of a collection
////////////////////////////////////////////////////////////////////////////////
ArangoCollection.prototype.name = function(){if(this._name === null){this.refresh();}return this._name;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief gets the status of a collection
////////////////////////////////////////////////////////////////////////////////
ArangoCollection.prototype.status = function(){var result;if(this._status === null){this.refresh();} // save original status
result = this._status;if(this._status === ArangoCollection.STATUS_UNLOADING){ // if collection is currently unloading, we must not cache this info
this._status = null;} // return the correct result
return result;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief gets the type of a collection
////////////////////////////////////////////////////////////////////////////////
ArangoCollection.prototype.type = function(){if(this._type === null){this.refresh();}return this._type;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief gets or sets the properties of a collection
////////////////////////////////////////////////////////////////////////////////
ArangoCollection.prototype.properties = function(properties){var attributes={"doCompact":true,"journalSize":true,"isSystem":false,"isVolatile":false,"waitForSync":true,"shardKeys":false,"numberOfShards":false,"keyOptions":false,"indexBuckets":true};var a;var requestResult;if(properties === undefined){requestResult = this._database._connection.GET(this._baseurl("properties"));arangosh.checkRequestResult(requestResult);}else {var body={};for(a in attributes) {if(attributes.hasOwnProperty(a) && attributes[a] && properties.hasOwnProperty(a)){body[a] = properties[a];}}requestResult = this._database._connection.PUT(this._baseurl("properties"),JSON.stringify(body));arangosh.checkRequestResult(requestResult);}var result={};for(a in attributes) {if(attributes.hasOwnProperty(a) && requestResult.hasOwnProperty(a) && requestResult[a] !== undefined){result[a] = requestResult[a];}}return result;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief rotate the journal of a collection
////////////////////////////////////////////////////////////////////////////////
ArangoCollection.prototype.rotate = function(){var requestResult=this._database._connection.PUT(this._baseurl("rotate"),"");arangosh.checkRequestResult(requestResult);return requestResult.result;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief gets the figures of a collection
////////////////////////////////////////////////////////////////////////////////
ArangoCollection.prototype.figures = function(){var requestResult=this._database._connection.GET(this._baseurl("figures"));arangosh.checkRequestResult(requestResult);return requestResult.figures;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief gets the checksum of a collection
////////////////////////////////////////////////////////////////////////////////
ArangoCollection.prototype.checksum = function(withRevisions,withData){var append='';if(withRevisions){append += '?withRevisions=true';}if(withData){append += (append === ''?'?':'&') + 'withData=true';}var requestResult=this._database._connection.GET(this._baseurl("checksum") + append);arangosh.checkRequestResult(requestResult);return {checksum:requestResult.checksum,revision:requestResult.revision};}; ////////////////////////////////////////////////////////////////////////////////
/// @brief gets the revision id of a collection
////////////////////////////////////////////////////////////////////////////////
ArangoCollection.prototype.revision = function(){var requestResult=this._database._connection.GET(this._baseurl("revision"));arangosh.checkRequestResult(requestResult);return requestResult.revision;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief drops a collection
////////////////////////////////////////////////////////////////////////////////
ArangoCollection.prototype.drop = function(){var requestResult=this._database._connection.DELETE(this._baseurl());if(requestResult !== null && requestResult.error === true && requestResult.errorNum !== internal.errors.ERROR_ARANGO_COLLECTION_NOT_FOUND.code){ // check error in case we got anything else but "collection not found"
arangosh.checkRequestResult(requestResult);}this._status = ArangoCollection.STATUS_DELETED;var database=this._database;var name;for(name in database) {if(database.hasOwnProperty(name)){var collection=database[name];if(collection instanceof ArangoCollection){if(collection.name() === this.name()){delete database[name];}}}}}; ////////////////////////////////////////////////////////////////////////////////
/// @brief truncates a collection
////////////////////////////////////////////////////////////////////////////////
ArangoCollection.prototype.truncate = function(){var requestResult=this._database._connection.PUT(this._baseurl("truncate"),"");arangosh.checkRequestResult(requestResult);this._status = null;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief loads a collection
////////////////////////////////////////////////////////////////////////////////
ArangoCollection.prototype.load = function(count){var data={count:true}; // return the number of documents? this might slow down loading
if(count !== undefined){data.count = count;}var requestResult=this._database._connection.PUT(this._baseurl("load"),JSON.stringify(data));arangosh.checkRequestResult(requestResult);this._status = null;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief unloads a collection
////////////////////////////////////////////////////////////////////////////////
ArangoCollection.prototype.unload = function(){var requestResult=this._database._connection.PUT(this._baseurl("unload"),"");arangosh.checkRequestResult(requestResult);this._status = null;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief renames a collection
////////////////////////////////////////////////////////////////////////////////
ArangoCollection.prototype.rename = function(name){var body={name:name};var requestResult=this._database._connection.PUT(this._baseurl("rename"),JSON.stringify(body));arangosh.checkRequestResult(requestResult);delete this._database[this._name];this._database[name] = this;this._status = null;this._name = null;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief refreshes a collection status and name
////////////////////////////////////////////////////////////////////////////////
ArangoCollection.prototype.refresh = function(){var requestResult=this._database._connection.GET(this._database._collectionurl(this._id) + "?useId=true");arangosh.checkRequestResult(requestResult);this._name = requestResult.name;this._status = requestResult.status;this._type = requestResult.type;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief gets all indexes
////////////////////////////////////////////////////////////////////////////////
ArangoCollection.prototype.getIndexes = function(withStats){var requestResult=this._database._connection.GET(this._indexurl() + "&withStats=" + (withStats || false));arangosh.checkRequestResult(requestResult);return requestResult.indexes;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief gets one index
////////////////////////////////////////////////////////////////////////////////
ArangoCollection.prototype.index = function(id){if(id.hasOwnProperty("id")){id = id.id;}var requestResult=this._database._connection.GET(this._database._indexurl(id,this.name()));arangosh.checkRequestResult(requestResult);return requestResult;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief deletes an index
////////////////////////////////////////////////////////////////////////////////
ArangoCollection.prototype.dropIndex = function(id){if(id.hasOwnProperty("id")){id = id.id;}var requestResult=this._database._connection.DELETE(this._database._indexurl(id,this.name()));if(requestResult !== null && requestResult.error === true && requestResult.errorNum === internal.errors.ERROR_ARANGO_INDEX_NOT_FOUND.code){return false;}arangosh.checkRequestResult(requestResult);return true;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief ensures a cap constraint
////////////////////////////////////////////////////////////////////////////////
ArangoCollection.prototype.ensureCapConstraint = function(size,byteSize){var body={type:"cap",size:size || undefined,byteSize:byteSize || undefined};var requestResult=this._database._connection.POST(this._indexurl(),JSON.stringify(body));arangosh.checkRequestResult(requestResult);return requestResult;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief ensures a unique skip-list index
////////////////////////////////////////////////////////////////////////////////
ArangoCollection.prototype.ensureUniqueSkiplist = function(){var body=addIndexOptions({type:"skiplist",unique:true},arguments);var requestResult=this._database._connection.POST(this._indexurl(),JSON.stringify(body));arangosh.checkRequestResult(requestResult);return requestResult;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief ensures a skip-list index
////////////////////////////////////////////////////////////////////////////////
ArangoCollection.prototype.ensureSkiplist = function(){var body=addIndexOptions({type:"skiplist",unique:false},arguments);var requestResult=this._database._connection.POST(this._indexurl(),JSON.stringify(body));arangosh.checkRequestResult(requestResult);return requestResult;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief ensures a fulltext index
////////////////////////////////////////////////////////////////////////////////
ArangoCollection.prototype.ensureFulltextIndex = function(field,minLength){var body={type:"fulltext",minLength:minLength || undefined,fields:[field]};var requestResult=this._database._connection.POST(this._indexurl(),JSON.stringify(body));arangosh.checkRequestResult(requestResult);return requestResult;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief ensures a unique constraint
////////////////////////////////////////////////////////////////////////////////
ArangoCollection.prototype.ensureUniqueConstraint = function(){var body=addIndexOptions({type:"hash",unique:true},arguments);var requestResult=this._database._connection.POST(this._indexurl(),JSON.stringify(body));arangosh.checkRequestResult(requestResult);return requestResult;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief ensures a hash index
////////////////////////////////////////////////////////////////////////////////
ArangoCollection.prototype.ensureHashIndex = function(){var body=addIndexOptions({type:"hash",unique:false},arguments);var requestResult=this._database._connection.POST(this._indexurl(),JSON.stringify(body));arangosh.checkRequestResult(requestResult);return requestResult;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief ensures a geo index
////////////////////////////////////////////////////////////////////////////////
ArangoCollection.prototype.ensureGeoIndex = function(lat,lon){var body;if(typeof lat !== "string"){throw "usage: ensureGeoIndex(<lat>, <lon>) or ensureGeoIndex(<loc>[, <geoJson>])";}if(typeof lon === "boolean"){body = {type:"geo",fields:[lat],geoJson:lon};}else if(lon === undefined){body = {type:"geo",fields:[lat],geoJson:false};}else {body = {type:"geo",fields:[lat,lon],geoJson:false};}var requestResult=this._database._connection.POST(this._indexurl(),JSON.stringify(body));arangosh.checkRequestResult(requestResult);return requestResult;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief ensures a geo constraint
/// since ArangoDB 2.5, this is just a redirection to ensureGeoIndex
////////////////////////////////////////////////////////////////////////////////
ArangoCollection.prototype.ensureGeoConstraint = function(lat,lon){return this.ensureGeoIndex(lat,lon);}; ////////////////////////////////////////////////////////////////////////////////
/// @brief ensures an index
////////////////////////////////////////////////////////////////////////////////
ArangoCollection.prototype.ensureIndex = function(data){if(typeof data !== "object" || Array.isArray(data)){throw "usage: ensureIndex(<description>)";}var requestResult=this._database._connection.POST(this._indexurl(),JSON.stringify(data));arangosh.checkRequestResult(requestResult);return requestResult;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief gets the number of documents
////////////////////////////////////////////////////////////////////////////////
ArangoCollection.prototype.count = function(){var requestResult=this._database._connection.GET(this._baseurl("count"));arangosh.checkRequestResult(requestResult);return requestResult.count;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief gets a single document from the collection
////////////////////////////////////////////////////////////////////////////////
ArangoCollection.prototype.document = function(id){var rev=null;var requestResult;if(id.hasOwnProperty("_id")){if(id.hasOwnProperty("_rev")){rev = id._rev;}id = id._id;}if(rev === null){requestResult = this._database._connection.GET(this._documenturl(id));}else {requestResult = this._database._connection.GET(this._documenturl(id),{'if-match':JSON.stringify(rev)});}if(requestResult !== null && requestResult.error === true && requestResult.errorNum === internal.errors.ERROR_ARANGO_COLLECTION_NOT_FOUND.code){throw new ArangoError(requestResult);}arangosh.checkRequestResult(requestResult);return requestResult;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief checks whether a specific document exists
////////////////////////////////////////////////////////////////////////////////
ArangoCollection.prototype.exists = function(id){var rev=null;var requestResult;if(id === undefined || id === null){throw new ArangoError({errorNum:internal.errors.ERROR_ARANGO_DOCUMENT_HANDLE_BAD.code,errorMessage:internal.errors.ERROR_ARANGO_DOCUMENT_HANDLE_BAD.message});}if(id.hasOwnProperty("_id")){if(id.hasOwnProperty("_rev")){rev = id._rev;}id = id._id;}if(rev === null){requestResult = this._database._connection.HEAD(this._documenturl(id));}else {requestResult = this._database._connection.HEAD(this._documenturl(id),{'if-match':JSON.stringify(rev)});}if(requestResult !== null && requestResult.error === true && (requestResult.errorNum === internal.errors.ERROR_ARANGO_COLLECTION_NOT_FOUND.code || requestResult.errorNum === internal.errors.ERROR_HTTP_NOT_FOUND.code || requestResult.errorNum === internal.errors.ERROR_HTTP_PRECONDITION_FAILED.code)){return false;}arangosh.checkRequestResult(requestResult);return true;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief gets a random element from the collection
////////////////////////////////////////////////////////////////////////////////
ArangoCollection.prototype.any = function(){var requestResult=this._database._connection.PUT(this._prefixurl("/_api/simple/any"),JSON.stringify({collection:this._name}));arangosh.checkRequestResult(requestResult);return requestResult.document;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief constructs a query-by-example for a collection
////////////////////////////////////////////////////////////////////////////////
ArangoCollection.prototype.firstExample = function(example){var e;var i; // example is given as only argument
if(arguments.length === 1){e = example;} // example is given as list
else {e = {};for(i = 0;i < arguments.length;i += 2) {e[arguments[i]] = arguments[i + 1];}}var data={collection:this.name(),example:e};var requestResult=this._database._connection.PUT(this._prefixurl("/_api/simple/first-example"),JSON.stringify(data));if(requestResult !== null && requestResult.error === true && requestResult.errorNum === internal.errors.ERROR_HTTP_NOT_FOUND.code){return null;}arangosh.checkRequestResult(requestResult);return requestResult.document;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief returns the first document(s) from the collection
/// If an argument is supplied, the result will be a list of the first n
/// documents. When no argument is supplied, the result is the first document
/// from the collection, or null if the collection is empty.
/// The document order is determined by the insertion/update order.
////////////////////////////////////////////////////////////////////////////////
ArangoCollection.prototype.first = function(count){var body={collection:this.name(),count:count};var requestResult=this._database._connection.PUT(this._prefixurl("/_api/simple/first"),JSON.stringify(body));arangosh.checkRequestResult(requestResult);return requestResult.result;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief returns the last document(s) from the collection
/// If an argument is supplied, the result will be a list of the last n
/// documents. When no argument is supplied, the result is the last document
/// from the collection, or null if the collection is empty.
/// The document order is determined by the insertion/update order.
////////////////////////////////////////////////////////////////////////////////
ArangoCollection.prototype.last = function(count){var body={collection:this.name(),count:count};var requestResult=this._database._connection.PUT(this._prefixurl("/_api/simple/last"),JSON.stringify(body));arangosh.checkRequestResult(requestResult);return requestResult.result;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief saves a document in the collection
/// note: this method is used to save documents and edges, but save() has a
/// different signature for both. For document collections, the signature is
/// save(<data>, <waitForSync>), whereas for edge collections, the signature is
/// save(<from>, <to>, <data>, <waitForSync>)
////////////////////////////////////////////////////////////////////////////////
ArangoCollection.prototype.save = ArangoCollection.prototype.insert = function(from,to,data,waitForSync){var type=this.type(),url;if(type === undefined){type = ArangoCollection.TYPE_DOCUMENT;}if(type === ArangoCollection.TYPE_DOCUMENT){data = from;waitForSync = to;url = "/_api/document?collection=" + encodeURIComponent(this.name());}else if(type === ArangoCollection.TYPE_EDGE){if(typeof from === 'object' && from.hasOwnProperty("_id")){from = from._id;}if(typeof to === 'object' && to.hasOwnProperty("_id")){to = to._id;}url = "/_api/edge?collection=" + encodeURIComponent(this.name()) + "&from=" + encodeURIComponent(from) + "&to=" + encodeURIComponent(to);}url = this._appendSyncParameter(url,waitForSync);if(data === undefined || typeof data !== 'object'){throw new ArangoError({errorNum:internal.errors.ERROR_ARANGO_DOCUMENT_TYPE_INVALID.code,errorMessage:internal.errors.ERROR_ARANGO_DOCUMENT_TYPE_INVALID.message});}var requestResult=this._database._connection.POST(this._prefixurl(url),JSON.stringify(data));arangosh.checkRequestResult(requestResult);return requestResult;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief removes a document in the collection
/// @param id the id of the document
/// @param overwrite (optional) a boolean value or a json object
/// @param waitForSync (optional) a boolean value .
/// @example remove("example/996280832675")
/// @example remove("example/996280832675", true)
/// @example remove("example/996280832675", false)
/// @example remove("example/996280832675", {waitForSync: false, overwrite: true})
////////////////////////////////////////////////////////////////////////////////
ArangoCollection.prototype.remove = function(id,overwrite,waitForSync){var rev=null;var requestResult;if(id === undefined || id === null){throw new ArangoError({errorNum:internal.errors.ERROR_ARANGO_DOCUMENT_HANDLE_BAD.code,errorMessage:internal.errors.ERROR_ARANGO_DOCUMENT_HANDLE_BAD.message});}if(id.hasOwnProperty("_id")){if(id.hasOwnProperty("_rev")){rev = id._rev;}id = id._id;}var params="";if(typeof overwrite === "object"){ // we assume the caller uses new signature (id, data, options)
if(typeof waitForSync !== "undefined"){throw "too many arguments";}var options=overwrite;if(options.hasOwnProperty("overwrite") && options.overwrite){params += "?policy=last";}if(options.hasOwnProperty("waitForSync")){waitForSync = options.waitForSync;}}else {if(overwrite){params += "?policy=last";}}var url=this._documenturl(id) + params;url = this._appendSyncParameter(url,waitForSync);if(rev === null){requestResult = this._database._connection.DELETE(url);}else {requestResult = this._database._connection.DELETE(url,{'if-match':JSON.stringify(rev)});}if(requestResult !== null && requestResult.error === true){if(overwrite){if(requestResult.errorNum === internal.errors.ERROR_ARANGO_DOCUMENT_NOT_FOUND.code){return false;}}throw new ArangoError(requestResult);}arangosh.checkRequestResult(requestResult);return true;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief replaces a document in the collection
/// @param id the id of the document
/// @param overwrite (optional) a boolean value or a json object
/// @param waitForSync (optional) a boolean value .
/// @example replace("example/996280832675", { a : 1, c : 2} )
/// @example replace("example/996280832675", { a : 1, c : 2}, true)
/// @example replace("example/996280832675", { a : 1, c : 2}, false)
/// @example replace("example/996280832675", { a : 1, c : 2}, {waitForSync: false, overwrite: true})
////////////////////////////////////////////////////////////////////////////////
ArangoCollection.prototype.replace = function(id,data,overwrite,waitForSync){var rev=null;var requestResult;if(id === undefined || id === null){throw new ArangoError({errorNum:internal.errors.ERROR_ARANGO_DOCUMENT_HANDLE_BAD.code,errorMessage:internal.errors.ERROR_ARANGO_DOCUMENT_HANDLE_BAD.message});}if(id.hasOwnProperty("_id")){if(id.hasOwnProperty("_rev")){rev = id._rev;}id = id._id;}var params="";if(typeof overwrite === "object"){if(typeof waitForSync !== "undefined"){throw "too many arguments";} // we assume the caller uses new signature (id, data, options)
var options=overwrite;if(options.hasOwnProperty("overwrite") && options.overwrite){params += "?policy=last";}if(options.hasOwnProperty("waitForSync")){waitForSync = options.waitForSync;}}else {if(overwrite){params += "?policy=last";}}var url=this._documenturl(id) + params;url = this._appendSyncParameter(url,waitForSync);if(rev === null){requestResult = this._database._connection.PUT(url,JSON.stringify(data));}else {requestResult = this._database._connection.PUT(url,JSON.stringify(data),{'if-match':JSON.stringify(rev)});}if(requestResult !== null && requestResult.error === true){throw new ArangoError(requestResult);}arangosh.checkRequestResult(requestResult);return requestResult;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief update a document in the collection
/// @param id the id of the document
/// @param overwrite (optional) a boolean value or a json object
/// @param keepNull (optional) determines if null values should saved or not
/// @param mergeObjects (optional) whether or not object values should be merged
/// @param waitForSync (optional) a boolean value .
/// @example update("example/996280832675", { a : 1, c : 2} )
/// @example update("example/996280832675", { a : 1, c : 2, x: null}, true, true, true)
/// @example update("example/996280832675", { a : 1, c : 2, x: null},
//                 {keepNull: true, waitForSync: false, overwrite: true})
////////////////////////////////////////////////////////////////////////////////
ArangoCollection.prototype.update = function(id,data,overwrite,keepNull,waitForSync){var rev=null;var requestResult;if(id === undefined || id === null){throw new ArangoError({errorNum:internal.errors.ERROR_ARANGO_DOCUMENT_HANDLE_BAD.code,errorMessage:internal.errors.ERROR_ARANGO_DOCUMENT_HANDLE_BAD.message});}if(id.hasOwnProperty("_id")){if(id.hasOwnProperty("_rev")){rev = id._rev;}id = id._id;}var params="";if(typeof overwrite === "object"){if(typeof keepNull !== "undefined"){throw "too many arguments";} // we assume the caller uses new signature (id, data, options)
var options=overwrite;if(!options.hasOwnProperty("keepNull")){options.keepNull = true;}params = "?keepNull=" + options.keepNull;if(!options.hasOwnProperty("mergeObjects")){options.mergeObjects = true;}params += "&mergeObjects=" + options.mergeObjects;if(options.hasOwnProperty("overwrite") && options.overwrite){params += "&policy=last";}}else { // set default value for keepNull
var keepNullValue=typeof keepNull === "undefined"?true:keepNull;params = "?keepNull=" + (keepNullValue?"true":"false");if(overwrite){params += "&policy=last";}}var url=this._documenturl(id) + params;url = this._appendSyncParameter(url,waitForSync);if(rev === null){requestResult = this._database._connection.PATCH(url,JSON.stringify(data));}else {requestResult = this._database._connection.PATCH(url,JSON.stringify(data),{'if-match':JSON.stringify(rev)});}if(requestResult !== null && requestResult.error === true){throw new ArangoError(requestResult);}arangosh.checkRequestResult(requestResult);return requestResult;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief returns the edges starting or ending in a vertex
////////////////////////////////////////////////////////////////////////////////
ArangoCollection.prototype.edges = function(vertex){return this._edgesQuery(vertex);}; ////////////////////////////////////////////////////////////////////////////////
/// @brief returns the edges ending in a vertex
////////////////////////////////////////////////////////////////////////////////
ArangoCollection.prototype.inEdges = function(vertex){return this._edgesQuery(vertex,"in");}; ////////////////////////////////////////////////////////////////////////////////
/// @brief returns the edges starting in a vertex
////////////////////////////////////////////////////////////////////////////////
ArangoCollection.prototype.outEdges = function(vertex){return this._edgesQuery(vertex,"out");}; ////////////////////////////////////////////////////////////////////////////////
/// @brief removes documents matching an example
////////////////////////////////////////////////////////////////////////////////
ArangoCollection.prototype.removeByExample = function(example,waitForSync,limit){var data={collection:this._name,example:example,waitForSync:waitForSync,limit:limit};if(typeof waitForSync === "object"){if(typeof limit !== "undefined"){throw "too many parameters";}data = {collection:this._name,example:example,options:waitForSync};}var requestResult=this._database._connection.PUT(this._prefixurl("/_api/simple/remove-by-example"),JSON.stringify(data));arangosh.checkRequestResult(requestResult);return requestResult.deleted;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief replaces documents matching an example
////////////////////////////////////////////////////////////////////////////////
ArangoCollection.prototype.replaceByExample = function(example,newValue,waitForSync,limit){var data={collection:this._name,example:example,newValue:newValue,waitForSync:waitForSync,limit:limit};if(typeof waitForSync === "object"){if(typeof limit !== "undefined"){throw "too many parameters";}data = {collection:this._name,example:example,newValue:newValue,options:waitForSync};}var requestResult=this._database._connection.PUT(this._prefixurl("/_api/simple/replace-by-example"),JSON.stringify(data));arangosh.checkRequestResult(requestResult);return requestResult.replaced;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief updates documents matching an example
////////////////////////////////////////////////////////////////////////////////
ArangoCollection.prototype.updateByExample = function(example,newValue,keepNull,waitForSync,limit){var data={collection:this._name,example:example,newValue:newValue,keepNull:keepNull,waitForSync:waitForSync,limit:limit};if(typeof keepNull === "object"){if(typeof waitForSync !== "undefined"){throw "too many parameters";}var options=keepNull;data = {collection:this._name,example:example,newValue:newValue,options:options};}var requestResult=this._database._connection.PUT(this._prefixurl("/_api/simple/update-by-example"),JSON.stringify(data));arangosh.checkRequestResult(requestResult);return requestResult.updated;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief looks up documents by keys
////////////////////////////////////////////////////////////////////////////////
ArangoCollection.prototype.documents = function(keys){var data={collection:this._name,keys:keys || []};var requestResult=this._database._connection.PUT(this._prefixurl("/_api/simple/lookup-by-keys"),JSON.stringify(data));arangosh.checkRequestResult(requestResult);return {documents:requestResult.documents};}; // .lookupByKeys is now an alias for .documents
ArangoCollection.prototype.lookupByKeys = ArangoCollection.prototype.documents; ////////////////////////////////////////////////////////////////////////////////
/// @brief removes documents by keys
////////////////////////////////////////////////////////////////////////////////
ArangoCollection.prototype.removeByKeys = function(keys){var data={collection:this._name,keys:keys || []};var requestResult=this._database._connection.PUT(this._prefixurl("/_api/simple/remove-by-keys"),JSON.stringify(data));arangosh.checkRequestResult(requestResult);return {removed:requestResult.removed,ignored:requestResult.ignored};};});module.define("@arangodb/arango-database",function(exports,module){ /*jshint strict: false */ ////////////////////////////////////////////////////////////////////////////////
/// @brief ArangoDatabase
///
/// @file
///
/// DISCLAIMER
///
/// Copyright 2013 triagens GmbH, Cologne, Germany
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///
///     http://www.apache.org/licenses/LICENSE-2.0
///
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// Copyright holder is triAGENS GmbH, Cologne, Germany
///
/// @author Achim Brandt
/// @author Dr. Frank Celler
/// @author Copyright 2012-2013, triAGENS GmbH, Cologne, Germany
////////////////////////////////////////////////////////////////////////////////
var internal=require("internal");var arangosh=require("@arangodb/arangosh"); ////////////////////////////////////////////////////////////////////////////////
/// @brief constructor
////////////////////////////////////////////////////////////////////////////////
var ArangoCollection;function ArangoDatabase(connection){this._connection = connection;this._collectionConstructor = ArangoCollection;this._properties = null;this._registerCollection = function(name,obj){ // store the collection in our own list
this[name] = obj;};}exports.ArangoDatabase = ArangoDatabase; // load after exporting ArangoDatabase
ArangoCollection = require("@arangodb/arango-collection").ArangoCollection;var ArangoError=require("@arangodb").ArangoError;var ArangoStatement=require("@arangodb/arango-statement").ArangoStatement; ////////////////////////////////////////////////////////////////////////////////
/// @brief index id regex
////////////////////////////////////////////////////////////////////////////////
ArangoDatabase.indexRegex = /^([a-zA-Z0-9\-_]+)\/([0-9]+)$/; ////////////////////////////////////////////////////////////////////////////////
/// @brief key regex
////////////////////////////////////////////////////////////////////////////////
ArangoDatabase.keyRegex = /^([a-zA-Z0-9_:\-@\.\(\)\+,=;\$!\*'%])+$/; ////////////////////////////////////////////////////////////////////////////////
/// @brief append the waitForSync parameter to a URL
////////////////////////////////////////////////////////////////////////////////
ArangoDatabase.prototype._appendSyncParameter = function(url,waitForSync){if(waitForSync){if(url.indexOf('?') === -1){url += '?';}else {url += '&';}url += 'waitForSync=true';}return url;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief return the base url for collection usage
////////////////////////////////////////////////////////////////////////////////
ArangoDatabase.prototype._collectionurl = function(id){if(id === undefined){return "/_api/collection";}return "/_api/collection/" + encodeURIComponent(id);}; ////////////////////////////////////////////////////////////////////////////////
/// @brief return the base url for document usage
////////////////////////////////////////////////////////////////////////////////
ArangoDatabase.prototype._documenturl = function(id,expectedName){var s=id.split("/");if(s.length !== 2){throw new ArangoError({error:true,code:internal.errors.ERROR_HTTP_BAD_PARAMETER.code,errorNum:internal.errors.ERROR_ARANGO_DOCUMENT_HANDLE_BAD.code,errorMessage:internal.errors.ERROR_ARANGO_DOCUMENT_HANDLE_BAD.message});}else if(expectedName !== undefined && expectedName !== "" && s[0] !== expectedName){throw new ArangoError({error:true,code:internal.errors.ERROR_HTTP_BAD_PARAMETER.code,errorNum:internal.errors.ERROR_ARANGO_CROSS_COLLECTION_REQUEST.code,errorMessage:internal.errors.ERROR_ARANGO_CROSS_COLLECTION_REQUEST.message});}if(ArangoDatabase.keyRegex.exec(s[1]) === null){throw new ArangoError({error:true,code:internal.errors.ERROR_HTTP_BAD_PARAMETER.code,errorNum:internal.errors.ERROR_ARANGO_DOCUMENT_HANDLE_BAD.code,errorMessage:internal.errors.ERROR_ARANGO_DOCUMENT_HANDLE_BAD.message});}return "/_api/document/" + encodeURIComponent(s[0]) + "/" + encodeURIComponent(s[1]);}; ////////////////////////////////////////////////////////////////////////////////
/// @brief return the base url for index usage
////////////////////////////////////////////////////////////////////////////////
ArangoDatabase.prototype._indexurl = function(id,expectedName){if(typeof id === "string"){var pa=ArangoDatabase.indexRegex.exec(id);if(pa === null && expectedName !== undefined){id = expectedName + "/" + id;}}else if(typeof id === "number" && expectedName !== undefined){ // stringify a numeric id
id = expectedName + "/" + id;}var s=id.split("/");if(s.length !== 2){ // invalid index handle
throw new ArangoError({error:true,code:internal.errors.ERROR_HTTP_BAD_PARAMETER.code,errorNum:internal.errors.ERROR_ARANGO_INDEX_HANDLE_BAD.code,errorMessage:internal.errors.ERROR_ARANGO_INDEX_HANDLE_BAD.message});}else if(expectedName !== undefined && expectedName !== "" && s[0] !== expectedName){ // index handle does not match collection name
throw new ArangoError({error:true,code:internal.errors.ERROR_HTTP_BAD_PARAMETER.code,errorNum:internal.errors.ERROR_ARANGO_CROSS_COLLECTION_REQUEST.code,errorMessage:internal.errors.ERROR_ARANGO_CROSS_COLLECTION_REQUEST.message});}return "/_api/index/" + encodeURIComponent(s[0]) + "/" + encodeURIComponent(s[1]);}; ////////////////////////////////////////////////////////////////////////////////
/// @brief prints the help for ArangoDatabase
////////////////////////////////////////////////////////////////////////////////
var helpArangoDatabase=arangosh.createHelpHeadline("ArangoDatabase (db) help") + 'Administration Functions:                                                 ' + "\n" + '  _help()                               this help                         ' + "\n" + '  _flushCache()                         flush and refill collection cache ' + "\n" + '                                                                          ' + "\n" + 'Collection Functions:                                                     ' + "\n" + '  _collections()                        list all collections              ' + "\n" + '  _collection(<name>)                   get collection by identifier/name ' + "\n" + '  _create(<name>, <properties>)         creates a new collection          ' + "\n" + '  _createEdgeCollection(<name>)         creates a new edge collection     ' + "\n" + '  _drop(<name>)                         delete a collection               ' + "\n" + '                                                                          ' + "\n" + 'Document Functions:                                                       ' + "\n" + '  _document(<id>)                       get document by handle (_id)      ' + "\n" + '  _replace(<id>, <data>, <overwrite>)   overwrite document                ' + "\n" + '  _update(<id>, <data>, <overwrite>,    partially update document         ' + "\n" + '          <keepNull>)                                                     ' + "\n" + '  _remove(<id>)                         delete document                   ' + "\n" + '  _exists(<id>)                         checks whether a document exists  ' + "\n" + '  _truncate()                           delete all documents              ' + "\n" + '                                                                          ' + "\n" + 'Database Management Functions:                                            ' + "\n" + '  _createDatabase(<name>)               creates a new database            ' + "\n" + '  _dropDatabase(<name>)                 drops an existing database        ' + "\n" + '  _useDatabase(<name>)                  switches into an existing database' + "\n" + '  _drop(<name>)                         delete a collection               ' + "\n" + '  _name()                               name of the current database      ' + "\n" + '                                                                          ' + "\n" + 'Query / Transaction Functions:                                            ' + "\n" + '  _executeTransaction(<transaction>)    execute transaction               ' + "\n" + '  _query(<query>)                       execute AQL query                 ' + "\n" + '  _createStatement(<data>)              create and return AQL query       ';ArangoDatabase.prototype._help = function(){internal.print(helpArangoDatabase);}; ////////////////////////////////////////////////////////////////////////////////
/// @brief return a string representation of the database object
////////////////////////////////////////////////////////////////////////////////
ArangoDatabase.prototype.toString = function(){return "[object ArangoDatabase \"" + this._name() + "\"]";}; ////////////////////////////////////////////////////////////////////////////////
/// @brief return all collections from the database
////////////////////////////////////////////////////////////////////////////////
ArangoDatabase.prototype._collections = function(){var requestResult=this._connection.GET(this._collectionurl());arangosh.checkRequestResult(requestResult);if(requestResult.collections !== undefined){var collections=requestResult.collections;var result=[];var i; // add all collentions to object
for(i = 0;i < collections.length;++i) {var collection=new this._collectionConstructor(this,collections[i]);this._registerCollection(collection._name,collection);result.push(collection);}return result;}return undefined;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief return a single collection, identified by its id or name
////////////////////////////////////////////////////////////////////////////////
ArangoDatabase.prototype._collection = function(id){var url;if(typeof id === "number"){url = this._collectionurl(id) + "?useId=true";}else {url = this._collectionurl(id);}var requestResult=this._connection.GET(url); // return null in case of not found
if(requestResult !== null && requestResult.error === true && requestResult.errorNum === internal.errors.ERROR_ARANGO_COLLECTION_NOT_FOUND.code){return null;} // check all other errors and throw them
arangosh.checkRequestResult(requestResult);var name=requestResult.name;if(name !== undefined){this._registerCollection(name,new this._collectionConstructor(this,requestResult));return this[name];}return null;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief creates a new collection
////////////////////////////////////////////////////////////////////////////////
ArangoDatabase.prototype._create = function(name,properties,type){var body={"name":name,"type":ArangoCollection.TYPE_DOCUMENT};if(properties !== undefined){["waitForSync","journalSize","isSystem","isVolatile","doCompact","keyOptions","shardKeys","numberOfShards","distributeShardsLike","indexBuckets","id","replicationFactor","replicationQuorum"].forEach(function(p){if(properties.hasOwnProperty(p)){body[p] = properties[p];}});}if(type !== undefined){body.type = type;}var requestResult=this._connection.POST(this._collectionurl(),JSON.stringify(body));arangosh.checkRequestResult(requestResult);var nname=requestResult.name;if(nname !== undefined){this._registerCollection(nname,new this._collectionConstructor(this,requestResult));return this[nname];}return undefined;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief creates a new document collection
////////////////////////////////////////////////////////////////////////////////
ArangoDatabase.prototype._createDocumentCollection = function(name,properties){return this._create(name,properties,ArangoCollection.TYPE_DOCUMENT);}; ////////////////////////////////////////////////////////////////////////////////
/// @brief creates a new edges collection
////////////////////////////////////////////////////////////////////////////////
ArangoDatabase.prototype._createEdgeCollection = function(name,properties){return this._create(name,properties,ArangoCollection.TYPE_EDGE);}; ////////////////////////////////////////////////////////////////////////////////
/// @brief truncates a collection
////////////////////////////////////////////////////////////////////////////////
ArangoDatabase.prototype._truncate = function(id){var name;if(typeof id !== "string"){id = id._id;}for(name in this) {if(this.hasOwnProperty(name)){var collection=this[name];if(collection instanceof this._collectionConstructor){if(collection._id === id || collection._name === id){return collection.truncate();}}}}return undefined;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief drops a collection
////////////////////////////////////////////////////////////////////////////////
ArangoDatabase.prototype._drop = function(id){var name;for(name in this) {if(this.hasOwnProperty(name)){var collection=this[name];if(collection instanceof this._collectionConstructor){if(collection._id === id || collection._name === id){return collection.drop();}}}}var c=this._collection(id);if(c){return c.drop();}return undefined;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief flush the local cache
/// this is called by connection.reconnect()
////////////////////////////////////////////////////////////////////////////////
ArangoDatabase.prototype._flushCache = function(){var name;for(name in this) {if(this.hasOwnProperty(name)){var collection=this[name];if(collection instanceof this._collectionConstructor){ // reset the collection status
collection._status = null;this[name] = undefined;}}}try{ // repopulate cache
this._collections();}catch(err) {}this._properties = null;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief query the database properties
////////////////////////////////////////////////////////////////////////////////
ArangoDatabase.prototype._queryProperties = function(force){if(force || this._properties === null){var url="/_api/database/current";var requestResult=this._connection.GET(url);arangosh.checkRequestResult(requestResult);this._properties = requestResult.result;}return this._properties;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief return the database id
////////////////////////////////////////////////////////////////////////////////
ArangoDatabase.prototype._id = function(){return this._queryProperties().id;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief return whether or not the current database is the system database
////////////////////////////////////////////////////////////////////////////////
ArangoDatabase.prototype._isSystem = function(){return this._queryProperties().isSystem;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief get the name of the current database
////////////////////////////////////////////////////////////////////////////////
ArangoDatabase.prototype._name = function(){return this._queryProperties().name;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief get the path of the current database
////////////////////////////////////////////////////////////////////////////////
ArangoDatabase.prototype._path = function(){return this._queryProperties().path;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief returns one index
////////////////////////////////////////////////////////////////////////////////
ArangoDatabase.prototype._index = function(id){if(id.hasOwnProperty("id")){id = id.id;}var requestResult=this._connection.GET(this._indexurl(id));arangosh.checkRequestResult(requestResult);return requestResult;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief deletes one index
////////////////////////////////////////////////////////////////////////////////
ArangoDatabase.prototype._dropIndex = function(id){if(id.hasOwnProperty("id")){id = id.id;}var requestResult=this._connection.DELETE(this._indexurl(id));if(requestResult !== null && requestResult.error === true && requestResult.errorNum === internal.errors.ERROR_ARANGO_INDEX_NOT_FOUND.code){return false;}arangosh.checkRequestResult(requestResult);return true;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief returns the database version
////////////////////////////////////////////////////////////////////////////////
ArangoDatabase.prototype._version = function(){var requestResult=this._connection.GET("/_api/version");arangosh.checkRequestResult(requestResult);return requestResult.version;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief return a single document from the collection, identified by its id
////////////////////////////////////////////////////////////////////////////////
ArangoDatabase.prototype._document = function(id){var rev=null;var requestResult;if(id.hasOwnProperty("_id")){if(id.hasOwnProperty("_rev")){rev = id._rev;}id = id._id;}if(rev === null){requestResult = this._connection.GET(this._documenturl(id));}else {requestResult = this._connection.GET(this._documenturl(id),{'if-match':JSON.stringify(rev)});}if(requestResult !== null && requestResult.error === true && requestResult.errorNum === internal.errors.ERROR_ARANGO_COLLECTION_NOT_FOUND.code){throw new ArangoError(requestResult);}arangosh.checkRequestResult(requestResult);return requestResult;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief checks whether a document exists, identified by its id
////////////////////////////////////////////////////////////////////////////////
ArangoDatabase.prototype._exists = function(id){var rev=null;var requestResult;if(id.hasOwnProperty("_id")){if(id.hasOwnProperty("_rev")){rev = id._rev;}id = id._id;}if(rev === null){requestResult = this._connection.HEAD(this._documenturl(id));}else {requestResult = this._connection.HEAD(this._documenturl(id),{'if-match':JSON.stringify(rev)});}if(requestResult !== null && requestResult.error === true && (requestResult.errorNum === internal.errors.ERROR_ARANGO_COLLECTION_NOT_FOUND.code || requestResult.errorNum === internal.errors.ERROR_HTTP_NOT_FOUND.code || requestResult.errorNum === internal.errors.ERROR_HTTP_PRECONDITION_FAILED.code)){return false;}arangosh.checkRequestResult(requestResult);return true;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief delete a document in the collection, identified by its id
////////////////////////////////////////////////////////////////////////////////
ArangoDatabase.prototype._remove = function(id,overwrite,waitForSync){var rev=null;var requestResult;if(id.hasOwnProperty("_id")){if(id.hasOwnProperty("_rev")){rev = id._rev;}id = id._id;}var params="";if(typeof overwrite === "object"){if(typeof waitForSync !== "undefined"){throw "too many arguments";} // we assume the caller uses new signature (id, data, options)
var options=overwrite;if(options.hasOwnProperty("overwrite") && options.overwrite){params += "?policy=last";}if(options.hasOwnProperty("waitForSync")){waitForSync = options.waitForSync;}}else {if(overwrite){params += "?policy=last";}}var url=this._documenturl(id) + params;url = this._appendSyncParameter(url,waitForSync);if(rev === null){requestResult = this._connection.DELETE(url);}else {requestResult = this._connection.DELETE(url,{'if-match':JSON.stringify(rev)});}if(requestResult !== null && requestResult.error === true){if(overwrite){if(requestResult.errorNum === internal.errors.ERROR_ARANGO_DOCUMENT_NOT_FOUND.code){return false;}}throw new ArangoError(requestResult);}arangosh.checkRequestResult(requestResult);return true;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief replace a document in the collection, identified by its id
////////////////////////////////////////////////////////////////////////////////
ArangoDatabase.prototype._replace = function(id,data,overwrite,waitForSync){var rev=null;var requestResult;if(id.hasOwnProperty("_id")){if(id.hasOwnProperty("_rev")){rev = id._rev;}id = id._id;}var params="";if(typeof overwrite === "object"){if(typeof waitForSync !== "undefined"){throw "too many arguments";} // we assume the caller uses new signature (id, data, options)
var options=overwrite;if(options.hasOwnProperty("overwrite") && options.overwrite){params += "?policy=last";}if(options.hasOwnProperty("waitForSync")){waitForSync = options.waitForSync;}}else {if(overwrite){params += "?policy=last";}}var url=this._documenturl(id) + params;url = this._appendSyncParameter(url,waitForSync);if(rev === null){requestResult = this._connection.PUT(url,JSON.stringify(data));}else {requestResult = this._connection.PUT(url,JSON.stringify(data),{'if-match':JSON.stringify(rev)});}if(requestResult !== null && requestResult.error === true){throw new ArangoError(requestResult);}arangosh.checkRequestResult(requestResult);return requestResult;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief update a document in the collection, identified by its id
////////////////////////////////////////////////////////////////////////////////
ArangoDatabase.prototype._update = function(id,data,overwrite,keepNull,waitForSync){var rev=null;var requestResult;if(id.hasOwnProperty("_id")){if(id.hasOwnProperty("_rev")){rev = id._rev;}id = id._id;}var params="";if(typeof overwrite === "object"){if(typeof keepNull !== "undefined"){throw "too many arguments";} // we assume the caller uses new signature (id, data, options)
var options=overwrite;if(!options.hasOwnProperty("keepNull")){options.keepNull = true;}params = "?keepNull=" + options.keepNull;if(!options.hasOwnProperty("mergeObjects")){options.mergeObjects = true;}params += "&mergeObjects=" + options.mergeObjects;if(options.hasOwnProperty("overwrite") && options.overwrite){params += "&policy=last";}}else { // set default value for keepNull
var keepNullValue=typeof keepNull === "undefined"?true:keepNull;params = "?keepNull=" + (keepNullValue?"true":"false");if(overwrite){params += "&policy=last";}}var url=this._documenturl(id) + params;url = this._appendSyncParameter(url,waitForSync);if(rev === null){requestResult = this._connection.PATCH(url,JSON.stringify(data));}else {requestResult = this._connection.PATCH(url,JSON.stringify(data),{'if-match':JSON.stringify(rev)});}if(requestResult !== null && requestResult.error === true){throw new ArangoError(requestResult);}arangosh.checkRequestResult(requestResult);return requestResult;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief factory method to create a new statement
////////////////////////////////////////////////////////////////////////////////
ArangoDatabase.prototype._createStatement = function(data){return new ArangoStatement(this,data);}; ////////////////////////////////////////////////////////////////////////////////
/// @brief factory method to create and execute a new statement
////////////////////////////////////////////////////////////////////////////////
ArangoDatabase.prototype._query = function(query,bindVars,cursorOptions,options){if(typeof query === "object" && query !== null && arguments.length === 1){return new ArangoStatement(this,query).execute();}var data={query:query,bindVars:bindVars || undefined,count:cursorOptions && cursorOptions.count || false,batchSize:cursorOptions && cursorOptions.batchSize || undefined,options:options || undefined,cache:options && options.cache || undefined};return new ArangoStatement(this,data).execute();}; ////////////////////////////////////////////////////////////////////////////////
/// @brief explains a query
////////////////////////////////////////////////////////////////////////////////
ArangoDatabase.prototype._explain = function(query,bindVars,options){if(typeof query === 'object' && typeof query.toAQL === 'function'){query = {query:query.toAQL()};}if(arguments.length > 1){query = {query:query,bindVars:bindVars,options:options};}require("@arangodb/aql/explainer").explain(query);}; ////////////////////////////////////////////////////////////////////////////////
/// @brief create a new database
////////////////////////////////////////////////////////////////////////////////
ArangoDatabase.prototype._createDatabase = function(name,options,users){var data={name:name,options:options || {},users:users || []};var requestResult=this._connection.POST("/_api/database",JSON.stringify(data));if(requestResult !== null && requestResult.error === true){throw new ArangoError(requestResult);}arangosh.checkRequestResult(requestResult);return requestResult.result;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief drop an existing database
////////////////////////////////////////////////////////////////////////////////
ArangoDatabase.prototype._dropDatabase = function(name){var requestResult=this._connection.DELETE("/_api/database/" + encodeURIComponent(name));if(requestResult !== null && requestResult.error === true){throw new ArangoError(requestResult);}arangosh.checkRequestResult(requestResult);return requestResult.result;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief list all existing databases
////////////////////////////////////////////////////////////////////////////////
ArangoDatabase.prototype._listDatabases = function(){var requestResult=this._connection.GET("/_api/database");if(requestResult !== null && requestResult.error === true){throw new ArangoError(requestResult);}arangosh.checkRequestResult(requestResult);return requestResult.result;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief uses a database
////////////////////////////////////////////////////////////////////////////////
ArangoDatabase.prototype._useDatabase = function(name){if(internal.printBrowser){throw new ArangoError({error:true,code:internal.errors.ERROR_NOT_IMPLEMENTED.code,errorNum:internal.errors.ERROR_NOT_IMPLEMENTED.code,errorMessage:"_useDatabase() is not supported in the web interface"});}var old=this._connection.getDatabaseName(); // no change
if(name === old){return true;}this._connection.setDatabaseName(name);try{ // re-query properties
this._queryProperties(true);this._flushCache();}catch(err) {this._connection.setDatabaseName(old);if(err.hasOwnProperty("errorNum")){throw err;}throw new ArangoError({error:true,code:internal.errors.ERROR_BAD_PARAMETER.code,errorNum:internal.errors.ERROR_BAD_PARAMETER.code,errorMessage:"cannot use database '" + name + "'"});}return true;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief lists all endpoints
////////////////////////////////////////////////////////////////////////////////
ArangoDatabase.prototype._listEndpoints = function(){var requestResult=this._connection.GET("/_api/endpoint");if(requestResult !== null && requestResult.error === true){throw new ArangoError(requestResult);}arangosh.checkRequestResult(requestResult);return requestResult;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief execute a transaction
////////////////////////////////////////////////////////////////////////////////
ArangoDatabase.prototype._executeTransaction = function(data){if(!data || typeof data !== 'object'){throw new ArangoError({error:true,code:internal.errors.ERROR_HTTP_BAD_PARAMETER.code,errorNum:internal.errors.ERROR_BAD_PARAMETER.code,errorMessage:"usage: _executeTransaction(<object>)"});}if(!data.collections || typeof data.collections !== 'object'){throw new ArangoError({error:true,code:internal.errors.ERROR_HTTP_BAD_PARAMETER.code,errorNum:internal.errors.ERROR_BAD_PARAMETER.code,errorMessage:"missing/invalid collections definition for transaction"});}if(!data.action || typeof data.action !== 'string' && typeof data.action !== 'function'){throw new ArangoError({error:true,code:internal.errors.ERROR_HTTP_BAD_PARAMETER.code,errorNum:internal.errors.ERROR_BAD_PARAMETER.code,errorMessage:"missing/invalid action definition for transaction"});}if(typeof data.action === 'function'){data.action = String(data.action);}var requestResult=this._connection.POST("/_api/transaction",JSON.stringify(data));if(requestResult !== null && requestResult.error === true){throw new ArangoError(requestResult);}arangosh.checkRequestResult(requestResult);return requestResult.result;};});module.define("@arangodb/arango-query-cursor",function(exports,module){ /*jshint strict: false */ /*global more:true */ ////////////////////////////////////////////////////////////////////////////////
/// @brief ArangoQueryCursor
///
/// @file
///
/// DISCLAIMER
///
/// Copyright 2013 triagens GmbH, Cologne, Germany
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///
///     http://www.apache.org/licenses/LICENSE-2.0
///
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// Copyright holder is triAGENS GmbH, Cologne, Germany
///
/// @author Achim Brandt
/// @author Dr. Frank Celler
/// @author Copyright 2012-2013, triAGENS GmbH, Cologne, Germany
////////////////////////////////////////////////////////////////////////////////
var internal=require("internal");var arangosh=require("@arangodb/arangosh"); ////////////////////////////////////////////////////////////////////////////////
/// @brief constructor
////////////////////////////////////////////////////////////////////////////////
function ArangoQueryCursor(database,data){this._database = database;this._dbName = database._name();this.data = data;this._hasNext = false;this._hasMore = false;this._pos = 0;this._count = 0;this._total = 0;if(data.result !== undefined){this._count = data.result.length;if(this._pos < this._count){this._hasNext = true;}if(data.hasMore !== undefined && data.hasMore){this._hasMore = true;}}}exports.ArangoQueryCursor = ArangoQueryCursor; ////////////////////////////////////////////////////////////////////////////////
/// @brief return a string representation of the cursor
////////////////////////////////////////////////////////////////////////////////
ArangoQueryCursor.prototype.toString = function(){var isCaptureModeActive=internal.isCaptureMode();var rows=[],i=0;while(++i <= 10 && this.hasNext()) {rows.push(this.next());}var result="[object ArangoQueryCursor";if(this.data.id){result += " " + this.data.id;}if(this._count !== null && this._count !== undefined){result += ", count: " + this._count;}result += ", hasMore: " + (this.hasNext()?"true":"false");if(this.data.hasOwnProperty("extra") && this.data.extra.hasOwnProperty("warnings")){for(var j=0;j < this.data.extra.warnings.length;j++) {result += ", warning: " + this.data.extra.warnings[j].code + " - " + this.data.extra.warnings[j].message;}}result += "]";if(!isCaptureModeActive){internal.print(result);result = "";}if(rows.length > 0){if(!isCaptureModeActive){var old=internal.startCaptureMode();internal.print(rows);result += "\n\n" + internal.stopCaptureMode(old);}else {internal.print(rows);}if(this.hasNext()){result += "\ntype 'more' to show more documents\n";more = this; // assign cursor to global variable more!
}}if(!isCaptureModeActive){internal.print(result);result = "";}return result;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief return all remaining result documents from the cursor
///
/// If no more results are available locally but more results are available on
/// the server, this function will make one or multiple roundtrips to the
/// server. Calling this function will also fully exhaust the cursor.
////////////////////////////////////////////////////////////////////////////////
ArangoQueryCursor.prototype.toArray = function(){var result=[];while(this.hasNext()) {result.push(this.next());}return result;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief print the help for the cursor
////////////////////////////////////////////////////////////////////////////////
var helpArangoQueryCursor=arangosh.createHelpHeadline("ArangoQueryCursor help") + 'ArangoQueryCursor constructor:                                      ' + "\n" + ' > cursor = stmt.execute()                                          ' + "\n" + 'Functions:                                                          ' + "\n" + '  hasNext()                             returns true if there are   ' + "\n" + '                                        more results to fetch       ' + "\n" + '  next()                                returns the next document   ' + "\n" + '  toArray()                             returns all data from the cursor' + "\n" + '  _help()                               this help                   ' + "\n" + 'Attributes:                                                         ' + "\n" + '  _database                             database object             ' + "\n" + 'Example:                                                            ' + "\n" + ' > stmt = db._createStatement({ "query": "FOR c IN coll RETURN c" })' + "\n" + ' > cursor = stmt.execute()                                          ' + "\n" + ' > documents = cursor.toArray()                                     ' + "\n" + ' > cursor = stmt.execute()                                          ' + "\n" + ' > while (cursor.hasNext()) { print(cursor.next())  }               ';ArangoQueryCursor.prototype._help = function(){internal.print(helpArangoQueryCursor);}; ////////////////////////////////////////////////////////////////////////////////
/// @brief return whether there are more results available in the cursor
////////////////////////////////////////////////////////////////////////////////
ArangoQueryCursor.prototype.hasNext = function(){return this._hasNext;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief return the next result document from the cursor
///
/// If no more results are available locally but more results are available on
/// the server, this function will make a roundtrip to the server
////////////////////////////////////////////////////////////////////////////////
ArangoQueryCursor.prototype.next = function(){if(!this._hasNext){throw "No more results";}var result=this.data.result[this._pos];this._pos++; // reached last result
if(this._pos === this._count){this._hasNext = false;this._pos = 0;if(this._hasMore && this.data.id){this._hasMore = false; // load more results
var requestResult=this._database._connection.PUT(this._baseurl(),"");arangosh.checkRequestResult(requestResult);this.data = requestResult;this._count = requestResult.result.length;if(this._pos < this._count){this._hasNext = true;}if(requestResult.hasMore !== undefined && requestResult.hasMore){this._hasMore = true;}}}return result;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief explicitly dispose the cursor
///
/// Calling this function will mark the cursor as deleted on the server. It will
/// therefore make a roundtrip to the server. Using a cursor after it has been
/// disposed is considered a user error
////////////////////////////////////////////////////////////////////////////////
ArangoQueryCursor.prototype.dispose = function(){if(!this.data.id){ // client side only cursor
return;}var requestResult=this._database._connection.DELETE(this._baseurl(),"");arangosh.checkRequestResult(requestResult);this.data.id = undefined;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief return the total number of documents in the cursor
///
/// The number will remain the same regardless how much result documents have
/// already been fetched from the cursor.
///
/// This function will return the number only if the cursor was constructed
/// with the "doCount" attribute. Otherwise it will return undefined.
////////////////////////////////////////////////////////////////////////////////
ArangoQueryCursor.prototype.count = function(){return this.data.count;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief return extra data stored for the cursor (if any)
////////////////////////////////////////////////////////////////////////////////
ArangoQueryCursor.prototype.getExtra = function(){return this.data.extra || {};}; ////////////////////////////////////////////////////////////////////////////////
/// @brief return baseurl for query cursor
////////////////////////////////////////////////////////////////////////////////
ArangoQueryCursor.prototype._baseurl = function(){return "/_db/" + encodeURIComponent(this._dbName) + "/_api/cursor/" + encodeURIComponent(this.data.id);};});module.define("@arangodb/arango-statement",function(exports,module){ /*jshint strict: false */ ////////////////////////////////////////////////////////////////////////////////
/// @brief ArangoStatement
///
/// @file
///
/// DISCLAIMER
///
/// Copyright 2013 triagens GmbH, Cologne, Germany
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///
///     http://www.apache.org/licenses/LICENSE-2.0
///
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// Copyright holder is triAGENS GmbH, Cologne, Germany
///
/// @author Achim Brandt
/// @author Dr. Frank Celler
/// @author Copyright 2012-2013, triAGENS GmbH, Cologne, Germany
////////////////////////////////////////////////////////////////////////////////
var internal=require("internal");var arangosh=require("@arangodb/arangosh");var ArangoStatement=require("@arangodb/arango-statement-common").ArangoStatement;var ArangoQueryCursor=require("@arangodb/arango-query-cursor").ArangoQueryCursor; ////////////////////////////////////////////////////////////////////////////////
/// @brief return a string representation of the statement
////////////////////////////////////////////////////////////////////////////////
ArangoStatement.prototype.toString = function(){return arangosh.getIdString(this,"ArangoStatement");}; ////////////////////////////////////////////////////////////////////////////////
/// @brief prints the help for ArangoStatement
////////////////////////////////////////////////////////////////////////////////
var helpArangoStatement=arangosh.createHelpHeadline("ArangoStatement help") + 'Create an AQL query:                                                    ' + "\n" + ' > stmt = new ArangoStatement(db, { "query": "FOR..." })                ' + "\n" + ' > stmt = db._createStatement({ "query": "FOR..." })                    ' + "\n" + 'Set query options:                                                      ' + "\n" + ' > stmt.setBatchSize(<value>)           set the max. number of results  ' + "\n" + '                                        to be transferred per roundtrip ' + "\n" + ' > stmt.setCount(<value>)               set count flag (return number of' + "\n" + '                                        results in "count" attribute)   ' + "\n" + 'Get query options:                                                      ' + "\n" + ' > stmt.setBatchSize()                  return the max. number of results' + "\n" + '                                        to be transferred per roundtrip ' + "\n" + ' > stmt.getCount()                      return count flag (return number' + "\n" + '                                        of results in "count" attribute)' + "\n" + ' > stmt.getQuery()                      return query string             ' + "\n" + '                                        results in "count" attribute)   ' + "\n" + 'Bind parameters to a query:                                             ' + "\n" + ' > stmt.bind(<key>, <value>)            bind single variable            ' + "\n" + ' > stmt.bind(<values>)                  bind multiple variables         ' + "\n" + 'Execute query:                                                          ' + "\n" + ' > cursor = stmt.execute()              returns a cursor                ' + "\n" + 'Get all results in an array:                                            ' + "\n" + ' > docs = cursor.toArray()                                              ' + "\n" + 'Or loop over the result set:                                            ' + "\n" + ' > while (cursor.hasNext()) { print(cursor.next()) }                    ';ArangoStatement.prototype._help = function(){internal.print(helpArangoStatement);}; ////////////////////////////////////////////////////////////////////////////////
/// @brief parse a query and return the results
////////////////////////////////////////////////////////////////////////////////
ArangoStatement.prototype.parse = function(){var body={query:this._query};var requestResult=this._database._connection.POST("/_api/query",JSON.stringify(body));arangosh.checkRequestResult(requestResult);var result={bindVars:requestResult.bindVars,collections:requestResult.collections,ast:requestResult.ast};return result;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief explain a query and return the results
////////////////////////////////////////////////////////////////////////////////
ArangoStatement.prototype.explain = function(options){var opts=this._options || {};if(typeof opts === 'object' && typeof options === 'object'){Object.keys(options).forEach(function(o){ // copy options
opts[o] = options[o];});}var body={query:this._query,bindVars:this._bindVars,options:opts};var requestResult=this._database._connection.POST("/_api/explain",JSON.stringify(body));arangosh.checkRequestResult(requestResult);if(opts && opts.allPlans){return {plans:requestResult.plans,warnings:requestResult.warnings,stats:requestResult.stats};}else {return {plan:requestResult.plan,warnings:requestResult.warnings,stats:requestResult.stats,cacheable:requestResult.cacheable};}}; ////////////////////////////////////////////////////////////////////////////////
/// @brief execute the query
///
/// Invoking execute() will transfer the query and all bind parameters to the
/// server. It will return a cursor with the query results in case of success.
/// In case of an error, the error will be printed
////////////////////////////////////////////////////////////////////////////////
ArangoStatement.prototype.execute = function(){var body={query:this._query,count:this._doCount,bindVars:this._bindVars};if(this._batchSize){body.batchSize = this._batchSize;}if(this._options){body.options = this._options;}if(this._cache !== undefined){body.cache = this._cache;}var requestResult=this._database._connection.POST("/_api/cursor",JSON.stringify(body));arangosh.checkRequestResult(requestResult);return new ArangoQueryCursor(this._database,requestResult);};exports.ArangoStatement = ArangoStatement;});module.define("@arangodb/arangosh",function(exports,module){ /*jshint strict: false */ ////////////////////////////////////////////////////////////////////////////////
/// @brief ArangoShell client API
///
/// @file
///
/// DISCLAIMER
///
/// Copyright 2013 triagens GmbH, Cologne, Germany
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///
///     http://www.apache.org/licenses/LICENSE-2.0
///
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// Copyright holder is triAGENS GmbH, Cologne, Germany
///
/// @author Achim Brandt
/// @author Dr. Frank Celler
/// @author Copyright 2012-2013, triAGENS GmbH, Cologne, Germany
////////////////////////////////////////////////////////////////////////////////
var internal=require("internal"); ////////////////////////////////////////////////////////////////////////////////
/// @brief return a formatted type string for object
///
/// If the object has an id, it will be included in the string.
////////////////////////////////////////////////////////////////////////////////
exports.getIdString = function(object,typeName){var result="[object " + typeName;if(object._id){result += ":" + object._id;}else if(object.data && object.data._id){result += ":" + object.data._id;}result += "]";return result;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief create a formatted headline text
////////////////////////////////////////////////////////////////////////////////
exports.createHelpHeadline = function(text){var i;var p="";var x=Math.abs(78 - text.length) / 2;for(i = 0;i < x;++i) {p += "-";}return "\n" + p + " " + text + " " + p + "\n";}; ////////////////////////////////////////////////////////////////////////////////
/// @brief handles error results
///
/// throws an exception in case of an an error
////////////////////////////////////////////////////////////////////////////////
// must came after the export of createHelpHeadline
var arangodb=require("@arangodb");var ArangoError=arangodb.ArangoError;exports.checkRequestResult = function(requestResult){if(requestResult === undefined){throw new ArangoError({"error":true,"code":500,"errorNum":arangodb.ERROR_INTERNAL,"errorMessage":"Unknown error. Request result is empty"});}if(requestResult.hasOwnProperty('error')){if(requestResult.error){if(requestResult.errorNum === arangodb.ERROR_TYPE_ERROR){throw new TypeError(requestResult.errorMessage);}var error=new ArangoError(requestResult);error.message = requestResult.message;throw error;} // remove the property from the original object
delete requestResult.error;}return requestResult;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief general help
////////////////////////////////////////////////////////////////////////////////
exports.HELP = exports.createHelpHeadline("Help") + 'Predefined objects:                                                ' + "\n" + '  arango:                               ArangoConnection           ' + "\n" + '  db:                                   ArangoDatabase             ' + "\n" + (internal.printBrowser?'':'  fm:                                   FoxxManager                ' + "\n") + 'Examples:                                                          ' + "\n" + ' > db._collections()                    list all collections       ' + "\n" + ' > db._query(<query>).toArray()         execute an AQL query       ' + "\n" + ' > db._explain(<query>)                 explain an AQL query       ' + "\n" + ' > help                                 show help pages            ' + "\n" + ' > exit                                                            ' + "\n" + 'Note: collection names and statuses may be cached in arangosh.     ' + "\n" + 'To refresh the list of collections and their statuses, issue:      ' + "\n" + ' > db._collections();                                              ' + "\n" + '                                                                   ' + "\n" + (internal.printBrowser?'To cancel the current prompt, press CTRL + z.                      ' + "\n" + '                                                                   ' + "\n" + 'Please note that all variables defined with the var keyword will   ' + "\n" + 'disappear when the command is finished. To introduce variables that' + "\n" + 'are persisting until the next command, omit the var keyword.       ' + "\n\n" + 'Type \'tutorial\' for a tutorial or \'help\' to see common examples':'To cancel the current prompt, press CTRL + d.                      ' + "\n"); ////////////////////////////////////////////////////////////////////////////////
/// @brief query help
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
/// @brief extended help
////////////////////////////////////////////////////////////////////////////////
exports.helpExtended = exports.createHelpHeadline("More help") + 'Pager:                                                              ' + "\n" + ' > stop_pager()                         stop the pager output       ' + "\n" + ' > start_pager()                        start the pager             ' + "\n" + 'Pretty printing:                                                    ' + "\n" + ' > stop_pretty_print()                  stop pretty printing        ' + "\n" + ' > start_pretty_print()                 start pretty printing       ' + "\n" + 'Color output:                                                       ' + "\n" + ' > stop_color_print()                   stop color printing         ' + "\n" + ' > start_color_print()                  start color printing        ' + "\n" + 'Print function:                                                     ' + "\n" + ' > print(x)                             std. print function         ' + "\n" + ' > print_plain(x)                       print without prettifying   ' + "\n" + '                                        and without colors          ' + "\n" + ' > clear()                              clear screen                ';});module.define("@arangodb/graph-blueprint",function(exports,module){ /*jshint strict: false */ ////////////////////////////////////////////////////////////////////////////////
/// @brief Graph functionality
///
/// @file
///
/// DISCLAIMER
///
/// Copyright 2010-2012 triagens GmbH, Cologne, Germany
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///
///     http://www.apache.org/licenses/LICENSE-2.0
///
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// Copyright holder is triAGENS GmbH, Cologne, Germany
///
/// @author Dr. Frank Celler, Lucas Dohmen
/// @author Copyright 2011-2012, triAGENS GmbH, Cologne, Germany
////////////////////////////////////////////////////////////////////////////////
var arangodb=require("@arangodb"),is=require("@arangodb/is"),common=require("@arangodb/graph-common"),Edge=common.Edge,Graph=common.Graph,Vertex=common.Vertex,GraphArray=common.GraphArray,Iterator=common.Iterator,GraphAPI=require("@arangodb/api/graph").GraphAPI; ////////////////////////////////////////////////////////////////////////////////
/// @brief changes a property of an edge
////////////////////////////////////////////////////////////////////////////////
Edge.prototype.setProperty = function(name,value){var results,update=this._properties;update[name] = value;this._graph.emptyCachedPredecessors();results = GraphAPI.putEdge(this._graph._properties._key,this._properties._key,update);this._properties = results.edge;return name;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief inbound and outbound edges
////////////////////////////////////////////////////////////////////////////////
Vertex.prototype.edges = function(direction,labels){var edge,edges=new GraphArray(),cursor;cursor = GraphAPI.postEdges(this._graph._vertices._database,this._graph._properties._key,this,{filter:{direction:direction,labels:labels}});while(cursor.hasNext()) {edge = new Edge(this._graph,cursor.next());edges.push(edge);}return edges;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief inbound edges with given label
////////////////////////////////////////////////////////////////////////////////
Vertex.prototype.getInEdges = function(){var labels=Array.prototype.slice.call(arguments);return this.edges("in",labels);}; ////////////////////////////////////////////////////////////////////////////////
/// @brief outbound edges with given label
////////////////////////////////////////////////////////////////////////////////
Vertex.prototype.getOutEdges = function(){var labels=Array.prototype.slice.call(arguments);return this.edges("out",labels);}; ////////////////////////////////////////////////////////////////////////////////
/// @brief in- or outbound edges with given label
////////////////////////////////////////////////////////////////////////////////
Vertex.prototype.getEdges = function(){var labels=Array.prototype.slice.call(arguments);return this.edges("any",labels);}; ////////////////////////////////////////////////////////////////////////////////
/// @brief inbound edges
////////////////////////////////////////////////////////////////////////////////
Vertex.prototype.inbound = function(){return this.getInEdges();}; ////////////////////////////////////////////////////////////////////////////////
/// @brief outbound edges
////////////////////////////////////////////////////////////////////////////////
Vertex.prototype.outbound = function(){return this.getOutEdges();}; ////////////////////////////////////////////////////////////////////////////////
/// @brief changes a property of a vertex
////////////////////////////////////////////////////////////////////////////////
Vertex.prototype.setProperty = function(name,value){var results,update=this._properties;update[name] = value;results = GraphAPI.putVertex(this._graph._properties._key,this._properties._key,update);this._properties = results.vertex;return name;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief constructs a new graph object
////////////////////////////////////////////////////////////////////////////////
Graph.prototype.initialize = function(name,vertices,edges){var results;if(is.notExisty(vertices) && is.notExisty(edges)){results = GraphAPI.getGraph(name);}else {if(typeof vertices === 'object' && typeof vertices.name === 'function'){vertices = vertices.name();}if(typeof edges === 'object' && typeof edges.name === 'function'){edges = edges.name();}results = GraphAPI.postGraph({_key:name,vertices:vertices,edges:edges});}this._properties = results.graph;this._vertices = arangodb.db._collection(this._properties.edgeDefinitions[0].from[0]);this._edges = arangodb.db._collection(this._properties.edgeDefinitions[0].collection); // and dictionary for vertices and edges
this._verticesCache = {};this._edgesCache = {}; // and store the cashes
this.predecessors = {};this.distances = {};return this;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief return all graphs
////////////////////////////////////////////////////////////////////////////////
Graph.getAll = function(){return GraphAPI.getAllGraphs();}; ////////////////////////////////////////////////////////////////////////////////
/// @brief static delete method
////////////////////////////////////////////////////////////////////////////////
Graph.drop = function(name){GraphAPI.deleteGraph(name);}; ////////////////////////////////////////////////////////////////////////////////
/// @brief drops the graph, the vertices, and the edges
////////////////////////////////////////////////////////////////////////////////
Graph.prototype.drop = function(){GraphAPI.deleteGraph(this._properties._key);}; ////////////////////////////////////////////////////////////////////////////////
/// @brief saves an edge to the graph
////////////////////////////////////////////////////////////////////////////////
Graph.prototype._saveEdge = function(id,out_vertex_id,in_vertex_id,params){var results;this.emptyCachedPredecessors();params._key = id;params._from = out_vertex_id;params._to = in_vertex_id;results = GraphAPI.postEdge(this._properties._key,params);return new Edge(this,results.edge);}; ////////////////////////////////////////////////////////////////////////////////
/// @brief saves a vertex to the graph
////////////////////////////////////////////////////////////////////////////////
Graph.prototype._saveVertex = function(id,params){var results;if(is.existy(id)){params._key = id;}results = GraphAPI.postVertex(this._properties._key,params);return new Vertex(this,results.vertex);}; ////////////////////////////////////////////////////////////////////////////////
/// @brief replace a vertex in the graph
////////////////////////////////////////////////////////////////////////////////
Graph.prototype._replaceVertex = function(id,data){GraphAPI.putVertex(this._properties._key,id,data);}; ////////////////////////////////////////////////////////////////////////////////
/// @brief replace an edge in the graph
////////////////////////////////////////////////////////////////////////////////
Graph.prototype._replaceEdge = function(id,data){GraphAPI.putEdge(this._properties._key,id,data);}; ////////////////////////////////////////////////////////////////////////////////
/// @brief returns a vertex given its id
////////////////////////////////////////////////////////////////////////////////
Graph.prototype.getVertex = function(id){var results=GraphAPI.getVertex(this._properties._key,id);if(is.notExisty(results)){return null;}return new Vertex(this,results.vertex);}; ////////////////////////////////////////////////////////////////////////////////
/// @brief returns an iterator for all vertices
////////////////////////////////////////////////////////////////////////////////
Graph.prototype.getVertices = function(){var cursor=GraphAPI.getVertices(this._vertices._database,this._properties._key,{}),graph=this,wrapper=function wrapper(object){return new Vertex(graph,object);};return new Iterator(wrapper,cursor,"[vertex iterator]");}; ////////////////////////////////////////////////////////////////////////////////
/// @brief returns an edge given its id
////////////////////////////////////////////////////////////////////////////////
Graph.prototype.getEdge = function(id){var results=GraphAPI.getEdge(this._properties._key,id);if(is.notExisty(results)){return null;}return new Edge(this,results.edge);}; ////////////////////////////////////////////////////////////////////////////////
/// @brief returns an iterator for all edges
////////////////////////////////////////////////////////////////////////////////
Graph.prototype.getEdges = function(){var cursor=GraphAPI.getEdges(this._vertices._database,this._properties._key,{}),graph=this,wrapper=function wrapper(object){return new Edge(graph,object);};return new Iterator(wrapper,cursor,"[edge iterator]");}; ////////////////////////////////////////////////////////////////////////////////
/// @brief removes a vertex and all in- or out-bound edges
////////////////////////////////////////////////////////////////////////////////
Graph.prototype.removeVertex = function(vertex){this.emptyCachedPredecessors();GraphAPI.deleteVertex(this._properties._key,vertex._properties._key);vertex._properties = undefined;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief removes an edge
////////////////////////////////////////////////////////////////////////////////
Graph.prototype.removeEdge = function(edge){this.emptyCachedPredecessors();GraphAPI.deleteEdge(this._properties._key,edge._properties._key);this._edgesCache[edge._properties._id] = undefined;edge._properties = undefined;};exports.Edge = Edge;exports.Graph = Graph;exports.Vertex = Vertex;exports.GraphArray = GraphArray;require("@arangodb/graph/algorithms-common");});module.define("@arangodb/index",function(exports,module){'use strict'; ////////////////////////////////////////////////////////////////////////////////
/// @brief JavaScript base module
///
/// @file
///
/// DISCLAIMER
///
/// Copyright 2012 triagens GmbH, Cologne, Germany
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///
///     http://www.apache.org/licenses/LICENSE-2.0
///
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// Copyright holder is triAGENS GmbH, Cologne, Germany
///
/// @author Dr. Frank Celler
/// @author Copyright 2012, triAGENS GmbH, Cologne, Germany
////////////////////////////////////////////////////////////////////////////////
var internal=require("internal");var common=require("@arangodb/common");Object.keys(common).forEach(function(key){exports[key] = common[key];}); ////////////////////////////////////////////////////////////////////////////////
/// @brief isServer
////////////////////////////////////////////////////////////////////////////////
exports.isServer = false; ////////////////////////////////////////////////////////////////////////////////
/// @brief isClient
////////////////////////////////////////////////////////////////////////////////
exports.isClient = true; ////////////////////////////////////////////////////////////////////////////////
/// @brief class "ArangoCollection"
////////////////////////////////////////////////////////////////////////////////
// cannot yet not use arangodb
exports.ArangoCollection = require("@arangodb/arango-collection").ArangoCollection; ////////////////////////////////////////////////////////////////////////////////
/// @brief class "ArangoConnection"
////////////////////////////////////////////////////////////////////////////////
exports.ArangoConnection = internal.ArangoConnection; ////////////////////////////////////////////////////////////////////////////////
/// @brief class "ArangoDatabase"
////////////////////////////////////////////////////////////////////////////////
// cannot yet not use arangodb
exports.ArangoDatabase = require("@arangodb/arango-database").ArangoDatabase; ////////////////////////////////////////////////////////////////////////////////
/// @brief class "ArangoStatement"
////////////////////////////////////////////////////////////////////////////////
// cannot yet not use arangodb
exports.ArangoStatement = require("@arangodb/arango-statement").ArangoStatement; ////////////////////////////////////////////////////////////////////////////////
/// @brief class "ArangoQueryCursor"
////////////////////////////////////////////////////////////////////////////////
// cannot yet not use arangodb
exports.ArangoQueryCursor = require("@arangodb/arango-query-cursor").ArangoQueryCursor; ////////////////////////////////////////////////////////////////////////////////
/// @brief the global "db" and "arango" object
////////////////////////////////////////////////////////////////////////////////
if(typeof internal.arango !== 'undefined'){try{exports.arango = internal.arango;exports.db = new exports.ArangoDatabase(internal.arango);internal.db = exports.db; // TODO remove
}catch(err) {internal.print("cannot connect to server: " + String(err));}} ////////////////////////////////////////////////////////////////////////////////
/// @brief the server version
////////////////////////////////////////////////////////////////////////////////
exports.plainServerVersion = function(){if(internal.arango){var version=internal.arango.getVersion();var devel=version.match(/(.*)-((alpha|beta|devel|rc)[0-9]*)$/);if(devel !== null){version = devel[1];}return version;}else {return undefined;}};});module.define("@arangodb/replication",function(exports,module){'use strict'; ////////////////////////////////////////////////////////////////////////////////
/// @brief Replication management
///
/// @file
///
/// DISCLAIMER
///
/// Copyright 2012 triagens GmbH, Cologne, Germany
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///
///     http://www.apache.org/licenses/LICENSE-2.0
///
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// Copyright holder is triAGENS GmbH, Cologne, Germany
///
/// @author Jan Steemann
/// @author Copyright 2013, triAGENS GmbH, Cologne, Germany
////////////////////////////////////////////////////////////////////////////////
var internal=require("internal");var arangosh=require("@arangodb/arangosh");var logger={};var applier={}; ////////////////////////////////////////////////////////////////////////////////
/// @brief return the replication logger state
////////////////////////////////////////////////////////////////////////////////
logger.state = function(){var db=internal.db;var requestResult=db._connection.GET("/_api/replication/logger-state");arangosh.checkRequestResult(requestResult);return requestResult;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief return the tick ranges that can be provided by the replication logger
////////////////////////////////////////////////////////////////////////////////
logger.tickRanges = function(){var db=internal.db;var requestResult=db._connection.GET("/_api/replication/logger-tick-ranges");arangosh.checkRequestResult(requestResult);return requestResult;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief return the first tick that can be provided by the replication logger
////////////////////////////////////////////////////////////////////////////////
logger.firstTick = function(){var db=internal.db;var requestResult=db._connection.GET("/_api/replication/logger-first-tick");arangosh.checkRequestResult(requestResult);return requestResult.firstTick;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief starts the replication applier
////////////////////////////////////////////////////////////////////////////////
applier.start = function(initialTick,barrierId){var db=internal.db;var append="";if(initialTick !== undefined){append = "?from=" + encodeURIComponent(initialTick);}if(barrierId !== undefined){if(append === ""){append += "?";}else {append += "&";}append += "barrierId=" + encodeURIComponent(barrierId);}var requestResult=db._connection.PUT("/_api/replication/applier-start" + append,"");arangosh.checkRequestResult(requestResult);return requestResult;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief stops the replication applier
////////////////////////////////////////////////////////////////////////////////
applier.stop = applier.shutdown = function(){var db=internal.db;var requestResult=db._connection.PUT("/_api/replication/applier-stop","");arangosh.checkRequestResult(requestResult);return requestResult;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief return the replication applier state
////////////////////////////////////////////////////////////////////////////////
applier.state = function(){var db=internal.db;var requestResult=db._connection.GET("/_api/replication/applier-state");arangosh.checkRequestResult(requestResult);return requestResult;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief stop the replication applier state and "forget" all state
////////////////////////////////////////////////////////////////////////////////
applier.forget = function(){var db=internal.db;var requestResult=db._connection.DELETE("/_api/replication/applier-state");arangosh.checkRequestResult(requestResult);return requestResult;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief configures the replication applier
////////////////////////////////////////////////////////////////////////////////
applier.properties = function(config){var db=internal.db;var requestResult;if(config === undefined){requestResult = db._connection.GET("/_api/replication/applier-config");}else {requestResult = db._connection.PUT("/_api/replication/applier-config",JSON.stringify(config));}arangosh.checkRequestResult(requestResult);return requestResult;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief helper function for fetching the result of an async job
////////////////////////////////////////////////////////////////////////////////
var waitForResult=function waitForResult(config,id){var db=internal.db;if(!config.hasOwnProperty("progress")){config.progress = true;}internal.sleep(1);var iterations=0;while(true) {var jobResult=db._connection.PUT("/_api/job/" + encodeURIComponent(id),"");arangosh.checkRequestResult(jobResult);if(jobResult.code !== 204){return jobResult;}++iterations;if(iterations < 6){internal.sleep(2);}else {internal.sleep(3);}if(config.progress && iterations % 3 === 0){try{var progress=applier.state().state.progress;var msg=progress.time + ": " + progress.message;internal.print("still sychronizing... last received status: " + msg);}catch(err) {}}}}; ////////////////////////////////////////////////////////////////////////////////
/// @brief performs a one-time synchronization with a remote endpoint
////////////////////////////////////////////////////////////////////////////////
var sync=function sync(config){var db=internal.db;var body=JSON.stringify(config || {});var headers={"X-Arango-Async":"store"};var requestResult=db._connection.PUT_RAW("/_api/replication/sync",body,headers);arangosh.checkRequestResult(requestResult);if(config.async){return requestResult.headers["x-arango-async-id"];}return waitForResult(config,requestResult.headers["x-arango-async-id"]);}; ////////////////////////////////////////////////////////////////////////////////
/// @brief performs a one-time synchronization with a remote endpoint, for
/// a single collection
////////////////////////////////////////////////////////////////////////////////
var syncCollection=function syncCollection(collection,config){config = config || {};config.restrictType = "include";config.restrictCollections = [collection];config.includeSystem = true;return sync(config);}; ////////////////////////////////////////////////////////////////////////////////
/// @brief sets up the replication (all-in-one function for initial
/// synchronization and continuous replication)
////////////////////////////////////////////////////////////////////////////////
var setupReplication=function setupReplication(config){config = config || {};if(!config.hasOwnProperty('autoStart')){config.autoStart = true;}if(!config.hasOwnProperty('includeSystem')){config.includeSystem = true;}if(!config.hasOwnProperty('verbose')){config.verbose = false;}var db=internal.db;var body=JSON.stringify(config);var headers={"X-Arango-Async":"store"};var requestResult=db._connection.PUT_RAW("/_api/replication/make-slave",body,headers);arangosh.checkRequestResult(requestResult);if(config.async){return requestResult.headers["x-arango-async-id"];}return waitForResult(config,requestResult.headers["x-arango-async-id"]);}; ////////////////////////////////////////////////////////////////////////////////
/// @brief queries the sync result status
////////////////////////////////////////////////////////////////////////////////
var getSyncResult=function getSyncResult(id){var db=internal.db;var requestResult=db._connection.PUT_RAW("/_api/job/" + encodeURIComponent(id),"");arangosh.checkRequestResult(requestResult);if(requestResult.headers.hasOwnProperty("x-arango-async-id")){return JSON.parse(requestResult.body);}return false;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief fetches a server's id
////////////////////////////////////////////////////////////////////////////////
var serverId=function serverId(){var db=internal.db;var requestResult=db._connection.GET("/_api/replication/server-id");arangosh.checkRequestResult(requestResult);return requestResult.serverId;};exports.logger = logger;exports.applier = applier;exports.sync = sync;exports.syncCollection = syncCollection;exports.setupReplication = setupReplication;exports.getSyncResult = getSyncResult;exports.serverId = serverId;});module.define("@arangodb/simple-query",function(exports,module){ /*jshint strict: false */ ////////////////////////////////////////////////////////////////////////////////
/// @brief Arango Simple Query Language
///
/// @file
///
/// DISCLAIMER
///
/// Copyright 2012 triagens GmbH, Cologne, Germany
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///
///     http://www.apache.org/licenses/LICENSE-2.0
///
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// Copyright holder is triAGENS GmbH, Cologne, Germany
///
/// @author Dr. Frank Celler
/// @author Copyright 2012, triAGENS GmbH, Cologne, Germany
////////////////////////////////////////////////////////////////////////////////
var arangosh=require("@arangodb/arangosh");var ArangoQueryCursor=require("@arangodb/arango-query-cursor").ArangoQueryCursor;var sq=require("@arangodb/simple-query-common");var GeneralArrayCursor=sq.GeneralArrayCursor;var SimpleQueryAll=sq.SimpleQueryAll;var SimpleQueryArray=sq.SimpleQueryArray;var SimpleQueryByExample=sq.SimpleQueryByExample;var SimpleQueryByCondition=sq.SimpleQueryByCondition;var SimpleQueryFulltext=sq.SimpleQueryFulltext;var SimpleQueryGeo=sq.SimpleQueryGeo;var SimpleQueryNear=sq.SimpleQueryNear;var SimpleQueryRange=sq.SimpleQueryRange;var SimpleQueryWithin=sq.SimpleQueryWithin;var SimpleQueryWithinRectangle=sq.SimpleQueryWithinRectangle; ////////////////////////////////////////////////////////////////////////////////
/// @brief executes an all query
////////////////////////////////////////////////////////////////////////////////
SimpleQueryAll.prototype.execute = function(batchSize){if(this._execution === null){if(batchSize !== undefined && batchSize > 0){this._batchSize = batchSize;}var data={collection:this._collection.name()};if(this._limit !== null){data.limit = this._limit;}if(this._skip !== null){data.skip = this._skip;}if(this._batchSize !== null){data.batchSize = this._batchSize;}var requestResult=this._collection._database._connection.PUT("/_api/simple/all",JSON.stringify(data));arangosh.checkRequestResult(requestResult);this._execution = new ArangoQueryCursor(this._collection._database,requestResult);if(requestResult.hasOwnProperty("count")){this._countQuery = requestResult.count;}}}; ////////////////////////////////////////////////////////////////////////////////
/// @brief executes a query-by-example
////////////////////////////////////////////////////////////////////////////////
SimpleQueryByExample.prototype.execute = function(batchSize){if(this._execution === null){if(batchSize !== undefined && batchSize > 0){this._batchSize = batchSize;}var data={collection:this._collection.name(),example:this._example};if(this._limit !== null){data.limit = this._limit;}if(this._skip !== null){data.skip = this._skip;}if(this._batchSize !== null){data.batchSize = this._batchSize;}var method="by-example";if(this.hasOwnProperty("_type")){data.index = this._index;switch(this._type){case "hash":method = "by-example-hash";break;case "skiplist":method = "by-example-skiplist";break;}}var requestResult=this._collection._database._connection.PUT("/_api/simple/" + method,JSON.stringify(data));arangosh.checkRequestResult(requestResult);this._execution = new ArangoQueryCursor(this._collection._database,requestResult);if(requestResult.hasOwnProperty("count")){this._countQuery = requestResult.count;this._countTotal = requestResult.count;}}}; ////////////////////////////////////////////////////////////////////////////////
/// @brief executes a query-by-condition
////////////////////////////////////////////////////////////////////////////////
SimpleQueryByCondition.prototype.execute = function(batchSize){if(this._execution === null){if(batchSize !== undefined && batchSize > 0){this._batchSize = batchSize;}var data={collection:this._collection.name(),condition:this._condition};if(this._limit !== null){data.limit = this._limit;}if(this._skip !== null){data.skip = this._skip;}if(this._batchSize !== null){data.batchSize = this._batchSize;}var method="by-condition";if(this.hasOwnProperty("_type")){data.index = this._index;switch(this._type){case "skiplist":method = "by-condition-skiplist";break;}}var requestResult=this._collection._database._connection.PUT("/_api/simple/" + method,JSON.stringify(data));arangosh.checkRequestResult(requestResult);this._execution = new ArangoQueryCursor(this._collection._database,requestResult);if(requestResult.hasOwnProperty("count")){this._countQuery = requestResult.count;this._countTotal = requestResult.count;}}}; ////////////////////////////////////////////////////////////////////////////////
/// @brief executes a range query
////////////////////////////////////////////////////////////////////////////////
SimpleQueryRange.prototype.execute = function(batchSize){if(this._execution === null){if(batchSize !== undefined && batchSize > 0){this._batchSize = batchSize;}var data={collection:this._collection.name(),attribute:this._attribute,right:this._right,left:this._left,closed:this._type === 1};if(this._limit !== null){data.limit = this._limit;}if(this._skip !== null){data.skip = this._skip;}if(this._batchSize !== null){data.batchSize = this._batchSize;}var requestResult=this._collection._database._connection.PUT("/_api/simple/range",JSON.stringify(data));arangosh.checkRequestResult(requestResult);this._execution = new ArangoQueryCursor(this._collection._database,requestResult);if(requestResult.hasOwnProperty("count")){this._countQuery = requestResult.count;}}}; ////////////////////////////////////////////////////////////////////////////////
/// @brief executes a near query
////////////////////////////////////////////////////////////////////////////////
SimpleQueryNear.prototype.execute = function(batchSize){if(this._execution === null){if(batchSize !== undefined && batchSize > 0){this._batchSize = batchSize;}var data={collection:this._collection.name(),latitude:this._latitude,longitude:this._longitude};if(this._limit !== null){data.limit = this._limit;}if(this._skip !== null){data.skip = this._skip;}if(this._index !== null){data.geo = this._index;}if(this._distance !== null){data.distance = this._distance;}if(this._batchSize !== null){data.batchSize = this._batchSize;}var requestResult=this._collection._database._connection.PUT("/_api/simple/near",JSON.stringify(data));arangosh.checkRequestResult(requestResult);this._execution = new ArangoQueryCursor(this._collection._database,requestResult);if(requestResult.hasOwnProperty("count")){this._countQuery = requestResult.count;}}}; ////////////////////////////////////////////////////////////////////////////////
/// @brief executes a within query
////////////////////////////////////////////////////////////////////////////////
SimpleQueryWithin.prototype.execute = function(batchSize){if(this._execution === null){if(batchSize !== undefined && batchSize > 0){this._batchSize = batchSize;}var data={collection:this._collection.name(),latitude:this._latitude,longitude:this._longitude,radius:this._radius};if(this._limit !== null){data.limit = this._limit;}if(this._skip !== null){data.skip = this._skip;}if(this._index !== null){data.geo = this._index;}if(this._distance !== null){data.distance = this._distance;}if(this._batchSize !== null){data.batchSize = this._batchSize;}var requestResult=this._collection._database._connection.PUT("/_api/simple/within",JSON.stringify(data));arangosh.checkRequestResult(requestResult);this._execution = new ArangoQueryCursor(this._collection._database,requestResult);if(requestResult.hasOwnProperty("count")){this._countQuery = requestResult.count;}}}; ////////////////////////////////////////////////////////////////////////////////
/// @brief executes a withinRectangle query
////////////////////////////////////////////////////////////////////////////////
SimpleQueryWithinRectangle.prototype.execute = function(batchSize){if(this._execution === null){if(batchSize !== undefined && batchSize > 0){this._batchSize = batchSize;}var data={collection:this._collection.name(),latitude1:this._latitude1,longitude1:this._longitude1,latitude2:this._latitude2,longitude2:this._longitude2};if(this._limit !== null){data.limit = this._limit;}if(this._skip !== null){data.skip = this._skip;}if(this._index !== null){data.geo = this._index;}if(this._distance !== null){data.distance = this._distance;}if(this._batchSize !== null){data.batchSize = this._batchSize;}var requestResult=this._collection._database._connection.PUT("/_api/simple/within-rectangle",JSON.stringify(data));arangosh.checkRequestResult(requestResult);this._execution = new ArangoQueryCursor(this._collection._database,requestResult);if(requestResult.hasOwnProperty("count")){this._countQuery = requestResult.count;}}}; ////////////////////////////////////////////////////////////////////////////////
/// @brief executes a fulltext query
////////////////////////////////////////////////////////////////////////////////
SimpleQueryFulltext.prototype.execute = function(batchSize){if(this._execution === null){if(batchSize !== undefined && batchSize > 0){this._batchSize = batchSize;}var data={collection:this._collection.name(),attribute:this._attribute,query:this._query};if(this._limit !== null){data.limit = this._limit;}if(this._index !== null){data.index = this._index;}if(this._skip !== null){data.skip = this._skip;}if(this._batchSize !== null){data.batchSize = this._batchSize;}var requestResult=this._collection._database._connection.PUT("/_api/simple/fulltext",JSON.stringify(data));arangosh.checkRequestResult(requestResult);this._execution = new ArangoQueryCursor(this._collection._database,requestResult);if(requestResult.hasOwnProperty("count")){this._countQuery = requestResult.count;}}};exports.GeneralArrayCursor = GeneralArrayCursor;exports.SimpleQueryAll = SimpleQueryAll;exports.SimpleQueryArray = SimpleQueryArray;exports.SimpleQueryByExample = SimpleQueryByExample;exports.SimpleQueryByCondition = SimpleQueryByCondition;exports.SimpleQueryFulltext = SimpleQueryFulltext;exports.SimpleQueryGeo = SimpleQueryGeo;exports.SimpleQueryNear = SimpleQueryNear;exports.SimpleQueryRange = SimpleQueryRange;exports.SimpleQueryWithin = SimpleQueryWithin;exports.SimpleQueryWithinRectangle = SimpleQueryWithinRectangle;});module.define("@arangodb/tutorial",function(exports,module){ /*jshint strict: false */ ////////////////////////////////////////////////////////////////////////////////
/// @brief Shell tutorial
///
/// @file
///
/// DISCLAIMER
///
/// Copyright 2004-2014 triAGENS GmbH, Cologne, Germany
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///
///     http://www.apache.org/licenses/LICENSE-2.0
///
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// Copyright holder is triAGENS GmbH, Cologne, Germany
///
/// @author Jan Steemann
/// @author Copyright 2012-2014, triAGENS GmbH, Cologne, Germany
////////////////////////////////////////////////////////////////////////////////
var index=0;var next="Type 'tutorial' again to get to the next chapter.";var lessons=[{title:"Welcome to the tutorial!",text:"This is a user-interactive tutorial on ArangoDB and the ArangoDB shell.\n" + "It will give you a first look into ArangoDB and how it works."},{title:"JavaScript Shell",text:"On this shell's prompt, you can issue arbitrary JavaScript commands.\n" + "So you are able to do things like...:\n\n" + "  number = 123;\n" + "  number = number * 10;"},{title:"Running Complex Instructions",text:"You can also run more complex instructions, such as for loops:\n\n" + "  for (i = 0; i < 10; i++) { number = number + 1; }"},{title:"Printing Results",text:"As you can see, the result of the last command executed is printed automatically. " + "To explicitly print a value at any other time, there is the print function:\n\n" + "  for (i = 0; i < 5; ++i) { print(\"I am a JavaScript shell\"); }"},{title:"Creating Collections",text:"ArangoDB is a document database. This means that we store data as documents " + "(which are similar to JavaScript objects) in so-called 'collections'. " + "Let's create a collection named 'places' now:\n\n" + "  db._create('places');\n\n" + "Note: each collection is identified by a unique name. Trying to create a " + "collection that already exists will produce an error."},{title:"Displaying Collections",text:"Now you can take a look at the collection(s) you just created:\n\n" + "  db._collections();\n\n" + "Please note that all collections will be returned, including ArangoDB's pre-defined " + "system collections."},{title:"Creating Documents",text:"Now we have a collection, but it is empty. So let's create some documents!\n\n" + "  db.places.save({ _key : \"foo\", city : \"foo-city\" });\n" + "  for (i = 0; i <= 10; i++) { db.places.save({ _key: \"example\" + i, zipcode: i }) };"},{title:"Displaying All Documents",text:"You want to take a look at your docs? No problem:\n\n" + "  db.places.toArray();"},{title:"Counting Documents",text:"To see how many documents there are in a collection, use the 'count' method:\n\n" + "  db.places.count();"},{title:"Retrieving Single Documents",text:"As you can see, each document has some meta attributes '_id', '_key' and '_rev'.\n" + "The '_key' attribute can be used to quickly retrieve a single document from " + "a collection:\n\n" + "  db.places.document(\"foo\");\n" + "  db.places.document(\"example5\");"},{title:"Retrieving Single Documents",text:"The '_id' attribute can also be used to retrieve documents using the 'db' object:\n\n" + "  db._document(\"places/foo\");\n" + "  db._document(\"places/example5\");"},{title:"Modifying Documents",text:"You can modify existing documents. Try to add a new attribute to a document and " + "verify whether it has been added:\n\n" + "  db._update(\"places/foo\", { zipcode: 39535 });\n" + "  db._document(\"places/foo\");"},{title:"Document Revisions",text:"Note that after updating the document, its '_rev' attribute changed automatically.\n" + "The '_rev' attribute contains a document revision number, and it can be used for " + "conditional modifications. Here's an example of how to avoid lost updates in case " + "multiple clients are accessing the documents in parallel:\n\n" + "  doc = db._document(\"places/example1\");\n" + "  db._update(\"places/example1\", { someValue: 23 });\n" + "  db._update(doc, { someValue: 42 });\n\n" + "Note that the first update will succeed because it was unconditional. The second " + "update however is conditional because we're also passing the document's revision " + "id in the first parameter to _update. As the revision id we're passing to update " + "does not match the document's current revision anymore, the update is rejected."},{title:"Removing Documents",text:"Deleting single documents can be achieved by providing the document _id or _key:\n\n" + "  db._remove(\"places/example7\");\n" + "  db.places.remove(\"example8\");\n" + "  db.places.count();"},{title:"Searching Documents",text:"Searching for documents with specific attributes can be done by using the " + "byExample method:\n\n" + "  db._create(\"users\");\n" + "  for (i = 0; i < 10; ++i) { " + "db.users.save({ name: \"username\" + i, active: (i % 3 == 0), age: 30 + i }); }\n" + "  db.users.byExample({ active: false }).toArray();\n" + "  db.users.byExample({ name: \"username3\", active: true }).toArray();\n"},{title:"Running AQL Queries",text:"ArangoDB also provides a query language for more complex matching:\n\n" + "  db._query(\"FOR u IN users FILTER u.active == true && u.age >= 33 " + "RETURN { username: u.name, age: u.age }\").toArray();"},{title:"Using Databases",text:"By default, the ArangoShell connects to the default database. The default database " + "is named '_system'. To create another database, use the '_createDatabase' method of the " + "'db' object. To switch into an existing database, use '_useDatabase'. To get rid of a " + "database and all of its collections, use '_dropDatabase':\n\n" + "  db._createDatabase(\"mydb\");\n" + "  db._useDatabase(\"mydb\");\n" + "  db._dropDatabase(\"mydb\");"}]; ////////////////////////////////////////////////////////////////////////////////
/// @brief print tutorial contents
////////////////////////////////////////////////////////////////////////////////
exports._PRINT = function(context){var colors=require("internal").COLORS; /*jslint regexp: true */function process(text){return text.replace(/\n {2}(.+?)(?=\n)/g,"\n  " + colors.COLOR_MAGENTA + "$1" + colors.COLOR_RESET);} /*jslint regexp: false */var headline=colors.COLOR_BOLD_BLUE + (index + 1) + ". " + lessons[index].title + colors.COLOR_RESET;context.output += "\n\n" + headline + "\n\n" + process(lessons[index].text + "\n") + "\n";++index;if(index >= lessons.length){context.output += "Congratulations! You finished the tutorial.\n";index = 0;}else {context.output += next + "\n";}};});module.define("@arangodb/aql/explainer",function(exports,module){ /*jshint strict: false, maxlen: 300 */var db=require("@arangodb").db,internal=require("internal"),systemColors=internal.COLORS,print=internal.print,colors={};if(typeof internal.printBrowser === "function"){print = internal.printBrowser;}var stringBuilder={output:"",appendLine:function appendLine(line){if(!line){this.output += "\n";}else {this.output += line + "\n";}},getOutput:function getOutput(){return this.output;},clearOutput:function clearOutput(){this.output = "";}}; /* set colors for output */function setColors(useSystemColors){'use strict';["COLOR_RESET","COLOR_CYAN","COLOR_BLUE","COLOR_GREEN","COLOR_MAGENTA","COLOR_YELLOW","COLOR_RED","COLOR_WHITE","COLOR_BOLD_CYAN","COLOR_BOLD_BLUE","COLOR_BOLD_GREEN","COLOR_BOLD_MAGENTA","COLOR_BOLD_YELLOW","COLOR_BOLD_RED","COLOR_BOLD_WHITE"].forEach(function(c){colors[c] = useSystemColors?systemColors[c]:"";});} /* colorizer and output helper functions */function bracketize(node,v){'use strict';if(node && node.subNodes && node.subNodes.length > 1){return "(" + v + ")";}return v;}function attributeUncolored(v){'use strict';return "`" + v + "`";}function keyword(v){'use strict';return colors.COLOR_CYAN + v + colors.COLOR_RESET;}function annotation(v){'use strict';return colors.COLOR_BLUE + v + colors.COLOR_RESET;}function value(v){'use strict';if(typeof v === 'string' && v.length > 1024){return colors.COLOR_GREEN + v.substr(0,1024) + "..." + colors.COLOR_RESET;}return colors.COLOR_GREEN + v + colors.COLOR_RESET;}function variable(v){'use strict';if(v[0] === "#"){return colors.COLOR_MAGENTA + v + colors.COLOR_RESET;}return colors.COLOR_YELLOW + v + colors.COLOR_RESET;}function func(v){'use strict';return colors.COLOR_GREEN + v + colors.COLOR_RESET;}function collection(v){'use strict';return colors.COLOR_RED + v + colors.COLOR_RESET;}function attribute(v){'use strict';return "`" + colors.COLOR_YELLOW + v + colors.COLOR_RESET + "`";}function header(v){'use strict';return colors.COLOR_MAGENTA + v + colors.COLOR_RESET;}function section(v){'use strict';return colors.COLOR_BOLD_BLUE + v + colors.COLOR_RESET;}function pad(n){'use strict';if(n < 0){ // value seems invalid...
n = 0;}return new Array(n).join(" ");}function wrap(str,width){'use strict';var re=".{1," + width + "}(\\s|$)|\\S+?(\\s|$)";return str.match(new RegExp(re,"g")).join("\n");} /* print functions */ /* print query string */function printQuery(query){'use strict'; // restrict max length of printed query to avoid endless printing for
// very long query strings
var maxLength=4096;if(query.length > maxLength){stringBuilder.appendLine(section("Query string (truncated):"));query = query.substr(0,maxLength / 2) + " ... " + query.substr(query.length - maxLength / 2);}else {stringBuilder.appendLine(section("Query string:"));}stringBuilder.appendLine(" " + value(wrap(query,100).replace(/\n+/g,"\n ",query)));stringBuilder.appendLine();} /* print write query modification flags */function printModificationFlags(flags){'use strict';if(flags === undefined){return;}stringBuilder.appendLine(section("Write query options:"));var keys=Object.keys(flags),maxLen="Option".length;keys.forEach(function(k){if(k.length > maxLen){maxLen = k.length;}});stringBuilder.appendLine(" " + header("Option") + pad(1 + maxLen - "Option".length) + "   " + header("Value"));keys.forEach(function(k){stringBuilder.appendLine(" " + keyword(k) + pad(1 + maxLen - k.length) + "   " + value(JSON.stringify(flags[k])));});stringBuilder.appendLine();} /* print optimizer rules */function printRules(rules){'use strict';stringBuilder.appendLine(section("Optimization rules applied:"));if(rules.length === 0){stringBuilder.appendLine(" " + value("none"));}else {var maxIdLen=String("Id").length;stringBuilder.appendLine(" " + pad(1 + maxIdLen - String("Id").length) + header("Id") + "   " + header("RuleName"));for(var i=0;i < rules.length;++i) {stringBuilder.appendLine(" " + pad(1 + maxIdLen - String(i + 1).length) + variable(String(i + 1)) + "   " + keyword(rules[i]));}}stringBuilder.appendLine();} /* print warnings */function printWarnings(warnings){'use strict';if(!Array.isArray(warnings) || warnings.length === 0){return;}stringBuilder.appendLine(section("Warnings:"));var maxIdLen=String("Code").length;stringBuilder.appendLine(" " + pad(1 + maxIdLen - String("Code").length) + header("Code") + "   " + header("Message"));for(var i=0;i < warnings.length;++i) {stringBuilder.appendLine(" " + pad(1 + maxIdLen - String(warnings[i].code).length) + variable(warnings[i].code) + "   " + keyword(warnings[i].message));}stringBuilder.appendLine();} /* print indexes used */function printIndexes(indexes){'use strict';stringBuilder.appendLine(section("Indexes used:"));if(indexes.length === 0){stringBuilder.appendLine(" " + value("none"));}else {var maxIdLen=String("By").length;var maxCollectionLen=String("Collection").length;var maxUniqueLen=String("Unique").length;var maxSparseLen=String("Sparse").length;var maxTypeLen=String("Type").length;var maxSelectivityLen=String("Selectivity").length;var maxFieldsLen=String("Fields").length;indexes.forEach(function(index){var l=String(index.node).length;if(l > maxIdLen){maxIdLen = l;}l = index.type.length;if(l > maxTypeLen){maxTypeLen = l;}l = index.fields.map(attributeUncolored).join(", ").length + "[  ]".length;if(l > maxFieldsLen){maxFieldsLen = l;}l = index.collection.length;if(l > maxCollectionLen){maxCollectionLen = l;}});var line=" " + pad(1 + maxIdLen - String("By").length) + header("By") + "   " + header("Type") + pad(1 + maxTypeLen - "Type".length) + "   " + header("Collection") + pad(1 + maxCollectionLen - "Collection".length) + "   " + header("Unique") + pad(1 + maxUniqueLen - "Unique".length) + "   " + header("Sparse") + pad(1 + maxSparseLen - "Sparse".length) + "   " + header("Selectivity") + "   " + header("Fields") + pad(1 + maxFieldsLen - "Fields".length) + "   " + header("Ranges");stringBuilder.appendLine(line);for(var i=0;i < indexes.length;++i) {var uniqueness=indexes[i].unique?"true":"false";var sparsity=indexes[i].hasOwnProperty("sparse")?indexes[i].sparse?"true":"false":"n/a";var fields="[ " + indexes[i].fields.map(attribute).join(", ") + " ]";var fieldsLen=indexes[i].fields.map(attributeUncolored).join(", ").length + "[  ]".length;var ranges;if(indexes[i].hasOwnProperty("condition")){ranges = indexes[i].condition;}else {ranges = "[ " + indexes[i].ranges + " ]";}var selectivity=indexes[i].hasOwnProperty("selectivityEstimate")?(indexes[i].selectivityEstimate * 100).toFixed(2) + " %":"n/a";line = " " + pad(1 + maxIdLen - String(indexes[i].node).length) + variable(String(indexes[i].node)) + "   " + keyword(indexes[i].type) + pad(1 + maxTypeLen - indexes[i].type.length) + "   " + collection(indexes[i].collection) + pad(1 + maxCollectionLen - indexes[i].collection.length) + "   " + value(uniqueness) + pad(1 + maxUniqueLen - uniqueness.length) + "   " + value(sparsity) + pad(1 + maxSparseLen - sparsity.length) + "   " + pad(1 + maxSelectivityLen - selectivity.length) + value(selectivity) + "   " + fields + pad(1 + maxFieldsLen - fieldsLen) + "   " + ranges;stringBuilder.appendLine(line);}}} /* print traversal info */function printTraversalDetails(traversals){'use strict';if(traversals.length === 0){return;}stringBuilder.appendLine();stringBuilder.appendLine(section("Traversals on graphs:"));var maxIdLen=String("Id").length;var maxMinMaxDepth=String("Depth").length;var maxVertexCollectionNameStrLen=String("Vertex collections").length;var maxEdgeCollectionNameStrLen=String("Edge collections").length;var maxConditionsLen=String("Filter conditions").length;traversals.forEach(function(node){var l=String(node.id).length;if(l > maxIdLen){maxIdLen = l;}if(node.minMaxDepthLen > maxMinMaxDepth){maxMinMaxDepth = node.minMaxDepthLen;}if(node.hasOwnProperty('ConditionStr')){if(node.ConditionStr.length > maxConditionsLen){maxConditionsLen = node.ConditionStr.length;}}if(node.hasOwnProperty('vertexCollectionNameStr')){if(node.vertexCollectionNameStrLen > maxVertexCollectionNameStrLen){maxVertexCollectionNameStrLen = node.vertexCollectionNameStrLen;}}if(node.hasOwnProperty('edgeCollectionNameStr')){if(node.edgeCollectionNameStrLen > maxEdgeCollectionNameStrLen){maxEdgeCollectionNameStrLen = node.edgeCollectionNameStrLen;}}});var line=" " + pad(1 + maxIdLen - String("Id").length) + header("Id") + "   " + header("Depth") + pad(1 + maxMinMaxDepth - String("Depth").length) + "   " + header("Vertex collections") + pad(1 + maxVertexCollectionNameStrLen - "Vertex collections".length) + "   " + header("Edge collections") + pad(1 + maxEdgeCollectionNameStrLen - "Edge collections".length) + "   " + header("Filter conditions");stringBuilder.appendLine(line);for(var i=0;i < traversals.length;++i) {line = " " + pad(1 + maxIdLen - String(traversals[i].id).length) + traversals[i].id + "   ";line += traversals[i].minMaxDepth + pad(1 + maxMinMaxDepth - traversals[i].minMaxDepthLen) + "   ";if(traversals[i].hasOwnProperty('vertexCollectionNameStr')){line += traversals[i].vertexCollectionNameStr + pad(1 + maxVertexCollectionNameStrLen - traversals[i].vertexCollectionNameStrLen) + "   ";}else {line += pad(1 + maxVertexCollectionNameStrLen) + "   ";}if(traversals[i].hasOwnProperty('edgeCollectionNameStr')){line += traversals[i].edgeCollectionNameStr + pad(1 + maxEdgeCollectionNameStrLen - traversals[i].edgeCollectionNameStrLen) + "   ";}else {line += pad(1 + maxEdgeCollectionNameStrLen) + "   ";}if(traversals[i].hasOwnProperty('ConditionStr')){line += traversals[i].ConditionStr;}stringBuilder.appendLine(line);}} /* analzye and print execution plan */function processQuery(query,explain){'use strict';var nodes={},parents={},rootNode=null,maxTypeLen=0,maxSiteLen=0,maxIdLen=String("Id").length,maxEstimateLen=String("Est.").length,plan=explain.plan,cluster=require("@arangodb/cluster");var recursiveWalk=function recursiveWalk(n,level){n.forEach(function(node){nodes[node.id] = node;if(level === 0 && node.dependencies.length === 0){rootNode = node.id;}if(node.type === "SubqueryNode"){recursiveWalk(node.subquery.nodes,level + 1);}node.dependencies.forEach(function(d){if(!parents.hasOwnProperty(d)){parents[d] = [];}parents[d].push(node.id);});if(String(node.id).length > maxIdLen){maxIdLen = String(node.id).length;}if(String(node.type).length > maxTypeLen){maxTypeLen = String(node.type).length;}if(String(node.site).length > maxSiteLen){maxSiteLen = String(node.site).length;}if(String(node.estimatedNrItems).length > maxEstimateLen){maxEstimateLen = String(node.estimatedNrItems).length;}});var count=n.length,site="COOR";while(count > 0) {--count;var node=n[count];node.site = site;if(node.type === "RemoteNode"){site = site === "COOR"?"DBS":"COOR";}}};recursiveWalk(plan.nodes,0);var references={},collectionVariables={},usedVariables={},indexes=[],traversalDetails=[],modificationFlags,isConst=true,currentNode=null;var variableName=function variableName(node){try{if(/^[0-9_]/.test(node.name)){return variable("#" + node.name);}}catch(x) {print(node);throw x;}if(collectionVariables.hasOwnProperty(node.id)){usedVariables[node.name] = collectionVariables[node.id];}return variable(node.name);};var addHint=function addHint(){}; // uncomment this to show "style" hints
// var addHint = function (dst, currentNode, msg) {
//   dst.push({ code: "Hint", message: "Node #" + currentNode + ": " + msg });
// };
var buildExpression=function buildExpression(_x){var _again=true;_function: while(_again) {var node=_x;binaryOperator = i = ref = out = collectionName = collectionObject = isEdgeCollection = isSystem = undefined;_again = false;var binaryOperator=function binaryOperator(node,name){var lhs=buildExpression(node.subNodes[0]);var rhs=buildExpression(node.subNodes[1]);if(node.subNodes.length === 3){ // array operator node... prepend "all" | "any" | "none" to node type
name = node.subNodes[2].quantifier + " " + name;}if(node.sorted){return lhs + " " + name + " " + annotation("/* sorted */") + " " + rhs;}return lhs + " " + name + " " + rhs;};isConst = isConst && ["value","object","object element","array"].indexOf(node.type) !== -1;if(node.type !== "attribute access" && node.hasOwnProperty("subNodes")){for(var i=0;i < node.subNodes.length;++i) {if(node.subNodes[i].type === "reference" && collectionVariables.hasOwnProperty(node.subNodes[i].id)){addHint(explain.warnings,currentNode,"reference to collection document variable '" + node.subNodes[i].name + "' used in potentially non-working way");break;}}}switch(node.type){case "reference":if(references.hasOwnProperty(node.name)){var ref=references[node.name];delete references[node.name];if(Array.isArray(ref)){var out=buildExpression(ref[1]) + "[" + new Array(ref[0] + 1).join('*');if(ref[2].type !== "no-op"){out += " " + keyword("FILTER") + " " + buildExpression(ref[2]);}if(ref[3].type !== "no-op"){out += " " + keyword("LIMIT ") + " " + buildExpression(ref[3]);}if(ref[4].type !== "no-op"){out += " " + keyword("RETURN ") + " " + buildExpression(ref[4]);}out += "]";return out;}return buildExpression(ref) + "[*]";}return variableName(node);case "collection":addHint(explain.warnings,currentNode,"using all documents from collection '" + node.name + "' in expression");return collection(node.name) + "   " + annotation("/* all collection documents */");case "value":return value(JSON.stringify(node.value));case "object":if(node.hasOwnProperty("subNodes")){if(node.subNodes.length > 20){ // print only the first 20 values from the objects
return "{ " + node.subNodes.slice(0,20).map(buildExpression).join(", ") + ", ... }";}return "{ " + node.subNodes.map(buildExpression).join(", ") + " }";}return "{ }";case "object element":return value(JSON.stringify(node.name)) + " : " + buildExpression(node.subNodes[0]);case "calculated object element":return "[ " + buildExpression(node.subNodes[0]) + " ] : " + buildExpression(node.subNodes[1]);case "array":if(node.hasOwnProperty("subNodes")){if(node.subNodes.length > 20){ // print only the first 20 values from the array
return "[ " + node.subNodes.slice(0,20).map(buildExpression).join(", ") + ", ... ]";}return "[ " + node.subNodes.map(buildExpression).join(", ") + " ]";}return "[ ]";case "unary not":return "! " + buildExpression(node.subNodes[0]);case "unary plus":return "+ " + buildExpression(node.subNodes[0]);case "unary minus":return "- " + buildExpression(node.subNodes[0]);case "array limit":return buildExpression(node.subNodes[0]) + ", " + buildExpression(node.subNodes[1]);case "attribute access":if(node.subNodes[0].type === "reference" && collectionVariables.hasOwnProperty(node.subNodes[0].id)){ // top-level attribute access
var collectionName=collectionVariables[node.subNodes[0].id],collectionObject=db._collection(collectionName);if(collectionObject !== null){var isEdgeCollection=collectionObject.type() === 3,isSystem=node.name[0] === '_';if(isSystem && ["_key","_id","_rev"].concat(isEdgeCollection?["_from","_to"]:[]).indexOf(node.name) === -1 || !isSystem && isEdgeCollection && ["from","to"].indexOf(node.name) !== -1){addHint(explain.warnings,currentNode,"reference to potentially non-existing attribute '" + node.name + "'");}}}return buildExpression(node.subNodes[0]) + "." + attribute(node.name);case "indexed access":return buildExpression(node.subNodes[0]) + "[" + buildExpression(node.subNodes[1]) + "]";case "range":return buildExpression(node.subNodes[0]) + " .. " + buildExpression(node.subNodes[1]) + "   " + annotation("/* range */");case "expand":case "expansion":if(node.subNodes.length > 2){ // [FILTER ...]
references[node.subNodes[0].subNodes[0].name] = [node.levels,node.subNodes[0].subNodes[1],node.subNodes[2],node.subNodes[3],node.subNodes[4]];}else { // [*]
references[node.subNodes[0].subNodes[0].name] = node.subNodes[0].subNodes[1];}_x = node.subNodes[1];_again = true;continue _function;case "user function call":return func(node.name) + "(" + (node.subNodes && node.subNodes[0].subNodes || []).map(buildExpression).join(", ") + ")" + "   " + annotation("/* user-defined function */");case "function call":return func(node.name) + "(" + (node.subNodes && node.subNodes[0].subNodes || []).map(buildExpression).join(", ") + ")";case "plus":return "(" + binaryOperator(node,"+") + ")";case "minus":return "(" + binaryOperator(node,"-") + ")";case "times":return "(" + binaryOperator(node,"*") + ")";case "division":return "(" + binaryOperator(node,"/") + ")";case "modulus":return "(" + binaryOperator(node,"%") + ")";case "compare not in":case "array compare not in":return "(" + binaryOperator(node,"not in") + ")";case "compare in":case "array compare in":return "(" + binaryOperator(node,"in") + ")";case "compare ==":case "array compare ==":return "(" + binaryOperator(node,"==") + ")";case "compare !=":case "array compare !=":return "(" + binaryOperator(node,"!=") + ")";case "compare >":case "array compare >":return "(" + binaryOperator(node,">") + ")";case "compare >=":case "array compare >=":return "(" + binaryOperator(node,">=") + ")";case "compare <":case "array compare <":return "(" + binaryOperator(node,"<") + ")";case "compare <=":case "array compare <=":return "(" + binaryOperator(node,"<=") + ")";case "logical or":return "(" + binaryOperator(node,"||") + ")";case "logical and":return "(" + binaryOperator(node,"&&") + ")";case "ternary":return "(" + buildExpression(node.subNodes[0]) + " ? " + buildExpression(node.subNodes[1]) + " : " + buildExpression(node.subNodes[2]) + ")";case "n-ary or":if(node.hasOwnProperty("subNodes")){return bracketize(node,node.subNodes.map(function(sub){return buildExpression(sub);}).join(" || "));}return "";case "n-ary and":if(node.hasOwnProperty("subNodes")){return bracketize(node,node.subNodes.map(function(sub){return buildExpression(sub);}).join(" && "));}return "";default:return "unhandled node type (" + node.type + ")";}}};var buildSimpleExpression=function buildSimpleExpression(simpleExpressions){var rc="";for(var indexNo in simpleExpressions) {if(simpleExpressions.hasOwnProperty(indexNo)){if(rc.length > 0){rc += " AND ";}for(var i=0;i < simpleExpressions[indexNo].length;i++) {var item=simpleExpressions[indexNo][i];rc += attribute("Path") + ".";if(item.isEdgeAccess){rc += attribute("edges");}else {rc += attribute("vertices");}rc += "[" + value(indexNo) + "] -> ";rc += buildExpression(item.varAccess);rc += " " + item.comparisonTypeStr + " ";rc += buildExpression(item.compareTo);}}}return rc;};var buildBound=function buildBound(attr,operators,bound){var boundValue=bound.isConstant?value(JSON.stringify(bound.bound)):buildExpression(bound.bound);return attribute(attr) + " " + operators[bound.include?1:0] + " " + boundValue;};var buildRanges=function buildRanges(ranges){var results=[];ranges.forEach(function(range){var attr=range.attr;if(range.lowConst.hasOwnProperty("bound") && range.highConst.hasOwnProperty("bound") && JSON.stringify(range.lowConst.bound) === JSON.stringify(range.highConst.bound)){range.equality = true;}if(range.equality){if(range.lowConst.hasOwnProperty("bound")){results.push(buildBound(attr,["==","=="],range.lowConst));}else if(range.hasOwnProperty("lows")){range.lows.forEach(function(bound){results.push(buildBound(attr,["==","=="],bound));});}}else {if(range.lowConst.hasOwnProperty("bound")){results.push(buildBound(attr,[">",">="],range.lowConst));}if(range.highConst.hasOwnProperty("bound")){results.push(buildBound(attr,["<","<="],range.highConst));}if(range.hasOwnProperty("lows")){range.lows.forEach(function(bound){results.push(buildBound(attr,[">",">="],bound));});}if(range.hasOwnProperty("highs")){range.highs.forEach(function(bound){results.push(buildBound(attr,["<","<="],bound));});}}});if(results.length > 1){return "(" + results.join(" && ") + ")";}return results[0];};var label=function label(node){switch(node.type){case "SingletonNode":return keyword("ROOT");case "NoResultsNode":return keyword("EMPTY") + "   " + annotation("/* empty result set */");case "EnumerateCollectionNode":collectionVariables[node.outVariable.id] = node.collection;return keyword("FOR") + " " + variableName(node.outVariable) + " " + keyword("IN") + " " + collection(node.collection) + "   " + annotation("/* full collection scan" + (node.random?", random order":"") + " */");case "EnumerateListNode":return keyword("FOR") + " " + variableName(node.outVariable) + " " + keyword("IN") + " " + variableName(node.inVariable) + "   " + annotation("/* list iteration */");case "IndexNode":collectionVariables[node.outVariable.id] = node.collection;var types=[];node.indexes.forEach(function(idx,i){var what=(node.reverse?"reverse ":"") + idx.type + " index scan";if(types.length === 0 || what !== types[types.length - 1]){types.push(what);}idx.collection = node.collection;idx.node = node.id;if(node.condition.type && node.condition.type === 'n-ary or'){idx.condition = buildExpression(node.condition.subNodes[i]);}else {idx.condition = "*"; // empty condition. this is likely an index used for sorting only
}indexes.push(idx);});return keyword("FOR") + " " + variableName(node.outVariable) + " " + keyword("IN") + " " + collection(node.collection) + "   " + annotation("/* " + types.join(", ") + " */");case "IndexRangeNode":collectionVariables[node.outVariable.id] = node.collection;var index=node.index;index.ranges = node.ranges.map(buildRanges).join(" || ");index.collection = node.collection;index.node = node.id;indexes.push(index);return keyword("FOR") + " " + variableName(node.outVariable) + " " + keyword("IN") + " " + collection(node.collection) + "   " + annotation("/* " + (node.reverse?"reverse ":"") + node.index.type + " index scan */");case "TraversalNode":node.minMaxDepth = node.minDepth + ".." + node.maxDepth;node.minMaxDepthLen = node.minMaxDepth.length;var rc=keyword("FOR ") + variableName(node.vertexOutVariable) + "  " + annotation("/* vertex */");if(node.hasOwnProperty('edgeOutVariable')){rc += "  , " + variableName(node.edgeOutVariable) + "  " + annotation("/* edge */");}if(node.hasOwnProperty('pathOutVariable')){rc += "  , " + variableName(node.pathOutVariable) + "  " + annotation("/* paths */");}rc += "  " + keyword("IN") + " " + value(node.minMaxDepth) + "  " + annotation("/* min..maxPathDepth */") + "  ";var translate=["ANY","INBOUND","OUTBOUND"];var defaultDirection=node.directions[0];rc += keyword(translate[defaultDirection]);if(node.hasOwnProperty("vertexId")){rc += " '" + value(node.vertexId) + "' ";}else {rc += " " + variableName(node.inVariable) + " ";}rc += annotation("/* startnode */") + "  ";if(Array.isArray(node.graph)){rc += node.graph.map(function(g,index){var tmp="";if(node.directions[index] !== defaultDirection){tmp += keyword(translate[node.directions[index]]);tmp += " ";}return tmp + collection(g);}).join(", ");}else {rc += keyword("GRAPH") + " '" + value(node.graph) + "'";}traversalDetails.push(node);if(node.hasOwnProperty('simpleExpressions')){node.ConditionStr = buildSimpleExpression(node.simpleExpressions);}var e=[];if(node.hasOwnProperty('graphDefinition')){var v=[];node.graphDefinition.vertexCollectionNames.forEach(function(vcn){v.push(collection(vcn));});node.vertexCollectionNameStr = v.join(", ");node.vertexCollectionNameStrLen = node.graphDefinition.vertexCollectionNames.join(", ").length;node.graphDefinition.edgeCollectionNames.forEach(function(ecn){e.push(collection(ecn));});node.edgeCollectionNameStr = e.join(", ");node.edgeCollectionNameStrLen = node.graphDefinition.edgeCollectionNames.join(", ").length;}else {var edgeCols=node.graph || [];edgeCols.forEach(function(ecn){e.push(collection(ecn));});node.edgeCollectionNameStr = e.join(", ");node.edgeCollectionNameStrLen = edgeCols.join(", ").length;node.graph = "<anonymous>";}return rc;case "CalculationNode":return keyword("LET") + " " + variableName(node.outVariable) + " = " + buildExpression(node.expression) + "   " + annotation("/* " + node.expressionType + " expression */");case "FilterNode":return keyword("FILTER") + " " + variableName(node.inVariable);case "AggregateNode": /* old-style COLLECT node */return keyword("COLLECT") + " " + node.aggregates.map(function(node){return variableName(node.outVariable) + " = " + variableName(node.inVariable);}).join(", ") + (node.count?" " + keyword("WITH COUNT"):"") + (node.outVariable?" " + keyword("INTO") + " " + variableName(node.outVariable):"") + (node.keepVariables?" " + keyword("KEEP") + " " + node.keepVariables.map(function(variable){return variableName(variable);}).join(", "):"") + "   " + annotation("/* " + node.aggregationOptions.method + " */");case "CollectNode":var collect=keyword("COLLECT") + " " + node.groups.map(function(node){return variableName(node.outVariable) + " = " + variableName(node.inVariable);}).join(", ");if(node.hasOwnProperty("aggregates") && node.aggregates.length > 0){if(node.groups.length > 0){collect += " ";}collect += keyword("AGGREGATE") + " " + node.aggregates.map(function(node){return variableName(node.outVariable) + " = " + func(node.type) + "(" + variableName(node.inVariable) + ")";}).join(", ");}collect += (node.count?" " + keyword("WITH COUNT"):"") + (node.outVariable?" " + keyword("INTO") + " " + variableName(node.outVariable):"") + (node.keepVariables?" " + keyword("KEEP") + " " + node.keepVariables.map(function(variable){return variableName(variable);}).join(", "):"") + "   " + annotation("/* " + node.collectOptions.method + "*/");return collect;case "SortNode":return keyword("SORT") + " " + node.elements.map(function(node){return variableName(node.inVariable) + " " + keyword(node.ascending?"ASC":"DESC");}).join(", ");case "LimitNode":return keyword("LIMIT") + " " + value(JSON.stringify(node.offset)) + ", " + value(JSON.stringify(node.limit));case "ReturnNode":return keyword("RETURN") + " " + variableName(node.inVariable);case "SubqueryNode":return keyword("LET") + " " + variableName(node.outVariable) + " = ...   " + annotation("/* subquery */");case "InsertNode":modificationFlags = node.modificationFlags;return keyword("INSERT") + " " + variableName(node.inVariable) + " " + keyword("IN") + " " + collection(node.collection);case "UpdateNode":modificationFlags = node.modificationFlags;if(node.hasOwnProperty("inKeyVariable")){return keyword("UPDATE") + " " + variableName(node.inKeyVariable) + " " + keyword("WITH") + " " + variableName(node.inDocVariable) + " " + keyword("IN") + " " + collection(node.collection);}return keyword("UPDATE") + " " + variableName(node.inDocVariable) + " " + keyword("IN") + " " + collection(node.collection);case "ReplaceNode":modificationFlags = node.modificationFlags;if(node.hasOwnProperty("inKeyVariable")){return keyword("REPLACE") + " " + variableName(node.inKeyVariable) + " " + keyword("WITH") + " " + variableName(node.inDocVariable) + " " + keyword("IN") + " " + collection(node.collection);}return keyword("REPLACE") + " " + variableName(node.inDocVariable) + " " + keyword("IN") + " " + collection(node.collection);case "UpsertNode":modificationFlags = node.modificationFlags;return keyword("UPSERT") + " " + variableName(node.inDocVariable) + " " + keyword("INSERT") + " " + variableName(node.insertVariable) + " " + keyword(node.isReplace?"REPLACE":"UPDATE") + " " + variableName(node.updateVariable) + " " + keyword("IN") + " " + collection(node.collection);case "RemoveNode":modificationFlags = node.modificationFlags;return keyword("REMOVE") + " " + variableName(node.inVariable) + " " + keyword("IN") + " " + collection(node.collection);case "RemoteNode":return keyword("REMOTE");case "DistributeNode":return keyword("DISTRIBUTE");case "ScatterNode":return keyword("SCATTER");case "GatherNode":return keyword("GATHER");}return "unhandled node type (" + node.type + ")";};var level=0,subqueries=[];var indent=function indent(level,isRoot){return pad(1 + level + level) + (isRoot?"* ":"- ");};var preHandle=function preHandle(node){usedVariables = {};currentNode = node.id;isConst = true;if(node.type === "SubqueryNode"){subqueries.push(level);}};var postHandle=function postHandle(node){var isLeafNode=!parents.hasOwnProperty(node.id);if(["EnumerateCollectionNode","EnumerateListNode","IndexRangeNode","IndexNode","SubqueryNode"].indexOf(node.type) !== -1){level++;}else if(isLeafNode && subqueries.length > 0){level = subqueries.pop();}else if(node.type === "SingletonNode"){level++;}};var constNess=function constNess(){if(isConst){return "   " + annotation("/* const assignment */");}return "";};var variablesUsed=function variablesUsed(){var used=[];for(var a in usedVariables) {if(usedVariables.hasOwnProperty(a)){used.push(variable(a) + " : " + collection(usedVariables[a]));}}if(used.length > 0){return "   " + annotation("/* collections used:") + " " + used.join(", ") + " " + annotation("*/");}return "";};var printNode=function printNode(node){preHandle(node);var line=" " + pad(1 + maxIdLen - String(node.id).length) + variable(node.id) + "   " + keyword(node.type) + pad(1 + maxTypeLen - String(node.type).length) + "   ";if(cluster && cluster.isCluster && cluster.isCluster()){line += variable(node.site) + pad(1 + maxSiteLen - String(node.site).length) + "  ";}line += pad(1 + maxEstimateLen - String(node.estimatedNrItems).length) + value(node.estimatedNrItems) + "   " + indent(level,node.type === "SingletonNode") + label(node);if(node.type === "CalculationNode"){line += variablesUsed() + constNess();}stringBuilder.appendLine(line);postHandle(node);};printQuery(query);stringBuilder.appendLine(section("Execution plan:"));var line=" " + pad(1 + maxIdLen - String("Id").length) + header("Id") + "   " + header("NodeType") + pad(1 + maxTypeLen - String("NodeType").length) + "   ";if(cluster && cluster.isCluster && cluster.isCluster()){line += header("Site") + pad(1 + maxSiteLen - String("Site").length) + "  ";}line += pad(1 + maxEstimateLen - String("Est.").length) + header("Est.") + "   " + header("Comment");stringBuilder.appendLine(line);var walk=[rootNode];while(walk.length > 0) {var id=walk.pop();var node=nodes[id];printNode(node);if(parents.hasOwnProperty(id)){walk = walk.concat(parents[id]);}if(node.type === "SubqueryNode"){walk = walk.concat([node.subquery.nodes[0].id]);}}stringBuilder.appendLine();printIndexes(indexes);printTraversalDetails(traversalDetails);stringBuilder.appendLine();printRules(plan.rules);printModificationFlags(modificationFlags);printWarnings(explain.warnings);} /* the exposed function */function explain(data,options,shouldPrint){'use strict';if(typeof data === "string"){data = {query:data};}if(!(data instanceof Object)){throw "ArangoStatement needs initial data";}if(options === undefined){options = data.options;}options = options || {};setColors(options.colors === undefined?true:options.colors);var stmt=db._createStatement(data);var result=stmt.explain(options);stringBuilder.clearOutput();processQuery(data.query,result,true);if(shouldPrint === undefined || shouldPrint){print(stringBuilder.getOutput());}else {return stringBuilder.getOutput();}}exports.explain = explain;});module.define("@arangodb/aql/functions",function(exports,module){ /*jshint strict: false */ ////////////////////////////////////////////////////////////////////////////////
/// @brief AQL user functions management
///
/// @file
///
/// DISCLAIMER
///
/// Copyright 2012 triagens GmbH, Cologne, Germany
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///
///     http://www.apache.org/licenses/LICENSE-2.0
///
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// Copyright holder is triAGENS GmbH, Cologne, Germany
///
/// @author Jan Steemann
/// @author Copyright 2012, triAGENS GmbH, Cologne, Germany
////////////////////////////////////////////////////////////////////////////////
var internal=require("internal");var arangodb=require("@arangodb");var db=arangodb.db;var ArangoError=arangodb.ArangoError; ////////////////////////////////////////////////////////////////////////////////
/// @brief return the _aqlfunctions collection
////////////////////////////////////////////////////////////////////////////////
var getStorage=function getStorage(){'use strict';var functions=db._collection("_aqlfunctions");if(functions === null){var err=new ArangoError();err.errorNum = arangodb.errors.ERROR_ARANGO_COLLECTION_NOT_FOUND.code;err.errorMessage = "collection '_aqlfunctions' not found";throw err;}return functions;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief apply a prefix filter on the functions
////////////////////////////////////////////////////////////////////////////////
var getFiltered=function getFiltered(group){'use strict';var result=[];if(group !== null && group !== undefined && group.length > 0){var prefix=group.toUpperCase();if(group.length > 1 && group.substr(group.length - 2,2) !== '::'){prefix += '::';}getStorage().toArray().forEach(function(f){if(f.name.toUpperCase().substr(0,prefix.length) === prefix){result.push(f);}});}else {result = getStorage().toArray();}return result;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief validate a function name
////////////////////////////////////////////////////////////////////////////////
var validateName=function validateName(name){'use strict';if(typeof name !== 'string' || !name.match(/^[a-zA-Z0-9_]+(::[a-zA-Z0-9_]+)+$/) || name.substr(0,1) === "_"){var err=new ArangoError();err.errorNum = arangodb.errors.ERROR_QUERY_FUNCTION_INVALID_NAME.code;err.errorMessage = arangodb.errors.ERROR_QUERY_FUNCTION_INVALID_NAME.message;throw err;}}; ////////////////////////////////////////////////////////////////////////////////
/// @brief validate user function code
////////////////////////////////////////////////////////////////////////////////
var stringifyFunction=function stringifyFunction(code,name){'use strict';if(typeof code === 'function'){code = String(code) + "\n";}if(typeof code === 'string'){code = "(" + code + "\n)";if(!internal.parse){ // no parsing possible. assume always valid
return code;}try{if(internal.parse(code,name)){ // parsing successful
return code;}}catch(e) {}} // fall-through intentional
var err=new ArangoError();err.errorNum = arangodb.errors.ERROR_QUERY_FUNCTION_INVALID_CODE.code;err.errorMessage = arangodb.errors.ERROR_QUERY_FUNCTION_INVALID_CODE.message;throw err;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief was docuBlock aqlFunctionsUnregister
////////////////////////////////////////////////////////////////////////////////
var unregisterFunction=function unregisterFunction(name){'use strict';var func=null;validateName(name);try{func = getStorage().document(name.toUpperCase());}catch(err1) {}if(func === null){var err=new ArangoError();err.errorNum = arangodb.errors.ERROR_QUERY_FUNCTION_NOT_FOUND.code;err.errorMessage = internal.sprintf(arangodb.errors.ERROR_QUERY_FUNCTION_NOT_FOUND.message,name);throw err;}getStorage().remove(func._id);internal.reloadAqlFunctions();return true;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief was docuBlock aqlFunctionsUnregisterGroup
////////////////////////////////////////////////////////////////////////////////
var unregisterFunctionsGroup=function unregisterFunctionsGroup(group){'use strict';if(group.length === 0){var err=new ArangoError();err.errorNum = arangodb.errors.ERROR_BAD_PARAMETER.code;err.errorMessage = arangodb.errors.ERROR_BAD_PARAMETER.message;throw err;}var deleted=0;getFiltered(group).forEach(function(f){getStorage().remove(f._id);deleted++;});if(deleted > 0){internal.reloadAqlFunctions();}return deleted;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief was docuBlock aqlFunctionsRegister
////////////////////////////////////////////////////////////////////////////////
var registerFunction=function registerFunction(name,code,isDeterministic){ // validate input
validateName(name);code = stringifyFunction(code,name);var testCode="(function() { var callback = " + code + "; return callback; })()";var err;try{if(internal && internal.hasOwnProperty("executeScript")){var evalResult=internal.executeScript(testCode,undefined,"(user function " + name + ")");if(typeof evalResult !== "function"){err = new ArangoError();err.errorNum = arangodb.errors.ERROR_QUERY_FUNCTION_INVALID_CODE.code;err.errorMessage = arangodb.errors.ERROR_QUERY_FUNCTION_INVALID_CODE.message + ": code must be contained in function";throw err;}}}catch(err1) {err = new ArangoError();err.errorNum = arangodb.errors.ERROR_QUERY_FUNCTION_INVALID_CODE.code;err.errorMessage = arangodb.errors.ERROR_QUERY_FUNCTION_INVALID_CODE.message;throw err;}var result=db._executeTransaction({collections:{write:getStorage().name()},action:function action(params){var exists=false;var collection=require("internal").db._collection(params.collection);var name=params.name;try{var doc=collection.document(name.toUpperCase());if(doc !== null){collection.remove(doc._key);exists = true;}}catch(err2) {}var data={_key:name.toUpperCase(),name:name,code:params.code,isDeterministic:params.isDeterministic || false};collection.save(data);return exists;},params:{name:name,code:code,isDeterministic:isDeterministic,collection:getStorage().name()}});internal.reloadAqlFunctions();return result;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief was docuBlock aqlFunctionsToArray
////////////////////////////////////////////////////////////////////////////////
var toArrayFunctions=function toArrayFunctions(group){'use strict';var result=[];getFiltered(group).forEach(function(f){result.push({name:f.name,code:f.code.substr(1,f.code.length - 2).trim()});});return result;};exports.unregister = unregisterFunction;exports.unregisterGroup = unregisterFunctionsGroup;exports.register = registerFunction;exports.toArray = toArrayFunctions;});module.define("@arangodb/arango-collection-common",function(exports,module){ /*jshint strict: false, unused: false, maxlen: 200 */ ////////////////////////////////////////////////////////////////////////////////
/// @brief ArangoCollection
///
/// @file
///
/// DISCLAIMER
///
/// Copyright 2011-2013 triagens GmbH, Cologne, Germany
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///
///     http://www.apache.org/licenses/LICENSE-2.0
///
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// Copyright holder is triAGENS GmbH, Cologne, Germany
///
/// @author Dr. Frank Celler
/// @author Copyright 2011-2013, triAGENS GmbH, Cologne, Germany
////////////////////////////////////////////////////////////////////////////////
var ArangoCollection=require("@arangodb/arango-collection").ArangoCollection;var arangodb=require("@arangodb");var ArangoError=arangodb.ArangoError;var sprintf=arangodb.sprintf;var db=arangodb.db;var simple=require("@arangodb/simple-query");var SimpleQueryAll=simple.SimpleQueryAll;var SimpleQueryByExample=simple.SimpleQueryByExample;var SimpleQueryByCondition=simple.SimpleQueryByCondition;var SimpleQueryRange=simple.SimpleQueryRange;var SimpleQueryGeo=simple.SimpleQueryGeo;var SimpleQueryNear=simple.SimpleQueryNear;var SimpleQueryWithin=simple.SimpleQueryWithin;var SimpleQueryWithinRectangle=simple.SimpleQueryWithinRectangle;var SimpleQueryFulltext=simple.SimpleQueryFulltext; ////////////////////////////////////////////////////////////////////////////////
/// @brief collection is corrupted
////////////////////////////////////////////////////////////////////////////////
ArangoCollection.STATUS_CORRUPTED = 0; ////////////////////////////////////////////////////////////////////////////////
/// @brief collection is new born
/// @deprecated
////////////////////////////////////////////////////////////////////////////////
ArangoCollection.STATUS_NEW_BORN = 1; ////////////////////////////////////////////////////////////////////////////////
/// @brief collection is unloaded
////////////////////////////////////////////////////////////////////////////////
ArangoCollection.STATUS_UNLOADED = 2; ////////////////////////////////////////////////////////////////////////////////
/// @brief collection is loaded
////////////////////////////////////////////////////////////////////////////////
ArangoCollection.STATUS_LOADED = 3; ////////////////////////////////////////////////////////////////////////////////
/// @brief collection is unloading
////////////////////////////////////////////////////////////////////////////////
ArangoCollection.STATUS_UNLOADING = 4; ////////////////////////////////////////////////////////////////////////////////
/// @brief collection is deleted
////////////////////////////////////////////////////////////////////////////////
ArangoCollection.STATUS_DELETED = 5; ////////////////////////////////////////////////////////////////////////////////
/// @brief collection is currently loading
////////////////////////////////////////////////////////////////////////////////
ArangoCollection.STATUS_LOADING = 6; ////////////////////////////////////////////////////////////////////////////////
/// @brief document collection
////////////////////////////////////////////////////////////////////////////////
ArangoCollection.TYPE_DOCUMENT = 2; ////////////////////////////////////////////////////////////////////////////////
/// @brief edge collection
////////////////////////////////////////////////////////////////////////////////
ArangoCollection.TYPE_EDGE = 3; ////////////////////////////////////////////////////////////////////////////////
/// @brief prints a collection
////////////////////////////////////////////////////////////////////////////////
ArangoCollection.prototype._PRINT = function(context){var status="unknown";var type="unknown";var name=this.name();switch(this.status()){case ArangoCollection.STATUS_NEW_BORN:status = "new born";break;case ArangoCollection.STATUS_UNLOADED:status = "unloaded";break;case ArangoCollection.STATUS_UNLOADING:status = "unloading";break;case ArangoCollection.STATUS_LOADED:status = "loaded";break;case ArangoCollection.STATUS_CORRUPTED:status = "corrupted";break;case ArangoCollection.STATUS_DELETED:status = "deleted";break;}switch(this.type()){case ArangoCollection.TYPE_DOCUMENT:type = "document";break;case ArangoCollection.TYPE_EDGE:type = "edge";break;}var colors=require("internal").COLORS;var useColor=context.useColor;context.output += "[ArangoCollection ";if(useColor){context.output += colors.COLOR_NUMBER;}context.output += this._id;if(useColor){context.output += colors.COLOR_RESET;}context.output += ", \"";if(useColor){context.output += colors.COLOR_STRING;}context.output += name || "unknown";if(useColor){context.output += colors.COLOR_RESET;}context.output += "\" (type " + type + ", status " + status + ")]";}; ////////////////////////////////////////////////////////////////////////////////
/// @brief converts into a string
////////////////////////////////////////////////////////////////////////////////
ArangoCollection.prototype.toString = function(){return "[ArangoCollection: " + this._id + "]";}; ////////////////////////////////////////////////////////////////////////////////
/// @brief was docuBlock collectionAll
////////////////////////////////////////////////////////////////////////////////
ArangoCollection.prototype.all = function(){return new SimpleQueryAll(this);}; ////////////////////////////////////////////////////////////////////////////////
/// @brief was docuBlock collectionByExample
////////////////////////////////////////////////////////////////////////////////
ArangoCollection.prototype.byExample = function(example){var e;var i; // example is given as only argument
if(arguments.length === 1){e = example;} // example is given as list
else {e = {}; // create a REAL array, otherwise JSON.stringify will fail
for(i = 0;i < arguments.length;i += 2) {e[arguments[i]] = arguments[i + 1];}}return new SimpleQueryByExample(this,e);}; ////////////////////////////////////////////////////////////////////////////////
/// @brief was docuBlock collectionByExampleHash
////////////////////////////////////////////////////////////////////////////////
ArangoCollection.prototype.byExampleHash = function(index,example){var sq=this.byExample(example);sq._index = index;sq._type = "hash";return sq;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief was docuBlock collectionByExampleSkiplist
////////////////////////////////////////////////////////////////////////////////
ArangoCollection.prototype.byExampleSkiplist = function(index,example){var sq=this.byExample(example);sq._index = index;sq._type = "skiplist";return sq;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief constructs a query-by-condition using a skiplist index
////////////////////////////////////////////////////////////////////////////////
ArangoCollection.prototype.byConditionSkiplist = function(index,condition){var sq=new SimpleQueryByCondition(this,condition);sq._index = index;sq._type = "skiplist";return sq;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief was docuBlock collectionRange
////////////////////////////////////////////////////////////////////////////////
ArangoCollection.prototype.range = function(name,left,right){return new SimpleQueryRange(this,name,left,right,0);}; ////////////////////////////////////////////////////////////////////////////////
/// @brief was docuBlock collectionClosedRange
////////////////////////////////////////////////////////////////////////////////
ArangoCollection.prototype.closedRange = function(name,left,right){return new SimpleQueryRange(this,name,left,right,1);}; ////////////////////////////////////////////////////////////////////////////////
/// @brief was docuBlock collectionGeo
////////////////////////////////////////////////////////////////////////////////
ArangoCollection.prototype.geo = function(loc,order){var idx;var locateGeoIndex1=function locateGeoIndex1(collection,loc,order){var inds=collection.getIndexes();var i;for(i = 0;i < inds.length;++i) {var index=inds[i];if(index.type === "geo1"){if(index.fields[0] === loc && index.geoJson === order){return index;}}}return null;};var locateGeoIndex2=function locateGeoIndex2(collection,lat,lon){var inds=collection.getIndexes();var i;for(i = 0;i < inds.length;++i) {var index=inds[i];if(index.type === "geo2"){if(index.fields[0] === lat && index.fields[1] === lon){return index;}}}return null;};if(order === undefined){if(typeof loc === "object"){idx = this.index(loc);}else {idx = locateGeoIndex1(this,loc,false);}}else if(typeof order === "boolean"){idx = locateGeoIndex1(this,loc,order);}else {idx = locateGeoIndex2(this,loc,order);}if(idx === null){var err=new ArangoError();err.errorNum = arangodb.errors.ERROR_QUERY_GEO_INDEX_MISSING.code;err.errorMessage = require("internal").sprintf(arangodb.errors.ERROR_QUERY_GEO_INDEX_MISSING.message,this.name());throw err;}return new SimpleQueryGeo(this,idx.id);}; ////////////////////////////////////////////////////////////////////////////////
/// @brief was docuBlock collectionNear
////////////////////////////////////////////////////////////////////////////////
ArangoCollection.prototype.near = function(lat,lon){return new SimpleQueryNear(this,lat,lon);}; ////////////////////////////////////////////////////////////////////////////////
/// @brief was docuBlock collectionWithin
////////////////////////////////////////////////////////////////////////////////
ArangoCollection.prototype.within = function(lat,lon,radius){return new SimpleQueryWithin(this,lat,lon,radius);};ArangoCollection.prototype.withinRectangle = function(lat1,lon1,lat2,lon2){return new SimpleQueryWithinRectangle(this,lat1,lon1,lat2,lon2);};ArangoCollection.prototype.fulltext = function(attribute,query,iid){return new SimpleQueryFulltext(this,attribute,query,iid);}; ////////////////////////////////////////////////////////////////////////////////
/// @brief was docuBlock collectionIterate
////////////////////////////////////////////////////////////////////////////////
ArangoCollection.prototype.iterate = function(iterator,options){var probability=1.0;var limit=null;var stmt;var cursor;var pos; // TODO: this is not optimal for the client, there should be an HTTP call handling
// everything on the server
if(options !== undefined){if(options.hasOwnProperty("probability")){probability = options.probability;}if(options.hasOwnProperty("limit")){limit = options.limit;}}if(limit === null){if(probability >= 1.0){cursor = this.all();}else {stmt = sprintf("FOR d IN %s FILTER rand() >= @prob RETURN d",this.name());stmt = db._createStatement({query:stmt});if(probability < 1.0){stmt.bind("prob",probability);}cursor = stmt.execute();}}else {if(typeof limit !== "number"){var error=new ArangoError();error.errorNum = arangodb.errors.ERROR_ILLEGAL_NUMBER.code;error.errorMessage = "expecting a number, got " + String(limit);throw error;}if(probability >= 1.0){cursor = this.all().limit(limit);}else {stmt = sprintf("FOR d IN %s FILTER rand() >= @prob LIMIT %d RETURN d",this.name(),limit);stmt = db._createStatement({query:stmt});if(probability < 1.0){stmt.bind("prob",probability);}cursor = stmt.execute();}}pos = 0;while(cursor.hasNext()) {var document=cursor.next();iterator(document,pos);pos++;}}; ////////////////////////////////////////////////////////////////////////////////
/// @brief was docuBlock documentsCollectionRemoveByExample
////////////////////////////////////////////////////////////////////////////////
ArangoCollection.prototype.removeByExample = function(example,waitForSync,limit){throw "cannot call abstract removeByExample function";}; ////////////////////////////////////////////////////////////////////////////////
/// @brief was docuBlock documentsCollectionReplaceByExample
////////////////////////////////////////////////////////////////////////////////
ArangoCollection.prototype.replaceByExample = function(example,newValue,waitForSync,limit){throw "cannot call abstract replaceByExample function";}; ////////////////////////////////////////////////////////////////////////////////
/// @brief was docuBlock documentsCollectionUpdateByExample
////////////////////////////////////////////////////////////////////////////////
ArangoCollection.prototype.updateByExample = function(example,newValue,keepNull,waitForSync,limit){throw "cannot call abstract updateExample function";};});module.define("@arangodb/arango-statement-common",function(exports,module){ /*jshint strict: false */ ////////////////////////////////////////////////////////////////////////////////
/// @brief Arango statements
///
/// @file
///
/// DISCLAIMER
///
/// Copyright 2012 triagens GmbH, Cologne, Germany
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///
///     http://www.apache.org/licenses/LICENSE-2.0
///
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// Copyright holder is triAGENS GmbH, Cologne, Germany
///
/// @author Jan Steemann
/// @author Copyright 2012, triAGENS GmbH, Cologne, Germany
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
/// @brief constructor
////////////////////////////////////////////////////////////////////////////////
function ArangoStatement(database,data){this._database = database;this._doCount = false;this._batchSize = null;this._bindVars = {};this._options = undefined;this._cache = undefined;if(!data){throw "ArangoStatement needs initial data";}if(typeof data === "string"){data = {query:data};}else if(typeof data === 'object' && typeof data.toAQL === 'function'){data = {query:data.toAQL()};}if(!(data instanceof Object)){throw "ArangoStatement needs initial data";}if(data.query === undefined || data.query === ""){throw "ArangoStatement needs a valid query attribute";}this.setQuery(data.query);if(data.bindVars instanceof Object){this.bind(data.bindVars);}if(data.options instanceof Object){this.setOptions(data.options);}if(data.count !== undefined){this.setCount(data.count);}if(data.batchSize !== undefined){this.setBatchSize(data.batchSize);}if(data.cache !== undefined){this.setCache(data.cache);}} ////////////////////////////////////////////////////////////////////////////////
/// @brief binds a parameter to the statement
///
/// This function can be called multiple times, once for each bind parameter.
/// All bind parameters will be transferred to the server in one go when
/// execute() is called.
////////////////////////////////////////////////////////////////////////////////
ArangoStatement.prototype.bind = function(key,value){if(key instanceof Object){if(value !== undefined){throw "invalid bind parameter declaration";}this._bindVars = key;}else if(typeof key === "string"){this._bindVars[key] = value;}else if(typeof key === "number"){var strKey=String(parseInt(key,10));if(strKey !== String(key)){throw "invalid bind parameter declaration";}this._bindVars[strKey] = value;}else {throw "invalid bind parameter declaration";}}; ////////////////////////////////////////////////////////////////////////////////
/// @brief returns the bind variables already set
////////////////////////////////////////////////////////////////////////////////
ArangoStatement.prototype.getBindVariables = function(){return this._bindVars;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief gets the cache flag for the statement
////////////////////////////////////////////////////////////////////////////////
ArangoStatement.prototype.getCache = function(){return this._cache;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief gets the count flag for the statement
////////////////////////////////////////////////////////////////////////////////
ArangoStatement.prototype.getCount = function(){return this._doCount;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief gets the maximum number of results documents the cursor will return
/// in a single server roundtrip.
////////////////////////////////////////////////////////////////////////////////
ArangoStatement.prototype.getBatchSize = function(){return this._batchSize;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief gets the user options
////////////////////////////////////////////////////////////////////////////////
ArangoStatement.prototype.getOptions = function(){return this._options;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief gets query string
////////////////////////////////////////////////////////////////////////////////
ArangoStatement.prototype.getQuery = function(){return this._query;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief sets the cache flag for the statement
////////////////////////////////////////////////////////////////////////////////
ArangoStatement.prototype.setCache = function(bool){this._cache = bool?true:false;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief sets the count flag for the statement
///
/// Setting the count flag will make the statement's result cursor return the
/// total number of result documents. The count flag is not set by default.
////////////////////////////////////////////////////////////////////////////////
ArangoStatement.prototype.setCount = function(bool){this._doCount = bool?true:false;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief sets the maximum number of results documents the cursor will return
/// in a single server roundtrip.
/// The higher this number is, the less server roundtrips will be made when
/// iterating over the result documents of a cursor.
////////////////////////////////////////////////////////////////////////////////
ArangoStatement.prototype.setBatchSize = function(value){var batch=parseInt(value,10);if(batch > 0){this._batchSize = batch;}}; ////////////////////////////////////////////////////////////////////////////////
/// @brief sets the user options
////////////////////////////////////////////////////////////////////////////////
ArangoStatement.prototype.setOptions = function(value){this._options = value;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief sets the query string
////////////////////////////////////////////////////////////////////////////////
ArangoStatement.prototype.setQuery = function(query){this._query = query && typeof query.toAQL === 'function'?query.toAQL():query;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief parses a query and return the results
////////////////////////////////////////////////////////////////////////////////
ArangoStatement.prototype.parse = function(){throw "cannot call abstract method parse()";}; ////////////////////////////////////////////////////////////////////////////////
/// @brief explains a query and return the results
////////////////////////////////////////////////////////////////////////////////
ArangoStatement.prototype.explain = function(){throw "cannot call abstract method explain()";}; ////////////////////////////////////////////////////////////////////////////////
/// @brief executes the query
///
/// Invoking execute() will transfer the query and all bind parameters to the
/// server. It will return a cursor with the query results in case of success.
/// In case of an error, the error will be printed
////////////////////////////////////////////////////////////////////////////////
ArangoStatement.prototype.execute = function(){throw "cannot call abstract method execute()";};exports.ArangoStatement = ArangoStatement;});module.define("@arangodb/common",function(exports,module){'use strict'; ////////////////////////////////////////////////////////////////////////////////
/// @brief JavaScript base module
///
/// @file
///
/// DISCLAIMER
///
/// Copyright 2004-2013 triAGENS GmbH, Cologne, Germany
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///
///     http://www.apache.org/licenses/LICENSE-2.0
///
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// Copyright holder is triAGENS GmbH, Cologne, Germany
///
/// @author Dr. Frank Celler
/// @author Copyright 2012-2013, triAGENS GmbH, Cologne, Germany
////////////////////////////////////////////////////////////////////////////////
var internal=require("internal");var fs=require("fs");var mimetypes=require("@arangodb/mimetypes").mimeTypes; ////////////////////////////////////////////////////////////////////////////////
/// @brief errors
////////////////////////////////////////////////////////////////////////////////
Object.keys(internal.errors).forEach(function(key){exports[key] = internal.errors[key].code;});exports.errors = internal.errors; ////////////////////////////////////////////////////////////////////////////////
/// @brief ArangoError
////////////////////////////////////////////////////////////////////////////////
exports.ArangoError = internal.ArangoError; ////////////////////////////////////////////////////////////////////////////////
/// @brief defines a module
////////////////////////////////////////////////////////////////////////////////
exports.defineModule = function(path,file){var content;var m;var mc;content = fs.read(file);mc = internal.db._collection("_modules");if(mc === null){mc = internal.db._create("_modules",{isSystem:true});}path = module.normalize(path);m = mc.firstExample({path:path});if(m === null){mc.save({path:path,content:content});}else {mc.replace(m,{path:path,content:content});}}; ////////////////////////////////////////////////////////////////////////////////
/// @brief guessContentType
////////////////////////////////////////////////////////////////////////////////
exports.guessContentType = function(filename,defaultValue){var re=/\.([a-zA-Z0-9]+)$/;var match=re.exec(filename);if(match !== null){var extension=match[1];if(mimetypes.hasOwnProperty(extension)){var type=mimetypes[extension];if(type[1]){ // append charset
return type[0] + "; charset=utf-8";}return type[0];} // fall-through intentional
} // default mimetype
if(defaultValue){return defaultValue;}return "text/plain; charset=utf-8";}; ////////////////////////////////////////////////////////////////////////////////
/// @brief normalizeURL
///
/// If @FA{path} starts with "." or "..", then it is a relative path.
/// Otherwise it is an absolute path. Normalizing will remove `//`,
/// `/./`, `/../` from the url - expect in the beginning, where it keeps
/// `../` and or at most one `./`.
///
/// If @FA{path} is empty, the url `./` will be returned.
////////////////////////////////////////////////////////////////////////////////
exports.normalizeURL = function(path){var i;var n;var p;var q;var r;var x;if(path === ""){return "./";}p = path.split('/'); // relative path
if(p[0] === "." || p[0] === ".."){r = p[0] + "/";p.shift();q = p;} // absolute path
else if(p[0] === ""){r = "/";p.shift();q = p;} // assume that the path is relative
else {r = "./";q = p;} // normalize path
n = [];for(i = 0;i < q.length;++i) {x = q[i];if(x === ".."){if(n.length === 0){if(r === "../"){n.push(x);}else if(r === "./"){r = "../";}else {throw "cannot use '..' to escape top-level-directory";}}else if(n[n.length - 1] === ".."){n.push(x);}else {n.pop();}}else if(x !== "" && x !== "."){n.push(x);}}return r + n.join('/');}; ////////////////////////////////////////////////////////////////////////////////
/// @brief inspect
////////////////////////////////////////////////////////////////////////////////
exports.inspect = internal.inspect; ////////////////////////////////////////////////////////////////////////////////
/// @brief output
///
/// In order to allow "capture" output to work, we cannot assigne the
/// function here.
////////////////////////////////////////////////////////////////////////////////
exports.output = function(){internal.output.apply(internal.output,arguments);}; ////////////////////////////////////////////////////////////////////////////////
/// @brief print
////////////////////////////////////////////////////////////////////////////////
exports.print = internal.print; ////////////////////////////////////////////////////////////////////////////////
/// @brief printf
////////////////////////////////////////////////////////////////////////////////
exports.printf = internal.printf; ////////////////////////////////////////////////////////////////////////////////
/// @brief sprintf
////////////////////////////////////////////////////////////////////////////////
exports.sprintf = internal.sprintf; ////////////////////////////////////////////////////////////////////////////////
/// @brief printObject
////////////////////////////////////////////////////////////////////////////////
exports.printObject = internal.printObject; ////////////////////////////////////////////////////////////////////////////////
/// @brief 2D ASCII table printing
////////////////////////////////////////////////////////////////////////////////
exports.printTable = function(list,columns,options){options = options || {};if(options.totalString === undefined){options.totalString = "%s document(s)\n";}var pad='...';var descriptions,matrix,col,what,j;if(columns === undefined){what = list[0];}else if(Array.isArray(columns)){what = {};columns.forEach(function(col){what[col] = null;});}else {what = columns;}j = 0;descriptions = [];matrix = [[]];for(col in what) {if(what.hasOwnProperty(col)){var fixedLength=null;if(columns && columns.hasOwnProperty(col) && columns[col] > 0){fixedLength = columns[col] >= pad.length?columns[col]:pad.length;} // header
var name=col; // rename header?
if(options.hasOwnProperty("rename")){if(options.rename.hasOwnProperty(col)){name = options.rename[col];}}descriptions.push({id:col,fixedLength:fixedLength,length:fixedLength || name.length});matrix[0][j++] = name;}} // determine values & max widths
list.forEach(function(row,i){matrix[i + 1] = [];descriptions.forEach(function(col){if(row.hasOwnProperty(col.id)){var value;if(options.prettyStrings && typeof row[col.id] === 'string'){value = row[col.id];}else {value = JSON.stringify(row[col.id]) || "";}matrix[i + 1].push(value);if(value.length > col.length && !col.fixedLength){col.length = Math.min(value.length,100);}}else { // undefined
matrix[i + 1].push('');}});});var divider=function divider(){var parts=[];descriptions.forEach(function(desc){parts.push(exports.stringPadding('',desc.length,'-','r'));});if(options.framed){return '+-' + parts.join('-+-') + '-+\n';}return parts.join('   ') + '\n';};var compose=function compose(){var result='';if(options.framed){result += divider();}matrix.forEach(function(row,i){var parts=[];row.forEach(function(col,j){var len=descriptions[j].length,value=row[j];if(value.length > len){value = value.substr(0,len - pad.length) + pad;}parts.push(exports.stringPadding(value,len,' ','r'));});if(options.framed){result += '| ' + parts.join(' | ') + ' |\n';}else {result += parts.join('   ') + '\n';}if(i === 0){result += divider();}});result += divider();if(!options.hideTotal){result += internal.sprintf(options.totalString,String(list.length));}return result;};if(!Array.isArray(list)){ // not an array
return;}if(list.length === 0){exports.print(options.emptyString || "no document(s)");}else {exports.print(compose());}}; ////////////////////////////////////////////////////////////////////////////////
/// @brief stringPadding
////////////////////////////////////////////////////////////////////////////////
exports.stringPadding = function(str,len,pad,dir){ // yes, this is more code than new Array(length).join(chr), but it makes jslint happy
function fill(length,chr){var result='',i;for(i = 0;i < length;++i) {result += chr;}return result;}if(typeof len === "undefined"){len = 0;}if(typeof pad === "undefined"){pad = ' ';}if(len + 1 >= str.length){switch(dir || "r"){ // LEFT
case 'l':str = fill(len + 1 - str.length,pad) + str;break; // BOTH
case 'b':var padlen=len - str.length;var right=Math.ceil(padlen / 2);var left=padlen - right;str = fill(left + 1,pad) + str + fill(right + 1,pad);break;default:str = str + fill(len + 1 - str.length,pad);break;}}return str;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief throws an error in case a download failed
////////////////////////////////////////////////////////////////////////////////
exports.throwDownloadError = function(msg){throw new exports.ArangoError({errorNum:exports.errors.ERROR_APPLICATION_DOWNLOAD_FAILED.code,errorMessage:exports.errors.ERROR_APPLICATION_DOWNLOAD_FAILED.message + ': ' + String(msg)});}; ////////////////////////////////////////////////////////////////////////////////
/// @brief throws an error in case of missing file
////////////////////////////////////////////////////////////////////////////////
exports.throwFileNotFound = function(msg){throw new exports.ArangoError({errorNum:exports.errors.ERROR_FILE_NOT_FOUND.code,errorMessage:exports.errors.ERROR_FILE_NOT_FOUND.message + ': ' + String(msg)});}; ////////////////////////////////////////////////////////////////////////////////
/// @brief throws an error in case of a bad parameter
////////////////////////////////////////////////////////////////////////////////
exports.throwBadParameter = function(msg){throw new exports.ArangoError({errorNum:exports.errors.ERROR_BAD_PARAMETER.code,errorMessage:exports.errors.ERROR_BAD_PARAMETER.message + ': ' + String(msg)});}; ////////////////////////////////////////////////////////////////////////////////
/// @brief checks parameter, throws an error if missing
////////////////////////////////////////////////////////////////////////////////
exports.checkParameter = function(usage,descs,vars){var i;for(i = 0;i < descs.length;++i) {var desc=descs[i];if(typeof vars[i] === "undefined"){exports.throwBadParameter(desc[0] + " missing, usage: " + usage);}if(typeof vars[i] !== desc[1]){exports.throwBadParameter(desc[0] + " should be a '" + desc[1] + "', " + "not '" + typeof vars[i] + "'");}}}; ////////////////////////////////////////////////////////////////////////////////
/// @brief generate info message for newer version(s) available
////////////////////////////////////////////////////////////////////////////////
exports.checkAvailableVersions = function(version){var console=require("console");var log;if(require("@arangodb").isServer){log = console.info;}else {log = internal.print;}if(version === undefined){version = internal.version;}if(version.match(/beta|alpha|preview|devel/) !== null){log("You are using an alpha/beta/preview version ('" + version + "') of ArangoDB");return;}try{var u="https://www.arangodb.com/repositories/versions.php?version=" + version + "&os=" + internal.platform;var d=internal.download(u,"",{timeout:300});var v=JSON.parse(d.body);if(v.hasOwnProperty("bugfix")){log("Please note that a new bugfix version '" + v.bugfix.version + "' is available");}if(v.hasOwnProperty("minor")){log("Please note that a new minor version '" + v.minor.version + "' is available");}if(v.hasOwnProperty("major")){log("Please note that a new major version '" + v.major.version + "' is available");}}catch(err) {if(console && console.debug){console.debug("cannot check for newer version: ",err.stack);}}};});module.define("@arangodb/general-graph",function(exports,module){ /*jshint strict: false */ /*global ArangoClusterComm */ ////////////////////////////////////////////////////////////////////////////////
/// @brief Graph functionality
///
/// @file
///
/// DISCLAIMER
///
/// Copyright 2010-2014 triagens GmbH, Cologne, Germany
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///
///     http://www.apache.org/licenses/LICENSE-2.0
///
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// Copyright holder is triAGENS GmbH, Cologne, Germany
///
/// @author Florian Bartels, Michael Hackstein, Guido Schwab
/// @author Copyright 2011-2014, triAGENS GmbH, Cologne, Germany
////////////////////////////////////////////////////////////////////////////////
var arangodb=require("@arangodb"),internal=require("internal"),ArangoCollection=arangodb.ArangoCollection,ArangoError=arangodb.ArangoError,db=arangodb.db,errors=arangodb.errors,_=require("lodash"); ////////////////////////////////////////////////////////////////////////////////
/// @brief transform a string into an array.
////////////////////////////////////////////////////////////////////////////////
var stringToArray=function stringToArray(x){if(typeof x === "string"){return [x];}return x.slice();}; ////////////////////////////////////////////////////////////////////////////////
/// @brief checks if a parameter is not defined, an empty string or an empty
//  array
////////////////////////////////////////////////////////////////////////////////
var isValidCollectionsParameter=function isValidCollectionsParameter(x){if(!x){return false;}if(Array.isArray(x) && x.length === 0){return false;}if(typeof x !== "string" && !Array.isArray(x)){return false;}return true;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief find or create a collection by name
////////////////////////////////////////////////////////////////////////////////
var findOrCreateCollectionByName=function findOrCreateCollectionByName(name,type,noCreate){var col=db._collection(name),res=false;if(col === null && !noCreate){if(type === ArangoCollection.TYPE_DOCUMENT){col = db._create(name);}else {col = db._createEdgeCollection(name);}res = true;}else if(!(col instanceof ArangoCollection)){var err=new ArangoError();err.errorNum = arangodb.errors.ERROR_GRAPH_NOT_AN_ARANGO_COLLECTION.code;err.errorMessage = name + arangodb.errors.ERROR_GRAPH_NOT_AN_ARANGO_COLLECTION.message;throw err;}return res;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief find or create a collection by name
////////////////////////////////////////////////////////////////////////////////
var findOrCreateCollectionsByEdgeDefinitions=function findOrCreateCollectionsByEdgeDefinitions(edgeDefinitions,noCreate){var vertexCollections={},edgeCollections={};edgeDefinitions.forEach(function(e){if(!e.hasOwnProperty('collection') || !e.hasOwnProperty('from') || !e.hasOwnProperty('to') || !Array.isArray(e.from) || !Array.isArray(e.to)){var err=new ArangoError();err.errorNum = arangodb.errors.ERROR_GRAPH_CREATE_MALFORMED_EDGE_DEFINITION.code;err.errorMessage = arangodb.errors.ERROR_GRAPH_CREATE_MALFORMED_EDGE_DEFINITION.message;throw err;}e.from.concat(e.to).forEach(function(v){findOrCreateCollectionByName(v,ArangoCollection.TYPE_DOCUMENT,noCreate);vertexCollections[v] = db[v];});findOrCreateCollectionByName(e.collection,ArangoCollection.TYPE_EDGE,noCreate);edgeCollections[e.collection] = db[e.collection];});return [vertexCollections,edgeCollections];}; ////////////////////////////////////////////////////////////////////////////////
/// @brief internal function to get graphs collection
////////////////////////////////////////////////////////////////////////////////
var getGraphCollection=function getGraphCollection(){var gCol=db._graphs;if(gCol === null || gCol === undefined){var err=new ArangoError();err.errorNum = arangodb.errors.ERROR_GRAPH_NO_GRAPH_COLLECTION.code;err.errorMessage = arangodb.errors.ERROR_GRAPH_NO_GRAPH_COLLECTION.message;throw err;}return gCol;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief internal function to print edge definitions in _PRINT
////////////////////////////////////////////////////////////////////////////////
var printEdgeDefinitions=function printEdgeDefinitions(defs){return _.map(defs,function(d){var out=d.collection;out += ": [";out += d.from.join(", ");out += "] -> [";out += d.to.join(", ");out += "]";return out;});}; ////////////////////////////////////////////////////////////////////////////////
/// @brief internal function to wrap arango collections for overwrite
////////////////////////////////////////////////////////////////////////////////
var wrapCollection=function wrapCollection(col){var wrapper={};_.each(_.functions(col),function(func){wrapper[func] = function(){return col[func].apply(col,arguments);};});return wrapper;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief was docuBlock JSF_general_graph_example_description
////////////////////////////////////////////////////////////////////////////////
var transformExample=function transformExample(example){if(example === undefined){return {};}if(typeof example === "string"){return {_id:example};}if(typeof example === "object"){if(Array.isArray(example)){return _.map(example,function(e){if(typeof e === "string"){return {_id:e};}return e;});}return example;}var err=new ArangoError();err.errorNum = arangodb.errors.ERROR_GRAPH_INVALID_EXAMPLE_ARRAY_OBJECT_STRING.code;err.errorMessage = arangodb.errors.ERROR_GRAPH_INVALID_EXAMPLE_ARRAY_OBJECT_STRING.message;throw err;};var checkAllowsRestriction=function checkAllowsRestriction(list,rest,msg){var unknown=[];var colList=_.map(list,function(item){return item.name();});_.each(rest,function(r){if(!_.contains(colList,r)){unknown.push(r);}});if(unknown.length > 0){var err=new ArangoError();err.errorNum = arangodb.errors.ERROR_BAD_PARAMETER.code;err.errorMessage = msg + ": " + unknown.join(" and ") + " are not known to the graph";throw err;}return true;};var AQLStatement=function AQLStatement(query,type){this.query = query;if(type){this.type = type;}};AQLStatement.prototype.printQuery = function(){return this.query;};AQLStatement.prototype.isPathQuery = function(){return this.type === "path";};AQLStatement.prototype.isPathVerticesQuery = function(){return this.type === "pathVertices";};AQLStatement.prototype.isPathEdgesQuery = function(){return this.type === "pathEdges";};AQLStatement.prototype.isEdgeQuery = function(){return this.type === "edge";};AQLStatement.prototype.isVertexQuery = function(){return this.type === "vertex";};AQLStatement.prototype.isNeighborQuery = function(){return this.type === "neighbor";};AQLStatement.prototype.allowsRestrict = function(){return this.isEdgeQuery() || this.isVertexQuery() || this.isNeighborQuery();}; ////////////////////////////////////////////////////////////////////////////////
/// @brief Starting point of the fluent interface.
///
/// Only for internal use.
////////////////////////////////////////////////////////////////////////////////
var AQLGenerator=function AQLGenerator(graph){this.stack = [];this.callStack = [];this.bindVars = {"graphName":graph.__name};this.graph = graph;this.cursor = null;this.lastVar = "";this._path = [];this._pathVertices = [];this._pathEdges = [];this._getPath = false;};AQLGenerator.prototype._addToPrint = function(name){var args=Array.prototype.slice.call(arguments);args.shift(); // The Name
var stackEntry={};stackEntry.name = name;if(args.length > 0 && args[0] !== undefined){stackEntry.params = args;}else {stackEntry.params = [];}this.callStack.push(stackEntry);}; ////////////////////////////////////////////////////////////////////////////////
/// @brief Print the call stack of this query
////////////////////////////////////////////////////////////////////////////////
AQLGenerator.prototype._PRINT = function(context){context.output = "[ GraphAQL ";context.output += this.graph.__name;_.each(this.callStack,function(call){if(context.prettyPrint){context.output += "\n";}context.output += ".";context.output += call.name;context.output += "(";var i=0;for(i = 0;i < call.params.length;++i) {if(i > 0){context.output += ", ";}internal.printRecursive(call.params[i],context);}context.output += ")";});context.output += " ] ";}; ////////////////////////////////////////////////////////////////////////////////
/// @brief Dispose and reset the current cursor of the query
///
/// Only for internal use.
////////////////////////////////////////////////////////////////////////////////
AQLGenerator.prototype._clearCursor = function(){if(this.cursor){this.cursor.dispose();this.cursor = null;}}; ////////////////////////////////////////////////////////////////////////////////
/// @brief Execute the query and keep the cursor
///
/// Only for internal use.
////////////////////////////////////////////////////////////////////////////////
AQLGenerator.prototype._createCursor = function(){if(!this.cursor){this.cursor = this.execute();}}; ////////////////////////////////////////////////////////////////////////////////
/// @brief General edge query, takes direction as parameter
///
/// This will create the general AQL statement to load edges
/// connected to the vertices selected in the step before.
/// Will also bind the options into bindVars.
///
/// Only for internal use, user gets different functions for directions
////////////////////////////////////////////////////////////////////////////////
AQLGenerator.prototype._edges = function(edgeExample,options){this._clearCursor();this.options = options || {};var ex=transformExample(edgeExample);var edgeName="edges_" + this.stack.length;var query="FOR " + edgeName + ' IN GRAPH_EDGES(@graphName';if(!this.getLastVar()){query += ',{}';}else {query += ',' + this.getLastVar();}query += ',@options_' + this.stack.length + ')';if(!Array.isArray(ex)){ex = [ex];}this.options.edgeExamples = ex;this.options.includeData = true;this.bindVars["options_" + this.stack.length] = this.options;var stmt=new AQLStatement(query,"edge");this.stack.push(stmt);this.lastVar = edgeName;this._path.push(edgeName);this._pathEdges.push(edgeName);return this;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief was docuBlock JSF_general_graph_fluent_aql_edges
////////////////////////////////////////////////////////////////////////////////
AQLGenerator.prototype.edges = function(example){this._addToPrint("edges",example);return this._edges(example,{direction:"any"});}; ////////////////////////////////////////////////////////////////////////////////
/// @brief was docuBlock JSF_general_graph_fluent_aql_outEdges
////////////////////////////////////////////////////////////////////////////////
AQLGenerator.prototype.outEdges = function(example){this._addToPrint("outEdges",example);return this._edges(example,{direction:"outbound"});}; ////////////////////////////////////////////////////////////////////////////////
/// @brief was docuBlock JSF_general_graph_fluent_aql_inEdges
////////////////////////////////////////////////////////////////////////////////
AQLGenerator.prototype.inEdges = function(example){this._addToPrint("inEdges",example);return this._edges(example,{direction:"inbound"});}; ////////////////////////////////////////////////////////////////////////////////
/// @brief General vertex query, takes direction as parameter
///
/// This will create the general AQL statement to load vertices
/// connected to the edges selected in the step before.
/// Will also bind the options into bindVars.
///
/// Only for internal use, user gets different functions for directions
////////////////////////////////////////////////////////////////////////////////
AQLGenerator.prototype._vertices = function(example,options,mergeWith){this._clearCursor();this.options = options || {};var ex=transformExample(example);var vertexName="vertices_" + this.stack.length;var query="FOR " + vertexName + " IN GRAPH_VERTICES(@graphName,";if(mergeWith !== undefined){if(Array.isArray(mergeWith)){var i;query += "[";for(i = 0;i < mergeWith.length;++i) {if(i > 0){query += ",";}query += "MERGE(@vertexExample_" + this.stack.length + "," + mergeWith[i] + ")";}query += "]";}else {if(Array.isArray(ex)){query += "@vertexExample_" + this.stack.length + " [ * RETURN MERGE(CURRENT," + mergeWith + ")]";}else {query += "MERGE(@vertexExample_" + this.stack.length + "," + mergeWith + ")";}}}else {query += "@vertexExample_" + this.stack.length;}query += ',@options_' + this.stack.length + ')';this.bindVars["vertexExample_" + this.stack.length] = ex;this.bindVars["options_" + this.stack.length] = this.options;var stmt=new AQLStatement(query,"vertex");this.stack.push(stmt);this.lastVar = vertexName;this._path.push(vertexName);this._pathVertices.push(vertexName);return this;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief was docuBlock JSF_general_graph_fluent_aql_vertices
////////////////////////////////////////////////////////////////////////////////
AQLGenerator.prototype.vertices = function(example){this._addToPrint("vertices",example);if(!this.getLastVar()){return this._vertices(example);}var edgeVar=this.getLastVar();return this._vertices(example,undefined,["{'_id': " + edgeVar + "._from}","{'_id': " + edgeVar + "._to}"]);}; ////////////////////////////////////////////////////////////////////////////////
/// @brief was docuBlock JSF_general_graph_fluent_aql_fromVertices
////////////////////////////////////////////////////////////////////////////////
AQLGenerator.prototype.fromVertices = function(example){this._addToPrint("fromVertices",example);if(!this.getLastVar()){return this._vertices(example);}var edgeVar=this.getLastVar();return this._vertices(example,undefined,"{'_id': " + edgeVar + "._from}");}; ////////////////////////////////////////////////////////////////////////////////
/// @brief was docuBlock JSF_general_graph_fluent_aql_toVertices
////////////////////////////////////////////////////////////////////////////////
AQLGenerator.prototype.toVertices = function(example){this._addToPrint("toVertices",example);if(!this.getLastVar()){return this._vertices(example);}var edgeVar=this.getLastVar();return this._vertices(example,undefined,"{'_id': " + edgeVar + "._to}");}; ////////////////////////////////////////////////////////////////////////////////
/// @brief Get the variable holding the last result
///
/// Only for internal use.
/// The return statement of the AQL query has to return
/// this value.
/// Also chaining has to use this variable to restrict
/// queries in the next step to only values from this set.
////////////////////////////////////////////////////////////////////////////////
AQLGenerator.prototype.getLastVar = function(){if(this.lastVar === ""){return false;}return this.lastVar;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief was docuBlock JSF_general_graph_fluent_aql_path
////////////////////////////////////////////////////////////////////////////////
AQLGenerator.prototype.path = function(){this._clearCursor();var statement=new AQLStatement("","path");this.stack.push(statement);return this;};AQLGenerator.prototype.pathVertices = function(){this._clearCursor();var statement=new AQLStatement("","pathVertices");this.stack.push(statement);return this;};AQLGenerator.prototype.pathEdges = function(){this._clearCursor();var statement=new AQLStatement("","pathEdges");this.stack.push(statement);return this;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief was docuBlock JSF_general_graph_fluent_aql_neighbors
////////////////////////////////////////////////////////////////////////////////
AQLGenerator.prototype.neighbors = function(vertexExample,options){this._addToPrint("neighbors",vertexExample,options);var ex=transformExample(vertexExample);var resultName="neighbors_" + this.stack.length;var query="FOR " + resultName + " IN GRAPH_NEIGHBORS(@graphName," + this.getLastVar() + ',@options_' + this.stack.length + ')';var opts;if(options){opts = _.extend({},options);}else {opts = {};}opts.neighborExamples = ex;opts.includeData = true;this.bindVars["options_" + this.stack.length] = opts;var stmt=new AQLStatement(query,"neighbor");this.stack.push(stmt);this.lastVar = resultName;this._path.push(resultName);this._pathVertices.push(resultName); /*
  this.lastVar = resultName + ".vertex";
  this._path.push(resultName + ".path");
  this._pathVertices.push("SLICE(" + resultName + ".path.vertices, 1)");
  this._pathEdges.push(resultName + ".path.edges");
  */return this;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief Get the last statement that can be restricted to collections
///
/// Only for internal use.
/// This returnes the last statement that can be restricted to
/// specific collections.
/// Required to allow a chaining of `restrict` after `filter` for instance.
////////////////////////////////////////////////////////////////////////////////
AQLGenerator.prototype._getLastRestrictableStatementInfo = function(){var i=this.stack.length - 1;while(!this.stack[i].allowsRestrict()) {i--;}return {statement:this.stack[i],options:this.bindVars["options_" + i]};}; ////////////////////////////////////////////////////////////////////////////////
/// @brief was docuBlock JSF_general_graph_fluent_aql_restrict
////////////////////////////////////////////////////////////////////////////////
AQLGenerator.prototype.restrict = function(restrictions){var rest=stringToArray(restrictions);if(rest.length === 0){return this;}this._addToPrint("restrict",restrictions);this._clearCursor();var lastQueryInfo=this._getLastRestrictableStatementInfo();var lastQuery=lastQueryInfo.statement;var opts=lastQueryInfo.options;var restricts;if(lastQuery.isEdgeQuery()){checkAllowsRestriction(this.graph._edgeCollections(),rest,"edge collections");restricts = opts.edgeCollectionRestriction || [];opts.edgeCollectionRestriction = restricts.concat(restrictions);}else if(lastQuery.isVertexQuery() || lastQuery.isNeighborQuery()){checkAllowsRestriction(this.graph._vertexCollections(),rest,"vertex collections");restricts = opts.vertexCollectionRestriction || [];opts.vertexCollectionRestriction = restricts.concat(restrictions);}return this;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief was docuBlock JSF_general_graph_fluent_aql_filter
////////////////////////////////////////////////////////////////////////////////
AQLGenerator.prototype.filter = function(example){this._addToPrint("filter",example);this._clearCursor();var ex=[];if(Object.prototype.toString.call(example) !== "[object Array]"){if(Object.prototype.toString.call(example) !== "[object Object]"){var err=new ArangoError();err.errorNum = arangodb.errors.ERROR_GRAPH_INVALID_EXAMPLE_ARRAY_OBJECT.code;err.errorMessage = arangodb.errors.ERROR_GRAPH_INVALID_EXAMPLE_ARRAY_OBJECT.message;throw err;}ex = [example];}else {ex = example;}var query="FILTER MATCHES(" + this.getLastVar() + "," + JSON.stringify(ex) + ")";this.stack.push(new AQLStatement(query));return this;};AQLGenerator.prototype.printQuery = function(){return this.stack.map(function(stmt){return stmt.printQuery();}).join(" ");};AQLGenerator.prototype.execute = function(){this._clearCursor();var query=this.printQuery();var bindVars=this.bindVars;if(this.stack[this.stack.length - 1].isPathQuery()){query += " RETURN [" + this._path + "]";}else if(this.stack[this.stack.length - 1].isPathVerticesQuery()){query += " RETURN FLATTEN([" + this._pathVertices + "])";}else if(this.stack[this.stack.length - 1].isPathEdgesQuery()){query += " RETURN FLATTEN([" + this._pathEdges + "])";}else {query += " RETURN " + this.getLastVar();}return db._query(query,bindVars,{count:true});}; ////////////////////////////////////////////////////////////////////////////////
/// @brief was docuBlock JSF_general_graph_fluent_aql_toArray
////////////////////////////////////////////////////////////////////////////////
AQLGenerator.prototype.toArray = function(){this._createCursor();return this.cursor.toArray();}; ////////////////////////////////////////////////////////////////////////////////
/// @brief was docuBlock JSF_general_graph_fluent_aql_count
////////////////////////////////////////////////////////////////////////////////
AQLGenerator.prototype.count = function(){this._createCursor();return this.cursor.count();}; ////////////////////////////////////////////////////////////////////////////////
/// @brief was docuBlock JSF_general_graph_fluent_aql_hasNext
////////////////////////////////////////////////////////////////////////////////
AQLGenerator.prototype.hasNext = function(){this._createCursor();return this.cursor.hasNext();}; ////////////////////////////////////////////////////////////////////////////////
/// @brief was docuBlock JSF_general_graph_fluent_aql_next
////////////////////////////////////////////////////////////////////////////////
AQLGenerator.prototype.next = function(){this._createCursor();return this.cursor.next();}; ////////////////////////////////////////////////////////////////////////////////
/// Deprecated block
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
/// @brief was docuBlock JSF_general_graph_undirectedRelation
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
/// Deprecated block
////////////////////////////////////////////////////////////////////////////////
var _undirectedRelation=function _undirectedRelation(relationName,vertexCollections){var err;if(arguments.length < 2){err = new ArangoError();err.errorNum = arangodb.errors.ERROR_GRAPH_INVALID_NUMBER_OF_ARGUMENTS.code;err.errorMessage = arangodb.errors.ERROR_GRAPH_INVALID_NUMBER_OF_ARGUMENTS.message + "2";throw err;}if(typeof relationName !== "string" || relationName === ""){err = new ArangoError();err.errorNum = arangodb.errors.ERROR_GRAPH_INVALID_PARAMETER.code;err.errorMessage = arangodb.errors.ERROR_GRAPH_INVALID_PARAMETER.message + " arg1 must not be empty";throw err;}if(!isValidCollectionsParameter(vertexCollections)){err = new ArangoError();err.errorNum = arangodb.errors.ERROR_GRAPH_INVALID_PARAMETER.code;err.errorMessage = arangodb.errors.ERROR_GRAPH_INVALID_PARAMETER.message + " arg2 must not be empty";throw err;}return {collection:relationName,from:stringToArray(vertexCollections),to:stringToArray(vertexCollections)};}; ////////////////////////////////////////////////////////////////////////////////
/// Deprecated block
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
/// @brief was docuBlock JSF_general_graph_directedRelation
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
/// @brief was docuBlock JSF_general_graph_relation
////////////////////////////////////////////////////////////////////////////////
var _relation=function _relation(relationName,fromVertexCollections,toVertexCollections){var err;if(arguments.length < 3){err = new ArangoError();err.errorNum = arangodb.errors.ERROR_GRAPH_INVALID_NUMBER_OF_ARGUMENTS.code;err.errorMessage = arangodb.errors.ERROR_GRAPH_INVALID_NUMBER_OF_ARGUMENTS.message + "3";throw err;}if(typeof relationName !== "string" || relationName === ""){err = new ArangoError();err.errorNum = arangodb.errors.ERROR_GRAPH_INVALID_PARAMETER.code;err.errorMessage = arangodb.errors.ERROR_GRAPH_INVALID_PARAMETER.message + " arg1 must be non empty string";throw err;}if(!isValidCollectionsParameter(fromVertexCollections)){err = new ArangoError();err.errorNum = arangodb.errors.ERROR_GRAPH_INVALID_PARAMETER.code;err.errorMessage = arangodb.errors.ERROR_GRAPH_INVALID_PARAMETER.message + " arg2 must be non empty string or array";throw err;}if(!isValidCollectionsParameter(toVertexCollections)){err = new ArangoError();err.errorNum = arangodb.errors.ERROR_GRAPH_INVALID_PARAMETER.code;err.errorMessage = arangodb.errors.ERROR_GRAPH_INVALID_PARAMETER.message + " arg3 must be non empty string or array";throw err;}return {collection:relationName,from:stringToArray(fromVertexCollections),to:stringToArray(toVertexCollections)};}; ////////////////////////////////////////////////////////////////////////////////
/// @brief was docuBlock JSF_general_graph_list
////////////////////////////////////////////////////////////////////////////////
var _list=function _list(){var gdb=getGraphCollection();return _.pluck(gdb.toArray(),"_key");};var _listObjects=function _listObjects(){return getGraphCollection().toArray();}; ////////////////////////////////////////////////////////////////////////////////
/// @brief was docuBlock JSF_general_graph_edge_definitions
////////////////////////////////////////////////////////////////////////////////
var _edgeDefinitions=function _edgeDefinitions(){var res=[],args=arguments;Object.keys(args).forEach(function(x){res.push(args[x]);});return res;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief was docuBlock JSF_general_graph_extend_edge_definitions
////////////////////////////////////////////////////////////////////////////////
var _extendEdgeDefinitions=function _extendEdgeDefinitions(edgeDefinition){var args=arguments,i=0;Object.keys(args).forEach(function(x){i++;if(i === 1){return;}edgeDefinition.push(args[x]);});}; ////////////////////////////////////////////////////////////////////////////////
/// internal helper to sort a graph's edge definitions
////////////////////////////////////////////////////////////////////////////////
var sortEdgeDefinition=function sortEdgeDefinition(edgeDefinition){edgeDefinition.from = edgeDefinition.from.sort();edgeDefinition.to = edgeDefinition.to.sort();return edgeDefinition;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief create a new graph
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
/// @brief was docuBlock JSF_general_graph_how_to_create
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
/// @brief was docuBlock JSF_general_graph_create
////////////////////////////////////////////////////////////////////////////////
var _create=function _create(graphName,edgeDefinitions,orphanCollections,options){if(!Array.isArray(orphanCollections)){orphanCollections = [];}var gdb=getGraphCollection(),err,graphAlreadyExists=true,collections,result;if(!graphName){err = new ArangoError();err.errorNum = arangodb.errors.ERROR_GRAPH_CREATE_MISSING_NAME.code;err.errorMessage = arangodb.errors.ERROR_GRAPH_CREATE_MISSING_NAME.message;throw err;}edgeDefinitions = edgeDefinitions || [];if(!Array.isArray(edgeDefinitions)){err = new ArangoError();err.errorNum = arangodb.errors.ERROR_GRAPH_CREATE_MALFORMED_EDGE_DEFINITION.code;err.errorMessage = arangodb.errors.ERROR_GRAPH_CREATE_MALFORMED_EDGE_DEFINITION.message;throw err;} //check, if a collection is already used in a different edgeDefinition
var tmpCollections=[];var tmpEdgeDefinitions={};edgeDefinitions.forEach(function(edgeDefinition){var col=edgeDefinition.collection;if(tmpCollections.indexOf(col) !== -1){err = new ArangoError();err.errorNum = arangodb.errors.ERROR_GRAPH_COLLECTION_MULTI_USE.code;err.errorMessage = arangodb.errors.ERROR_GRAPH_COLLECTION_MULTI_USE.message;throw err;}tmpCollections.push(col);tmpEdgeDefinitions[col] = edgeDefinition;});gdb.toArray().forEach(function(singleGraph){var sGEDs=singleGraph.edgeDefinitions;sGEDs.forEach(function(sGED){var col=sGED.collection;if(tmpCollections.indexOf(col) !== -1){if(JSON.stringify(sGED) !== JSON.stringify(tmpEdgeDefinitions[col])){err = new ArangoError();err.errorNum = arangodb.errors.ERROR_GRAPH_COLLECTION_USE_IN_MULTI_GRAPHS.code;err.errorMessage = col + " " + arangodb.errors.ERROR_GRAPH_COLLECTION_USE_IN_MULTI_GRAPHS.message;throw err;}}});});try{gdb.document(graphName);}catch(e) {if(e.errorNum !== errors.ERROR_ARANGO_DOCUMENT_NOT_FOUND.code){throw e;}graphAlreadyExists = false;}if(graphAlreadyExists){err = new ArangoError();err.errorNum = arangodb.errors.ERROR_GRAPH_DUPLICATE.code;err.errorMessage = arangodb.errors.ERROR_GRAPH_DUPLICATE.message;throw err;}collections = findOrCreateCollectionsByEdgeDefinitions(edgeDefinitions,false);orphanCollections.forEach(function(oC){findOrCreateCollectionByName(oC,ArangoCollection.TYPE_DOCUMENT);});edgeDefinitions.forEach(function(eD,index){var tmp=sortEdgeDefinition(eD);edgeDefinitions[index] = tmp;});orphanCollections = orphanCollections.sort();var data=gdb.save({'orphanCollections':orphanCollections,'edgeDefinitions':edgeDefinitions,'_key':graphName},options);result = new Graph(graphName,edgeDefinitions,collections[0],collections[1],orphanCollections,data._rev,data._id);return result;};var createHiddenProperty=function createHiddenProperty(obj,name,value){Object.defineProperty(obj,name,{enumerable:false,writable:true});obj[name] = value;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief helper for updating binded collections
////////////////////////////////////////////////////////////////////////////////
var removeEdge=function removeEdge(graphs,edgeCollection,edgeId,self){self.__idsToRemove[edgeId] = 1;graphs.forEach(function(graph){var edgeDefinitions=graph.edgeDefinitions;if(graph.edgeDefinitions){edgeDefinitions.forEach(function(edgeDefinition){var from=edgeDefinition.from;var to=edgeDefinition.to;var collection=edgeDefinition.collection; // if collection of edge to be deleted is in from or to
if(from.indexOf(edgeCollection) !== -1 || to.indexOf(edgeCollection) !== -1){ //search all edges of the graph
var edges=db._collection(collection).edges(edgeId);edges.forEach(function(edge){ // if from is
if(!self.__idsToRemove.hasOwnProperty(edge._id)){self.__collectionsToLock[collection] = 1;removeEdge(graphs,collection,edge._id,self);}});}});}});};var bindEdgeCollections=function bindEdgeCollections(self,edgeCollections){_.each(edgeCollections,function(key){var obj=db._collection(key);var wrap=wrapCollection(obj); // save
var old_save=wrap.save;wrap.save = function(from,to,data){if(typeof from !== 'string' || from.indexOf('/') === -1 || typeof to !== 'string' || to.indexOf('/') === -1){ // invalid from or to value
var err=new ArangoError();err.errorNum = arangodb.errors.ERROR_ARANGO_DOCUMENT_HANDLE_BAD.code;err.errorMessage = arangodb.errors.ERROR_ARANGO_DOCUMENT_HANDLE_BAD.message;throw err;} //check, if edge is allowed
self.__edgeDefinitions.forEach(function(edgeDefinition){if(edgeDefinition.collection === key){var fromCollection=from.split("/")[0];var toCollection=to.split("/")[0];if(!_.contains(edgeDefinition.from,fromCollection) || !_.contains(edgeDefinition.to,toCollection)){var err=new ArangoError();err.errorNum = arangodb.errors.ERROR_GRAPH_INVALID_EDGE.code;err.errorMessage = arangodb.errors.ERROR_GRAPH_INVALID_EDGE.message + " between " + from + " and " + to + ".";throw err;}}});return old_save(from,to,data);}; // remove
wrap.remove = function(edgeId,options){ //if _key make _id (only on 1st call)
if(edgeId.indexOf("/") === -1){edgeId = key + "/" + edgeId;}var graphs=getGraphCollection().toArray();var edgeCollection=edgeId.split("/")[0];self.__collectionsToLock[edgeCollection] = 1;removeEdge(graphs,edgeCollection,edgeId,self);try{db._executeTransaction({collections:{write:Object.keys(self.__collectionsToLock)},embed:true,action:function action(params){var db=require("internal").db;params.ids.forEach(function(edgeId){if(params.options){db._remove(edgeId,params.options);}else {db._remove(edgeId);}});},params:{ids:Object.keys(self.__idsToRemove),options:options}});}catch(e) {self.__idsToRemove = {};self.__collectionsToLock = {};throw e;}self.__idsToRemove = {};self.__collectionsToLock = {};return true;};self[key] = wrap;});};var bindVertexCollections=function bindVertexCollections(self,vertexCollections){_.each(vertexCollections,function(key){var obj=db._collection(key);var wrap=wrapCollection(obj);wrap.remove = function(vertexId,options){ //delete all edges using the vertex in all graphs
var graphs=getGraphCollection().toArray();var vertexCollectionName=key;if(vertexId.indexOf("/") === -1){vertexId = key + "/" + vertexId;}self.__collectionsToLock[vertexCollectionName] = 1;graphs.forEach(function(graph){var edgeDefinitions=graph.edgeDefinitions;if(graph.edgeDefinitions){edgeDefinitions.forEach(function(edgeDefinition){var from=edgeDefinition.from;var to=edgeDefinition.to;var collection=edgeDefinition.collection;if(from.indexOf(vertexCollectionName) !== -1 || to.indexOf(vertexCollectionName) !== -1){var edges=db._collection(collection).edges(vertexId);if(edges.length > 0){self.__collectionsToLock[collection] = 1;edges.forEach(function(edge){removeEdge(graphs,collection,edge._id,self);});}}});}});try{db._executeTransaction({collections:{write:Object.keys(self.__collectionsToLock)},embed:true,action:function action(params){var db=require("internal").db;params.ids.forEach(function(edgeId){if(params.options){db._remove(edgeId,params.options);}else {db._remove(edgeId);}});if(params.options){db._remove(params.vertexId,params.options);}else {db._remove(params.vertexId);}},params:{ids:Object.keys(self.__idsToRemove),options:options,vertexId:vertexId}});}catch(e) {self.__idsToRemove = {};self.__collectionsToLock = {};throw e;}self.__idsToRemove = {};self.__collectionsToLock = {};return true;};self[key] = wrap;});};var updateBindCollections=function updateBindCollections(graph){ //remove all binded collections
Object.keys(graph).forEach(function(key){if(key.substring(0,1) !== "_"){delete graph[key];}});graph.__edgeDefinitions.forEach(function(edgeDef){bindEdgeCollections(graph,[edgeDef.collection]);bindVertexCollections(graph,edgeDef.from);bindVertexCollections(graph,edgeDef.to);});bindVertexCollections(graph,graph.__orphanCollections);}; ////////////////////////////////////////////////////////////////////////////////
/// @brief was docuBlock JSF_general_graph_vertex_collection_save
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
/// @brief was docuBlock JSF_general_graph_vertex_collection_replace
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
/// @brief was docuBlock JSF_general_graph_vertex_collection_update
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
/// @brief was docuBlock JSF_general_graph_vertex_collection_remove
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
/// @brief was docuBlock JSF_general_graph_edge_collection_save
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
/// @brief was docuBlock JSF_general_graph_edge_collection_replace
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
/// @brief was docuBlock JSF_general_graph_edge_collection_update
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
/// @brief was docuBlock JSF_general_graph_edge_collection_remove
////////////////////////////////////////////////////////////////////////////////
var Graph=function Graph(graphName,edgeDefinitions,vertexCollections,edgeCollections,orphanCollections,revision,id){edgeDefinitions.forEach(function(eD,index){var tmp=sortEdgeDefinition(eD);edgeDefinitions[index] = tmp;});if(!orphanCollections){orphanCollections = [];} // we can call the "fast" version of some edge functions if we are
// running server-side and are not a coordinator
var useBuiltIn=typeof ArangoClusterComm === "object";if(useBuiltIn && require("@arangodb/cluster").isCoordinator()){useBuiltIn = false;}var self=this; // Create Hidden Properties
createHiddenProperty(this,"__useBuiltIn",useBuiltIn);createHiddenProperty(this,"__name",graphName);createHiddenProperty(this,"__vertexCollections",vertexCollections);createHiddenProperty(this,"__edgeCollections",edgeCollections);createHiddenProperty(this,"__edgeDefinitions",edgeDefinitions);createHiddenProperty(this,"__idsToRemove",{});createHiddenProperty(this,"__collectionsToLock",{});createHiddenProperty(this,"__id",id);createHiddenProperty(this,"__rev",revision);createHiddenProperty(this,"__orphanCollections",orphanCollections);updateBindCollections(self);}; ////////////////////////////////////////////////////////////////////////////////
/// @brief was docuBlock JSF_general_graph_graph
////////////////////////////////////////////////////////////////////////////////
var _graph=function _graph(graphName){var gdb=getGraphCollection(),g,collections,orphanCollections;try{g = gdb.document(graphName);}catch(e) {if(e.errorNum !== errors.ERROR_ARANGO_DOCUMENT_NOT_FOUND.code){throw e;}var err=new ArangoError();err.errorNum = arangodb.errors.ERROR_GRAPH_NOT_FOUND.code;err.errorMessage = arangodb.errors.ERROR_GRAPH_NOT_FOUND.message;throw err;}collections = findOrCreateCollectionsByEdgeDefinitions(g.edgeDefinitions,true);orphanCollections = g.orphanCollections;if(!orphanCollections){orphanCollections = [];}return new Graph(graphName,g.edgeDefinitions,collections[0],collections[1],orphanCollections,g._rev,g._id);}; ////////////////////////////////////////////////////////////////////////////////
/// @brief check if a graph exists.
////////////////////////////////////////////////////////////////////////////////
var _exists=function _exists(graphId){var gCol=getGraphCollection();return gCol.exists(graphId);}; ////////////////////////////////////////////////////////////////////////////////
/// @brief rename a collection inside the _graphs collections
////////////////////////////////////////////////////////////////////////////////
var _renameCollection=function _renameCollection(oldName,newName){db._executeTransaction({collections:{write:"_graphs"},action:function action(params){var gdb=getGraphCollection();if(!gdb){return;}gdb.toArray().forEach(function(doc){var c=_.extend({},doc),i,j,changed=false;if(c.edgeDefinitions){for(i = 0;i < c.edgeDefinitions.length;++i) {var def=c.edgeDefinitions[i];if(def.collection === params.oldName){c.edgeDefinitions[i].collection = params.newName;changed = true;}for(j = 0;j < def.from.length;++j) {if(def.from[j] === params.oldName){c.edgeDefinitions[i].from[j] = params.newName;changed = true;}}for(j = 0;j < def.to.length;++j) {if(def.to[j] === params.oldName){c.edgeDefinitions[i].to[j] = params.newName;changed = true;}}}}for(i = 0;i < c.orphanCollections.length;++i) {if(c.orphanCollections[i] === params.oldName){c.orphanCollections[i] = params.newName;changed = true;}}if(changed){gdb.update(doc._key,c);}});},params:{oldName:oldName,newName:newName}});}; ////////////////////////////////////////////////////////////////////////////////
/// @brief Helper for dropping collections of a graph.
////////////////////////////////////////////////////////////////////////////////
var checkIfMayBeDropped=function checkIfMayBeDropped(colName,graphName,graphs){var result=true;graphs.forEach(function(graph){if(graph._key === graphName){return;}var edgeDefinitions=graph.edgeDefinitions;if(edgeDefinitions){edgeDefinitions.forEach(function(edgeDefinition){var from=edgeDefinition.from;var to=edgeDefinition.to;var collection=edgeDefinition.collection;if(collection === colName || from.indexOf(colName) !== -1 || to.indexOf(colName) !== -1){result = false;}});}var orphanCollections=graph.orphanCollections;if(orphanCollections){if(orphanCollections.indexOf(colName) !== -1){result = false;}}});return result;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief was docuBlock JSF_general_graph_drop
////////////////////////////////////////////////////////////////////////////////
var _drop=function _drop(graphId,dropCollections){var gdb=getGraphCollection(),graphs;if(!gdb.exists(graphId)){var err=new ArangoError();err.errorNum = arangodb.errors.ERROR_GRAPH_NOT_FOUND.code;err.errorMessage = arangodb.errors.ERROR_GRAPH_NOT_FOUND.message;throw err;}if(dropCollections === true){var graph=gdb.document(graphId);var edgeDefinitions=graph.edgeDefinitions;edgeDefinitions.forEach(function(edgeDefinition){var from=edgeDefinition.from;var to=edgeDefinition.to;var collection=edgeDefinition.collection;graphs = getGraphCollection().toArray();if(checkIfMayBeDropped(collection,graph._key,graphs)){db._drop(collection);}from.forEach(function(col){if(checkIfMayBeDropped(col,graph._key,graphs)){db._drop(col);}});to.forEach(function(col){if(checkIfMayBeDropped(col,graph._key,graphs)){db._drop(col);}});}); //drop orphans
graphs = getGraphCollection().toArray();if(!graph.orphanCollections){graph.orphanCollections = [];}graph.orphanCollections.forEach(function(oC){if(checkIfMayBeDropped(oC,graph._key,graphs)){try{db._drop(oC);}catch(ignore) {}}});}gdb.remove(graphId);return true;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief return all edge collections of the graph.
////////////////////////////////////////////////////////////////////////////////
Graph.prototype._edgeCollections = function(){return _.values(this.__edgeCollections);}; ////////////////////////////////////////////////////////////////////////////////
/// @brief return all vertex collections of the graph.
////////////////////////////////////////////////////////////////////////////////
Graph.prototype._vertexCollections = function(){var orphans=[];_.each(this.__orphanCollections,function(o){orphans.push(db[o]);});return _.union(_.values(this.__vertexCollections),orphans);}; ////////////////////////////////////////////////////////////////////////////////
/// @brief _EDGES(vertexId).
////////////////////////////////////////////////////////////////////////////////
// might be needed from AQL itself
Graph.prototype._EDGES = function(vertexId){var err;if(vertexId.indexOf("/") === -1){err = new ArangoError();err.errorNum = arangodb.errors.ERROR_GRAPH_NOT_FOUND.code;err.errorMessage = arangodb.errors.ERROR_GRAPH_NOT_FOUND.message + ": " + vertexId;throw err;}var result=[],c;for(c in this.__edgeCollections) {if(this.__edgeCollections.hasOwnProperty(c)){if(this.__useBuiltIn){result = result.concat(this.__edgeCollections[c].EDGES(vertexId));}else {result = result.concat(this.__edgeCollections[c].edges(vertexId));}}}return result;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief INEDGES(vertexId).
////////////////////////////////////////////////////////////////////////////////
Graph.prototype._INEDGES = function(vertexId){var err;if(vertexId.indexOf("/") === -1){err = new ArangoError();err.errorNum = arangodb.errors.ERROR_GRAPH_NOT_FOUND.code;err.errorMessage = arangodb.errors.ERROR_GRAPH_NOT_FOUND.message + ": " + vertexId;throw err;}var result=[],c;for(c in this.__edgeCollections) {if(this.__edgeCollections.hasOwnProperty(c)){if(this.__useBuiltIn){result = result.concat(this.__edgeCollections[c].INEDGES(vertexId));}else {result = result.concat(this.__edgeCollections[c].inEdges(vertexId));}}}return result;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief outEdges(vertexId).
////////////////////////////////////////////////////////////////////////////////
Graph.prototype._OUTEDGES = function(vertexId){var err;if(vertexId.indexOf("/") === -1){err = new ArangoError();err.errorNum = arangodb.errors.ERROR_GRAPH_NOT_FOUND.code;err.errorMessage = arangodb.errors.ERROR_GRAPH_NOT_FOUND.message + ": " + vertexId;throw err;}var result=[],c;for(c in this.__edgeCollections) {if(this.__edgeCollections.hasOwnProperty(c)){if(this.__useBuiltIn){result = result.concat(this.__edgeCollections[c].OUTEDGES(vertexId));}else {result = result.concat(this.__edgeCollections[c].outEdges(vertexId));}}}return result;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief was docuBlock JSF_general_graph_edges
////////////////////////////////////////////////////////////////////////////////
Graph.prototype._edges = function(edgeExample){var AQLStmt=new AQLGenerator(this); // If no direction is specified all edges are duplicated.
// => For initial requests a direction has to be set
return AQLStmt.outEdges(edgeExample);}; ////////////////////////////////////////////////////////////////////////////////
/// @brief was docuBlock JSF_general_graph_vertices
////////////////////////////////////////////////////////////////////////////////
Graph.prototype._vertices = function(example){var AQLStmt=new AQLGenerator(this);return AQLStmt.vertices(example);}; ////////////////////////////////////////////////////////////////////////////////
/// @brief was docuBlock JSF_general_graph_fromVertex
////////////////////////////////////////////////////////////////////////////////
Graph.prototype._fromVertex = function(edgeId){if(typeof edgeId !== 'string' || edgeId.indexOf('/') === -1){var err=new ArangoError();err.errorNum = arangodb.errors.ERROR_ARANGO_DOCUMENT_HANDLE_BAD.code;err.errorMessage = arangodb.errors.ERROR_ARANGO_DOCUMENT_HANDLE_BAD.message;throw err;}var edgeCollection=this._getEdgeCollectionByName(edgeId.split("/")[0]);var document=edgeCollection.document(edgeId);if(document){var vertexId=document._from;var vertexCollection=this._getVertexCollectionByName(vertexId.split("/")[0]);return vertexCollection.document(vertexId);}}; ////////////////////////////////////////////////////////////////////////////////
/// @brief was docuBlock JSF_general_graph_toVertex
////////////////////////////////////////////////////////////////////////////////
Graph.prototype._toVertex = function(edgeId){if(typeof edgeId !== 'string' || edgeId.indexOf('/') === -1){var err=new ArangoError();err.errorNum = arangodb.errors.ERROR_ARANGO_DOCUMENT_HANDLE_BAD.code;err.errorMessage = arangodb.errors.ERROR_ARANGO_DOCUMENT_HANDLE_BAD.message;throw err;}var edgeCollection=this._getEdgeCollectionByName(edgeId.split("/")[0]);var document=edgeCollection.document(edgeId);if(document){var vertexId=document._to;var vertexCollection=this._getVertexCollectionByName(vertexId.split("/")[0]);return vertexCollection.document(vertexId);}}; ////////////////////////////////////////////////////////////////////////////////
/// @brief get edge collection by name.
////////////////////////////////////////////////////////////////////////////////
Graph.prototype._getEdgeCollectionByName = function(name){if(this.__edgeCollections[name]){return this.__edgeCollections[name];}var err=new ArangoError();err.errorNum = arangodb.errors.ERROR_GRAPH_EDGE_COL_DOES_NOT_EXIST.code;err.errorMessage = arangodb.errors.ERROR_GRAPH_EDGE_COL_DOES_NOT_EXIST.message + ": " + name;throw err;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief get vertex collection by name.
////////////////////////////////////////////////////////////////////////////////
Graph.prototype._getVertexCollectionByName = function(name){if(this.__vertexCollections[name]){return this.__vertexCollections[name];}var err=new ArangoError();err.errorNum = arangodb.errors.ERROR_GRAPH_VERTEX_COL_DOES_NOT_EXIST.code;err.errorMessage = arangodb.errors.ERROR_GRAPH_VERTEX_COL_DOES_NOT_EXIST.message + ": " + name;throw err;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief was docuBlock JSF_general_graph_neighbors
////////////////////////////////////////////////////////////////////////////////
Graph.prototype._neighbors = function(vertexExample,options){var AQLStmt=new AQLGenerator(this); // If no direction is specified all edges are duplicated.
// => For initial requests a direction has to be set
if(!options){options = {};}return AQLStmt.vertices(vertexExample).neighbors(options.neighborExamples,options).toArray();}; ////////////////////////////////////////////////////////////////////////////////
/// @brief was docuBlock JSF_general_graph_common_neighbors
////////////////////////////////////////////////////////////////////////////////
Graph.prototype._commonNeighbors = function(vertex1Example,vertex2Example,optionsVertex1,optionsVertex2){var ex1=transformExample(vertex1Example);var ex2=transformExample(vertex2Example);var query="FOR e" + " IN GRAPH_COMMON_NEIGHBORS(@graphName" + ',@ex1' + ',@ex2' + ',@options1' + ',@options2' + ') RETURN e';optionsVertex1 = optionsVertex1 || {};optionsVertex2 = optionsVertex2 || {};var bindVars={"graphName":this.__name,"options1":optionsVertex1,"options2":optionsVertex2,"ex1":ex1,"ex2":ex2};return db._query(query,bindVars,{count:true}).toArray();}; ////////////////////////////////////////////////////////////////////////////////
/// @brief was docuBlock JSF_general_graph_count_common_neighbors
////////////////////////////////////////////////////////////////////////////////
Graph.prototype._countCommonNeighbors = function(vertex1Example,vertex2Example,optionsVertex1,optionsVertex2){var ex1=transformExample(vertex1Example);var ex2=transformExample(vertex2Example);var query="FOR e" + " IN GRAPH_COMMON_NEIGHBORS(@graphName" + ',@ex1' + ',@ex2' + ',@options1' + ',@options2' + ') RETURN [e.left, e.right, LENGTH(e.neighbors)]';optionsVertex1 = optionsVertex1 || {};optionsVertex2 = optionsVertex2 || {};var bindVars={"graphName":this.__name,"options1":optionsVertex1,"options2":optionsVertex2,"ex1":ex1,"ex2":ex2};var result=db._query(query,bindVars,{count:true}).toArray(),tmp={},tmp2={},returnHash=[];result.forEach(function(r){if(!tmp[r[0]]){tmp[r[0]] = [];}tmp2 = {};tmp2[r[1]] = r[2];tmp[r[0]].push(tmp2);});Object.keys(tmp).forEach(function(w){tmp2 = {};tmp2[w] = tmp[w];returnHash.push(tmp2);});return returnHash;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief was docuBlock JSF_general_graph_common_properties
////////////////////////////////////////////////////////////////////////////////
Graph.prototype._commonProperties = function(vertex1Example,vertex2Example,options){var ex1=transformExample(vertex1Example);var ex2=transformExample(vertex2Example);var query="FOR e" + " IN GRAPH_COMMON_PROPERTIES(@graphName" + ',@ex1' + ',@ex2' + ',@options' + ')  SORT  ATTRIBUTES(e)[0] RETURN e';options = options || {};var bindVars={"graphName":this.__name,"options":options,"ex1":ex1,"ex2":ex2};return db._query(query,bindVars,{count:true}).toArray();}; ////////////////////////////////////////////////////////////////////////////////
/// @brief was docuBlock JSF_general_graph_count_common_properties
////////////////////////////////////////////////////////////////////////////////
Graph.prototype._countCommonProperties = function(vertex1Example,vertex2Example,options){var ex1=transformExample(vertex1Example);var ex2=transformExample(vertex2Example);var query="FOR e" + " IN GRAPH_COMMON_PROPERTIES(@graphName" + ',@ex1' + ',@ex2' + ',@options' + ') FOR a in ATTRIBUTES(e)  SORT  ATTRIBUTES(e)[0] RETURN [ ATTRIBUTES(e)[0], LENGTH(e[a]) ]';options = options || {};var bindVars={"graphName":this.__name,"options":options,"ex1":ex1,"ex2":ex2};var result=db._query(query,bindVars,{count:true}).toArray(),returnHash=[];result.forEach(function(r){var tmp={};tmp[r[0]] = r[1];returnHash.push(tmp);});return returnHash;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief was docuBlock JSF_general_graph_paths
////////////////////////////////////////////////////////////////////////////////
Graph.prototype._paths = function(options){var query="RETURN" + " GRAPH_PATHS(@graphName" + ',@options' + ')';options = options || {};var bindVars={"graphName":this.__name,"options":options};var result=db._query(query,bindVars).toArray();return result;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief was docuBlock JSF_general_graph_shortest_path
////////////////////////////////////////////////////////////////////////////////
Graph.prototype._shortestPath = function(startVertexExample,endVertexExample,options){var ex1=transformExample(startVertexExample);var ex2=transformExample(endVertexExample);var query="RETURN" + " GRAPH_SHORTEST_PATH(@graphName" + ',@ex1' + ',@ex2' + ',@options' + ')';options = options || {};var bindVars={"graphName":this.__name,"options":options,"ex1":ex1,"ex2":ex2};var result=db._query(query,bindVars).toArray();return result;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief was docuBlock JSF_general_graph_distance_to
////////////////////////////////////////////////////////////////////////////////
Graph.prototype._distanceTo = function(startVertexExample,endVertexExample,options){var ex1=transformExample(startVertexExample);var ex2=transformExample(endVertexExample);var query="RETURN" + " GRAPH_DISTANCE_TO(@graphName" + ',@ex1' + ',@ex2' + ',@options' + ')';options = options || {};var bindVars={"graphName":this.__name,"options":options,"ex1":ex1,"ex2":ex2};var result=db._query(query,bindVars).toArray();return result[0];}; ////////////////////////////////////////////////////////////////////////////////
/// @brief was docuBlock JSF_general_graph_absolute_eccentricity
////////////////////////////////////////////////////////////////////////////////
Graph.prototype._absoluteEccentricity = function(vertexExample,options){var ex1=transformExample(vertexExample);var query="RETURN" + " GRAPH_ABSOLUTE_ECCENTRICITY(@graphName" + ',@ex1' + ',@options' + ')';options = options || {};var bindVars={"graphName":this.__name,"options":options,"ex1":ex1};var result=db._query(query,bindVars).toArray();if(result.length === 1){return result[0];}return result;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief was docuBlock JSF_general_graph_eccentricity
////////////////////////////////////////////////////////////////////////////////
Graph.prototype._eccentricity = function(options){var query="RETURN" + " GRAPH_ECCENTRICITY(@graphName" + ',@options' + ')';options = options || {};var bindVars={"graphName":this.__name,"options":options};var result=db._query(query,bindVars).toArray();if(result.length === 1){return result[0];}return result;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief was docuBlock JSF_general_graph_absolute_closeness
////////////////////////////////////////////////////////////////////////////////
Graph.prototype._absoluteCloseness = function(vertexExample,options){var ex1=transformExample(vertexExample);var query="RETURN" + " GRAPH_ABSOLUTE_CLOSENESS(@graphName" + ',@ex1' + ',@options' + ')';options = options || {};var bindVars={"graphName":this.__name,"options":options,"ex1":ex1};var result=db._query(query,bindVars).toArray();if(result.length === 1){return result[0];}return result;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief was docuBlock JSF_general_graph_closeness
////////////////////////////////////////////////////////////////////////////////
Graph.prototype._closeness = function(options){var query="RETURN" + " GRAPH_CLOSENESS(@graphName" + ',@options' + ')';options = options || {};var bindVars={"graphName":this.__name,"options":options};var result=db._query(query,bindVars).toArray();if(result.length === 1){return result[0];}return result;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief was docuBlock JSF_general_graph_absolute_betweenness
////////////////////////////////////////////////////////////////////////////////
Graph.prototype._absoluteBetweenness = function(example,options){var query="RETURN" + " GRAPH_ABSOLUTE_BETWEENNESS(@graphName" + ",@example" + ",@options" + ")";options = options || {};var bindVars={"example":example,"graphName":this.__name,"options":options};var result=db._query(query,bindVars).toArray();if(result.length === 1){return result[0];}return result;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief was docuBlock JSF_general_graph_betweenness
////////////////////////////////////////////////////////////////////////////////
Graph.prototype._betweenness = function(options){var query="RETURN" + " GRAPH_BETWEENNESS(@graphName" + ',@options' + ')';options = options || {};var bindVars={"graphName":this.__name,"options":options};var result=db._query(query,bindVars).toArray();if(result.length === 1){return result[0];}return result;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief was docuBlock JSF_general_graph_radius
////////////////////////////////////////////////////////////////////////////////
Graph.prototype._radius = function(options){var query="RETURN" + " GRAPH_RADIUS(@graphName" + ',@options' + ')';options = options || {};var bindVars={"graphName":this.__name,"options":options};var result=db._query(query,bindVars).toArray();if(result.length === 1){return result[0];}return result;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief was docuBlock JSF_general_graph_diameter
////////////////////////////////////////////////////////////////////////////////
Graph.prototype._diameter = function(options){var query="RETURN" + " GRAPH_DIAMETER(@graphName" + ',@options' + ')';options = options || {};var bindVars={"graphName":this.__name,"options":options};var result=db._query(query,bindVars).toArray();if(result.length === 1){return result[0];}return result;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief was docuBlock JSF_general_graph__extendEdgeDefinitions
////////////////////////////////////////////////////////////////////////////////
Graph.prototype._extendEdgeDefinitions = function(edgeDefinition){edgeDefinition = sortEdgeDefinition(edgeDefinition);var self=this;var err; //check if edgeCollection not already used
var eC=edgeDefinition.collection; // ... in same graph
if(this.__edgeCollections[eC] !== undefined){err = new ArangoError();err.errorNum = arangodb.errors.ERROR_GRAPH_COLLECTION_MULTI_USE.code;err.errorMessage = arangodb.errors.ERROR_GRAPH_COLLECTION_MULTI_USE.message;throw err;} //in different graph
db._graphs.toArray().forEach(function(singleGraph){var sGEDs=singleGraph.edgeDefinitions;sGEDs.forEach(function(sGED){var col=sGED.collection;if(col === eC){if(JSON.stringify(sGED) !== JSON.stringify(edgeDefinition)){err = new ArangoError();err.errorNum = arangodb.errors.ERROR_GRAPH_COLLECTION_USE_IN_MULTI_GRAPHS.code;err.errorMessage = col + " " + arangodb.errors.ERROR_GRAPH_COLLECTION_USE_IN_MULTI_GRAPHS.message;throw err;}}});});findOrCreateCollectionsByEdgeDefinitions([edgeDefinition]);this.__edgeDefinitions.push(edgeDefinition);db._graphs.update(this.__name,{edgeDefinitions:this.__edgeDefinitions});this.__edgeCollections[edgeDefinition.collection] = db[edgeDefinition.collection];edgeDefinition.from.forEach(function(vc){self[vc] = db[vc]; //remove from __orphanCollections
var orphanIndex=self.__orphanCollections.indexOf(vc);if(orphanIndex !== -1){self.__orphanCollections.splice(orphanIndex,1);} //push into __vertexCollections
if(self.__vertexCollections[vc] === undefined){self.__vertexCollections[vc] = db[vc];}});edgeDefinition.to.forEach(function(vc){self[vc] = db[vc]; //remove from __orphanCollections
var orphanIndex=self.__orphanCollections.indexOf(vc);if(orphanIndex !== -1){self.__orphanCollections.splice(orphanIndex,1);} //push into __vertexCollections
if(self.__vertexCollections[vc] === undefined){self.__vertexCollections[vc] = db[vc];}});updateBindCollections(this);}; ////////////////////////////////////////////////////////////////////////////////
/// @brief internal function for editing edge definitions
////////////////////////////////////////////////////////////////////////////////
var changeEdgeDefinitionsForGraph=function changeEdgeDefinitionsForGraph(graph,edgeDefinition,newCollections,possibleOrphans,self){var graphCollections=[];var graphObj=_graph(graph._key);var eDs=graph.edgeDefinitions;var gotAHit=false; //replace edgeDefintion
eDs.forEach(function(eD,id){if(eD.collection === edgeDefinition.collection){gotAHit = true;eDs[id].from = edgeDefinition.from;eDs[id].to = edgeDefinition.to;db._graphs.update(graph._key,{edgeDefinitions:eDs});if(graph._key === self.__name){self.__edgeDefinitions[id].from = edgeDefinition.from;self.__edgeDefinitions[id].to = edgeDefinition.to;}}else { //collect all used collections
graphCollections = _.union(graphCollections,eD.from);graphCollections = _.union(graphCollections,eD.to);}});if(!gotAHit){return;} //remove used collection from orphanage
if(graph._key === self.__name){newCollections.forEach(function(nc){if(self.__vertexCollections[nc] === undefined){self.__vertexCollections[nc] = db[nc];}try{self._removeVertexCollection(nc,false);}catch(ignore) {}});possibleOrphans.forEach(function(po){if(graphCollections.indexOf(po) === -1){delete self.__vertexCollections[po];self._addVertexCollection(po);}});}else {newCollections.forEach(function(nc){try{graphObj._removeVertexCollection(nc,false);}catch(ignore) {}});possibleOrphans.forEach(function(po){if(graphCollections.indexOf(po) === -1){delete graphObj.__vertexCollections[po];graphObj._addVertexCollection(po);}});} //move unused collections to orphanage
}; ////////////////////////////////////////////////////////////////////////////////
/// @brief was docuBlock JSF_general_graph__editEdgeDefinition
////////////////////////////////////////////////////////////////////////////////
Graph.prototype._editEdgeDefinitions = function(edgeDefinition){edgeDefinition = sortEdgeDefinition(edgeDefinition);var self=this; //check, if in graphs edge definition
if(this.__edgeCollections[edgeDefinition.collection] === undefined){var err=new ArangoError();err.errorNum = arangodb.errors.ERROR_GRAPH_EDGE_COLLECTION_NOT_USED.code;err.errorMessage = arangodb.errors.ERROR_GRAPH_EDGE_COLLECTION_NOT_USED.message;throw err;}findOrCreateCollectionsByEdgeDefinitions([edgeDefinition]); //evaluate collections to add to orphanage
var possibleOrphans=[];var currentEdgeDefinition;this.__edgeDefinitions.forEach(function(ed){if(edgeDefinition.collection === ed.collection){currentEdgeDefinition = ed;}});var currentCollections=_.union(currentEdgeDefinition.from,currentEdgeDefinition.to);var newCollections=_.union(edgeDefinition.from,edgeDefinition.to);currentCollections.forEach(function(colName){if(newCollections.indexOf(colName) === -1){possibleOrphans.push(colName);}}); //change definition for ALL graphs
var graphs=getGraphCollection().toArray();graphs.forEach(function(graph){changeEdgeDefinitionsForGraph(graph,edgeDefinition,newCollections,possibleOrphans,self);});updateBindCollections(this);}; ////////////////////////////////////////////////////////////////////////////////
/// @brief was docuBlock JSF_general_graph__deleteEdgeDefinition
////////////////////////////////////////////////////////////////////////////////
Graph.prototype._deleteEdgeDefinition = function(edgeCollection,dropCollection){ //check, if in graphs edge definition
if(this.__edgeCollections[edgeCollection] === undefined){var err=new ArangoError();err.errorNum = arangodb.errors.ERROR_GRAPH_EDGE_COLLECTION_NOT_USED.code;err.errorMessage = arangodb.errors.ERROR_GRAPH_EDGE_COLLECTION_NOT_USED.message;throw err;}var edgeDefinitions=this.__edgeDefinitions,self=this,usedVertexCollections=[],possibleOrphans=[],index;edgeDefinitions.forEach(function(edgeDefinition,idx){if(edgeDefinition.collection === edgeCollection){index = idx;possibleOrphans = edgeDefinition.from;possibleOrphans = _.union(possibleOrphans,edgeDefinition.to);}else {usedVertexCollections = _.union(usedVertexCollections,edgeDefinition.from);usedVertexCollections = _.union(usedVertexCollections,edgeDefinition.to);}});this.__edgeDefinitions.splice(index,1);possibleOrphans.forEach(function(po){if(usedVertexCollections.indexOf(po) === -1){self.__orphanCollections.push(po);}});updateBindCollections(this);db._graphs.update(this.__name,{orphanCollections:this.__orphanCollections,edgeDefinitions:this.__edgeDefinitions});if(dropCollection){db._drop(edgeCollection);}}; ////////////////////////////////////////////////////////////////////////////////
/// @brief was docuBlock JSF_general_graph__addVertexCollection
////////////////////////////////////////////////////////////////////////////////
Graph.prototype._addVertexCollection = function(vertexCollectionName,createCollection){ //check edgeCollection
var ec=db._collection(vertexCollectionName);var err;if(ec === null){if(createCollection !== false){db._create(vertexCollectionName);}else {err = new ArangoError();err.errorNum = arangodb.errors.ERROR_GRAPH_VERTEX_COL_DOES_NOT_EXIST.code;err.errorMessage = vertexCollectionName + arangodb.errors.ERROR_GRAPH_VERTEX_COL_DOES_NOT_EXIST.message;throw err;}}else if(ec.type() !== 2){err = new ArangoError();err.errorNum = arangodb.errors.ERROR_GRAPH_WRONG_COLLECTION_TYPE_VERTEX.code;err.errorMessage = arangodb.errors.ERROR_GRAPH_WRONG_COLLECTION_TYPE_VERTEX.message;throw err;}if(this.__vertexCollections[vertexCollectionName] !== undefined){err = new ArangoError();err.errorNum = arangodb.errors.ERROR_GRAPH_COLLECTION_USED_IN_EDGE_DEF.code;err.errorMessage = arangodb.errors.ERROR_GRAPH_COLLECTION_USED_IN_EDGE_DEF.message;throw err;}if(_.contains(this.__orphanCollections,vertexCollectionName)){err = new ArangoError();err.errorNum = arangodb.errors.ERROR_GRAPH_COLLECTION_USED_IN_ORPHANS.code;err.errorMessage = arangodb.errors.ERROR_GRAPH_COLLECTION_USED_IN_ORPHANS.message;throw err;}this.__orphanCollections.push(vertexCollectionName);updateBindCollections(this);db._graphs.update(this.__name,{orphanCollections:this.__orphanCollections});}; ////////////////////////////////////////////////////////////////////////////////
/// @brief was docuBlock JSF_general_graph__orphanCollections
////////////////////////////////////////////////////////////////////////////////
Graph.prototype._orphanCollections = function(){return this.__orphanCollections;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief was docuBlock JSF_general_graph__removeVertexCollection
////////////////////////////////////////////////////////////////////////////////
Graph.prototype._removeVertexCollection = function(vertexCollectionName,dropCollection){var err;if(db._collection(vertexCollectionName) === null){err = new ArangoError();err.errorNum = arangodb.errors.ERROR_GRAPH_VERTEX_COL_DOES_NOT_EXIST.code;err.errorMessage = arangodb.errors.ERROR_GRAPH_VERTEX_COL_DOES_NOT_EXIST.message;throw err;}var index=this.__orphanCollections.indexOf(vertexCollectionName);if(index === -1){err = new ArangoError();err.errorNum = arangodb.errors.ERROR_GRAPH_NOT_IN_ORPHAN_COLLECTION.code;err.errorMessage = arangodb.errors.ERROR_GRAPH_NOT_IN_ORPHAN_COLLECTION.message;throw err;}this.__orphanCollections.splice(index,1);delete this[vertexCollectionName];db._graphs.update(this.__name,{orphanCollections:this.__orphanCollections});if(dropCollection === true){var graphs=getGraphCollection().toArray();if(checkIfMayBeDropped(vertexCollectionName,null,graphs)){db._drop(vertexCollectionName);}}updateBindCollections(this);}; ////////////////////////////////////////////////////////////////////////////////
/// @brief was docuBlock JSF_general_graph_connectingEdges
////////////////////////////////////////////////////////////////////////////////
Graph.prototype._getConnectingEdges = function(vertexExample1,vertexExample2,options){options = options || {};var opts={includeData:true};if(options.vertex1CollectionRestriction){opts.startVertexCollectionRestriction = options.vertex1CollectionRestriction;}if(options.vertex2CollectionRestriction){opts.endVertexCollectionRestriction = options.vertex2CollectionRestriction;}if(options.edgeCollectionRestriction){opts.edgeCollectionRestriction = options.edgeCollectionRestriction;}if(options.edgeExamples){opts.edgeExamples = options.edgeExamples;}if(vertexExample2){opts.neighborExamples = vertexExample2;}var query="RETURN" + " GRAPH_EDGES(@graphName" + ',@vertexExample' + ',@options' + ')';var bindVars={"graphName":this.__name,"vertexExample":vertexExample1,"options":opts};var result=db._query(query,bindVars).toArray();return result[0];}; ////////////////////////////////////////////////////////////////////////////////
/// @brief print basic information for the graph
////////////////////////////////////////////////////////////////////////////////
Graph.prototype._PRINT = function(context){var name=this.__name;var edgeDefs=printEdgeDefinitions(this.__edgeDefinitions);context.output += "[ Graph ";context.output += name;context.output += " EdgeDefinitions: ";internal.printRecursive(edgeDefs,context);context.output += " VertexCollections: ";internal.printRecursive(this.__orphanCollections,context);context.output += " ]";}; /// Deprecated function (announced 2.3)
exports._undirectedRelation = _undirectedRelation; /// Deprecated function (announced 2.3)
exports._directedRelation = function(){return _relation.apply(this,arguments);};exports._relation = _relation;exports._graph = _graph;exports._edgeDefinitions = _edgeDefinitions;exports._extendEdgeDefinitions = _extendEdgeDefinitions;exports._create = _create;exports._drop = _drop;exports._exists = _exists;exports._renameCollection = _renameCollection;exports._list = _list;exports._listObjects = _listObjects; ////////////////////////////////////////////////////////////////////////////////
/// some more documentation
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
/// @brief was docuBlock JSF_general_graph_create_graph_example1
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
/// @brief was docuBlock JSF_general_graph_create_graph_example2
////////////////////////////////////////////////////////////////////////////////
});module.define("@arangodb/graph-common",function(exports,module){ /*jshint strict: false */ ////////////////////////////////////////////////////////////////////////////////
/// @brief Graph functionality
///
/// @file
///
/// DISCLAIMER
///
/// Copyright 2010-2012 triagens GmbH, Cologne, Germany
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///
///     http://www.apache.org/licenses/LICENSE-2.0
///
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// Copyright holder is triAGENS GmbH, Cologne, Germany
///
/// @author Dr. Frank Celler, Lucas Dohmen
/// @author Copyright 2011-2012, triAGENS GmbH, Cologne, Germany
////////////////////////////////////////////////////////////////////////////////
var is=require("@arangodb/is"),Edge,Graph,Vertex,GraphArray,Iterator;Iterator = function(wrapper,cursor,stringRepresentation){this.next = function next(){if(cursor.hasNext()){return wrapper(cursor.next());}return undefined;};this.hasNext = function hasNext(){return cursor.hasNext();};this._PRINT = function(context){context.output += stringRepresentation;};}; ////////////////////////////////////////////////////////////////////////////////
/// @brief constructs a graph arrays
////////////////////////////////////////////////////////////////////////////////
GraphArray = function(len){if(len !== undefined){this.length = len;}};GraphArray.prototype = new Array(0); ////////////////////////////////////////////////////////////////////////////////
/// @brief map
////////////////////////////////////////////////////////////////////////////////
GraphArray.prototype.map = function(fun,thisp){var len=this.length;var i;if(typeof fun !== "function"){throw new TypeError();}var res=new GraphArray(len);for(i = 0;i < len;i++) {if(this.hasOwnProperty(i)){res[i] = fun.call(thisp,this[i],i,this);}}return res;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief get the in vertices
////////////////////////////////////////////////////////////////////////////////
GraphArray.prototype.getInVertex = function(){return this.map(function(a){return a.getInVertex();});}; ////////////////////////////////////////////////////////////////////////////////
/// @brief get the out vertices
////////////////////////////////////////////////////////////////////////////////
GraphArray.prototype.getOutVertex = function(){return this.map(function(a){return a.getOutVertex();});}; ////////////////////////////////////////////////////////////////////////////////
/// @brief get the peer vertices
////////////////////////////////////////////////////////////////////////////////
GraphArray.prototype.getPeerVertex = function(vertex){return this.map(function(a){return a.getPeerVertex(vertex);});}; ////////////////////////////////////////////////////////////////////////////////
/// @brief sets the property
////////////////////////////////////////////////////////////////////////////////
GraphArray.prototype.setProperty = function(name,value){return this.map(function(a){return a.setProperty(name,value);});}; ////////////////////////////////////////////////////////////////////////////////
/// @brief get the edges
////////////////////////////////////////////////////////////////////////////////
GraphArray.prototype.edges = function(){return this.map(function(a){return a.edges();});}; ////////////////////////////////////////////////////////////////////////////////
/// @brief get outbound edges
////////////////////////////////////////////////////////////////////////////////
GraphArray.prototype.outbound = function(){return this.map(function(a){return a.outbound();});}; ////////////////////////////////////////////////////////////////////////////////
/// @brief get inbound edges
////////////////////////////////////////////////////////////////////////////////
GraphArray.prototype.inbound = function(){return this.map(function(a){return a.inbound();});}; ////////////////////////////////////////////////////////////////////////////////
/// @brief get the in edges
////////////////////////////////////////////////////////////////////////////////
GraphArray.prototype.getInEdges = function(){var args=arguments;return this.map(function(a){return a.getInEdges.apply(a,args);});}; ////////////////////////////////////////////////////////////////////////////////
/// @brief get the out edges
////////////////////////////////////////////////////////////////////////////////
GraphArray.prototype.getOutEdges = function(){var args=arguments;return this.map(function(a){return a.getOutEdges.apply(a,args);});}; ////////////////////////////////////////////////////////////////////////////////
/// @brief get the edges
////////////////////////////////////////////////////////////////////////////////
GraphArray.prototype.getEdges = function(){var args=arguments;return this.map(function(a){return a.getEdges.apply(a,args);});}; ////////////////////////////////////////////////////////////////////////////////
/// @brief returns the number of edges
////////////////////////////////////////////////////////////////////////////////
GraphArray.prototype.degree = function(){return this.map(function(a){return a.degree();});}; ////////////////////////////////////////////////////////////////////////////////
/// @brief returns the number of in-edges
////////////////////////////////////////////////////////////////////////////////
GraphArray.prototype.inDegree = function(){return this.map(function(a){return a.inDegree();});}; ////////////////////////////////////////////////////////////////////////////////
/// @brief returns the number of out-edges
////////////////////////////////////////////////////////////////////////////////
GraphArray.prototype.inDegree = function(){return this.map(function(a){return a.outDegree();});}; ////////////////////////////////////////////////////////////////////////////////
/// @brief returns the properties
////////////////////////////////////////////////////////////////////////////////
GraphArray.prototype.properties = function(){return this.map(function(a){return a.properties();});};Edge = function(graph,properties){this._graph = graph;this._id = properties._key;this._properties = properties;}; ////////////////////////////////////////////////////////////////////////////////
/// the real docu is in Users/ModuleGraph/EdgeMethods.mdpp
////////////////////////////////////////////////////////////////////////////////
Edge.prototype.getId = function(){return this._properties._key;}; ////////////////////////////////////////////////////////////////////////////////
/// the real docu is in Users/ModuleGraph/EdgeMethods.mdpp
////////////////////////////////////////////////////////////////////////////////
Edge.prototype.getLabel = function(){return this._properties.$label;}; ////////////////////////////////////////////////////////////////////////////////
/// the real docu is in Users/ModuleGraph/EdgeMethods.mdpp
////////////////////////////////////////////////////////////////////////////////
Edge.prototype.getProperty = function(name){return this._properties[name];}; ////////////////////////////////////////////////////////////////////////////////
/// the real docu is in Users/ModuleGraph/EdgeMethods.mdpp
////////////////////////////////////////////////////////////////////////////////
Edge.prototype.getPropertyKeys = function(){return this._properties.propertyKeys;}; ////////////////////////////////////////////////////////////////////////////////
/// the real docu is in Users/ModuleGraph/EdgeMethods.mdpp
////////////////////////////////////////////////////////////////////////////////
Edge.prototype.properties = function(){return this._properties._shallowCopy;}; ////////////////////////////////////////////////////////////////////////////////
/// the real docu is in Users/ModuleGraph/EdgeMethods.mdpp
////////////////////////////////////////////////////////////////////////////////
Edge.prototype.getInVertex = function(){return this._graph.getVertex(this._properties._to);}; ////////////////////////////////////////////////////////////////////////////////
/// the real docu is in Users/ModuleGraph/EdgeMethods.mdpp
////////////////////////////////////////////////////////////////////////////////
Edge.prototype.getOutVertex = function(){return this._graph.getVertex(this._properties._from);}; ////////////////////////////////////////////////////////////////////////////////
/// this is no documentation.
/// @start Docu Block edgeGetPeerVertex
///
/// `edge*.getPeerVertex(vertex)`
///
/// Returns the peer vertex of the *edge* and the *vertex*.
///
/// @EXAMPLES
///
/// @EXAMPLE_ARANGOSH_OUTPUT{edgeGetPeerVertex}
/// ~ db._drop("v");
/// ~ db._drop("e");
///   Graph = require("@arangodb/graph-blueprint").Graph;
///   g = new Graph("example", "v", "e");
///   v1 = g.addVertex("1");
///   v2 = g.addVertex("2");
///   e = g.addEdge(v1, v2, "1-to-2", "knows");
///   e.getPeerVertex(v1);
/// ~ Graph.drop("example");
/// ~ db._drop("v");
/// ~ db._drop("e");
/// @END_EXAMPLE_ARANGOSH_OUTPUT
/// @end Docu Block
////////////////////////////////////////////////////////////////////////////////
Edge.prototype.getPeerVertex = function(vertex){if(vertex._properties._id === this._properties._to){return this._graph.getVertex(this._properties._from);}if(vertex._properties._id === this._properties._from){return this._graph.getVertex(this._properties._to);}return null;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief edge printing
////////////////////////////////////////////////////////////////////////////////
Edge.prototype._PRINT = function(context){if(!this._properties._id){context.output += "[deleted Edge]";}else if(this._properties._key !== undefined){if(typeof this._properties._key === "string"){context.output += "Edge(\"" + this._properties._key + "\")";}else {context.output += "Edge(" + this._properties._key + ")";}}else {context.output += "Edge(<" + this._id + ">)";}};Vertex = function(graph,properties){this._graph = graph;this._id = properties._key;this._properties = properties;}; ////////////////////////////////////////////////////////////////////////////////
/// the real docu is in Users/ModuleGraph/VertexMethods.mdpp
////////////////////////////////////////////////////////////////////////////////
Vertex.prototype.addInEdge = function(out,id,label,data){return this._graph.addEdge(out,this,id,label,data);}; ////////////////////////////////////////////////////////////////////////////////
/// the real docu is in Users/ModuleGraph/VertexMethods.mdpp
////////////////////////////////////////////////////////////////////////////////
Vertex.prototype.addOutEdge = function(ine,id,label,data){return this._graph.addEdge(this,ine,id,label,data);}; ////////////////////////////////////////////////////////////////////////////////
/// @brief returns the number of edges
////////////////////////////////////////////////////////////////////////////////
Vertex.prototype.degree = function(){return this.getEdges().length;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief returns the number of in-edges
////////////////////////////////////////////////////////////////////////////////
Vertex.prototype.inDegree = function(){return this.getInEdges().length;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief returns the number of out-edges
////////////////////////////////////////////////////////////////////////////////
Vertex.prototype.outDegree = function(){return this.getOutEdges().length;}; ////////////////////////////////////////////////////////////////////////////////
/// this is no documentation.
/// @start Docu Block peerGetId
///
/// `peer.getId()`
///
/// Returns the identifier of the *peer*. If the vertex was deleted, then
/// *undefined* is returned.
///
/// @EXAMPLES
///
/// @verbinclude graph-vertex-get-id
/// @end Docu Block
////////////////////////////////////////////////////////////////////////////////
Vertex.prototype.getId = function(){return this._properties._key;}; ////////////////////////////////////////////////////////////////////////////////
/// this is no documentation.
/// @start Docu Block peerGetProperty
///
/// `peer.getProperty(edge)`
///
/// Returns the property *edge* a *peer*.
///
/// @EXAMPLES
///
/// @verbinclude graph-vertex-get-property
/// @end Docu Block
////////////////////////////////////////////////////////////////////////////////
Vertex.prototype.getProperty = function(name){return this._properties[name];}; ////////////////////////////////////////////////////////////////////////////////
/// this is no documentation.
/// @start Docu Block peerGetPropertyKeys
///
/// `peer.getPropertyKeys()`
///
/// Returns all propety names a *peer*.
///
/// @EXAMPLES
///
/// @verbinclude graph-vertex-get-property-keys
/// @end Docu Block
////////////////////////////////////////////////////////////////////////////////
Vertex.prototype.getPropertyKeys = function(){return this._properties.propertyKeys;}; ////////////////////////////////////////////////////////////////////////////////
/// this is no documentation.
/// @start Docu Block peerproperties
///
/// `peer.properties()`
///
/// Returns all properties and their values of a *peer*
///
/// @EXAMPLES
///
/// @verbinclude graph-vertex-properties
/// @end Docu Block
////////////////////////////////////////////////////////////////////////////////
Vertex.prototype.properties = function(){return this._properties._shallowCopy;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief vertex representation
////////////////////////////////////////////////////////////////////////////////
Vertex.prototype._PRINT = function(context){if(!this._properties._id){context.output += "[deleted Vertex]";}else if(this._properties._key !== undefined){if(typeof this._properties._key === "string"){context.output += "Vertex(\"" + this._properties._key + "\")";}else {context.output += "Vertex(" + this._properties._key + ")";}}else {context.output += "Vertex(<" + this._id + ">)";}};Graph = function(name,vertices,edges,waitForSync){this.initialize(name,vertices,edges,waitForSync);};Graph.prototype._prepareEdgeData = function(data,label){var edgeData;if(is.notExisty(data) && is.object(label)){data = label;label = null;}if(is.notExisty(label) && is.existy(data) && is.existy(data.$label)){label = data.$label;}if(is.notExisty(data) || is.noObject(data)){edgeData = {};}else {edgeData = data._shallowCopy || {};}edgeData.$label = label;return edgeData;};Graph.prototype._prepareVertexData = function(data){var vertexData;if(is.notExisty(data) || is.noObject(data)){vertexData = {};}else {vertexData = data._shallowCopy || {};}return vertexData;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief get a vertex from the graph, create it if it doesn't exist
////////////////////////////////////////////////////////////////////////////////
Graph.prototype.getOrAddVertex = function(id){var v=this.getVertex(id);if(v === null){v = this.addVertex(id);}return v;}; ////////////////////////////////////////////////////////////////////////////////
/// the real docu is in Users/ModuleGraph/GraphConstructor.mdpp
////////////////////////////////////////////////////////////////////////////////
Graph.prototype.addEdge = function(out_vertex,in_vertex,id,label,data,waitForSync){var out_vertex_id,in_vertex_id;if(is.string(out_vertex)){out_vertex_id = out_vertex;}else {out_vertex_id = out_vertex._properties._id;}if(is.string(in_vertex)){in_vertex_id = in_vertex;}else {in_vertex_id = in_vertex._properties._id;}return this._saveEdge(id,out_vertex_id,in_vertex_id,this._prepareEdgeData(data,label),waitForSync);}; ////////////////////////////////////////////////////////////////////////////////
/// the real docu is in Users/ModuleGraph/GraphConstructor.mdpp
////////////////////////////////////////////////////////////////////////////////
Graph.prototype.addVertex = function(id,data,waitForSync){return this._saveVertex(id,this._prepareVertexData(data),waitForSync);}; ////////////////////////////////////////////////////////////////////////////////
/// this is no documentation.
/// @brief replaces an existing vertex by ID
///
/// @FUN{@FA{graph}.replaceVertex(*peer*, *peer*)}
///
/// Replaces an existing vertex by ID
////////////////////////////////////////////////////////////////////////////////
Graph.prototype.replaceVertex = function(id,data){this._replaceVertex(id,data);}; ////////////////////////////////////////////////////////////////////////////////
/// this is no documentation.
/// @start DocuBlock graphReplaceEdge
///
/// `graph.replaceEdge(peer, peer)`
///
/// Replaces an existing edge by ID
/// @end Docu Block
////////////////////////////////////////////////////////////////////////////////
Graph.prototype.replaceEdge = function(id,data){this._replaceEdge(id,data);}; ////////////////////////////////////////////////////////////////////////////////
/// this is no documentation.
/// @brief returns the number of vertices
///
/// @FUN{@FA{graph}.order()}
////////////////////////////////////////////////////////////////////////////////
Graph.prototype.order = function(){return this._vertices.count();}; ////////////////////////////////////////////////////////////////////////////////
/// @brief returns the number of edges
///
/// @FUN{@FA{graph}.size()}
////////////////////////////////////////////////////////////////////////////////
Graph.prototype.size = function(){return this._edges.count();}; ////////////////////////////////////////////////////////////////////////////////
/// this is no documentation.
/// @brief empties the internal cache for Predecessors
///
/// @FUN{@FA{graph}.emptyCachedPredecessors()}
////////////////////////////////////////////////////////////////////////////////
Graph.prototype.emptyCachedPredecessors = function(){this.predecessors = {};}; ////////////////////////////////////////////////////////////////////////////////
/// @brief gets Predecessors for a pair from the internal cache
///
/// @FUN{@FA{graph}.getCachedPredecessors(@FA{target}), @FA{source})}
////////////////////////////////////////////////////////////////////////////////
Graph.prototype.getCachedPredecessors = function(target,source){var predecessors;if(this.predecessors[target.getId()]){predecessors = this.predecessors[target.getId()][source.getId()];}return predecessors;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief sets Predecessors for a pair in the internal cache
///
/// @FUN{@FA{graph}.setCachedPredecessors(@FA{target}), @FA{source}, @FA{value})}
////////////////////////////////////////////////////////////////////////////////
Graph.prototype.setCachedPredecessors = function(target,source,value){if(!this.predecessors[target.getId()]){this.predecessors[target.getId()] = {};}this.predecessors[target.getId()][source.getId()] = value;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief constructs a vertex
////////////////////////////////////////////////////////////////////////////////
Graph.prototype.constructVertex = function(data){var id,rev;if(typeof data === "string"){id = data;}else {id = data._id;rev = data._rev;}var vertex=this._verticesCache[id];if(vertex === undefined || vertex._rev !== rev){var properties=this._vertices.document(id);if(!properties){throw "accessing a deleted vertex";}this._verticesCache[id] = vertex = new Vertex(this,properties);}return vertex;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief constructs an edge
////////////////////////////////////////////////////////////////////////////////
Graph.prototype.constructEdge = function(data){var id,rev,edge,properties;if(typeof data === "string"){id = data;}else {id = data._id;rev = data._rev;}edge = this._edgesCache[id];if(edge === undefined || edge._rev !== rev){properties = this._edges.document(id);if(!properties){throw "accessing a deleted edge";}this._edgesCache[id] = edge = new Edge(this,properties);}return edge;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief graph printing
////////////////////////////////////////////////////////////////////////////////
Graph.prototype._PRINT = function(context){context.output += "Graph(\"" + this._properties._key + "\")";};exports.Edge = Edge;exports.Graph = Graph;exports.Vertex = Vertex;exports.GraphArray = GraphArray;exports.Iterator = Iterator;});module.define("@arangodb/graph",function(exports,module){ /*jshint strict: false */ ////////////////////////////////////////////////////////////////////////////////
/// @brief Graph functionality
///
/// @file
///
/// DISCLAIMER
///
/// Copyright 2010-2014 triagens GmbH, Cologne, Germany
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///
///     http://www.apache.org/licenses/LICENSE-2.0
///
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// Copyright holder is triAGENS GmbH, Cologne, Germany
///
/// @author Florian Bartels
/// @author Copyright 2011-2014, triAGENS GmbH, Cologne, Germany
////////////////////////////////////////////////////////////////////////////////
var gp=require("@arangodb/graph-blueprint"); // The warning will be activated soon.
/*
 * require("console").warn('module "graph" is deprecated, please use ' +
 *                      'module "general-graph" instead');
 */Object.keys(gp).forEach(function(m){exports[m] = gp[m];});});module.define("@arangodb/graph/traversal",function(exports,module){ /*jshint strict: false, unused: false */ /*global ArangoClusterComm, AQL_QUERY_IS_KILLED */ ////////////////////////////////////////////////////////////////////////////////
/// @brief Traversal "classes"
///
/// @file
///
/// DISCLAIMER
///
/// Copyright 2011-2013 triagens GmbH, Cologne, Germany
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///
///     http://www.apache.org/licenses/LICENSE-2.0
///
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// Copyright holder is triAGENS GmbH, Cologne, Germany
///
/// @author Jan Steemann
/// @author Michael Hackstein
/// @author Copyright 2011-2013, triAGENS GmbH, Cologne, Germany
////////////////////////////////////////////////////////////////////////////////
var graph=require("@arangodb/graph-blueprint");var generalGraph=require("@arangodb/general-graph");var arangodb=require("@arangodb");var BinaryHeap=require("@arangodb/heap").BinaryHeap;var ArangoError=arangodb.ArangoError;var ShapedJson=require("internal").ShapedJson; // this may be undefined/null on the client
var db=arangodb.db;var ArangoTraverser; ////////////////////////////////////////////////////////////////////////////////
/// @brief whether or not the query was aborted
/// use the AQL_QUERY_IS_KILLED function on the server side, and a dummy 
/// function otherwise (ArangoShell etc.)
////////////////////////////////////////////////////////////////////////////////
var throwIfAborted=function throwIfAborted(){};try{if(typeof AQL_QUERY_IS_KILLED === "function"){throwIfAborted = function(){if(AQL_QUERY_IS_KILLED()){var err=new ArangoError();err.errorNum = arangodb.errors.ERROR_QUERY_KILLED.code;err.errorMessage = arangodb.errors.ERROR_QUERY_KILLED.message;throw err;}};}}catch(err) {} ////////////////////////////////////////////////////////////////////////////////
/// @brief clone any object
////////////////////////////////////////////////////////////////////////////////
function clone(obj){if(obj === null || typeof obj !== "object"){return obj;}var copy;if(Array.isArray(obj)){copy = [];obj.forEach(function(i){copy.push(clone(i));});}else if(obj instanceof Object){if(ShapedJson && obj instanceof ShapedJson){return obj;}copy = {};Object.keys(obj).forEach(function(k){copy[k] = clone(obj[k]);});}return copy;} ////////////////////////////////////////////////////////////////////////////////
/// @brief test if object is empty
////////////////////////////////////////////////////////////////////////////////
function isEmpty(obj){for(var key in obj) {if(obj.hasOwnProperty(key)){return false;}}return true;} ////////////////////////////////////////////////////////////////////////////////
/// @brief traversal abortion exception
////////////////////////////////////////////////////////////////////////////////
var abortedException=function abortedException(message,options){'use strict';this.message = message || "traversal intentionally aborted by user";this.options = options || {};this._intentionallyAborted = true;};abortedException.prototype = new Error(); ////////////////////////////////////////////////////////////////////////////////
/// @brief default ArangoCollection datasource
///
/// This is a factory function that creates a datasource that operates on the
/// specified edge collection. The vertices and edges are the documents in the
/// corresponding collections.
////////////////////////////////////////////////////////////////////////////////
function collectionDatasourceFactory(edgeCollection){var c=edgeCollection;if(typeof c === 'string'){c = db._collection(c);} // we can call the "fast" version of some edge functions if we are
// running server-side and are not a coordinator
var useBuiltIn=typeof ArangoClusterComm === "object";if(useBuiltIn && require("@arangodb/cluster").isCoordinator()){useBuiltIn = false;}return {edgeCollection:c,useBuiltIn:useBuiltIn,getVertexId:function getVertexId(vertex){return vertex._id;},getPeerVertex:function getPeerVertex(edge,vertex){if(edge._from === vertex._id){return db._document(edge._to);}if(edge._to === vertex._id){return db._document(edge._from);}return null;},getInVertex:function getInVertex(edge){return db._document(edge._to);},getOutVertex:function getOutVertex(edge){return db._document(edge._from);},getEdgeId:function getEdgeId(edge){return edge._id;},getEdgeFrom:function getEdgeFrom(edge){return edge._from;},getEdgeTo:function getEdgeTo(edge){return edge._to;},getLabel:function getLabel(edge){return edge.$label;},getAllEdges:function getAllEdges(vertex){if(this.useBuiltIn){return this.edgeCollection.EDGES(vertex._id);}return this.edgeCollection.edges(vertex._id);},getInEdges:function getInEdges(vertex){if(this.useBuiltIn){return this.edgeCollection.INEDGES(vertex._id);}return this.edgeCollection.inEdges(vertex._id);},getOutEdges:function getOutEdges(vertex){if(this.useBuiltIn){return this.edgeCollection.OUTEDGES(vertex._id);}return this.edgeCollection.outEdges(vertex._id);}};} ////////////////////////////////////////////////////////////////////////////////
/// @brief general graph datasource
///
/// This is a factory function that creates a datasource that operates on the
/// specified general graph. The vertices and edges are delivered by the
/// the general-graph module.
////////////////////////////////////////////////////////////////////////////////
function generalGraphDatasourceFactory(graph){var g=graph;if(typeof g === 'string'){g = generalGraph._graph(g);}return {graph:g,getVertexId:function getVertexId(vertex){return vertex._id;},getPeerVertex:function getPeerVertex(edge,vertex){if(edge._from === vertex._id){return db._document(edge._to);}if(edge._to === vertex._id){return db._document(edge._from);}return null;},getInVertex:function getInVertex(edge){return db._document(edge._to);},getOutVertex:function getOutVertex(edge){return db._document(edge._from);},getEdgeId:function getEdgeId(edge){return edge._id;},getEdgeFrom:function getEdgeFrom(edge){return edge._from;},getEdgeTo:function getEdgeTo(edge){return edge._to;},getLabel:function getLabel(edge){return edge.$label;},getAllEdges:function getAllEdges(vertex){return this.graph._EDGES(vertex._id);},getInEdges:function getInEdges(vertex){return this.graph._INEDGES(vertex._id);},getOutEdges:function getOutEdges(vertex){return this.graph._OUTEDGES(vertex._id);}};} ////////////////////////////////////////////////////////////////////////////////
/// @brief default Graph datasource
///
/// This is a datasource that operates on the specified graph. The vertices
/// are from type Vertex, the edges from type Edge.
////////////////////////////////////////////////////////////////////////////////
function graphDatasourceFactory(name){return {graph:new graph.Graph(name),getVertexId:function getVertexId(vertex){return vertex.getId();},getPeerVertex:function getPeerVertex(edge,vertex){return edge.getPeerVertex(vertex);},getInVertex:function getInVertex(edge){return edge.getInVertex();},getOutVertex:function getOutVertex(edge){return edge.getOutVertex();},getEdgeId:function getEdgeId(edge){return edge.getId();},getEdgeFrom:function getEdgeFrom(edge){return edge._properties._from;},getEdgeTo:function getEdgeTo(edge){return edge._properties._to;},getLabel:function getLabel(edge){return edge.getLabel();},getAllEdges:function getAllEdges(vertex){return vertex.edges();},getInEdges:function getInEdges(vertex){return vertex.inbound();},getOutEdges:function getOutEdges(vertex){return vertex.outbound();}};} ////////////////////////////////////////////////////////////////////////////////
/// @brief default outbound expander function
////////////////////////////////////////////////////////////////////////////////
function outboundExpander(config,vertex,path){var datasource=config.datasource;var connections=[];var outEdges=datasource.getOutEdges(vertex);var edgeIterator;if(outEdges.length > 1 && config.sort){outEdges.sort(config.sort);}if(config.buildVertices){if(!config.expandFilter){edgeIterator = function(edge){try{var v=datasource.getInVertex(edge);connections.push({edge:edge,vertex:v});}catch(e) { // continue even in the face of non-existing documents
}};}else {edgeIterator = function(edge){try{var v=datasource.getInVertex(edge);if(config.expandFilter(config,v,edge,path)){connections.push({edge:edge,vertex:v});}}catch(e) { // continue even in the face of non-existing documents
}};}}else {if(!config.expandFilter){edgeIterator = function(edge){var id=datasource.getEdgeTo(edge);var v={_id:id,_key:id.substr(id.indexOf("/") + 1)};connections.push({edge:edge,vertex:v});};}else {edgeIterator = function(edge){var id=datasource.getEdgeTo(edge);var v={_id:id,_key:id.substr(id.indexOf("/") + 1)};if(config.expandFilter(config,v,edge,path)){connections.push({edge:edge,vertex:v});}};}}outEdges.forEach(edgeIterator);return connections;} ////////////////////////////////////////////////////////////////////////////////
/// @brief default inbound expander function
////////////////////////////////////////////////////////////////////////////////
function inboundExpander(config,vertex,path){var datasource=config.datasource;var connections=[];var inEdges=datasource.getInEdges(vertex);if(inEdges.length > 1 && config.sort){inEdges.sort(config.sort);}var edgeIterator;if(config.buildVertices){if(!config.expandFilter){edgeIterator = function(edge){try{var v=datasource.getOutVertex(edge);connections.push({edge:edge,vertex:v});}catch(e) { // continue even in the face of non-existing documents
}};}else {edgeIterator = function(edge){try{var v=datasource.getOutVertex(edge);if(config.expandFilter(config,v,edge,path)){connections.push({edge:edge,vertex:v});}}catch(e) { // continue even in the face of non-existing documents
}};}}else {if(!config.expandFilter){edgeIterator = function(edge){var id=datasource.getEdgeFrom(edge);var v={_id:id,_key:id.substr(id.indexOf("/") + 1)};connections.push({edge:edge,vertex:v});};}else {edgeIterator = function(edge){var id=datasource.getEdgeFrom(edge);var v={_id:id,_key:id.substr(id.indexOf("/") + 1)};if(config.expandFilter(config,v,edge,path)){connections.push({edge:edge,vertex:v});}};}}inEdges.forEach(edgeIterator);return connections;} ////////////////////////////////////////////////////////////////////////////////
/// @brief default "any" expander function
////////////////////////////////////////////////////////////////////////////////
function anyExpander(config,vertex,path){var datasource=config.datasource;var connections=[];var edges=datasource.getAllEdges(vertex);if(edges.length > 1 && config.sort){edges.sort(config.sort);}var edgeIterator;if(config.buildVertices){if(!config.expandFilter){edgeIterator = function(edge){try{var v=datasource.getPeerVertex(edge,vertex);connections.push({edge:edge,vertex:v});}catch(e) { // continue even in the face of non-existing documents
}};}else {edgeIterator = function(edge){try{var v=datasource.getPeerVertex(edge,vertex);if(config.expandFilter(config,v,edge,path)){connections.push({edge:edge,vertex:v});}}catch(e) { // continue even in the face of non-existing documents
}};}}else {if(!config.expandFilter){edgeIterator = function(edge){var id=datasource.getEdgeFrom(edge);if(id === vertex._id){id = datasource.getEdgeTo(edge);}var v={_id:id,_key:id.substr(id.indexOf("/") + 1)};connections.push({edge:edge,vertex:v});};}else {edgeIterator = function(edge){var id=datasource.getEdgeFrom(edge);if(id === vertex._id){id = datasource.getEdgeTo(edge);}var v={_id:id,_key:id.substr(id.indexOf("/") + 1)};if(config.expandFilter(config,v,edge,path)){connections.push({edge:edge,vertex:v});}};}}edges.forEach(edgeIterator);return connections;} ///////////////////////////////////////////////////////////////////////////////////////////
/// @brief expands all outbound edges labeled with at least one label in config.labels
///////////////////////////////////////////////////////////////////////////////////////////
function expandOutEdgesWithLabels(config,vertex,path){var datasource=config.datasource;var result=[];var i;if(!Array.isArray(config.labels)){config.labels = [config.labels];}var edgesList=datasource.getOutEdges(vertex);if(edgesList !== undefined){for(i = 0;i < edgesList.length;++i) {var edge=edgesList[i];var label=datasource.getLabel(edge);if(config.labels.indexOf(label) >= 0){result.push({edge:edge,vertex:datasource.getInVertex(edge)});}}}return result;} ///////////////////////////////////////////////////////////////////////////////////////////
/// @brief expands all inbound edges labeled with at least one label in config.labels
///////////////////////////////////////////////////////////////////////////////////////////
function expandInEdgesWithLabels(config,vertex,path){var datasource=config.datasource;var result=[];var i;if(!Array.isArray(config.labels)){config.labels = [config.labels];}var edgesList=config.datasource.getInEdges(vertex);if(edgesList !== undefined){for(i = 0;i < edgesList.length;++i) {var edge=edgesList[i];var label=datasource.getLabel(edge);if(config.labels.indexOf(label) >= 0){result.push({edge:edge,vertex:datasource.getOutVertex(edge)});}}}return result;} ///////////////////////////////////////////////////////////////////////////////////////////
/// @brief expands all edges labeled with at least one label in config.labels
///////////////////////////////////////////////////////////////////////////////////////////
function expandEdgesWithLabels(config,vertex,path){var datasource=config.datasource;var result=[];var i;if(!Array.isArray(config.labels)){config.labels = [config.labels];}var edgesList=config.datasource.getAllEdges(vertex);if(edgesList !== undefined){for(i = 0;i < edgesList.length;++i) {var edge=edgesList[i];var label=datasource.getLabel(edge);if(config.labels.indexOf(label) >= 0){result.push({edge:edge,vertex:datasource.getPeerVertex(edge,vertex)});}}}return result;} ////////////////////////////////////////////////////////////////////////////////
/// @brief default visitor that just tracks every visit
////////////////////////////////////////////////////////////////////////////////
function trackingVisitor(config,result,vertex,path){if(!result || !result.visited){return;}if(result.visited.vertices){result.visited.vertices.push(clone(vertex));}if(result.visited.paths){result.visited.paths.push(clone(path));}} ////////////////////////////////////////////////////////////////////////////////
/// @brief a visitor that counts the number of nodes visited
////////////////////////////////////////////////////////////////////////////////
function countingVisitor(config,result,vertex,path){if(!result){return;}if(result.hasOwnProperty('count')){++result.count;}else {result.count = 1;}} ////////////////////////////////////////////////////////////////////////////////
/// @brief a visitor that does nothing - can be used to quickly traverse a
/// graph, e.g. for performance comparisons etc.
////////////////////////////////////////////////////////////////////////////////
function doNothingVisitor(){} ////////////////////////////////////////////////////////////////////////////////
/// @brief default filter to visit & expand all vertices
////////////////////////////////////////////////////////////////////////////////
function visitAllFilter(){return "";} ////////////////////////////////////////////////////////////////////////////////
/// @brief filter to visit & expand all vertices up to a given depth
////////////////////////////////////////////////////////////////////////////////
function maxDepthFilter(config,vertex,path){if(path && path.vertices && path.vertices.length > config.maxDepth){return ArangoTraverser.PRUNE;}} ////////////////////////////////////////////////////////////////////////////////
/// @brief exclude all vertices up to a given depth
////////////////////////////////////////////////////////////////////////////////
function minDepthFilter(config,vertex,path){if(path && path.vertices && path.vertices.length <= config.minDepth){return ArangoTraverser.EXCLUDE;}} ////////////////////////////////////////////////////////////////////////////////
/// @brief include all vertices matching one of the given attribute sets
////////////////////////////////////////////////////////////////////////////////
function includeMatchingAttributesFilter(config,vertex,path){if(!Array.isArray(config.matchingAttributes)){config.matchingAttributes = [config.matchingAttributes];}var include=false;config.matchingAttributes.forEach(function(example){var count=0;var keys=Object.keys(example);keys.forEach(function(key){if(vertex[key] && vertex[key] === example[key]){count++;}});if(count > 0 && count === keys.length){include = true;}});var result;if(!include){result = "exclude";}return result;} ////////////////////////////////////////////////////////////////////////////////
/// @brief combine an array of filters
////////////////////////////////////////////////////////////////////////////////
function combineFilters(filters,config,vertex,path){var result=[];filters.forEach(function(f){var tmp=f(config,vertex,path);if(!Array.isArray(tmp)){tmp = [tmp];}result = result.concat(tmp);});return result;} ////////////////////////////////////////////////////////////////////////////////
/// @brief parse a filter result
////////////////////////////////////////////////////////////////////////////////
function parseFilterResult(args){var result={visit:true,expand:true};function processArgument(arg){if(arg === undefined || arg === null){return;}var finish=false;if(typeof arg === 'string'){if(arg === ArangoTraverser.EXCLUDE){result.visit = false;finish = true;}else if(arg === ArangoTraverser.PRUNE){result.expand = false;finish = true;}else if(arg === ''){finish = true;}}else if(Array.isArray(arg)){var i;for(i = 0;i < arg.length;++i) {processArgument(arg[i]);}finish = true;}if(finish){return;}var err=new ArangoError();err.errorNum = arangodb.errors.ERROR_GRAPH_INVALID_FILTER_RESULT.code;err.errorMessage = arangodb.errors.ERROR_GRAPH_INVALID_FILTER_RESULT.message;throw err;}processArgument(args);return result;} ////////////////////////////////////////////////////////////////////////////////
/// @brief apply the uniqueness checks
////////////////////////////////////////////////////////////////////////////////
function checkUniqueness(config,visited,vertex,edge){var uniqueness=config.uniqueness;var datasource=config.datasource;var id;if(uniqueness.vertices !== ArangoTraverser.UNIQUE_NONE){id = datasource.getVertexId(vertex);if(visited.vertices[id] === true){return false;}visited.vertices[id] = true;}if(edge !== null && uniqueness.edges !== ArangoTraverser.UNIQUE_NONE){id = datasource.getEdgeId(edge);if(visited.edges[id] === true){return false;}visited.edges[id] = true;}return true;} ////////////////////////////////////////////////////////////////////////////////
/// @brief check if we must process items in reverse order
////////////////////////////////////////////////////////////////////////////////
function checkReverse(config){var result=false;if(config.order === ArangoTraverser.POST_ORDER){ // post order
if(config.itemOrder === ArangoTraverser.FORWARD){result = true;}}else if(config.order === ArangoTraverser.PRE_ORDER || config.order === ArangoTraverser.PRE_ORDER_EXPANDER){ // pre order
if(config.itemOrder === ArangoTraverser.BACKWARD && config.strategy === ArangoTraverser.BREADTH_FIRST){result = true;}else if(config.itemOrder === ArangoTraverser.FORWARD && config.strategy === ArangoTraverser.DEPTH_FIRST){result = true;}}return result;} ////////////////////////////////////////////////////////////////////////////////
/// @brief implementation details for breadth-first strategy
////////////////////////////////////////////////////////////////////////////////
function breadthFirstSearch(){return {requiresEndVertex:function requiresEndVertex(){return false;},getPathItems:function getPathItems(id,items){var visited={};var ignore=items.length - 1;items.forEach(function(item,i){if(i !== ignore){visited[id(item)] = true;}});return visited;},createPath:function createPath(items,idx){var path={edges:[],vertices:[]};var pathItem=items[idx];while(true) {if(pathItem.edge !== null){path.edges.unshift(pathItem.edge);}path.vertices.unshift(pathItem.vertex);idx = pathItem.parentIndex;if(idx < 0){break;}pathItem = items[idx];}return path;},run:function run(config,result,startVertex){var maxIterations=config.maxIterations,visitCounter=0;var toVisit=[{edge:null,vertex:startVertex,parentIndex:-1}];var visited={edges:{},vertices:{}};var index=0;var step=1;var reverse=checkReverse(config);while(step === 1 && index < toVisit.length || step === -1 && index >= 0) {var current=toVisit[index];var vertex=current.vertex;var edge=current.edge;var path;if(visitCounter++ > maxIterations){var err=new ArangoError();err.errorNum = arangodb.errors.ERROR_GRAPH_TOO_MANY_ITERATIONS.code;err.errorMessage = arangodb.errors.ERROR_GRAPH_TOO_MANY_ITERATIONS.message;throw err;}throwIfAborted();if(current.visit === null || current.visit === undefined){current.visit = false;path = this.createPath(toVisit,index); // first apply uniqueness check
if(config.uniqueness.vertices === ArangoTraverser.UNIQUE_PATH){visited.vertices = this.getPathItems(config.datasource.getVertexId,path.vertices);}if(config.uniqueness.edges === ArangoTraverser.UNIQUE_PATH){visited.edges = this.getPathItems(config.datasource.getEdgeId,path.edges);}if(!checkUniqueness(config,visited,vertex,edge)){if(index < toVisit.length - 1){index += step;}else {step = -1;}continue;}var filterResult=parseFilterResult(config.filter(config,vertex,path));if(config.order === ArangoTraverser.PRE_ORDER && filterResult.visit){ // preorder
config.visitor(config,result,vertex,path);}else { // postorder
current.visit = filterResult.visit || false;}if(filterResult.expand){var connected=config.expander(config,vertex,path),i;if(reverse){connected.reverse();}if(config.order === ArangoTraverser.PRE_ORDER_EXPANDER && filterResult.visit){config.visitor(config,result,vertex,path,connected);}for(i = 0;i < connected.length;++i) {connected[i].parentIndex = index;toVisit.push(connected[i]);}}else if(config.order === ArangoTraverser.PRE_ORDER_EXPANDER && filterResult.visit){config.visitor(config,result,vertex,path,[]);}if(config.order === ArangoTraverser.POST_ORDER){if(index < toVisit.length - 1){index += step;}else {step = -1;}}}else {if(config.order === ArangoTraverser.POST_ORDER && current.visit){path = this.createPath(toVisit,index);config.visitor(config,result,vertex,path);}index += step;}}}};} ////////////////////////////////////////////////////////////////////////////////
/// @brief implementation details for depth-first strategy
////////////////////////////////////////////////////////////////////////////////
function depthFirstSearch(){return {requiresEndVertex:function requiresEndVertex(){return false;},getPathItems:function getPathItems(id,items){var visited={};items.forEach(function(item){visited[id(item)] = true;});return visited;},run:function run(config,result,startVertex){var maxIterations=config.maxIterations,visitCounter=0;var toVisit=[{edge:null,vertex:startVertex,visit:null}];var path={edges:[],vertices:[]};var visited={edges:{},vertices:{}};var reverse=checkReverse(config);var uniqueness=config.uniqueness;var haveUniqueness=uniqueness.vertices !== ArangoTraverser.UNIQUE_NONE || uniqueness.edges !== ArangoTraverser.UNIQUE_NONE;while(toVisit.length > 0) {if(visitCounter++ > maxIterations){var err=new ArangoError();err.errorNum = arangodb.errors.ERROR_GRAPH_TOO_MANY_ITERATIONS.code;err.errorMessage = arangodb.errors.ERROR_GRAPH_TOO_MANY_ITERATIONS.message;throw err;}throwIfAborted(); // peek at the top of the stack
var current=toVisit[toVisit.length - 1];var vertex=current.vertex;var edge=current.edge; // check if we visit the element for the first time
if(current.visit === null || current.visit === undefined){current.visit = false;if(haveUniqueness){ // first apply uniqueness check
if(uniqueness.vertices === ArangoTraverser.UNIQUE_PATH){visited.vertices = this.getPathItems(config.datasource.getVertexId,path.vertices);}if(uniqueness.edges === ArangoTraverser.UNIQUE_PATH){visited.edges = this.getPathItems(config.datasource.getEdgeId,path.edges);}if(!checkUniqueness(config,visited,vertex,edge)){ // skip element if not unique
toVisit.pop();continue;}} // push the current element onto the path stack
if(edge !== null){path.edges.push(edge);}path.vertices.push(vertex);var filterResult=parseFilterResult(config.filter(config,vertex,path));if(config.order === ArangoTraverser.PRE_ORDER && filterResult.visit){ // preorder visit
config.visitor(config,result,vertex,path);}else { // postorder. mark the element visitation flag because we'll got to check it later
current.visit = filterResult.visit || false;} // expand the element's children?
if(filterResult.expand){var connected=config.expander(config,vertex,path),i;if(reverse){connected.reverse();}if(config.order === ArangoTraverser.PRE_ORDER_EXPANDER && filterResult.visit){config.visitor(config,result,vertex,path,connected);}for(i = 0;i < connected.length;++i) {connected[i].visit = null;toVisit.push(connected[i]);}}else if(config.order === ArangoTraverser.PRE_ORDER_EXPANDER && filterResult.visit){config.visitor(config,result,vertex,path,[]);}}else { // we have already seen this element
if(config.order === ArangoTraverser.POST_ORDER && current.visit){ // postorder visitation
config.visitor(config,result,vertex,path);} // pop the element from the stack
toVisit.pop();if(path.edges.length > 0){path.edges.pop();}path.vertices.pop();}}}};} ////////////////////////////////////////////////////////////////////////////////
/// @brief implementation details for dijkstra shortest path strategy
////////////////////////////////////////////////////////////////////////////////
function dijkstraSearch(){return {nodes:{},requiresEndVertex:function requiresEndVertex(){return true;},makeNode:function makeNode(vertex){var id=vertex._id;if(!this.nodes.hasOwnProperty(id)){this.nodes[id] = {vertex:vertex,dist:Infinity};}return this.nodes[id];},vertexList:function vertexList(vertex){var result=[];while(vertex) {result.push(vertex);vertex = vertex.parent;}return result;},buildPath:function buildPath(vertex){var path={vertices:[vertex.vertex],edges:[]};var v=vertex;while(v.parent) {path.vertices.unshift(v.parent.vertex);path.edges.unshift(v.parentEdge);v = v.parent;}return path;},run:function run(config,result,startVertex,endVertex){var maxIterations=config.maxIterations,visitCounter=0;var heap=new BinaryHeap(function(node){return node.dist;});var startNode=this.makeNode(startVertex);startNode.dist = 0;heap.push(startNode);while(heap.size() > 0) {if(visitCounter++ > maxIterations){var err=new ArangoError();err.errorNum = arangodb.errors.ERROR_GRAPH_TOO_MANY_ITERATIONS.code;err.errorMessage = arangodb.errors.ERROR_GRAPH_TOO_MANY_ITERATIONS.message;throw err;}throwIfAborted();var currentNode=heap.pop();var i,n;if(currentNode.vertex._id === endVertex._id){var vertices=this.vertexList(currentNode).reverse();n = vertices.length;for(i = 0;i < n;++i) {if(!vertices[i].hide){config.visitor(config,result,vertices[i].vertex,this.buildPath(vertices[i]));}}return;}if(currentNode.visited){continue;}if(currentNode.dist === Infinity){break;}currentNode.visited = true;var path=this.buildPath(currentNode);var filterResult=parseFilterResult(config.filter(config,currentNode.vertex,path));if(!filterResult.visit){currentNode.hide = true;}if(!filterResult.expand){continue;}var dist=currentNode.dist;var connected=config.expander(config,currentNode.vertex,path);n = connected.length;for(i = 0;i < n;++i) {var neighbor=this.makeNode(connected[i].vertex);if(neighbor.visited){continue;}var edge=connected[i].edge;var weight=1;if(config.distance){weight = config.distance(config,currentNode.vertex,neighbor.vertex,edge);}else if(config.weight){if(typeof edge[config.weight] === "number"){weight = edge[config.weight];}else if(config.defaultWeight){weight = config.defaultWeight;}else {weight = Infinity;}}var alt=dist + weight;if(alt < neighbor.dist){neighbor.dist = alt;neighbor.parent = currentNode;neighbor.parentEdge = edge;heap.push(neighbor);}}}}};}function dijkstraSearchMulti(){return {nodes:{},requiresEndVertex:function requiresEndVertex(){return true;},makeNode:function makeNode(vertex){var id=vertex._id;if(!this.nodes.hasOwnProperty(id)){this.nodes[id] = {vertex:vertex,dist:Infinity};}return this.nodes[id];},vertexList:function vertexList(vertex){var result=[];while(vertex) {result.push(vertex);vertex = vertex.parent;}return result;},buildPath:function buildPath(vertex){var path={vertices:[vertex.vertex],edges:[]};var v=vertex;while(v.parent) {path.vertices.unshift(v.parent.vertex);path.edges.unshift(v.parentEdge);v = v.parent;}return path;},run:function run(config,result,startVertex,endVertex){var maxIterations=config.maxIterations,visitCounter=0;var heap=new BinaryHeap(function(node){return node.dist;});var startNode=this.makeNode(startVertex);startNode.dist = 0;heap.push(startNode);while(heap.size() > 0) {if(visitCounter++ > maxIterations){var err=new ArangoError();err.errorNum = arangodb.errors.ERROR_GRAPH_TOO_MANY_ITERATIONS.code;err.errorMessage = arangodb.errors.ERROR_GRAPH_TOO_MANY_ITERATIONS.message;throw err;}var currentNode=heap.pop();var i,n;if(endVertex.hasOwnProperty(currentNode.vertex._id)){delete endVertex[currentNode.vertex._id];config.visitor(config,result,currentNode,this.buildPath(currentNode));if(isEmpty(endVertex)){return;}}if(currentNode.visited){continue;}if(currentNode.dist === Infinity){break;}currentNode.visited = true;var path=this.buildPath(currentNode);var filterResult=parseFilterResult(config.filter(config,currentNode.vertex,path));if(!filterResult.visit){currentNode.hide = true;}if(!filterResult.expand){continue;}var dist=currentNode.dist;var connected=config.expander(config,currentNode.vertex,path);n = connected.length;for(i = 0;i < n;++i) {var neighbor=this.makeNode(connected[i].vertex);if(neighbor.visited){continue;}var edge=connected[i].edge;var weight=1;if(config.distance){weight = config.distance(config,currentNode.vertex,neighbor.vertex,edge);}else if(config.weight){if(typeof edge[config.weight] === "number"){weight = edge[config.weight];}else if(config.defaultWeight){weight = config.defaultWeight;}else {weight = Infinity;}}var alt=dist + weight;if(alt < neighbor.dist){neighbor.dist = alt;neighbor.parent = currentNode;neighbor.parentEdge = edge;heap.push(neighbor);}}}}};} ////////////////////////////////////////////////////////////////////////////////
/// @brief implementation details for a* shortest path strategy
////////////////////////////////////////////////////////////////////////////////
function astarSearch(){return {nodes:{},requiresEndVertex:function requiresEndVertex(){return true;},makeNode:function makeNode(vertex){var id=vertex._id;if(!this.nodes.hasOwnProperty(id)){this.nodes[id] = {vertex:vertex,f:0,g:0,h:0};}return this.nodes[id];},vertexList:function vertexList(vertex){var result=[];while(vertex) {result.push(vertex);vertex = vertex.parent;}return result;},buildPath:function buildPath(vertex){var path={vertices:[vertex.vertex],edges:[]};var v=vertex;while(v.parent) {path.vertices.unshift(v.parent.vertex);path.edges.unshift(v.parentEdge);v = v.parent;}return path;},run:function run(config,result,startVertex,endVertex){var maxIterations=config.maxIterations,visitCounter=0;var heap=new BinaryHeap(function(node){return node.f;});heap.push(this.makeNode(startVertex));while(heap.size() > 0) {if(visitCounter++ > maxIterations){var err=new ArangoError();err.errorNum = arangodb.errors.ERROR_GRAPH_TOO_MANY_ITERATIONS.code;err.errorMessage = arangodb.errors.ERROR_GRAPH_TOO_MANY_ITERATIONS.message;throw err;}throwIfAborted();var currentNode=heap.pop();var i,n;if(currentNode.vertex._id === endVertex._id){var vertices=this.vertexList(currentNode);if(config.order !== ArangoTraverser.PRE_ORDER){vertices.reverse();}n = vertices.length;for(i = 0;i < n;++i) {config.visitor(config,result,vertices[i].vertex,this.buildPath(vertices[i]));}return;}currentNode.closed = true;var path=this.buildPath(currentNode);var connected=config.expander(config,currentNode.vertex,path);n = connected.length;for(i = 0;i < n;++i) {var neighbor=this.makeNode(connected[i].vertex);if(neighbor.closed){continue;}var gScore=currentNode.g + 1; // + neighbor.cost;
var beenVisited=neighbor.visited;if(!beenVisited || gScore < neighbor.g){var edge=connected[i].edge;neighbor.visited = true;neighbor.parent = currentNode;neighbor.parentEdge = edge;neighbor.h = 1;if(config.distance && !neighbor.h){neighbor.h = config.distance(config,neighbor.vertex,endVertex,edge);}neighbor.g = gScore;neighbor.f = neighbor.g + neighbor.h;if(!beenVisited){heap.push(neighbor);}else {heap.rescoreElement(neighbor);}}}}}};} ////////////////////////////////////////////////////////////////////////////////
/// @brief traversal constructor
////////////////////////////////////////////////////////////////////////////////
ArangoTraverser = function(config){var defaults={order:ArangoTraverser.PRE_ORDER,itemOrder:ArangoTraverser.FORWARD,strategy:ArangoTraverser.DEPTH_FIRST,uniqueness:{vertices:ArangoTraverser.UNIQUE_NONE,edges:ArangoTraverser.UNIQUE_PATH},visitor:trackingVisitor,filter:null,expander:outboundExpander,datasource:null,maxIterations:10000000,minDepth:0,maxDepth:256,buildVertices:true},d;var err;if(typeof config !== "object"){err = new ArangoError();err.errorNum = arangodb.errors.ERROR_BAD_PARAMETER.code;err.errorMessage = arangodb.errors.ERROR_BAD_PARAMETER.message;throw err;} // apply defaults
for(d in defaults) {if(defaults.hasOwnProperty(d)){if(!config.hasOwnProperty(d) || config[d] === undefined){config[d] = defaults[d];}}}function validate(value,map,param){var m;if(value === null || value === undefined){ // use first key from map
for(m in map) {if(map.hasOwnProperty(m)){value = m;break;}}}if(typeof value === 'string'){value = value.toLowerCase().replace(/-/,"");if(map[value] !== null && map[value] !== undefined){return map[value];}}for(m in map) {if(map.hasOwnProperty(m)){if(map[m] === value){return value;}}}err = new ArangoError();err.errorNum = arangodb.errors.ERROR_BAD_PARAMETER.code;err.errorMessage = "invalid value for " + param;throw err;}config.uniqueness = {vertices:validate(config.uniqueness && config.uniqueness.vertices,{none:ArangoTraverser.UNIQUE_NONE,global:ArangoTraverser.UNIQUE_GLOBAL,path:ArangoTraverser.UNIQUE_PATH},"uniqueness.vertices"),edges:validate(config.uniqueness && config.uniqueness.edges,{path:ArangoTraverser.UNIQUE_PATH,none:ArangoTraverser.UNIQUE_NONE,global:ArangoTraverser.UNIQUE_GLOBAL},"uniqueness.edges")};config.strategy = validate(config.strategy,{depthfirst:ArangoTraverser.DEPTH_FIRST,breadthfirst:ArangoTraverser.BREADTH_FIRST,astar:ArangoTraverser.ASTAR_SEARCH,dijkstra:ArangoTraverser.DIJKSTRA_SEARCH,dijkstramulti:ArangoTraverser.DIJKSTRA_SEARCH_MULTI},"strategy");config.order = validate(config.order,{preorder:ArangoTraverser.PRE_ORDER,postorder:ArangoTraverser.POST_ORDER,preorderexpander:ArangoTraverser.PRE_ORDER_EXPANDER},"order");config.itemOrder = validate(config.itemOrder,{forward:ArangoTraverser.FORWARD,backward:ArangoTraverser.BACKWARD},"itemOrder");if(typeof config.visitor !== "function"){err = new ArangoError();err.errorNum = arangodb.errors.ERROR_BAD_PARAMETER.code;err.errorMessage = "invalid visitor function";throw err;} // prepare an array of filters
var filters=[];if(config.minDepth !== undefined && config.minDepth !== null && config.minDepth > 0){filters.push(minDepthFilter);}if(config.maxDepth !== undefined && config.maxDepth !== null && config.maxDepth > 0){filters.push(maxDepthFilter);}if(!Array.isArray(config.filter)){if(typeof config.filter === "function"){config.filter = [config.filter];}else {config.filter = [];}}config.filter.forEach(function(f){if(typeof f !== "function"){err = new ArangoError();err.errorNum = arangodb.errors.ERROR_BAD_PARAMETER.code;err.errorMessage = "invalid filter function";throw err;}filters.push(f);});if(filters.length > 1){ // more than one filter. combine their results
config.filter = function(config,vertex,path){return combineFilters(filters,config,vertex,path);};}else if(filters.length === 1){ // exactly one filter
config.filter = filters[0];}else {config.filter = visitAllFilter;}if(typeof config.expander !== "function"){config.expander = validate(config.expander,{outbound:outboundExpander,inbound:inboundExpander,any:anyExpander},"expander");}if(typeof config.expander !== "function"){err = new ArangoError();err.errorNum = arangodb.errors.ERROR_BAD_PARAMETER.code;err.errorMessage = "invalid expander function";throw err;}if(typeof config.datasource !== "object"){err = new ArangoError();err.errorNum = arangodb.errors.ERROR_BAD_PARAMETER.code;err.errorMessage = "invalid datasource";throw err;}this.config = config;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief execute the traversal
////////////////////////////////////////////////////////////////////////////////
ArangoTraverser.prototype.traverse = function(result,startVertex,endVertex){ // get the traversal strategy
var strategy;if(this.config.strategy === ArangoTraverser.ASTAR_SEARCH){strategy = astarSearch();}else if(this.config.strategy === ArangoTraverser.DIJKSTRA_SEARCH){strategy = dijkstraSearch();}else if(this.config.strategy === ArangoTraverser.DIJKSTRA_SEARCH_MULTI){strategy = dijkstraSearchMulti();}else if(this.config.strategy === ArangoTraverser.BREADTH_FIRST){strategy = breadthFirstSearch();}else {strategy = depthFirstSearch();} // check the start vertex
if(startVertex === undefined || startVertex === null || typeof startVertex !== 'object'){var err1=new ArangoError();err1.errorNum = arangodb.errors.ERROR_BAD_PARAMETER.code;err1.errorMessage = arangodb.errors.ERROR_BAD_PARAMETER.message + ": invalid startVertex specified for traversal";throw err1;}if(strategy.requiresEndVertex() && (endVertex === undefined || endVertex === null || typeof endVertex !== 'object')){var err2=new ArangoError();err2.errorNum = arangodb.errors.ERROR_BAD_PARAMETER.code;err2.errorMessage = arangodb.errors.ERROR_BAD_PARAMETER.message + ": invalid endVertex specified for traversal";throw err2;} // run the traversal
try{strategy.run(this.config,result,startVertex,endVertex);}catch(err3) {if(typeof err3 !== "object" || !err3._intentionallyAborted){throw err3;}}}; ////////////////////////////////////////////////////////////////////////////////
/// @brief every element can be revisited
////////////////////////////////////////////////////////////////////////////////
ArangoTraverser.UNIQUE_NONE = 0; ////////////////////////////////////////////////////////////////////////////////
/// @brief element can only be revisited if not already in current path
////////////////////////////////////////////////////////////////////////////////
ArangoTraverser.UNIQUE_PATH = 1; ////////////////////////////////////////////////////////////////////////////////
/// @brief element can only be revisited if not already visited
////////////////////////////////////////////////////////////////////////////////
ArangoTraverser.UNIQUE_GLOBAL = 2; ////////////////////////////////////////////////////////////////////////////////
/// @brief visitation strategy breadth first
////////////////////////////////////////////////////////////////////////////////
ArangoTraverser.BREADTH_FIRST = 0; ////////////////////////////////////////////////////////////////////////////////
/// @brief visitation strategy depth first
////////////////////////////////////////////////////////////////////////////////
ArangoTraverser.DEPTH_FIRST = 1; ////////////////////////////////////////////////////////////////////////////////
/// @brief astar search
////////////////////////////////////////////////////////////////////////////////
ArangoTraverser.ASTAR_SEARCH = 2; ////////////////////////////////////////////////////////////////////////////////
/// @brief dijkstra search
////////////////////////////////////////////////////////////////////////////////
ArangoTraverser.DIJKSTRA_SEARCH = 3; ////////////////////////////////////////////////////////////////////////////////
/// @brief dijkstra search with multiple end vertices
////////////////////////////////////////////////////////////////////////////////
ArangoTraverser.DIJKSTRA_SEARCH_MULTI = 4; ////////////////////////////////////////////////////////////////////////////////
/// @brief pre-order traversal, visitor called before expander
////////////////////////////////////////////////////////////////////////////////
ArangoTraverser.PRE_ORDER = 0; ////////////////////////////////////////////////////////////////////////////////
/// @brief post-order traversal
////////////////////////////////////////////////////////////////////////////////
ArangoTraverser.POST_ORDER = 1; ////////////////////////////////////////////////////////////////////////////////
/// @brief pre-order traversal, visitor called at expander
////////////////////////////////////////////////////////////////////////////////
ArangoTraverser.PRE_ORDER_EXPANDER = 2; ////////////////////////////////////////////////////////////////////////////////
/// @brief forward item processing order
////////////////////////////////////////////////////////////////////////////////
ArangoTraverser.FORWARD = 0; ////////////////////////////////////////////////////////////////////////////////
/// @brief backward item processing order
////////////////////////////////////////////////////////////////////////////////
ArangoTraverser.BACKWARD = 1; ////////////////////////////////////////////////////////////////////////////////
/// @brief prune "constant"
////////////////////////////////////////////////////////////////////////////////
ArangoTraverser.PRUNE = 'prune'; ////////////////////////////////////////////////////////////////////////////////
/// @brief exclude "constant"
////////////////////////////////////////////////////////////////////////////////
ArangoTraverser.EXCLUDE = 'exclude';exports.collectionDatasourceFactory = collectionDatasourceFactory;exports.generalGraphDatasourceFactory = generalGraphDatasourceFactory;exports.graphDatasourceFactory = graphDatasourceFactory;exports.outboundExpander = outboundExpander;exports.inboundExpander = inboundExpander;exports.anyExpander = anyExpander;exports.expandOutEdgesWithLabels = expandOutEdgesWithLabels;exports.expandInEdgesWithLabels = expandInEdgesWithLabels;exports.expandEdgesWithLabels = expandEdgesWithLabels;exports.trackingVisitor = trackingVisitor;exports.countingVisitor = countingVisitor;exports.doNothingVisitor = doNothingVisitor;exports.visitAllFilter = visitAllFilter;exports.maxDepthFilter = maxDepthFilter;exports.minDepthFilter = minDepthFilter;exports.includeMatchingAttributesFilter = includeMatchingAttributesFilter;exports.abortedException = abortedException;exports.Traverser = ArangoTraverser;});module.define("@arangodb/is",function(exports,module){'use strict'; ////////////////////////////////////////////////////////////////////////////////
/// @brief Check if something is something
///
/// @file
///
/// DISCLAIMER
///
/// Copyright 2010-2012 triagens GmbH, Cologne, Germany
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///
///     http://www.apache.org/licenses/LICENSE-2.0
///
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// Copyright holder is triAGENS GmbH, Cologne, Germany
///
/// @author Dr. Frank Celler, Lucas Dohmen
/// @author Copyright 2011-2012, triAGENS GmbH, Cologne, Germany
////////////////////////////////////////////////////////////////////////////////
// Check if a value is not undefined or null
function existy(x){return x !== null && x !== undefined;} // Check if a value is undefined or null
function notExisty(x){return !existy(x);} // Check if a value is existy and not false
function truthy(x){return x !== false && existy(x);} // Check if a value is not truthy
function falsy(x){return !truthy(x);} // is.object, is.noObject, is.array, is.noArray...
['Object','Array','Boolean','Date','Function','Number','String','RegExp'].forEach(function(type){exports[type.toLowerCase()] = function(obj){return Object.prototype.toString.call(obj) === '[object ' + type + ']';};exports["no" + type] = function(obj){return Object.prototype.toString.call(obj) !== '[object ' + type + ']';};});exports.existy = existy;exports.notExisty = notExisty;exports.truthy = truthy;exports.falsy = falsy;});module.define("@arangodb/mimetypes",function(exports,module){ /*jslint indent: 2,
         nomen: true,
         maxlen: 100,
         sloppy: true,
         vars: true,
         white: true,
         plusplus: true */ /*global exports */ ////////////////////////////////////////////////////////////////////////////////
/// @brief auto-generated file generated from mimetypes.dat
////////////////////////////////////////////////////////////////////////////////
exports.mimeTypes = {"gif":["image/gif",false],"jpg":["image/jpg",false],"png":["image/png",false],"tiff":["image/tiff",false],"ico":["image/x-icon",false],"css":["text/css",true],"js":["text/javascript",true],"json":["application/json",true],"html":["text/html",true],"htm":["text/html",true],"pdf":["application/pdf",false],"ps":["application/postscript",false],"txt":["text/plain",true],"text":["text/plain",true],"xml":["application/xml",true],"dtd":["application/xml-dtd",true],"svg":["image/svg+xml",true],"ttf":["application/x-font-ttf",false],"otf":["application/x-font-opentype",false],"woff":["application/font-woff",false],"eot":["application/vnd.ms-fontobject",false],"bz2":["application/x-bzip2",false],"gz":["application/x-gzip",false],"tgz":["application/x-tar",false],"zip":["application/x-compressed-zip",false],"doc":["application/msword",false],"docx":["application/vnd.openxmlformats-officedocument.wordprocessingml.document",false],"dotx":["application/vnd.openxmlformats-officedocument.wordprocessingml.template",false],"potx":["application/vnd.openxmlformats-officedocument.presentationml.template",false],"ppsx":["application/vnd.openxmlformats-officedocument.presentationml.slideshow",false],"ppt":["application/vnd.ms-powerpoint",false],"pptx":["application/vnd.openxmlformats-officedocument.presentationml.presentation",false],"xls":["application/vnd.ms-excel",false],"xlsb":["application/vnd.ms-excel.sheet.binary.macroEnabled.12",false],"xlsx":["application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",false],"xltx":["application/vnd.openxmlformats-officedocument.spreadsheetml.template",false],"swf":["application/x-shockwave-flash",false]};exports.extensions = {"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet":["xlsx"],"image/svg+xml":["svg"],"application/postscript":["ps"],"image/png":["png"],"application/x-font-ttf":["ttf"],"application/vnd.ms-excel.sheet.binary.macroEnabled.12":["xlsb"],"application/x-font-opentype":["otf"],"application/vnd.openxmlformats-officedocument.wordprocessingml.document":["docx"],"application/x-bzip2":["bz2"],"application/json":["json"],"application/pdf":["pdf"],"application/vnd.openxmlformats-officedocument.presentationml.presentation":["pptx"],"application/vnd.ms-fontobject":["eot"],"application/xml-dtd":["dtd"],"application/x-shockwave-flash":["swf"],"image/gif":["gif"],"image/jpg":["jpg"],"application/xml":["xml"],"application/vnd.ms-excel":["xls"],"image/tiff":["tiff"],"application/vnd.ms-powerpoint":["ppt"],"application/font-woff":["woff"],"application/vnd.openxmlformats-officedocument.presentationml.template":["potx"],"text/plain":["txt","text"],"application/x-tar":["tgz"],"application/vnd.openxmlformats-officedocument.spreadsheetml.template":["xltx"],"application/x-gzip":["gz"],"text/javascript":["js"],"text/html":["html","htm"],"application/vnd.openxmlformats-officedocument.wordprocessingml.template":["dotx"],"image/x-icon":["ico"],"application/x-compressed-zip":["zip"],"application/vnd.openxmlformats-officedocument.presentationml.slideshow":["ppsx"],"text/css":["css"],"application/msword":["doc"]};});module.define("@arangodb/simple-query-common",function(exports,module){ /*jshint strict: false */ ////////////////////////////////////////////////////////////////////////////////
/// @brief Arango Simple Query Language
///
/// @file
///
/// DISCLAIMER
///
/// Copyright 2012 triagens GmbH, Cologne, Germany
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///
///     http://www.apache.org/licenses/LICENSE-2.0
///
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// Copyright holder is triAGENS GmbH, Cologne, Germany
///
/// @author Dr. Frank Celler
/// @author Copyright 2012, triAGENS GmbH, Cologne, Germany
////////////////////////////////////////////////////////////////////////////////
var arangodb=require("@arangodb");var ArangoError=arangodb.ArangoError; // forward declaration
var SimpleQueryArray;var SimpleQueryNear;var SimpleQueryWithin;var SimpleQueryWithinRectangle; ////////////////////////////////////////////////////////////////////////////////
/// @brief array query
////////////////////////////////////////////////////////////////////////////////
function GeneralArrayCursor(documents,skip,limit,data){this._documents = documents;this._countTotal = documents.length;this._skip = skip;this._limit = limit;this._cached = false;this._extra = {};var self=this;if(data !== null && data !== undefined && typeof data === 'object'){['stats','warnings','profile'].forEach(function(d){if(data.hasOwnProperty(d)){self._extra[d] = data[d];}});this._cached = data.cached || false;}this.execute();} ////////////////////////////////////////////////////////////////////////////////
/// @brief executes an array query
////////////////////////////////////////////////////////////////////////////////
GeneralArrayCursor.prototype.execute = function(){if(this._skip === null){this._skip = 0;}var len=this._documents.length;var s=0;var e=len; // skip from the beginning
if(0 < this._skip){s = this._skip;if(e < s){s = e;}} // skip from the end
else if(this._skip < 0){var skip=-this._skip;if(skip < e){s = e - skip;}} // apply limit
if(this._limit !== null){if(s + this._limit < e){e = s + this._limit;}}this._current = s;this._stop = e;this._countQuery = e - s;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief print an all query
////////////////////////////////////////////////////////////////////////////////
GeneralArrayCursor.prototype._PRINT = function(context){var text;text = "GeneralArrayCursor([.. " + this._documents.length + " docs .., cached: " + String(this._cached);if(this.hasOwnProperty("_extra") && this._extra.hasOwnProperty("warnings")){for(var j=0;j < this._extra.warnings.length;j++) {text += ", WARNING: " + this._extra.warnings[j].code + " - " + this._extra.warnings[j].message;}}text += "])";if(this._skip !== null && this._skip !== 0){text += ".skip(" + this._skip + ")";}if(this._limit !== null){text += ".limit(" + this._limit + ")";}context.output += text;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief returns all elements of the cursor
////////////////////////////////////////////////////////////////////////////////
GeneralArrayCursor.prototype.toArray = GeneralArrayCursor.prototype.elements = function(){return this._documents;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief return the count of the cursor
////////////////////////////////////////////////////////////////////////////////
GeneralArrayCursor.prototype.count = function(){return this._countTotal;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief return an extra value of the cursor
////////////////////////////////////////////////////////////////////////////////
GeneralArrayCursor.prototype.getExtra = function(){return this._extra || {};}; ////////////////////////////////////////////////////////////////////////////////
/// @brief checks if the cursor is exhausted
////////////////////////////////////////////////////////////////////////////////
GeneralArrayCursor.prototype.hasNext = function(){return this._current < this._stop;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief returns the next result document
////////////////////////////////////////////////////////////////////////////////
GeneralArrayCursor.prototype.next = function(){if(this._current < this._stop){return this._documents[this._current++];}return undefined;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief drops the result
////////////////////////////////////////////////////////////////////////////////
GeneralArrayCursor.prototype.dispose = function(){this._documents = null;this._skip = null;this._limit = null;this._countTotal = null;this._countQuery = null;this._current = null;this._stop = null;this._extra = null;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief simple query
////////////////////////////////////////////////////////////////////////////////
function SimpleQuery(){this._execution = null;this._skip = 0;this._limit = null;this._countQuery = null;this._countTotal = null;this._batchSize = null;} ////////////////////////////////////////////////////////////////////////////////
/// @brief join limits
////////////////////////////////////////////////////////////////////////////////
function joinLimits(query,limit){ // original limit is 0, keep it
if(query._limit === 0){query = query.clone();} // new limit is 0, use it
else if(limit === 0){query = query.clone();query._limit = 0;} // no old limit, use new limit
else if(query._limit === null){query = query.clone();query._limit = limit;} // use the smaller one
else {query = query.clone();if(limit < query._limit){query._limit = limit;}}return query;} ////////////////////////////////////////////////////////////////////////////////
/// @brief clones a query
////////////////////////////////////////////////////////////////////////////////
SimpleQuery.prototype.clone = function(){throw "cannot clone abstract query";}; ////////////////////////////////////////////////////////////////////////////////
/// @brief was docuBlock queryExecute
////////////////////////////////////////////////////////////////////////////////
SimpleQuery.prototype.execute = function(){throw "cannot execute abstract query";}; ////////////////////////////////////////////////////////////////////////////////
/// @brief was docuBlock queryLimit
////////////////////////////////////////////////////////////////////////////////
SimpleQuery.prototype.limit = function(limit){if(this._execution !== null){throw "query is already executing";}if(limit < 0){var err=new ArangoError();err.errorNum = arangodb.ERROR_BAD_PARAMETER;err.errorMessage = "limit must be non-negative";throw err;}return joinLimits(this,limit);}; ////////////////////////////////////////////////////////////////////////////////
/// @brief was docuBlock querySkip
////////////////////////////////////////////////////////////////////////////////
SimpleQuery.prototype.skip = function(skip){var query;var documents;if(skip === undefined || skip === null){skip = 0;}if(this._execution !== null){throw "query is already executing";} // no limit set, use or add skip
if(this._limit === null){query = this.clone();if(this._skip === null || this._skip === 0){query._skip = skip;}else {query._skip += skip;}} // limit already set
else {documents = this.clone().toArray();query = new SimpleQueryArray(documents);query._skip = skip;query._countTotal = documents._countTotal;}return query;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief converts into an array
////////////////////////////////////////////////////////////////////////////////
SimpleQuery.prototype.toArray = function(){var result;this.execute();result = [];while(this.hasNext()) {result.push(this.next());}return result;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief was docuBlock cursorGetBatchSize
////////////////////////////////////////////////////////////////////////////////
SimpleQuery.prototype.getBatchSize = function(){return this._batchSize;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief was docuBlock cursorSetBatchSize
////////////////////////////////////////////////////////////////////////////////
SimpleQuery.prototype.setBatchSize = function(value){if(value >= 1){this._batchSize = value;}}; ////////////////////////////////////////////////////////////////////////////////
/// @brief was docuBlock cursorCount
////////////////////////////////////////////////////////////////////////////////
SimpleQuery.prototype.count = function(applyPagination){this.execute();if(applyPagination === undefined || !applyPagination){return this._countTotal;}return this._countQuery;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief was docuBlock cursorHasNext
////////////////////////////////////////////////////////////////////////////////
SimpleQuery.prototype.hasNext = function(){this.execute();return this._execution.hasNext();}; ////////////////////////////////////////////////////////////////////////////////
/// @brief was docuBlock cursorNext
////////////////////////////////////////////////////////////////////////////////
SimpleQuery.prototype.next = function(){this.execute();return this._execution.next();}; ////////////////////////////////////////////////////////////////////////////////
/// @brief was docuBlock cursorDispose
////////////////////////////////////////////////////////////////////////////////
SimpleQuery.prototype.dispose = function(){if(this._execution !== null){this._execution.dispose();}this._execution = null;this._countQuery = null;this._countTotal = null;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief all query
////////////////////////////////////////////////////////////////////////////////
function SimpleQueryAll(collection){this._collection = collection;}SimpleQueryAll.prototype = new SimpleQuery();SimpleQueryAll.prototype.constructor = SimpleQueryAll; ////////////////////////////////////////////////////////////////////////////////
/// @brief clones an all query
////////////////////////////////////////////////////////////////////////////////
SimpleQueryAll.prototype.clone = function(){var query;query = new SimpleQueryAll(this._collection);query._skip = this._skip;query._limit = this._limit;return query;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief print an all query
////////////////////////////////////////////////////////////////////////////////
SimpleQueryAll.prototype._PRINT = function(context){var text;text = "SimpleQueryAll(" + this._collection.name() + ")";if(this._skip !== null && this._skip !== 0){text += ".skip(" + this._skip + ")";}if(this._limit !== null){text += ".limit(" + this._limit + ")";}context.output += text;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief array query
////////////////////////////////////////////////////////////////////////////////
SimpleQueryArray = function(documents){this._documents = documents;};SimpleQueryArray.prototype = new SimpleQuery();SimpleQueryArray.prototype.constructor = SimpleQueryArray; ////////////////////////////////////////////////////////////////////////////////
/// @brief clones an all query
////////////////////////////////////////////////////////////////////////////////
SimpleQueryArray.prototype.clone = function(){var query;query = new SimpleQueryArray(this._documents);query._skip = this._skip;query._limit = this._limit;return query;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief executes an all query
////////////////////////////////////////////////////////////////////////////////
SimpleQueryArray.prototype.execute = function(){if(this._execution === null){if(this._skip === null){this._skip = 0;}this._execution = new GeneralArrayCursor(this._documents,this._skip,this._limit);}}; ////////////////////////////////////////////////////////////////////////////////
/// @brief print an all query
////////////////////////////////////////////////////////////////////////////////
SimpleQueryArray.prototype._PRINT = function(context){var text;text = "SimpleQueryArray(documents)";if(this._skip !== null && this._skip !== 0){text += ".skip(" + this._skip + ")";}if(this._limit !== null){text += ".limit(" + this._limit + ")";}context.output += text;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief query-by-example
////////////////////////////////////////////////////////////////////////////////
function SimpleQueryByExample(collection,example){this._collection = collection;this._example = example;}SimpleQueryByExample.prototype = new SimpleQuery();SimpleQueryByExample.prototype.constructor = SimpleQueryByExample; ////////////////////////////////////////////////////////////////////////////////
/// @brief clones a query-by-example
////////////////////////////////////////////////////////////////////////////////
SimpleQueryByExample.prototype.clone = function(){var query;query = new SimpleQueryByExample(this._collection,this._example);query._skip = this._skip;query._limit = this._limit;query._type = this._type;query._index = this._index;return query;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief print a query-by-example
////////////////////////////////////////////////////////////////////////////////
SimpleQueryByExample.prototype._PRINT = function(context){var text;text = "SimpleQueryByExample(" + this._collection.name() + ")";if(this._skip !== null && this._skip !== 0){text += ".skip(" + this._skip + ")";}if(this._limit !== null){text += ".limit(" + this._limit + ")";}context.output += text;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief query-by-condition
////////////////////////////////////////////////////////////////////////////////
function SimpleQueryByCondition(collection,condition){this._collection = collection;this._condition = condition;}SimpleQueryByCondition.prototype = new SimpleQuery();SimpleQueryByCondition.prototype.constructor = SimpleQueryByCondition; ////////////////////////////////////////////////////////////////////////////////
/// @brief clones a query-by-condition
////////////////////////////////////////////////////////////////////////////////
SimpleQueryByCondition.prototype.clone = function(){var query;query = new SimpleQueryByCondition(this._collection,this._condition);query._skip = this._skip;query._limit = this._limit;query._type = this._type;query._index = this._index;return query;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief print a query-by-condition
////////////////////////////////////////////////////////////////////////////////
SimpleQueryByCondition.prototype._PRINT = function(context){var text;text = "SimpleQueryByCondition(" + this._collection.name() + ")";if(this._skip !== null && this._skip !== 0){text += ".skip(" + this._skip + ")";}if(this._limit !== null){text += ".limit(" + this._limit + ")";}context.output += text;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief range query
////////////////////////////////////////////////////////////////////////////////
function SimpleQueryRange(collection,attribute,left,right,type){this._collection = collection;this._attribute = attribute;this._left = left;this._right = right;this._type = type;}SimpleQueryRange.prototype = new SimpleQuery();SimpleQueryRange.prototype.constructor = SimpleQueryRange; ////////////////////////////////////////////////////////////////////////////////
/// @brief clones a range query
////////////////////////////////////////////////////////////////////////////////
SimpleQueryRange.prototype.clone = function(){var query;query = new SimpleQueryRange(this._collection,this._attribute,this._left,this._right,this._type);query._skip = this._skip;query._limit = this._limit;return query;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief prints a range query
////////////////////////////////////////////////////////////////////////////////
SimpleQueryRange.prototype._PRINT = function(context){var text;text = "SimpleQueryRange(" + this._collection.name() + ")";if(this._skip !== null && this._skip !== 0){text += ".skip(" + this._skip + ")";}if(this._limit !== null){text += ".limit(" + this._limit + ")";}context.output += text;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief geo index
////////////////////////////////////////////////////////////////////////////////
function SimpleQueryGeo(collection,index){this._collection = collection;this._index = index;} ////////////////////////////////////////////////////////////////////////////////
/// @brief prints a geo index
////////////////////////////////////////////////////////////////////////////////
SimpleQueryGeo.prototype._PRINT = function(context){var text;text = "GeoIndex(" + this._collection.name() + ", " + this._index + ")";context.output += text;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief constructs a near query for an index
////////////////////////////////////////////////////////////////////////////////
SimpleQueryGeo.prototype.near = function(lat,lon){return new SimpleQueryNear(this._collection,lat,lon,this._index);}; ////////////////////////////////////////////////////////////////////////////////
/// @brief constructs a within query for an index
////////////////////////////////////////////////////////////////////////////////
SimpleQueryGeo.prototype.within = function(lat,lon,radius){return new SimpleQueryWithin(this._collection,lat,lon,radius,this._index);}; ////////////////////////////////////////////////////////////////////////////////
/// @brief constructs a within-rectangle query for an index
////////////////////////////////////////////////////////////////////////////////
SimpleQueryGeo.prototype.withinRectangle = function(lat1,lon1,lat2,lon2){return new SimpleQueryWithinRectangle(this._collection,lat1,lon1,lat2,lon2,this._index);}; ////////////////////////////////////////////////////////////////////////////////
/// @brief near query
////////////////////////////////////////////////////////////////////////////////
SimpleQueryNear = function(collection,latitude,longitude,iid){var idx;var i;this._collection = collection;this._latitude = latitude;this._longitude = longitude;this._index = iid === undefined?null:iid;this._distance = null;if(iid === undefined){idx = collection.getIndexes();for(i = 0;i < idx.length;++i) {var index=idx[i];if(index.type === "geo1" || index.type === "geo2"){if(this._index === null){this._index = index.id;}else if(index.id < this._index){this._index = index.id;}}}}if(this._index === null){var err=new ArangoError();err.errorNum = arangodb.ERROR_QUERY_GEO_INDEX_MISSING;err.errorMessage = require("internal").sprintf(arangodb.errors.ERROR_QUERY_GEO_INDEX_MISSING.message,collection.name());throw err;}};SimpleQueryNear.prototype = new SimpleQuery();SimpleQueryNear.prototype.constructor = SimpleQueryNear; ////////////////////////////////////////////////////////////////////////////////
/// @brief clones a near query
////////////////////////////////////////////////////////////////////////////////
SimpleQueryNear.prototype.clone = function(){var query;query = new SimpleQueryNear(this._collection,this._latitude,this._longitude,this._index);query._skip = this._skip;query._limit = this._limit;query._distance = this._distance;return query;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief prints a near query
////////////////////////////////////////////////////////////////////////////////
SimpleQueryNear.prototype._PRINT = function(context){var text;text = "SimpleQueryNear(" + this._collection.name() + ", " + this._latitude + ", " + this._longitude + ", " + this._index + ")";if(this._skip !== null && this._skip !== 0){text += ".skip(" + this._skip + ")";}if(this._limit !== null){text += ".limit(" + this._limit + ")";}context.output += text;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief adds the distance attribute
////////////////////////////////////////////////////////////////////////////////
SimpleQueryNear.prototype.distance = function(attribute){var clone;clone = this.clone();if(attribute){clone._distance = attribute;}else {clone._distance = "distance";}return clone;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief within query
////////////////////////////////////////////////////////////////////////////////
SimpleQueryWithin = function(collection,latitude,longitude,radius,iid){var idx;var i;this._collection = collection;this._latitude = latitude;this._longitude = longitude;this._index = iid === undefined?null:iid;this._radius = radius;this._distance = null;if(iid === undefined){idx = collection.getIndexes();for(i = 0;i < idx.length;++i) {var index=idx[i];if(index.type === "geo1" || index.type === "geo2"){if(this._index === null){this._index = index.id;}else if(index.id < this._index){this._index = index.id;}}}}if(this._index === null){var err=new ArangoError();err.errorNum = arangodb.ERROR_QUERY_GEO_INDEX_MISSING;err.errorMessage = arangodb.errors.ERROR_QUERY_GEO_INDEX_MISSING.message;throw err;}};SimpleQueryWithin.prototype = new SimpleQuery();SimpleQueryWithin.prototype.constructor = SimpleQueryWithin; ////////////////////////////////////////////////////////////////////////////////
/// @brief clones a within query
////////////////////////////////////////////////////////////////////////////////
SimpleQueryWithin.prototype.clone = function(){var query;query = new SimpleQueryWithin(this._collection,this._latitude,this._longitude,this._radius,this._index);query._skip = this._skip;query._limit = this._limit;query._distance = this._distance;return query;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief prints a within query
////////////////////////////////////////////////////////////////////////////////
SimpleQueryWithin.prototype._PRINT = function(context){var text;text = "SimpleQueryWithin(" + this._collection.name() + ", " + this._latitude + ", " + this._longitude + ", " + this._radius + ", " + this._index + ")";if(this._skip !== null && this._skip !== 0){text += ".skip(" + this._skip + ")";}if(this._limit !== null){text += ".limit(" + this._limit + ")";}context.output += text;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief adds the distance attribute
////////////////////////////////////////////////////////////////////////////////
SimpleQueryWithin.prototype.distance = function(attribute){var clone;clone = this.clone();if(attribute){clone._distance = attribute;}else {clone._distance = "distance";}return clone;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief within-rectangle query
////////////////////////////////////////////////////////////////////////////////
SimpleQueryWithinRectangle = function(collection,latitude1,longitude1,latitude2,longitude2,iid){var idx;var i;this._collection = collection;this._latitude1 = latitude1;this._longitude1 = longitude1;this._latitude2 = latitude2;this._longitude2 = longitude2;this._index = iid === undefined?null:iid;if(iid === undefined){idx = collection.getIndexes();for(i = 0;i < idx.length;++i) {var index=idx[i];if(index.type === "geo1" || index.type === "geo2"){if(this._index === null){this._index = index.id;}else if(index.id < this._index){this._index = index.id;}}}}if(this._index === null){var err=new ArangoError();err.errorNum = arangodb.ERROR_QUERY_GEO_INDEX_MISSING;err.errorMessage = arangodb.errors.ERROR_QUERY_GEO_INDEX_MISSING.message;throw err;}};SimpleQueryWithinRectangle.prototype = new SimpleQuery();SimpleQueryWithinRectangle.prototype.constructor = SimpleQueryWithinRectangle; ////////////////////////////////////////////////////////////////////////////////
/// @brief clones a within-rectangle query
////////////////////////////////////////////////////////////////////////////////
SimpleQueryWithinRectangle.prototype.clone = function(){var query;query = new SimpleQueryWithinRectangle(this._collection,this._latitude1,this._longitude1,this._latitude2,this._longitude2,this._index);query._skip = this._skip;query._limit = this._limit;return query;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief prints a within-rectangle query
////////////////////////////////////////////////////////////////////////////////
SimpleQueryWithinRectangle.prototype._PRINT = function(context){var text;text = "SimpleQueryWithinRectangle(" + this._collection.name() + ", " + this._latitude1 + ", " + this._longitude1 + ", " + this._latitude2 + ", " + this._longitude2 + ", " + this._index + ")";if(this._skip !== null && this._skip !== 0){text += ".skip(" + this._skip + ")";}if(this._limit !== null){text += ".limit(" + this._limit + ")";}context.output += text;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief fulltext query
////////////////////////////////////////////////////////////////////////////////
function SimpleQueryFulltext(collection,attribute,query,iid){this._collection = collection;this._attribute = attribute;this._query = query;this._index = iid === undefined?null:iid;if(iid === undefined){var idx=collection.getIndexes();var i;for(i = 0;i < idx.length;++i) {var index=idx[i];if(index.type === "fulltext" && index.fields[0] === attribute){if(this._index === null){this._index = index.id;}else if(index.indexSubstrings && !this._index.indexSubstrings){ // prefer indexes that have substrings indexed
this._index = index.id;}}}}if(this._index === null){var err=new ArangoError();err.errorNum = arangodb.ERROR_QUERY_FULLTEXT_INDEX_MISSING;err.errorMessage = arangodb.errors.ERROR_QUERY_FULLTEXT_INDEX_MISSING.message;throw err;}}SimpleQueryFulltext.prototype = new SimpleQuery();SimpleQueryFulltext.prototype.constructor = SimpleQueryFulltext; ////////////////////////////////////////////////////////////////////////////////
/// @brief clones a fulltext query
////////////////////////////////////////////////////////////////////////////////
SimpleQueryFulltext.prototype.clone = function(){var query;query = new SimpleQueryFulltext(this._collection,this._attribute,this._query,this._index);query._skip = this._skip;query._limit = this._limit;return query;}; ////////////////////////////////////////////////////////////////////////////////
/// @brief prints a fulltext query
////////////////////////////////////////////////////////////////////////////////
SimpleQueryFulltext.prototype._PRINT = function(context){var text;text = "SimpleQueryFulltext(" + this._collection.name() + ", " + this._attribute + ", \"" + this._query + "\")";if(this._skip !== null && this._skip !== 0){text += ".skip(" + this._skip + ")";}if(this._limit !== null){text += ".limit(" + this._limit + ")";}context.output += text;};exports.GeneralArrayCursor = GeneralArrayCursor;exports.SimpleQueryAll = SimpleQueryAll;exports.SimpleQueryArray = SimpleQueryArray;exports.SimpleQueryByExample = SimpleQueryByExample;exports.SimpleQueryByCondition = SimpleQueryByCondition;exports.SimpleQueryRange = SimpleQueryRange;exports.SimpleQueryGeo = SimpleQueryGeo;exports.SimpleQueryNear = SimpleQueryNear;exports.SimpleQueryWithin = SimpleQueryWithin;exports.SimpleQueryWithinRectangle = SimpleQueryWithinRectangle;exports.SimpleQueryFulltext = SimpleQueryFulltext;});module.define("underscore",function(exports,module){ //     Underscore.js 1.8.3
//     http://underscorejs.org
//     (c) 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
//     Underscore may be freely distributed under the MIT license.
(function(){ // Baseline setup
// --------------
// Establish the root object, `window` in the browser, or `exports` on the server.
var root=this; // Save the previous value of the `_` variable.
var previousUnderscore=root._; // Save bytes in the minified (but not gzipped) version:
var ArrayProto=Array.prototype,ObjProto=Object.prototype,FuncProto=Function.prototype; // Create quick reference variables for speed access to core prototypes.
var push=ArrayProto.push,slice=ArrayProto.slice,toString=ObjProto.toString,hasOwnProperty=ObjProto.hasOwnProperty; // All **ECMAScript 5** native function implementations that we hope to use
// are declared here.
var nativeIsArray=Array.isArray,nativeKeys=Object.keys,nativeBind=FuncProto.bind,nativeCreate=Object.create; // Naked function reference for surrogate-prototype-swapping.
var Ctor=function Ctor(){}; // Create a safe reference to the Underscore object for use below.
var _=function _(obj){if(obj instanceof _)return obj;if(!(this instanceof _))return new _(obj);this._wrapped = obj;}; // Export the Underscore object for **Node.js**, with
// backwards-compatibility for the old `require()` API. If we're in
// the browser, add `_` as a global object.
if(typeof exports !== 'undefined'){if(typeof module !== 'undefined' && module.exports){exports = module.exports = _;}exports._ = _;}else {root._ = _;} // Current version.
_.VERSION = '1.8.3'; // Internal function that returns an efficient (for current engines) version
// of the passed-in callback, to be repeatedly applied in other Underscore
// functions.
var optimizeCb=function optimizeCb(func,context,argCount){if(context === void 0)return func;switch(argCount == null?3:argCount){case 1:return function(value){return func.call(context,value);};case 2:return function(value,other){return func.call(context,value,other);};case 3:return function(value,index,collection){return func.call(context,value,index,collection);};case 4:return function(accumulator,value,index,collection){return func.call(context,accumulator,value,index,collection);};}return function(){return func.apply(context,arguments);};}; // A mostly-internal function to generate callbacks that can be applied
// to each element in a collection, returning the desired result — either
// identity, an arbitrary callback, a property matcher, or a property accessor.
var cb=function cb(value,context,argCount){if(value == null)return _.identity;if(_.isFunction(value))return optimizeCb(value,context,argCount);if(_.isObject(value))return _.matcher(value);return _.property(value);};_.iteratee = function(value,context){return cb(value,context,Infinity);}; // An internal function for creating assigner functions.
var createAssigner=function createAssigner(keysFunc,undefinedOnly){return function(obj){var length=arguments.length;if(length < 2 || obj == null)return obj;for(var index=1;index < length;index++) {var source=arguments[index],keys=keysFunc(source),l=keys.length;for(var i=0;i < l;i++) {var key=keys[i];if(!undefinedOnly || obj[key] === void 0)obj[key] = source[key];}}return obj;};}; // An internal function for creating a new object that inherits from another.
var baseCreate=function baseCreate(prototype){if(!_.isObject(prototype))return {};if(nativeCreate)return nativeCreate(prototype);Ctor.prototype = prototype;var result=new Ctor();Ctor.prototype = null;return result;};var property=function property(key){return function(obj){return obj == null?void 0:obj[key];};}; // Helper for collection methods to determine whether a collection
// should be iterated as an array or as an object
// Related: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength
// Avoids a very nasty iOS 8 JIT bug on ARM-64. #2094
var MAX_ARRAY_INDEX=Math.pow(2,53) - 1;var getLength=property('length');var isArrayLike=function isArrayLike(collection){var length=getLength(collection);return typeof length == 'number' && length >= 0 && length <= MAX_ARRAY_INDEX;}; // Collection Functions
// --------------------
// The cornerstone, an `each` implementation, aka `forEach`.
// Handles raw objects in addition to array-likes. Treats all
// sparse array-likes as if they were dense.
_.each = _.forEach = function(obj,iteratee,context){iteratee = optimizeCb(iteratee,context);var i,length;if(isArrayLike(obj)){for(i = 0,length = obj.length;i < length;i++) {iteratee(obj[i],i,obj);}}else {var keys=_.keys(obj);for(i = 0,length = keys.length;i < length;i++) {iteratee(obj[keys[i]],keys[i],obj);}}return obj;}; // Return the results of applying the iteratee to each element.
_.map = _.collect = function(obj,iteratee,context){iteratee = cb(iteratee,context);var keys=!isArrayLike(obj) && _.keys(obj),length=(keys || obj).length,results=Array(length);for(var index=0;index < length;index++) {var currentKey=keys?keys[index]:index;results[index] = iteratee(obj[currentKey],currentKey,obj);}return results;}; // Create a reducing function iterating left or right.
function createReduce(dir){ // Optimized iterator function as using arguments.length
// in the main function will deoptimize the, see #1991.
function iterator(obj,iteratee,memo,keys,index,length){for(;index >= 0 && index < length;index += dir) {var currentKey=keys?keys[index]:index;memo = iteratee(memo,obj[currentKey],currentKey,obj);}return memo;}return function(obj,iteratee,memo,context){iteratee = optimizeCb(iteratee,context,4);var keys=!isArrayLike(obj) && _.keys(obj),length=(keys || obj).length,index=dir > 0?0:length - 1; // Determine the initial value if none is provided.
if(arguments.length < 3){memo = obj[keys?keys[index]:index];index += dir;}return iterator(obj,iteratee,memo,keys,index,length);};} // **Reduce** builds up a single result from a list of values, aka `inject`,
// or `foldl`.
_.reduce = _.foldl = _.inject = createReduce(1); // The right-associative version of reduce, also known as `foldr`.
_.reduceRight = _.foldr = createReduce(-1); // Return the first value which passes a truth test. Aliased as `detect`.
_.find = _.detect = function(obj,predicate,context){var key;if(isArrayLike(obj)){key = _.findIndex(obj,predicate,context);}else {key = _.findKey(obj,predicate,context);}if(key !== void 0 && key !== -1)return obj[key];}; // Return all the elements that pass a truth test.
// Aliased as `select`.
_.filter = _.select = function(obj,predicate,context){var results=[];predicate = cb(predicate,context);_.each(obj,function(value,index,list){if(predicate(value,index,list))results.push(value);});return results;}; // Return all the elements for which a truth test fails.
_.reject = function(obj,predicate,context){return _.filter(obj,_.negate(cb(predicate)),context);}; // Determine whether all of the elements match a truth test.
// Aliased as `all`.
_.every = _.all = function(obj,predicate,context){predicate = cb(predicate,context);var keys=!isArrayLike(obj) && _.keys(obj),length=(keys || obj).length;for(var index=0;index < length;index++) {var currentKey=keys?keys[index]:index;if(!predicate(obj[currentKey],currentKey,obj))return false;}return true;}; // Determine if at least one element in the object matches a truth test.
// Aliased as `any`.
_.some = _.any = function(obj,predicate,context){predicate = cb(predicate,context);var keys=!isArrayLike(obj) && _.keys(obj),length=(keys || obj).length;for(var index=0;index < length;index++) {var currentKey=keys?keys[index]:index;if(predicate(obj[currentKey],currentKey,obj))return true;}return false;}; // Determine if the array or object contains a given item (using `===`).
// Aliased as `includes` and `include`.
_.contains = _.includes = _.include = function(obj,item,fromIndex,guard){if(!isArrayLike(obj))obj = _.values(obj);if(typeof fromIndex != 'number' || guard)fromIndex = 0;return _.indexOf(obj,item,fromIndex) >= 0;}; // Invoke a method (with arguments) on every item in a collection.
_.invoke = function(obj,method){var args=slice.call(arguments,2);var isFunc=_.isFunction(method);return _.map(obj,function(value){var func=isFunc?method:value[method];return func == null?func:func.apply(value,args);});}; // Convenience version of a common use case of `map`: fetching a property.
_.pluck = function(obj,key){return _.map(obj,_.property(key));}; // Convenience version of a common use case of `filter`: selecting only objects
// containing specific `key:value` pairs.
_.where = function(obj,attrs){return _.filter(obj,_.matcher(attrs));}; // Convenience version of a common use case of `find`: getting the first object
// containing specific `key:value` pairs.
_.findWhere = function(obj,attrs){return _.find(obj,_.matcher(attrs));}; // Return the maximum element (or element-based computation).
_.max = function(obj,iteratee,context){var result=-Infinity,lastComputed=-Infinity,value,computed;if(iteratee == null && obj != null){obj = isArrayLike(obj)?obj:_.values(obj);for(var i=0,length=obj.length;i < length;i++) {value = obj[i];if(value > result){result = value;}}}else {iteratee = cb(iteratee,context);_.each(obj,function(value,index,list){computed = iteratee(value,index,list);if(computed > lastComputed || computed === -Infinity && result === -Infinity){result = value;lastComputed = computed;}});}return result;}; // Return the minimum element (or element-based computation).
_.min = function(obj,iteratee,context){var result=Infinity,lastComputed=Infinity,value,computed;if(iteratee == null && obj != null){obj = isArrayLike(obj)?obj:_.values(obj);for(var i=0,length=obj.length;i < length;i++) {value = obj[i];if(value < result){result = value;}}}else {iteratee = cb(iteratee,context);_.each(obj,function(value,index,list){computed = iteratee(value,index,list);if(computed < lastComputed || computed === Infinity && result === Infinity){result = value;lastComputed = computed;}});}return result;}; // Shuffle a collection, using the modern version of the
// [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher–Yates_shuffle).
_.shuffle = function(obj){var set=isArrayLike(obj)?obj:_.values(obj);var length=set.length;var shuffled=Array(length);for(var index=0,rand;index < length;index++) {rand = _.random(0,index);if(rand !== index)shuffled[index] = shuffled[rand];shuffled[rand] = set[index];}return shuffled;}; // Sample **n** random values from a collection.
// If **n** is not specified, returns a single random element.
// The internal `guard` argument allows it to work with `map`.
_.sample = function(obj,n,guard){if(n == null || guard){if(!isArrayLike(obj))obj = _.values(obj);return obj[_.random(obj.length - 1)];}return _.shuffle(obj).slice(0,Math.max(0,n));}; // Sort the object's values by a criterion produced by an iteratee.
_.sortBy = function(obj,iteratee,context){iteratee = cb(iteratee,context);return _.pluck(_.map(obj,function(value,index,list){return {value:value,index:index,criteria:iteratee(value,index,list)};}).sort(function(left,right){var a=left.criteria;var b=right.criteria;if(a !== b){if(a > b || a === void 0)return 1;if(a < b || b === void 0)return -1;}return left.index - right.index;}),'value');}; // An internal function used for aggregate "group by" operations.
var group=function group(behavior){return function(obj,iteratee,context){var result={};iteratee = cb(iteratee,context);_.each(obj,function(value,index){var key=iteratee(value,index,obj);behavior(result,value,key);});return result;};}; // Groups the object's values by a criterion. Pass either a string attribute
// to group by, or a function that returns the criterion.
_.groupBy = group(function(result,value,key){if(_.has(result,key))result[key].push(value);else result[key] = [value];}); // Indexes the object's values by a criterion, similar to `groupBy`, but for
// when you know that your index values will be unique.
_.indexBy = group(function(result,value,key){result[key] = value;}); // Counts instances of an object that group by a certain criterion. Pass
// either a string attribute to count by, or a function that returns the
// criterion.
_.countBy = group(function(result,value,key){if(_.has(result,key))result[key]++;else result[key] = 1;}); // Safely create a real, live array from anything iterable.
_.toArray = function(obj){if(!obj)return [];if(_.isArray(obj))return slice.call(obj);if(isArrayLike(obj))return _.map(obj,_.identity);return _.values(obj);}; // Return the number of elements in an object.
_.size = function(obj){if(obj == null)return 0;return isArrayLike(obj)?obj.length:_.keys(obj).length;}; // Split a collection into two arrays: one whose elements all satisfy the given
// predicate, and one whose elements all do not satisfy the predicate.
_.partition = function(obj,predicate,context){predicate = cb(predicate,context);var pass=[],fail=[];_.each(obj,function(value,key,obj){(predicate(value,key,obj)?pass:fail).push(value);});return [pass,fail];}; // Array Functions
// ---------------
// Get the first element of an array. Passing **n** will return the first N
// values in the array. Aliased as `head` and `take`. The **guard** check
// allows it to work with `_.map`.
_.first = _.head = _.take = function(array,n,guard){if(array == null)return void 0;if(n == null || guard)return array[0];return _.initial(array,array.length - n);}; // Returns everything but the last entry of the array. Especially useful on
// the arguments object. Passing **n** will return all the values in
// the array, excluding the last N.
_.initial = function(array,n,guard){return slice.call(array,0,Math.max(0,array.length - (n == null || guard?1:n)));}; // Get the last element of an array. Passing **n** will return the last N
// values in the array.
_.last = function(array,n,guard){if(array == null)return void 0;if(n == null || guard)return array[array.length - 1];return _.rest(array,Math.max(0,array.length - n));}; // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.
// Especially useful on the arguments object. Passing an **n** will return
// the rest N values in the array.
_.rest = _.tail = _.drop = function(array,n,guard){return slice.call(array,n == null || guard?1:n);}; // Trim out all falsy values from an array.
_.compact = function(array){return _.filter(array,_.identity);}; // Internal implementation of a recursive `flatten` function.
var flatten=function flatten(input,shallow,strict,startIndex){var output=[],idx=0;for(var i=startIndex || 0,length=getLength(input);i < length;i++) {var value=input[i];if(isArrayLike(value) && (_.isArray(value) || _.isArguments(value))){ //flatten current level of array or arguments object
if(!shallow)value = flatten(value,shallow,strict);var j=0,len=value.length;output.length += len;while(j < len) {output[idx++] = value[j++];}}else if(!strict){output[idx++] = value;}}return output;}; // Flatten out an array, either recursively (by default), or just one level.
_.flatten = function(array,shallow){return flatten(array,shallow,false);}; // Return a version of the array that does not contain the specified value(s).
_.without = function(array){return _.difference(array,slice.call(arguments,1));}; // Produce a duplicate-free version of the array. If the array has already
// been sorted, you have the option of using a faster algorithm.
// Aliased as `unique`.
_.uniq = _.unique = function(array,isSorted,iteratee,context){if(!_.isBoolean(isSorted)){context = iteratee;iteratee = isSorted;isSorted = false;}if(iteratee != null)iteratee = cb(iteratee,context);var result=[];var seen=[];for(var i=0,length=getLength(array);i < length;i++) {var value=array[i],computed=iteratee?iteratee(value,i,array):value;if(isSorted){if(!i || seen !== computed)result.push(value);seen = computed;}else if(iteratee){if(!_.contains(seen,computed)){seen.push(computed);result.push(value);}}else if(!_.contains(result,value)){result.push(value);}}return result;}; // Produce an array that contains the union: each distinct element from all of
// the passed-in arrays.
_.union = function(){return _.uniq(flatten(arguments,true,true));}; // Produce an array that contains every item shared between all the
// passed-in arrays.
_.intersection = function(array){var result=[];var argsLength=arguments.length;for(var i=0,length=getLength(array);i < length;i++) {var item=array[i];if(_.contains(result,item))continue;for(var j=1;j < argsLength;j++) {if(!_.contains(arguments[j],item))break;}if(j === argsLength)result.push(item);}return result;}; // Take the difference between one array and a number of other arrays.
// Only the elements present in just the first array will remain.
_.difference = function(array){var rest=flatten(arguments,true,true,1);return _.filter(array,function(value){return !_.contains(rest,value);});}; // Zip together multiple lists into a single array -- elements that share
// an index go together.
_.zip = function(){return _.unzip(arguments);}; // Complement of _.zip. Unzip accepts an array of arrays and groups
// each array's elements on shared indices
_.unzip = function(array){var length=array && _.max(array,getLength).length || 0;var result=Array(length);for(var index=0;index < length;index++) {result[index] = _.pluck(array,index);}return result;}; // Converts lists into objects. Pass either a single array of `[key, value]`
// pairs, or two parallel arrays of the same length -- one of keys, and one of
// the corresponding values.
_.object = function(list,values){var result={};for(var i=0,length=getLength(list);i < length;i++) {if(values){result[list[i]] = values[i];}else {result[list[i][0]] = list[i][1];}}return result;}; // Generator function to create the findIndex and findLastIndex functions
function createPredicateIndexFinder(dir){return function(array,predicate,context){predicate = cb(predicate,context);var length=getLength(array);var index=dir > 0?0:length - 1;for(;index >= 0 && index < length;index += dir) {if(predicate(array[index],index,array))return index;}return -1;};} // Returns the first index on an array-like that passes a predicate test
_.findIndex = createPredicateIndexFinder(1);_.findLastIndex = createPredicateIndexFinder(-1); // Use a comparator function to figure out the smallest index at which
// an object should be inserted so as to maintain order. Uses binary search.
_.sortedIndex = function(array,obj,iteratee,context){iteratee = cb(iteratee,context,1);var value=iteratee(obj);var low=0,high=getLength(array);while(low < high) {var mid=Math.floor((low + high) / 2);if(iteratee(array[mid]) < value)low = mid + 1;else high = mid;}return low;}; // Generator function to create the indexOf and lastIndexOf functions
function createIndexFinder(dir,predicateFind,sortedIndex){return function(array,item,idx){var i=0,length=getLength(array);if(typeof idx == 'number'){if(dir > 0){i = idx >= 0?idx:Math.max(idx + length,i);}else {length = idx >= 0?Math.min(idx + 1,length):idx + length + 1;}}else if(sortedIndex && idx && length){idx = sortedIndex(array,item);return array[idx] === item?idx:-1;}if(item !== item){idx = predicateFind(slice.call(array,i,length),_.isNaN);return idx >= 0?idx + i:-1;}for(idx = dir > 0?i:length - 1;idx >= 0 && idx < length;idx += dir) {if(array[idx] === item)return idx;}return -1;};} // Return the position of the first occurrence of an item in an array,
// or -1 if the item is not included in the array.
// If the array is large and already in sort order, pass `true`
// for **isSorted** to use binary search.
_.indexOf = createIndexFinder(1,_.findIndex,_.sortedIndex);_.lastIndexOf = createIndexFinder(-1,_.findLastIndex); // Generate an integer Array containing an arithmetic progression. A port of
// the native Python `range()` function. See
// [the Python documentation](http://docs.python.org/library/functions.html#range).
_.range = function(start,stop,step){if(stop == null){stop = start || 0;start = 0;}step = step || 1;var length=Math.max(Math.ceil((stop - start) / step),0);var range=Array(length);for(var idx=0;idx < length;idx++,start += step) {range[idx] = start;}return range;}; // Function (ahem) Functions
// ------------------
// Determines whether to execute a function as a constructor
// or a normal function with the provided arguments
var executeBound=function executeBound(sourceFunc,boundFunc,context,callingContext,args){if(!(callingContext instanceof boundFunc))return sourceFunc.apply(context,args);var self=baseCreate(sourceFunc.prototype);var result=sourceFunc.apply(self,args);if(_.isObject(result))return result;return self;}; // Create a function bound to a given object (assigning `this`, and arguments,
// optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if
// available.
_.bind = function(func,context){if(nativeBind && func.bind === nativeBind)return nativeBind.apply(func,slice.call(arguments,1));if(!_.isFunction(func))throw new TypeError('Bind must be called on a function');var args=slice.call(arguments,2);var bound=function bound(){return executeBound(func,bound,context,this,args.concat(slice.call(arguments)));};return bound;}; // Partially apply a function by creating a version that has had some of its
// arguments pre-filled, without changing its dynamic `this` context. _ acts
// as a placeholder, allowing any combination of arguments to be pre-filled.
_.partial = function(func){var boundArgs=slice.call(arguments,1);var bound=function bound(){var position=0,length=boundArgs.length;var args=Array(length);for(var i=0;i < length;i++) {args[i] = boundArgs[i] === _?arguments[position++]:boundArgs[i];}while(position < arguments.length) args.push(arguments[position++]);return executeBound(func,bound,this,this,args);};return bound;}; // Bind a number of an object's methods to that object. Remaining arguments
// are the method names to be bound. Useful for ensuring that all callbacks
// defined on an object belong to it.
_.bindAll = function(obj){var i,length=arguments.length,key;if(length <= 1)throw new Error('bindAll must be passed function names');for(i = 1;i < length;i++) {key = arguments[i];obj[key] = _.bind(obj[key],obj);}return obj;}; // Memoize an expensive function by storing its results.
_.memoize = function(func,hasher){var memoize=function memoize(key){var cache=memoize.cache;var address='' + (hasher?hasher.apply(this,arguments):key);if(!_.has(cache,address))cache[address] = func.apply(this,arguments);return cache[address];};memoize.cache = {};return memoize;}; // Delays a function for the given number of milliseconds, and then calls
// it with the arguments supplied.
_.delay = function(func,wait){var args=slice.call(arguments,2);return setTimeout(function(){return func.apply(null,args);},wait);}; // Defers a function, scheduling it to run after the current call stack has
// cleared.
_.defer = _.partial(_.delay,_,1); // Returns a function, that, when invoked, will only be triggered at most once
// during a given window of time. Normally, the throttled function will run
// as much as it can, without ever going more than once per `wait` duration;
// but if you'd like to disable the execution on the leading edge, pass
// `{leading: false}`. To disable execution on the trailing edge, ditto.
_.throttle = function(func,wait,options){var context,args,result;var timeout=null;var previous=0;if(!options)options = {};var later=function later(){previous = options.leading === false?0:_.now();timeout = null;result = func.apply(context,args);if(!timeout)context = args = null;};return function(){var now=_.now();if(!previous && options.leading === false)previous = now;var remaining=wait - (now - previous);context = this;args = arguments;if(remaining <= 0 || remaining > wait){if(timeout){clearTimeout(timeout);timeout = null;}previous = now;result = func.apply(context,args);if(!timeout)context = args = null;}else if(!timeout && options.trailing !== false){timeout = setTimeout(later,remaining);}return result;};}; // Returns a function, that, as long as it continues to be invoked, will not
// be triggered. The function will be called after it stops being called for
// N milliseconds. If `immediate` is passed, trigger the function on the
// leading edge, instead of the trailing.
_.debounce = function(func,wait,immediate){var timeout,args,context,timestamp,result;var later=function later(){var last=_.now() - timestamp;if(last < wait && last >= 0){timeout = setTimeout(later,wait - last);}else {timeout = null;if(!immediate){result = func.apply(context,args);if(!timeout)context = args = null;}}};return function(){context = this;args = arguments;timestamp = _.now();var callNow=immediate && !timeout;if(!timeout)timeout = setTimeout(later,wait);if(callNow){result = func.apply(context,args);context = args = null;}return result;};}; // Returns the first function passed as an argument to the second,
// allowing you to adjust arguments, run code before and after, and
// conditionally execute the original function.
_.wrap = function(func,wrapper){return _.partial(wrapper,func);}; // Returns a negated version of the passed-in predicate.
_.negate = function(predicate){return function(){return !predicate.apply(this,arguments);};}; // Returns a function that is the composition of a list of functions, each
// consuming the return value of the function that follows.
_.compose = function(){var args=arguments;var start=args.length - 1;return function(){var i=start;var result=args[start].apply(this,arguments);while(i--) result = args[i].call(this,result);return result;};}; // Returns a function that will only be executed on and after the Nth call.
_.after = function(times,func){return function(){if(--times < 1){return func.apply(this,arguments);}};}; // Returns a function that will only be executed up to (but not including) the Nth call.
_.before = function(times,func){var memo;return function(){if(--times > 0){memo = func.apply(this,arguments);}if(times <= 1)func = null;return memo;};}; // Returns a function that will be executed at most one time, no matter how
// often you call it. Useful for lazy initialization.
_.once = _.partial(_.before,2); // Object Functions
// ----------------
// Keys in IE < 9 that won't be iterated by `for key in ...` and thus missed.
var hasEnumBug=!({toString:null}).propertyIsEnumerable('toString');var nonEnumerableProps=['valueOf','isPrototypeOf','toString','propertyIsEnumerable','hasOwnProperty','toLocaleString'];function collectNonEnumProps(obj,keys){var nonEnumIdx=nonEnumerableProps.length;var constructor=obj.constructor;var proto=_.isFunction(constructor) && constructor.prototype || ObjProto; // Constructor is a special case.
var prop='constructor';if(_.has(obj,prop) && !_.contains(keys,prop))keys.push(prop);while(nonEnumIdx--) {prop = nonEnumerableProps[nonEnumIdx];if(prop in obj && obj[prop] !== proto[prop] && !_.contains(keys,prop)){keys.push(prop);}}} // Retrieve the names of an object's own properties.
// Delegates to **ECMAScript 5**'s native `Object.keys`
_.keys = function(obj){if(!_.isObject(obj))return [];if(nativeKeys)return nativeKeys(obj);var keys=[];for(var key in obj) if(_.has(obj,key))keys.push(key); // Ahem, IE < 9.
if(hasEnumBug)collectNonEnumProps(obj,keys);return keys;}; // Retrieve all the property names of an object.
_.allKeys = function(obj){if(!_.isObject(obj))return [];var keys=[];for(var key in obj) keys.push(key); // Ahem, IE < 9.
if(hasEnumBug)collectNonEnumProps(obj,keys);return keys;}; // Retrieve the values of an object's properties.
_.values = function(obj){var keys=_.keys(obj);var length=keys.length;var values=Array(length);for(var i=0;i < length;i++) {values[i] = obj[keys[i]];}return values;}; // Returns the results of applying the iteratee to each element of the object
// In contrast to _.map it returns an object
_.mapObject = function(obj,iteratee,context){iteratee = cb(iteratee,context);var keys=_.keys(obj),length=keys.length,results={},currentKey;for(var index=0;index < length;index++) {currentKey = keys[index];results[currentKey] = iteratee(obj[currentKey],currentKey,obj);}return results;}; // Convert an object into a list of `[key, value]` pairs.
_.pairs = function(obj){var keys=_.keys(obj);var length=keys.length;var pairs=Array(length);for(var i=0;i < length;i++) {pairs[i] = [keys[i],obj[keys[i]]];}return pairs;}; // Invert the keys and values of an object. The values must be serializable.
_.invert = function(obj){var result={};var keys=_.keys(obj);for(var i=0,length=keys.length;i < length;i++) {result[obj[keys[i]]] = keys[i];}return result;}; // Return a sorted list of the function names available on the object.
// Aliased as `methods`
_.functions = _.methods = function(obj){var names=[];for(var key in obj) {if(_.isFunction(obj[key]))names.push(key);}return names.sort();}; // Extend a given object with all the properties in passed-in object(s).
_.extend = createAssigner(_.allKeys); // Assigns a given object with all the own properties in the passed-in object(s)
// (https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)
_.extendOwn = _.assign = createAssigner(_.keys); // Returns the first key on an object that passes a predicate test
_.findKey = function(obj,predicate,context){predicate = cb(predicate,context);var keys=_.keys(obj),key;for(var i=0,length=keys.length;i < length;i++) {key = keys[i];if(predicate(obj[key],key,obj))return key;}}; // Return a copy of the object only containing the whitelisted properties.
_.pick = function(object,oiteratee,context){var result={},obj=object,iteratee,keys;if(obj == null)return result;if(_.isFunction(oiteratee)){keys = _.allKeys(obj);iteratee = optimizeCb(oiteratee,context);}else {keys = flatten(arguments,false,false,1);iteratee = function(value,key,obj){return key in obj;};obj = Object(obj);}for(var i=0,length=keys.length;i < length;i++) {var key=keys[i];var value=obj[key];if(iteratee(value,key,obj))result[key] = value;}return result;}; // Return a copy of the object without the blacklisted properties.
_.omit = function(obj,iteratee,context){if(_.isFunction(iteratee)){iteratee = _.negate(iteratee);}else {var keys=_.map(flatten(arguments,false,false,1),String);iteratee = function(value,key){return !_.contains(keys,key);};}return _.pick(obj,iteratee,context);}; // Fill in a given object with default properties.
_.defaults = createAssigner(_.allKeys,true); // Creates an object that inherits from the given prototype object.
// If additional properties are provided then they will be added to the
// created object.
_.create = function(prototype,props){var result=baseCreate(prototype);if(props)_.extendOwn(result,props);return result;}; // Create a (shallow-cloned) duplicate of an object.
_.clone = function(obj){if(!_.isObject(obj))return obj;return _.isArray(obj)?obj.slice():_.extend({},obj);}; // Invokes interceptor with the obj, and then returns obj.
// The primary purpose of this method is to "tap into" a method chain, in
// order to perform operations on intermediate results within the chain.
_.tap = function(obj,interceptor){interceptor(obj);return obj;}; // Returns whether an object has a given set of `key:value` pairs.
_.isMatch = function(object,attrs){var keys=_.keys(attrs),length=keys.length;if(object == null)return !length;var obj=Object(object);for(var i=0;i < length;i++) {var key=keys[i];if(attrs[key] !== obj[key] || !(key in obj))return false;}return true;}; // Internal recursive comparison function for `isEqual`.
var eq=function eq(a,b,aStack,bStack){ // Identical objects are equal. `0 === -0`, but they aren't identical.
// See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).
if(a === b)return a !== 0 || 1 / a === 1 / b; // A strict comparison is necessary because `null == undefined`.
if(a == null || b == null)return a === b; // Unwrap any wrapped objects.
if(a instanceof _)a = a._wrapped;if(b instanceof _)b = b._wrapped; // Compare `[[Class]]` names.
var className=toString.call(a);if(className !== toString.call(b))return false;switch(className){ // Strings, numbers, regular expressions, dates, and booleans are compared by value.
case '[object RegExp]': // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')
case '[object String]': // Primitives and their corresponding object wrappers are equivalent; thus, `"5"` is
// equivalent to `new String("5")`.
return '' + a === '' + b;case '[object Number]': // `NaN`s are equivalent, but non-reflexive.
// Object(NaN) is equivalent to NaN
if(+a !== +a)return +b !== +b; // An `egal` comparison is performed for other numeric values.
return +a === 0?1 / +a === 1 / b:+a === +b;case '[object Date]':case '[object Boolean]': // Coerce dates and booleans to numeric primitive values. Dates are compared by their
// millisecond representations. Note that invalid dates with millisecond representations
// of `NaN` are not equivalent.
return +a === +b;}var areArrays=className === '[object Array]';if(!areArrays){if(typeof a != 'object' || typeof b != 'object')return false; // Objects with different constructors are not equivalent, but `Object`s or `Array`s
// from different frames are.
var aCtor=a.constructor,bCtor=b.constructor;if(aCtor !== bCtor && !(_.isFunction(aCtor) && aCtor instanceof aCtor && _.isFunction(bCtor) && bCtor instanceof bCtor) && ('constructor' in a && 'constructor' in b)){return false;}} // Assume equality for cyclic structures. The algorithm for detecting cyclic
// structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.
// Initializing stack of traversed objects.
// It's done here since we only need them for objects and arrays comparison.
aStack = aStack || [];bStack = bStack || [];var length=aStack.length;while(length--) { // Linear search. Performance is inversely proportional to the number of
// unique nested structures.
if(aStack[length] === a)return bStack[length] === b;} // Add the first object to the stack of traversed objects.
aStack.push(a);bStack.push(b); // Recursively compare objects and arrays.
if(areArrays){ // Compare array lengths to determine if a deep comparison is necessary.
length = a.length;if(length !== b.length)return false; // Deep compare the contents, ignoring non-numeric properties.
while(length--) {if(!eq(a[length],b[length],aStack,bStack))return false;}}else { // Deep compare objects.
var keys=_.keys(a),key;length = keys.length; // Ensure that both objects contain the same number of properties before comparing deep equality.
if(_.keys(b).length !== length)return false;while(length--) { // Deep compare each member
key = keys[length];if(!(_.has(b,key) && eq(a[key],b[key],aStack,bStack)))return false;}} // Remove the first object from the stack of traversed objects.
aStack.pop();bStack.pop();return true;}; // Perform a deep comparison to check if two objects are equal.
_.isEqual = function(a,b){return eq(a,b);}; // Is a given array, string, or object empty?
// An "empty" object has no enumerable own-properties.
_.isEmpty = function(obj){if(obj == null)return true;if(isArrayLike(obj) && (_.isArray(obj) || _.isString(obj) || _.isArguments(obj)))return obj.length === 0;return _.keys(obj).length === 0;}; // Is a given value a DOM element?
_.isElement = function(obj){return !!(obj && obj.nodeType === 1);}; // Is a given value an array?
// Delegates to ECMA5's native Array.isArray
_.isArray = nativeIsArray || function(obj){return toString.call(obj) === '[object Array]';}; // Is a given variable an object?
_.isObject = function(obj){var type=typeof obj;return type === 'function' || type === 'object' && !!obj;}; // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp, isError.
_.each(['Arguments','Function','String','Number','Date','RegExp','Error'],function(name){_['is' + name] = function(obj){return toString.call(obj) === '[object ' + name + ']';};}); // Define a fallback version of the method in browsers (ahem, IE < 9), where
// there isn't any inspectable "Arguments" type.
if(!_.isArguments(arguments)){_.isArguments = function(obj){return _.has(obj,'callee');};} // Optimize `isFunction` if appropriate. Work around some typeof bugs in old v8,
// IE 11 (#1621), and in Safari 8 (#1929).
if(typeof /./ != 'function' && typeof Int8Array != 'object'){_.isFunction = function(obj){return typeof obj == 'function' || false;};} // Is a given object a finite number?
_.isFinite = function(obj){return isFinite(obj) && !isNaN(parseFloat(obj));}; // Is the given value `NaN`? (NaN is the only number which does not equal itself).
_.isNaN = function(obj){return _.isNumber(obj) && obj !== +obj;}; // Is a given value a boolean?
_.isBoolean = function(obj){return obj === true || obj === false || toString.call(obj) === '[object Boolean]';}; // Is a given value equal to null?
_.isNull = function(obj){return obj === null;}; // Is a given variable undefined?
_.isUndefined = function(obj){return obj === void 0;}; // Shortcut function for checking if an object has a given property directly
// on itself (in other words, not on a prototype).
_.has = function(obj,key){return obj != null && hasOwnProperty.call(obj,key);}; // Utility Functions
// -----------------
// Run Underscore.js in *noConflict* mode, returning the `_` variable to its
// previous owner. Returns a reference to the Underscore object.
_.noConflict = function(){root._ = previousUnderscore;return this;}; // Keep the identity function around for default iteratees.
_.identity = function(value){return value;}; // Predicate-generating functions. Often useful outside of Underscore.
_.constant = function(value){return function(){return value;};};_.noop = function(){};_.property = property; // Generates a function for a given object that returns a given property.
_.propertyOf = function(obj){return obj == null?function(){}:function(key){return obj[key];};}; // Returns a predicate for checking whether an object has a given set of
// `key:value` pairs.
_.matcher = _.matches = function(attrs){attrs = _.extendOwn({},attrs);return function(obj){return _.isMatch(obj,attrs);};}; // Run a function **n** times.
_.times = function(n,iteratee,context){var accum=Array(Math.max(0,n));iteratee = optimizeCb(iteratee,context,1);for(var i=0;i < n;i++) accum[i] = iteratee(i);return accum;}; // Return a random integer between min and max (inclusive).
_.random = function(min,max){if(max == null){max = min;min = 0;}return min + Math.floor(Math.random() * (max - min + 1));}; // A (possibly faster) way to get the current timestamp as an integer.
_.now = Date.now || function(){return new Date().getTime();}; // List of HTML entities for escaping.
var escapeMap={'&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;',"'":'&#x27;','`':'&#x60;'};var unescapeMap=_.invert(escapeMap); // Functions for escaping and unescaping strings to/from HTML interpolation.
var createEscaper=function createEscaper(map){var escaper=function escaper(match){return map[match];}; // Regexes for identifying a key that needs to be escaped
var source='(?:' + _.keys(map).join('|') + ')';var testRegexp=RegExp(source);var replaceRegexp=RegExp(source,'g');return function(string){string = string == null?'':'' + string;return testRegexp.test(string)?string.replace(replaceRegexp,escaper):string;};};_.escape = createEscaper(escapeMap);_.unescape = createEscaper(unescapeMap); // If the value of the named `property` is a function then invoke it with the
// `object` as context; otherwise, return it.
_.result = function(object,property,fallback){var value=object == null?void 0:object[property];if(value === void 0){value = fallback;}return _.isFunction(value)?value.call(object):value;}; // Generate a unique integer id (unique within the entire client session).
// Useful for temporary DOM ids.
var idCounter=0;_.uniqueId = function(prefix){var id=++idCounter + '';return prefix?prefix + id:id;}; // By default, Underscore uses ERB-style template delimiters, change the
// following template settings to use alternative delimiters.
_.templateSettings = {evaluate:/<%([\s\S]+?)%>/g,interpolate:/<%=([\s\S]+?)%>/g,escape:/<%-([\s\S]+?)%>/g}; // When customizing `templateSettings`, if you don't want to define an
// interpolation, evaluation or escaping regex, we need one that is
// guaranteed not to match.
var noMatch=/(.)^/; // Certain characters need to be escaped so that they can be put into a
// string literal.
var escapes={"'":"'",'\\':'\\','\r':'r','\n':'n','\u2028':'u2028','\u2029':'u2029'};var escaper=/\\|'|\r|\n|\u2028|\u2029/g;var escapeChar=function escapeChar(match){return '\\' + escapes[match];}; // JavaScript micro-templating, similar to John Resig's implementation.
// Underscore templating handles arbitrary delimiters, preserves whitespace,
// and correctly escapes quotes within interpolated code.
// NB: `oldSettings` only exists for backwards compatibility.
_.template = function(text,settings,oldSettings){if(!settings && oldSettings)settings = oldSettings;settings = _.defaults({},settings,_.templateSettings); // Combine delimiters into one regular expression via alternation.
var matcher=RegExp([(settings.escape || noMatch).source,(settings.interpolate || noMatch).source,(settings.evaluate || noMatch).source].join('|') + '|$','g'); // Compile the template source, escaping string literals appropriately.
var index=0;var source="__p+='";text.replace(matcher,function(match,escape,interpolate,evaluate,offset){source += text.slice(index,offset).replace(escaper,escapeChar);index = offset + match.length;if(escape){source += "'+\n((__t=(" + escape + "))==null?'':_.escape(__t))+\n'";}else if(interpolate){source += "'+\n((__t=(" + interpolate + "))==null?'':__t)+\n'";}else if(evaluate){source += "';\n" + evaluate + "\n__p+='";} // Adobe VMs need the match returned to produce the correct offest.
return match;});source += "';\n"; // If a variable is not specified, place data values in local scope.
if(!settings.variable)source = 'with(obj||{}){\n' + source + '}\n';source = "var __t,__p='',__j=Array.prototype.join," + "print=function(){__p+=__j.call(arguments,'');};\n" + source + 'return __p;\n';try{var render=new Function(settings.variable || 'obj','_',source);}catch(e) {e.source = source;throw e;}var template=function template(data){return render.call(this,data,_);}; // Provide the compiled source as a convenience for precompilation.
var argument=settings.variable || 'obj';template.source = 'function(' + argument + '){\n' + source + '}';return template;}; // Add a "chain" function. Start chaining a wrapped Underscore object.
_.chain = function(obj){var instance=_(obj);instance._chain = true;return instance;}; // OOP
// ---------------
// If Underscore is called as a function, it returns a wrapped object that
// can be used OO-style. This wrapper holds altered versions of all the
// underscore functions. Wrapped objects may be chained.
// Helper function to continue chaining intermediate results.
var result=function result(instance,obj){return instance._chain?_(obj).chain():obj;}; // Add your own custom functions to the Underscore object.
_.mixin = function(obj){_.each(_.functions(obj),function(name){var func=_[name] = obj[name];_.prototype[name] = function(){var args=[this._wrapped];push.apply(args,arguments);return result(this,func.apply(_,args));};});}; // Add all of the Underscore functions to the wrapper object.
_.mixin(_); // Add all mutator Array functions to the wrapper.
_.each(['pop','push','reverse','shift','sort','splice','unshift'],function(name){var method=ArrayProto[name];_.prototype[name] = function(){var obj=this._wrapped;method.apply(obj,arguments);if((name === 'shift' || name === 'splice') && obj.length === 0)delete obj[0];return result(this,obj);};}); // Add all accessor Array functions to the wrapper.
_.each(['concat','join','slice'],function(name){var method=ArrayProto[name];_.prototype[name] = function(){return result(this,method.apply(this._wrapped,arguments));};}); // Extracts the result from a wrapped and chained object.
_.prototype.value = function(){return this._wrapped;}; // Provide unwrapping proxy for some methods used in engine operations
// such as arithmetic and JSON stringification.
_.prototype.valueOf = _.prototype.toJSON = _.prototype.value;_.prototype.toString = function(){return '' + this._wrapped;}; // AMD registration happens at the end for compatibility with AMD loaders
// that may not enforce next-turn semantics on modules. Even though general
// practice for AMD registration is to be anonymous, underscore registers
// as a named module because, like jQuery, it is a base library that is
// popular enough to be bundled in a third party lib, but not be part of
// an AMD load request. Those cases could generate an error when an
// anonymous define() is called outside of a loader request.
if(typeof define === 'function' && define.amd){define('underscore',[],function(){return _;});}}).call(this);}); /*jshint -W051:true */ /*global global:true, window, require */'use strict'; ////////////////////////////////////////////////////////////////////////////////
/// @brief ArangoShell client API
///
/// @file
///
/// DISCLAIMER
///
/// Copyright 2004-2013 triAGENS GmbH, Cologne, Germany
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///
///     http://www.apache.org/licenses/LICENSE-2.0
///
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// Copyright holder is triAGENS GmbH, Cologne, Germany
///
/// @author Achim Brandt
/// @author Copyright 2012-2013, triAGENS GmbH, Cologne, Germany
////////////////////////////////////////////////////////////////////////////////
if(typeof global === 'undefined' && typeof window !== 'undefined'){global = window;} ////////////////////////////////////////////////////////////////////////////////
// @brief common globals
////////////////////////////////////////////////////////////////////////////////
global.Buffer = require("buffer").Buffer;global.process = require("process");global.setInterval = global.setInterval || function(){};global.clearInterval = global.clearInterval || function(){};global.setTimeout = global.setTimeout || function(){};global.clearTimeout = global.clearTimeout || function(){}; ////////////////////////////////////////////////////////////////////////////////
/// @brief template string generator for building an AQL query
////////////////////////////////////////////////////////////////////////////////
global.aqlQuery = function(){var strings=arguments[0];var bindVars={};var query=strings[0];var name,value,i;for(i = 1;i < arguments.length;i++) {value = arguments[i];name = 'value' + (i - 1);if(value && value.constructor && value.constructor.name === 'ArangoCollection'){name = '@' + name;value = value.name();}bindVars[name] = value;query += '@' + name + strings[i];}return {query:query,bindVars:bindVars};}; ////////////////////////////////////////////////////////////////////////////////
/// @brief start paging
////////////////////////////////////////////////////////////////////////////////
global.start_pager = function start_pager(){var internal=require("internal");internal.startPager();}; ////////////////////////////////////////////////////////////////////////////////
/// @brief stop paging
////////////////////////////////////////////////////////////////////////////////
global.stop_pager = function stop_pager(){var internal=require("internal");internal.stopPager();}; ////////////////////////////////////////////////////////////////////////////////
/// @brief print the overall help
////////////////////////////////////////////////////////////////////////////////
global.help = function help(){var internal=require("internal");var arangodb=require("@arangodb");var arangosh=require("@arangodb/arangosh");internal.print(arangosh.HELP);arangodb.ArangoDatabase.prototype._help();arangodb.ArangoCollection.prototype._help();arangodb.ArangoStatement.prototype._help();arangodb.ArangoQueryCursor.prototype._help();internal.print(arangosh.helpExtended);}; ////////////////////////////////////////////////////////////////////////////////
/// @brief clear screen (poor man's way)
////////////////////////////////////////////////////////////////////////////////
global.clear = function clear(){var internal=require("internal");var result='';for(var i=0;i < 100;++i) {result += '\n';}internal.print(result);}; ////////////////////////////////////////////////////////////////////////////////
/// @brief global 'console'
////////////////////////////////////////////////////////////////////////////////
global.console = global.console || require("console"); ////////////////////////////////////////////////////////////////////////////////
/// @brief global 'db'
////////////////////////////////////////////////////////////////////////////////
global.db = require("@arangodb").db; ////////////////////////////////////////////////////////////////////////////////
/// @brief global 'arango'
////////////////////////////////////////////////////////////////////////////////
global.arango = require("@arangodb").arango; ////////////////////////////////////////////////////////////////////////////////
/// @brief global 'fm'
////////////////////////////////////////////////////////////////////////////////
global.fm = require("@arangodb/foxx/manager"); ////////////////////////////////////////////////////////////////////////////////
/// @brief global 'ArangoStatement'
////////////////////////////////////////////////////////////////////////////////
global.ArangoStatement = require("@arangodb/arango-statement").ArangoStatement; ////////////////////////////////////////////////////////////////////////////////
/// @brief shell tutorial
////////////////////////////////////////////////////////////////////////////////
global.tutorial = require("@arangodb/tutorial"); ////////////////////////////////////////////////////////////////////////////////
/// @brief prints help
////////////////////////////////////////////////////////////////////////////////
var initHelp=function initHelp(){var internal=require("internal");if(internal.db){try{internal.db._collections();}catch(e) {}}if(internal.quiet !== true){require("@arangodb").checkAvailableVersions();if(internal.arango && internal.arango.isConnected && internal.arango.isConnected()){internal.print("Type 'tutorial' for a tutorial or 'help' to see common examples");}}}; ////////////////////////////////////////////////////////////////////////////////
/// @brief read rc file
////////////////////////////////////////////////////////////////////////////////
if(typeof window === 'undefined'){ // We're in arangosh
initHelp(); // these variables are not defined in the browser context
if(!(global.IS_EXECUTE_SCRIPT || global.IS_EXECUTE_STRING || global.IS_CHECK_SCRIPT || global.IS_UNIT_TESTS || global.IS_JS_LINT)){try{ // this will not work from within a browser
var __fs__=require("fs");var __rcf__=__fs__.join(__fs__.home(),".arangosh.rc");if(__fs__.exists(__rcf__)){ /*jshint evil: true */var __content__=__fs__.read(__rcf__);eval(__content__);}}catch(e) {require("console").warn("arangosh.rc: %s",String(e));}}try{delete global.IS_EXECUTE_SCRIPT;delete global.IS_EXECUTE_STRING;delete global.IS_CHECK_SCRIPT;delete global.IS_UNIT_TESTS;delete global.IS_JS_LINT;}catch(e) {}}

/*global window, Backbone, $, arangoHelper */
(function() {
  'use strict';
  window.arangoCollectionModel = Backbone.Model.extend({
    initialize: function () {
    },

    idAttribute: "name",

    urlRoot: "/_api/collection",
    defaults: {
      id: "",
      name: "",
      status: "",
      type: "",
      isSystem: false,
      picture: "",
      locked: false,
      desc: undefined
    },

    getProperties: function () {
      var data2;
      $.ajax({
        type: "GET",
        cache: false,
        url: "/_api/collection/" + encodeURIComponent(this.get("id")) + "/properties",
        contentType: "application/json",
        processData: false,
        async: false,
        success: function(data) {
          data2 = data;
        },
        error: function(data) {
          data2 = data;
        }
      });
      return data2;
    },
    getFigures: function () {
      var data2;
      $.ajax({
        type: "GET",
        cache: false,
        url: "/_api/collection/" + this.get("id") + "/figures",
        contentType: "application/json",
        processData: false,
        async: false,
        success: function(data) {
          data2 = data;
        },
        error: function(data) {
          data2 = data;
        }
      });
      return data2;
    },
    getRevision: function () {
      var data2;
      $.ajax({
        type: "GET",
        cache: false,
        url: "/_api/collection/" + this.get("id") + "/revision",
        contentType: "application/json",
        processData: false,
        async: false,
        success: function(data) {
          data2 = data;
        },
        error: function(data) {
          data2 = data;
        }
      });
      return data2;
    },

    getIndex: function () {
      var data2;
      $.ajax({
        type: "GET",
        cache: false,
        url: "/_api/index/?collection=" + this.get("id"),
        contentType: "application/json",
        processData: false,
        async: false,
        success: function(data) {
          data2 = data;
        },
        error: function(data) {
          data2 = data;
        }
      });
      return data2;
    },


    createIndex: function (postParameter, callback) {

      var self = this;

      $.ajax({
          cache: false,
          type: "POST",
          url: "/_api/index?collection="+ self.get("id"),
          headers: {
            'x-arango-async': 'store' 
          },
          data: JSON.stringify(postParameter),
          contentType: "application/json",
          processData: false,
          success: function (data, textStatus, xhr) {
            if (xhr.getResponseHeader('x-arango-async-id')) {
              window.arangoHelper.addAardvarkJob({
                id: xhr.getResponseHeader('x-arango-async-id'),
                type: 'index',
                desc: 'Creating Index',
                collection: self.get("id")
              });
              callback(false, data);
            }
            else {
              callback(true, data);
            }
          },
          error: function(data) {
            callback(true, data);
          }
      });
      callback();
    },

    deleteIndex: function (id, callback) {

      var self = this;

      $.ajax({
          cache: false,
          type: 'DELETE',
          url: "/_api/index/"+ this.get("name") +"/"+encodeURIComponent(id),
          headers: {
            'x-arango-async': 'store' 
          },
          success: function (data, textStatus, xhr) {
            if (xhr.getResponseHeader('x-arango-async-id')) {
              window.arangoHelper.addAardvarkJob({
                id: xhr.getResponseHeader('x-arango-async-id'),
                type: 'index',
                desc: 'Removing Index',
                collection: self.get("id")
              });
              callback(false, data);
            }
            else {
              callback(true, data);
            }
          },
          error: function (data) {
            callback(true, data);
          }
        });
      callback();
    },

    truncateCollection: function () {
      $.ajax({
        async: false,
        cache: false,
        type: 'PUT',
        url: "/_api/collection/" + this.get("id") + "/truncate",
        success: function () {
          arangoHelper.arangoNotification('Collection truncated');
        },
        error: function () {
          arangoHelper.arangoError('Collection error');
        }
      });
    },

    loadCollection: function (callback) {

      $.ajax({
        cache: false,
        type: 'PUT',
        url: "/_api/collection/" + this.get("id") + "/load",
        success: function () {
          callback(false);
        },
        error: function () {
          callback(true);
        }
      });
      callback();
    },

    unloadCollection: function (callback) {
      $.ajax({
        cache: false,
        type: 'PUT',
        url: "/_api/collection/" + this.get("id") + "/unload?flush=true",
        success: function () {
          callback(false);
        },
        error: function () {
          callback(true);
        }
      });
      callback();
    },

    renameCollection: function (name) {
      var self = this,
        result = false;
      $.ajax({
        cache: false,
        type: "PUT",
        async: false, // sequential calls!
        url: "/_api/collection/" + this.get("id") + "/rename",
        data: JSON.stringify({ name: name }),
        contentType: "application/json",
        processData: false,
        success: function() {
          self.set("name", name);
          result = true;
        },
        error: function(/*data*/) {
          try {
            console.log("error");
            //var parsed = JSON.parse(data.responseText);
            //result = parsed.errorMessage;
          }
          catch (e) {
            result = false;
          }
        }
      });
      return result;
    },

    changeCollection: function (wfs, journalSize, indexBuckets) {
      var result = false;
      if (wfs === "true") {
        wfs = true;
      }
      else if (wfs === "false") {
        wfs = false;
      }
      var data = {
        waitForSync: wfs,
        journalSize: parseInt(journalSize),
        indexBuckets: parseInt(indexBuckets)
      };

      $.ajax({
        cache: false,
        type: "PUT",
        async: false, // sequential calls!
        url: "/_api/collection/" + this.get("id") + "/properties",
        data: JSON.stringify(data),
        contentType: "application/json",
        processData: false,
        success: function() {
          result = true;
        },
        error: function(data) {
          try {
            var parsed = JSON.parse(data.responseText);
            result = parsed.errorMessage;
          }
          catch (e) {
            result = false;
          }
        }
      });
      return result;
    }

  });
}());

/*global window, Backbone */

window.DatabaseModel = Backbone.Model.extend({

  idAttribute: "name",

  initialize: function () {
    'use strict';
  },

  isNew: function() {
    'use strict';
    return false;
  },
  sync: function(method, model, options) {
    'use strict';
    if (method === "update") {
      method = "create";
    }
    return Backbone.sync(method, model, options);
  },

  url: "/_api/database",

  defaults: {
  }


});

/*global window, Backbone, arangoHelper, _ */

window.arangoDocumentModel = Backbone.Model.extend({
  initialize: function () {
    'use strict';
  },
  urlRoot: "/_api/document",
  defaults: {
    _id: "",
    _rev: "",
    _key: ""
  },
  getSorted: function () {
    'use strict';
    var self = this;
    var keys = Object.keys(self.attributes).sort(function (l, r) {
      var l1 = arangoHelper.isSystemAttribute(l);
      var r1 = arangoHelper.isSystemAttribute(r);

      if (l1 !== r1) {
        if (l1) {
          return -1;
        }
        return 1;
      }

      return l < r ? -1 : 1;
    });

    var sorted = {};
    _.each(keys, function (k) {
      sorted[k] = self.attributes[k];
    });
    return sorted;
  }
});

/*global window, Backbone */
(function () {
  'use strict';
  window.ArangoQuery = Backbone.Model.extend({

    urlRoot: "/_api/user",

    defaults: {
      name: "",
      type: "custom",
      value: ""
    }

  });
}());

/*global Backbone, window */

window.Replication = Backbone.Model.extend({
  defaults: {
    state: {},
    server: {}
  },

  initialize: function () {
  }

});

// obsolete file

/*global window, Backbone */

window.Statistics = Backbone.Model.extend({
  defaults: {
  },

  url: function() {
    'use strict';
    return "/_admin/statistics";
  }
});

/*global window, Backbone */

window.StatisticsDescription = Backbone.Model.extend({
  defaults: {
    "figures" : "",
    "groups" : ""
  },
  url: function() {
    'use strict';

    return "/_admin/statistics-description";
  }

});

/*jshint strict: false */
/*global Backbone, $, window */
window.Users = Backbone.Model.extend({
  defaults: {
    user: "",
    active: false,
    extra: {}
  },

  idAttribute : "user",

  parse : function (d) {
    this.isNotNew = true;
    return d;
  },

  isNew: function () {
    return !this.isNotNew;
  },

  url: function () {
    if (this.isNew()) {
      return "/_api/user";
    }
    if (this.get("user") !== "") {
      return "/_api/user/" + this.get("user");
    }
    return "/_api/user";
  },

  checkPassword: function(passwd) {
    var result = false;

    $.ajax({
      cache: false,
      type: "POST",
      async: false, // sequential calls!
      url: "/_api/user/" + this.get("user"),
      data: JSON.stringify({ passwd: passwd }),
      contentType: "application/json",
      processData: false,
      success: function(data) {
        result = data.result;
      }
    });
    return result;
  },

  setPassword: function(passwd) {
    $.ajax({
      cache: false,
      type: "PATCH",
      async: false, // sequential calls!
      url: "/_api/user/" + this.get("user"),
      data: JSON.stringify({ passwd: passwd }),
      contentType: "application/json",
      processData: false
    });
  },

  setExtras: function(name, img) {
    $.ajax({
      cache: false,
      type: "PATCH",
      async: false, // sequential calls!
      url: "/_api/user/" + this.get("user"),
      data: JSON.stringify({"extra": {"name":name, "img":img}}),
      contentType: "application/json",
      processData: false
    });
  }

});

/*global Backbone, window */

(function() {
  "use strict";

  window.CurrentDatabase = Backbone.Model.extend({
    url: "/_api/database/current",

    parse: function(data) {
      return data.result;
    }
  });
}());

/*jshint browser: true */
/*global Backbone, $, _, arango */
(function () {
  "use strict";

  var sendRequest = function (foxx, callback, method, part, body, args) {
    var req = {
      contentType: "application/json",
      processData: false,
      type: method
    };
    callback = callback || function () {};
    args = _.extend({mount: foxx.encodedMount()}, args);
    var qs = _.reduce(args, function (base, value, key) {
      return base + encodeURIComponent(key) + '=' + encodeURIComponent(value) + '&';
    }, '?');
    req.url = "/_admin/aardvark/foxxes" + (part ? '/' + part : '') + qs.slice(0, qs.length - 1);
    if (body !== undefined) {
      req.data = JSON.stringify(body);
    }
    $.ajax(req).then(
      function (data) {
        callback(null, data);
      },
      function (xhr) {
        window.xhr = xhr;
        callback(_.extend(
          xhr.status
          ? new Error(xhr.responseJSON ? xhr.responseJSON.errorMessage : xhr.responseText)
          : new Error('Network Error'),
          {statusCode: xhr.status}
        ));
      }
    );
  };

  window.Foxx = Backbone.Model.extend({
    idAttribute: "mount",

    defaults: {
      "author": "Unknown Author",
      "name": "",
      "version": "Unknown Version",
      "description": "No description",
      "license": "Unknown License",
      "contributors": [],
      "scripts": {},
      "config": {},
      "deps": {},
      "git": "",
      "system": false,
      "development": false
    },

    isNew: function () {
      return false;
    },

    encodedMount: function () {
      return encodeURIComponent(this.get("mount"));
    },

    destroy: function (options, callback) {
      sendRequest(this, callback, "DELETE", undefined, undefined, options);
    },

    isBroken: function () {
      return false;
    },

    needsAttention: function () {
      return this.isBroken() || this.needsConfiguration() || this.hasUnconfiguredDependencies();
    },

    needsConfiguration: function () {
      return _.any(this.get('config'), function (cfg) {
        return cfg.current === undefined && cfg.required !== false;
      });
    },

    hasUnconfiguredDependencies: function () {
      return _.any(this.get('deps'), function (dep) {
        return dep.current === undefined && dep.definition.required !== false;
      });
    },

    getConfiguration: function (callback) {
      sendRequest(this, function (err, data) {
        if (!err) {
          this.set("config", data);
        }
        if (typeof callback === "function") {
          callback(err, data);
        }
      }.bind(this), "GET", "config");
    },

    setConfiguration: function (data, callback) {
      sendRequest(this, callback, "PATCH", "config", data);
    },

    getDependencies: function (callback) {
      sendRequest(this, function (err, data) {
        if (!err) {
          this.set("deps", data);
        }
        if (typeof callback === "function") {
          callback(err, data);
        }
      }.bind(this), "GET", "deps");
    },

    setDependencies: function (data, callback) {
      sendRequest(this, callback, "PATCH", "deps", data);
    },

    toggleDevelopment: function (activate, callback) {
      sendRequest(this, function (err, data) {
        if (!err) {
          this.set("development", activate);
        }
        if (typeof callback === "function") {
          callback(err, data);
        }
      }.bind(this), "PATCH", "devel", activate);
    },

    runScript: function (name, options, callback) {
      sendRequest(this, callback, "POST", "scripts/" + name, options);
    },

    runTests: function (options, callback) {
      sendRequest(this, function (err, data) {
        if (typeof callback === "function") {
          callback(err ? err.responseJSON : err, data);
        }
      }.bind(this), "POST", "tests", options);
    },

    isSystem: function () {
      return this.get("system");
    },

    isDevelopment: function () {
      return this.get("development");
    },

    download: function () {
      window.open(
        "/_db/" + arango.getDatabaseName() + "/_admin/aardvark/foxxes/download/zip?mount=" + this.encodedMount()
      );
    }
  });
}());

/*global window, Backbone, $ */
(function() {
  "use strict";

  window.Graph = Backbone.Model.extend({

    idAttribute: "_key",

    urlRoot: "/_api/gharial",

    isNew: function() {
      return !this.get("_id");
    },

    parse: function(raw) {
      return raw.graph || raw;
    },

    addEdgeDefinition: function(edgeDefinition) {
      $.ajax(
        {
          async: false,
          type: "POST",
          url: this.urlRoot + "/" + this.get("_key") + "/edge",
          data: JSON.stringify(edgeDefinition)
        }
      );
    },

    deleteEdgeDefinition: function(edgeCollection) {
      $.ajax(
        {
          async: false,
          type: "DELETE",
          url: this.urlRoot + "/" + this.get("_key") + "/edge/" + edgeCollection
        }
      );
    },

    modifyEdgeDefinition: function(edgeDefinition) {
      $.ajax(
        {
          async: false,
          type: "PUT",
          url: this.urlRoot + "/" + this.get("_key") + "/edge/" + edgeDefinition.collection,
          data: JSON.stringify(edgeDefinition)
        }
      );
    },

    addVertexCollection: function(vertexCollectionName) {
      $.ajax(
        {
          async: false,
          type: "POST",
          url: this.urlRoot + "/" + this.get("_key") + "/vertex",
          data: JSON.stringify({collection: vertexCollectionName})
        }
      );
    },

    deleteVertexCollection: function(vertexCollectionName) {
      $.ajax(
        {
          async: false,
          type: "DELETE",
          url: this.urlRoot + "/" + this.get("_key") + "/vertex/" + vertexCollectionName
        }
      );
    },


    defaults: {
      name: "",
      edgeDefinitions: [],
      orphanCollections: []
    }
  });
}());


/*global window, Backbone */
(function() {
  "use strict";

  window.newArangoLog = Backbone.Model.extend({
    defaults: {
      lid: "",
      level: "",
      timestamp: "",
      text: "",
      totalAmount: ""
    },

    getLogStatus: function() {
      switch (this.get("level")) {
        case 1:
          return "Error";
        case 2:
          return "Warning";
        case 3:
          return  "Info";
        case 4:
          return "Debug";
        default:
          return "Unknown";
      }
    }
  });
}());

/*global window, Backbone */
(function() {
  "use strict";

  window.Notification = Backbone.Model.extend({
    defaults: {
      "title"    : "",
      "date"     : 0,
      "content"  : "",
      "priority" : "",
      "tags"     : "",
      "seen"     : false
    }

  });
}());

/*global window, Backbone */
(function() {
  "use strict";

  window.queryManagementModel = Backbone.Model.extend({

    defaults: {
      id: "",
      query: "",
      started: "",
      runTime: ""
    }

  });
}());

/*global window, Backbone */
(function() {
  "use strict";

  window.workMonitorModel = Backbone.Model.extend({

    defaults: {
      name: "",
      number: "",
      status: "",
      type: ""
    }

  });
}());

/*jshint browser: true */
/*jshint unused: false */
/*global Backbone, window, $, _ */
(function () {

  "use strict";

  window.PaginatedCollection = Backbone.Collection.extend({
    page: 0,
    pagesize: 10,
    totalAmount: 0,

    getPage: function() {
      return this.page + 1;
    },

    setPage: function(counter) {
      if (counter >= this.getLastPageNumber()) {
        this.page = this.getLastPageNumber()-1;
        return;
      }
      if (counter < 1) {
        this.page = 0;
        return;
      }
      this.page = counter - 1;

    },

    getLastPageNumber: function() {
      return Math.max(Math.ceil(this.totalAmount / this.pagesize), 1);
    },

    getOffset: function() {
      return this.page * this.pagesize;
    },

    getPageSize: function() {
      return this.pagesize;
    },

    setPageSize: function(newPagesize) {
      if (newPagesize === "all") {
        this.pagesize = 'all';
      }
      else {
        try {
          newPagesize = parseInt(newPagesize, 10);
          this.pagesize = newPagesize;
        }
        catch (ignore) {
        }
      }
    },

    setToFirst: function() {
      this.page = 0;
    },

    setToLast: function() {
      this.setPage(this.getLastPageNumber());
    },

    setToPrev: function() {
      this.setPage(this.getPage() - 1);

    },

    setToNext: function() {
      this.setPage(this.getPage() + 1);
    },

    setTotal: function(total) {
      this.totalAmount = total;
    },

    getTotal: function() {
      return this.totalAmount;
    },

    setTotalMinusOne: function() {
      this.totalAmount--;
    }

  });
}());

/*jshint browser: true */
/*jshint unused: false */
/*global Backbone, window, arangoCollectionModel, $, arangoHelper, data, _ */
(function() {
  "use strict";

  window.arangoCollections = Backbone.Collection.extend({
      url: '/_api/collection',

      model: arangoCollectionModel,

      searchOptions : {
        searchPhrase: null,
        includeSystem: false,
        includeDocument: true,
        includeEdge: true,
        includeLoaded: true,
        includeUnloaded: true,
        sortBy: 'name',
        sortOrder: 1
      },

      translateStatus : function (status) {
        switch (status) {
          case 0:
            return 'corrupted';
          case 1:
            return 'new born collection';
          case 2:
            return 'unloaded';
          case 3:
            return 'loaded';
          case 4:
            return 'will be unloaded';
          case 5:
            return 'deleted';
          case 6:
            return 'loading';
          default:
            return;
        }
      },

      translateTypePicture : function (type) {
        var returnString = "";
        switch (type) {
          case 'document':
            returnString += "fa-file-text-o";
            break;
          case 'edge':
            returnString += "fa-share-alt";
            break;
          case 'unknown':
            returnString += "fa-question";
            break;
          default:
            returnString += "fa-cogs";
        }
        return returnString;
      },

      parse: function(response)  {
        var self = this;
        _.each(response.collections, function(val) {
          val.isSystem = arangoHelper.isSystemCollection(val);
          val.type = arangoHelper.collectionType(val);
          val.status = self.translateStatus(val.status);
          val.picture = self.translateTypePicture(val.type);
        });
        return response.collections;
      },

      getPosition : function (name) {
        var list = this.getFiltered(this.searchOptions), i;
        var prev = null;
        var next = null;

        for (i = 0; i < list.length; ++i) {
          if (list[i].get('name') === name) {
            if (i > 0) {
              prev = list[i - 1];
            }
            if (i < list.length - 1) {
              next = list[i + 1];
            }
          }
        }

        return { prev: prev, next: next };
      },

      getFiltered : function (options) {
        var result = [ ];
        var searchPhrases = [ ];

        if (options.searchPhrase !== null) {
          var searchPhrase = options.searchPhrase.toLowerCase();
          // kick out whitespace
          searchPhrase = searchPhrase.replace(/\s+/g, ' ').replace(/(^\s+|\s+$)/g, '');
          searchPhrases = searchPhrase.split(' ');
        }

        this.models.forEach(function (model) {
          // search for name(s) entered
          if (searchPhrases.length > 0) {
            var lowerName = model.get('name').toLowerCase(), i;
            // all phrases must match!
            for (i = 0; i < searchPhrases.length; ++i) {
              if (lowerName.indexOf(searchPhrases[i]) === -1) {
                // search phrase entered but current collection does not match?
                return;
              }
            }
          }

          if (options.includeSystem === false && model.get('isSystem')) {
            // system collection?
            return;
          }
          if (options.includeEdge === false && model.get('type') === 'edge') {
            return;
          }
          if (options.includeDocument === false && model.get('type') === 'document') {
            return;
          }
          if (options.includeLoaded === false && model.get('status') === 'loaded') {
            return;
          }
          if (options.includeUnloaded === false && model.get('status') === 'unloaded') {
            return;
          }

          result.push(model);
        });

        result.sort(function (l, r) {
          var lValue, rValue;
          if (options.sortBy === 'type') {
            // we'll use first type, then name as the sort criteria
            // this is because when sorting by type, we need a 2nd criterion (type is not unique)
            lValue = l.get('type') + ' ' + l.get('name').toLowerCase();
            rValue = r.get('type') + ' ' + r.get('name').toLowerCase();
          }
          else {
            lValue = l.get('name').toLowerCase();
            rValue = r.get('name').toLowerCase();
          }
          if (lValue !== rValue) {
            return options.sortOrder * (lValue < rValue ? -1 : 1);
          }
          return 0;
        });

        return result;
      },

      newCollection: function (collName, wfs, isSystem, journalSize, collType, shards, keys) {
        var returnobj = {};
        var data = {};
        data.name = collName;
        data.waitForSync = wfs;
        if (journalSize > 0) {
          data.journalSize = journalSize;
        }
        data.isSystem = isSystem;
        data.type = parseInt(collType, 10);
        if (shards) {
          data.numberOfShards = shards;
          data.shardKeys = keys;
        }
        returnobj.status = false;
        $.ajax({
          cache: false,
          type: "POST",
          url: "/_api/collection",
          data: JSON.stringify(data),
          contentType: "application/json",
          processData: false,
          async: false,
          success: function(data) {
            returnobj.status = true;
            returnobj.data = data;
          },
          error: function(data) {
            returnobj.status = false;
            returnobj.errorMessage = JSON.parse(data.responseText).errorMessage;
          }
        });
        return returnobj;
      }
  });
}());

/*jshint browser: true */
/*global window, Backbone, $, window, _*/

(function() {
  'use strict';

  window.ArangoDatabase = Backbone.Collection.extend({

    model: window.DatabaseModel,

    sortOptions: {
      desc: false
    },

    url: "/_api/database",

    comparator: function(item, item2) {
      var a = item.get('name').toLowerCase();
      var b = item2.get('name').toLowerCase();
      if (this.sortOptions.desc === true) {
        return a < b ? 1 : a > b ? -1 : 0;
      }
      return a > b ? 1 : a < b ? -1 : 0;
    },

    parse: function(response) {
      if (!response) {
        return;
      }
      return _.map(response.result, function(v) {
        return {name:v};
      });
    },

    initialize: function() {
      var self = this;
      this.fetch().done(function() {
        self.sort();
      });
    },

    setSortingDesc: function(yesno) {
      this.sortOptions.desc = yesno;
    },

    getDatabases: function() {
      var self = this;
      this.fetch().done(function() {
        self.sort();
      });
      return this.models;
    },

    getDatabasesForUser: function() {
      var returnVal;
      $.ajax({
        type: "GET",
        cache: false,
        url: this.url + "/user",
        contentType: "application/json",
        processData: false,
        async: false,
        success: function(data) {
          returnVal = data.result;
        },
        error: function() {
          returnVal = [];
        }
      });
      return returnVal.sort();
    },

    createDatabaseURL: function(name, protocol, port) {
      var loc = window.location;
      var hash = window.location.hash;
      if (protocol) {
        if (protocol === "SSL" || protocol === "https:") {
          protocol = "https:";
        } else {
          protocol = "http:";
        }
      } else {
        protocol = loc.protocol;
      }
      port = port || loc.port;

      var url = protocol
        + "//"
        + window.location.hostname
        + ":"
        + port
        + "/_db/"
        + encodeURIComponent(name)
        + "/_admin/aardvark/standalone.html";
      if (hash) {
        var base = hash.split("/")[0];
        if (base.indexOf("#collection") === 0) {
          base = "#collections";
        }
        if (base.indexOf("#application") === 0) {
          base = "#applications";
        }
        url += base;
      }
      return url;
    },

    getCurrentDatabase: function() {
      var returnVal;
      $.ajax({
        type: "GET",
        cache: false,
        url: this.url + "/current",
        contentType: "application/json",
        processData: false,
        async: false,
        success: function(data) {
          if (data.code === 200) {
            returnVal = data.result.name;
            return;
          }
          returnVal = data;
        },
        error: function(data) {
          returnVal = data;
        }
      });
      return returnVal;
    },

    hasSystemAccess: function() {
      var list = this.getDatabasesForUser();
      return _.contains(list, "_system");
    }
  });
}());

/*jshint browser: true */
/*jshint strict: false, unused: false */
/*global Backbone, window, arangoDocument, arangoDocumentModel, $, arangoHelper */

window.arangoDocument = Backbone.Collection.extend({
  url: '/_api/document/',
  model: arangoDocumentModel,
  collectionInfo: {},
  deleteEdge: function (colid, docid) {
    var returnval = false;
    try {
      $.ajax({
        cache: false,
        type: 'DELETE',
        async: false,
        contentType: "application/json",
        url: "/_api/edge/" + colid + "/" + docid,
        success: function () {
          returnval = true;
        },
        error: function () {
          returnval = false;
        }
      });
    }
    catch (e) {
          returnval = false;
    }
    return returnval;
  },
  deleteDocument: function (colid, docid){
    var returnval = false;
    try {
      $.ajax({
        cache: false,
        type: 'DELETE',
        async: false,
        contentType: "application/json",
        url: "/_api/document/" + colid + "/" + docid,
        success: function () {
          returnval = true;
        },
        error: function () {
          returnval = false;
        }
      });
    }
    catch (e) {
          returnval = false;
    }
    return returnval;
  },
  addDocument: function (collectionID, key) {
    var self = this;
    self.createTypeDocument(collectionID, key);
  },
  createTypeEdge: function (collectionID, from, to, key) {
    var result = false, newEdge;

    if (key) {
      newEdge = JSON.stringify({
        _key: key
      });
    }
    else {
      newEdge = JSON.stringify({});
    }

    $.ajax({
      cache: false,
      type: "POST",
      async: false,
      url: "/_api/edge?collection=" + collectionID + "&from=" + from + "&to=" + to,
      data: newEdge,
      contentType: "application/json",
      processData: false,
      success: function(data) {
        result = data._id;
      },
      error: function(data) {
        result = false;
      }
    });
    return result;
  },
  createTypeDocument: function (collectionID, key) {
    var result = false, newDocument;

    if (key) {
      newDocument = JSON.stringify({
        _key: key
      });
    }
    else {
      newDocument = JSON.stringify({});
    }

    $.ajax({
      cache: false,
      type: "POST",
      async: false,
      url: "/_api/document?collection=" + encodeURIComponent(collectionID),
      data: newDocument,
      contentType: "application/json",
      processData: false,
      success: function(data) {
        result = data._id;
      },
      error: function(data) {
        result = false;
      }
    });
    return result;
  },
  getCollectionInfo: function (identifier) {
    var self = this;

    $.ajax({
      cache: false,
      type: "GET",
      url: "/_api/collection/" + identifier + "?" + arangoHelper.getRandomToken(),
      contentType: "application/json",
      processData: false,
      async: false,
      success: function(data) {
        self.collectionInfo = data;
      },
      error: function(data) {
      }
    });

    return self.collectionInfo;
  },
  getEdge: function (colid, docid){
    var result = false, self = this;
    this.clearDocument();
    $.ajax({
      cache: false,
      type: "GET",
      async: false,
      url: "/_api/edge/" + colid +"/"+ docid,
      contentType: "application/json",
      processData: false,
      success: function(data) {
        self.add(data);
        result = true;
      },
      error: function(data) {
        result = false;
      }
    });
    return result;
  },
  getDocument: function (colid, docid) {
    var result = false, self = this;
    this.clearDocument();
    $.ajax({
      cache: false,
      type: "GET",
      async: false,
      url: "/_api/document/" + colid +"/"+ docid,
      contentType: "application/json",
      processData: false,
      success: function(data) {
        self.add(data);
        result = true;
      },
      error: function(data) {
        result = false;
      }
    });
    return result;
  },
  saveEdge: function (colid, docid, model) {
    var result = false;
    $.ajax({
      cache: false,
      type: "PUT",
      async: false,
      url: "/_api/edge/" + colid + "/" + docid,
      data: model,
      contentType: "application/json",
      processData: false,
      success: function(data) {
        result = true;
      },
      error: function(data) {
        result = false;
      }
    });
    return result;
  },
  saveDocument: function (colid, docid, model) {
    var result = false;
    $.ajax({
      cache: false,
      type: "PUT",
      async: false,
      url: "/_api/document/" + colid + "/" + docid,
      data: model,
      contentType: "application/json",
      processData: false,
      success: function(data) {
          result = true;
      },
      error: function(data) {
          result = false;
      }
    });
    return result;

  },

  updateLocalDocument: function (data) {
    this.clearDocument();
    this.add(data);
  },
  clearDocument: function () {
    this.reset();
  }

});

/*jshint browser: true */
/*jshint unused: false */
/*global window, Backbone, arangoDocumentModel, _, arangoHelper, $*/
(function() {
  "use strict";

  window.arangoDocuments = window.PaginatedCollection.extend({
    collectionID: 1,

    filters: [],
    checkCursorTimer: undefined,

    MAX_SORT: 12000,

    lastQuery: {},
    sortAttribute: "_key",

    url: '/_api/documents',
    model: window.arangoDocumentModel,

    loadTotal: function() {
      var self = this;
      $.ajax({
        cache: false,
        type: "GET",
        url: "/_api/collection/" + this.collectionID + "/count",
        contentType: "application/json",
        processData: false,
        async: false,
        success: function(data) {
          self.setTotal(data.count);
        }
      });
    },

    setCollection: function(id) {
      this.resetFilter();
      this.collectionID = id;
      this.setPage(1);
      this.loadTotal();
    },

    setSort: function(key) {
      this.sortAttribute = key;
    },

    getSort: function() {
      return this.sortAttribute;
    },

    addFilter: function(attr, op, val) {
      this.filters.push({
        attr: attr,
        op: op,
        val: val
      });
    },

    setFiltersForQuery: function(bindVars) {
      if (this.filters.length === 0) {
        return "";
      }
      var query = " FILTER", res = '',
      parts = _.map(this.filters, function(f, i) {
        if (f.op === 'LIKE') {
          res = " " + f.op + "(x.`" + f.attr + "`, @param";
          res += i;
          res += ")";
        }
        else {
          if (f.op === 'IN' || f.op === 'NOT IN') {
            res = ' ';
          }
          else {
            res = " x.`";
          }

          res += f.attr;

          if (f.op === 'IN' || f.op === 'NOT IN') {
            res += " ";
          }
          else {
            res += "` ";
          }

          res += f.op;

          if (f.op === 'IN' || f.op === 'NOT IN') {
            res += " x.@param";
          }
          else {
            res += " @param";
          }
          res += i;
        }

        bindVars["param" + i] = f.val;
        return res;
      });
      return query + parts.join(" &&");
    },

    setPagesize: function(size) {
      this.setPageSize(size);
    },

    resetFilter: function() {
      this.filters = [];
    },

    moveDocument: function (key, fromCollection, toCollection, callback) {
      var querySave, queryRemove, bindVars = {
        "@collection": fromCollection,
        "filterid": key
      }, queryObj1, queryObj2;

      querySave = "FOR x IN @@collection";
      querySave += " FILTER x._key == @filterid";
      querySave += " INSERT x IN ";
      querySave += toCollection;

      queryRemove = "FOR x in @@collection";
      queryRemove += " FILTER x._key == @filterid";
      queryRemove += " REMOVE x IN @@collection";

      queryObj1 = {
        query: querySave,
        bindVars: bindVars
      };

      queryObj2 = {
        query: queryRemove,
        bindVars: bindVars
      };

      window.progressView.show();
      // first insert docs in toCollection
      $.ajax({
        cache: false,
        type: 'POST',
        async: true,
        url: '/_api/cursor',
        data: JSON.stringify(queryObj1),
        contentType: "application/json",
        success: function() {
          // if successful remove unwanted docs
          $.ajax({
            cache: false,
            type: 'POST',
            async: true,
            url: '/_api/cursor',
            data: JSON.stringify(queryObj2),
            contentType: "application/json",
            success: function() {
              if (callback) {
                callback();
              }
              window.progressView.hide();
            },
            error: function() {
              window.progressView.hide();
              arangoHelper.arangoError(
                "Document error", "Documents inserted, but could not be removed."
              );
            }
          });
        },
        error: function() {
          window.progressView.hide();
          arangoHelper.arangoError("Document error", "Could not move selected documents.");
        }
      });
    },

    getDocuments: function (callback) {
      var self = this,
          query,
          bindVars,
          tmp,
          queryObj;
      bindVars = {
        "@collection": this.collectionID,
        "offset": this.getOffset(),
        "count": this.getPageSize()
      };

      // fetch just the first 25 attributes of the document
      // this number is arbitrary, but may reduce HTTP traffic a bit
      query = "FOR x IN @@collection LET att = SLICE(ATTRIBUTES(x), 0, 25)";
      query += this.setFiltersForQuery(bindVars);
      // Sort result, only useful for a small number of docs
      if (this.getTotal() < this.MAX_SORT) {
        if (this.getSort() === '_key') {
          query += " SORT TO_NUMBER(x." + this.getSort() + ") == 0 ? x."
                + this.getSort() + " : TO_NUMBER(x." + this.getSort() + ")";
        }
        else {
          query += " SORT x." + this.getSort();
        }
      }

      if (bindVars.count !== 'all') {
        query += " LIMIT @offset, @count RETURN KEEP(x, att)";
      }
      else {
        tmp = {
          "@collection": this.collectionID
        };
        bindVars = tmp;
        query += " RETURN KEEP(x, att)";
      }

      queryObj = {
        query: query,
        bindVars: bindVars
      };
      if (this.getTotal() < 10000 || this.filters.length > 0) {
        queryObj.options = {
          fullCount: true,
        };
      }

      var checkCursorStatus = function(jobid) {
        $.ajax({
          cache: false,
          type: 'PUT',
          url: '/_api/job/' + encodeURIComponent(jobid),
          contentType: 'application/json',
          success: function(data, textStatus, xhr) {
            if (xhr.status === 201) {
              window.progressView.toShow = false;
              self.clearDocuments();
              if (data.extra && data.extra.stats.fullCount !== undefined) {
                self.setTotal(data.extra.stats.fullCount);
              }
              if (self.getTotal() !== 0) {
                _.each(data.result, function(v) {
                  self.add({
                    "id": v._id,
                    "rev": v._rev,
                    "key": v._key,
                    "content": v
                  });
                });
              }
              self.lastQuery = queryObj;

              callback(false, data);
            }
            else if (xhr.status === 204) {
              self.checkCursorTimer = window.setTimeout(function() {
                checkCursorStatus(jobid);
              }, 500);
            }

          },
          error: function(data) {
            callback(false, data);
          }
        });
      };

      $.ajax({
        cache: false,
        type: 'POST',
        url: '/_api/cursor',
        data: JSON.stringify(queryObj),
        headers: {
          'x-arango-async': 'store'
        },
        contentType: "application/json",
        success: function (data, textStatus, xhr) {

          if (xhr.getResponseHeader('x-arango-async-id')) {
            var jobid = xhr.getResponseHeader('x-arango-async-id');

            var cancelRunningCursor = function() {
              $.ajax({
                url: '/_api/job/'+ encodeURIComponent(jobid) + "/cancel",
                type: 'PUT',
                success: function() {
                  window.clearTimeout(self.checkCursorTimer);
                  arangoHelper.arangoNotification("Documents", "Canceled operation.");
                  $('.dataTables_empty').text('Canceled.');
                  window.progressView.hide();
                }
              });
            };

            window.progressView.showWithDelay(300, "Fetching documents...", cancelRunningCursor);

            checkCursorStatus(jobid);
          }
          else {
            callback(true, data);
          }
        },
        error: function(data) {
          callback(false, data);
        }
      });
    },

    clearDocuments: function () {
      this.reset();
    },

    buildDownloadDocumentQuery: function() {
      var query, queryObj, bindVars;

      bindVars = {
        "@collection": this.collectionID
      };

      query = "FOR x in @@collection";
      query += this.setFiltersForQuery(bindVars);
      // Sort result, only useful for a small number of docs
      if (this.getTotal() < this.MAX_SORT) {
        query += " SORT x." + this.getSort();
      }

      query += " RETURN x";

      queryObj = {
        query: query,
        bindVars: bindVars
      };

      return queryObj;
    },

    uploadDocuments : function (file) {
      var result;
      $.ajax({
        type: "POST",
        async: false,
        url:
        '/_api/import?type=auto&collection='+
        encodeURIComponent(this.collectionID)+
        '&createCollection=false',
        data: file,
        processData: false,
        contentType: 'json',
        dataType: 'json',
        complete: function(xhr) {
          if (xhr.readyState === 4 && xhr.status === 201) {
            result = true;
          } else {
            result = "Upload error";
          }

          try {
            var data = JSON.parse(xhr.responseText);
            if (data.errors > 0) {
              result = "At least one error occurred during upload";
            }
          }
          catch (err) {
            console.log(err);
          }               
        }
      });
      return result;
    }
  });
}());

/*jshint browser: true */
/*jshint unused: false */
/*global window, $, _ */
(function () {

  "use strict";

  window.ArangoLogs = window.PaginatedCollection.extend({
    upto: false,
    loglevel: 0,
    totalPages: 0,

    parse: function(response) {
      var myResponse = [];
      _.each(response.lid, function(val, i) {
        myResponse.push({
          level: response.level[i],
          lid: val,
          text: response.text[i],
          timestamp: response.timestamp[i],
          totalAmount: response.totalAmount
        });
      });
      this.totalAmount = response.totalAmount;
      this.totalPages = Math.ceil(this.totalAmount / this.pagesize);
      return myResponse;
    },

    initialize: function(options) {
      if (options.upto === true) {
        this.upto = true;
      }
      this.loglevel = options.loglevel;
    },

    model: window.newArangoLog,

    url: function() {
      var type, rtnStr, offset, size;
      offset = this.page * this.pagesize;
      var inverseOffset = this.totalAmount - ((this.page + 1) * this.pagesize);
      if (inverseOffset < 0 && this.page === (this.totalPages - 1)) {
        inverseOffset = 0;
        size = (this.totalAmount % this.pagesize);
      }
      else {
        size = this.pagesize;
      }

      //if totalAmount (first fetch) = 0, then set size to 1 (reduce traffic)
      if (this.totalAmount === 0) {
        size = 1;
      }

      if (this.upto) {
        type = 'upto';
      }
      else  {
        type = 'level';
      }
      rtnStr = '/_admin/log?'+type+'='+this.loglevel+'&size='+size+'&offset='+inverseOffset;
      return rtnStr;
    }

  });
}());

/*jshint browser: true */
/*jshint unused: false */
/*global Backbone, activeUser, window, ArangoQuery, $, data, _, arangoHelper*/
(function() {
  "use strict";

  window.ArangoQueries = Backbone.Collection.extend({

    initialize: function(models, options) {
      var result;
      $.ajax("whoAmI?_=" + Date.now(), {async:false}).done(
        function(data) {
          result = data.user;
        }
      );

      this.activeUser = result;

      if (this.activeUser === false) {
        this.activeUser = "root";
      }
    },

    url: '/_api/user/',

    model: ArangoQuery,

    activeUser: null,

    parse: function(response) {
      var self = this, toReturn;

      _.each(response.result, function(val) {
        if (val.user === self.activeUser) {
          try {
            if (val.extra.queries) {
              toReturn = val.extra.queries;
            }
          }
          catch (e) {
          }
        }
      });
      return toReturn;
    },

    saveCollectionQueries: function() {
      if (this.activeUser === 0) {
        return false;
      }

      var returnValue = false;
      var queries = [];

      this.each(function(query) {
        queries.push({
          value: query.attributes.value,
          parameter: query.attributes.parameter,
          name: query.attributes.name
        });
      });

      // save current collection
      $.ajax({
        cache: false,
        type: "PATCH",
        async: false,
        url: "/_api/user/" + encodeURIComponent(this.activeUser),
        data: JSON.stringify({
          extra: {
           queries: queries
          }
        }),
        contentType: "application/json",
        processData: false,
        success: function() {
          returnValue = true;
        },
        error: function() {
          returnValue = false;
        }
      });

      return returnValue;
    },

    saveImportQueries: function(file, callback) {

      if (this.activeUser === 0) {
        return false;
      }

      window.progressView.show("Fetching documents...");
      $.ajax({
        cache: false,
        type: "POST",
        async: false,
        url: "query/upload/" + encodeURIComponent(this.activeUser),
        data: file,
        contentType: "application/json",
        processData: false,
        success: function() {
          window.progressView.hide();
          arangoHelper.arangoNotification("Queries successfully imported.");
          callback();
        },
        error: function() {
          window.progressView.hide();
          arangoHelper.arangoError("Query error", "queries could not be imported");
        }
      });
    }

  });
}());

/*jshint browser: true */
/*jshint strict: false, unused: false */
/*global window, Backbone, $, window */

window.ArangoReplication = Backbone.Collection.extend({
  model: window.Replication,

  url: "../api/user",

  getLogState: function () {
    var returnVal;
    $.ajax({
      type: "GET",
      cache: false,
      url: "/_api/replication/logger-state",
      contentType: "application/json",
      processData: false,
      async: false,
      success: function(data) {
        returnVal = data;
      },
      error: function(data) {
        returnVal = data;
      }
    });
    return returnVal;
  },
  getApplyState: function () {
    var returnVal;
    $.ajax({
      type: "GET",
      cache: false,
      url: "/_api/replication/applier-state",
      contentType: "application/json",
      processData: false,
      async: false,
      success: function(data) {
        returnVal = data;
      },
      error: function(data) {
        returnVal = data;
      }
    });
    return returnVal;
  }

});

/*jshint browser: true */
/*jshint unused: false */
/*global Backbone, window */
window.StatisticsCollection = Backbone.Collection.extend({
  model: window.Statistics,
  url: "/_admin/statistics"
});

/*jshint browser: true */
/*jshint strict: false, unused: false */
/*global Backbone, window */
window.StatisticsDescriptionCollection = Backbone.Collection.extend({
  model: window.StatisticsDescription,
  url: "/_admin/statistics-description",
  parse: function(response) {
    return response;
  }
});

/*jshint browser: true */
/*jshint strict: false, unused: false */
/*global window, Backbone, $,_, window */

window.ArangoUsers = Backbone.Collection.extend({
  model: window.Users,

  activeUser: null,
  activeUserSettings: {
    "query" : {},
    "shell" : {},
    "testing": true
  },

  sortOptions: {
    desc: false
  },

  url: "/_api/user",

  //comparator : function(obj) {
  //  return obj.get("user").toLowerCase();
  //},

  comparator: function(item, item2) {
    var a = item.get('user').toLowerCase();
    var b = item2.get('user').toLowerCase();
    if (this.sortOptions.desc === true) {
      return a < b ? 1 : a > b ? -1 : 0;
    }
    return a > b ? 1 : a < b ? -1 : 0;
  },

  login: function (username, password) {
    var result = null;
    $.ajax("login", {
      async: false,
      method: "POST",
      data: JSON.stringify({
        username: username,
        password: password
      }),
      dataType: "json"
    }).done(
      function (data) {
        result = data.user;
      }
    );
    this.activeUser = result;
    return this.activeUser;
  },

  setSortingDesc: function(yesno) {
    this.sortOptions.desc = yesno;
  },

  logout: function () {
    $.ajax("logout", {async:false,method:"POST"});
    this.activeUser = null;
    this.reset();
    window.App.navigate("");
    window.location.reload();
  },

  setUserSettings: function (identifier, content) {
    this.activeUserSettings.identifier = content;
  },

  loadUserSettings: function () {
    var self = this;
    $.ajax({
      type: "GET",
      cache: false,
      url: "/_api/user/" + encodeURIComponent(self.activeUser),
      contentType: "application/json",
      processData: false,
      async: false,
      success: function(data) {
        self.activeUserSettings = data.extra;
      },
      error: function(data) {
      }
    });
  },

  saveUserSettings: function () {
    var self = this;
    $.ajax({
      cache: false,
      type: "PUT",
      async: false, // sequential calls!
      url: "/_api/user/" + encodeURIComponent(self.activeUser),
      data: JSON.stringify({ extra: self.activeUserSettings }),
      contentType: "application/json",
      processData: false,
      success: function(data) {
      },
      error: function(data) {
      }
    });
  },

  parse: function(response)  {
    var result = [];
    _.each(response.result, function(object) {
      result.push(object);
    });
    return result;
  },

  whoAmI: function() {
    if (this.activeUser) {
      return this.activeUser;
    }
    var result;
    $.ajax("whoAmI?_=" + Date.now(), {async:false}).done(
      function(data) {
        result = data.user;
      }
    );
    this.activeUser = result;
    return this.activeUser;
  }


});

/*jshint browser: true */
/*jshint unused: false */
/*global window, Backbone, alert, $ */
(function() {
  "use strict";
  window.FoxxCollection = Backbone.Collection.extend({
    model: window.Foxx,

    sortOptions: {
      desc: false
    },

    url: "/_admin/aardvark/foxxes",

    comparator: function(item, item2) {
      var a, b;
      if (this.sortOptions.desc === true) {
        a = item.get('mount');
        b = item2.get('mount');
        return a < b ? 1 : a > b ? -1 : 0;
      }
      a = item.get('mount');
      b = item2.get('mount');
      return a > b ? 1 : a < b ? -1 : 0;
    },

    setSortingDesc: function(val) {
      this.sortOptions.desc = val;
    },

    // Install Foxx from github repo
    // info is expected to contain: "url" and "version"
    installFromGithub: function (info, mount, callback, flag) {
      var url = "/_admin/aardvark/foxxes/git?mount=" + encodeURIComponent(mount);
      if (flag !== undefined) {
        if (flag) {
          url += "&replace=true";
        } else {
          url += "&upgrade=true";
        }
      }
      $.ajax({
        cache: false,
        type: "PUT",
        url: url,
        data: JSON.stringify(info),
        contentType: "application/json",
        processData: false,
        success: function(data) {
          callback(data);
        },
        error: function(err) {
          callback(err);
        }
      });
    },

    // Install Foxx from arango store
    // info is expected to contain: "name" and "version"
    installFromStore: function (info, mount, callback, flag) {
      var url = "/_admin/aardvark/foxxes/store?mount=" + encodeURIComponent(mount);
      if (flag !== undefined) {
        if (flag) {
          url += "&replace=true";
        } else {
          url += "&upgrade=true";
        }
      }
      $.ajax({
        cache: false,
        type: "PUT",
        url: url,
        data: JSON.stringify(info),
        contentType: "application/json",
        processData: false,
        success: function(data) {
          callback(data);
        },
        error: function(err) {
          callback(err);
        }
      });
    },

    installFromZip: function(fileName, mount, callback, flag) {
      var url = "/_admin/aardvark/foxxes/zip?mount=" + encodeURIComponent(mount);
      if (flag !== undefined) {
        if (flag) {
          url += "&replace=true";
        } else {
          url += "&upgrade=true";
        }
      }
      $.ajax({
        cache: false,
        type: "PUT",
        url: url,
        data: JSON.stringify({zipFile: fileName}),
        contentType: "application/json",
        processData: false,
        success: function(data) {
          callback(data);
        },
        error: function(err) {
          callback(err);
        }
      });
    },

    generate: function (info, mount, callback, flag) {
      var url = "/_admin/aardvark/foxxes/generate?mount=" + encodeURIComponent(mount);
      if (flag !== undefined) {
        if (flag) {
          url += "&replace=true";
        } else {
          url += "&upgrade=true";
        }
      }
      $.ajax({
        cache: false,
        type: "PUT",
        url: url,
        data: JSON.stringify(info),
        contentType: "application/json",
        processData: false,
        success: function(data) {
          callback(data);
        },
        error: function(err) {
          callback(err);
        }
      });
    }

  });
}());

/*jshint browser: true */
/*jshint unused: false */
/*global window, Backbone, $, arangoHelper */
(function () {
  "use strict";

  window.GraphCollection = Backbone.Collection.extend({
    model: window.Graph,

    sortOptions: {
      desc: false
    },

    url: "/_api/gharial",

    dropAndDeleteGraph: function(name, callback) {
      $.ajax({
        type: "DELETE",
        url: "/_api/gharial/" + encodeURIComponent(name) + "?dropCollections=true",
        contentType: "application/json",
        processData: true,
        async: false,
        success: function() {
          arangoHelper.arangoNotification("Graph deleted.");
          callback(true);
          return true;
        },
        error: function(data) {
          try {
            var errorMsg = JSON.parse(data.responseText).errorMessage;
            arangoHelper.arangoError("Graph", errorMsg);
          }
          catch (e) {
            arangoHelper.arangoError("Graph", "Could not delete Graph.");
          }
          callback(false);
          return false;
        }
      });
    },

    comparator: function(item, item2) {
      var a = item.get('_key') || "";
      var b = item2.get('_key') || "";
      a = a.toLowerCase();
      b = b.toLowerCase();
      if (this.sortOptions.desc === true) {
        return a < b ? 1 : a > b ? -1 : 0;
      }
      return a > b ? 1 : a < b ? -1 : 0;
    },

    setSortingDesc: function(val) {
      this.sortOptions.desc = val;
    },

    parse: function(res) {
      if (!res.error) {
        return res.graphs;
      }
    }
  });
}());

/*jshint browser: true */
/*jshint unused: false */
/*global window, Backbone */
(function() {
  "use strict";
  window.NotificationCollection = Backbone.Collection.extend({
    model: window.Notification,
    url: ""
  });
}());

/*jshint browser: true */
/*jshint unused: false */
/*global window, Backbone, $ */
(function() {
  "use strict";
  window.QueryManagementActive = Backbone.Collection.extend({

    model: window.queryManagementModel,

    url: function() {
      return '/_api/query/current';
    },

    killRunningQuery: function(id, callback) {
      var self = this;
      $.ajax({
        url: '/_api/query/'+encodeURIComponent(id),
        type: 'DELETE',
        success: function(result) {
          callback();
        }
      });
    }

  });
}());

/*jshint browser: true */
/*jshint unused: false */
/*global window, Backbone, $ */
(function() {
  "use strict";
  window.QueryManagementSlow = Backbone.Collection.extend({
    model: window.queryManagementModel,
    url: "/_api/query/slow",

    deleteSlowQueryHistory: function(callback) {
      var self = this;
      $.ajax({
        url: self.url,
        type: 'DELETE',
        success: function(result) {
          callback();
        }
      });
    }
  });
}());

/*jshint browser: true */
/*jshint unused: false */
/*global window, Backbone, $ */
(function() {
  "use strict";
  window.WorkMonitorCollection = Backbone.Collection.extend({

    model: window.workMonitorModel,

    url: "/_admin/work-monitor",

    parse: function(response) {
      return response.work;
    }

  });
}());

/*jshint browser: true */
/*jshint unused: false */
/*global Backbone, EJS, $, window, arangoHelper, templateEngine */

(function() {
    "use strict";
    window.PaginationView = Backbone.View.extend({

        // Subclasses need to overwrite this
        collection : null,
        paginationDiv : "",
        idPrefix : "",


        rerender : function () {},

        jumpTo: function(page) {
            this.collection.setPage(page);
            this.rerender();
        },

        firstPage: function() {
            this.jumpTo(1);
        },

        lastPage: function() {
            this.jumpTo(this.collection.getLastPageNumber());
        },

        firstDocuments: function () {
            this.jumpTo(1);
        },
        lastDocuments: function () {
            this.jumpTo(this.collection.getLastPageNumber());
        },
        prevDocuments: function () {
            this.jumpTo(this.collection.getPage() - 1);
        },
        nextDocuments: function () {
            this.jumpTo(this.collection.getPage() + 1);
        },

        renderPagination: function () {
            $(this.paginationDiv).html("");
            var self = this;
            var currentPage = this.collection.getPage();
            var totalPages = this.collection.getLastPageNumber();
            var target = $(this.paginationDiv),
                options = {
                    page: currentPage,
                    lastPage: totalPages,
                    click: function(i) {
                      var split = window.location.hash.split("/");
                      if (split[2] === 'documents') {
                        options.page = i;
                        window.location.hash = split[0] + "/" + split[1] + "/" + split[2] + "/" + i;
                      }
                      else {
                        self.jumpTo(i);
                        options.page = i;
                      }
                    }
                };
            target.html("");
            target.pagination(options);
            $(this.paginationDiv).prepend(
                '<ul class="pre-pagi"><li><a id="' + this.idPrefix +
                    '_first" class="pagination-button">'+
                    '<span><i class="fa fa-angle-double-left"/></span></a></li></ul>'
            );
            $(this.paginationDiv).append(
                '<ul class="las-pagi"><li><a id="' + this.idPrefix +
                    '_last" class="pagination-button">'+
                    '<span><i class="fa fa-angle-double-right"/></span></a></li></ul>'

            );
        }

    });
}());

/*jshint browser: true */
/*global Backbone, $, window, arangoHelper, templateEngine, Joi, _*/
(function() {
  'use strict';

  window.ApplicationDetailView = Backbone.View.extend({
    el: '#content',

    template: templateEngine.createTemplate('applicationDetailView.ejs'),

    events: {
      'click .open': 'openApp',
      'click .delete': 'deleteApp',
      'click #app-config': 'showConfigDialog',
      'click #app-deps': 'showDepsDialog',
      'click #app-switch-mode': 'toggleDevelopment',
      'click #app-scripts [data-script]': 'runScript',
      'click #app-tests': 'runTests',
      'click #app-replace': 'replaceApp',
      'click #download-app': 'downloadApp',
      'click #app-show-swagger': 'showSwagger',
      'click #app-show-readme': 'showReadme',
      'mouseenter #app-scripts': 'showDropdown',
      'mouseleave #app-scripts': 'hideDropdown'
    },

    downloadApp: function() {
      if (!this.model.isSystem()) {
        this.model.download();
      }
    },

    replaceApp: function() {
      var mount = this.model.get('mount');
      window.foxxInstallView.upgrade(mount, function() {
        window.App.applicationDetail(encodeURIComponent(mount));
      });
      $('.createModalDialog .arangoHeader').html("Replace Service");
      $('#infoTab').click();
    },

    updateConfig: function() {
      this.model.getConfiguration(function () {
        $('#app-warning')[this.model.needsAttention() ? 'show' : 'hide']();
        $('#app-warning-config')[this.model.needsConfiguration() ? 'show' : 'hide']();

        if (this.model.needsConfiguration()) {
          $('#app-config').addClass('error');
        }
        else {
          $('#app-config').removeClass('error');
        }
      }.bind(this));
    },

    updateDeps: function() {
      this.model.getDependencies(function () {
        $('#app-warning')[this.model.needsAttention() ? 'show' : 'hide']();
        $('#app-warning-deps')[this.model.hasUnconfiguredDependencies() ? 'show' : 'hide']();
        if (this.model.hasUnconfiguredDependencies()) {
          $('#app-deps').addClass('error');
        }
        else {
          $('#app-deps').removeClass('error');
        }
      }.bind(this));
    },

    toggleDevelopment: function() {
      this.model.toggleDevelopment(!this.model.isDevelopment(), function() {
        if (this.model.isDevelopment()) {
          $('#app-switch-mode').val('Set Production');
          $('#app-development-indicator').css('display', 'inline');
          $('#app-development-path').css('display', 'inline');
        } else {
          $('#app-switch-mode').val('Set Development');
          $('#app-development-indicator').css('display', 'none');
          $('#app-development-path').css('display', 'none');
        }
      }.bind(this));
    },

    runScript: function(event) {
      event.preventDefault();
      var script = $(event.currentTarget).attr('data-script');
      var tableContent = [
        window.modalView.createBlobEntry(
          'app_script_arguments',
          'Script arguments',
          '', null, 'optional', false,
          [{
            rule: function (v) {
              return v && JSON.parse(v);
            },
            msg: 'Must be well-formed JSON or empty'
          }]
        )
      ];
      var buttons = [
        window.modalView.createSuccessButton('Run script', function() {
          var opts = $('#app_script_arguments').val();
          opts = opts && JSON.parse(opts);
          window.modalView.hide();
          this.model.runScript(script, opts, function (err, result) {
            var info;
            if (err) {
              info = (
                '<p>The script failed with an error'
                + (err.statusCode ? (' (HTTP ' + err.statusCode + ')') : '')
                + ':</p>'
                + '<pre>' + err.message + '</pre>'
              );
            } else if (result) {
              info = (
                '<p>Script results:</p>'
                + '<pre>' + JSON.stringify(result, null, 2) + '</pre>'
              );
            } else {
              info = '<p>The script ran successfully.</p>';
            }
            window.modalView.show(
              'modalTable.ejs',
              'Result of script "' + script + '"',
              undefined,
              undefined,
              undefined,
              info
            );
          });
        }.bind(this))
      ];
      window.modalView.show(
        'modalTable.ejs',
        'Run script "' + script + '" on "' + this.model.get('mount') + '"',
        buttons,
        tableContent
      );
    },

    showSwagger: function(event) {
      event.preventDefault();
      this.render('swagger');
    },

    showReadme: function(event) {
      event.preventDefault();
      this.render('readme');
    },

    runTests: function(event) {
      event.preventDefault();
      var warning = (
        '<p><strong>WARNING:</strong> Running tests may result in destructive side-effects including data loss.'
        + ' Please make sure not to run tests on a production database.</p>'
      );
      if (this.model.isDevelopment()) {
        warning += (
          '<p><strong>WARNING:</strong> This app is running in <strong>development mode</strong>.'
          + ' If any of the tests access the app\'s HTTP API they may become non-deterministic.</p>'
        );
      }
      var buttons = [
        window.modalView.createSuccessButton('Run tests', function () {
          window.modalView.hide();
          this.model.runTests({reporter: 'suite'}, function (err, result) {
            window.modalView.show(
              'modalTestResults.ejs',
              'Test results',
              undefined,
              undefined,
              undefined,
              err || result
            );
          });
        }.bind(this))
      ];
      window.modalView.show(
        'modalTable.ejs',
        'Run tests for app "' + this.model.get('mount') + '"',
        buttons,
        undefined,
        undefined,
        warning
      );
    },

    render: function(mode) {

      var self = this;

      $(this.el).html(this.template.render({
        app: this.model,
        db: arangoHelper.currentDatabase(),
        mode: mode
      }));

      $.get(this.appUrl()).success(function () {
        $(".open", this.el).prop('disabled', false);
      }.bind(this));

      this.updateConfig();
      this.updateDeps();

      if (mode === 'swagger') {
        $.get( "./foxxes/docs/swagger.json?mount=" + encodeURIComponent(this.model.get('mount')), function(data) {
          if (Object.keys(data.paths).length < 1) {
            self.render('readme');
            $('#app-show-swagger').attr('disabled', 'true');
          }
        });
      }

      return $(this.el);
    },

    openApp: function() {
      window.open(this.appUrl(), this.model.get('title')).focus();
    },

    deleteApp: function() {
      var buttons = [
        window.modalView.createDeleteButton('Delete', function() {
          var opts = {teardown: $('#app_delete_run_teardown').is(':checked')};
          this.model.destroy(opts, function (err, result) {
            if (!err && result.error === false) {
              window.modalView.hide();
              window.App.navigate('applications', {trigger: true});
            }
          });
        }.bind(this))
      ];
      var tableContent = [
        window.modalView.createCheckboxEntry(
          'app_delete_run_teardown',
          'Run teardown?',
          true,
          'Should this app\'s teardown script be executed before removing the app?',
          true
        )
      ];
      window.modalView.show(
        'modalTable.ejs',
        'Delete Foxx App mounted at "' + this.model.get('mount') + '"',
        buttons,
        tableContent,
        undefined,
        '<p>Are you sure? There is no way back...</p>',
        true
      );
    },

    appUrl: function () {
      return window.location.origin + '/_db/'
      + encodeURIComponent(arangoHelper.currentDatabase())
      + this.model.get('mount');
    },

    applyConfig: function() {
      var cfg = {};
      _.each(this.model.get('config'), function(opt, key) {
        var $el = $('#app_config_' + key);
        var val = $el.val();
        if (opt.type === 'boolean' || opt.type === 'bool') {
          cfg[key] = $el.is(':checked');
          return;
        }
        if (val === '' && opt.hasOwnProperty('default')) {
          cfg[key] = opt.default;
          if (opt.type === 'json') {
            cfg[key] = JSON.stringify(opt.default);
          }
          return;
        }
        if (opt.type === 'number') {
          cfg[key] = parseFloat(val);
        } else if (opt.type === 'integer' || opt.type === 'int') {
          cfg[key] = parseInt(val, 10);
        } else if (opt.type === 'json') {
          cfg[key] = val && JSON.stringify(JSON.parse(val));
        } else {
          cfg[key] = window.arangoHelper.escapeHtml(val);
          return;
        }
      });
      this.model.setConfiguration(cfg, function() {
        window.modalView.hide();
        this.updateConfig();
      }.bind(this));
    },

    showConfigDialog: function() {
      if (_.isEmpty(this.model.get('config'))) {
        return;
      }
      var tableContent = _.map(this.model.get('config'), function(obj, name) {
        var defaultValue = obj.default === undefined ? '' : String(obj.default);
        var currentValue = obj.current === undefined ? '' : String(obj.current);
        var methodName = 'createTextEntry';
        var mandatory = false;
        var checks = [];
        if (obj.type === 'boolean' || obj.type === 'bool') {
          methodName = 'createCheckboxEntry';
          obj.default = obj.default || false;
          defaultValue = obj.default || false;
          currentValue = obj.current || false;
        } else if (obj.type === 'json') {
          methodName = 'createBlobEntry';
          defaultValue = obj.default === undefined ? '' : JSON.stringify(obj.default);
          currentValue = obj.current === undefined ? '' : obj.current;
          checks.push({
            rule: function (v) {
              return v && JSON.parse(v);
            },
            msg: 'Must be well-formed JSON or empty.'
          });
        } else if (obj.type === 'integer' || obj.type === 'int') {
          checks.push({
            rule: Joi.number().integer().optional().allow(''),
            msg: 'Has to be an integer.'
          });
        } else if (obj.type === 'number') {
          checks.push({
            rule: Joi.number().optional().allow(''),
            msg: 'Has to be a number.'
          });
        } else {
          if (obj.type === 'password') {
            methodName = 'createPasswordEntry';
          }
          checks.push({
            rule: Joi.string().optional().allow(''),
            msg: 'Has to be a string.'
          });
        }
        if (obj.default === undefined && obj.required !== false) {
          mandatory = true;
          checks.unshift({
            rule: Joi.any().required(),
            msg: 'This field is required.'
          });
        }
        return window.modalView[methodName](
          'app_config_' + name,
          name,
          currentValue,
          obj.description,
          defaultValue,
          mandatory,
          checks
        );
      });
      var buttons = [
        window.modalView.createSuccessButton('Apply', this.applyConfig.bind(this))
      ];
      window.modalView.show(
        'modalTable.ejs', 'Configuration', buttons, tableContent
      );

    },

    applyDeps: function() {
      var deps = {};
      _.each(this.model.get('deps'), function(title, name) {
        var $el = $('#app_deps_' + name);
        deps[name] = window.arangoHelper.escapeHtml($el.val());
      });
      this.model.setDependencies(deps, function() {
        window.modalView.hide();
        this.updateDeps();
      }.bind(this));
    },

    showDepsDialog: function() {
      if (_.isEmpty(this.model.get('deps'))) {
        return;
      }
      var tableContent = _.map(this.model.get('deps'), function(obj, name) {
        var currentValue = obj.current === undefined ? '' : String(obj.current);
        var defaultValue = '';
        var description = obj.definition.name;
        if (obj.definition.version !== '*') {
          description += '@' + obj.definition.version;
        }
        var checks = [{
          rule: Joi.string().optional().allow(''),
          msg: 'Has to be a string.'
        }];
        if (obj.definition.required) {
          checks.push({
            rule: Joi.string().required(),
            msg: 'This value is required.'
          });
        }
        return window.modalView.createTextEntry(
          'app_deps_' + name,
          obj.title,
          currentValue,
          description,
          defaultValue,
          obj.definition.required,
          checks
        );
      });
      var buttons = [
        window.modalView.createSuccessButton('Apply', this.applyDeps.bind(this))
      ];
      window.modalView.show(
        'modalTable.ejs', 'Dependencies', buttons, tableContent
      );

    },

    showDropdown: function () {
      if (!_.isEmpty(this.model.get('scripts'))) {
        $('#scripts_dropdown').show(200);
      }
    },

    hideDropdown: function () {
      $('#scripts_dropdown').hide();
    }
  });
}());

/*jshint browser: true */
/*global Backbone, $, window, arangoHelper, templateEngine, _*/
(function() {
  "use strict";

  window.ApplicationsView = Backbone.View.extend({
    el: '#content',

    template: templateEngine.createTemplate("applicationsView.ejs"),

    events: {
      "click #addApp"                : "createInstallModal",
      "click #foxxToggle"            : "slideToggle",
      "click #checkDevel"            : "toggleDevel",
      "click #checkProduction"       : "toggleProduction",
      "click #checkSystem"           : "toggleSystem"
    },

    fixCheckboxes: function() {
      if (this._showDevel) {
        $('#checkDevel').attr('checked', 'checked');
      }
      else {
        $('#checkDevel').removeAttr('checked');
      }
      if (this._showSystem) {
        $('#checkSystem').attr('checked', 'checked');
      }
      else {
        $('#checkSystem').removeAttr('checked');
      }
      if (this._showProd) {
        $('#checkProduction').attr('checked', 'checked');
      }
      else {
        $('#checkProduction').removeAttr('checked');
      }
      $('#checkDevel').next().removeClass('fa fa-check-square-o fa-square-o').addClass('fa');
      $('#checkSystem').next().removeClass('fa fa-check-square-o fa-square-o').addClass('fa');
      $('#checkProduction').next().removeClass('fa fa-check-square-o fa-square-o').addClass('fa');
      arangoHelper.setCheckboxStatus('#foxxDropdown');
    },

    toggleDevel: function() {
      var self = this;
      this._showDevel = !this._showDevel;
      _.each(this._installedSubViews, function(v) {
        v.toggle("devel", self._showDevel);
      });
      this.fixCheckboxes();
    },

    toggleProduction: function() {
      var self = this;
      this._showProd = !this._showProd;
      _.each(this._installedSubViews, function(v) {
        v.toggle("production", self._showProd);
      });
      this.fixCheckboxes();
    },

    toggleSystem: function() {
      this._showSystem = !this._showSystem;
      var self = this;
      _.each(this._installedSubViews, function(v) {
        v.toggle("system", self._showSystem);
      });
      this.fixCheckboxes();
    },

    reload: function() {
      var self = this;

      // unbind and remove any unused views
      _.each(this._installedSubViews, function (v) {
        v.undelegateEvents();
      });

      this.collection.fetch({
        success: function() {
          self.createSubViews();
          self.render();
        }
      });
    },

    createSubViews: function() {
      var self = this;
      this._installedSubViews = { };

      self.collection.each(function (foxx) {
        var subView = new window.FoxxActiveView({
          model: foxx,
          appsView: self
        });
        self._installedSubViews[foxx.get('mount')] = subView;
      });
    },

    initialize: function() {
      this._installedSubViews = {};
      this._showDevel = true;
      this._showProd = true;
      this._showSystem = false;
      this.reload();
    },

    slideToggle: function() {
      $('#foxxToggle').toggleClass('activated');
      $('#foxxDropdownOut').slideToggle(200);
    },

    createInstallModal: function(event) {
      event.preventDefault();
      window.foxxInstallView.install(this.reload.bind(this));
    },

    render: function() {
      this.collection.sort();

      $(this.el).html(this.template.render({}));
      _.each(this._installedSubViews, function (v) {
        $("#installedList").append(v.render());
      });
      this.delegateEvents();
      $('#checkDevel').attr('checked', this._showDevel);
      $('#checkProduction').attr('checked', this._showProd);
      $('#checkSystem').attr('checked', this._showSystem);
      arangoHelper.setCheckboxStatus("#foxxDropdown");
      
      var self = this;
      _.each(this._installedSubViews, function(v) {
        v.toggle("devel", self._showDevel);
        v.toggle("system", self._showSystem);
      });

      arangoHelper.fixTooltips("icon_arangodb", "left");
      return this;
    }

  });

  /* Info for mountpoint
   *
   *
      window.modalView.createTextEntry(
        "mount-point",
        "Mount",
        "",
        "The path the app will be mounted. Has to start with /. Is not allowed to start with /_",
        "/my/app",
        true,
        [
          {
            rule: Joi.string().required(),
            msg: "No mountpoint given."
          },
          {
            rule: Joi.string().regex(/^\/[^_]/),
            msg: "Mountpoints with _ are reserved for internal use."
          },
          {
            rule: Joi.string().regex(/^(\/[a-zA-Z0-9_\-%]+)+$/),
            msg: "Mountpoints have to start with / and can only contain [a-zA-Z0-9_-%]"
          }
        ]
      )
   */
}());

/*jshint browser: true */
/*jshint unused: false */
/*global window, exports, Backbone, EJS, _, $, templateEngine, arangoHelper, Joi*/

(function() {
  "use strict";

  window.CollectionListItemView = Backbone.View.extend({

    tagName: "div",
    className: "tile",
    template: templateEngine.createTemplate("collectionsItemView.ejs"),

    initialize: function () {
      this.collectionsView = this.options.collectionsView;
    },

    events: {
      'click .iconSet.icon_arangodb_settings2': 'createEditPropertiesModal',
      'click .pull-left' : 'noop',
      'click .icon_arangodb_settings2' : 'editProperties',
      'click .spanInfo' : 'showProperties',
      'click': 'selectCollection'
    },

    render: function () {
      if (this.model.get("locked")) {
        $(this.el).addClass('locked');
        $(this.el).addClass(this.model.get("lockType"));
      } 
      else {
        $(this.el).removeClass('locked');
      }
      if (this.model.get("status") === 'loading') {
        $(this.el).addClass('locked');
      }
      $(this.el).html(this.template.render({
        model: this.model
      }));
      $(this.el).attr('id', 'collection_' + this.model.get('name'));

      return this;
    },

    editProperties: function (event) {
      if (this.model.get("locked")) {
        return 0;
      }
      event.stopPropagation();
      this.createEditPropertiesModal();
    },

    showProperties: function(event) {
      if (this.model.get("locked")) {
        return 0;
      }
      event.stopPropagation();
      this.createInfoModal();
    },

    selectCollection: function(event) {

      //check if event was fired from disabled button
      if ($(event.target).hasClass("disabled")) {
        return 0;
      }
      if (this.model.get("locked")) {
        return 0;
      }
      if (this.model.get("status") === 'loading' ) {
        return 0;
      }

      if (this.model.get("status") === 'unloaded' ) {
        this.loadCollection();
      }
      else {
        window.App.navigate(
          "collection/" + encodeURIComponent(this.model.get("name")) + "/documents/1", {trigger: true}
        );
      }

    },

    noop: function(event) {
      event.stopPropagation();
    },

    unloadCollection: function () {

      var unloadCollectionCallback = function(error) {
        if (error) {
          arangoHelper.arangoError('Collection error', this.model.get("name") + ' could not be unloaded.');
        }
        else if (error === undefined) {
          this.model.set("status", "unloading");
          this.render();
        }
        else {
          if (window.location.hash === "#collections") {
            this.model.set("status", "unloaded");
            this.render();
          }
          else {
            arangoHelper.arangoNotification("Collection " + this.model.get("name") + " unloaded.");
          }
        }
      }.bind(this);

      this.model.unloadCollection(unloadCollectionCallback);
      window.modalView.hide();
    },

    loadCollection: function () {
    
      var loadCollectionCallback = function(error) {
        if (error) {
          arangoHelper.arangoError('Collection error', this.model.get("name") + ' could not be loaded.');
        }
        else if (error === undefined) {
          this.model.set("status", "loading");
          this.render();
        }
        else {
          if (window.location.hash === "#collections") {
            this.model.set("status", "loaded");
            this.render();
          }
          else {
            arangoHelper.arangoNotification("Collection " + this.model.get("name") + " loaded.");
          }
        }
      }.bind(this);

      this.model.loadCollection(loadCollectionCallback);
      window.modalView.hide();
    },

    truncateCollection: function () {
      this.model.truncateCollection();
      this.render();
      window.modalView.hide();
    },

    deleteCollection: function () {
      this.model.destroy(
        {
          error: function() {
            arangoHelper.arangoError('Could not delete collection.');
          },
          success: function() {
            window.modalView.hide();
          }
        }
      );
      this.collectionsView.render();
    },

    saveModifiedCollection: function() {
      var newname;
      if (window.isCoordinator()) {
        newname = this.model.get('name');
      }
      else {
        newname = $('#change-collection-name').val();
      }

      var status = this.model.get('status');

      if (status === 'loaded') {
        var journalSize;
        try {
          journalSize = JSON.parse($('#change-collection-size').val() * 1024 * 1024);
        }
        catch (e) {
          arangoHelper.arangoError('Please enter a valid number');
          return 0;
        }

        var indexBuckets;
        try {
          indexBuckets = JSON.parse($('#change-index-buckets').val());
          if (indexBuckets < 1 || parseInt(indexBuckets) !== Math.pow(2, Math.log2(indexBuckets))) {
            throw "invalid indexBuckets value";
          }
        }
        catch (e) {
          arangoHelper.arangoError('Please enter a valid number of index buckets');
          return 0;
        }

        var result;
        if (this.model.get('name') !== newname) {
          result = this.model.renameCollection(newname);
        }

        if (result !== true) {
          if (result !== undefined) {
            arangoHelper.arangoError("Collection error: " + result);
            return 0;
          }
        }

        var wfs = $('#change-collection-sync').val();
        var changeResult = this.model.changeCollection(wfs, journalSize, indexBuckets);

        if (changeResult !== true) {
          arangoHelper.arangoNotification("Collection error", changeResult);
          return 0;
        }

        this.collectionsView.render();
        window.modalView.hide();
      }
      else if (status === 'unloaded') {
        if (this.model.get('name') !== newname) {
          var result2 = this.model.renameCollection(newname);

          if (result2 === true) {
            this.collectionsView.render();
            window.modalView.hide();
          }
          else {
            arangoHelper.arangoError("Collection error: " + result2);
          }
        }
        else {
          window.modalView.hide();
        }
      }
    },



    //modal dialogs

    createEditPropertiesModal: function() {

      var collectionIsLoaded = false;

      if (this.model.get('status') === "loaded") {
        collectionIsLoaded = true;
      }

      var buttons = [],
        tableContent = [];

      if (! window.isCoordinator()) {
        tableContent.push(
          window.modalView.createTextEntry(
            "change-collection-name",
            "Name",
            this.model.get('name'),
            false,
            "",
            true,
            [
              {
                rule: Joi.string().regex(/^[a-zA-Z]/),
                msg: "Collection name must always start with a letter."
              },
              {
                rule: Joi.string().regex(/^[a-zA-Z0-9\-_]*$/),
                msg: 'Only Symbols "_" and "-" are allowed.'
              },
              {
                rule: Joi.string().required(),
                msg: "No collection name given."
              }
            ]
          )
        );
      }

      if (collectionIsLoaded) {
        // needs to be refactored. move getProperties into model
        var journalSize = this.model.getProperties().journalSize;
        journalSize = journalSize/(1024*1024);

        tableContent.push(
          window.modalView.createTextEntry(
            "change-collection-size",
            "Journal size",
            journalSize,
            "The maximal size of a journal or datafile (in MB). Must be at least 1.",
            "",
            true,
            [
              {
                rule: Joi.string().allow('').optional().regex(/^[0-9]*$/),
                msg: "Must be a number."
              }
            ]
          )
        );
        
        var indexBuckets = this.model.getProperties().indexBuckets;
        
        tableContent.push(
          window.modalView.createTextEntry(
            "change-index-buckets",
            "Index buckets",
            indexBuckets,
            "The number of index buckets for this collection. Must be at least 1 and a power of 2.",
            "",
            true,
            [
              {
                rule: Joi.string().allow('').optional().regex(/^[1-9][0-9]*$/),
                msg: "Must be a number greater than 1 and a power of 2."
              }
            ]
          )
        );

        // prevent "unexpected sync method error"
        var wfs = this.model.getProperties().waitForSync;
        tableContent.push(
          window.modalView.createSelectEntry(
            "change-collection-sync",
            "Wait for sync",
            wfs,
            "Synchronize to disk before returning from a create or update of a document.",
            [{value: false, label: "No"}, {value: true, label: "Yes"}]        )
        );
      }

      tableContent.push(
        window.modalView.createReadOnlyEntry(
          "change-collection-id", "ID", this.model.get('id'), ""
        )
      );
      tableContent.push(
        window.modalView.createReadOnlyEntry(
          "change-collection-type", "Type", this.model.get('type'), ""
        )
      );
      tableContent.push(
        window.modalView.createReadOnlyEntry(
          "change-collection-status", "Status", this.model.get('status'), ""
        )
      );
      buttons.push(
        window.modalView.createDeleteButton(
          "Delete",
          this.deleteCollection.bind(this)
        )
      );
      buttons.push(
        window.modalView.createDeleteButton(
          "Truncate",
          this.truncateCollection.bind(this)
        )
      );
      if (collectionIsLoaded) {
        buttons.push(
          window.modalView.createNotificationButton(
            "Unload",
            this.unloadCollection.bind(this)
          )
        );
      } else {
        buttons.push(
          window.modalView.createNotificationButton(
            "Load",
            this.loadCollection.bind(this)
          )
        );
      }

      buttons.push(
        window.modalView.createSuccessButton(
          "Save",
          this.saveModifiedCollection.bind(this)
        )
      );

      var tabBar = ["General", "Indices"],
      templates =  ["modalTable.ejs", "indicesView.ejs"];

      window.modalView.show(
        templates,
        "Modify Collection",
        buttons,
        tableContent, null, null,
        this.events, null,
        tabBar
      );
      if (this.model.get("status") === 'loaded') {
        this.getIndex();
      }
      else {
        $($('#infoTab').children()[1]).remove();
      }
      this.bindIndexEvents();
    },

    bindIndexEvents: function() {
      this.unbindIndexEvents();
      var self = this;

      $('#indexEditView #addIndex').bind('click', function() {
        self.toggleNewIndexView();

        $('#cancelIndex').unbind('click');
        $('#cancelIndex').bind('click', function() {
          self.toggleNewIndexView();
        });

        $('#createIndex').unbind('click');
        $('#createIndex').bind('click', function() {
          self.createIndex();
        });

      });

      $('#newIndexType').bind('change', function() {
        self.selectIndexType();
      });

      $('.deleteIndex').bind('click', function(e) {
        self.prepDeleteIndex(e);
      });

      $('#infoTab a').bind('click', function(e) {
        $('#indexDeleteModal').remove();
        if ($(e.currentTarget).html() === 'Indices'  && !$(e.currentTarget).parent().hasClass('active')) {

          $('#newIndexView').hide();
          $('#indexEditView').show();

          $('#modal-dialog .modal-footer .button-danger').hide();  
          $('#modal-dialog .modal-footer .button-success').hide();  
          $('#modal-dialog .modal-footer .button-notification').hide();
          $('#addIndex').detach().appendTo('#modal-dialog .modal-footer');
        }
        if ($(e.currentTarget).html() === 'General' && !$(e.currentTarget).parent().hasClass('active')) {
          $('#modal-dialog .modal-footer .button-danger').show();  
          $('#modal-dialog .modal-footer .button-success').show();  
          $('#modal-dialog .modal-footer .button-notification').show();
          var elem = $('.index-button-bar')[0]; 
          var elem2 = $('.index-button-bar2')[0]; 
          $('#addIndex').detach().appendTo(elem);
          if ($('#cancelIndex').is(':visible')) {
            $('#cancelIndex').detach().appendTo(elem2);
            $('#createIndex').detach().appendTo(elem2);
          }
        }
      });

    },

    unbindIndexEvents: function() {
      $('#indexEditView #addIndex').unbind('click');
      $('#newIndexType').unbind('change');
      $('#infoTab a').unbind('click');
      $('.deleteIndex').unbind('click');
      /*
      //$('#documentsToolbar ul').unbind('click');
      this.markFilterToggle();
      this.changeEditMode(false);
     0Ads0asd0sd0f0asdf0sa0f
      "click #documentsToolbar ul"    : "resetIndexForms"
      */
    },

    createInfoModal: function() {
      var buttons = [],
        tableContent = this.model;
      window.modalView.show(
        "modalCollectionInfo.ejs",
        "Collection: " + this.model.get('name'),
        buttons,
        tableContent
      );
    },
    //index functions
    resetIndexForms: function () {
      $('#indexHeader input').val('').prop("checked", false);
      $('#newIndexType').val('Cap').prop('selected',true);
      this.selectIndexType();
    },

    createIndex: function () {
      //e.preventDefault();
      var self = this;
      var indexType = $('#newIndexType').val();
      var result;
      var postParameter = {};
      var fields;
      var unique;
      var sparse;

      switch (indexType) {
        case 'Cap':
          var size = parseInt($('#newCapSize').val(), 10) || 0;
          var byteSize = parseInt($('#newCapByteSize').val(), 10) || 0;
          postParameter = {
            type: 'cap',
            size: size,
            byteSize: byteSize
          };
          break;
        case 'Geo':
          //HANDLE ARRAY building
          fields = $('#newGeoFields').val();
          var geoJson = self.checkboxToValue('#newGeoJson');
          var constraint = self.checkboxToValue('#newGeoConstraint');
          var ignoreNull = self.checkboxToValue('#newGeoIgnoreNull');
          postParameter = {
            type: 'geo',
            fields: self.stringToArray(fields),
            geoJson: geoJson,
            constraint: constraint,
            ignoreNull: ignoreNull
          };
          break;
        case 'Hash':
          fields = $('#newHashFields').val();
          unique = self.checkboxToValue('#newHashUnique');
          sparse = self.checkboxToValue('#newHashSparse');
          postParameter = {
            type: 'hash',
            fields: self.stringToArray(fields),
            unique: unique,
            sparse: sparse
          };
          break;
        case 'Fulltext':
          fields = ($('#newFulltextFields').val());
          var minLength =  parseInt($('#newFulltextMinLength').val(), 10) || 0;
          postParameter = {
            type: 'fulltext',
            fields: self.stringToArray(fields),
            minLength: minLength
          };
          break;
        case 'Skiplist':
          fields = $('#newSkiplistFields').val();
          unique = self.checkboxToValue('#newSkiplistUnique');
          sparse = self.checkboxToValue('#newSkiplistSparse');
          postParameter = {
            type: 'skiplist',
            fields: self.stringToArray(fields),
            unique: unique,
            sparse: sparse
          };
          break;
      }
      var callback = function(error, msg){
        if (error) {
          if (msg) {
            var message = JSON.parse(msg.responseText);
            arangoHelper.arangoError("Document error", message.errorMessage);
          }
          else {
            arangoHelper.arangoError("Document error", "Could not create index.");
          }
        }
        self.refreshCollectionsView();
      };

      window.modalView.hide();
      //$($('#infoTab').children()[1]).find('a').click();
      self.model.createIndex(postParameter, callback);
    },

    lastTarget: null,

    prepDeleteIndex: function (e) {
      var self = this;
      this.lastTarget = e;

      this.lastId = $(this.lastTarget.currentTarget).
                    parent().
                    parent().
                    first().
                    children().
                    first().
                    text();
      //window.modalView.hide();

      //delete modal
      $("#modal-dialog .modal-footer").after(
        '<div id="indexDeleteModal" style="display:block;" class="alert alert-error modal-delete-confirmation">' +
          '<strong>Really delete?</strong>' +
          '<button id="indexConfirmDelete" class="button-danger pull-right modal-confirm-delete">Yes</button>' +
          '<button id="indexAbortDelete" class="button-neutral pull-right">No</button>' +
        '</div>');
      $('#indexConfirmDelete').unbind('click');
      $('#indexConfirmDelete').bind('click', function() {
        $('#indexDeleteModal').remove();
        self.deleteIndex();
      });

      $('#indexAbortDelete').unbind('click');
      $('#indexAbortDelete').bind('click', function() {
        $('#indexDeleteModal').remove();
      });


    },

    refreshCollectionsView: function() {
      window.App.arangoCollectionsStore.fetch({
        success: function () {
          window.App.collectionsView.render();
        }
      });
    },

    deleteIndex: function () {
      var callback = function(error) {
        if (error) {
          arangoHelper.arangoError("Could not delete index");
          $("tr th:contains('"+ this.lastId+"')").parent().children().last().html(
            '<span class="deleteIndex icon_arangodb_roundminus"' + 
            ' data-original-title="Delete index" title="Delete index"></span>'
          );
          this.model.set("locked", false);
          this.refreshCollectionsView();
        }
        else if (!error && error !== undefined) {
          $("tr th:contains('"+ this.lastId+"')").parent().remove();
          this.model.set("locked", false);
          this.refreshCollectionsView();
        }
        this.refreshCollectionsView();
      }.bind(this);

      this.model.set("locked", true);
      this.model.deleteIndex(this.lastId, callback);

      $("tr th:contains('"+ this.lastId+"')").parent().children().last().html(
        '<i class="fa fa-circle-o-notch fa-spin"></i>'
      );
    },

    selectIndexType: function () {
      $('.newIndexClass').hide();
      var type = $('#newIndexType').val();
      $('#newIndexType'+type).show();
    },

    getIndex: function () {
      this.index = this.model.getIndex();
      var cssClass = 'collectionInfoTh modal-text';
      if (this.index) {
        var fieldString = '';
        var actionString = '';

        _.each(this.index.indexes, function(v) {
          if (v.type === 'primary' || v.type === 'edge') {
            actionString = '<span class="icon_arangodb_locked" ' +
              'data-original-title="No action"></span>';
          }
          else {
            actionString = '<span class="deleteIndex icon_arangodb_roundminus" ' +
              'data-original-title="Delete index" title="Delete index"></span>';
          }

          if (v.fields !== undefined) {
            fieldString = v.fields.join(", ");
          }

          //cut index id
          var position = v.id.indexOf('/');
          var indexId = v.id.substr(position + 1, v.id.length);
          var selectivity = (
            v.hasOwnProperty("selectivityEstimate") ? 
            (v.selectivityEstimate * 100).toFixed(2) + "%" : 
            "n/a"
          );
          var sparse = (v.hasOwnProperty("sparse") ? v.sparse : "n/a");

          $('#collectionEditIndexTable').append(
            '<tr>' +
            '<th class=' + JSON.stringify(cssClass) + '>' + indexId + '</th>' +
            '<th class=' + JSON.stringify(cssClass) + '>' + v.type + '</th>' +
            '<th class=' + JSON.stringify(cssClass) + '>' + v.unique + '</th>' +
            '<th class=' + JSON.stringify(cssClass) + '>' + sparse + '</th>' +
            '<th class=' + JSON.stringify(cssClass) + '>' + selectivity + '</th>' +
            '<th class=' + JSON.stringify(cssClass) + '>' + fieldString + '</th>' +
            '<th class=' + JSON.stringify(cssClass) + '>' + actionString + '</th>' +
            '</tr>'
          );
        });
      }
    },

    toggleNewIndexView: function () {
      var elem = $('.index-button-bar2')[0];
      var elem2 = $('.index-button-bar')[0];
      if ($('#indexEditView').is(':visible')) {
        $('#indexEditView').hide();
        $('#newIndexView').show();
        $('#addIndex').detach().appendTo(elem2);
        $('#cancelIndex').detach().appendTo('#modal-dialog .modal-footer');
        $('#createIndex').detach().appendTo('#modal-dialog .modal-footer');

      }
      else {
        $('#indexEditView').show();
        $('#newIndexView').hide();
        $('#addIndex').detach().appendTo('#modal-dialog .modal-footer');
        $('#cancelIndex').detach().appendTo(elem);
        $('#createIndex').detach().appendTo(elem);
      }

      arangoHelper.fixTooltips(".icon_arangodb, .arangoicon", "right");
      this.resetIndexForms();
    },

    stringToArray: function (fieldString) {
      var fields = [];
      fieldString.split(',').forEach(function(field){
        field = field.replace(/(^\s+|\s+$)/g,'');
        if (field !== '') {
          fields.push(field);
        }
      });
      return fields;
    },

    checkboxToValue: function (id) {
      return $(id).prop('checked');
    }

  });
}());

/*jshint browser: true */
/*jshint unused: false */
/*global _, Backbone, templateEngine, window, setTimeout, clearTimeout, arangoHelper, Joi, $*/

(function() {
  "use strict";
  window.CollectionsView = Backbone.View.extend({
    el: '#content',
    el2: '#collectionsThumbnailsIn',

    searchTimeout: null,
    refreshRate: 2000,

    template: templateEngine.createTemplate("collectionsView.ejs"),

    checkLockedCollections: function() {

      var self = this,
      lockedCollections = window.arangoHelper.syncAndReturnUninishedAardvarkJobs('index');

      this.collection.each(function(model) {
        model.set('locked', false);
      });

      _.each(lockedCollections, function(locked) {
        var model = self.collection.findWhere({
          id: locked.collection 
        });
        model.set('locked', true);
        model.set('lockType', locked.type);
        model.set('desc', locked.desc);
      });

      this.collection.each(function(model) {
        if (model.get("locked") || model.get("status") === 'loading') {
          $('#collection_' + model.get("name")).addClass('locked');
        }
        else {
          $('#collection_' + model.get("name")).removeClass('locked');
          $('#collection_' + model.get("name") + ' .corneredBadge').text(model.get("status"));
          if ($('#collection_' + model.get("name") + ' .corneredBadge').hasClass('inProgress')) {
            $('#collection_' + model.get("name") + ' .corneredBadge').removeClass('inProgress');
            $('#collection_' + model.get("name") + ' .corneredBadge').addClass('loaded');
          }
        }
        if (model.get("status") === 'loading') {
          $('#collection_' + model.get("name")).removeClass('loading');
        }
      });

    },

    initialize: function() {
      var self = this;

      window.setInterval(function() {
        self.checkLockedCollections();
      }, self.refreshRate);

    },

    render: function () {

      this.checkLockedCollections();
      var dropdownVisible = false;

      if ($('#collectionsDropdown').is(':visible')) {
        dropdownVisible = true;
      }

      $(this.el).html(this.template.render({}));
      this.setFilterValues();

      if (dropdownVisible === true) {
        $('#collectionsDropdown2').show();
      }

      var searchOptions = this.collection.searchOptions;

      this.collection.getFiltered(searchOptions).forEach(function (arango_collection) {
        $('#collectionsThumbnailsIn', this.el).append(new window.CollectionListItemView({
          model: arango_collection,
          collectionsView: this
        }).render().el);
      }, this);

      //if type in collectionsDropdown2 is changed,
      //the page will be rerendered, so check the toggel button
      if($('#collectionsDropdown2').css('display') === 'none') {
        $('#collectionsToggle').removeClass('activated');

      } else {
        $('#collectionsToggle').addClass('activated');
      }

      var length;
      arangoHelper.setCheckboxStatus("#collectionsDropdown");

      try {
        length = searchOptions.searchPhrase.length;
      }
      catch (ignore) {
      }
      $('#searchInput').val(searchOptions.searchPhrase);
      $('#searchInput').focus();
      $('#searchInput')[0].setSelectionRange(length, length);


      arangoHelper.fixTooltips(".icon_arangodb, .arangoicon", "left");


      return this;
    },

    events: {
      "click #createCollection"        : "createCollection",
      "keydown #searchInput"           : "restrictToSearchPhraseKey",
      "change #searchInput"            : "restrictToSearchPhrase",
      "click #searchSubmit"            : "restrictToSearchPhrase",
      "click .checkSystemCollections"  : "checkSystem",
      "click #checkLoaded"             : "checkLoaded",
      "click #checkUnloaded"           : "checkUnloaded",
      "click #checkDocument"           : "checkDocument",
      "click #checkEdge"               : "checkEdge",
      "click #sortName"                : "sortName",
      "click #sortType"                : "sortType",
      "click #sortOrder"               : "sortOrder",
      "click #collectionsToggle"       : "toggleView",
      "click .css-label"               : "checkBoxes"
    },

    updateCollectionsView: function() {
      var self = this;
      this.collection.fetch({
        success: function() {
          self.render();
        }
      });
    },


    toggleView: function() {
      $('#collectionsToggle').toggleClass('activated');
      $('#collectionsDropdown2').slideToggle(200);
    },

    checkBoxes: function (e) {
      //chrome bugfix
      var clicked = e.currentTarget.id;
      $('#'+clicked).click();
    },

    checkSystem: function () {
      var searchOptions = this.collection.searchOptions;
      var oldValue = searchOptions.includeSystem;

      searchOptions.includeSystem = ($('.checkSystemCollections').is(":checked") === true);

      if (oldValue !== searchOptions.includeSystem) {
        this.render();
      }
    },
    checkEdge: function () {
      var searchOptions = this.collection.searchOptions;
      var oldValue = searchOptions.includeEdge;

      searchOptions.includeEdge = ($('#checkEdge').is(":checked") === true);

      if (oldValue !== searchOptions.includeEdge) {
        this.render();
      }
    },
    checkDocument: function () {
      var searchOptions = this.collection.searchOptions;
      var oldValue = searchOptions.includeDocument;

      searchOptions.includeDocument = ($('#checkDocument').is(":checked") === true);

      if (oldValue !== searchOptions.includeDocument) {
        this.render();
      }
    },
    checkLoaded: function () {
      var searchOptions = this.collection.searchOptions;
      var oldValue = searchOptions.includeLoaded;

      searchOptions.includeLoaded = ($('#checkLoaded').is(":checked") === true);

      if (oldValue !== searchOptions.includeLoaded) {
        this.render();
      }
    },
    checkUnloaded: function () {
      var searchOptions = this.collection.searchOptions;
      var oldValue = searchOptions.includeUnloaded;

      searchOptions.includeUnloaded = ($('#checkUnloaded').is(":checked") === true);

      if (oldValue !== searchOptions.includeUnloaded) {
        this.render();
      }
    },
    sortName: function () {
      var searchOptions = this.collection.searchOptions;
      var oldValue = searchOptions.sortBy;

      searchOptions.sortBy = (($('#sortName').is(":checked") === true) ? 'name' : 'type');
      if (oldValue !== searchOptions.sortBy) {
        this.render();
      }
    },
    sortType: function () {
      var searchOptions = this.collection.searchOptions;
      var oldValue = searchOptions.sortBy;

      searchOptions.sortBy = (($('#sortType').is(":checked") === true) ? 'type' : 'name');
      if (oldValue !== searchOptions.sortBy) {
        this.render();
      }
    },
    sortOrder: function () {
      var searchOptions = this.collection.searchOptions;
      var oldValue = searchOptions.sortOrder;

      searchOptions.sortOrder = (($('#sortOrder').is(":checked") === true) ? -1 : 1);
      if (oldValue !== searchOptions.sortOrder) {
        this.render();
      }
    },

    setFilterValues: function () {
      var searchOptions = this.collection.searchOptions;
      $('#checkLoaded').attr('checked', searchOptions.includeLoaded);
      $('#checkUnloaded').attr('checked', searchOptions.includeUnloaded);
      $('.checkSystemCollections').attr('checked', searchOptions.includeSystem);
      $('#checkEdge').attr('checked', searchOptions.includeEdge);
      $('#checkDocument').attr('checked', searchOptions.includeDocument);
      $('#sortName').attr('checked', searchOptions.sortBy !== 'type');
      $('#sortType').attr('checked', searchOptions.sortBy === 'type');
      $('#sortOrder').attr('checked', searchOptions.sortOrder !== 1);
    },

    search: function () {
      var searchOptions = this.collection.searchOptions;
      var searchPhrase = $('#searchInput').val();
      if (searchPhrase === searchOptions.searchPhrase) {
        return;
      }
      searchOptions.searchPhrase = searchPhrase;

      this.render();
    },

    resetSearch: function () {
      if (this.searchTimeout) {
        clearTimeout(this.searchTimeout);
        this.searchTimeout = null;
      }

      var searchOptions = this.collection.searchOptions;
      searchOptions.searchPhrase = null;
    },

    restrictToSearchPhraseKey: function () {
      // key pressed in search box
      var self = this;

      // force a new a search
      this.resetSearch();

      self.searchTimeout = setTimeout(function (){
        self.search();
      }, 200);
    },

    restrictToSearchPhrase: function () {
      // force a new a search
      this.resetSearch();

      // search executed
      this.search();
    },

    createCollection: function(e) {
      e.preventDefault();
      this.createNewCollectionModal();
    },

    submitCreateCollection: function() {
      var collName = $('#new-collection-name').val();
      var collSize = $('#new-collection-size').val();
      var collType = $('#new-collection-type').val();
      var collSync = $('#new-collection-sync').val();
      var shards = 1;
      var shardBy = [];
      if (window.isCoordinator()) {
        shards = $('#new-collection-shards').val();
        if (shards === "") {
          shards = 1;
        }
        shards = parseInt(shards, 10);
        if (shards < 1) {
          arangoHelper.arangoError(
            "Number of shards has to be an integer value greater or equal 1"
          );
          return 0;
        }
        shardBy = _.pluck($('#new-collection-shardBy').select2("data"), "text");
        if (shardBy.length === 0) {
          shardBy.push("_key");
        }
      }
      //no new system collections via webinterface
      //var isSystem = (collName.substr(0, 1) === '_');
      if (collName.substr(0, 1) === '_') {
        arangoHelper.arangoError('No "_" allowed as first character!');
        return 0;
      }
      var isSystem = false;
      var wfs = (collSync === "true");
      if (collSize > 0) {
        try {
          collSize = JSON.parse(collSize) * 1024 * 1024;
        }
        catch (e) {
          arangoHelper.arangoError('Please enter a valid number');
          return 0;
        }
      }
      if (collName === '') {
        arangoHelper.arangoError('No collection name entered!');
        return 0;
      }

      var returnobj = this.collection.newCollection(
        collName, wfs, isSystem, collSize, collType, shards, shardBy
      );
      if (returnobj.status !== true) {
        arangoHelper.arangoError("Collection error", returnobj.errorMessage);
      }
      this.updateCollectionsView();
      window.modalView.hide();
    },

    createNewCollectionModal: function() {
      var buttons = [],
        tableContent = [],
        advanced = {},
        advancedTableContent = [];

      tableContent.push(
        window.modalView.createTextEntry(
          "new-collection-name",
          "Name",
          "",
          false,
          "",
          true,
          [
            {
              rule: Joi.string().regex(/^[a-zA-Z]/),
              msg: "Collection name must always start with a letter."
            },
            {
              rule: Joi.string().regex(/^[a-zA-Z0-9\-_]*$/),
              msg: 'Only symbols, "_" and "-" are allowed.'
            },
            {
              rule: Joi.string().required(),
              msg: "No collection name given."
            }
          ]
        )
      );
      tableContent.push(
        window.modalView.createSelectEntry(
          "new-collection-type",
          "Type",
          "",
          "The type of the collection to create.",
          [{value: 2, label: "Document"}, {value: 3, label: "Edge"}]
        )
      );
      if (window.isCoordinator()) {
        tableContent.push(
          window.modalView.createTextEntry(
            "new-collection-shards",
            "Shards",
            "",
            "The number of shards to create. You cannot change this afterwards. "
              + "Recommended: DBServers squared",
            "",
            true
          )
        );
        tableContent.push(
          window.modalView.createSelect2Entry(
            "new-collection-shardBy",
            "shardBy",
            "",
            "The keys used to distribute documents on shards. "
              + "Type the key and press return to add it.",
            "_key",
            false
          )
        );
      }
      buttons.push(
        window.modalView.createSuccessButton(
          "Save",
          this.submitCreateCollection.bind(this)
        )
      );
      advancedTableContent.push(
        window.modalView.createTextEntry(
          "new-collection-size",
          "Journal size",
          "",
          "The maximal size of a journal or datafile (in MB). Must be at least 1.",
          "",
          false,
          [
            {
              rule: Joi.string().allow('').optional().regex(/^[0-9]*$/),
              msg: "Must be a number."
            }
          ]
      )
      );
      advancedTableContent.push(
        window.modalView.createSelectEntry(
          "new-collection-sync",
          "Sync",
          "",
          "Synchronize to disk before returning from a create or update of a document.",
          [{value: false, label: "No"}, {value: true, label: "Yes"}]
        )
      );
      advanced.header = "Advanced";
      advanced.content = advancedTableContent;
      window.modalView.show(
        "modalTable.ejs",
        "New Collection",
        buttons,
        tableContent,
        advanced
      );
    }

  });
}());

/*jshint browser: true */
/*jshint unused: false */
/*global Backbone, EJS, $, flush, window, arangoHelper, nv, d3, localStorage*/
/*global document, console, Dygraph, _,templateEngine */

(function () {
  "use strict";

  function fmtNumber (n, nk) {
    if (n === undefined || n === null) {
      n = 0;
    }

    return n.toFixed(nk);
  }

  window.DashboardView = Backbone.View.extend({
    el: '#content',
    interval: 10000, // in milliseconds
    defaultTimeFrame: 20 * 60 * 1000, // 20 minutes in milliseconds
    defaultDetailFrame: 2 * 24 * 60 * 60 * 1000,
    history: {},
    graphs: {},

    events: {
      // will be filled in initialize
    },

    tendencies: {
      asyncPerSecondCurrent: [
        "asyncPerSecondCurrent", "asyncPerSecondPercentChange"
      ],

      syncPerSecondCurrent: [
        "syncPerSecondCurrent", "syncPerSecondPercentChange"
      ],

      clientConnectionsCurrent: [
        "clientConnectionsCurrent", "clientConnectionsPercentChange"
      ],

      clientConnectionsAverage: [
        "clientConnections15M", "clientConnections15MPercentChange"
      ],

      numberOfThreadsCurrent: [
        "numberOfThreadsCurrent", "numberOfThreadsPercentChange"
      ],

      numberOfThreadsAverage: [
        "numberOfThreads15M", "numberOfThreads15MPercentChange"
      ],

      virtualSizeCurrent: [
        "virtualSizeCurrent", "virtualSizePercentChange"
      ],

      virtualSizeAverage: [
        "virtualSize15M", "virtualSize15MPercentChange"
      ]
    },

    barCharts: {
      totalTimeDistribution: [
        "queueTimeDistributionPercent", "requestTimeDistributionPercent"
      ],
      dataTransferDistribution: [
        "bytesSentDistributionPercent", "bytesReceivedDistributionPercent"
      ]
    },

    barChartsElementNames: {
      queueTimeDistributionPercent: "Queue",
      requestTimeDistributionPercent: "Computation",
      bytesSentDistributionPercent: "Bytes sent",
      bytesReceivedDistributionPercent: "Bytes received"

    },

    getDetailFigure : function (e) {
      var figure = $(e.currentTarget).attr("id").replace(/ChartButton/g, "");
      return figure;
    },

    showDetail: function (e) {
      var self = this,
          figure = this.getDetailFigure(e),
          options;

      options = this.dygraphConfig.getDetailChartConfig(figure);

      this.getHistoryStatistics(figure);
      this.detailGraphFigure = figure;

      window.modalView.hideFooter = true;
      window.modalView.hide();
      window.modalView.show(
        "modalGraph.ejs",
        options.header,
        undefined,
        undefined,
        undefined,
        undefined,
        this.events
      );

      window.modalView.hideFooter = false;

      $('#modal-dialog').on('hidden', function () {
        self.hidden();
      });

      $('#modal-dialog').toggleClass("modal-chart-detail", true);

      options.height = $(window).height() * 0.7;
      options.width = $('.modal-inner-detail').width();

      // Reselect the labelsDiv. It was not known when requesting options
      options.labelsDiv = $(options.labelsDiv)[0];

      this.detailGraph = new Dygraph(
        document.getElementById("lineChartDetail"),
        this.history[this.server][figure],
        options
      );
    },

    hidden: function () {
      this.detailGraph.destroy();
      delete this.detailGraph;
      delete this.detailGraphFigure;
    },


    getCurrentSize: function (div) {
      if (div.substr(0,1) !== "#") {
        div = "#" + div;
      }
      var height, width;
      $(div).attr("style", "");
      height = $(div).height();
      width = $(div).width();
      return {
        height: height,
        width: width
      };
    },

    prepareDygraphs: function () {
      var self = this, options;
      this.dygraphConfig.getDashBoardFigures().forEach(function (f) {
        options = self.dygraphConfig.getDefaultConfig(f);
        var dimensions = self.getCurrentSize(options.div);
        options.height = dimensions.height;
        options.width = dimensions.width;
        self.graphs[f] = new Dygraph(
          document.getElementById(options.div),
          self.history[self.server][f] || [],
          options
        );
      });
    },

    initialize: function () {
      this.dygraphConfig = this.options.dygraphConfig;
      this.d3NotInitialized = true;
      this.events["click .dashboard-sub-bar-menu-sign"] = this.showDetail.bind(this);
      this.events["mousedown .dygraph-rangesel-zoomhandle"] = this.stopUpdating.bind(this);
      this.events["mouseup .dygraph-rangesel-zoomhandle"] = this.startUpdating.bind(this);

      this.serverInfo = this.options.serverToShow;

      if (! this.serverInfo) {
        this.server = "-local-";
      } else {
        this.server = this.serverInfo.target;
      }

      this.history[this.server] = {};
    },

    updateCharts: function () {
      var self = this;
      if (this.detailGraph) {
        this.updateLineChart(this.detailGraphFigure, true);
        return;
      }
      this.prepareD3Charts(this.isUpdating);
      this.prepareResidentSize(this.isUpdating);
      this.updateTendencies();
      Object.keys(this.graphs).forEach(function (f) {
        self.updateLineChart(f, false);
      });
    },

    updateTendencies: function () {
      var self = this, map = this.tendencies;

      var tempColor = "";
      Object.keys(map).forEach(function (a) {
        var p = "";
        var v = 0;
        if (self.history.hasOwnProperty(self.server) &&
            self.history[self.server].hasOwnProperty(a)) {
          v = self.history[self.server][a][1];
        }

        if (v < 0) {
          tempColor = "#d05448";
        }
        else {
          tempColor = "#7da817";
          p = "+";
        }
        if (self.history.hasOwnProperty(self.server) &&
            self.history[self.server].hasOwnProperty(a)) {
          $("#" + a).html(self.history[self.server][a][0] + '<br/><span class="dashboard-figurePer" style="color: '
            + tempColor +';">' + p + v + '%</span>');
        }
        else {
          $("#" + a).html('<br/><span class="dashboard-figurePer" style="color: '
            + "#000" +';">' + "data not ready yet" + '</span>');
        }
      });
    },


    updateDateWindow: function (graph, isDetailChart) {
      var t = new Date().getTime();
      var borderLeft, borderRight;
      if (isDetailChart && graph.dateWindow_) {
        borderLeft = graph.dateWindow_[0];
        borderRight = t - graph.dateWindow_[1] - this.interval * 5 > 0 ?
        graph.dateWindow_[1] : t;
        return [borderLeft, borderRight];
      }
      return [t - this.defaultTimeFrame, t];


    },

    updateLineChart: function (figure, isDetailChart) {

      var g = isDetailChart ? this.detailGraph : this.graphs[figure],
      opts = {
        file: this.history[this.server][figure],
        dateWindow: this.updateDateWindow(g, isDetailChart)
      };

      //round line chart values to 10th decimals
      var pointer = 0, dates = [];
      _.each(opts.file, function(value) {

        var rounded = value[0].getSeconds() - (value[0].getSeconds() % 10); 
        opts.file[pointer][0].setSeconds(rounded);
        dates.push(opts.file[pointer][0]);

        pointer++;
      });
      //get min/max dates of array
      var maxDate = new Date(Math.max.apply(null, dates));
      var minDate = new Date(Math.min.apply(null, dates));
      var tmpDate = new Date(minDate.getTime()), missingDates = [];
      var tmpDatesComplete = [];

      while (tmpDate < maxDate) {
        tmpDate = new Date(tmpDate.setSeconds(tmpDate.getSeconds() + 10));
        tmpDatesComplete.push(tmpDate);
      }

      //iterate through all date ranges
      _.each(tmpDatesComplete, function(date) {
        var tmp = false;

        //iterate through all available real date values
        _.each(opts.file, function(availableDates) {
          //if real date is inside date range
          if (Math.floor(date.getTime()/1000) === Math.floor(availableDates[0].getTime()/1000)) {
            tmp = true;
          }
        });

        if (tmp === false) {
          //a value is missing
          if (date < new Date()) {
            missingDates.push(date);
          }
        }
      });

      _.each(missingDates, function(date) {
        if (figure === 'systemUserTime' ||
            figure === 'requests' ||
            figure === 'pageFaults' ||
            figure === 'dataTransfer') {
          opts.file.push([date, 0, 0]);
        }
        if (figure === 'totalTime') {
          opts.file.push([date, 0, 0, 0]);
        }
      });

      //sort for library
      opts.file.sort(function(a,b){
        return new Date(b[0]) - new Date(a[0]);
      });

      g.updateOptions(opts);
    },

    mergeDygraphHistory: function (newData, i) {
      var self = this, valueList;

      this.dygraphConfig.getDashBoardFigures(true).forEach(function (f) {

        // check if figure is known
        if (! self.dygraphConfig.mapStatToFigure[f]) {
          return;
        }

        // need at least an empty history
        if (! self.history[self.server][f]) {
          self.history[self.server][f] = [];
        }

        // generate values for this key
        valueList = [];

        self.dygraphConfig.mapStatToFigure[f].forEach(function (a) {
          if (! newData[a]) {
            return;
          }

          if (a === "times") {
            valueList.push(new Date(newData[a][i] * 1000));
          }
          else {
            valueList.push(newData[a][i]);
          }
        });

        // if we found at list one value besides times, then use the entry
        if (valueList.length > 1) {
          self.history[self.server][f].push(valueList);
        }
      });
    },

    cutOffHistory: function (f, cutoff) {
      var self = this;

      while (self.history[self.server][f].length !== 0) {
        var v = self.history[self.server][f][0][0];

        if (v >= cutoff) {
          break;
        }

        self.history[self.server][f].shift();
      }
    },

    cutOffDygraphHistory: function (cutoff) {
      var self = this;
      var cutoffDate = new Date(cutoff);

      this.dygraphConfig.getDashBoardFigures(true).forEach(function (f) {

        // check if figure is known
        if (! self.dygraphConfig.mapStatToFigure[f]) {
          return;
        }

        // history must be non-empty
        if (! self.history[self.server][f]) {
          return;
        }

        self.cutOffHistory(f, cutoffDate);
      });
    },

    mergeHistory: function (newData) {
      var self = this, i;

      for (i = 0; i < newData.times.length; ++i) {
        this.mergeDygraphHistory(newData, i);
      }

      this.cutOffDygraphHistory(new Date().getTime() - this.defaultTimeFrame);

      // convert tendency values
      Object.keys(this.tendencies).forEach(function (a) {
        var n1 = 1;
        var n2 = 1;

        if (a === "virtualSizeCurrent" || a === "virtualSizeAverage") {
          newData[self.tendencies[a][0]] /= (1024 * 1024 * 1024);
          n1 = 2;
        }
        else if (a === "clientConnectionsCurrent") {
          n1 = 0;
        }
        else if (a === "numberOfThreadsCurrent") {
          n1 = 0;
        }

        self.history[self.server][a] = [
          fmtNumber(newData[self.tendencies[a][0]], n1),
          fmtNumber(newData[self.tendencies[a][1]] * 100, n2)
        ];
      });

      // update distribution
      Object.keys(this.barCharts).forEach(function (a) {
        self.history[self.server][a] = self.mergeBarChartData(self.barCharts[a], newData);
      });

      // update physical memory
      self.history[self.server].physicalMemory = newData.physicalMemory;
      self.history[self.server].residentSizeCurrent = newData.residentSizeCurrent;
      self.history[self.server].residentSizePercent = newData.residentSizePercent;

      // generate chart description
      self.history[self.server].residentSizeChart =
      [
        {
          "key": "",
          "color": this.dygraphConfig.colors[1],
          "values": [
            {
              label: "used",
              value: newData.residentSizePercent * 100
            }
          ]
        },
        {
          "key": "",
          "color": this.dygraphConfig.colors[0],
          "values": [
            {
              label: "used",
              value: 100 - newData.residentSizePercent * 100
            }
          ]
        }
      ]
      ;

      // remember next start
      this.nextStart = newData.nextStart;
    },

    mergeBarChartData: function (attribList, newData) {
      var i, v1 = {
        "key": this.barChartsElementNames[attribList[0]],
        "color": this.dygraphConfig.colors[0],
        "values": []
      }, v2 = {
        "key": this.barChartsElementNames[attribList[1]],
        "color": this.dygraphConfig.colors[1],
        "values": []
      };
      for (i = newData[attribList[0]].values.length - 1;  0 <= i;  --i) {
        v1.values.push({
          label: this.getLabel(newData[attribList[0]].cuts, i),
          value: newData[attribList[0]].values[i]
        });
        v2.values.push({
          label: this.getLabel(newData[attribList[1]].cuts, i),
          value: newData[attribList[1]].values[i]
        });
      }
      return [v1, v2];
    },

    getLabel: function (cuts, counter) {
      if (!cuts[counter]) {
        return ">" + cuts[counter - 1];
      }
      return counter === 0 ? "0 - " +
                         cuts[counter] : cuts[counter - 1] + " - " + cuts[counter];
    },

    renderReplicationStatistics: function(object) {
      $('#repl-numbers table tr:nth-child(1) > td:nth-child(2)').html(object.state.totalEvents);
      $('#repl-numbers table tr:nth-child(2) > td:nth-child(2)').html(object.state.totalRequests);
      $('#repl-numbers table tr:nth-child(3) > td:nth-child(2)').html(object.state.totalFailedConnects);

      if (object.state.lastAppliedContinuousTick) {
        $('#repl-ticks table tr:nth-child(1) > td:nth-child(2)').html(object.state.lastAppliedContinuousTick);
      }
      else {
        $('#repl-ticks table tr:nth-child(1) > td:nth-child(2)').html("no data available").addClass('no-data');
      }
      if (object.state.lastProcessedContinuousTick) {
        $('#repl-ticks table tr:nth-child(2) > td:nth-child(2)').html(object.state.lastProcessedContinuousTick);
      }
      else {
        $('#repl-ticks table tr:nth-child(2) > td:nth-child(2)').html("no data available").addClass('no-data');
      }
      if (object.state.lastAvailableContinuousTick) {
        $('#repl-ticks table tr:nth-child(3) > td:nth-child(2)').html(object.state.lastAvailableContinuousTick);
      }
      else {
        $('#repl-ticks table tr:nth-child(3) > td:nth-child(2)').html("no data available").addClass('no-data');
      }

      $('#repl-progress table tr:nth-child(1) > td:nth-child(2)').html(object.state.progress.message);
      $('#repl-progress table tr:nth-child(2) > td:nth-child(2)').html(object.state.progress.time);
      $('#repl-progress table tr:nth-child(3) > td:nth-child(2)').html(object.state.progress.failedConnects);
    },

    getReplicationStatistics: function() {
      var self = this;

      $.ajax(
        '/_api/replication/applier-state',
        {async: true}
      ).done(
        function (d) {
          if (d.hasOwnProperty('state')) {
            var running;
            if (d.state.running) {
              running = "active";
            }
            else {
              running = "inactive";
            }
            running = '<span class="state">' + running + '</span>';
            $('#replication-chart .dashboard-sub-bar').html("Replication " + running);

            self.renderReplicationStatistics(d);
          }
      });
    },

    getStatistics: function (callback) {
      var self = this;
      var url = "/_db/_system/_admin/aardvark/statistics/short";
      var urlParams = "?start=";

      if (self.nextStart) {
        urlParams += self.nextStart;
      }
      else {
        urlParams += (new Date().getTime() - self.defaultTimeFrame) / 1000;
      }

      if (self.server !== "-local-") {
        url = self.serverInfo.endpoint + "/_admin/aardvark/statistics/cluster";
        urlParams += "&type=short&DBserver=" + self.serverInfo.target;

        if (! self.history.hasOwnProperty(self.server)) {
          self.history[self.server] = {};
        }
      }

      $.ajax(
        url + urlParams,
        {async: true}
      ).done(
        function (d) {
          if (d.times.length > 0) {
            self.isUpdating = true;
            self.mergeHistory(d);
          }
          if (self.isUpdating === false) {
            return;
          }
          if (callback) {
            callback();
          }
          self.updateCharts();
      });

      this.getReplicationStatistics();
    },

    getHistoryStatistics: function (figure) {
      var self = this;
      var url = "statistics/long";

      var urlParams
        = "?filter=" + this.dygraphConfig.mapStatToFigure[figure].join();

      if (self.server !== "-local-") {
        url = self.server.endpoint + "/_admin/aardvark/statistics/cluster";
        urlParams += "&type=long&DBserver=" + self.server.target;

        if (! self.history.hasOwnProperty(self.server)) {
          self.history[self.server] = {};
        }
      }

      var origin = window.location.href.split("/"), 
      preUrl = origin[0] + '//' + origin[2] + '/' + origin[3] + '/_system/' + origin[5] + '/' + origin[6] + '/';

      $.ajax(
        preUrl + url + urlParams,
        {async: true}
      ).done(
        function (d) {
          var i;

          self.history[self.server][figure] = [];

          for (i = 0;  i < d.times.length;  ++i) {
            self.mergeDygraphHistory(d, i, true);
          }
        }
      );
    },

    addEmptyDataLabels: function () {
      if ($('.dataNotReadyYet').length === 0) {
        $('#dataTransferDistribution').prepend('<p class="dataNotReadyYet"> data not ready yet </p>');
        $('#totalTimeDistribution').prepend('<p class="dataNotReadyYet"> data not ready yet </p>');
        $('.dashboard-bar-chart-title').prepend('<p class="dataNotReadyYet"> data not ready yet </p>');
      }
    },

    removeEmptyDataLabels: function () {
      $('.dataNotReadyYet').remove();
    },

    prepareResidentSize: function (update) {

      var self = this;

      var dimensions = this.getCurrentSize('#residentSizeChartContainer');

      var current = self.history[self.server].residentSizeCurrent / 1024 / 1024;
      
      var currentA = "";

      if (current < 1025) {
        currentA = fmtNumber(current, 2) + " MB";
      }
      else {
        currentA = fmtNumber(current / 1024, 2) + " GB";
      }

      var currentP = fmtNumber(self.history[self.server].residentSizePercent * 100, 2);
      var data = [fmtNumber(self.history[self.server].physicalMemory / 1024 / 1024 / 1024, 0) + " GB"];


      if (self.history[self.server].residentSizeChart === undefined) {
        this.addEmptyDataLabels();
        return;
      }
      else {
        this.removeEmptyDataLabels();
      }

      nv.addGraph(function () {
        var chart = nv.models.multiBarHorizontalChart()
          .x(function (d) {
            return d.label;
          })
          .y(function (d) {
            return d.value;
          })
          .width(dimensions.width)
          .height(dimensions.height)
          .margin({
            top: ($("residentSizeChartContainer").outerHeight() - $("residentSizeChartContainer").height()) / 2,
            right: 1,
            bottom: ($("residentSizeChartContainer").outerHeight() - $("residentSizeChartContainer").height()) / 2,
            left: 1
          })
          .showValues(false)
          .showYAxis(false)
          .showXAxis(false)
          .transitionDuration(100)
          .tooltips(false)
          .showLegend(false)
          .showControls(false)
          .stacked(true);

        chart.yAxis
          .tickFormat(function (d) {return d + "%";})
          .showMaxMin(false);
        chart.xAxis.showMaxMin(false);

        d3.select('#residentSizeChart svg')
          .datum(self.history[self.server].residentSizeChart)
          .call(chart);

        d3.select('#residentSizeChart svg').select('.nv-zeroLine').remove();

        if (update) {
          d3.select('#residentSizeChart svg').select('#total').remove();
          d3.select('#residentSizeChart svg').select('#percentage').remove();
        }

        d3.select('.dashboard-bar-chart-title .percentage')
          .html(currentA + " ("+ currentP + " %)");

        d3.select('.dashboard-bar-chart-title .absolut')
          .html(data[0]);

        nv.utils.windowResize(chart.update);

        return chart;
      }, function() {
        d3.selectAll("#residentSizeChart .nv-bar").on('click',
          function() {
            // no idea why this has to be empty, well anyways...
          }
        );
      });
    },

    prepareD3Charts: function (update) {
      var self = this;
      var barCharts = {
        totalTimeDistribution: [
          "queueTimeDistributionPercent", "requestTimeDistributionPercent"],
        dataTransferDistribution: [
          "bytesSentDistributionPercent", "bytesReceivedDistributionPercent"]
      };

      if (this.d3NotInitialized) {
          update = false;
          this.d3NotInitialized = false;
      }

      _.each(Object.keys(barCharts), function (k) {

        var dimensions = self.getCurrentSize('#' + k
          + 'Container .dashboard-interior-chart');

        var selector = "#" + k + "Container svg";

        if (self.history[self.server].residentSizeChart === undefined) {
          self.addEmptyDataLabels();
          return;
        }
        else {
          self.removeEmptyDataLabels();
        }

        nv.addGraph(function () {
          var tickMarks = [0, 0.25, 0.5, 0.75, 1];
          var marginLeft = 75;
          var marginBottom = 23;
          var bottomSpacer = 6;

          if (dimensions.width < 219) {
            tickMarks = [0, 0.5, 1];
            marginLeft = 72;
            marginBottom = 21;
            bottomSpacer = 5;
          }
          else if (dimensions.width < 299) {
            tickMarks = [0, 0.3334, 0.6667, 1];
            marginLeft = 77;
          }
          else if (dimensions.width < 379) {
            marginLeft = 87;
          }
          else if (dimensions.width < 459) {
            marginLeft = 95;
          }
          else if (dimensions.width < 539) {
            marginLeft = 100;
          }
          else if (dimensions.width < 619) {
            marginLeft = 105;
          }

          var chart = nv.models.multiBarHorizontalChart()
            .x(function (d) {
              return d.label;
            })
            .y(function (d) {
              return d.value;
            })
            .width(dimensions.width)
            .height(dimensions.height)
            .margin({
              top: 5,
              right: 20,
              bottom: marginBottom,
              left: marginLeft
            })
            .showValues(false)
            .showYAxis(true)
            .showXAxis(true)
            .transitionDuration(100)
            .tooltips(false)
            .showLegend(false)
            .showControls(false)
            .forceY([0,1]);

          chart.yAxis
            .showMaxMin(false);

          var yTicks2 = d3.select('.nv-y.nv-axis')
            .selectAll('text')
            .attr('transform', 'translate (0, ' + bottomSpacer + ')') ;

          chart.yAxis
            .tickValues(tickMarks)
            .tickFormat(function (d) {return fmtNumber(((d * 100 * 100) / 100), 0) + "%";});

          d3.select(selector)
            .datum(self.history[self.server][k])
            .call(chart);

          nv.utils.windowResize(chart.update);

          return chart;
        }, function() {
          d3.selectAll(selector + " .nv-bar").on('click',
            function() {
              // no idea why this has to be empty, well anyways...
            }
          );
        });
      });

    },

    stopUpdating: function () {
      this.isUpdating = false;
    },

  startUpdating: function () {
    var self = this;
    if (self.timer) {
      return;
    }
    self.timer = window.setInterval(function () {
        self.getStatistics();
      },
      self.interval
    );
  },


  resize: function () {
    if (!this.isUpdating) {
      return;
    }
    var self = this, dimensions;
      _.each(this.graphs,function (g) {
      dimensions = self.getCurrentSize(g.maindiv_.id);
      g.resize(dimensions.width, dimensions.height);
    });
    if (this.detailGraph) {
      dimensions = this.getCurrentSize(this.detailGraph.maindiv_.id);
      this.detailGraph.resize(dimensions.width, dimensions.height);
    }
    this.prepareD3Charts(true);
    this.prepareResidentSize(true);
  },

  template: templateEngine.createTemplate("dashboardView.ejs"),

  render: function (modalView) {
    if (!modalView)  {
      $(this.el).html(this.template.render());
    }
    var callback = function() {
      this.prepareDygraphs();
      if (this.isUpdating) {
        this.prepareD3Charts();
        this.prepareResidentSize();
        this.updateTendencies();
      }
      this.startUpdating();
    }.bind(this);

    //check if user has _system permission
    var authorized = this.options.database.hasSystemAccess();
    if (!authorized) {
      $('.contentDiv').remove();
      $('.headerBar').remove();
      $('.dashboard-headerbar').remove();
      $('.dashboard-row').remove();
      $('#content').append(
        '<div style="color: red">You do not have permission to view this page.</div>'
      );
      $('#content').append(
        '<div style="color: red">You can switch to \'_system\' to see the dashboard.</div>'
      );
    }
    else {
      this.getStatistics(callback);
    }
  }
});
}());

/*jshint browser: true */
/*jshint unused: false */
/*global window, document, Backbone, EJS, SwaggerUi, hljs, $, arangoHelper, templateEngine, Joi*/
(function() {

  "use strict";

  window.databaseView = Backbone.View.extend({
    users: null,
    el: '#content',

    template: templateEngine.createTemplate("databaseView.ejs"),

    dropdownVisible: false,

    currentDB: "",

    events: {
      "click #createDatabase"       : "createDatabase",
      "click #submitCreateDatabase" : "submitCreateDatabase",
      "click .editDatabase"         : "editDatabase",
      "click .icon"                 : "editDatabase",
      "click #selectDatabase"       : "updateDatabase",
      "click #submitDeleteDatabase" : "submitDeleteDatabase",
      "click .contentRowInactive a" : "changeDatabase",
      "keyup #databaseSearchInput"  : "search",
      "click #databaseSearchSubmit" : "search",
      "click #databaseToggle"       : "toggleSettingsDropdown",
      "click .css-label"            : "checkBoxes",
      "click #dbSortDesc"           : "sorting",
      "click .tile"                 : "switchDatabase"
    },

    sorting: function() {
      if ($('#dbSortDesc').is(":checked")) {
        this.collection.setSortingDesc(true);
      }
      else {
        this.collection.setSortingDesc(false);
      }

      if ($('#databaseDropdown').is(":visible")) {
        this.dropdownVisible = true;
      } else {
        this.dropdownVisible = false;
      }

      this.render();
    },

    initialize: function() {
      this.collection.fetch({async:false});
    },
      
    checkBoxes: function (e) {
      //chrome bugfix
      var clicked = e.currentTarget.id;
      $('#'+clicked).click();
    },

    render: function(){
      this.currentDatabase();

      //sorting
      this.collection.sort();

      $(this.el).html(this.template.render({
        collection   : this.collection,
        searchString : '',
        currentDB    : this.currentDB
      }));
      
      if (this.dropdownVisible === true) {
        $('#dbSortDesc').attr('checked', this.collection.sortOptions.desc);
        $('#databaseToggle').toggleClass('activated');
        $('#databaseDropdown2').show();
      }
      
      arangoHelper.setCheckboxStatus("#databaseDropdown");

      this.replaceSVGs();
      return this;
    },

    toggleSettingsDropdown: function() {
      //apply sorting to checkboxes
      $('#dbSortDesc').attr('checked', this.collection.sortOptions.desc);

      $('#databaseToggle').toggleClass('activated');
      $('#databaseDropdown2').slideToggle(200);
    },

    selectedDatabase: function () {
      return $('#selectDatabases').val();
    },

    handleError: function(status, text, dbname) {
      if (status === 409) {
        arangoHelper.arangoError("DB", "Database " + dbname + " already exists.");
        return;
      }
      if (status === 400) {
        arangoHelper.arangoError("DB", "Invalid Parameters");
        return;
      }
      if (status === 403) {
        arangoHelper.arangoError("DB", "Insufficent rights. Execute this from _system database");
        return;
      }
    },

    validateDatabaseInfo: function (db, user, pw) {
      if (user === "") {
        arangoHelper.arangoError("DB", "You have to define an owner for the new database");
        return false;
      }
      if (db === "") {
        arangoHelper.arangoError("DB", "You have to define a name for the new database");
        return false;
      }
      if (db.indexOf("_") === 0) {
        arangoHelper.arangoError("DB ", "Databasename should not start with _");
        return false;
      }
      if (!db.match(/^[a-zA-Z][a-zA-Z0-9_\-]*$/)) {
        arangoHelper.arangoError("DB", "Databasename may only contain numbers, letters, _ and -");
        return false;
      }
      return true;
    },

    createDatabase: function(e) {
      e.preventDefault();
      this.createAddDatabaseModal();
    },

    switchDatabase: function(e) {
      if (!$(e.target).parent().hasClass('iconSet')) {
        var changeTo = $(e.currentTarget).find("h5").text();
        if (changeTo !== '') {
          var url = this.collection.createDatabaseURL(changeTo);
          window.location.replace(url);
        }
      }
    },

    submitCreateDatabase: function() {
      var self = this, userPassword,
      name  = $('#newDatabaseName').val(),
      userName = $('#newUser').val();

      if ($('#useDefaultPassword').val() === 'true') {
        userPassword = 'ARANGODB_DEFAULT_ROOT_PASSWORD'; 
      }
      else {
        userPassword = $('#newPassword').val();
      }

      if (!this.validateDatabaseInfo(name, userName, userPassword)) {
        return;
      }

      var options = {
        name: name,
        users: [
          {
            username: userName,
            passwd: userPassword,
            active: true
          }
        ]
      };
      this.collection.create(options, {
        wait:true,
        error: function(data, err) {
          self.handleError(err.status, err.statusText, name);
        },
        success: function(data) {
          self.updateDatabases();
          window.modalView.hide();
          window.App.naviView.dbSelectionView.render($("#dbSelect"));
        }
      });
    },

    submitDeleteDatabase: function(dbname) {
      var toDelete = this.collection.where({name: dbname});
      toDelete[0].destroy({wait: true, url:"/_api/database/"+dbname});
      this.updateDatabases();
      window.App.naviView.dbSelectionView.render($("#dbSelect"));
      window.modalView.hide();
    },

    currentDatabase: function() {
      this.currentDB = this.collection.getCurrentDatabase();
    },

    changeDatabase: function(e) {
      var changeTo = $(e.currentTarget).attr("id");
      var url = this.collection.createDatabaseURL(changeTo);
      window.location.replace(url);
    },

    updateDatabases: function() {
      var self = this;
      this.collection.fetch({
        success: function() {
          self.render();
          window.App.handleSelectDatabase();
        }
      });
    },

    editDatabase: function(e) {
      var dbName = this.evaluateDatabaseName($(e.currentTarget).attr("id"), '_edit-database'),
        isDeletable = true;
      if(dbName === this.currentDB) {
        isDeletable = false;
      }
      this.createEditDatabaseModal(dbName, isDeletable);
    },

    search: function() {
      var searchInput,
        searchString,
        strLength,
        reducedCollection;

      searchInput = $('#databaseSearchInput');
      searchString = $("#databaseSearchInput").val();
      reducedCollection = this.collection.filter(
        function(u) {
          return u.get("name").indexOf(searchString) !== -1;
        }
      );
      $(this.el).html(this.template.render({
        collection   : reducedCollection,
        searchString : searchString,
        currentDB    : this.currentDB
      }));
      this.replaceSVGs();

      //after rendering, get the "new" element
      searchInput = $('#databaseSearchInput');
      //set focus on end of text in input field
      strLength= searchInput.val().length;
      searchInput.focus();
      searchInput[0].setSelectionRange(strLength, strLength);
    },

    replaceSVGs: function() {
      $(".svgToReplace").each(function() {
        var img = $(this);
        var id = img.attr("id");
        var src = img.attr("src");
        $.get(src, function(d) {
          var svg = $(d).find("svg");
          svg.attr("id", id)
            .attr("class", "tile-icon-svg")
            .removeAttr("xmlns:a");
          img.replaceWith(svg);
        }, "xml");
      });
    },

    evaluateDatabaseName : function(str, substr) {
      var index = str.lastIndexOf(substr);
      return str.substring(0, index);
    },

    createEditDatabaseModal: function(dbName, isDeletable) {
      var buttons = [],
        tableContent = [];

      tableContent.push(
        window.modalView.createReadOnlyEntry("id_name", "Name", dbName, "")
      );
      if (isDeletable) {
        buttons.push(
          window.modalView.createDeleteButton(
            "Delete",
            this.submitDeleteDatabase.bind(this, dbName)
          )
        );
      } else {
        buttons.push(window.modalView.createDisabledButton("Delete"));
      }
      window.modalView.show(
        "modalTable.ejs",
        "Delete database",
        buttons,
        tableContent
      );
    },

    createAddDatabaseModal: function() {
      var buttons = [],
        tableContent = [];

      tableContent.push(
        window.modalView.createTextEntry(
          "newDatabaseName",
          "Name",
          "",
          false,
          "Database Name",
          true,
          [
            {
              rule: Joi.string().regex(/^[a-zA-Z]/),
              msg: "Database name must start with a letter."
            },
            {
              rule: Joi.string().regex(/^[a-zA-Z0-9\-_]*$/),
              msg: 'Only Symbols "_" and "-" are allowed.'
            },
            {
              rule: Joi.string().required(),
              msg: "No database name given."
            }
          ]
        )
      );
      tableContent.push(
        window.modalView.createTextEntry(
          "newUser",
          "Username",
          this.users !== null ? this.users.whoAmI() : 'root',
          "Please define the owner of this database. This will be the only user having "
            + "initial access to this database if authentication is turned on. Please note "
            + "that if you specify a username different to your account you will not be "
            + "able to access the database with your account after having creating it. "
            + "Specifying a username is mandatory even with authentication turned off. "
            + "If there is a failure you will be informed.",
          "Database Owner",
          true,
          [
            {
              rule: Joi.string().required(),
              msg: "No username given."
            }
          ]
        )
      );
      tableContent.push(
        window.modalView.createSelectEntry(
          "useDefaultPassword",
          "Use default password",
          true,
          "Read the password from the environment variable ARANGODB_DEFAULT_ROOT_PASSWORD.",
          [{value: false, label: "No"}, {value: true, label: "Yes"}]        )
      );
      tableContent.push(
        window.modalView.createPasswordEntry(
          "newPassword",
          "Password",
          "",
          false,
          "",
          false
        )
      );
      buttons.push(
        window.modalView.createSuccessButton(
          "Create",
          this.submitCreateDatabase.bind(this)
        )
      );
      window.modalView.show(
        "modalTable.ejs",
        "Create Database",
        buttons,
        tableContent
      );

      $('#useDefaultPassword').change(function() {

        if ($('#useDefaultPassword').val() === 'true') {
          $('#row_newPassword').hide();
        }
        else {
          $('#row_newPassword').show();
        }
      });

      $('#row_newPassword').hide();
    }

  });
}());

/*jshint browser: true */
/*jshint unused: false */
/*global templateEngine, window, Backbone, $*/
(function() {
  "use strict";
  window.DBSelectionView = Backbone.View.extend({

    template: templateEngine.createTemplate("dbSelectionView.ejs"),

    events: {
      "click .dbSelectionLink": "changeDatabase"
    },

    initialize: function(opts) {
      this.current = opts.current;
    },

    changeDatabase: function(e) {
      var changeTo = $(e.currentTarget).closest(".dbSelectionLink.tab").attr("id");
      var url = this.collection.createDatabaseURL(changeTo);
      window.location.replace(url);
    },

    render: function(el) {
      this.$el = el;
      this.$el.html(this.template.render({
        list: this.collection.getDatabasesForUser(),
        current: this.current.get("name")
      }));
      this.delegateEvents();
      return this.el;
    }
  });
}());

/*jshint browser: true */
/*jshint unused: false */
/*global Backbone, EJS, $, window, arangoHelper, jsoneditor, templateEngine, JSONEditor */
/*global document, _ */

(function() {
  "use strict";

  var createDocumentLink = function(id) {
    var split = id.split("/");
    return "collection/"
      + encodeURIComponent(split[0]) + "/"
      + encodeURIComponent(split[1]);

  };

  window.DocumentView = Backbone.View.extend({
    el: '#content',
    colid: 0,
    docid: 0,

    customView: false,

    template: templateEngine.createTemplate("documentView.ejs"),

    events: {
      "click #saveDocumentButton" : "saveDocument",
      "click #deleteDocumentButton" : "deleteDocumentModal",
      "click #confirmDeleteDocument" : "deleteDocument",
      "click #document-from" : "navigateToDocument",
      "click #document-to" : "navigateToDocument",
      "keydown #documentEditor .ace_editor" : "keyPress",
      "keyup .jsoneditor .search input" : "checkSearchBox"
    },

    checkSearchBox: function(e) {
      if ($(e.currentTarget).val() === '') {
        this.editor.expandAll();
      }
    },

    keyPress: function(e) {
      if (e.ctrlKey && e.keyCode === 13) {
        e.preventDefault();
        this.saveDocument();
      }
      else if (e.metaKey && e.keyCode === 13) {
        e.preventDefault();
        this.saveDocument();
      }
    },

    editor: 0,

    setType: function (type) {
      var result, type2;
      if (type === 'edge') {
        result = this.collection.getEdge(this.colid, this.docid);
        type2 = "Edge: ";
      }
      else if (type === 'document') {
        result = this.collection.getDocument(this.colid, this.docid);
        type2 = "Document: ";
      }
      if (result === true) {
        this.type = type;
        this.fillInfo(type2);
        this.fillEditor();
        return true;
      }
    },

    deleteDocumentModal: function() {
      var buttons = [], tableContent = [];
      tableContent.push(
        window.modalView.createReadOnlyEntry(
          'doc-delete-button',
          'Delete',
          'Delete this ' + this.type + '?',
          undefined,
          undefined,
          false,
          /[<>&'"]/
      )
      );
      buttons.push(
        window.modalView.createDeleteButton('Delete', this.deleteDocument.bind(this))
      );
      window.modalView.show('modalTable.ejs', 'Delete Document', buttons, tableContent);
    },

    deleteDocument: function() {

      var result;

      if (this.type === 'document') {
        result = this.collection.deleteDocument(this.colid, this.docid);
        if (result === false) {
          arangoHelper.arangoError('Document error:','Could not delete');
          return;
        }
      }
      else if (this.type === 'edge') {
        result = this.collection.deleteEdge(this.colid, this.docid);
        if (result === false) {
          arangoHelper.arangoError('Edge error:', 'Could not delete');
          return;
        }
      }
      if (result === true) {
        if (this.customView) {
          this.customDeleteFunction();
        }
        else {
          var navigateTo = "collection/" + encodeURIComponent(this.colid) + '/documents/1';
          window.modalView.hide();
          window.App.navigate(navigateTo, {trigger: true});
        }
      }
    },

    navigateToDocument: function(e) {
      var navigateTo = $(e.target).attr("documentLink");
      if (navigateTo) {
        window.App.navigate(navigateTo, {trigger: true});
      }
    },

    fillInfo: function(type) {
      var mod = this.collection.first();
      var _id = mod.get("_id"),
        _key = mod.get("_key"),
        _rev = mod.get("_rev"),
        _from = mod.get("_from"),
        _to = mod.get("_to");

      $('#document-type').text(type);
      $('#document-id').text(_id);
      $('#document-key').text(_key);
      $('#document-rev').text(_rev);

      if (_from && _to) {

        var hrefFrom = createDocumentLink(_from);
        var hrefTo = createDocumentLink(_to);
        $('#document-from').text(_from);
        $('#document-from').attr("documentLink", hrefFrom);
        $('#document-to').text(_to);
        $('#document-to').attr("documentLink", hrefTo);
      }
      else {
        $('.edge-info-container').hide();
      }
    },

    fillEditor: function() {
      var toFill = this.removeReadonlyKeys(this.collection.first().attributes);
      this.editor.set(toFill);
      $('.ace_content').attr('font-size','11pt');
    },

    jsonContentChanged: function() {
      this.enableSaveButton();
    },

    render: function() {
      $(this.el).html(this.template.render({}));
      this.disableSaveButton();
      this.breadcrumb();

      var self = this;

      var container = document.getElementById('documentEditor');
      var options = {
        change: function(){self.jsonContentChanged();},
        search: true,
        mode: 'tree',
        modes: ['tree', 'code'],
        iconlib: "fontawesome4"
      };
      this.editor = new JSONEditor(container, options);

      return this;
    },

    removeReadonlyKeys: function (object) {
      return _.omit(object, ["_key", "_id", "_from", "_to", "_rev"]);
    },

    saveDocument: function () {
      var model, result;

      if ($('#saveDocumentButton').attr('disabled') === undefined) {

        try {
          model = this.editor.get();
        }
        catch (e) {
          this.errorConfirmation(e);
          this.disableSaveButton();
          return;
        }

        model = JSON.stringify(model);

        if (this.type === 'document') {
          result = this.collection.saveDocument(this.colid, this.docid, model);
          if (result === false) {
            arangoHelper.arangoError('Document error:','Could not save');
            return;
          }
        }
        else if (this.type === 'edge') {
          result = this.collection.saveEdge(this.colid, this.docid, model);
          if (result === false) {
            arangoHelper.arangoError('Edge error:', 'Could not save');
            return;
          }
        }

        if (result === true) {
          this.successConfirmation();
          this.disableSaveButton();
        }
      }
    },

    successConfirmation: function () {

      arangoHelper.arangoNotification('Document saved.');

      $('#documentEditor .tree').animate({backgroundColor: '#C6FFB0'}, 500);
      $('#documentEditor .tree').animate({backgroundColor: '#FFFFF'}, 500);

      $('#documentEditor .ace_content').animate({backgroundColor: '#C6FFB0'}, 500);
      $('#documentEditor .ace_content').animate({backgroundColor: '#FFFFF'}, 500);
    },

    errorConfirmation: function (e) {
      arangoHelper.arangoError("Document editor: ", e);

      $('#documentEditor .tree').animate({backgroundColor: '#FFB0B0'}, 500);
      $('#documentEditor .tree').animate({backgroundColor: '#FFFFF'}, 500);

      $('#documentEditor .ace_content').animate({backgroundColor: '#FFB0B0'}, 500);
      $('#documentEditor .ace_content').animate({backgroundColor: '#FFFFF'}, 500);
    },

    enableSaveButton: function () {
      $('#saveDocumentButton').prop('disabled', false);
      $('#saveDocumentButton').addClass('button-success');
      $('#saveDocumentButton').removeClass('button-close');
    },

    disableSaveButton: function () {
      $('#saveDocumentButton').prop('disabled', true);
      $('#saveDocumentButton').addClass('button-close');
      $('#saveDocumentButton').removeClass('button-success');
    },

    breadcrumb: function () {
      var name = window.location.hash.split("/");
      $('#transparentHeader').append(
        '<div class="breadcrumb">'+
        '<a href="#collections" class="activeBread">Collections</a>'+
        '<span class="disabledBread"><i class="fa fa-chevron-right"></i></span>'+
        '<a class="activeBread" href="#collection/' + name[1] + '/documents/1">' + name[1] + '</a>'+
        '<span class="disabledBread"><i class="fa fa-chevron-right"></i></span>'+
        '<a class="disabledBread">' + name[2] + '</a>'+
        '</div>'
      );
    },

    escaped: function (value) {
      return value.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;")
      .replace(/"/g, "&quot;").replace(/'/g, "&#39;");
    }
  });
}());

/*jshint browser: true */
/*jshint unused: false */
/*global arangoHelper, _, $, window, arangoHelper, templateEngine, Joi, btoa */

(function() {
  "use strict";
  window.DocumentsView = window.PaginationView.extend({
    filters : { "0" : true },
    filterId : 0,
    paginationDiv : "#documentsToolbarF",
    idPrefix : "documents",

    addDocumentSwitch: true,
    activeFilter: false,
    lastCollectionName: undefined,
    restoredFilters: [],

    editMode: false,

    allowUpload: false,

    el: '#content',
    table: '#documentsTableID',

    template: templateEngine.createTemplate("documentsView.ejs"),

    collectionContext : {
      prev: null,
      next: null
    },

    editButtons: ["#deleteSelected", "#moveSelected"],

    initialize : function () {
      this.documentStore = this.options.documentStore;
      this.collectionsStore = this.options.collectionsStore;
      this.tableView = new window.TableView({
        el: this.table,
        collection: this.collection
      });
      this.tableView.setRowClick(this.clicked.bind(this));
      this.tableView.setRemoveClick(this.remove.bind(this));
    },

    setCollectionId : function (colid, page) {
      this.collection.setCollection(colid);
      this.collection.setPage(page);
      var type = arangoHelper.collectionApiType(colid);
      this.page = page;
      this.type = type;

      this.checkCollectionState();

      this.collection.getDocuments(this.getDocsCallback.bind(this));
      this.collectionModel = this.collectionsStore.get(colid);
    },

    getDocsCallback: function(error) {
      //Hide first/last pagination
      $('#documents_last').css("visibility", "hidden");
      $('#documents_first').css("visibility", "hidden");

      if (error) {
        window.progressView.hide();
        arangoHelper.arangoError("Document error", "Could not fetch requested documents.");
      }
      else if (!error || error !== undefined){
        window.progressView.hide();
        this.drawTable();
        this.renderPaginationElements();
      }

    },

    events: {
      "click #collectionPrev"      : "prevCollection",
      "click #collectionNext"      : "nextCollection",
      "click #filterCollection"    : "filterCollection",
      "click #markDocuments"       : "editDocuments",
      "click #importCollection"    : "importCollection",
      "click #exportCollection"    : "exportCollection",
      "click #filterSend"          : "sendFilter",
      "click #addFilterItem"       : "addFilterItem",
      "click .removeFilterItem"    : "removeFilterItem",
      "click #deleteSelected"      : "deleteSelectedDocs",
      "click #moveSelected"        : "moveSelectedDocs",
      "click #addDocumentButton"   : "addDocumentModal",
      "click #documents_first"     : "firstDocuments",
      "click #documents_last"      : "lastDocuments",
      "click #documents_prev"      : "prevDocuments",
      "click #documents_next"      : "nextDocuments",
      "click #confirmDeleteBtn"    : "confirmDelete",
      "click .key"                 : "nop",
      "keyup"                      : "returnPressedHandler",
      "keydown .queryline input"   : "filterValueKeydown",
      "click #importModal"         : "showImportModal",
      "click #resetView"           : "resetView",
      "click #confirmDocImport"    : "startUpload",
      "click #exportDocuments"     : "startDownload",
      "change #documentSize"            : "setPagesize",
      "change #docsSort"                : "setSorting"
    },

    showSpinner: function() {
      $('#uploadIndicator').show();
    },

    hideSpinner: function() {
      $('#uploadIndicator').hide();
    },

    showImportModal: function() {
      $("#docImportModal").modal('show');
    },

    hideImportModal: function() {
      $("#docImportModal").modal('hide');
    },

    setPagesize: function() {
      var size = $('#documentSize').find(":selected").val();
      this.collection.setPagesize(size);
      this.collection.getDocuments(this.getDocsCallback.bind(this));
    },

    setSorting: function() {
      var sortAttribute = $('#docsSort').val();

      if (sortAttribute === '' || sortAttribute === undefined || sortAttribute === null) {
        sortAttribute = '_key';
      }

      this.collection.setSort(sortAttribute);
    },

    returnPressedHandler: function(event) {
      if (event.keyCode === 13 && $(event.target).is($('#docsSort'))) {
        this.collection.getDocuments(this.getDocsCallback.bind(this));
      }
      if (event.keyCode === 13) {
        if ($("#confirmDeleteBtn").attr("disabled") === false) {
          this.confirmDelete();
        }
      }
    },

    nop: function(event) {
      event.stopPropagation();
    },

    resetView: function () {
      //clear all input/select - fields
      $('input').val('');
      $('select').val('==');
      this.removeAllFilterItems();
      $('#documentSize').val(this.collection.getPageSize());

      $('#documents_last').css("visibility", "visible");
      $('#documents_first').css("visibility", "visible");
      this.addDocumentSwitch = true;
      this.collection.resetFilter();
      this.collection.loadTotal();
      this.restoredFilters = [];

      //for resetting json upload
      this.allowUpload = false;
      this.files = undefined;
      this.file = undefined;
      $('#confirmDocImport').attr("disabled", true);

      this.markFilterToggle();
      this.collection.getDocuments(this.getDocsCallback.bind(this));
    },

    startDownload: function() {
      var query = this.collection.buildDownloadDocumentQuery();

      if (query !== '' || query !== undefined || query !== null) {
        window.open(encodeURI("query/result/download/" + btoa(JSON.stringify(query))));
      }
      else {
        arangoHelper.arangoError("Document error", "could not download documents");
      }
    },

    startUpload: function () {
      var result;
      if (this.allowUpload === true) {
          this.showSpinner();
        result = this.collection.uploadDocuments(this.file);
        if (result !== true) {
          this.hideSpinner();
          this.hideImportModal();
          this.resetView();
          arangoHelper.arangoError(result);
          return;
        }
        this.hideSpinner();
        this.hideImportModal();
        this.resetView();
        return;
      }
    },

    uploadSetup: function () {
      var self = this;
      $('#importDocuments').change(function(e) {
        self.files = e.target.files || e.dataTransfer.files;
        self.file = self.files[0];
        $('#confirmDocImport').attr("disabled", false);

        self.allowUpload = true;
      });
    },

    buildCollectionLink : function (collection) {
      return "collection/" + encodeURIComponent(collection.get('name')) + '/documents/1';
    },
    /*
    prevCollection : function () {
      if (this.collectionContext.prev !== null) {
        $('#collectionPrev').parent().removeClass('disabledPag');
        window.App.navigate(
          this.buildCollectionLink(
            this.collectionContext.prev
          ),
          {
            trigger: true
          }
        );
      }
      else {
        $('#collectionPrev').parent().addClass('disabledPag');
      }
    },

    nextCollection : function () {
      if (this.collectionContext.next !== null) {
        $('#collectionNext').parent().removeClass('disabledPag');
        window.App.navigate(
          this.buildCollectionLink(
            this.collectionContext.next
          ),
          {
            trigger: true
          }
        );
      }
      else {
        $('#collectionNext').parent().addClass('disabledPag');
      }
    },*/

    markFilterToggle: function () {
      if (this.restoredFilters.length > 0) {
        $('#filterCollection').addClass('activated');
      }
      else {
        $('#filterCollection').removeClass('activated');
      }
    },

    //need to make following functions automatically!

    editDocuments: function () {
      $('#importCollection').removeClass('activated');
      $('#exportCollection').removeClass('activated');
      this.markFilterToggle();
      $('#markDocuments').toggleClass('activated');
      this.changeEditMode();
      $('#filterHeader').hide();
      $('#importHeader').hide();
      $('#editHeader').slideToggle(200);
      $('#exportHeader').hide();
    },

    filterCollection : function () {
      $('#importCollection').removeClass('activated');
      $('#exportCollection').removeClass('activated');
      $('#markDocuments').removeClass('activated');
      this.changeEditMode(false);
      this.markFilterToggle();
      this.activeFilter = true;
      $('#importHeader').hide();
      $('#editHeader').hide();
      $('#exportHeader').hide();
      $('#filterHeader').slideToggle(200);

      var i;
      for (i in this.filters) {
        if (this.filters.hasOwnProperty(i)) {
          $('#attribute_name' + i).focus();
          return;
        }
      }
    },

    exportCollection: function () {
      $('#importCollection').removeClass('activated');
      $('#filterHeader').removeClass('activated');
      $('#markDocuments').removeClass('activated');
      this.changeEditMode(false);
      $('#exportCollection').toggleClass('activated');
      this.markFilterToggle();
      $('#exportHeader').slideToggle(200);
      $('#importHeader').hide();
      $('#filterHeader').hide();
      $('#editHeader').hide();
    },

    importCollection: function () {
      this.markFilterToggle();
      $('#markDocuments').removeClass('activated');
      this.changeEditMode(false);
      $('#importCollection').toggleClass('activated');
      $('#exportCollection').removeClass('activated');
      $('#importHeader').slideToggle(200);
      $('#filterHeader').hide();
      $('#editHeader').hide();
      $('#exportHeader').hide();
    },

    changeEditMode: function (enable) {
      if (enable === false || this.editMode === true) {
        $('#documentsTableID tbody tr').css('cursor', 'default');
        $('.deleteButton').fadeIn();
        $('.addButton').fadeIn();
        $('.selected-row').removeClass('selected-row');
        this.editMode = false;
        this.tableView.setRowClick(this.clicked.bind(this));
      }
      else {
        $('#documentsTableID tbody tr').css('cursor', 'copy');
        $('.deleteButton').fadeOut();
        $('.addButton').fadeOut();
        $('.selectedCount').text(0);
        this.editMode = true;
        this.tableView.setRowClick(this.editModeClick.bind(this));
      }
    },

    getFilterContent: function () {
      var filters = [ ];
      var i, value;

      for (i in this.filters) {
        if (this.filters.hasOwnProperty(i)) {
          value = $('#attribute_value' + i).val();

          try {
            value = JSON.parse(value);
          }
          catch (err) {
            value = String(value);
          }

          if ($('#attribute_name' + i).val() !== ''){
            filters.push({
                attribute : $('#attribute_name'+i).val(),
                operator : $('#operator'+i).val(),
                value : value
            });
          }
        }
      }
      return filters;
    },

    sendFilter : function () {
      this.restoredFilters = this.getFilterContent();
      var self = this;
      this.collection.resetFilter();
      this.addDocumentSwitch = false;
      _.each(this.restoredFilters, function (f) {
        if (f.operator !== undefined) {
          self.collection.addFilter(f.attribute, f.operator, f.value);
        }
      });
      this.collection.setToFirst();

      this.collection.getDocuments(this.getDocsCallback.bind(this));
      this.markFilterToggle();
    },

    restoreFilter: function () {
      var self = this, counter = 0;

      this.filterId = 0;
      $('#docsSort').val(this.collection.getSort());
      _.each(this.restoredFilters, function (f) {
        //change html here and restore filters
        if (counter !== 0) {
          self.addFilterItem();
        }
        if (f.operator !== undefined) {
          $('#attribute_name' + counter).val(f.attribute);
          $('#operator' + counter).val(f.operator);
          $('#attribute_value' + counter).val(f.value);
        }
        counter++;

        //add those filters also to the collection
        self.collection.addFilter(f.attribute, f.operator, f.value);
      });
    },

    addFilterItem : function () {
      // adds a line to the filter widget

      var num = ++this.filterId;
      $('#filterHeader').append(' <div class="queryline querylineAdd">'+
                                '<input id="attribute_name' + num +
                                '" type="text" placeholder="Attribute name">'+
                                '<select name="operator" id="operator' +
                                num + '" class="filterSelect">'+
                                '    <option value="==">==</option>'+
                                '    <option value="!=">!=</option>'+
                                '    <option value="&lt;">&lt;</option>'+
                                '    <option value="&lt;=">&lt;=</option>'+
                                '    <option value="&gt;=">&gt;=</option>'+
                                '    <option value="&gt;">&gt;</option>'+
                                '</select>'+
                                '<input id="attribute_value' + num +
                                '" type="text" placeholder="Attribute value" ' +
                                'class="filterValue">'+
                                ' <a class="removeFilterItem" id="removeFilter' + num + '">' +
                                '<i class="icon icon-minus arangoicon"></i></a></div>');
      this.filters[num] = true;
    },

    filterValueKeydown : function (e) {
      if (e.keyCode === 13) {
        this.sendFilter();
      }
    },

    removeFilterItem : function (e) {

      // removes line from the filter widget
      var button = e.currentTarget;

      var filterId = button.id.replace(/^removeFilter/, '');
      // remove the filter from the list
      delete this.filters[filterId];
      delete this.restoredFilters[filterId];

      // remove the line from the DOM
      $(button.parentElement).remove();
    },

    removeAllFilterItems : function () {
      var childrenLength = $('#filterHeader').children().length;
      var i;
      for (i = 1; i <= childrenLength; i++) {
        $('#removeFilter'+i).parent().remove();
      }
      this.filters = { "0" : true };
      this.filterId = 0;
    },

    addDocumentModal: function () {
      var collid  = window.location.hash.split("/")[1],
      buttons = [], tableContent = [],
      // second parameter is "true" to disable caching of collection type
      doctype = arangoHelper.collectionApiType(collid, true);
      if (doctype === 'edge') {

        tableContent.push(
          window.modalView.createTextEntry(
            'new-edge-from-attr',
            '_from',
            '',
            "document _id: document handle of the linked vertex (incoming relation)",
            undefined,
            false,
            [
              {
                rule: Joi.string().required(),
                msg: "No _from attribute given."
              }
            ]
          )
        );

        tableContent.push(
          window.modalView.createTextEntry(
            'new-edge-to',
            '_to',
            '',
            "document _id: document handle of the linked vertex (outgoing relation)",
            undefined,
            false,
            [
              {
                rule: Joi.string().required(),
                msg: "No _to attribute given."
              }
            ]
          )
        );

        tableContent.push(
          window.modalView.createTextEntry(
            'new-edge-key-attr',
            '_key',
            undefined,
            "the edges unique key(optional attribute, leave empty for autogenerated key",
            'is optional: leave empty for autogenerated key',
            false,
            [
              {
                rule: Joi.string().allow('').optional(),
                msg: ""
              }
            ]
          )
        );

        buttons.push(
          window.modalView.createSuccessButton('Create', this.addEdge.bind(this))
        );

        window.modalView.show(
          'modalTable.ejs',
          'Create edge',
          buttons,
          tableContent
        );
      }
      else {
        tableContent.push(
          window.modalView.createTextEntry(
            'new-document-key-attr',
            '_key',
            undefined,
            "the documents unique key(optional attribute, leave empty for autogenerated key",
            'is optional: leave empty for autogenerated key',
            false,
            [
              {
                rule: Joi.string().allow('').optional(),
                msg: ""
              }
            ]
          )
        );

        buttons.push(
          window.modalView.createSuccessButton('Create', this.addDocument.bind(this))
        );

        window.modalView.show(
          'modalTable.ejs',
          'Create document',
          buttons,
          tableContent
        );
      }
    },

    addEdge: function () {
      var collid  = window.location.hash.split("/")[1];
      var from = $('.modal-body #new-edge-from-attr').last().val();
      var to = $('.modal-body #new-edge-to').last().val();
      var key = $('.modal-body #new-edge-key-attr').last().val();

      var result;
      if (key !== '' || key !== undefined) {
        result = this.documentStore.createTypeEdge(collid, from, to, key);
      }
      else {
        result = this.documentStore.createTypeEdge(collid, from, to);
      }

      if (result !== false) {
        //$('#edgeCreateModal').modal('hide');
        window.modalView.hide();
        window.location.hash = "collection/"+result;
      }
      //Error
      else {
        arangoHelper.arangoError('Edge error', 'Creation failed.');
      }
    },

    addDocument: function() {
      var collid = window.location.hash.split("/")[1];
      var key = $('.modal-body #new-document-key-attr').last().val();
      var result;
      if (key !== '' || key !== undefined) {
        result = this.documentStore.createTypeDocument(collid, key);
      }
      else {
        result = this.documentStore.createTypeDocument(collid);
      }
      //Success
      if (result !== false) {
        window.modalView.hide();
        window.location.hash = "collection/" + result;
      }
      else {
        arangoHelper.arangoError('Document error', 'Creation failed.');
      }
    },

    moveSelectedDocs: function() {
      var buttons = [], tableContent = [],
      toDelete = this.getSelectedDocs();

      if (toDelete.length === 0) {
        return;
      }

      tableContent.push(
        window.modalView.createTextEntry(
          'move-documents-to',
          'Move to',
          '',
          false,
          'collection-name',
          true,
          [
            {
              rule: Joi.string().regex(/^[a-zA-Z]/),
              msg: "Collection name must always start with a letter."
            },
            {
              rule: Joi.string().regex(/^[a-zA-Z0-9\-_]*$/),
              msg: 'Only Symbols "_" and "-" are allowed.'
            },
            {
              rule: Joi.string().required(),
              msg: "No collection name given."
            }
          ]
        )
      );

      buttons.push(
        window.modalView.createSuccessButton('Move', this.confirmMoveSelectedDocs.bind(this))
      );

      window.modalView.show(
        'modalTable.ejs',
        'Move documents',
        buttons,
        tableContent
      );
    },

    confirmMoveSelectedDocs: function() {
      var toMove = this.getSelectedDocs(),
      self = this,
      toCollection = $('.modal-body').last().find('#move-documents-to').val();

      var callback = function() {
        this.collection.getDocuments(this.getDocsCallback.bind(this));
        $('#markDocuments').click();
        window.modalView.hide();
      }.bind(this);

      _.each(toMove, function(key) {
        self.collection.moveDocument(key, self.collection.collectionID, toCollection, callback);
      });
    },

    deleteSelectedDocs: function() {
      var buttons = [], tableContent = [];
      var toDelete = this.getSelectedDocs();

      if (toDelete.length === 0) {
        return;
      }

      tableContent.push(
        window.modalView.createReadOnlyEntry(
          undefined,
          toDelete.length + ' documents selected',
          'Do you want to delete all selected documents?',
          undefined,
          undefined,
          false,
          undefined
        )
      );

      buttons.push(
        window.modalView.createDeleteButton('Delete', this.confirmDeleteSelectedDocs.bind(this))
      );

      window.modalView.show(
        'modalTable.ejs',
        'Delete documents',
        buttons,
        tableContent
      );
    },

    confirmDeleteSelectedDocs: function() {
      var toDelete = this.getSelectedDocs();
      var deleted = [], self = this;

      _.each(toDelete, function(key) {
        var result = false;
        if (self.type === 'document') {
          result = self.documentStore.deleteDocument(
            self.collection.collectionID, key
          );
          if (result) {
            //on success
            deleted.push(true);
            self.collection.setTotalMinusOne();
          }
          else {
            deleted.push(false);
            arangoHelper.arangoError('Document error', 'Could not delete document.');
          }
        }
        else if (self.type === 'edge') {
          result = self.documentStore.deleteEdge(self.collection.collectionID, key);
          if (result === true) {
            //on success
            self.collection.setTotalMinusOne();
            deleted.push(true);
          }
          else {
            deleted.push(false);
            arangoHelper.arangoError('Edge error', 'Could not delete edge');
          }
        }
      });
      this.collection.getDocuments(this.getDocsCallback.bind(this));
      $('#markDocuments').click();
      window.modalView.hide();
    },

    getSelectedDocs: function() {
      var toDelete = [];
      _.each($('#documentsTableID tbody tr'), function(element) {
        if ($(element).hasClass('selected-row')) {
          toDelete.push($($(element).children()[1]).find('.key').text());
        }
      });
      return toDelete;
    },

    remove: function (a) {
      this.docid = $(a.currentTarget).closest("tr").attr("id").substr(4);
      $("#confirmDeleteBtn").attr("disabled", false);
      $('#docDeleteModal').modal('show');
    },

    confirmDelete: function () {
      $("#confirmDeleteBtn").attr("disabled", true);
      var hash = window.location.hash.split("/");
      var check = hash[3];
      //to_do - find wrong event handler
      if (check !== 'source') {
        this.reallyDelete();
      }
    },

    reallyDelete: function () {
      var deleted = false;
      var result;
      if (this.type === 'document') {
        result = this.documentStore.deleteDocument(
          this.collection.collectionID, this.docid
        );
        if (result) {
          //on success
          this.collection.setTotalMinusOne();
          deleted = true;
        }
        else {
          arangoHelper.arangoError('Doc error');
        }
      }
      else if (this.type === 'edge') {
        result = this.documentStore.deleteEdge(this.collection.collectionID, this.docid);
        if (result === true) {
          //on success
          this.collection.setTotalMinusOne();
          deleted = true;
        }
        else {
          arangoHelper.arangoError('Edge error');
        }
      }

      if (deleted === true) {
        this.collection.getDocuments(this.getDocsCallback.bind(this));
        $('#docDeleteModal').modal('hide');
      }
    },

    editModeClick: function(event) {
      var target = $(event.currentTarget);

      if(target.hasClass('selected-row')) {
        target.removeClass('selected-row');
      } else {
        target.addClass('selected-row');
      }

      var selected = this.getSelectedDocs();
      $('.selectedCount').text(selected.length);

      _.each(this.editButtons, function(button) {
        if (selected.length > 0) {
          $(button).prop('disabled', false);
          $(button).removeClass('button-neutral');
          $(button).removeClass('disabled');
          if (button === "#moveSelected") {
            $(button).addClass('button-success');
          }
          else {
            $(button).addClass('button-danger');
          }
        }
        else {
          $(button).prop('disabled', true);
          $(button).addClass('disabled');
          $(button).addClass('button-neutral');
          if (button === "#moveSelected") {
            $(button).removeClass('button-success');
          }
          else {
            $(button).removeClass('button-danger');
          }
        }
      });
    },

    clicked: function (event) {
      var self = event.currentTarget;
      window.App.navigate("collection/" + this.collection.collectionID + "/" + $(self).attr("id").substr(4), true);
    },

    drawTable: function() {
      this.tableView.setElement($(this.table)).render();

      // we added some icons, so we need to fix their tooltips
      arangoHelper.fixTooltips(".icon_arangodb, .arangoicon", "top");

      $(".prettify").snippet("javascript", {
        style: "nedit",
        menu: false,
        startText: false,
        transparent: true,
        showNum: false
      });
    },

    checkCollectionState: function() {
      if (this.lastCollectionName === this.collectionName) {
        if (this.activeFilter) {
          this.filterCollection();
          console.log("yes");
          this.restoreFilter();
        }
      }
      else {
        if (this.lastCollectionName !== undefined) {
          this.collection.resetFilter();
          this.collection.setSort('_key');
          this.restoredFilters = [];
          this.activeFilter = false;
        }
      }
    },

    render: function() {
      $(this.el).html(this.template.render({}));
      this.tableView.setElement($(this.table)).drawLoading();

      this.collectionContext = this.collectionsStore.getPosition(
        this.collection.collectionID
      );

      this.breadcrumb();

      this.checkCollectionState();

      //set last active collection name
      this.lastCollectionName = this.collectionName;

      /*
      if (this.collectionContext.prev === null) {
        $('#collectionPrev').parent().addClass('disabledPag');
      }
      if (this.collectionContext.next === null) {
        $('#collectionNext').parent().addClass('disabledPag');
      }
      */

      this.uploadSetup();

      $("[data-toggle=tooltip]").tooltip();
      $('.upload-info').tooltip();

      arangoHelper.fixTooltips(".icon_arangodb, .arangoicon", "top");
      this.renderPaginationElements();
      this.selectActivePagesize();
      this.markFilterToggle();
      return this;
    },

    rerender: function () {
      this.collection.getDocuments(this.getDocsCallback.bind(this));
    },

    selectActivePagesize: function() {
      $('#documentSize').val(this.collection.getPageSize());
    },

    renderPaginationElements: function () {
      this.renderPagination();
      var total = $('#totalDocuments');
      if (total.length === 0) {
        $('#documentsToolbarFL').append(
          '<a id="totalDocuments" class="totalDocuments"></a>'
        );
        total = $('#totalDocuments');
      }
      if (this.type === 'document') {
        total.html(this.collection.getTotal() + " document(s)");
      }
      if (this.type === 'edge') {
        total.html(this.collection.getTotal() + " edge(s)");
      }
    },

    breadcrumb: function () {
      this.collectionName = window.location.hash.split("/")[1];
      $('#transparentHeader').append(
        '<div class="breadcrumb">'+
        '<a class="activeBread" href="#collections">Collections</a>'+
        '<span class="disabledBread"><i class="fa fa-chevron-right"></i></span>'+
        '<a class="disabledBread">'+this.collectionName+'</a>'+
        '</div>'
      );
    }

  });
}());

/*jshint browser: true, evil: true */
/*jshint unused: false */
/*global Backbone, templateEngine, $, window*/

(function() {
  "use strict";

  window.EditListEntryView = Backbone.View.extend({

    template: templateEngine.createTemplate("editListEntryView.ejs"),

    initialize: function(opts) {
      this.key = opts.key;
      this.value = opts.value;
      this.render();
    },

    events: {
      "click .deleteAttribute": "removeRow"
    },

    render: function() {
      $(this.el).html(this.template.render({
        key: this.key,
        value: JSON.stringify(this.value),
        isReadOnly: this.isReadOnly()
      }));
    },

    isReadOnly: function() {
      return this.key.indexOf("_") === 0;
    },

    getKey: function() {
      return $(".key").val();
    },

    getValue: function() {
      var val = $(".val").val();
      try {
        val = JSON.parse(val);
      } catch (e) {
        try {
          eval("val = " + val);
          return val;
        } catch (e2) {
          return $(".val").val();
        }
      }
      return val;
    },

    removeRow: function() {
      this.remove();
    }
  });
}());

/*jshint browser: true */
/*jshint unused: false */
/*global Backbone, templateEngine, $, arangoHelper, window*/

(function() {
  "use strict";
  window.FooterView = Backbone.View.extend({
    el: '#footerBar',
    system: {},
    isOffline: true,
    isOfflineCounter: 0,
    firstLogin: true,

    events: {
      'click .footer-center p' : 'showShortcutModal'
    },

    initialize: function () {
      //also server online check
      var self = this;
      window.setInterval(function(){
        self.getVersion();
      }, 15000);
      self.getVersion();
    },

    template: templateEngine.createTemplate("footerView.ejs"),

    showServerStatus: function(isOnline) {
      if (isOnline === true) {
        $('.serverStatusIndicator').addClass('isOnline');
        $('.serverStatusIndicator').addClass('fa-check-circle-o');
        $('.serverStatusIndicator').removeClass('fa-times-circle-o');
      }
      else {
        $('.serverStatusIndicator').removeClass('isOnline');
        $('.serverStatusIndicator').removeClass('fa-check-circle-o');
        $('.serverStatusIndicator').addClass('fa-times-circle-o');
      }
    },

    showShortcutModal: function() {
      window.arangoHelper.hotkeysFunctions.showHotkeysModal();
    },

    getVersion: function () {
      var self = this;

      // always retry this call, because it also checks if the server is online
      $.ajax({
        type: "GET",
        cache: false,
        url: "/_api/version",
        contentType: "application/json",
        processData: false,
        async: true,
        success: function(data) {
          self.showServerStatus(true);
          if (self.isOffline === true) {
            self.isOffline = false;
            self.isOfflineCounter = 0;
            if (!self.firstLogin) {
              window.setTimeout(function(){
                self.showServerStatus(true);
              }, 1000);
            } else {
              self.firstLogin = false;
            }
            self.system.name = data.server;
            self.system.version = data.version;
            self.render();
          }
        },
        error: function (data) {
          self.isOffline = true;
          self.isOfflineCounter++;
          if (self.isOfflineCounter >= 1) {
            //arangoHelper.arangoError("Server", "Server is offline");
            self.showServerStatus(false);
          }
        }
      });

      if (! self.system.hasOwnProperty('database')) {
        $.ajax({
          type: "GET",
          cache: false,
          url: "/_api/database/current",
          contentType: "application/json",
          processData: false,
          async: true,
          success: function(data) {
            var name = data.result.name;
            self.system.database = name;

            var timer = window.setInterval(function () {
              var navElement = $('#databaseNavi');

              if (navElement) {
                window.clearTimeout(timer);
                timer = null;

                if (name === '_system') {
                  // show "logs" button
                  $('.logs-menu').css('visibility', 'visible');
                  $('.logs-menu').css('display', 'inline');
                  // show dbs menues
                  $('#databaseNavi').css('display','inline');
                }
                else {
                  // hide "logs" button
                  $('.logs-menu').css('visibility', 'hidden');
                  $('.logs-menu').css('display', 'none');
                }
                self.render();
              }
            }, 50);
          }
        });
      }
    },

    renderVersion: function () {
      if (this.system.hasOwnProperty('database') && this.system.hasOwnProperty('name')) {
        $(this.el).html(this.template.render({
          name: this.system.name,
          version: this.system.version,
          database: this.system.database
        }));
      }
    },

    render: function () {
      if (!this.system.version) {
        this.getVersion();
      }
      $(this.el).html(this.template.render({
        name: this.system.name,
        version: this.system.version
      }));
      return this;
    }

  });
}());

// obsolete file

/*jshint browser: true */
/*jshint unused: false */
/*global Backbone, $, window, EJS, arangoHelper, _, templateEngine, Joi*/

(function() {
  'use strict';

  window.FoxxActiveView = Backbone.View.extend({
    tagName: 'div',
    className: 'tile',
    template: templateEngine.createTemplate('foxxActiveView.ejs'),
    _show: true,

    events: {
      'click' : 'openAppDetailView'
    },

    openAppDetailView: function() {
      window.App.navigate('applications/' + encodeURIComponent(this.model.get('mount')), { trigger: true });
    },

    toggle: function(type, shouldShow) {
      switch (type) {
        case "devel":
          if (this.model.isDevelopment()) {
            this._show = shouldShow;
          }
          break;
        case "production":
          if (!this.model.isDevelopment() && !this.model.isSystem()) {
            this._show = shouldShow;
          }
          break;
        case "system":
          if (this.model.isSystem()) {
            this._show = shouldShow;
          }
          break;
        default:
      }
      if (this._show) {
        $(this.el).show();
      } else {
        $(this.el).hide();
      }
    },

    render: function(){
      $(this.el).html(this.template.render({
        model: this.model
      }));
      return $(this.el);
    }
  });
}());

/*jshint browser: true */
/*global $, Joi, _, alert, templateEngine, window*/
(function() {
  "use strict";

  var errors = require("internal").errors;
  var appStoreTemplate = templateEngine.createTemplate("applicationListView.ejs");

  var FoxxInstallView = function(opts) {
    this.collection = opts.collection;
  };

  var installCallback = function(result) {
    if (result.error === false) {
      this.collection.fetch({ async: false });
      window.modalView.hide();
      this.reload();
    } else {
      var res = result;
      if (result.hasOwnProperty("responseJSON")) {
        res = result.responseJSON;
      } 
      switch(res.errorNum) {
        case errors.ERROR_APPLICATION_DOWNLOAD_FAILED.code:
          alert("Unable to download application from the given repository.");
          break;
        default:
          alert("Error: " + res.errorNum + ". " + res.errorMessage);
      }
    }
  };

  var setMountpointValidators = function() {
    window.modalView.modalBindValidation({
      id: "new-app-mount",
      validateInput: function() {
        return [
          {
            rule: Joi.string().regex(/^(\/(APP[^\/]+|(?!APP)[a-zA-Z0-9_\-%]+))+$/i),
            msg: "May not contain /APP"
          },
          {
            rule: Joi.string().regex(/^(\/[a-zA-Z0-9_\-%]+)+$/),
            msg: "Can only contain [a-zA-Z0-9_-%]"
          },
          {
            rule: Joi.string().regex(/^\/([^_]|_open\/)/),
            msg: "Mountpoints with _ are reserved for internal use"
          },
          {
            rule: Joi.string().regex(/[^\/]$/),
            msg: "May not end with /"
          },
          {
            rule: Joi.string().regex(/^\//),
            msg: "Has to start with /"
          },
          {
            rule: Joi.string().required().min(2),
            msg: "Has to be non-empty"
          },
        ];
      }
    });
  };

  var setGithubValidators = function() {
    window.modalView.modalBindValidation({
      id: "repository",
      validateInput: function() {
        return [
          {
            rule: Joi.string().required().regex(/^[a-zA-Z0-9_\-]+\/[a-zA-Z0-9_\-]+$/),
            msg: "No valid Github account and repository."
          }
        ];
      }
    });
  };

  var setNewAppValidators = function() {
    window.modalView.modalBindValidation({
      id: "new-app-author",
      validateInput: function() {
        return [
          {
            rule: Joi.string().required().min(1),
            msg: "Has to be non empty."
          }
        ];
      }
    });
    window.modalView.modalBindValidation({
      id: "new-app-name",
      validateInput: function() {
        return [
          {
            rule: Joi.string().required().regex(/^[a-zA-Z\-_][a-zA-Z0-9\-_]*$/),
            msg: "Can only contain a to z, A to Z, 0-9, '-' and '_'."
          }
        ];
      }
    });

    window.modalView.modalBindValidation({
      id: "new-app-description",
      validateInput: function() {
        return [
          {
            rule: Joi.string().required().min(1),
            msg: "Has to be non empty."
          }
        ];
      }
    });

    window.modalView.modalBindValidation({
      id: "new-app-license",
      validateInput: function() {
        return [
          {
            rule: Joi.string().required().regex(/^[a-zA-Z0-9 \.,;\-]+$/),
            msg: "Has to be non empty."
          }
        ];
      }
    });
    window.modalView.modalTestAll();
  };

  var switchTab = function(openTab) {
    window.modalView.clearValidators();
    var button = $("#modalButton1");
    if (!this._upgrade) {
      setMountpointValidators();
    }
    switch (openTab) {
      case "newApp":
        button.html("Generate");
        button.prop("disabled", false);
        setNewAppValidators();
        break;
      case "appstore":
        button.html("Install");
        button.prop("disabled", true);
        break;
      case "github":
        setGithubValidators();
        button.html("Install");
        button.prop("disabled", false);
        break;
      case "zip":
        button.html("Install");
        button.prop("disabled", false);
        break;
      default:
    }
    
    if (! button.prop("disabled") && ! window.modalView.modalTestAll()) {
      // trigger the validation so the "ok" button has the correct state
      button.prop("disabled", true);
    }
  };

  var switchModalButton = function(event) {
    var openTab = $(event.currentTarget).attr("href").substr(1);
    switchTab.call(this, openTab);
  };

  var installFoxxFromStore = function(e) {
    switchTab.call(this, "appstore");
    if (window.modalView.modalTestAll()) {
      var mount, flag;
      if (this._upgrade) {
        mount = this.mount;
        flag = $('#new-app-teardown').prop("checked");
      } else {
        mount = window.arangoHelper.escapeHtml($('#new-app-mount').val());
      }
      var toInstall = $(e.currentTarget).attr("appId");
      var version = $(e.currentTarget).attr("appVersion");
      if (flag !== undefined) {
        this.collection.installFromStore({name: toInstall, version: version}, mount, installCallback.bind(this), flag);
      } else {
        this.collection.installFromStore({name: toInstall, version: version}, mount, installCallback.bind(this));
      }
    }
  };

  var installFoxxFromZip = function(files, data) {
    if (data === undefined) {
      data = this._uploadData;
    }
    else {
      this._uploadData = data;
    }
    if (data && window.modalView.modalTestAll()) {
      var mount, flag;
      if (this._upgrade) {
        mount = this.mount;
        flag = $('#new-app-teardown').prop("checked");
      } else {
        mount = window.arangoHelper.escapeHtml($('#new-app-mount').val());
      }
      if (flag !== undefined) {
        this.collection.installFromZip(data.filename, mount, installCallback.bind(this), flag);
      } else {
        this.collection.installFromZip(data.filename, mount, installCallback.bind(this));
      }
    }
  };

  var installFoxxFromGithub = function() {
    if (window.modalView.modalTestAll()) {
      var url, version, mount, flag;
      if (this._upgrade) {
        mount = this.mount;
        flag = $('#new-app-teardown').prop("checked");
      } else {
        mount = window.arangoHelper.escapeHtml($('#new-app-mount').val());
      }
      url = window.arangoHelper.escapeHtml($('#repository').val());
      version = window.arangoHelper.escapeHtml($('#tag').val());

      if (version === '') {
        version = "master";
      }
      var info = {
        url: window.arangoHelper.escapeHtml($('#repository').val()),
        version: window.arangoHelper.escapeHtml($('#tag').val())
      };

      try {
        Joi.assert(url, Joi.string().regex(/^[a-zA-Z0-9_\-]+\/[a-zA-Z0-9_\-]+$/));
      } catch (e) {
        return;
      }
      //send server req through collection
      if (flag !== undefined) {
        this.collection.installFromGithub(info, mount, installCallback.bind(this), flag);
      } else {
        this.collection.installFromGithub(info, mount, installCallback.bind(this));
      }
    }
  };

  var generateNewFoxxApp = function() {
    if (window.modalView.modalTestAll()) {
      var mount, flag;
      if (this._upgrade) {
        mount = this.mount;
        flag = $('#new-app-teardown').prop("checked");
      } else {
        mount = window.arangoHelper.escapeHtml($('#new-app-mount').val());
      }
      var info = {
        name: window.arangoHelper.escapeHtml($("#new-app-name").val()),
        collectionNames: _.map($('#new-app-collections').select2("data"), function(d) {
          return window.arangoHelper.escapeHtml(d.text);
        }),
        //        authenticated: window.arangoHelper.escapeHtml($("#new-app-name").val()),
        author: window.arangoHelper.escapeHtml($("#new-app-author").val()),
        license: window.arangoHelper.escapeHtml($("#new-app-license").val()),
        description: window.arangoHelper.escapeHtml($("#new-app-description").val())
      };
      if (flag !== undefined) {
        this.collection.generate(info, mount, installCallback.bind(this), flag);
      } else {
        this.collection.generate(info, mount, installCallback.bind(this));
      }
    }
  };

  var addAppAction = function() {
    var openTab = $(".modal-body .tab-pane.active").attr("id");
    switch (openTab) {
      case "newApp":
        generateNewFoxxApp.apply(this);
        break;
      case "github":
        installFoxxFromGithub.apply(this);
        break;
      case "zip":
        installFoxxFromZip.apply(this);
        break;
      default:
    }
  };

  var render = function(scope, upgrade) {
    var buttons = [];
    var modalEvents = {
      "click #infoTab a"   : switchModalButton.bind(scope),
      "click .install-app" : installFoxxFromStore.bind(scope)
    };
    buttons.push(
      window.modalView.createSuccessButton("Generate", addAppAction.bind(scope))
    );
    window.modalView.show(
      "modalApplicationMount.ejs",
      "Install Service",
      buttons,
      upgrade,
      undefined,
      undefined,
      modalEvents
    );
    $("#new-app-collections").select2({
      tags: [],
      showSearchBox: false,
      minimumResultsForSearch: -1,
      width: "336px"
    });

    var checkButton = function() {
      var button = $("#modalButton1");
        if (! button.prop("disabled") && ! window.modalView.modalTestAll()) {
          button.prop("disabled", true);
        }
        else {
          button.prop("disabled", false);
        }
    };

    $('.select2-search-field input').focusout(function() {
      checkButton();
      window.setTimeout(function() {
        if ($('.select2-drop').is(':visible')) {
          if (!$('#select2-search-field input').is(':focus')) {
            $('#s2id_new-app-collections').select2('close');
            checkButton();
          }
        }
      }, 80);
    });
    $('.select2-search-field input').focusin(function() {
      if ($('.select2-drop').is(':visible')) {
        var button = $("#modalButton1");
        button.prop("disabled", true);
      }
    });
    $("#upload-foxx-zip").uploadFile({
      url: "/_api/upload?multipart=true",
      allowedTypes: "zip",
      multiple: false,
      onSuccess: installFoxxFromZip.bind(scope)
    });
    $.get("foxxes/fishbowl", function(list) {
      var table = $("#appstore-content");
      table.html('');
      _.each(_.sortBy(list, "name"), function(app) {
        table.append(appStoreTemplate.render(app));
      });
    }).fail(function() {
      var table = $("#appstore-content");
      table.append("<tr><td>Store is not available. ArangoDB is not able to connect to github.com</td></tr>");
    });
  };

  FoxxInstallView.prototype.install = function(callback) {
    this.reload = callback;
    this._upgrade = false;
    this._uploadData = undefined;
    delete this.mount;
    render(this, false);
    window.modalView.clearValidators();
    setMountpointValidators();
    setNewAppValidators();
  };

  FoxxInstallView.prototype.upgrade = function(mount, callback) {
    this.reload = callback;
    this._upgrade = true;
    this._uploadData = undefined;
    this.mount = mount;
    render(this, true);
    window.modalView.clearValidators();
    setNewAppValidators();
  };

  window.FoxxInstallView = FoxxInstallView;
}());

/*jshint browser: true */
/*jshint unused: false */
/*global Backbone, $, _, window, templateEngine, arangoHelper, GraphViewerUI, require */

(function() {
  "use strict";

  window.GraphManagementView = Backbone.View.extend({
    el: '#content',
    template: templateEngine.createTemplate("graphManagementView.ejs"),
    edgeDefintionTemplate: templateEngine.createTemplate("edgeDefinitionTable.ejs"),
    eCollList : [],
    removedECollList : [],

    dropdownVisible: false,

    events: {
      "click #deleteGraph"                        : "deleteGraph",
      "click .icon_arangodb_settings2.editGraph"  : "editGraph",
      "click #createGraph"                        : "addNewGraph",
      "keyup #graphManagementSearchInput"         : "search",
      "click #graphManagementSearchSubmit"        : "search",
      "click .tile-graph"                         : "redirectToGraphViewer",
      "click #graphManagementToggle"              : "toggleGraphDropdown",
      "click .css-label"                          : "checkBoxes",
      "change #graphSortDesc"                     : "sorting"
    },

    toggleTab: function(e) {
      var id = e.currentTarget.id;
      id = id.replace('tab-', '');
      $('#tab-content-create-graph .tab-pane').removeClass('active');
      $('#tab-content-create-graph #' + id).addClass('active');

      if (id === 'exampleGraphs') {
        $('#modal-dialog .modal-footer button').css("display", "none");
      }
      else {
        $('#modal-dialog .modal-footer button').css("display", "block");
      }
    },

    redirectToGraphViewer: function(e) {
      var name = $(e.currentTarget).attr("id");
      name = name.substr(0, name.length - 5);
      window.location = window.location + '/' + encodeURIComponent(name);
    },

    loadGraphViewer: function(graphName) {
      var edgeDefs = this.collection.get(graphName).get("edgeDefinitions");
      if (!edgeDefs || edgeDefs.length === 0) {
        // User Info
        return;
      }
      var adapterConfig = {
        type: "gharial",
        graphName: graphName,
        baseUrl: require("internal").arango.databasePrefix("/")
      };
      var width = $("#content").width() - 75;
      $("#content").html("");

      var height = arangoHelper.calculateCenterDivHeight();

      this.ui = new GraphViewerUI($("#content")[0], adapterConfig, width, height, {
        nodeShaper: {
          label: "_key",
          color: {
            type: "attribute",
            key: "_key"
          }
        }

      }, true);

      $('.contentDiv').height(height);

    },

    handleResize: function(w) {
      if (!this.width || this.width !== w) {
        this.width = w;
        if (this.ui) {
          this.ui.changeWidth(w);
        }
      }
    },

    addNewGraph: function(e) {
      e.preventDefault();
      this.createEditGraphModal();
    },

    deleteGraph: function() {
      var self = this;
      var name = $("#editGraphName")[0].value;

      if ($('#dropGraphCollections').is(':checked')) {

        var callback = function(success) {
          if (success) {
            self.collection.remove(self.collection.get(name));
            self.updateGraphManagementView();
            window.modalView.hide();
          }
          else {
            window.modalView.hide();
          }
        };

        this.collection.dropAndDeleteGraph(name, callback);
      }
      else {
        this.collection.get(name).destroy({
          success: function() {
            self.updateGraphManagementView();
            window.modalView.hide();
          },
          error: function(xhr, err) {
            var response = JSON.parse(err.responseText),
              msg = response.errorMessage;
            arangoHelper.arangoError(msg);
            window.modalView.hide();
          }
        });
      }
    },

    checkBoxes: function (e) {
      //chrome bugfix
      var clicked = e.currentTarget.id;
      $('#'+clicked).click();
    },

    toggleGraphDropdown: function() {
      //apply sorting to checkboxes
      $('#graphSortDesc').attr('checked', this.collection.sortOptions.desc);

      $('#graphManagementToggle').toggleClass('activated');
      $('#graphManagementDropdown2').slideToggle(200);
    },

    sorting: function() {
      if ($('#graphSortDesc').is(":checked")) {
        this.collection.setSortingDesc(true);
      }
      else {
        this.collection.setSortingDesc(false);
      }

      if ($('#graphManagementDropdown').is(":visible")) {
        this.dropdownVisible = true;
      } else {
        this.dropdownVisible = false;
      }

      this.render();
    },

    createExampleGraphs: function(e) {
      var graph = $(e.currentTarget).attr('graph-id'), self = this;
      $.ajax({
        type: "POST",
        url: "/_admin/aardvark/graph-examples/create/" + encodeURIComponent(graph),
        success: function () {
          window.modalView.hide();
          self.updateGraphManagementView();
          arangoHelper.arangoNotification('Example Graphs', 'Graph: ' + graph + ' created.');
        },
        error: function (err) {
          window.modalView.hide();
          console.log(err);
          if (err.responseText) {
            try {
              var msg = JSON.parse(err.responseText);
              arangoHelper.arangoError('Example Graphs', msg.errorMessage);
            }
            catch (e) {
              arangoHelper.arangoError('Example Graphs', 'Could not create example graph: ' + graph);
            }
          }
          else {
            arangoHelper.arangoError('Example Graphs', 'Could not create example graph: ' + graph);
          }
        }
      });
    },

    render: function() {
      this.collection.fetch({
        async: false
      });

      this.collection.sort();

      $(this.el).html(this.template.render({
        graphs: this.collection,
        searchString : ''
      }));

      if (this.dropdownVisible === true) {
        $('#graphManagementDropdown2').show();
        $('#graphSortDesc').attr('checked', this.collection.sortOptions.desc);
        $('#graphManagementToggle').toggleClass('activated');
        $('#graphManagementDropdown').show();
      }

      this.events["click .tableRow"] = this.showHideDefinition.bind(this);
      this.events['change tr[id*="newEdgeDefinitions"]'] = this.setFromAndTo.bind(this);
      this.events["click .graphViewer-icon-button"] = this.addRemoveDefinition.bind(this);
      this.events["click #graphTab a"] = this.toggleTab.bind(this);
      this.events["click .createExampleGraphs"] = this.createExampleGraphs.bind(this);
      this.events["focusout .select2-search-field input"] = function(e){
        if ($('.select2-drop').is(':visible')) {
          if (!$('#select2-search-field input').is(':focus')) {
            window.setTimeout(function() { 
              $(e.currentTarget).parent().parent().parent().select2('close');
            }, 80);
          }
        } 
      }.bind(this);
      arangoHelper.setCheckboxStatus("#graphManagementDropdown");

      return this;
    },

    setFromAndTo : function (e) {
      e.stopPropagation();
      var map = this.calculateEdgeDefinitionMap(), id, i, tmp;

      if (e.added) {
        if (this.eCollList.indexOf(e.added.id) === -1 &&
          this.removedECollList.indexOf(e.added.id) !== -1) {
          id = e.currentTarget.id.split("row_newEdgeDefinitions")[1];
          $('input[id*="newEdgeDefinitions' + id  + '"]').select2("val", null);
          $('input[id*="newEdgeDefinitions' + id  + '"]').attr(
            "placeholder","The collection "+ e.added.id + " is already used."
          );
          return;
        }
        this.removedECollList.push(e.added.id);
        this.eCollList.splice(this.eCollList.indexOf(e.added.id),1);
      } else {
        this.eCollList.push(e.removed.id);
        this.removedECollList.splice(this.removedECollList.indexOf(e.removed.id),1);
      }

      if (map[e.val]) {
        id = e.currentTarget.id.split("row_newEdgeDefinitions")[1];
        $('#s2id_fromCollections'+id).select2("val", map[e.val].from);
        $('#fromCollections'+id).attr('disabled', true);
        $('#s2id_toCollections'+id).select2("val", map[e.val].to);
        $('#toCollections'+id).attr('disabled', true);
      } else {
        id = e.currentTarget.id.split("row_newEdgeDefinitions")[1];
        $('#s2id_fromCollections'+id).select2("val", null);
        $('#fromCollections'+id).attr('disabled', false);
        $('#s2id_toCollections'+id).select2("val", null);
        $('#toCollections'+id).attr('disabled', false);
      }
      /* following not needed? => destroys webif modal
      tmp = $('input[id*="newEdgeDefinitions"]');
      for (i = 0; i < tmp.length ; i++) {
        id = tmp[i].id;
        $('#' + id).select2({
          tags : this.eCollList,
          showSearchBox: false,
          minimumResultsForSearch: -1,
          width: "336px",
          maximumSelectionSize: 1
        });
      }*/
    },

    editGraph : function(e) {
      e.stopPropagation();
      this.collection.fetch();
      this.graphToEdit = this.evaluateGraphName($(e.currentTarget).attr("id"), '_settings');
      var graph = this.collection.findWhere({_key: this.graphToEdit});
      this.createEditGraphModal(
        graph
      );
    },


    saveEditedGraph: function() {
      var name = $("#editGraphName")[0].value,
        editedVertexCollections = _.pluck($('#newVertexCollections').select2("data"), "text"),
        edgeDefinitions = [],
        newEdgeDefinitions = {},
        collection,
        from,
        to,
        index,
        edgeDefinitionElements;

      edgeDefinitionElements = $('[id^=s2id_newEdgeDefinitions]').toArray();
      edgeDefinitionElements.forEach(
        function(eDElement) {
          index = $(eDElement).attr("id");
          index = index.replace("s2id_newEdgeDefinitions", "");
          collection = _.pluck($('#s2id_newEdgeDefinitions' + index).select2("data"), "text")[0];
          if (collection && collection !== "") {
            from = _.pluck($('#s2id_fromCollections' + index).select2("data"), "text");
            to = _.pluck($('#s2id_toCollections' + index).select2("data"), "text");
            if (from.length !== 0 && to.length !== 0) {
              var edgeDefinition = {
                collection: collection,
                from: from,
                to: to
              };
              edgeDefinitions.push(edgeDefinition);
              newEdgeDefinitions[collection] = edgeDefinition;
            }
          }
        }
      );

      //if no edge definition is left
      if (edgeDefinitions.length === 0) {
        $('#s2id_newEdgeDefinitions0 .select2-choices').css("border-color", "red");
        $('#s2id_newEdgeDefinitions0')
        .parent()
        .parent()
        .next().find('.select2-choices').css("border-color", "red");
        $('#s2id_newEdgeDefinitions0').
          parent()
          .parent()
          .next()
          .next()
          .find('.select2-choices')
          .css("border-color", "red");
        return;
      }

      //get current edgeDefs/orphanage
      var graph = this.collection.findWhere({_key: name});
      var currentEdgeDefinitions = graph.get("edgeDefinitions");
      var currentOrphanage = graph.get("orphanCollections");
      var currentCollections = [];

      //delete removed orphans
      currentOrphanage.forEach(
        function(oC) {
          if (editedVertexCollections.indexOf(oC) === -1) {
            graph.deleteVertexCollection(oC);
          }
        }
      );
      //add new orphans
      editedVertexCollections.forEach(
        function(vC) {
          if (currentOrphanage.indexOf(vC) === -1) {
            graph.addVertexCollection(vC);
          }
        }
      );

      //evaluate all new, edited and deleted edge definitions
      var newEDs = [];
      var editedEDs = [];
      var deletedEDs = [];


      currentEdgeDefinitions.forEach(
        function(eD) {
          var collection = eD.collection;
          currentCollections.push(collection);
          var newED = newEdgeDefinitions[collection];
          if (newED === undefined) {
            deletedEDs.push(collection);
          } else if (JSON.stringify(newED) !== JSON.stringify(eD)) {
            editedEDs.push(collection);
          }
        }
      );
      edgeDefinitions.forEach(
        function(eD) {
          var collection = eD.collection;
          if (currentCollections.indexOf(collection) === -1) {
            newEDs.push(collection);
          }
        }
      );



      newEDs.forEach(
        function(eD) {
          graph.addEdgeDefinition(newEdgeDefinitions[eD]);
        }
      );

      editedEDs.forEach(
        function(eD) {
          graph.modifyEdgeDefinition(newEdgeDefinitions[eD]);
        }
      );

      deletedEDs.forEach(
        function(eD) {
          graph.deleteEdgeDefinition(eD);
        }
      );
      this.updateGraphManagementView();
      window.modalView.hide();
    },

    evaluateGraphName : function(str, substr) {
      var index = str.lastIndexOf(substr);
      return str.substring(0, index);
    },

    search: function() {
      var searchInput,
        searchString,
        strLength,
        reducedCollection;

      searchInput = $('#graphManagementSearchInput');
      searchString = $("#graphManagementSearchInput").val();
      reducedCollection = this.collection.filter(
        function(u) {
          return u.get("_key").indexOf(searchString) !== -1;
        }
      );
      $(this.el).html(this.template.render({
        graphs        : reducedCollection,
        searchString  : searchString
      }));

      //after rendering, get the "new" element
      searchInput = $('#graphManagementSearchInput');
      //set focus on end of text in input field
      strLength= searchInput.val().length;
      searchInput.focus();
      searchInput[0].setSelectionRange(strLength, strLength);
    },

    updateGraphManagementView: function() {
      var self = this;
      this.collection.fetch({
        success: function() {
          self.render();
        }
      });
    },

    createNewGraph: function() {
      var name = $("#createNewGraphName").val(),
        vertexCollections = _.pluck($('#newVertexCollections').select2("data"), "text"),
        edgeDefinitions = [],
        self = this,
        collection,
        from,
        to,
        index,
        edgeDefinitionElements;

      if (!name) {
        arangoHelper.arangoError(
          "A name for the graph has to be provided."
        );
        return 0;
      }

      if (this.collection.findWhere({_key: name})) {
        arangoHelper.arangoError(
          "The graph '" + name + "' already exists."
        );
        return 0;
      }

      edgeDefinitionElements = $('[id^=s2id_newEdgeDefinitions]').toArray();
      edgeDefinitionElements.forEach(
        function(eDElement) {
          index = $(eDElement).attr("id");
          index = index.replace("s2id_newEdgeDefinitions", "");
          collection = _.pluck($('#s2id_newEdgeDefinitions' + index).select2("data"), "text")[0];
          if (collection && collection !== "") {
            from = _.pluck($('#s2id_fromCollections' + index).select2("data"), "text");
            to = _.pluck($('#s2id_toCollections' + index).select2("data"), "text");
            if (from !== 1 && to !== 1) {
              edgeDefinitions.push(
                {
                  collection: collection,
                  from: from,
                  to: to
                }
              );
            }
          }
        }
      );

      if (edgeDefinitions.length === 0) {
        $('#s2id_newEdgeDefinitions0 .select2-choices').css("border-color", "red");
        $('#s2id_newEdgeDefinitions0').parent()
        .parent()
        .next()
        .find('.select2-choices')
        .css("border-color", "red");
        $('#s2id_newEdgeDefinitions0').parent()
        .parent()
        .next()
        .next()
        .find('.select2-choices')
        .css("border-color", "red");
        return;
      }

      this.collection.create({
        name: name,
        edgeDefinitions: edgeDefinitions,
        orphanCollections: vertexCollections
      }, {
        success: function() {
          self.updateGraphManagementView();
          window.modalView.hide();
        },
        error: function(obj, err) {
          var response = JSON.parse(err.responseText),
            msg = response.errorMessage;
          // Gritter does not display <>
          msg = msg.replace("<", "");
          msg = msg.replace(">", "");
          arangoHelper.arangoError(msg);
        }
      });
    },

    createEditGraphModal: function(graph) {
      var buttons = [],
          collList = [],
          tableContent = [],
          collections = this.options.collectionCollection.models,
          self = this,
          name = "",
          edgeDefinitions = [{collection : "", from : "", to :""}],
          orphanCollections = "",
          title,
          sorter = function(l, r) {
            l = l.toLowerCase();
            r = r.toLowerCase();
            if (l < r) {
              return -1;
            }
            if (l > r) {
              return 1;
            }
            return 0;
          };

      this.eCollList = [];
      this.removedECollList = [];

      collections.forEach(function (c) {
        if (c.get("isSystem")) {
          return;
        }
        if (c.get('type') === "edge") {
          self.eCollList.push(c.id);
        }
        else {
          collList.push(c.id);
        }
      });
      window.modalView.enableHotKeys = false;
      this.counter = 0;

      if (graph) {
        title = "Edit Graph";

        name = graph.get("_key");
        edgeDefinitions = graph.get("edgeDefinitions");
        if (!edgeDefinitions || edgeDefinitions.length === 0 ) {
          edgeDefinitions = [{collection : "", from : "", to :""}];
        }
        orphanCollections = graph.get("orphanCollections");

        tableContent.push(
          window.modalView.createReadOnlyEntry(
            "editGraphName",
            "Name",
            name,
            "The name to identify the graph. Has to be unique"
          )
        );

        buttons.push(
          window.modalView.createDeleteButton("Delete", this.deleteGraph.bind(this))
        );
        buttons.push(
          window.modalView.createSuccessButton("Save", this.saveEditedGraph.bind(this))
        );
      } 
      else {
        title = "Create Graph";

        tableContent.push(
          window.modalView.createTextEntry(
            "createNewGraphName",
            "Name",
            "",
            "The name to identify the graph. Has to be unique.",
            "graphName",
            true
          )
        );

        buttons.push(
          window.modalView.createSuccessButton("Create", this.createNewGraph.bind(this))
        );
      }

      edgeDefinitions.forEach(
        function(edgeDefinition) {
          if (self.counter  === 0) {
            if (edgeDefinition.collection) {
              self.removedECollList.push(edgeDefinition.collection);
              self.eCollList.splice(self.eCollList.indexOf(edgeDefinition.collection),1);
            }
            tableContent.push(
              window.modalView.createSelect2Entry(
                "newEdgeDefinitions" + self.counter,
                "Edge definitions",
                edgeDefinition.collection,
                "An edge definition defines a relation of the graph",
                "Edge definitions",
                true,
                false,
                true,
                1,
                self.eCollList.sort(sorter)
              )
            );
          } else {
            tableContent.push(
              window.modalView.createSelect2Entry(
                "newEdgeDefinitions" + self.counter,
                "Edge definitions",
                edgeDefinition.collection,
                "An edge definition defines a relation of the graph",
                "Edge definitions",
                false,
                true,
                false,
                1,
                self.eCollList.sort(sorter)
              )
            );
          }
          tableContent.push(
            window.modalView.createSelect2Entry(
              "fromCollections" + self.counter,
              "fromCollections",
              edgeDefinition.from,
              "The collections that contain the start vertices of the relation.",
              "fromCollections",
              true,
              false,
              false,
              10,
              collList.sort(sorter)
            )
          );
          tableContent.push(
            window.modalView.createSelect2Entry(
              "toCollections" + self.counter,
              "toCollections",
              edgeDefinition.to,
              "The collections that contain the end vertices of the relation.",
              "toCollections",
              true,
              false,
              false,
              10,
              collList.sort(sorter)
            )
          );
          self.counter++;
        }
      );

      tableContent.push(
        window.modalView.createSelect2Entry(
          "newVertexCollections",
          "Vertex collections",
          orphanCollections,
          "Collections that are part of a graph but not used in an edge definition",
          "Vertex Collections",
          false,
          false,
          false,
          10,
          collList.sort(sorter)
        )
      );

      window.modalView.show(
        "modalGraphTable.ejs", title, buttons, tableContent, undefined, undefined, this.events
      );

      if (graph) {

        $('.modal-body table').css('border-collapse', 'separate');
        var i;

        $('.modal-body .spacer').remove();
        for (i = 0; i <= this.counter; i++) {
          $('#row_fromCollections' + i).show();
          $('#row_toCollections' + i).show();
          $('#row_newEdgeDefinitions' + i).addClass('first');
          $('#row_fromCollections' + i).addClass('middle');
          $('#row_toCollections' + i).addClass('last');
          $('#row_toCollections' + i).after('<tr id="spacer'+ i +'" class="spacer"></tr>');
        }
        
        $('#graphTab').hide(); 
        $('#modal-dialog .modal-delete-confirmation').append(
          '<fieldset><input type="checkbox" id="dropGraphCollections" name="" value="">' + 
            '<label for="mc">also drop collections?</label>' +
          '</fieldset>'
        );
      }

    },

    showHideDefinition : function(e) {
      /*e.stopPropagation();
      var id = $(e.currentTarget).attr("id"), number;
      if (id.indexOf("row_newEdgeDefinitions") !== -1 ) {
        number = id.split("row_newEdgeDefinitions")[1];
        $('#row_fromCollections' + number).toggle();
        $('#row_toCollections' + number).toggle();
      }*/
    },

    addRemoveDefinition : function(e) {
      var collList = [],
        collections = this.options.collectionCollection.models;

      collections.forEach(function (c) {
        if (c.get("isSystem")) {
          return;
        }
        collList.push(c.id);
      });
      e.stopPropagation();
      var id = $(e.currentTarget).attr("id"), number;
      if (id.indexOf("addAfter_newEdgeDefinitions") !== -1 ) {
        this.counter++;
        $('#row_newVertexCollections').before(
          this.edgeDefintionTemplate.render({
            number: this.counter
          })
        );
        $('#newEdgeDefinitions'+this.counter).select2({
          tags: this.eCollList,
          showSearchBox: false,
          minimumResultsForSearch: -1,
          width: "336px",
          maximumSelectionSize: 1
        });
        $('#fromCollections'+this.counter).select2({
          tags: collList,
          showSearchBox: false,
          minimumResultsForSearch: -1,
          width: "336px",
          maximumSelectionSize: 10
        });
        $('#toCollections'+this.counter).select2({
          tags: collList,
          showSearchBox: false,
          minimumResultsForSearch: -1,
          width: "336px",
          maximumSelectionSize: 10
        });
        window.modalView.undelegateEvents();
        window.modalView.delegateEvents(this.events);
        
        var i;
        $('.modal-body .spacer').remove();
        for (i = 0; i <= this.counter; i++) {
          $('#row_fromCollections' + i).show();
          $('#row_toCollections' + i).show();
          $('#row_newEdgeDefinitions' + i).addClass('first');
          $('#row_fromCollections' + i).addClass('middle');
          $('#row_toCollections' + i).addClass('last');
          $('#row_toCollections' + i).after('<tr id="spacer'+ i +'" class="spacer"></tr>');
        }
        return;
      }
      if (id.indexOf("remove_newEdgeDefinitions") !== -1 ) {
        number = id.split("remove_newEdgeDefinitions")[1];
        $('#row_newEdgeDefinitions' + number).remove();
        $('#row_fromCollections' + number).remove();
        $('#row_toCollections' + number).remove();
        $('#spacer' + number).remove();
      }
    },

    calculateEdgeDefinitionMap : function () {
      var edgeDefinitionMap = {};
      this.collection.models.forEach(function(m) {
        m.get("edgeDefinitions").forEach(function (ed) {
          edgeDefinitionMap[ed.collection] = {
            from : ed.from,
            to : ed.to
          };
        });
      });
      return edgeDefinitionMap;
    }
  });
}());

/*jshint browser: true */
/*jshint unused: false */
/*global Backbone, EJS, arangoHelper, window, setTimeout, $, templateEngine*/

(function() {
  "use strict";
  window.loginView = Backbone.View.extend({
    el: '#content',
    el2: '.header',
    el3: '.footer',

    events: {
      "submit #loginForm" : "login",
      "keypress #loginForm input" : "clear",
      "change #loginForm input" : "clear"
    },

    template: templateEngine.createTemplate("loginView.ejs"),

    render: function() {
      $(this.el).html(this.template.render({}));
      $(this.el2).hide();
      $(this.el3).hide();

      $('#loginUsername').focus();

      return this;
    },

    clear: function () {
      $('#loginForm input').removeClass("form-error");
      $('.wrong-credentials').hide();
    },

    login: function (e) {
      e.preventDefault();
      var username = $('#loginUsername').val();
      var password = $('#loginPassword').val();

      if (!username) {
        //Heiko: Form-Validator - please fill out all req. fields
        return;
      }
      username = this.collection.login(username, password);

      if (username) {
        $(this.el2).show();
        $(this.el3).show();
        window.location.reload();
        $('#currentUser').text(username);
        this.collection.loadUserSettings();
      }
      else {
        $('#loginForm input').addClass("form-error");
        $('.wrong-credentials').show();
      }
    }

  });
}());

/*jshint browser: true */
/*jshint unused: false */
/*global Backbone, arangoHelper, $, window, templateEngine*/

(function () {
  "use strict";

  window.LogsView = window.PaginationView.extend({

    el: '#content',
    id: '#logContent',
    paginationDiv: "#logPaginationDiv",
    idPrefix: "logTable",
    fetchedAmount: false,

    initialize: function () {
      this.convertModelToJSON();
    },

    currentLoglevel: "logall",

    events: {
      "click #arangoLogTabbar button": "setActiveLoglevel",
      "click #logTable_first": "firstPage",
      "click #logTable_last": "lastPage"
    },

    template: templateEngine.createTemplate("logsView.ejs"),
    tabbar: templateEngine.createTemplate("arangoTabbar.ejs"),
    table: templateEngine.createTemplate("arangoTable.ejs"),

    tabbarElements: {
      id: "arangoLogTabbar",
      titles: [
        ["Debug", "logdebug"],
        ["Warning", "logwarning"],
        ["Error", "logerror"],
        ["Info", "loginfo"],
        ["All", "logall"]
      ]
    },

    tableDescription: {
      id: "arangoLogTable",
      titles: ["Loglevel", "Date", "Message"],
      rows: []
    },

    convertedRows: null,

    setActiveLoglevel: function (e) {
      $('.arangodb-tabbar').removeClass('arango-active-tab');

      if (this.currentLoglevel !== e.currentTarget.id) {
        this.currentLoglevel = e.currentTarget.id;
        this.convertModelToJSON();
      }
    },

    initTotalAmount: function() {
      var self = this;
      this.collection = this.options[this.currentLoglevel];
      this.collection.fetch({
        data: $.param({ test: true}),
        success: function () {
          self.convertModelToJSON();
        }
      });
      this.fetchedAmount = true;
    },

    invertArray: function (array) {
      var rtnArr = [], counter = 0, i;
      for (i = array.length - 1; i >= 0; i--) {
        rtnArr[counter] = array[i];
        counter++;
      }
      return rtnArr;
    },

    convertModelToJSON: function () {
      if (!this.fetchedAmount) {
        this.initTotalAmount();
        return;
      }

      var self = this;
      var date;
      var rowsArray = [];
      this.collection = this.options[this.currentLoglevel];
      this.collection.fetch({
        success: function () {
          self.collection.each(function (model) {
            date = new Date(model.get('timestamp') * 1000);
            rowsArray.push([
              model.getLogStatus(),
              arangoHelper.formatDT(date),
              model.get('text')]);
          });
          self.tableDescription.rows = self.invertArray(rowsArray);
          //invert order
          self.render();
        }
      });
    },

    render: function () {
      $(this.el).html(this.template.render({}));
      $(this.id).html(this.tabbar.render({content: this.tabbarElements}));
      $(this.id).append(this.table.render({content: this.tableDescription}));
      $('#' + this.currentLoglevel).addClass('arango-active-tab');
      $('#logContent').append('<div id="logPaginationDiv" class="pagination-line"></div>');
      this.renderPagination();
      return this;
    },

    rerender: function () {
      this.convertModelToJSON();
    }
  });
}());


/*jshint browser: true */
/*global Backbone, $, window, setTimeout, Joi, _ */
/*global templateEngine*/

(function () {
  "use strict";

  var createButtonStub = function(type, title, cb, confirm) {
    return {
      type: type,
      title: title,
      callback: cb,
      confirm: confirm
    };
  };

  var createTextStub = function(type, label, value, info, placeholder, mandatory, joiObj,
                                addDelete, addAdd, maxEntrySize, tags) {
    var obj = {
      type: type,
      label: label
    };
    if (value !== undefined) {
      obj.value = value;
    }
    if (info !== undefined) {
      obj.info = info;
    }
    if (placeholder !== undefined) {
      obj.placeholder = placeholder;
    }
    if (mandatory !== undefined) {
      obj.mandatory = mandatory;
    }
    if (addDelete !== undefined) {
      obj.addDelete = addDelete;
    }
    if (addAdd !== undefined) {
      obj.addAdd = addAdd;
    }
    if (maxEntrySize !== undefined) {
      obj.maxEntrySize = maxEntrySize;
    }
    if (tags !== undefined) {
      obj.tags = tags;
    }
    if (joiObj){
      // returns true if the string contains the match
      obj.validateInput = function() {
        // return regexp.test(el.val());
        return joiObj;
      };
    }
    return obj;
  };

  window.ModalView = Backbone.View.extend({

    _validators: [],
    _validateWatchers: [],
    baseTemplate: templateEngine.createTemplate("modalBase.ejs"),
    tableTemplate: templateEngine.createTemplate("modalTable.ejs"),
    el: "#modalPlaceholder",
    contentEl: "#modalContent",
    hideFooter: false,
    confirm: {
      list: "#modal-delete-confirmation",
      yes: "#modal-confirm-delete",
      no: "#modal-abort-delete"
    },
    enabledHotkey: false,
    enableHotKeys : true,

    buttons: {
      SUCCESS: "success",
      NOTIFICATION: "notification",
      DELETE: "danger",
      NEUTRAL: "neutral",
      CLOSE: "close"
    },
    tables: {
      READONLY: "readonly",
      TEXT: "text",
      BLOB: "blob",
      PASSWORD: "password",
      SELECT: "select",
      SELECT2: "select2",
      CHECKBOX: "checkbox"
    },

    initialize: function() {
      Object.freeze(this.buttons);
      Object.freeze(this.tables);
    },

    createModalHotkeys: function() {
      //submit modal
      $(this.el).unbind('keydown');
      $(this.el).unbind('return');
      $(this.el).bind('keydown', 'return', function(){
        $('.createModalDialog .modal-footer .button-success').click();
      });

      $('.modal-body input').unbind('keydown');
      $('.modal-body input').unbind('return');
      $(".modal-body input", $(this.el)).bind('keydown', 'return', function(){
        $('.createModalDialog .modal-footer .button-success').click();
      });

      $('.modal-body select').unbind('keydown');
      $('.modal-body select').unbind('return');
      $(".modal-body select", $(this.el)).bind('keydown', 'return', function(){
        $('.createModalDialog .modal-footer .button-success').click();
      });
    },

    createInitModalHotkeys: function() {
      var self = this;
      //navigate through modal buttons
      //left cursor
      $(this.el).bind('keydown', 'left', function(){
        self.navigateThroughButtons('left');
      });
      //right cursor
      $(this.el).bind('keydown', 'right', function(){
        self.navigateThroughButtons('right');
      });

    },

    navigateThroughButtons: function(direction) {
      var hasFocus = $('.createModalDialog .modal-footer button').is(':focus');
      if (hasFocus === false) {
        if (direction === 'left') {
          $('.createModalDialog .modal-footer button').first().focus();
        }
        else if (direction === 'right') {
          $('..createModalDialog .modal-footer button').last().focus();
        }
      }
      else if (hasFocus === true) {
        if (direction === 'left') {
          $(':focus').prev().focus();
        }
        else if (direction === 'right') {
          $(':focus').next().focus();
        }
      }

    },

    createCloseButton: function(title, cb) {
      var self = this;
      return createButtonStub(this.buttons.CLOSE, title, function () {
        self.hide();
        if (cb) {
          cb();
        }
      });
    },

    createSuccessButton: function(title, cb) {
      return createButtonStub(this.buttons.SUCCESS, title, cb);
    },

    createNotificationButton: function(title, cb) {
      return createButtonStub(this.buttons.NOTIFICATION, title, cb);
    },

    createDeleteButton: function(title, cb, confirm) {
      return createButtonStub(this.buttons.DELETE, title, cb, confirm);
    },

    createNeutralButton: function(title, cb) {
      return createButtonStub(this.buttons.NEUTRAL, title, cb);
    },

    createDisabledButton: function(title) {
      var disabledButton = createButtonStub(this.buttons.NEUTRAL, title);
      disabledButton.disabled = true;
      return disabledButton;
    },

    createReadOnlyEntry: function(id, label, value, info, addDelete, addAdd) {
      var obj = createTextStub(this.tables.READONLY, label, value, info,undefined, undefined,
        undefined,addDelete, addAdd);
      obj.id = id;
      return obj;
    },

    createTextEntry: function(id, label, value, info, placeholder, mandatory, regexp) {
      var obj = createTextStub(this.tables.TEXT, label, value, info, placeholder, mandatory,
                               regexp);
      obj.id = id;
      return obj;
    },

    createBlobEntry: function(id, label, value, info, placeholder, mandatory, regexp) {
      var obj = createTextStub(this.tables.BLOB, label, value, info, placeholder, mandatory,
                               regexp);
      obj.id = id;
      return obj;
    },

    createSelect2Entry: function(
      id, label, value, info, placeholder, mandatory, addDelete, addAdd, maxEntrySize, tags) {
      var obj = createTextStub(this.tables.SELECT2, label, value, info, placeholder,
        mandatory, undefined, addDelete, addAdd, maxEntrySize, tags);
      obj.id = id;
      return obj;
    },

    createPasswordEntry: function(id, label, value, info, placeholder, mandatory, regexp) {
      var obj = createTextStub(this.tables.PASSWORD, label, value, info, placeholder, mandatory, regexp);
      obj.id = id;
      return obj;
    },

    createCheckboxEntry: function(id, label, value, info, checked) {
      var obj = createTextStub(this.tables.CHECKBOX, label, value, info);
      obj.id = id;
      if (checked) {
        obj.checked = checked;
      }
      return obj;
    },

    createSelectEntry: function(id, label, selected, info, options) {
      var obj = createTextStub(this.tables.SELECT, label, null, info);
      obj.id = id;
      if (selected) {
        obj.selected = selected;
      }
      obj.options = options;
      return obj;
    },

    createOptionEntry: function(label, value) {
      return {
        label: label,
        value: value || label
      };
    },

    show: function(templateName, title, buttons, tableContent, advancedContent, extraInfo, events, noConfirm, tabBar) {
      var self = this, lastBtn, confirmMsg, closeButtonFound = false;
      buttons = buttons || [];
      noConfirm = Boolean(noConfirm);
      this.clearValidators();
      if (buttons.length > 0) {
        buttons.forEach(function (b) {
          if (b.type === self.buttons.CLOSE) {
              closeButtonFound = true;
          }
          if (b.type === self.buttons.DELETE) {
              confirmMsg = confirmMsg || b.confirm;
          }
        });
        if (!closeButtonFound) {
          // Insert close as second from right
          lastBtn = buttons.pop();
          buttons.push(self.createCloseButton('Cancel'));
          buttons.push(lastBtn);
        }
      } else {
        buttons.push(self.createCloseButton('Close'));
      }
      $(this.el).html(this.baseTemplate.render({
        title: title,
        buttons: buttons,
        hideFooter: this.hideFooter,
        confirm: confirmMsg,
        tabBar: tabBar
      }));
      _.each(buttons, function(b, i) {
        if (b.disabled || !b.callback) {
          return;
        }
        if (b.type === self.buttons.DELETE && !noConfirm) {
          $("#modalButton" + i).bind("click", function() {
            $(self.confirm.yes).unbind("click");
            $(self.confirm.yes).bind("click", b.callback);
            $(self.confirm.list).css("display", "block");
          });
          return;
        }
        $("#modalButton" + i).bind("click", b.callback);
      });

      $(this.confirm.no).bind("click", function() {
        $(self.confirm.list).css("display", "none");
      });

      var template;
      if (typeof templateName === 'string') {
        template = templateEngine.createTemplate(templateName);
        $(".createModalDialog .modal-body").html(template.render({
          content: tableContent,
          advancedContent: advancedContent,
          info: extraInfo
        }));
      }
      else {
        var counter = 0;
        _.each(templateName, function(v) {
          template = templateEngine.createTemplate(v);
          $(".createModalDialog .modal-body .tab-content #" + tabBar[counter]).html(template.render({
            content: tableContent,
            advancedContent: advancedContent,
            info: extraInfo
          }));

          counter++;
        });
      }

      $('.createModalDialog .modalTooltips').tooltip({
        position: {
          my: "left top",
          at: "right+55 top-1"
        }
      });

      var completeTableContent = tableContent || [];
      if (advancedContent && advancedContent.content) {
        completeTableContent = completeTableContent.concat(advancedContent.content);
      }

      _.each(completeTableContent, function(row) {
        self.modalBindValidation(row);
        if (row.type === self.tables.SELECT2) {
          //handle select2
          $('#'+row.id).select2({
            tags: row.tags || [],
            showSearchBox: false,
            minimumResultsForSearch: -1,
            width: "336px",
            maximumSelectionSize: row.maxEntrySize || 8
          });
        }
      });

      if (events) {
        this.events = events;
        this.delegateEvents();
      }

      if ($('#accordion2')) {
        $('#accordion2 .accordion-toggle').bind("click", function() {
          if ($('#collapseOne').is(":visible")) {
            $('#collapseOne').hide();
            setTimeout(function() {
              $('.accordion-toggle').addClass('collapsed');
            }, 100);
          }
          else {
            $('#collapseOne').show();
            setTimeout(function() {
              $('.accordion-toggle').removeClass('collapsed');
            }, 100);
          }
        });
        $('#collapseOne').hide();
        setTimeout(function() {
          $('.accordion-toggle').addClass('collapsed');
        }, 100);
      }

      $("#modal-dialog").modal("show");

      //enable modal hotkeys after rendering is complete
      if (this.enabledHotkey === false) {
        this.createInitModalHotkeys();
        this.enabledHotkey = true;
      }
      if (this.enableHotKeys) {
        this.createModalHotkeys();
      }

      //if input-field is available -> autofocus first one
      var focus = $('#modal-dialog').find('input');
      if (focus) {
        setTimeout(function() {
          var focus = $('#modal-dialog');
          if (focus.length > 0) {
            focus = focus.find('input'); 
              if (focus.length > 0) {
                $(focus[0]).focus();
              }
          }
        }, 800);
      }

    },

    modalBindValidation: function(entry) {
      var self = this;
      if (entry.hasOwnProperty("id")
        && entry.hasOwnProperty("validateInput")) {
        var validCheck = function() {
          var $el = $("#" + entry.id);
          var validation = entry.validateInput($el);
          var error = false;
          _.each(validation, function(validator) {
            var value = $el.val();
            if (!validator.rule) {
              validator = {rule: validator};
            }
            if (typeof validator.rule === 'function') {
              try {
                validator.rule(value);
              } catch (e) {
                error = validator.msg || e.message;
              }
            } else {
              var result = Joi.validate(value, validator.rule);
              if (result.error) {
                error = validator.msg || result.error.message;
              }
            }
            if (error) {
              return false;
            }
          });
          if (error) {
            return error;
          }
        };
        var $el = $('#' + entry.id);
        // catch result of validation and act
        $el.on('keyup focusout', function() {
          var msg = validCheck();
          var errorElement = $el.next()[0];
          if (msg) {
            $el.addClass('invalid-input');
            if (errorElement) {
              //error element available
              $(errorElement).text(msg);
            }
            else {
              //error element not available
              $el.after('<p class="errorMessage">' + msg+ '</p>');
            }
            $('.createModalDialog .modal-footer .button-success')
              .prop('disabled', true)
              .addClass('disabled');
          } else {
            $el.removeClass('invalid-input');
            if (errorElement) {
              $(errorElement).remove();
            }
            self.modalTestAll();
          }
        });
        this._validators.push(validCheck);
        this._validateWatchers.push($el);
      }
      
    },

    modalTestAll: function() {
      var tests = _.map(this._validators, function(v) {
        return v();
      });
      var invalid = _.any(tests);
      if (invalid) {
        $('.createModalDialog .modal-footer .button-success')
          .prop('disabled', true)
          .addClass('disabled');
      } else {
        $('.createModalDialog .modal-footer .button-success')
          .prop('disabled', false)
          .removeClass('disabled');
      }
      return !invalid;
    },

    clearValidators: function() {
      this._validators = [];
      _.each(this._validateWatchers, function(w) {
        w.unbind('keyup focusout');
      });
      this._validateWatchers = [];
    },

    hide: function() {
      this.clearValidators();
      $("#modal-dialog").modal("hide");
    }
  });
}());

/*jshint browser: true */
/*jshint unused: false */
/*global Backbone, templateEngine, $, window, arangoHelper*/
(function () {
  "use strict";
  window.NavigationView = Backbone.View.extend({
    el: '#navigationBar',

    events: {
      "change #arangoCollectionSelect": "navigateBySelect",
      "click .tab": "navigateByTab",
      "mouseenter .dropdown > *": "showDropdown",
      "mouseleave .dropdown": "hideDropdown"
    },

    initialize: function () {
      this.userCollection = this.options.userCollection;
      this.currentDB = this.options.currentDB;
      this.dbSelectionView = new window.DBSelectionView({
        collection: this.options.database,
        current: this.currentDB
      });
      this.userBarView = new window.UserBarView({
        userCollection: this.userCollection
      });
      this.notificationView = new window.NotificationView({
        collection: this.options.notificationCollection
      });
      this.statisticBarView = new window.StatisticBarView({
          currentDB: this.currentDB
      });
      this.handleKeyboardHotkeys();
    },

    handleSelectDatabase: function () {
      this.dbSelectionView.render($("#dbSelect"));
    },

    template: templateEngine.createTemplate("navigationView.ejs"),

    render: function () {
      $(this.el).html(this.template.render({
        currentDB: this.currentDB
      }));
      this.dbSelectionView.render($("#dbSelect"));
      this.notificationView.render($("#notificationBar"));
      if (this.userCollection.whoAmI()) {
        this.userBarView.render();
      }
      this.statisticBarView.render($("#statisticBar"));

      // if demo content not available, do not show demo menu tab
      if (!window.App.arangoCollectionsStore.findWhere({"name": "arangodbflightsdemo"})) {
        $('.demo-menu').css("display","none");
      }

      return this;
    },

    navigateBySelect: function () {
      var navigateTo = $("#arangoCollectionSelect").find("option:selected").val();
      window.App.navigate(navigateTo, {trigger: true});
    },

    handleKeyboardHotkeys: function () {
      arangoHelper.enableKeyboardHotkeys(true);
    },

    navigateByTab: function (e) {
      var tab = e.target || e.srcElement,
      navigateTo = tab.id,
      dropdown = false;

      if (navigateTo === "") {
        navigateTo = $(tab).attr("class");
      }
      
      if (navigateTo === "links") {
        dropdown = true;
        $("#link_dropdown").slideToggle(1);
        e.preventDefault();
      }
      else if (navigateTo === "tools") {
        dropdown = true;
        $("#tools_dropdown").slideToggle(1);
        e.preventDefault();
      }
      else if (navigateTo === "dbselection") {
        dropdown = true;
        $("#dbs_dropdown").slideToggle(1);
        e.preventDefault();
      }

      if (!dropdown) {
        window.App.navigate(navigateTo, {trigger: true});
        e.preventDefault();
      }
    },

    handleSelectNavigation: function () {
      var self = this;
      $("#arangoCollectionSelect").change(function() {
        self.navigateBySelect();
      });
    },

    selectMenuItem: function (menuItem) {
      $('.navlist li').removeClass('active');
      if (menuItem) {
        $('.' + menuItem).addClass('active');
      }
    },

    showDropdown: function (e) {
      var tab = e.target || e.srcElement;
      var navigateTo = tab.id;
      if (navigateTo === "links" || navigateTo === "link_dropdown" || e.currentTarget.id === 'links') {
        $("#link_dropdown").fadeIn(1);
      }
      else if (navigateTo === "tools" || navigateTo === "tools_dropdown" || e.currentTarget.id === 'tools') {
        $("#tools_dropdown").fadeIn(1);
      }
      else if (navigateTo === "dbselection" || navigateTo === "dbs_dropdown" || e.currentTarget.id === 'dbselection') {
        $("#dbs_dropdown").fadeIn(1);
      }
    },

    hideDropdown: function (e) {
      var tab = e.target || e.srcElement;
      tab = $(tab).parent();
      $("#link_dropdown").fadeOut(1);
      $("#tools_dropdown").fadeOut(1);
      $("#dbs_dropdown").fadeOut(1);
    }

  });
}());

/*jshint browser: true */
/*jshint unused: false */
/*global Backbone, templateEngine, $, window, noty */
(function () {
  "use strict";

  window.NotificationView = Backbone.View.extend({

    events: {
      "click .navlogo #stat_hd"       : "toggleNotification",
      "click .notificationItem .fa"   : "removeNotification",
      "click #removeAllNotifications" : "removeAllNotifications"
    },

    initialize: function () {
      this.collection.bind("add", this.renderNotifications.bind(this));
      this.collection.bind("remove", this.renderNotifications.bind(this));
      this.collection.bind("reset", this.renderNotifications.bind(this));
    },

    notificationItem: templateEngine.createTemplate("notificationItem.ejs"),

    el: '#notificationBar',

    template: templateEngine.createTemplate("notificationView.ejs"),

    toggleNotification: function () {
      var counter = this.collection.length;
      if (counter !== 0) {
        $('#notification_menu').toggle();
      }
    },

    removeAllNotifications: function () {
      $.noty.clearQueue();
      $.noty.closeAll();
      this.collection.reset();
      $('#notification_menu').hide();
    },

    removeNotification: function(e) {
      var cid = e.target.id;
      this.collection.get(cid).destroy();
    },

    renderNotifications: function(a, b, event) {

      if (event) {
        if (event.add) {
          var latestModel = this.collection.at(this.collection.length - 1),
          message = latestModel.get('title'),
          time = 3000;

          if (latestModel.get('content')) {
            message = message + ": " + latestModel.get('content');
          }

          if (latestModel.get('type') === 'error') {
            time = false;
          }
          $.noty.clearQueue();
          $.noty.closeAll();

          noty({
            theme: 'relax',
            text: message,
            template: 
              '<div class="noty_message arango_message">' + 
              '<div><i class="fa fa-close"></i></div><span class="noty_text arango_text"></span>' + 
              '<div class="noty_close arango_close"></div></div>',
            maxVisible: 1,
            closeWith: ['click'],
            type: latestModel.get('type'),
            layout: 'bottom',
            timeout: time,
            animation: {
              open: {height: 'show'},
              close: {height: 'hide'},
              easing: 'swing',
              speed: 200
            }
          });

          if (latestModel.get('type') === 'success') {
            latestModel.destroy();
            return;
          }
        }
      }

      $('#stat_hd_counter').text(this.collection.length);
      if (this.collection.length === 0) {
        $('#stat_hd').removeClass('fullNotification');
        $('#notification_menu').hide();
      }
      else {
        $('#stat_hd').addClass('fullNotification');
      }

      $('.innerDropdownInnerUL').html(this.notificationItem.render({
        notifications : this.collection
      }));
      $('.notificationInfoIcon').tooltip({
        position: {
          my: "left top",
          at: "right+55 top-1"
        }
      });
    },

    render: function () {
      $(this.el).html(this.template.render({
        notifications : this.collection
      }));

      this.renderNotifications();
      this.delegateEvents();

      return this.el;
    }

  });
}());

/*jshint browser: true */
/*jshint unused: false */
/*global Backbone, $, window, setTimeout, Joi, _ */
/*global templateEngine*/

(function () {
  "use strict";

  window.ProgressView = Backbone.View.extend({

    template: templateEngine.createTemplate("progressBase.ejs"),

    el: "#progressPlaceholder",

    el2: "#progressPlaceholderIcon",

    toShow: false,
    lastDelay: 0,

    action: function(){},

    events: {
      "click .progress-action button": "performAction",
    },

    performAction: function() {
      if (typeof this.action === 'function') {
        this.action();
      }
      window.progressView.hide();
    },

    initialize: function() {
    },

    showWithDelay: function(delay, msg, action, button) {
      var self = this;
      self.toShow = true;
      self.lastDelay = delay;

      setTimeout(function() {
        if (self.toShow === true) {
          self.show(msg, action, button);
        }
      }, self.lastDelay);
    },

    show: function(msg, callback, buttonText) {
      $(this.el).html(this.template.render({}));
      $(".progress-text").text(msg);

      if (!buttonText) {
        $(".progress-action").html('<button class="button-danger">Cancel</button>');
      }
      else {
        $(".progress-action").html('<button class="button-danger">' + buttonText + '</button>');
      }

      if (!callback) {
        this.action = this.hide();
      }
      else {
        this.action = callback; 
      }
      //$(".progress-action").html(button);
      //this.action = action;

      $(this.el).show();
      //$(this.el2).html('<i class="fa fa-spinner fa-spin"></i>');
    },

    hide: function() {
      var self = this;
      self.toShow = false;

      $(this.el).hide();

      this.action = function(){};
    }

  });
}());

/*jshint browser: true */
/*jshint unused: false */
/*global Backbone, EJS, $, setTimeout, localStorage, ace, Storage, window, _ */
/*global _, arangoHelper, templateEngine, jQuery, Joi*/

(function () {
  "use strict";
  window.queryManagementView = Backbone.View.extend({
    el: '#content',

    id: '#queryManagementContent',

    templateActive: templateEngine.createTemplate("queryManagementViewActive.ejs"),
    templateSlow: templateEngine.createTemplate("queryManagementViewSlow.ejs"),
    table: templateEngine.createTemplate("arangoTable.ejs"),
    tabbar: templateEngine.createTemplate("arangoTabbar.ejs"),

    initialize: function () {
      this.activeCollection = new window.QueryManagementActive();
      this.slowCollection = new window.QueryManagementSlow();
      this.convertModelToJSON(true);
    },

    events: {
      "click #arangoQueryManagementTabbar button" : "switchTab",
      "click #deleteSlowQueryHistory" : "deleteSlowQueryHistoryModal",
      "click #arangoQueryManagementTable .fa-minus-circle" : "deleteRunningQueryModal"
    },

    tabbarElements: {
      id: "arangoQueryManagementTabbar",
      titles: [
        ["Active", "activequeries"],
        ["Slow", "slowqueries"]
      ]
    },

    tableDescription: {
      id: "arangoQueryManagementTable",
      titles: ["ID", "Query String", "Runtime", "Started", ""],
      rows: [],
      unescaped: [false, false, false, false, true]
    },

    switchTab: function(e) {
      if (e.currentTarget.id === 'activequeries') {
        this.convertModelToJSON(true);
      }
      else if (e.currentTarget.id === 'slowqueries') {
        this.convertModelToJSON(false);
      }
    },

    deleteRunningQueryModal: function(e) {
      this.killQueryId = $(e.currentTarget).attr('data-id');
      var buttons = [], tableContent = [];

      tableContent.push(
        window.modalView.createReadOnlyEntry(
          undefined,
          "Running Query",
          'Do you want to kill the running query?',
          undefined,
          undefined,
          false,
          undefined
        )
      );

      buttons.push(
        window.modalView.createDeleteButton('Kill', this.killRunningQuery.bind(this))
      );

      window.modalView.show(
        'modalTable.ejs',
        'Kill Running Query',
        buttons,
        tableContent
      );

      $('.modal-delete-confirmation strong').html('Really kill?');

    },

    killRunningQuery: function() {
      this.collection.killRunningQuery(this.killQueryId, this.killRunningQueryCallback.bind(this));
      window.modalView.hide();
    },

    killRunningQueryCallback: function() {
      this.convertModelToJSON(true);
      this.renderActive();
    },

    deleteSlowQueryHistoryModal: function() {
      var buttons = [], tableContent = [];

      tableContent.push(
        window.modalView.createReadOnlyEntry(
          undefined,
          "Slow Query Log",
          'Do you want to delete the slow query log entries?',
          undefined,
          undefined,
          false,
          undefined
        )
      );

      buttons.push(
        window.modalView.createDeleteButton('Delete', this.deleteSlowQueryHistory.bind(this))
      );

      window.modalView.show(
        'modalTable.ejs',
        'Delete Slow Query Log',
        buttons,
        tableContent
      );
    },

    deleteSlowQueryHistory: function() {
      this.collection.deleteSlowQueryHistory(this.slowQueryCallback.bind(this));
      window.modalView.hide();
    },

    slowQueryCallback: function() {
      this.convertModelToJSON(false);
      this.renderSlow();
    },

    render: function() {
      this.convertModelToJSON(true);
    },

    renderActive: function() {
      this.$el.html(this.templateActive.render({}));
      $(this.id).html(this.tabbar.render({content: this.tabbarElements}));
      $(this.id).append(this.table.render({content: this.tableDescription}));
      $('#activequeries').addClass("arango-active-tab");
    },

    renderSlow: function() {
      this.$el.html(this.templateSlow.render({}));
      $(this.id).html(this.tabbar.render({content: this.tabbarElements}));
      $(this.id).append(this.table.render({
        content: this.tableDescription,
      }));
      $('#slowqueries').addClass("arango-active-tab");
    },

    convertModelToJSON: function (active) {
      var self = this;
      var rowsArray = [];

      if (active === true) {
        this.collection = this.activeCollection;
      }
      else {
        this.collection = this.slowCollection;
      }

      this.collection.fetch({
        success: function () {
          self.collection.each(function (model) {

          var button = '';
            if (active) {
              button = '<i data-id="'+model.get('id')+'" class="fa fa-minus-circle"></i>';
            }
            rowsArray.push([
              model.get('id'),
              model.get('query'),
              model.get('runTime').toFixed(2) + ' s',
              model.get('started'),
              button
            ]);
          });

          var message = "No running queries.";
          if (!active) {
            message = "No slow queries.";
          }

          if (rowsArray.length === 0) {
            rowsArray.push([
              message,
              "",
              "",
              ""
            ]);
          }

          self.tableDescription.rows = rowsArray;

          if (active) {
            self.renderActive();
          }
          else {
            self.renderSlow();
          }
        }
      });

    }

  });
}());

/*jshint browser: true */
/*jshint unused: false */
/*global Backbone, EJS, $, setTimeout, localStorage, ace, Storage, window, _, console, btoa*/
/*global _, arangoHelper, templateEngine, jQuery, Joi, d3*/

(function () {
  "use strict";
  window.queryView = Backbone.View.extend({
    el: '#content',
    id: '#customsDiv',
    warningTemplate: templateEngine.createTemplate("warningList.ejs"),
    tabArray: [],
    execPending: false,

    initialize: function () {
      this.refreshAQL();
      this.tableDescription.rows = this.customQueries;
    },

    events: {
      "click #result-switch": "switchTab",
      "click #query-switch": "switchTab",
      'click #customs-switch': "switchTab",
      'click #submitQueryButton': 'submitQuery',
      'click #explainQueryButton': 'explainQuery',
      'click #commentText': 'commentText',
      'click #uncommentText': 'uncommentText',
      'click #undoText': 'undoText',
      'click #redoText': 'redoText',
      'click #smallOutput': 'smallOutput',
      'click #bigOutput': 'bigOutput',
      'click #clearOutput': 'clearOutput',
      'click #clearInput': 'clearInput',
      'click #clearQueryButton': 'clearInput',
      'click #addAQL': 'addAQL',
      'mouseover #querySelect': function(){this.refreshAQL(true);},
      'change #querySelect': 'importSelected',
      'keypress #aqlEditor': 'aqlShortcuts',
      'click #arangoQueryTable .table-cell0': 'editCustomQuery',
      'click #arangoQueryTable .table-cell1': 'editCustomQuery',
      'click #arangoQueryTable .table-cell2 a': 'deleteAQL',
      'click #confirmQueryImport': 'importCustomQueries',
      'click #confirmQueryExport': 'exportCustomQueries',
      'click #export-query': 'exportCustomQueries',
      'click #import-query': 'openExportDialog',
      'click #closeQueryModal': 'closeExportDialog',
      'click #downloadQueryResult': 'downloadQueryResult'
    },

    openExportDialog: function() {
      $('#queryImportDialog').modal('show'); 
    },

    closeExportDialog: function() {
      $('#queryImportDialog').modal('hide'); 
    },

    createCustomQueryModal: function(){
      var buttons = [], tableContent = [];
      tableContent.push(
        window.modalView.createTextEntry(
          'new-query-name',
          'Name',
          '',
          undefined,
          undefined,
          false,
          [
            {
              rule: Joi.string().required(),
              msg: "No query name given."
            }
          ]
        )
      );
      buttons.push(
        window.modalView.createSuccessButton('Save', this.saveAQL.bind(this))
      );
      window.modalView.show('modalTable.ejs', 'Save Query', buttons, tableContent, undefined, undefined,
        {'keyup #new-query-name' : this.listenKey.bind(this)});
    },

    updateTable: function () {
      this.tableDescription.rows = this.customQueries;

      _.each(this.tableDescription.rows, function(k) {
        k.thirdRow = '<a class="deleteButton"><span class="icon_arangodb_roundminus"' +
                     ' title="Delete query"></span></a>';
        if (k.hasOwnProperty('parameter')) {
          delete k.parameter;
        }
      });

      // escape all columns but the third (which contains HTML)
      this.tableDescription.unescaped = [ false, false, true ];

      this.$(this.id).html(this.table.render({content: this.tableDescription}));
    },

    editCustomQuery: function(e) {
      var queryName = $(e.target).parent().children().first().text(),
      inputEditor = ace.edit("aqlEditor"),
      varsEditor = ace.edit("varsEditor");
      inputEditor.setValue(this.getCustomQueryValueByName(queryName));
      varsEditor.setValue(JSON.stringify(this.getCustomQueryParameterByName(queryName)));
      this.deselect(varsEditor);
      this.deselect(inputEditor);
      $('#querySelect').val(queryName);
      this.switchTab("query-switch");
    },

    initTabArray: function() {
      var self = this;
      $(".arango-tab").children().each( function() {
        self.tabArray.push($(this).children().first().attr("id"));
      });
    },

    listenKey: function (e) {
      if (e.keyCode === 13) {
        this.saveAQL(e);
      }
      this.checkSaveName();
    },

    checkSaveName: function() {
      var saveName = $('#new-query-name').val();
      if ( saveName === "Insert Query"){
        $('#new-query-name').val('');
        return;
      }

      //check for invalid query names, if present change the box-shadow to red
      // and disable the save functionality
      var found = this.customQueries.some(function(query){
        return query.name === saveName;
      });
      if(found){
        $('#modalButton1').removeClass('button-success');
        $('#modalButton1').addClass('button-warning');
        $('#modalButton1').text('Update');
      } else {
        $('#modalButton1').removeClass('button-warning');
        $('#modalButton1').addClass('button-success');
        $('#modalButton1').text('Save');
      }
    },

    clearOutput: function () {
      var outputEditor = ace.edit("queryOutput");
      outputEditor.setValue('');
    },

    clearInput: function () {
      var inputEditor = ace.edit("aqlEditor"),
      varsEditor = ace.edit("varsEditor");
      this.setCachedQuery(inputEditor.getValue(), varsEditor.getValue());
      inputEditor.setValue('');
      varsEditor.setValue('');
    },

    smallOutput: function () {
      var outputEditor = ace.edit("queryOutput");
      outputEditor.getSession().foldAll();
    },

    bigOutput: function () {
      var outputEditor = ace.edit("queryOutput");
      outputEditor.getSession().unfold();
    },

    aqlShortcuts: function (e) {
      if (e.ctrlKey && e.keyCode === 13) {
        this.submitQuery();
      }
      else if (e.metaKey && !e.ctrlKey && e.keyCode === 13) {
        this.submitQuery();
      }
    },

    queries: [
    ],

    customQueries: [],

    tableDescription: {
      id: "arangoQueryTable",
      titles: ["Name", "Content", ""],
      rows: []
    },

    template: templateEngine.createTemplate("queryView.ejs"),
    table: templateEngine.createTemplate("arangoTable.ejs"),

    render: function () {
      var self = this;
      this.$el.html(this.template.render({}));
      this.$(this.id).html(this.table.render({content: this.tableDescription}));
      // fill select box with # of results
      var querySize = 1000;

      var sizeBox = $('#querySize');
      sizeBox.empty();
      [ 100, 250, 500, 1000, 2500, 5000, 10000, "all" ].forEach(function (value) {
        sizeBox.append('<option value="' + _.escape(value) + '"' +
          (querySize === value ? ' selected' : '') +
          '>' + _.escape(value) + ' results</option>');
      });

      var outputEditor = ace.edit("queryOutput");
      outputEditor.setReadOnly(true);
      outputEditor.setHighlightActiveLine(false);
      outputEditor.getSession().setMode("ace/mode/json");
      outputEditor.setFontSize("13px");
      outputEditor.setValue('');

      var inputEditor = ace.edit("aqlEditor");
      inputEditor.getSession().setMode("ace/mode/aql");
      inputEditor.setFontSize("13px");
      inputEditor.commands.addCommand({
        name: "togglecomment",
        bindKey: {win: "Ctrl-Shift-C", linux: "Ctrl-Shift-C", mac: "Command-Shift-C"},
        exec: function (editor) {
          editor.toggleCommentLines();
        },
        multiSelectAction: "forEach"
      });

      var varsEditor = ace.edit("varsEditor");
      varsEditor.getSession().setMode("ace/mode/aql");
      varsEditor.setFontSize("13px");
      varsEditor.commands.addCommand({
        name: "togglecomment",
        bindKey: {win: "Ctrl-Shift-C", linux: "Ctrl-Shift-C", mac: "Command-Shift-C"},
        exec: function (editor) {
          editor.toggleCommentLines();
        },
        multiSelectAction: "forEach"
      });

      //get cached query if available
      var queryObject = this.getCachedQuery();
      if (queryObject !== null && queryObject !== undefined && queryObject !== "") {
        inputEditor.setValue(queryObject.query);
        if (queryObject.parameter === '' || queryObject === undefined) {
          varsEditor.setValue('{}');
        }
        else {
          varsEditor.setValue(queryObject.parameter);
        }
      }

      var changedFunction = function() {
        var session = inputEditor.getSession(),
        cursor = inputEditor.getCursorPosition(),
        token = session.getTokenAt(cursor.row, cursor.column);
        if (token) {
          if (token.type === "comment") {
            $("#commentText i")
            .removeClass("fa-comment")
            .addClass("fa-comment-o")
            .attr("data-original-title", "Uncomment");
          } else {
            $("#commentText i")
            .removeClass("fa-comment-o")
            .addClass("fa-comment")
            .attr("data-original-title", "Comment");
          }
        }
        //cache query in localstorage
        var a = inputEditor.getValue(),
        b = varsEditor.getValue();

        if (a.length === 1) {
          a = "";
        }
        if (b.length === 1) {
          b = "";
        }

        self.setCachedQuery(a, b);
      };

      inputEditor.getSession().selection.on('changeCursor', function () {
        changedFunction();
      });

      varsEditor.getSession().selection.on('changeCursor', function () {
        changedFunction();
      });

      $('#queryOutput').resizable({
        handles: "s",
        ghost: true,
        stop: function () {
          setTimeout(function () {
            var outputEditor = ace.edit("queryOutput");
            outputEditor.resize();
          }, 200);
        }
      });

      arangoHelper.fixTooltips(".vars-editor-header i, .queryTooltips, .icon_arangodb", "top");

      $('#aqlEditor .ace_text-input').focus();

      var windowHeight = $(window).height() - 295;
      $('#aqlEditor').height(windowHeight - 100 - 29);
      $('#varsEditor').height(100);
      $('#queryOutput').height(windowHeight);

      inputEditor.resize();
      outputEditor.resize();

      this.initTabArray();
      this.renderSelectboxes();
      this.deselect(varsEditor);
      this.deselect(outputEditor);
      this.deselect(inputEditor);

      // Max: why do we need to tell those elements to show themselves?
      $("#queryDiv").show();
      $("#customsDiv").show();

      this.initQueryImport();

      this.switchTab('query-switch');
      return this;
    },

    getCachedQuery: function() {
      if (Storage !== "undefined") {
        var cache = localStorage.getItem("cachedQuery");
        if (cache !== undefined) {
          var query = JSON.parse(cache);
          return query;
        }
      }
    },

    setCachedQuery: function(query, vars) {
      if (Storage !== "undefined") {
        var myObject = {
          query: query,
          parameter: vars
        };
        localStorage.setItem("cachedQuery", JSON.stringify(myObject));
      }
    },

    initQueryImport: function () {
      var self = this;
      self.allowUpload = false;
      $('#importQueries').change(function(e) {
        self.files = e.target.files || e.dataTransfer.files;
        self.file = self.files[0];

        self.allowUpload = true;
        $('#confirmQueryImport').removeClass('disabled');
      });
    },

    importCustomQueries: function () {
      var self = this;
      if (this.allowUpload === true) {

        var callback = function() {
          this.collection.fetch({async: false});
          this.updateLocalQueries();
          this.renderSelectboxes();
          this.updateTable();
          self.allowUpload = false;
          $('#customs-switch').click();
        };

        self.collection.saveImportQueries(self.file, callback.bind(this));
        $('#confirmQueryImport').addClass('disabled');
        $('#queryImportDialog').modal('hide'); 
      }
    },

    downloadQueryResult: function() {
      var inputEditor = ace.edit("aqlEditor");
      var query = inputEditor.getValue();
      if (query !== '' || query !== undefined || query !== null) {
        window.open("query/result/download/" + encodeURIComponent(btoa(JSON.stringify({ query: query }))));
      }
      else {
        arangoHelper.arangoError("Query error", "could not query result.");
      }
    },

    exportCustomQueries: function () {
      var name, toExport = {}, exportArray = [];
      _.each(this.customQueries, function(value) {
        exportArray.push({name: value.name, value: value.value, parameter: value.parameter});
      });
      toExport = {
        "extra": {
          "queries": exportArray
        }
      };

      $.ajax("whoAmI?_=" + Date.now(), {async:false}).done(
        function(data) {
          name = data.user;

          if (name === null || name === false) {
            name = "root";
          }

        });

        window.open("query/download/" + encodeURIComponent(name));
      },

      deselect: function (editor) {
        var current = editor.getSelection();
        var currentRow = current.lead.row;
        var currentColumn = current.lead.column;

        current.setSelectionRange({
          start: {
            row: currentRow,
            column: currentColumn
          },
          end: {
            row: currentRow,
            column: currentColumn
          }
        });

        editor.focus();
      },

      addAQL: function () {
        //update queries first, before showing
        this.refreshAQL(true);

        //render options
        this.createCustomQueryModal();
        $('#new-query-name').val($('#querySelect').val());
        setTimeout(function () {
          $('#new-query-name').focus();
        }, 500);
        this.checkSaveName();
      },

      getAQL: function () {
        var self = this, result;

        this.collection.fetch({
          async: false
        });

        //old storage method
        var item = localStorage.getItem("customQueries");
        if (item) {
          var queries = JSON.parse(item);
          //save queries in user collections extra attribute
          _.each(queries, function(oldQuery) {
            self.collection.add({
              value: oldQuery.value,
              name: oldQuery.name
            });
          });
          result = self.collection.saveCollectionQueries();

          if (result === true) {
            //and delete them from localStorage
            localStorage.removeItem("customQueries");
          }
        }

        this.updateLocalQueries();
      },

      deleteAQL: function (e) {
        var deleteName = $(e.target).parent().parent().parent().children().first().text();

        var toDelete = this.collection.findWhere({name: deleteName});
        this.collection.remove(toDelete);
        this.collection.saveCollectionQueries();

        this.updateLocalQueries();
        this.renderSelectboxes();
        this.updateTable();
      },

      updateLocalQueries: function () {
        var self = this;
        this.customQueries = [];

        this.collection.each(function(model) {
          self.customQueries.push({
            name: model.get("name"),
            value: model.get("value"),
            parameter: model.get("parameter")
          });
        });
      },

      saveAQL: function (e) {
        e.stopPropagation();

        //update queries first, before writing
        this.refreshAQL();

        var inputEditor = ace.edit("aqlEditor"),
        varsEditor = ace.edit("varsEditor"),
        saveName = $('#new-query-name').val(),
        bindVars = varsEditor.getValue();

        if ($('#new-query-name').hasClass('invalid-input')) {
          return;
        }

        //Heiko: Form-Validator - illegal query name
        if (saveName.trim() === '') {
          return;
        }

        var content = inputEditor.getValue(),
        //check for already existing entry
        quit = false;
        $.each(this.customQueries, function (k, v) {
          if (v.name === saveName) {
            v.value = content;
            quit = true;
            return;
          }
        });

        if (quit === true) {
          //Heiko: Form-Validator - name already taken
          // Update model and save
          this.collection.findWhere({name: saveName}).set("value", content);
        }
        else {
          if (bindVars === '' || bindVars === undefined) {
            bindVars = '{}';
          }

          if (typeof bindVars === 'string') {
            try {
              bindVars = JSON.parse(bindVars);
            }
            catch (err) {
              console.log("could not parse bind parameter");
            }
          }
          this.collection.add({
            name: saveName,
            parameter: bindVars, 
            value: content
          });
        }

        this.collection.saveCollectionQueries();

        window.modalView.hide();

        this.updateLocalQueries();
        this.renderSelectboxes();
        $('#querySelect').val(saveName);
      },

      getSystemQueries: function () {
        var self = this;
        $.ajax({
          type: "GET",
          cache: false,
          url: "js/arango/aqltemplates.json",
          contentType: "application/json",
          processData: false,
          async: false,
          success: function (data) {
            self.queries = data;
          },
          error: function () {
            arangoHelper.arangoNotification("Query", "Error while loading system templates");
          }
        });
      },

      getCustomQueryValueByName: function (qName) {
        return this.collection.findWhere({name: qName}).get("value");
      },

      getCustomQueryParameterByName: function (qName) {
        return this.collection.findWhere({name: qName}).get("parameter");
      },

      refreshAQL: function(select) {
        this.getAQL();
        this.getSystemQueries();
        this.updateLocalQueries();

        if (select) {
          var previous = $("#querySelect" ).val();
          this.renderSelectboxes();
          $("#querySelect" ).val(previous);
        }
      },

      importSelected: function (e) {
        var inputEditor = ace.edit("aqlEditor"),
        varsEditor = ace.edit("varsEditor");
        $.each(this.queries, function (k, v) {
          if ($('#' + e.currentTarget.id).val() === v.name) {
            inputEditor.setValue(v.value);

            if (v.hasOwnProperty('parameter')) {
              if (v.parameter === '' || v.parameter === undefined) {
                v.parameter = '{}';
              }
              if (typeof v.parameter === 'object') {
                varsEditor.setValue(JSON.stringify(v.parameter));
              }
              else {
                varsEditor.setValue(v.parameter);
              }
            }
            else {
              varsEditor.setValue('{}');
            }
          }
        });
        $.each(this.customQueries, function (k, v) {
          if ($('#' + e.currentTarget.id).val() === v.name) {
            inputEditor.setValue(v.value);

            if (v.hasOwnProperty('parameter')) {
              if (v.parameter === '' || v.parameter === undefined) {
                v.parameter = '{}';
              }
              varsEditor.setValue(v.parameter);
            }
            else {
              varsEditor.setValue('{}');
            }
          }
        });
        this.deselect(ace.edit("varsEditor"));
        this.deselect(ace.edit("aqlEditor"));
      },

      renderSelectboxes: function () {
        this.sortQueries();
        var selector = '';
        selector = '#querySelect';
        $(selector).empty();

        $(selector).append('<option id="emptyquery">Insert Query</option>');
        $(selector).append('<optgroup label="Example queries">');
        jQuery.each(this.queries, function (k, v) {
          $(selector).append('<option id="' + _.escape(v.name) + '">' + _.escape(v.name) + '</option>');
        });
        $(selector).append('</optgroup>');

        if (this.customQueries.length > 0) {
          $(selector).append('<optgroup label="Custom queries">');
          jQuery.each(this.customQueries, function (k, v) {
            $(selector).append('<option id="' + _.escape(v.name) + '">' + _.escape(v.name) + '</option>');
          });
          $(selector).append('</optgroup>');
        }
      },
      undoText: function () {
        var inputEditor = ace.edit("aqlEditor");
        inputEditor.undo();
      },
      redoText: function () {
        var inputEditor = ace.edit("aqlEditor");
        inputEditor.redo();
      },
      commentText: function () {
        var inputEditor = ace.edit("aqlEditor");
        inputEditor.toggleCommentLines();
      },
      sortQueries: function () {
        this.queries = _.sortBy(this.queries, 'name');
        this.customQueries = _.sortBy(this.customQueries, 'name');
      },

      readQueryData: function() {
        var inputEditor = ace.edit("aqlEditor");
        var varsEditor = ace.edit("varsEditor");
        var selectedText = inputEditor.session.getTextRange(inputEditor.getSelectionRange());
        var sizeBox = $('#querySize');
        var data = {
          query: selectedText || inputEditor.getValue(),
          id: "currentFrontendQuery"
        };

        if (sizeBox.val() !== 'all') {
          data.batchSize = parseInt(sizeBox.val(), 10);
        }

        var bindVars = varsEditor.getValue();

        if (bindVars.length > 0) {
          try {
            var params = JSON.parse(bindVars);
            if (Object.keys(params).length !== 0) {
              data.bindVars = params;
            }
          }
          catch (e) {
            arangoHelper.arangoError("Query error", "Could not parse bind parameters.");
            return false;
          }
        }
        return JSON.stringify(data);
      },

      heatmapColors: [
        "#313695",
        "#4575b4",
        "#74add1",
        "#abd9e9",
        "#e0f3f8",
        "#ffffbf",
        "#fee090",
        "#fdae61",
        "#f46d43",
        "#d73027",
        "#a50026",
      ],

      heatmap: function(value) {
        return this.heatmapColors[Math.floor(value * 10)];
      },

      followQueryPath: function(root, nodes) {
        var known = {};
        var estCost = 0;
        known[nodes[0].id] = root;
        var i, nodeData, j, dep;
        for (i = 1; i < nodes.length; ++i) {
          nodeData = this.preparePlanNodeEntry(nodes[i], nodes[i-1].estimatedCost);
          known[nodes[i].id] = nodeData;
          dep = nodes[i].dependencies;
          estCost = nodeData.estimatedCost;
          for (j = 0; j < dep.length; ++j) {
            known[dep[j]].children.push(nodeData);
          }
        }
        return estCost;
      },

      preparePlanNodeEntry: function(node, parentCost) {
        var json = {
          estimatedCost: node.estimatedCost,
          estimatedNrItems: node.estimatedNrItems,
          type: node.type,
          children: []
        };
        switch (node.type) {
          case "SubqueryNode":
            json.relativeCost =  json.estimatedCost - this.followQueryPath(json, node.subquery.nodes);
            break;
          default:
            json.relativeCost = json.estimatedCost - parentCost|| json.estimatedCost;

        }
        return json;
      },
      /*
      drawTree: function() {
        var treeHeight = 0;
        var heatmap = this.heatmap.bind(this);
        if (!this.treeData) {
          return;
        }
        var treeData = this.treeData;
        // outputEditor.setValue(JSON.stringify(treeData, undefined, 2));

        var margin = {top: 20, right: 20, bottom: 20, left: 20},
            width = $("svg#explainOutput").parent().width() - margin.right - margin.left,
            height = 500 - margin.top - margin.bottom;

        var i = 0;
        var maxCost = 0;

        var tree = d3.layout.tree().size([width, height]);

        d3.select("svg#explainOutput g").remove();

        var svg = d3.select("svg#explainOutput")
          .attr("width", width + margin.right + margin.left)
          .attr("height", height + margin.top + margin.bottom)
          .append("g")
          .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

        var root = treeData[0];

        // Compute the new tree layout.
        var nodes = tree.nodes(root).reverse(),
            links = tree.links(nodes);

        var diagonal = d3.svg.diagonal()
          .projection(function(d) { return [d.x, d.y]; });

        // Normalize for fixed-depth.
        nodes.forEach(function(d) { d.y = d.depth * 80 + margin.top; });

        // Declare the nodes¦
        var node = svg.selectAll("g.node")
          .data(nodes, function(d) {
            if (!d.id) {
              d.id = ++i;
            }
            if (treeHeight < d.y) {
              treeHeight = d.y;
            }
            if (maxCost < d.relativeCost) {
              maxCost = d.relativeCost;
            }
            return d.id;
          });

          treeHeight += 60;
          $(".query-output").height(treeHeight);

        // Enter the nodes.
        var nodeEnter = node.enter().append("g")
          .attr("class", "node")
          .attr("transform", function(d) { 
            return "translate(" + d.x + "," + d.y + ")"; });

        nodeEnter.append("circle")
          .attr("r", 10)
          .style("fill", function(d) {return heatmap(d.relativeCost / maxCost);});

        nodeEnter.append("text")
          .attr("dx", "0")
          .attr("dy", "-15")
          .attr("text-anchor", function() {return "middle"; })
          .text(function(d) { return d.type.replace("Node",""); })
          .style("fill-opacity", 1);

        nodeEnter.append("text")
          .attr("dx", "0")
          .attr("dy", "25")
          .attr("text-anchor", function() { return "middle"; })
          .text(function(d) { return "Cost: " + d.relativeCost; })
          .style("fill-opacity", 1);

        // Declare the links¦
        var link = svg.selectAll("path.link")
          .data(links, function(d) { return d.target.id; });

        // Enter the links.
        link.enter().insert("path", "g")
          .attr("class", "link")
          .attr("d", diagonal);

      },
      */

      /*
      showExplainPlan: function(plan) {
        $("svg#explainOutput").html();
        var nodes = plan.nodes;
        if (nodes.length > 0) {
          // Handle root element differently
          var treeData = this.preparePlanNodeEntry(nodes[0]);
          this.followQueryPath(treeData, nodes);
          this.treeData = [treeData];
          this.drawTree();
        }
      },
      */

     /*
      showExplainWarnings: function(warnings) {
        $(".explain-warnings").html(this.warningTemplate.render({warnings: warnings}));
      },
      */

      fillExplain: function(callback) {

        var self = this;
        var outputEditor = ace.edit("queryOutput");
        var queryData = this.readQueryData();
        $('.queryExecutionTime').text('');
        this.execPending = false;

        if (queryData) {
          window.progressView.show(
            "Explain is operating..."
          );

          $.ajax({
            type: "POST",
            url: "/_admin/aardvark/query/explain/",
            data: queryData,
            contentType: "application/json",
            processData: false,
            success: function (data) {
              outputEditor.setValue(data.msg);
              self.switchTab("result-switch");
              window.progressView.hide();
              self.deselect(outputEditor);
              $('#downloadQueryResult').hide();
              if (typeof callback === "function") {
                callback();
              }
              $.noty.clearQueue();
              $.noty.closeAll();
            },
            error: function (data) {
              window.progressView.hide();
              try {
                var temp = JSON.parse(data.responseText);
                arangoHelper.arangoError("Explain error", temp.errorNum);
              }
              catch (e) {
                arangoHelper.arangoError("Explain error", "ERROR");
              }
              window.progressView.hide();
              if (typeof callback === "function") {
                callback();
              }
            }
          });
        }
      /*
        var self = this;
        $("svg#explainOutput").html();
        $.ajax({
          type: "POST",
          url: "/_api/explain",
          data: this.readQueryData(),
          contentType: "application/json",
          processData: false,
          success: function (data) {
            if (typeof callback === "function") {
              callback();
            }
            self.showExplainWarnings(data.warnings);
            self.showExplainPlan(data.plan);
          },
          error: function (errObj) {
            var res = errObj.responseJSON;
            // Display ErrorMessage
          }
        });
      */
      },

      timer: {

        begin: 0,
        end: 0,

        start: function() {
          this.begin = new Date().getTime();
        },

        stop: function() {
          this.end = new Date().getTime();
        },

        reset: function() {
          this.begin = 0;
          this.end = 0;
        },

        getTimeAndReset: function() {
          this.stop();
          var result =  this.end - this.begin;
          this.reset();

          return result;
        }
      },

      resize: function() {
        // this.drawTree();
      },

      checkQueryTimer: undefined,

      queryCallbackFunction: function(queryID, callback) {

        var self = this;
        var outputEditor = ace.edit("queryOutput");

        var cancelRunningQuery = function() {

          $.ajax({
            url: '/_api/job/'+ encodeURIComponent(queryID) + "/cancel",
            type: 'PUT',
            success: function() {
              window.clearTimeout(self.checkQueryTimer);
              arangoHelper.arangoNotification("Query", "Query canceled.");
              window.progressView.hide();
            }
          });
        };

        window.progressView.show(
          "Query is operating...",
          cancelRunningQuery,
          "Cancel Query"
        );

        $('.queryExecutionTime').text('');
        self.timer.start();
        this.execPending = false;

        var warningsFunc = function(data) {
          var warnings = "";
          if (data.extra && data.extra.warnings && data.extra.warnings.length > 0) {
            warnings += "Warnings:" + "\r\n\r\n";
            data.extra.warnings.forEach(function(w) {
              warnings += "[" + w.code + "], '" + w.message + "'\r\n";
            });
          }
          if (warnings !== "") {
            warnings += "\r\n" + "Result:" + "\r\n\r\n";
          }
          outputEditor.setValue(warnings + JSON.stringify(data.result, undefined, 2));
        };

        var fetchQueryResult = function(data) {
          warningsFunc(data);
          self.switchTab("result-switch");
          window.progressView.hide();

          var time = "Execution time: " + self.timer.getTimeAndReset()/1000 + " s";
          $('.queryExecutionTime').text(time);

          self.deselect(outputEditor);
          $('#downloadQueryResult').show();

          if (typeof callback === "function") {
            callback();
          }
        };

        //check if async query is finished
        var checkQueryStatus = function() {
          $.ajax({
            type: "PUT",
            url: "/_api/job/" + encodeURIComponent(queryID),
            contentType: "application/json",
            processData: false,
            success: function (data, textStatus, xhr) {

              //query finished, now fetch results
              if (xhr.status === 201) {
                fetchQueryResult(data);
              }
              //query not ready yet, retry
              else if (xhr.status === 204) {
                self.checkQueryTimer = window.setTimeout(function() {
                  checkQueryStatus(); 
                }, 500);
              }
            },
            error: function (resp) {
              try {
                var error = JSON.parse(resp.responseText);
                if (error.errorMessage) {
                  arangoHelper.arangoError("Query", error.errorMessage);
                }
              }
              catch (e) {
                arangoHelper.arangoError("Query", "Something went wrong.");
              }

              window.progressView.hide();
            }
          });
        };
        checkQueryStatus();
      },

      fillResult: function(callback) {
        var self = this;
        var outputEditor = ace.edit("queryOutput");
        // clear result
        outputEditor.setValue('');

        var queryData = this.readQueryData();
        if (queryData) {
          $.ajax({
            type: "POST",
            url: "/_api/cursor",
            headers: {
              'x-arango-async': 'store' 
            },
            data: queryData,
            contentType: "application/json",
            processData: false,
            success: function (data, textStatus, xhr) {
              if (xhr.getResponseHeader('x-arango-async-id')) {
                self.queryCallbackFunction(xhr.getResponseHeader('x-arango-async-id'), callback);
              }
              $.noty.clearQueue();
              $.noty.closeAll();
            },
            error: function (data) {
              self.switchTab("result-switch");
              $('#downloadQueryResult').hide();
              try {
                var temp = JSON.parse(data.responseText);
                outputEditor.setValue('[' + temp.errorNum + '] ' + temp.errorMessage);
                //arangoHelper.arangoError("Query error", temp.errorMessage);
              }
              catch (e) {
                outputEditor.setValue('ERROR');
                arangoHelper.arangoError("Query error", "ERROR");
              }
              window.progressView.hide();
              if (typeof callback === "function") {
                callback();
              }
            }
          });
        }
      },

      submitQuery: function () {
        var outputEditor = ace.edit("queryOutput");
        this.fillResult(this.switchTab.bind(this, "result-switch"));
        outputEditor.resize();
        var inputEditor = ace.edit("aqlEditor");
        this.deselect(inputEditor);
        $('#downloadQueryResult').show();
      },

      explainQuery: function() {
        this.fillExplain();
      },

      // This function changes the focus onto the tab that has been clicked
      // it can be given an event-object or the id of the tab to switch to
      //    e.g. switchTab("result-switch");
      // note that you need to ommit the #
      switchTab: function (e) {
        // defining a callback function for Array.forEach() the tabArray holds the ids of
        // the tabs a-tags, from which we can create the appropriate content-divs ids.
        // The convention is #result-switch (a-tag), #result (content-div), and
        // #tabContentResult (pane-div).
        // We set the clicked element's tags to active/show and the others to hide.
        var switchId;
        if (typeof e === 'string') {
          switchId = e;
        } else {
          switchId = e.target.id;
        }
        var self = this;
        var changeTab = function (element){
          var divId = "#" + element.replace("-switch", "");
          var contentDivId = "#tabContent" + divId.charAt(1).toUpperCase() + divId.substr(2);
          if (element === switchId) {
            $("#" + element).parent().addClass("active");
            $(divId).addClass("active");
            $(contentDivId).show();
            if (switchId === 'query-switch') {
              // issue #1000: set focus to query input
              $('#aqlEditor .ace_text-input').focus();
            } else if (switchId === 'result-switch' && self.execPending) {
              self.fillResult();
            }
          } else {
            $("#" + element).parent().removeClass("active");
            $(divId).removeClass("active");
            $(contentDivId).hide();
          }
        };
        this.tabArray.forEach(changeTab);
        this.updateTable();
      }
    });
  }());

/*jshint browser: true, evil: true */
/*jshint unused: false */
/*global Backbone, EJS, $, window, ace, jqconsole, handler, help, location*/
/*global templateEngine*/

(function() {
  "use strict";
  window.shellView = Backbone.View.extend({
    resizing: false,

    el: '#content',

    template: templateEngine.createTemplate("shellView.ejs"),

    render: function() {
      $(this.el).html(this.template.render({}));

      this.replShell();

      $("#shell_workspace").trigger("resize", [ 150 ]);

      this.resize();

      // evil: the resize event is globally bound to window, but there is
      // no elegant alternative... (is there?)
      var self = this;
      $(window).resize(function () {
        self.resize();
      });

      // enables pretty printing, fetches the list of collections and returns undefined
      // (in order to not print anything to the user)
      this.executeJs("start_pretty_print(); try { db._collections(); } catch (err) { } undefined;");

      return this;
    },

    resize: function () {
      // prevent endless recursion
      if (! this.resizing) {
        this.resizing = true;
        var windowHeight = $(window).height() - 250;
        $('#shell_workspace').height(windowHeight);
        this.resizing = false;
      }
    },

    executeJs: function (data) {
      var internal = require("internal");
      try {
        var result = window.eval(data);
        if (result !== undefined) {
          internal.browserOutputBuffer = "";
          internal.printShell(result);
          jqconsole.Write('==> ' + internal.browserOutputBuffer + '\n', 'jssuccess');
        }
        internal.browserOutputBuffer = "";
      } catch (e) {
        if (e instanceof internal.ArangoError) {
          if (e.hasOwnProperty("errorMessage")) {
            jqconsole.Write(e.errorMessage + '\n', 'jserror');
          }
          else {
            jqconsole.Write(e.message + '\n', 'jserror');
          }
        }
        else {
          jqconsole.Write(e.name + ': ' + e.message + '\n', 'jserror');
        }
      }
    },

    replShellPromptHelper: function(command) {
      // Continue line if can't compile the command.
      try {
        var f = new Function(command);
      }
      catch (e) {
        if (/[\[\{\(]$/.test(command)) {
          return 1;
        }
        return 0;
      }
      return false;
    },

    replShellHandlerHelper: function(command) {

    },

    replShell: function () {
      var self = this;
      // Creating the console.
      var internal = require("internal");
      var client = require("@arangodb/arangosh");
      var header = 'Welcome to arangosh. Copyright (c) ArangoDB GmbH\n';
      window.jqconsole = $('#replShell').jqconsole(header, 'JSH> ', "...>");
      this.executeJs(internal.print(client.HELP));
      // Abort prompt on Ctrl+Z.
      jqconsole.RegisterShortcut('Z', function() {
        jqconsole.AbortPrompt();
        handler();
      });
      // Move to line end Ctrl+E.
      jqconsole.RegisterShortcut('E', function() {
        jqconsole.MoveToEnd();
        handler();
      });
      jqconsole.RegisterMatching('{', '}', 'brace');
      jqconsole.RegisterMatching('(', ')', 'paren');
      jqconsole.RegisterMatching('[', ']', 'bracket');

      // Handle a command.
      var handler = function(command) {
        if (command === 'help') {
          //command = "require(\"arangosh\").HELP";
          command = help();
        }
        if (command === "exit") {
          location.reload();
        }

        self.executeJs(command);
        jqconsole.Prompt(true, handler, self.replShellPromptHelper(command));
      };

      // Initiate the first prompt.
      handler();
    }

  });
}());

/*jshint browser: true */
/*jshint unused: false */
/*global Backbone, templateEngine, $, window*/
(function () {
  "use strict";
  window.StatisticBarView = Backbone.View.extend({
    el: '#statisticBar',

    events: {
      "change #arangoCollectionSelect": "navigateBySelect",
      "click .tab": "navigateByTab"
    },

    template: templateEngine.createTemplate("statisticBarView.ejs"),

    initialize : function () {
      this.currentDB = this.options.currentDB;
    },

    replaceSVG: function($img) {
      var imgID = $img.attr('id');
      var imgClass = $img.attr('class');
      var imgURL = $img.attr('src');

      $.get(imgURL, function(data) {
        // Get the SVG tag, ignore the rest
        var $svg = $(data).find('svg');

        // Add replaced image's ID to the new SVG
        if(imgID === undefined) {
          $svg = $svg.attr('id', imgID);
        }
        // Add replaced image's classes to the new SVG
        if(imgClass === undefined) {
          $svg = $svg.attr('class', imgClass+' replaced-svg');
        }

        // Remove any invalid XML tags as per http://validator.w3.org
        $svg = $svg.removeAttr('xmlns:a');

        // Replace image with new SVG
        $img.replaceWith($svg);

      }, 'xml');
    },

    render: function () {
      var self = this;
      $(this.el).html(this.template.render({
        isSystem: this.currentDB.get("isSystem")
      }));

      $('img.svg').each(function() {
        self.replaceSVG($(this));
      });
      return this;
    },

    navigateBySelect: function () {
      var navigateTo = $("#arangoCollectionSelect").find("option:selected").val();
      window.App.navigate(navigateTo, {trigger: true});
    },

    navigateByTab: function (e) {
      var tab = e.target || e.srcElement;
      var navigateTo = tab.id;
      if (navigateTo === "links") {
        $("#link_dropdown").slideToggle(200);
        e.preventDefault();
        return;
      }
      if (navigateTo === "tools") {
        $("#tools_dropdown").slideToggle(200);
        e.preventDefault();
        return;
      }
      window.App.navigate(navigateTo, {trigger: true});
      e.preventDefault();
    },
    handleSelectNavigation: function () {
      $("#arangoCollectionSelect").change(function () {
        var navigateTo = $(this).find("option:selected").val();
        window.App.navigate(navigateTo, {trigger: true});
      });
    },


    selectMenuItem: function (menuItem) {
      $('.navlist li').removeClass('active');
      if (menuItem) {
        $('.' + menuItem).addClass('active');
      }
    }

  });
}());

/*jshint browser: true */
/*jshint unused: false */
/*global Backbone, window, templateEngine, $ */

(function() {
  "use strict";

  window.TableView = Backbone.View.extend({

    template: templateEngine.createTemplate("tableView.ejs"),
    loading: templateEngine.createTemplate("loadingTableView.ejs"),

    initialize: function() {
      this.rowClickCallback = this.options.rowClick;
    },

    events: {
      "click tbody tr": "rowClick",
      "click .deleteButton": "removeClick",
    },

    rowClick: function(event) {
      if (this.hasOwnProperty("rowClickCallback")) {
        this.rowClickCallback(event); 
      }
    },

    removeClick: function(event) {
      if (this.hasOwnProperty("removeClickCallback")) {
        this.removeClickCallback(event); 
        event.stopPropagation();
      }
    },

    setRowClick: function(callback) {
      this.rowClickCallback = callback;
    },

    setRemoveClick: function(callback) {
      this.removeClickCallback = callback;
    },

    render: function() {
      $(this.el).html(this.template.render({
        docs: this.collection
      }));
    },

    drawLoading: function() {
      $(this.el).html(this.loading.render({}));
    }

  });

}());

/*jshint browser: true */
/*jshint unused: false */
/*global Backbone, sigma, templateEngine, document, _, $, arangoHelper, window*/

(function() {
  "use strict";
  window.testView = Backbone.View.extend({
    el: '#content',

    graph: {
      edges: [],
      nodes: []
    },

    events: {
    },

    initialize: function () {
      console.log(undefined);
    },

    template: templateEngine.createTemplate("testView.ejs"),

    render: function () {
      $(this.el).html(this.template.render({}));
      this.renderGraph();
      return this;
    },

    renderGraph: function () {

      this.convertData();

      console.log(this.graph);

      this.s = new sigma({
        graph: this.graph,
        container: 'graph-container',
        verbose: true,
        renderers: [
          {
            container: document.getElementById('graph-container'),
            type: 'webgl'
          }
        ]
      });
    },

    convertData: function () {

      var self = this;

      _.each(this.dump, function(value) {

        _.each(value.p, function(lol) {
          self.graph.nodes.push({
            id: lol.verticesvalue.v._id,
            label: value.v._key,
            x: Math.random(),
            y: Math.random(),
            size: Math.random()
          });

          self.graph.edges.push({
            id: value.e._id,
            source: value.e._from,
            target: value.e._to
          });
         

        });
      });

      return null;
    },
		
    dump: [
      {
        "v": {
          "label": "7",
          "_id": "circles/G",
          "_rev": "1841663870851",
          "_key": "G"
        },
        "e": {
          "theFalse": false,
          "theTruth": true,
          "label": "right_foo",
          "_id": "edges/1841666099075",
          "_rev": "1841666099075",
          "_key": "1841666099075",
          "_from": "circles/A",
          "_to": "circles/G"
        },
        "p": {
          "vertices": [
            {
              "label": "1",
              "_id": "circles/A",
              "_rev": "1841662691203",
              "_key": "A"
            },
            {
              "label": "7",
              "_id": "circles/G",
              "_rev": "1841663870851",
              "_key": "G"
            }
          ],
          "edges": [
            {
              "theFalse": false,
              "theTruth": true,
              "label": "right_foo",
              "_id": "edges/1841666099075",
              "_rev": "1841666099075",
              "_key": "1841666099075",
              "_from": "circles/A",
              "_to": "circles/G"
            }
          ]
        }
      },
      {
        "v": {
          "label": "8",
          "_id": "circles/H",
          "_rev": "1841664067459",
          "_key": "H"
        },
        "e": {
          "theFalse": false,
          "theTruth": true,
          "label": "right_blob",
          "_id": "edges/1841666295683",
          "_rev": "1841666295683",
          "_key": "1841666295683",
          "_from": "circles/G",
          "_to": "circles/H"
        },
        "p": {
          "vertices": [
            {
              "label": "1",
              "_id": "circles/A",
              "_rev": "1841662691203",
              "_key": "A"
            },
            {
              "label": "7",
              "_id": "circles/G",
              "_rev": "1841663870851",
              "_key": "G"
            },
            {
              "label": "8",
              "_id": "circles/H",
              "_rev": "1841664067459",
              "_key": "H"
            }
          ],
          "edges": [
            {
              "theFalse": false,
              "theTruth": true,
              "label": "right_foo",
              "_id": "edges/1841666099075",
              "_rev": "1841666099075",
              "_key": "1841666099075",
              "_from": "circles/A",
              "_to": "circles/G"
            },
            {
              "theFalse": false,
              "theTruth": true,
              "label": "right_blob",
              "_id": "edges/1841666295683",
              "_rev": "1841666295683",
              "_key": "1841666295683",
              "_from": "circles/G",
              "_to": "circles/H"
            }
          ]
        }
      },
      {
        "v": {
          "label": "9",
          "_id": "circles/I",
          "_rev": "1841664264067",
          "_key": "I"
        },
        "e": {
          "theFalse": false,
          "theTruth": true,
          "label": "right_blub",
          "_id": "edges/1841666492291",
          "_rev": "1841666492291",
          "_key": "1841666492291",
          "_from": "circles/H",
          "_to": "circles/I"
        },
        "p": {
          "vertices": [
            {
              "label": "1",
              "_id": "circles/A",
              "_rev": "1841662691203",
              "_key": "A"
            },
            {
              "label": "7",
              "_id": "circles/G",
              "_rev": "1841663870851",
              "_key": "G"
            },
            {
              "label": "8",
              "_id": "circles/H",
              "_rev": "1841664067459",
              "_key": "H"
            },
            {
              "label": "9",
              "_id": "circles/I",
              "_rev": "1841664264067",
              "_key": "I"
            }
          ],
          "edges": [
            {
              "theFalse": false,
              "theTruth": true,
              "label": "right_foo",
              "_id": "edges/1841666099075",
              "_rev": "1841666099075",
              "_key": "1841666099075",
              "_from": "circles/A",
              "_to": "circles/G"
            },
            {
              "theFalse": false,
              "theTruth": true,
              "label": "right_blob",
              "_id": "edges/1841666295683",
              "_rev": "1841666295683",
              "_key": "1841666295683",
              "_from": "circles/G",
              "_to": "circles/H"
            },
            {
              "theFalse": false,
              "theTruth": true,
              "label": "right_blub",
              "_id": "edges/1841666492291",
              "_rev": "1841666492291",
              "_key": "1841666492291",
              "_from": "circles/H",
              "_to": "circles/I"
            }
          ]
        }
      },
      {
        "v": {
          "label": "10",
          "_id": "circles/J",
          "_rev": "1841664460675",
          "_key": "J"
        },
        "e": {
          "theFalse": false,
          "theTruth": true,
          "label": "right_zip",
          "_id": "edges/1841666688899",
          "_rev": "1841666688899",
          "_key": "1841666688899",
          "_from": "circles/G",
          "_to": "circles/J"
        },
        "p": {
          "vertices": [
            {
              "label": "1",
              "_id": "circles/A",
              "_rev": "1841662691203",
              "_key": "A"
            },
            {
              "label": "7",
              "_id": "circles/G",
              "_rev": "1841663870851",
              "_key": "G"
            },
            {
              "label": "10",
              "_id": "circles/J",
              "_rev": "1841664460675",
              "_key": "J"
            }
          ],
          "edges": [
            {
              "theFalse": false,
              "theTruth": true,
              "label": "right_foo",
              "_id": "edges/1841666099075",
              "_rev": "1841666099075",
              "_key": "1841666099075",
              "_from": "circles/A",
              "_to": "circles/G"
            },
            {
              "theFalse": false,
              "theTruth": true,
              "label": "right_zip",
              "_id": "edges/1841666688899",
              "_rev": "1841666688899",
              "_key": "1841666688899",
              "_from": "circles/G",
              "_to": "circles/J"
            }
          ]
        }
      },
      {
        "v": {
          "label": "11",
          "_id": "circles/K",
          "_rev": "1841664657283",
          "_key": "K"
        },
        "e": {
          "theFalse": false,
          "theTruth": true,
          "label": "right_zup",
          "_id": "edges/1841666885507",
          "_rev": "1841666885507",
          "_key": "1841666885507",
          "_from": "circles/J",
          "_to": "circles/K"
        },
        "p": {
          "vertices": [
            {
              "label": "1",
              "_id": "circles/A",
              "_rev": "1841662691203",
              "_key": "A"
            },
            {
              "label": "7",
              "_id": "circles/G",
              "_rev": "1841663870851",
              "_key": "G"
            },
            {
              "label": "10",
              "_id": "circles/J",
              "_rev": "1841664460675",
              "_key": "J"
            },
            {
              "label": "11",
              "_id": "circles/K",
              "_rev": "1841664657283",
              "_key": "K"
            }
          ],
          "edges": [
            {
              "theFalse": false,
              "theTruth": true,
              "label": "right_foo",
              "_id": "edges/1841666099075",
              "_rev": "1841666099075",
              "_key": "1841666099075",
              "_from": "circles/A",
              "_to": "circles/G"
            },
            {
              "theFalse": false,
              "theTruth": true,
              "label": "right_zip",
              "_id": "edges/1841666688899",
              "_rev": "1841666688899",
              "_key": "1841666688899",
              "_from": "circles/G",
              "_to": "circles/J"
            },
            {
              "theFalse": false,
              "theTruth": true,
              "label": "right_zup",
              "_id": "edges/1841666885507",
              "_rev": "1841666885507",
              "_key": "1841666885507",
              "_from": "circles/J",
              "_to": "circles/K"
            }
          ]
        }
      },
      {
        "v": {
          "label": "2",
          "_id": "circles/B",
          "_rev": "1841662887811",
          "_key": "B"
        },
        "e": {
          "theFalse": false,
          "theTruth": true,
          "label": "left_bar",
          "_id": "edges/1841665116035",
          "_rev": "1841665116035",
          "_key": "1841665116035",
          "_from": "circles/A",
          "_to": "circles/B"
        },
        "p": {
          "vertices": [
            {
              "label": "1",
              "_id": "circles/A",
              "_rev": "1841662691203",
              "_key": "A"
            },
            {
              "label": "2",
              "_id": "circles/B",
              "_rev": "1841662887811",
              "_key": "B"
            }
          ],
          "edges": [
            {
              "theFalse": false,
              "theTruth": true,
              "label": "left_bar",
              "_id": "edges/1841665116035",
              "_rev": "1841665116035",
              "_key": "1841665116035",
              "_from": "circles/A",
              "_to": "circles/B"
            }
          ]
        }
      },
      {
        "v": {
          "label": "5",
          "_id": "circles/E",
          "_rev": "1841663477635",
          "_key": "E"
        },
        "e": {
          "theFalse": false,
          "theTruth": true,
          "label": "left_blub",
          "_id": "edges/1841665705859",
          "_rev": "1841665705859",
          "_key": "1841665705859",
          "_from": "circles/B",
          "_to": "circles/E"
        },
        "p": {
          "vertices": [
            {
              "label": "1",
              "_id": "circles/A",
              "_rev": "1841662691203",
              "_key": "A"
            },
            {
              "label": "2",
              "_id": "circles/B",
              "_rev": "1841662887811",
              "_key": "B"
            },
            {
              "label": "5",
              "_id": "circles/E",
              "_rev": "1841663477635",
              "_key": "E"
            }
          ],
          "edges": [
            {
              "theFalse": false,
              "theTruth": true,
              "label": "left_bar",
              "_id": "edges/1841665116035",
              "_rev": "1841665116035",
              "_key": "1841665116035",
              "_from": "circles/A",
              "_to": "circles/B"
            },
            {
              "theFalse": false,
              "theTruth": true,
              "label": "left_blub",
              "_id": "edges/1841665705859",
              "_rev": "1841665705859",
              "_key": "1841665705859",
              "_from": "circles/B",
              "_to": "circles/E"
            }
          ]
        }
      },
      {
        "v": {
          "label": "6",
          "_id": "circles/F",
          "_rev": "1841663674243",
          "_key": "F"
        },
        "e": {
          "theFalse": false,
          "theTruth": true,
          "label": "left_schubi",
          "_id": "edges/1841665902467",
          "_rev": "1841665902467",
          "_key": "1841665902467",
          "_from": "circles/E",
          "_to": "circles/F"
        },
        "p": {
          "vertices": [
            {
              "label": "1",
              "_id": "circles/A",
              "_rev": "1841662691203",
              "_key": "A"
            },
            {
              "label": "2",
              "_id": "circles/B",
              "_rev": "1841662887811",
              "_key": "B"
            },
            {
              "label": "5",
              "_id": "circles/E",
              "_rev": "1841663477635",
              "_key": "E"
            },
            {
              "label": "6",
              "_id": "circles/F",
              "_rev": "1841663674243",
              "_key": "F"
            }
          ],
          "edges": [
            {
              "theFalse": false,
              "theTruth": true,
              "label": "left_bar",
              "_id": "edges/1841665116035",
              "_rev": "1841665116035",
              "_key": "1841665116035",
              "_from": "circles/A",
              "_to": "circles/B"
            },
            {
              "theFalse": false,
              "theTruth": true,
              "label": "left_blub",
              "_id": "edges/1841665705859",
              "_rev": "1841665705859",
              "_key": "1841665705859",
              "_from": "circles/B",
              "_to": "circles/E"
            },
            {
              "theFalse": false,
              "theTruth": true,
              "label": "left_schubi",
              "_id": "edges/1841665902467",
              "_rev": "1841665902467",
              "_key": "1841665902467",
              "_from": "circles/E",
              "_to": "circles/F"
            }
          ]
        }
      },
      {
        "v": {
          "label": "3",
          "_id": "circles/C",
          "_rev": "1841663084419",
          "_key": "C"
        },
        "e": {
          "theFalse": false,
          "theTruth": true,
          "label": "left_blarg",
          "_id": "edges/1841665312643",
          "_rev": "1841665312643",
          "_key": "1841665312643",
          "_from": "circles/B",
          "_to": "circles/C"
        },
        "p": {
          "vertices": [
            {
              "label": "1",
              "_id": "circles/A",
              "_rev": "1841662691203",
              "_key": "A"
            },
            {
              "label": "2",
              "_id": "circles/B",
              "_rev": "1841662887811",
              "_key": "B"
            },
            {
              "label": "3",
              "_id": "circles/C",
              "_rev": "1841663084419",
              "_key": "C"
            }
          ],
          "edges": [
            {
              "theFalse": false,
              "theTruth": true,
              "label": "left_bar",
              "_id": "edges/1841665116035",
              "_rev": "1841665116035",
              "_key": "1841665116035",
              "_from": "circles/A",
              "_to": "circles/B"
            },
            {
              "theFalse": false,
              "theTruth": true,
              "label": "left_blarg",
              "_id": "edges/1841665312643",
              "_rev": "1841665312643",
              "_key": "1841665312643",
              "_from": "circles/B",
              "_to": "circles/C"
            }
          ]
        }
      },
      {
        "v": {
          "label": "4",
          "_id": "circles/D",
          "_rev": "1841663281027",
          "_key": "D"
        },
        "e": {
          "theFalse": false,
          "theTruth": true,
          "label": "left_blorg",
          "_id": "edges/1841665509251",
          "_rev": "1841665509251",
          "_key": "1841665509251",
          "_from": "circles/C",
          "_to": "circles/D"
        },
        "p": {
          "vertices": [
            {
              "label": "1",
              "_id": "circles/A",
              "_rev": "1841662691203",
              "_key": "A"
            },
            {
              "label": "2",
              "_id": "circles/B",
              "_rev": "1841662887811",
              "_key": "B"
            },
            {
              "label": "3",
              "_id": "circles/C",
              "_rev": "1841663084419",
              "_key": "C"
            },
            {
              "label": "4",
              "_id": "circles/D",
              "_rev": "1841663281027",
              "_key": "D"
            }
          ],
          "edges": [
            {
              "theFalse": false,
              "theTruth": true,
              "label": "left_bar",
              "_id": "edges/1841665116035",
              "_rev": "1841665116035",
              "_key": "1841665116035",
              "_from": "circles/A",
              "_to": "circles/B"
            },
            {
              "theFalse": false,
              "theTruth": true,
              "label": "left_blarg",
              "_id": "edges/1841665312643",
              "_rev": "1841665312643",
              "_key": "1841665312643",
              "_from": "circles/B",
              "_to": "circles/C"
            },
            {
              "theFalse": false,
              "theTruth": true,
              "label": "left_blorg",
              "_id": "edges/1841665509251",
              "_rev": "1841665509251",
              "_key": "1841665509251",
              "_from": "circles/C",
              "_to": "circles/D"
            }
          ]
        }
      }
    ],

  });
}());

/*jshint browser: true */
/*jshint unused: false */
/*global Backbone, templateEngine, $, window*/
(function () {
  "use strict";

  window.UserBarView = Backbone.View.extend({

    events: {
      "change #userBarSelect"         : "navigateBySelect",
      "click .tab"                    : "navigateByTab",
      "mouseenter .dropdown"          : "showDropdown",
      "mouseleave .dropdown"          : "hideDropdown",
      "click #userLogout"             : "userLogout"
    },

    initialize: function () {
      this.userCollection = this.options.userCollection;
      this.userCollection.fetch({async:false});
      this.userCollection.bind("change:extra", this.render.bind(this));
    },

    template: templateEngine.createTemplate("userBarView.ejs"),

    navigateBySelect: function () {
      var navigateTo = $("#arangoCollectionSelect").find("option:selected").val();
      window.App.navigate(navigateTo, {trigger: true});
    },

    navigateByTab: function (e) {
      var tab = e.target || e.srcElement;
      tab = $(tab).closest("a");
      var navigateTo = tab.attr("id");
      if (navigateTo === "user") {
        $("#user_dropdown").slideToggle(200);
        e.preventDefault();
        return;
      }
      window.App.navigate(navigateTo, {trigger: true});
      e.preventDefault();
    },

    showDropdown: function () {
      $("#user_dropdown").fadeIn(1);
    },

    hideDropdown: function () {
      $("#user_dropdown").fadeOut(1);
    },

    render: function () {
      var username = this.userCollection.whoAmI(),
        img = null,
        name = null,
        active = false,
        currentUser = null;
      if (username) {
        currentUser = this.userCollection.findWhere({user: username});
        currentUser.set({loggedIn : true});
        name = currentUser.get("extra").name;
        img = currentUser.get("extra").img;
        active = currentUser.get("active");
      }
      if (! img) {
        img = "img/default_user.png";
      } 
      else {
        img = "https://s.gravatar.com/avatar/" + img + "?s=24";
      }
      if (! name) {
        name = "";
      }

      this.$el = $("#userBar");
      this.$el.html(this.template.render({
        img : img,
        name : name,
        username : username,
        active : active
      }));

      this.delegateEvents();
      return this.$el;
    },

    userLogout : function() {
      this.userCollection.whoAmI();
      this.userCollection.logout();
    }
  });
}());

/*jshint browser: true */
/*jshint unused: false */
/*global _, window, document, Backbone, EJS, SwaggerUi, hljs, $, arangoHelper, templateEngine,
  CryptoJS, Joi */
(function() {

  "use strict";

  window.userManagementView = Backbone.View.extend({
    el: '#content',
    el2: '#userManagementThumbnailsIn',

    template: templateEngine.createTemplate("userManagementView.ejs"),

    events: {
      "click #createUser"                       : "createUser",
      "click #submitCreateUser"                 : "submitCreateUser",
//      "click #deleteUser"                   : "removeUser",
//      "click #submitDeleteUser"             : "submitDeleteUser",
//      "click .editUser"                     : "editUser",
//      "click .icon"                         : "editUser",
      "click #userManagementThumbnailsIn .tile" : "editUser",
      "click #submitEditUser"                   : "submitEditUser",
      "click #userManagementToggle"             : "toggleView",
      "keyup #userManagementSearchInput"        : "search",
      "click #userManagementSearchSubmit"       : "search",
      "click #callEditUserPassword"             : "editUserPassword",
      "click #submitEditUserPassword"           : "submitEditUserPassword",
      "click #submitEditCurrentUserProfile"     : "submitEditCurrentUserProfile",
      "click .css-label"                        : "checkBoxes",
      "change #userSortDesc"                    : "sorting"

    },

    dropdownVisible: false,

    initialize: function() {
      //fetch collection defined in router
      this.collection.fetch({async:false});
      this.currentUser = this.collection.findWhere({user: this.collection.whoAmI()});
    },

    checkBoxes: function (e) {
      //chrome bugfix
      var clicked = e.currentTarget.id;
      $('#'+clicked).click();
    },

    sorting: function() {
      if ($('#userSortDesc').is(":checked")) {
        this.collection.setSortingDesc(true);
      }
      else {
        this.collection.setSortingDesc(false);
      }

      if ($('#userManagementDropdown').is(":visible")) {
        this.dropdownVisible = true;
      } else {
        this.dropdownVisible = false;
      }


      this.render();
    },

    render: function (isProfile) {
      var dropdownVisible = false;
      if ($('#userManagementDropdown').is(':visible')) {
        dropdownVisible = true;
      }

      this.collection.sort();
      $(this.el).html(this.template.render({
        collection   : this.collection,
        searchString : ''
      }));
//      this.setFilterValues();

      if (dropdownVisible === true) {
        $('#userManagementDropdown2').show();
        $('#userSortDesc').attr('checked', this.collection.sortOptions.desc);
        $('#userManagementToggle').toggleClass('activated');
        $('#userManagementDropdown').show();
      }

//      var searchOptions = this.collection.searchOptions;

      //************
/*      this.userCollection.getFiltered(searchOptions).forEach(function (arango_collection) {
        $('#userManagementThumbnailsIn', this.el).append(new window.CollectionListItemView({
          model: arango_collection
        }).render().el);
      }, this);
*/
/*      $('#searchInput').val(searchOptions.searchPhrase);
      $('#searchInput').focus();
      var val = $('#searchInput').val();
      $('#searchInput').val('');
      $('#searchInput').val(val);
*/
//      arangoHelper.fixTooltips(".icon_arangodb, .arangoicon", "left");
      if (!!isProfile) {
        this.editCurrentUser();
      }

      arangoHelper.setCheckboxStatus('#userManagementDropdown');

      return this;
    },

    search: function() {
      var searchInput,
        searchString,
        strLength,
        reducedCollection;

      searchInput = $('#userManagementSearchInput');
      searchString = $("#userManagementSearchInput").val();
      reducedCollection = this.collection.filter(
        function(u) {
          return u.get("user").indexOf(searchString) !== -1;
        }
      );
      $(this.el).html(this.template.render({
        collection   : reducedCollection,
        searchString : searchString
      }));

      //after rendering, get the "new" element
      searchInput = $('#userManagementSearchInput');
      //set focus on end of text in input field
      strLength= searchInput.val().length;
      searchInput.focus();
      searchInput[0].setSelectionRange(strLength, strLength);
    },

    createUser : function(e) {
      e.preventDefault();
      this.createCreateUserModal();
    },

    submitCreateUser: function() {
      var self = this;
      var userName      = $('#newUsername').val();
      var name          = $('#newName').val();
      var userPassword  = $('#newPassword').val();
      var status        = $('#newStatus').is(':checked');
      if (!this.validateUserInfo(name, userName, userPassword, status)) {
        return;
      }
      var options = {
        user: userName,
        passwd: userPassword,
        active: status,
        extra:{name: name}
      };
      this.collection.create(options, {
        wait:true,
        error: function(data, err) {
          //Fix this. Function not available
          //self.handleError(err.status, err.statusText, name);
        },
        success: function(data) {
          self.updateUserManagement();
          window.modalView.hide();
        }
      });
    },

    validateUserInfo: function (name, username, pw, status) {
      if (username === "") {
        arangoHelper.arangoError("You have to define an username");
        $('#newUsername').closest("th").css("backgroundColor", "red");
        return false;
      }
/*      if (!username.match(/^[a-zA-Z][a-zA-Z0-9_\-]*$/)) {
        arangoHelper.arangoError("Name may only contain numbers, letters, _ and -");
        return false;
      }
      if (!user.match(/^[a-zA-Z][a-zA-Z\-]*$/)) {
        arangoHelper.arangoError("Name may only letters and -");
        return false;
      }*/
      return true;
    },

    updateUserManagement: function() {
      var self = this;
      this.collection.fetch({
        success: function() {
          self.render();
//          window.App.handleSelectDatabase();
        }
      });
    },

    submitDeleteUser: function(username) {
      var toDelete = this.collection.findWhere({user: username});
      toDelete.destroy({wait: true});
      window.modalView.hide();
      this.updateUserManagement();
    },

    editUser : function(e) {

      if ($(e.currentTarget).hasClass('tile')) {
        e.currentTarget = $(e.currentTarget).find('img');
      }

      this.collection.fetch();
      var username = this.evaluateUserName($(e.currentTarget).attr("id"), '_edit-user');
      if (username === '') {
        username = $(e.currentTarget).attr('id');
      }
      var user = this.collection.findWhere({user: username});
      if (user.get("loggedIn")) {
        this.editCurrentUser();
      } else {
        this.createEditUserModal(
          user.get("user"),
          user.get("extra").name,
          user.get("active")
        );
      }
    },

    editCurrentUser: function() {
      this.createEditCurrentUserModal(
        this.currentUser.get("user"),
        this.currentUser.get("extra").name,
        this.currentUser.get("extra").img
      );
    },

    submitEditUser : function(username) {
      var name = $('#editName').val();
      var status = $('#editStatus').is(':checked');

      if (!this.validateStatus(status)) {
        $('#editStatus').closest("th").css("backgroundColor", "red");
        return;
      }
      if (!this.validateName(name)) {
        $('#editName').closest("th").css("backgroundColor", "red");
        return;
      }
      var user = this.collection.findWhere({"user": username});
      //img may not be set, so keep the value
//      var img = user.get("extra").img;
//      user.set({"extra": {"name":name, "img":img}, "active":status});
      user.save({"extra": {"name":name}, "active":status}, {type: "PATCH"});
      window.modalView.hide();
      this.updateUserManagement();
    },

    validateUsername: function (username) {
      if (username === "") {
        arangoHelper.arangoError("You have to define an username");
        $('#newUsername').closest("th").css("backgroundColor", "red");
        return false;
      }
      if (!username.match(/^[a-zA-Z][a-zA-Z0-9_\-]*$/)) {
        arangoHelper.arangoError(
          "Wrong Username", "Username may only contain numbers, letters, _ and -"
        );
        return false;
      }
      return true;
    },

    validatePassword: function (passwordw) {
      return true;
    },

    validateName: function (name) {
      if (name === "") {
        return true;
      }
      if (!name.match(/^[a-zA-Z][a-zA-Z0-9_\-\ ]*$/)) {
        arangoHelper.arangoError(
          "Wrong Username", "Username may only contain numbers, letters, _ and -"
        );
        return false;
      }
      return true;
    },

    validateStatus: function (status) {
      if (status === "") {
        return false;
      }
      return true;
    },

    toggleView: function() {
      //apply sorting to checkboxes
      $('#userSortDesc').attr('checked', this.collection.sortOptions.desc);

      $('#userManagementToggle').toggleClass("activated");
      $('#userManagementDropdown2').slideToggle(200);
    },

    setFilterValues: function () {
      /*
      var searchOptions = this.collection.searchOptions;
      $('#checkLoaded').attr('checked', searchOptions.includeLoaded);
      $('#checkUnloaded').attr('checked', searchOptions.includeUnloaded);
      $('#checkSystem').attr('checked', searchOptions.includeSystem);
      $('#checkEdge').attr('checked', searchOptions.includeEdge);
      $('#checkDocument').attr('checked', searchOptions.includeDocument);
      $('#sortName').attr('checked', searchOptions.sortBy !== 'type');
      $('#sortType').attr('checked', searchOptions.sortBy === 'type');
      $('#sortOrder').attr('checked', searchOptions.sortOrder !== 1);
      */
    },

    evaluateUserName : function(str, substr) {
      var index = str.lastIndexOf(substr);
      return str.substring(0, index);
    },


    editUserPassword : function () {
      window.modalView.hide();
      this.createEditUserPasswordModal();
    },

    submitEditUserPassword : function () {
      var oldPasswd   = $('#oldCurrentPassword').val(),
        newPasswd     = $('#newCurrentPassword').val(),
        confirmPasswd = $('#confirmCurrentPassword').val();
      $('#oldCurrentPassword').val('');
      $('#newCurrentPassword').val('');
      $('#confirmCurrentPassword').val('');
      //check input
      //clear all "errors"
      $('#oldCurrentPassword').closest("th").css("backgroundColor", "white");
      $('#newCurrentPassword').closest("th").css("backgroundColor", "white");
      $('#confirmCurrentPassword').closest("th").css("backgroundColor", "white");


      //check
      var hasError = false;
      //Check old password
      if (!this.validateCurrentPassword(oldPasswd)) {
        $('#oldCurrentPassword').closest("th").css("backgroundColor", "red");
        hasError = true;
      }
      //check confirmation
      if (newPasswd !== confirmPasswd) {
        $('#confirmCurrentPassword').closest("th").css("backgroundColor", "red");
        hasError = true;
      }
      //check new password
      if (!this.validatePassword(newPasswd)) {
        $('#newCurrentPassword').closest("th").css("backgroundColor", "red");
        hasError = true;
      }

      if (hasError) {
        return;
      }
      this.currentUser.setPassword(newPasswd);
      window.modalView.hide();
    },

    validateCurrentPassword : function (pwd) {
      return this.currentUser.checkPassword(pwd);
    },


    submitEditCurrentUserProfile: function() {
      var name    = $('#editCurrentName').val();
      var img     = $('#editCurrentUserProfileImg').val();
      img = this.parseImgString(img);

      /*      if (!this.validateName(name)) {
       $('#editName').closest("th").css("backgroundColor", "red");
       return;
       }*/

      this.currentUser.setExtras(name, img);
      this.updateUserProfile();
      window.modalView.hide();
    },

    updateUserProfile: function() {
      var self = this;
      this.collection.fetch({
        success: function() {
          self.render();
        }
      });
    },

    parseImgString : function(img) {
      //if already md5
      if (img.indexOf("@") === -1) {
        return img;
      }
      //else generate md5
      return CryptoJS.MD5(img).toString();
    },


    //modal dialogs

    createEditUserModal: function(username, name, active) {
      var buttons, tableContent;
      tableContent = [
        {
          type: window.modalView.tables.READONLY,
          label: "Username",
          value: _.escape(username)
        },
        {
          type: window.modalView.tables.TEXT,
          label: "Name",
          value: name,
          id: "editName",
          placeholder: "Name"
        },
        {
          type: window.modalView.tables.CHECKBOX,
          label: "Active",
          value: "active",
          checked: active,
          id: "editStatus"
        }
      ];
      buttons = [
        {
          title: "Delete",
          type: window.modalView.buttons.DELETE,
          callback: this.submitDeleteUser.bind(this, username)
        },
        {
          title: "Save",
          type: window.modalView.buttons.SUCCESS,
          callback: this.submitEditUser.bind(this, username)
        }
      ];
      window.modalView.show("modalTable.ejs", "Edit User", buttons, tableContent);
    },

    createCreateUserModal: function() {
      var buttons = [],
        tableContent = [];

      tableContent.push(
        window.modalView.createTextEntry(
          "newUsername",
          "Username",
          "",
          false,
          "Username",
          true,
          [
            {
              rule: Joi.string().regex(/^[a-zA-Z0-9\-_]*$/),
              msg: 'Only symbols, "_" and "-" are allowed.'
            },
            {
              rule: Joi.string().required(),
              msg: "No username given."
            }
          ]
        )
      );
      tableContent.push(
        window.modalView.createTextEntry("newName", "Name", "", false, "Name", false)
      );
      tableContent.push(
        window.modalView.createPasswordEntry("newPassword", "Password", "", false, "", false)
      );
      tableContent.push(
        window.modalView.createCheckboxEntry("newStatus", "Active", "active", false, true)
      );
      buttons.push(
        window.modalView.createSuccessButton("Create", this.submitCreateUser.bind(this))
      );

      window.modalView.show("modalTable.ejs", "Create New User", buttons, tableContent);
    },

    createEditCurrentUserModal: function(username, name, img) {
      var buttons = [],
        tableContent = [];

      tableContent.push(
        window.modalView.createReadOnlyEntry("id_username", "Username", username)
      );
      tableContent.push(
        window.modalView.createTextEntry("editCurrentName", "Name", name, false, "Name", false)
      );
      tableContent.push(
        window.modalView.createTextEntry(
          "editCurrentUserProfileImg",
          "Gravatar account (Mail)",
          img,
          "Mailaddress or its md5 representation of your gravatar account."
            + " The address will be converted into a md5 string. "
            + "Only the md5 string will be stored, not the mailaddress.",
          "myAccount(at)gravatar.com"
        )
      );

      buttons.push(
        window.modalView.createNotificationButton(
          "Change Password",
          this.editUserPassword.bind(this)
        )
      );
      buttons.push(
        window.modalView.createSuccessButton(
          "Save",
          this.submitEditCurrentUserProfile.bind(this)
        )
      );

      window.modalView.show("modalTable.ejs", "Edit User Profile", buttons, tableContent);
    },

    createEditUserPasswordModal: function() {
      var buttons = [],
        tableContent = [];

      tableContent.push(
        window.modalView.createPasswordEntry(
          "oldCurrentPassword",
          "Old Password",
          "",
          false,
          "old password",
          false
        )
      );
      tableContent.push(
        window.modalView.createPasswordEntry(
          "newCurrentPassword",
          "New Password",
          "",
          false,
          "new password",
          false
        )
      );
      tableContent.push(
        window.modalView.createPasswordEntry(
          "confirmCurrentPassword",
          "Confirm New Password",
          "",
          false,
          "confirm new password",
          false)
      );

      buttons.push(
        window.modalView.createSuccessButton(
          "Save",
          this.submitEditUserPassword.bind(this)
        )
      );

      window.modalView.show("modalTable.ejs", "Edit User Password", buttons, tableContent);
    }

  });
}());

/*jshint browser: true */
/*jshint unused: false */
/*global Backbone, EJS, $, window, _ */
/*global _, arangoHelper, templateEngine, jQuery, Joi*/

(function () {
  "use strict";
  window.workMonitorView = Backbone.View.extend({

    el: '#content',
    id: '#workMonitorContent',

    template: templateEngine.createTemplate("workMonitorView.ejs"),
    table: templateEngine.createTemplate("arangoTable.ejs"),

    initialize: function () {
    },

    events: {
    },

    tableDescription: {
      id: "workMonitorTable",
      titles: [
        "Type", "Database", "Task ID", "Started", "Url", "User", "Description", "Method"
      ],
      rows: [],
      unescaped: [false, false, false, false, false, false, false, false]
    },

    render: function() {

      var self = this;

      this.$el.html(this.template.render({}));
      this.collection.fetch({
        success: function() {
          self.parseTableData();
          $(self.id).append(self.table.render({content: self.tableDescription}));
        }
      });
    },

    parseTableData: function() {

      var self = this;

      this.collection.each(function(model) {
        if (model.get('type') === 'AQL query') {

          var parent = model.get('parent');
          if (parent) {
            try {

              self.tableDescription.rows.push([
                model.get('type'),
                "(p) " + parent.database,
                "(p) " + parent.taskId,
                "(p) " + parent.startTime,
                "(p) " + parent.url,
                "(p) " + parent.user,
                model.get('description'),
                "(p) " + parent.method
              ]);
            }
            catch (e) {
              console.log("some parse error");
            }
          }

        }
        else if (model.get('type') !== 'thread') {
          self.tableDescription.rows.push([
            model.get('type'),
            model.get('database'),
            model.get('taskId'),
            model.get('startTime'),
            model.get('url'),
            model.get('user'),
            model.get('description'),
            model.get('method')
          ]);
        }
      });
    }

  });
}());

/*jshint unused: false */
/*global window, $, Backbone, document, arangoCollectionModel*/
/*global arangoHelper,dashboardView,arangoDatabase, _*/

(function () {
  "use strict";

  window.Router = Backbone.Router.extend({
    routes: {
      "": "dashboard",
      "dashboard": "dashboard",
      "collections": "collections",
      "new": "newCollection",
      "login": "login",
      "collection/:colid/documents/:pageid": "documents",
      "collection/:colid/:docid": "document",
      "shell": "shell",
      "query": "query",
      "queryManagement": "queryManagement",
      "workMonitor": "workMonitor",
      "databases": "databases",
      "applications": "applications",
      "applications/:mount": "applicationDetail",
      "graph": "graphManagement",
      "graph/:name": "showGraph",
      "userManagement": "userManagement",
      "userProfile": "userProfile",
      "logs": "logs",
      "test": "test"
    },

    initialize: function () {
      // This should be the only global object
      window.modalView = new window.ModalView();

      this.foxxList = new window.FoxxCollection();
      window.foxxInstallView = new window.FoxxInstallView({
        collection: this.foxxList
      });
      window.progressView = new window.ProgressView();
      var self = this;

      this.userCollection = new window.ArangoUsers();

      this.initOnce = function () {
        this.initOnce = function() {};
        this.arangoDatabase = new window.ArangoDatabase();
        this.currentDB = new window.CurrentDatabase();
        this.currentDB.fetch({
          async: false
        });

        this.arangoCollectionsStore = new window.arangoCollections();
        this.arangoDocumentStore = new window.arangoDocument();
        arangoHelper.setDocumentStore(this.arangoDocumentStore);

        this.arangoCollectionsStore.fetch({async: false});

        this.footerView = new window.FooterView();
        this.notificationList = new window.NotificationCollection();
        this.naviView = new window.NavigationView({
          database: this.arangoDatabase,
          currentDB: this.currentDB,
          notificationCollection: self.notificationList,
          userCollection: this.userCollection
        });

        this.queryCollection = new window.ArangoQueries();

        this.footerView.render();
        this.naviView.render();

        window.checkVersion();
      }.bind(this);


      $(window).resize(function () {
        self.handleResize();
      });

    },

    checkUser: function () {
      if (this.userCollection.whoAmI() === null) {
        this.navigate("login", {trigger: true});
        return false;
      }
      this.initOnce();
      return true;
    },

    logs: function () {
      if (!this.checkUser()) {
        return;
      }
      if (!this.logsView) {
        var newLogsAllCollection = new window.ArangoLogs(
          {upto: true, loglevel: 4}
        ),
        newLogsDebugCollection = new window.ArangoLogs(
          {loglevel: 4}
        ),
        newLogsInfoCollection = new window.ArangoLogs(
          {loglevel: 3}
        ),
        newLogsWarningCollection = new window.ArangoLogs(
          {loglevel: 2}
        ),
        newLogsErrorCollection = new window.ArangoLogs(
          {loglevel: 1}
        );
        this.logsView = new window.LogsView({
          logall: newLogsAllCollection,
          logdebug: newLogsDebugCollection,
          loginfo: newLogsInfoCollection,
          logwarning: newLogsWarningCollection,
          logerror: newLogsErrorCollection
        });
      }
      this.logsView.render();
      this.naviView.selectMenuItem('tools-menu');
    },

    applicationDetail: function (mount) {
      if (!this.checkUser()) {
        return;
      }
      this.naviView.selectMenuItem('applications-menu');

      if (this.foxxList.length === 0) {
        this.foxxList.fetch({ async: false });
      }
      if (!this.hasOwnProperty('applicationDetailView')) {
        this.applicationDetailView = new window.ApplicationDetailView({
          model: this.foxxList.get(decodeURIComponent(mount))
        });
      }

      this.applicationDetailView.model = this.foxxList.get(decodeURIComponent(mount));
      this.applicationDetailView.render('swagger');
    },

    login: function () {
      if (this.userCollection.whoAmI() !== null) {
        this.navigate("", {trigger: true});
        return false;
      }
      if (!this.loginView) {
        this.loginView = new window.loginView({
          collection: this.userCollection
        });
      }
      this.loginView.render();
    },

    collections: function () {
      if (!this.checkUser()) {
        return;
      }
      var naviView = this.naviView, self = this;
      if (!this.collectionsView) {
        this.collectionsView = new window.CollectionsView({
          collection: this.arangoCollectionsStore
        });
      }
      this.arangoCollectionsStore.fetch({
        success: function () {
          self.collectionsView.render();
          naviView.selectMenuItem('collections-menu');
        }
      });
    },

    documents: function (colid, pageid) {
      if (!this.checkUser()) {
        return;
      }
      if (!this.documentsView) {
        this.documentsView = new window.DocumentsView({
          collection: new window.arangoDocuments(),
          documentStore: this.arangoDocumentStore,
          collectionsStore: this.arangoCollectionsStore
        });
      }
      this.documentsView.setCollectionId(colid, pageid);
      this.documentsView.render();

    },

    document: function (colid, docid) {
      if (!this.checkUser()) {
        return;
      }
      if (!this.documentView) {
        this.documentView = new window.DocumentView({
          collection: this.arangoDocumentStore
        });
      }
      this.documentView.colid = colid;
      this.documentView.docid = docid;
      this.documentView.render();
      var type = arangoHelper.collectionApiType(colid);
      this.documentView.setType(type);
    },

    shell: function () {
      if (!this.checkUser()) {
        return;
      }
      if (!this.shellView) {
        this.shellView = new window.shellView();
      }
      this.shellView.render();
      this.naviView.selectMenuItem('tools-menu');
    },

    query: function () {
      if (!this.checkUser()) {
        return;
      }
      if (!this.queryView) {
        this.queryView = new window.queryView({
          collection: this.queryCollection
        });
      }
      this.queryView.render();
      this.naviView.selectMenuItem('query-menu');
    },
    
    test: function () {
      if (!this.checkUser()) {
        return;
      }
      if (!this.testView) {
        this.testView = new window.testView({
        });
      }
      this.testView.render();
    },

    workMonitor: function () {
      if (!this.checkUser()) {
        return;
      }
      if (!this.workMonitorCollection) {
        this.workMonitorCollection = new window.WorkMonitorCollection();
      }
      if (!this.workMonitorView) {
        this.workMonitorView = new window.workMonitorView({
          collection: this.workMonitorCollection
        });
      }
      this.workMonitorView.render();
      this.naviView.selectMenuItem('tools-menu');
    },

    queryManagement: function () {
      if (!this.checkUser()) {
        return;
      }
      if (!this.queryManagementView) {
        this.queryManagementView = new window.queryManagementView({
          collection: undefined
        });
      }
      this.queryManagementView.render();
      this.naviView.selectMenuItem('tools-menu');
    },

    databases: function () {
      if (!this.checkUser()) {
        return;
      }
      if (arangoHelper.databaseAllowed() === true) {
        if (! this.databaseView) {
          this.databaseView = new window.databaseView({
            users: this.userCollection,
            collection: this.arangoDatabase
          });
        }
        this.databaseView.render();
        this.naviView.selectMenuItem('databases-menu');
      } else {
        this.navigate("#", {trigger: true});
        this.naviView.selectMenuItem('dashboard-menu');
        $('#databaseNavi').css('display', 'none');
        $('#databaseNaviSelect').css('display', 'none');
      }
    },

    dashboard: function () {
      if (!this.checkUser()) {
        return;
      }
      this.naviView.selectMenuItem('dashboard-menu');
      if (this.dashboardView === undefined) {
        this.dashboardView = new window.DashboardView({
          dygraphConfig: window.dygraphConfig,
          database: this.arangoDatabase
        });
      }
      this.dashboardView.render();
    },

    graphManagement: function () {
      if (!this.checkUser()) {
        return;
      }
      if (!this.graphManagementView) {
        this.graphManagementView =
        new window.GraphManagementView(
          {
            collection: new window.GraphCollection(),
            collectionCollection: this.arangoCollectionsStore
          }
        );
      }
      this.graphManagementView.render();
      this.naviView.selectMenuItem('graphviewer-menu');
    },

    showGraph: function (name) {
      if (!this.checkUser()) {
        return;
      }
      if (!this.graphManagementView) {
        this.graphManagementView =
        new window.GraphManagementView(
          {
            collection: new window.GraphCollection(),
            collectionCollection: this.arangoCollectionsStore
          }
        );
      }
      this.graphManagementView.render();
      this.graphManagementView.loadGraphViewer(name);
      this.naviView.selectMenuItem('graphviewer-menu');
    },

    applications: function () {
      if (!this.checkUser()) {
        return;
      }
      if (this.applicationsView === undefined) {
        this.applicationsView = new window.ApplicationsView({
          collection: this.foxxList
        });
      }
      this.applicationsView.reload();
      this.naviView.selectMenuItem('applications-menu');
    },

    handleSelectDatabase: function () {
      if (!this.checkUser()) {
        return;
      }
      this.naviView.handleSelectDatabase();
    },

    handleResize: function () {
      if (this.dashboardView) {
        this.dashboardView.resize();
      }
      if (this.graphManagementView) {
        this.graphManagementView.handleResize($("#content").width());
      }
      if (this.queryView) {
        this.queryView.resize();
      }
    },

    userManagement: function () {
      if (!this.checkUser()) {
        return;
      }
      if (!this.userManagementView) {
        this.userManagementView = new window.userManagementView({
          collection: this.userCollection
        });
      }
      this.userManagementView.render();
      this.naviView.selectMenuItem('tools-menu');
    },

    userProfile: function () {
      if (!this.checkUser()) {
        return;
      }
      if (!this.userManagementView) {
        this.userManagementView = new window.userManagementView({
          collection: this.userCollection
        });
      }
      this.userManagementView.render(true);
      this.naviView.selectMenuItem('tools-menu');
    }
  });

}());

/*jshint unused: false */
/*global $, window, _*/
(function() {
  "use strict";

  var disableVersionCheck = function() {
    $.ajax({
      type: "POST",
      url: "/_admin/aardvark/disableVersionCheck"
    });
  };

  var isVersionCheckEnabled = function(cb) {
    $.ajax({
      type: "GET",
      url: "/_admin/aardvark/shouldCheckVersion",
      success: function(data) {
        if (data === true) {
          cb();
        }
      }
    });
  };

  var showInterface = function(currentVersion, json) {
    var buttons = [];
    buttons.push(window.modalView.createNotificationButton("Don't ask again", function() {
      disableVersionCheck();
      window.modalView.hide();
    }));
    buttons.push(window.modalView.createSuccessButton("Download Page", function() {
      window.open('https://www.arangodb.com/download','_blank');
      window.modalView.hide();
    }));
    var infos = [];
    var cEntry = window.modalView.createReadOnlyEntry.bind(window.modalView);
    infos.push(cEntry("current", "Current", currentVersion.toString()));
    if (json.major) {
      infos.push(cEntry("major", "Major", json.major.version));
    }
    if (json.minor) {
      infos.push(cEntry("minor", "Minor", json.minor.version));
    }
    if (json.bugfix) {
      infos.push(cEntry("bugfix", "Bugfix", json.bugfix.version));
    }
    window.modalView.show(
      "modalTable.ejs", "New Version Available", buttons, infos
    );
  };

  window.checkVersion = function() {
    // this checks for version updates
    $.ajax({
      type: "GET",
      cache: false,
      url: "/_api/version",
      contentType: "application/json",
      processData: false,
      async: true,
      success: function(data) {
        var currentVersion =
        window.versionHelper.fromString(data.version);
        window.parseVersions = function (json) {
          if (_.isEmpty(json)) {
            return; // no new version.
          }
          if (/-devel$/.test(data.version)) {
            return; // ignore version in devel
          }
          isVersionCheckEnabled(showInterface.bind(window, currentVersion, json));
        };
        $.ajax({
          type: "GET",
          async: true,
          crossDomain: true,
          timeout: 3000,
          dataType: "jsonp",
          url: "https://www.arangodb.com/repositories/versions.php" +
          "?jsonp=parseVersions&version=" + encodeURIComponent(currentVersion.toString())
        });
      }
    });
  };
}());

/*jshint unused: false */
/*global window, $, Backbone, document */

(function() {
  "use strict";
  // We have to start the app only in production mode, not in test mode
  if (!window.hasOwnProperty("TEST_BUILD")) {
    $(document).ready(function() {
      window.App = new window.Router();
      Backbone.history.start();
      window.App.handleResize();
    });
  }

}());
