{"version":3,"sources":["../../frontend/js/lib/sigma.exporters.image.js"],"names":["undefined","sigma","_contexts","_types","_canvas","_canvasContext","dataURLToBlob","dataURL","indexOf","contentType","parts","split","raw","decodeURIComponent","Blob","type","rawLength","window","atob","length","uInt8Array","Uint8Array","i","charCodeAt","calculateAspectRatioFit","srcWidth","srcHeight","maxSize","ratio","Math","min","width","height","calculateRatio","s","r","params","boundaries","margin","clips","size","bounds","utils","getBoundaries","graph","camera","readPrefix","minX","zoomRatio","minY","maxX","maxY","calculateZoomedBoundaries","sizeMax","Image","format","Error","batchEdgesDrawing","settings","clip","this","clone","merged","draw","dataUrl","toDataURL","download","extension","filename","navigator","msSaveOrOpenBlob","msSaveBlob","anchor","document","createElement","setAttribute","body","appendChild","click","removeChild","pkg","png","jpg","gif","tiff","prototype","tmpContainer","pixelRatio","getPixelRatio","webglOversamplingRatio","el","getElementById","id","round","renderer","addRenderer","container","drawLabels","labels","webgl","renderers","sized","doneContexts","getContext","refresh","forEach","name","contexts","canvas","domElements","scene","context","WebGLRenderingContext","drawImage","push","killRenderer","parentNode","mergedContext","innerWidth","background","rect","fillStyle","fill","_instance","plugins","image","options","killImage","call"],"mappings":"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","file":"static/js/10.53b44c6e.chunk.js","sourcesContent":["/*** IMPORTS FROM imports-loader ***/\n(function() {\n\n;\n(function (undefined) {\n  'use strict';\n\n  if (typeof sigma === 'undefined') throw 'sigma is not declared'; // Initialize package:\n\n  sigma.utils.pkg('sigma.plugins');\n  /**\n   * Sigma Image Utility\n   * =============================\n   *\n   * @author: Martin de la Taille (martindelataille)\n   * @thanks: Guillaume Plique (Yomguithereal)\n   * @version: 0.1\n   */\n\n  var _contexts, _types, _canvas, _canvasContext;\n\n  _contexts = ['scene', 'edges', 'nodes', 'labels'];\n  _types = {\n    png: 'image/png',\n    jpg: 'image/jpeg',\n    gif: 'image/gif',\n    tiff: 'image/tiff'\n  }; // UTILITIES FUNCTIONS:\n  // ******************\n\n  function dataURLToBlob(dataURL) {\n    var BASE64_MARKER = ';base64,';\n\n    if (dataURL.indexOf(BASE64_MARKER) == -1) {\n      var parts = dataURL.split(',');\n      var contentType = parts[0].split(':')[1];\n      var raw = decodeURIComponent(parts[1]);\n      return new Blob([raw], {\n        type: contentType\n      });\n    }\n\n    var parts = dataURL.split(BASE64_MARKER);\n    var contentType = parts[0].split(':')[1];\n    var raw = window.atob(parts[1]);\n    var rawLength = raw.length;\n    var uInt8Array = new Uint8Array(rawLength);\n\n    for (var i = 0; i < rawLength; ++i) {\n      uInt8Array[i] = raw.charCodeAt(i);\n    }\n\n    return new Blob([uInt8Array], {\n      type: contentType\n    });\n  }\n\n  function download(dataUrl, extension, filename) {\n    filename = filename || 'graph.' + extension;\n\n    if (navigator.msSaveOrOpenBlob) {\n      // IE10+\n      navigator.msSaveOrOpenBlob(dataURLToBlob(dataUrl), filename);\n    } else if (navigator.msSaveBlob) {\n      // IE11+\n      navigator.msSaveBlob(dataURLToBlob(dataUrl), filename);\n    } else {\n      var anchor = document.createElement('a');\n      anchor.setAttribute('href', dataUrl);\n      anchor.setAttribute('download', filename); // Firefox requires the link to be added to the DOM before it can be clicked.\n\n      document.body.appendChild(anchor);\n      anchor.click();\n      document.body.removeChild(anchor);\n    }\n  }\n\n  function calculateAspectRatioFit(srcWidth, srcHeight, maxSize) {\n    var ratio = Math.min(maxSize / srcWidth, maxSize / srcHeight);\n    return {\n      width: srcWidth * ratio,\n      height: srcHeight * ratio\n    };\n  }\n\n  function calculateZoomedBoundaries(s, r, params) {\n    var bounds;\n    bounds = sigma.utils.getBoundaries(s.graph, r.camera.readPrefix);\n    bounds.minX /= params.zoomRatio;\n    bounds.minY /= params.zoomRatio;\n    bounds.maxX /= params.zoomRatio;\n    bounds.maxY /= params.zoomRatio;\n    return bounds;\n  }\n\n  function calculateRatio(s, r, params) {\n    var boundaries,\n        margin = params.margin || 0,\n        ratio = {\n      width: r.width,\n      height: r.height\n    };\n\n    if (!params.clips && !params.size) {\n      boundaries = calculateZoomedBoundaries(s, r, params);\n      ratio = {\n        width: boundaries.maxX - boundaries.minX + boundaries.sizeMax * 2,\n        height: boundaries.maxY - boundaries.minY + boundaries.sizeMax * 2\n      };\n    } else if (params.size && params.size >= 1) {\n      ratio = calculateAspectRatioFit(r.width, r.height, params.size);\n    }\n\n    ratio.width += margin;\n    ratio.height += margin;\n    return ratio;\n  }\n  /**\n  * This function generate a new canvas to download image\n  *\n  * Recognized parameters:\n  * **********************\n  * Here is the exhaustive list of every accepted parameters in the settings\n  * object:\n  * @param {s}  sigma instance\n  * @param {params}  Options\n  */\n\n\n  function Image(s, r, params) {\n    params = params || {};\n    if (params.format && !(params.format in _types)) throw Error('sigma.renderers.image: unsupported format \"' + params.format + '\".');\n    var ratio = calculateRatio(s, r, params);\n    var batchEdgesDrawing = s.settings('batchEdgesDrawing');\n\n    if (batchEdgesDrawing) {\n      s.settings('batchEdgesDrawing', false); // it may crash if true\n    }\n\n    if (!params.clip) this.clone(s, params, ratio);\n    var merged = this.draw(r, params, ratio);\n    s.settings('batchEdgesDrawing', batchEdgesDrawing); // restore setting\n\n    var dataUrl = merged.toDataURL(_types[params.format || 'png']);\n    if (params.download) download(dataUrl, params.format || 'png', params.filename);\n    return dataUrl;\n  }\n  /**\n  * @param {s}  sigma instance\n  * @param {params}  Options\n  */\n\n\n  Image.prototype.clone = function (s, params, ratio) {\n    params.tmpContainer = params.tmpContainer || 'image-container';\n    var pixelRatio = sigma.utils.getPixelRatio();\n    var webglOversamplingRatio = s.settings('webglOversamplingRatio');\n    var el = document.getElementById(params.tmpContainer);\n\n    if (!el) {\n      el = document.createElement(\"div\");\n      el.id = params.tmpContainer;\n      document.body.appendChild(el);\n    }\n\n    el.setAttribute(\"style\", 'width:' + Math.round(ratio.width / pixelRatio) + 'px;' + 'height:' + Math.round(ratio.height / pixelRatio) + 'px;');\n    var renderer = s.addRenderer({\n      container: document.getElementById(params.tmpContainer),\n      type: 'canvas',\n      settings: {\n        batchEdgesDrawing: true,\n        drawLabels: !!params.labels\n      }\n    });\n    renderer.camera.ratio = params.zoomRatio > 0 ? params.zoomRatio : 1;\n\n    if (!params.size) {\n      renderer.camera.ratio *= pixelRatio;\n    }\n\n    var webgl = renderer instanceof sigma.renderers.webgl,\n        sized = false,\n        doneContexts = [];\n    _canvas = document.createElement('canvas');\n    _canvasContext = _canvas.getContext('2d');\n    s.refresh();\n\n    _contexts.forEach(function (name) {\n      if (!renderer.contexts[name]) return;\n      if (params.labels === false && name === 'labels') return;\n      var canvas = renderer.domElements[name] || renderer.domElements.scene,\n          context = renderer.contexts[name];\n\n      if (!sized) {\n        _canvas.width = ratio.width;\n        _canvas.height = ratio.height;\n\n        if (webgl && context instanceof WebGLRenderingContext) {\n          _canvas.width /= webglOversamplingRatio;\n          _canvas.height /= webglOversamplingRatio;\n        }\n\n        sized = true;\n      }\n\n      if (context instanceof WebGLRenderingContext) _canvasContext.drawImage(canvas, 0, 0, canvas.width / webglOversamplingRatio, canvas.height / webglOversamplingRatio);else _canvasContext.drawImage(canvas, 0, 0);\n      if (~doneContexts.indexOf(context)) return;\n      doneContexts.push(context);\n    }); // Cleaning\n\n\n    doneContexts = [];\n    s.killRenderer(renderer);\n    el.parentNode.removeChild(el);\n  };\n  /**\n  * @param {renderer}  related renderer instance\n  * @param {params}  Options\n  */\n\n\n  Image.prototype.draw = function (r, params, ratio) {\n    var webgl = r instanceof sigma.renderers.webgl,\n        sized = false,\n        doneContexts = [];\n    var merged = document.createElement('canvas'),\n        mergedContext = merged.getContext('2d');\n\n    _contexts.forEach(function (name) {\n      if (!r.contexts[name]) return;\n      if (params.labels === false && name === 'labels') return;\n      var canvas = r.domElements[name] || r.domElements.scene,\n          context = r.contexts[name];\n      if (~doneContexts.indexOf(context)) return;\n\n      if (!sized) {\n        var width, height;\n\n        if (!params.clip) {\n          width = _canvas.width;\n          height = _canvas.height;\n        } else {\n          var size = !params.size || params.size < 1 ? window.innerWidth : params.size;\n          width = canvas.width;\n          height = canvas.height;\n          ratio = calculateAspectRatioFit(width, height, size);\n        }\n\n        merged.width = ratio.width;\n        merged.height = ratio.height;\n\n        if (!webgl && !context instanceof WebGLRenderingContext) {\n          var webglOversamplingRatio = s.settings('webglOversamplingRatio');\n          merged.width *= webglOversamplingRatio;\n          merged.height *= webglOversamplingRatio;\n        }\n\n        sized = true; // background color\n\n        if (params.background) {\n          mergedContext.rect(0, 0, merged.width, merged.height);\n          mergedContext.fillStyle = params.background;\n          mergedContext.fill();\n        }\n      }\n\n      mergedContext.drawImage(params.clip ? canvas : _canvas, 0, 0, merged.width, merged.height);\n      doneContexts.push(context);\n    }); // Cleaning\n\n\n    doneContexts = [];\n    return merged;\n  };\n  /**\n   * Interface\n   * ------------------\n   */\n\n\n  var _instance = null;\n  /**\n   * @param {sigma}  s       The related sigma instance.\n   * @param {renderer}  r    The related renderer instance.\n   * @param {object} options An object with options.\n   */\n\n  sigma.plugins.image = function (s, r, options) {\n    sigma.plugins.killImage(); // Create object if undefined\n\n    if (!_instance) {\n      _instance = new Image(s, r, options);\n    }\n\n    return _instance;\n  };\n  /**\n   *  This function kills the image instance.\n   */\n\n\n  sigma.plugins.killImage = function () {\n    if (_instance instanceof Image) {\n      _instance = null;\n      _canvas = null;\n      _canvasContext = null;\n    }\n  };\n}).call(this);\n}.call(window));"],"sourceRoot":""}