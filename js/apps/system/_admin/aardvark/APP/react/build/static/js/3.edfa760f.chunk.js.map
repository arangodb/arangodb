{"version":3,"sources":["../../frontend/js/lib/sigma.canvas.edges.curve.js"],"names":["sigma","utils","pkg","canvas","edges","curve","edge","source","target","context","settings","cp","color","prefix","size","edgeColor","defaultNodeColor","defaultEdgeColor","sSize","sX","sY","tX","tY","id","getSelfLoopControlPoints","getQuadraticControlPoint","cc","strokeStyle","lineWidth","beginPath","moveTo","bezierCurveTo","x1","y1","x2","y2","quadraticCurveTo","x","y","stroke","call","window"],"mappings":"4EACA,YAIA,WACA,aAEAA,MAAAC,MAAAC,IAAA,sBAWAF,MAAAG,OAAAC,MAAAC,MAAA,SAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GACA,IAMAC,EANAC,EAAAN,EAAAM,MACAC,EAAAH,EAAA,cACAI,EAAAR,EAAAO,EAAA,WACAE,EAAAL,EAAA,aACAM,EAAAN,EAAA,oBACAO,EAAAP,EAAA,oBAEAQ,EAAAX,EAAAM,EAAA,QACAM,EAAAZ,EAAAM,EAAA,KACAO,EAAAb,EAAAM,EAAA,KACAQ,EAAAb,EAAAK,EAAA,KACAS,EAAAd,EAAAK,EAAA,KAEA,GADAF,EAAAJ,EAAAgB,KAAAf,EAAAe,GAAAvB,MAAAC,MAAAuB,yBAAAL,EAAAC,EAAAF,GAAAlB,MAAAC,MAAAwB,yBAAAN,EAAAC,EAAAC,EAAAC,EAAAhB,EAAAoB,KACAd,EAAA,OAAAG,GACA,aACAH,EAAAL,EAAAK,OAAAI,EACA,MAEA,aACAJ,EAAAJ,EAAAI,OAAAI,EACA,MAEA,QACAJ,EAAAK,EAGAR,EAAAkB,YAAAf,EACAH,EAAAmB,UAAAd,EACAL,EAAAoB,YACApB,EAAAqB,OAAAX,EAAAC,GAEAb,EAAAgB,KAAAf,EAAAe,GACAd,EAAAsB,cAAApB,EAAAqB,GAAArB,EAAAsB,GAAAtB,EAAAuB,GAAAvB,EAAAwB,GAAAd,EAAAC,GAEAb,EAAA2B,iBAAAzB,EAAA0B,EAAA1B,EAAA2B,EAAAjB,EAAAC,GAGAb,EAAA8B,UApDA,KAuDCC,KAAAC","file":"static/js/3.edfa760f.chunk.js","sourcesContent":["/*** IMPORTS FROM imports-loader ***/\n(function() {\n\n;\n\n(function () {\n  'use strict';\n\n  sigma.utils.pkg('sigma.canvas.edges');\n  /**\n   * This edge renderer will display edges as curves.\n   *\n   * @param  {object}                   edge         The edge object.\n   * @param  {object}                   source node  The edge source node.\n   * @param  {object}                   target node  The edge target node.\n   * @param  {CanvasRenderingContext2D} context      The canvas context.\n   * @param  {configurable}             settings     The settings function.\n   */\n\n  sigma.canvas.edges.curve = function (edge, source, target, context, settings) {\n    var color = edge.color,\n        prefix = settings('prefix') || '',\n        size = edge[prefix + 'size'] || 1,\n        edgeColor = settings('edgeColor'),\n        defaultNodeColor = settings('defaultNodeColor'),\n        defaultEdgeColor = settings('defaultEdgeColor'),\n        cp = {},\n        sSize = source[prefix + 'size'],\n        sX = source[prefix + 'x'],\n        sY = source[prefix + 'y'],\n        tX = target[prefix + 'x'],\n        tY = target[prefix + 'y'];\n    cp = source.id === target.id ? sigma.utils.getSelfLoopControlPoints(sX, sY, sSize) : sigma.utils.getQuadraticControlPoint(sX, sY, tX, tY, edge.cc);\n    if (!color) switch (edgeColor) {\n      case 'source':\n        color = source.color || defaultNodeColor;\n        break;\n\n      case 'target':\n        color = target.color || defaultNodeColor;\n        break;\n\n      default:\n        color = defaultEdgeColor;\n        break;\n    }\n    context.strokeStyle = color;\n    context.lineWidth = size;\n    context.beginPath();\n    context.moveTo(sX, sY);\n\n    if (source.id === target.id) {\n      context.bezierCurveTo(cp.x1, cp.y1, cp.x2, cp.y2, tX, tY);\n    } else {\n      context.quadraticCurveTo(cp.x, cp.y, tX, tY);\n    }\n\n    context.stroke();\n  };\n})();\n}.call(window));"],"sourceRoot":""}