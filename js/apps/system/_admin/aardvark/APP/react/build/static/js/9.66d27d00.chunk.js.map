{"version":3,"sources":["../../frontend/js/lib/sigma.canvas.edges.tapered.js"],"names":["sigma","utils","pkg","canvas","edges","tapered","edge","source","target","context","settings","color","active","active_color","size","prefix","edgeColor","defaultNodeColor","defaultEdgeColor","sX","sY","tX","tY","dist","getDistance","c","getCircleIntersection","save","fillStyle","globalAlpha","beginPath","moveTo","lineTo","xi","yi","xi_prime","yi_prime","closePath","fill","restore","call","window"],"mappings":"4EACA,YAIA,WACA,aAEAA,MAAAC,MAAAC,IAAA,sBAcAF,MAAAG,OAAAC,MAAAC,QAAA,SAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GAIA,IAAAC,EAAAL,EAAAM,OAAAN,EAAAO,cAAAH,EAAA,0BAAAJ,EAAAK,MAEAG,EAAAR,GADAS,EAAAL,EAAA,eACA,WACAM,EAAAN,EAAA,aACAK,EAAAL,EAAA,cACAO,EAAAP,EAAA,oBACAQ,EAAAR,EAAA,oBACAS,EAAAZ,EAAAQ,EAAA,KACAK,EAAAb,EAAAQ,EAAA,KACAM,EAAAb,EAAAO,EAAA,KACAO,EAAAd,EAAAO,EAAA,KACAQ,EAAAvB,MAAAC,MAAAuB,YAAAL,EAAAC,EAAAC,EAAAC,GACA,IAAAX,EAAA,OAAAK,GACA,aACAL,EAAAJ,EAAAI,OAAAM,EACA,MAEA,aACAN,EAAAH,EAAAG,OAAAM,EACA,MAEA,QACAN,EAAAO,EAIA,IAAAO,EAAAzB,MAAAC,MAAAyB,sBAAAP,EAAAC,EAAAN,EAAAO,EAAAC,EAAAC,GACAd,EAAAkB,OAEArB,EAAAM,OACAH,EAAAmB,UAAA,SAAAlB,EAAA,mBAAAC,GAAAO,EAAAR,EAAA,0BAEAD,EAAAmB,UAAAjB,EAIAF,EAAAoB,YAAA,IAEApB,EAAAqB,YACArB,EAAAsB,OAAAV,EAAAC,GACAb,EAAAuB,OAAAP,EAAAQ,GAAAR,EAAAS,IACAzB,EAAAuB,OAAAP,EAAAU,SAAAV,EAAAW,UACA3B,EAAA4B,YACA5B,EAAA6B,OACA7B,EAAA8B,WAjEA,KAoECC,KAAAC","file":"static/js/9.66d27d00.chunk.js","sourcesContent":["/*** IMPORTS FROM imports-loader ***/\n(function() {\n\n;\n\n(function () {\n  'use strict';\n\n  sigma.utils.pkg('sigma.canvas.edges');\n  /**\n   * This method renders the edge as a tapered line.\n   * Danny Holten, Petra Isenberg, Jean-Daniel Fekete, and J. Van Wijk (2010)\n   * Performance Evaluation of Tapered, Curved, and Animated Directed-Edge\n   * Representations in Node-Link Graphs. Research Report, Sep 2010.\n   *\n   * @param  {object}                   edge         The edge object.\n   * @param  {object}                   source node  The edge source node.\n   * @param  {object}                   target node  The edge target node.\n   * @param  {CanvasRenderingContext2D} context      The canvas context.\n   * @param  {configurable}             settings     The settings function.\n   */\n\n  sigma.canvas.edges.tapered = function (edge, source, target, context, settings) {\n    // The goal is to draw a triangle where the target node is a point of\n    // the triangle, and the two other points are the intersection of the\n    // source circle and the circle (target, distance(source, target)).\n    var color = edge.active ? edge.active_color || settings('defaultEdgeActiveColor') : edge.color,\n        prefix = settings('prefix') || '',\n        size = edge[prefix + 'size'] || 1,\n        edgeColor = settings('edgeColor'),\n        prefix = settings('prefix') || '',\n        defaultNodeColor = settings('defaultNodeColor'),\n        defaultEdgeColor = settings('defaultEdgeColor'),\n        sX = source[prefix + 'x'],\n        sY = source[prefix + 'y'],\n        tX = target[prefix + 'x'],\n        tY = target[prefix + 'y'],\n        dist = sigma.utils.getDistance(sX, sY, tX, tY);\n    if (!color) switch (edgeColor) {\n      case 'source':\n        color = source.color || defaultNodeColor;\n        break;\n\n      case 'target':\n        color = target.color || defaultNodeColor;\n        break;\n\n      default:\n        color = defaultEdgeColor;\n        break;\n    } // Intersection points:\n\n    var c = sigma.utils.getCircleIntersection(sX, sY, size, tX, tY, dist);\n    context.save();\n\n    if (edge.active) {\n      context.fillStyle = settings('edgeActiveColor') === 'edge' ? color || defaultEdgeColor : settings('defaultEdgeActiveColor');\n    } else {\n      context.fillStyle = color;\n    } // Turn transparency on:\n\n\n    context.globalAlpha = 0.65; // Draw the triangle:\n\n    context.beginPath();\n    context.moveTo(tX, tY);\n    context.lineTo(c.xi, c.yi);\n    context.lineTo(c.xi_prime, c.yi_prime);\n    context.closePath();\n    context.fill();\n    context.restore();\n  };\n})();\n}.call(window));"],"sourceRoot":""}