{"version":3,"sources":["../../frontend/js/lib/sigma.canvas.edges.labels.def.js"],"names":["undefined","sigma","utils","pkg","canvas","edges","labels","def","edge","source","target","context","settings","label","prefix","size","fontSize","x","y","dX","dY","sign","angle","Math","atan2","pow","save","active","font","join","fillStyle","active_color","color","textAlign","textBaseline","translate","rotate","fillText","restore","call","this","window"],"mappings":"4EACA,YAGA,SAAAA,GACA,aAEA,wBAAAC,MAAA,6BAEAA,MAAAC,MAAAC,IAAA,6BAaAF,MAAAG,OAAAC,MAAAC,OAAAC,IAAA,SAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GACA,qBAAAJ,EAAAK,OAAAJ,GAAAC,EAAA,CACA,IAAAI,EAAAF,EAAA,cACAG,EAAAP,EAAAM,EAAA,WACA,KAAAC,EAAAH,EAAA,wBACA,OAAAA,EAAA,uEACA,IAAAI,EACAC,GAAAR,EAAAK,EAAA,KAAAJ,EAAAI,EAAA,QACAI,GAAAT,EAAAK,EAAA,KAAAJ,EAAAI,EAAA,QACAK,EAAAT,EAAAI,EAAA,KAAAL,EAAAK,EAAA,KACAM,EAAAV,EAAAI,EAAA,KAAAL,EAAAK,EAAA,KACAO,EAAAZ,EAAAK,EAAA,KAAAJ,EAAAI,EAAA,UACAQ,EAAAC,KAAAC,MAAAJ,EAAAC,EAAAF,EAAAE,GAQAL,EAAA,UAAAJ,EAAA,iBAAAA,EAAA,wBAAAA,EAAA,wBAAAG,EAAAQ,KAAAE,IAAAV,GAAA,EAAAH,EAAA,0BACAD,EAAAe,OAEAlB,EAAAmB,QACAhB,EAAAiB,KAAA,CAAAhB,EAAA,mBAAAI,EAAA,KAAAJ,EAAA,eAAAA,EAAA,SAAAiB,KAAA,KACAlB,EAAAmB,UAAA,SAAAlB,EAAA,mBAAAJ,EAAAuB,cAAAnB,EAAA,0BAAAA,EAAA,iCAEAD,EAAAiB,KAAA,CAAAhB,EAAA,aAAAI,EAAA,KAAAJ,EAAA,SAAAiB,KAAA,KACAlB,EAAAmB,UAAA,SAAAlB,EAAA,kBAAAJ,EAAAwB,OAAApB,EAAA,oBAAAA,EAAA,0BAGAD,EAAAsB,UAAA,SACAtB,EAAAuB,aAAA,aACAvB,EAAAwB,UAAAlB,EAAAC,GACAP,EAAAyB,OAAAd,GACAX,EAAA0B,SAAA7B,EAAAK,MAAA,GAAAE,EAAA,KACAJ,EAAA2B,eAECC,KAAAC,QACAD,KAAAE","file":"static/js/8.7f179925.chunk.js","sourcesContent":["/*** IMPORTS FROM imports-loader ***/\n(function() {\n\n;\n(function (undefined) {\n  'use strict';\n\n  if (typeof sigma === 'undefined') throw 'sigma is not declared'; // Initialize packages:\n\n  sigma.utils.pkg('sigma.canvas.edges.labels');\n  /**\n   * This label renderer will just display the label on the line of the edge.\n   * The label is rendered at half distance of the edge extremities, and is\n   * always oriented from left to right on the top side of the line.\n   *\n   * @param  {object}                   edge         The edge object.\n   * @param  {object}                   source node  The edge source node.\n   * @param  {object}                   target node  The edge target node.\n   * @param  {CanvasRenderingContext2D} context      The canvas context.\n   * @param  {configurable}             settings     The settings function.\n   */\n\n  sigma.canvas.edges.labels.def = function (edge, source, target, context, settings) {\n    if (typeof edge.label !== 'string' || source == target) return;\n    var prefix = settings('prefix') || '',\n        size = edge[prefix + 'size'] || 1;\n    if (size < settings('edgeLabelThreshold')) return;\n    if (0 === settings('edgeLabelSizePowRatio')) throw '\"edgeLabelSizePowRatio\" must not be 0.';\n    var fontSize,\n        x = (source[prefix + 'x'] + target[prefix + 'x']) / 2,\n        y = (source[prefix + 'y'] + target[prefix + 'y']) / 2,\n        dX = target[prefix + 'x'] - source[prefix + 'x'],\n        dY = target[prefix + 'y'] - source[prefix + 'y'],\n        sign = source[prefix + 'x'] < target[prefix + 'x'] ? 1 : -1,\n        angle = Math.atan2(dY * sign, dX * sign); // The font size is sublineraly proportional to the edge size, in order to\n    // avoid very large labels on screen.\n    // This is achieved by f(x) = x * x^(-1/ a), where 'x' is the size and 'a'\n    // is the edgeLabelSizePowRatio. Notice that f(1) = 1.\n    // The final form is:\n    // f'(x) = b * x * x^(-1 / a), thus f'(1) = b. Application:\n    // fontSize = defaultEdgeLabelSize if edgeLabelSizePowRatio = 1\n\n    fontSize = settings('edgeLabelSize') === 'fixed' ? settings('defaultEdgeLabelSize') : settings('defaultEdgeLabelSize') * size * Math.pow(size, -1 / settings('edgeLabelSizePowRatio'));\n    context.save();\n\n    if (edge.active) {\n      context.font = [settings('activeFontStyle'), fontSize + 'px', settings('activeFont') || settings('font')].join(' ');\n      context.fillStyle = settings('edgeActiveColor') === 'edge' ? edge.active_color || settings('defaultEdgeActiveColor') : settings('defaultEdgeLabelActiveColor');\n    } else {\n      context.font = [settings('fontStyle'), fontSize + 'px', settings('font')].join(' ');\n      context.fillStyle = settings('edgeLabelColor') === 'edge' ? edge.color || settings('defaultEdgeColor') : settings('defaultEdgeLabelColor');\n    }\n\n    context.textAlign = 'center';\n    context.textBaseline = 'alphabetic';\n    context.translate(x, y);\n    context.rotate(angle);\n    context.fillText(edge.label, 0, -size / 2 - 3);\n    context.restore();\n  };\n}).call(this);\n}.call(window));"],"sourceRoot":""}