(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{473:function(module,exports){(function(){(function(undefined){"use strict";if("undefined"===typeof sigma)throw"sigma is not declared";sigma.utils.pkg("sigma.plugins"),sigma.classes.graph.hasMethod("adjacentNodes")||sigma.classes.graph.addMethod("adjacentNodes",function(e){if("string"!==typeof e)throw"adjacentNodes: the node id must be a string.";var r,n=[];for(r in this.allNeighborsIndex[e])n.push(this.nodesIndex[r]);return n}),sigma.classes.graph.hasMethod("adjacentEdges")||sigma.classes.graph.addMethod("adjacentEdges",function(e){if("string"!==typeof e)throw"adjacentEdges: the node id must be a string.";var r,n,o=this.allNeighborsIndex[e],t=[];for(n in o)for(r in o[n])t.push(o[n][r]);return t});var _g=undefined,_s=undefined,_chain=[],_keysIndex=Object.create(null),Processors={};function register(e,r,n){if(n!=undefined&&"string"!==typeof n)throw'The filter key "'+n.toString()+'" must be a string.';if(n!=undefined&&!n.length)throw"The filter key must be a non-empty string.";if("function"!==typeof e)throw'The predicate of key "'+n+'" must be a function.';if("undo"===n)throw'"undo" is a reserved key.';if(_keysIndex[n])throw'The filter "'+n+'" already exists.';n&&(_keysIndex[n]=!0),_chain.push({key:n,processor:e,predicate:r})}function unregister(e){for(var r in _chain=_chain.filter(function(r){return!(r.key in e)}),e)delete _keysIndex[r]}function Filter(e){_s=e,_g=e.graph}function deepCopy(o){var copy=Object.create(null);for(var i in o)"object"===typeof o[i]&&null!==o[i]?copy[i]=deepCopy(o[i]):"function"===typeof o[i]&&null!==o[i]?eval(" copy[i] = "+o[i].toString()):copy[i]=o[i];return copy}function cloneChain(e){for(var r=e.slice(0),n=0,o=r.length;n<o;n++)r[n]=deepCopy(r[n]),"function"===typeof r[n].processor&&(r[n].processor="filter.processors."+r[n].processor.name);return r}Processors.nodes=function(e){for(var r=_g.nodes(),n=r.length,o=_g.edges(),t=o.length;n--;)r[n].hidden=!e.call(_g,r[n])||r[n].hidden;for(;t--;)(_g.nodes(o[t].source).hidden||_g.nodes(o[t].target).hidden)&&(o[t].hidden=!0)},Processors.edges=function(e){for(var r=_g.edges(),n=r.length;n--;)r[n].hidden=!e.call(_g,r[n])||r[n].hidden},Processors.neighbors=function(e){for(var r=_g.nodes(),n=r.length,o=_g.edges(),t=o.length,i=_g.adjacentNodes(e),s=i.length,d={};s--;)d[i[s].id]=!0;for(;n--;)r[n].id===e||r[n].id in d||(r[n].hidden=!0);for(;t--;)(_g.nodes(o[t].source).hidden||_g.nodes(o[t].target).hidden)&&(o[t].hidden=!0)},Filter.prototype.nodesBy=function(e,r){return register(Processors.nodes,e,r),this},Filter.prototype.edgesBy=function(e,r){return register(Processors.edges,e,r),this},Filter.prototype.neighborsOf=function(e,r){if("string"!==typeof e)throw'The node id "'+e.toString()+'" must be a string.';if(!e.length)throw"The node id must be a non-empty string.";return register(Processors.neighbors,e,r),this},Filter.prototype.apply=function(){for(var e=0,r=_chain.length;e<r;++e)_chain[e].processor(_chain[e].predicate);return _chain[0]&&"undo"===_chain[0].key&&_chain.shift(),_s.refresh(),this},Filter.prototype.undo=function(e){var r=Object.create(null),n=arguments.length;if(1===n)if("[object Array]"===Object.prototype.toString.call(e))for(var o=0,t=e.length;o<t;o++)r[e[o]]=!0;else r[e]=!0;else if(n>1)for(o=0;o<n;o++)r[arguments[o]]=!0;else this.clear();return unregister(r),_chain.unshift({key:"undo",processor:function(){for(var e=_g.nodes(),r=e.length,n=_g.edges(),o=n.length;r--;)e[r].hidden=!1;for(;o--;)n[o].hidden=!1}}),this},Filter.prototype.clear=function(){return _chain.length=0,_keysIndex=Object.create(null),this},Filter.prototype.export=function(){return cloneChain(_chain)},Filter.prototype.import=function(e){if(e===undefined)throw"Wrong arguments.";if("[object Array]"!==Object.prototype.toString.call(e))throw'The chain" must be an array.';for(var r=cloneChain(e),n=0,o=r.length;n<o;n++){if(r[n].predicate===undefined||r[n].processor===undefined)throw"Wrong arguments.";if(r[n].key!=undefined&&"string"!==typeof r[n].key)throw'The filter key "'+r[n].key.toString()+'" must be a string.';if("function"!==typeof r[n].predicate)throw'The predicate of key "'+r[n].key+'" must be a function.';if("string"!==typeof r[n].processor)throw'The processor of key "'+r[n].key+'" must be a string.';switch(r[n].processor){case"filter.processors.nodes":r[n].processor=Processors.nodes;break;case"filter.processors.edges":r[n].processor=Processors.edges;break;case"filter.processors.neighbors":r[n].processor=Processors.neighbors;break;default:throw"Unknown processor "+r[n].processor}}return _chain=r,this};var filter=null;sigma.plugins.filter=function(e){return filter||(filter=new Filter(e)),filter}}).call(this)}).call(window)}}]);
//# sourceMappingURL=15.51e12372.chunk.js.map