{"version":3,"sources":["../../frontend/js/lib/sigma.plugins.lasso.js"],"names":["undefined","sigma","utils","pkg","_body","_instances","Lasso","sigmaInstance","renderer","settings","classes","dispatcher","extend","this","renderers","webgl","Error","drawingCanvas","drawingContext","drewPoints","selectedNodes","isActive","isDrawing","document","body","configurable","strokeStyle","lineWidth","fillWhileDrawing","fillStyle","cursor","prototype","clear","deactivate","activate","domElements","initDOM","width","container","offsetWidth","height","offsetHeight","appendChild","getContext","style","_bindAll","apply","_unbindAll","removeChild","addEventListener","onDrawingStart","bind","onDrawing","onDrawingEnd","removeEventListener","event","drawingRectangle","getBoundingClientRect","refresh","push","x","clientX","left","y","clientY","top","stopPropagation","type","touches","lineJoin","lineCap","clearRect","canvas","sourcePoint","destinationPoint","pointsLength","length","beginPath","moveTo","i","middlePoint","secondPoint","firstPoint","quadraticCurveTo","lineTo","stroke","fill","nodes","nodesOnScreen","nodesLength","prefix","options","node","isPointInPath","hidden","dispatchEvent","getSelectedNodes","plugins","lasso","id","call","window"],"mappings":"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","file":"static/js/17.f928de9e.chunk.js","sourcesContent":["/*** IMPORTS FROM imports-loader ***/\n(function() {\n\n/**\n * Sigma Lasso\n * =============================\n *\n * @author Florent Schildknecht <florent.schildknecht@gmail.com> (Florent Schildknecht)\n * @version 0.0.2\n */\n;\n(function (undefined) {\n  'use strict';\n\n  if (typeof sigma === 'undefined') throw 'sigma is not declared'; // Initialize package:\n\n  sigma.utils.pkg('sigma.plugins');\n  var _body = undefined,\n      _instances = {};\n  /**\n   * Lasso Object\n   * ------------------\n   * @param  {sigma}                                  sigmaInstance The related sigma instance.\n   * @param  {renderer} renderer                      The sigma instance renderer.\n   * @param  {sigma.classes.configurable} settings    A settings class\n   */\n\n  function Lasso(sigmaInstance, renderer, settings) {\n    // Lasso is also an event dispatcher\n    sigma.classes.dispatcher.extend(this); // A quick hardcoded rule to prevent people from using this plugin with the\n    // WebGL renderer (which is impossible at the moment):\n\n    if (sigma.renderers.webgl && renderer instanceof sigma.renderers.webgl) throw new Error('The sigma.plugins.lasso is not compatible with the WebGL renderer');\n    this.sigmaInstance = sigmaInstance;\n    this.renderer = renderer;\n    this.drawingCanvas = undefined;\n    this.drawingContext = undefined;\n    this.drewPoints = [];\n    this.selectedNodes = [];\n    this.isActive = false;\n    this.isDrawing = false;\n    _body = document.body; // Extends default settings\n\n    this.settings = new sigma.classes.configurable({\n      'strokeStyle': 'black',\n      'lineWidth': 2,\n      'fillWhileDrawing': false,\n      'fillStyle': 'rgba(200, 200, 200, 0.25)',\n      'cursor': 'crosshair'\n    }, settings || {});\n  }\n\n  ;\n  /**\n   * This method is used to destroy the lasso.\n   *\n   * > var lasso = new sigma.plugins.lasso(sigmaInstance);\n   * > lasso.clear();\n   *\n   * @return {sigma.plugins.lasso} Returns the instance.\n   */\n\n  Lasso.prototype.clear = function () {\n    this.deactivate();\n    this.sigmaInstance = undefined;\n    this.renderer = undefined;\n    return this;\n  }; // Lasso.prototype.getSigmaInstance = function () {\n  //   return this.sigmaInstance;\n  // }\n\n  /**\n   * This method is used to activate the lasso mode.\n   *\n   * > var lasso = new sigma.plugins.lasso(sigmaInstance);\n   * > lasso.activate();\n   *\n   * @return {sigma.plugins.lasso} Returns the instance.\n   */\n\n\n  Lasso.prototype.activate = function () {\n    if (this.sigmaInstance && !this.isActive) {\n      this.isActive = true; // Add a new background layout canvas to draw the path on\n\n      if (!this.renderer.domElements['lasso']) {\n        this.renderer.initDOM('canvas', 'lasso');\n        this.drawingCanvas = this.renderer.domElements['lasso'];\n        this.drawingCanvas.width = this.renderer.container.offsetWidth;\n        this.drawingCanvas.height = this.renderer.container.offsetHeight;\n        this.renderer.container.appendChild(this.drawingCanvas);\n        this.drawingContext = this.drawingCanvas.getContext('2d');\n        this.drawingCanvas.style.cursor = this.settings('cursor');\n      }\n\n      _bindAll.apply(this);\n    }\n\n    return this;\n  };\n  /**\n   * This method is used to deactivate the lasso mode.\n   *\n   * > var lasso = new sigma.plugins.lasso(sigmaInstance);\n   * > lasso.deactivate();\n   *\n   * @return {sigma.plugins.lasso} Returns the instance.\n   */\n\n\n  Lasso.prototype.deactivate = function () {\n    if (this.sigmaInstance && this.isActive) {\n      this.isActive = false;\n      this.isDrawing = false;\n\n      _unbindAll.apply(this);\n\n      if (this.renderer.domElements['lasso']) {\n        this.renderer.container.removeChild(this.renderer.domElements['lasso']);\n        delete this.renderer.domElements['lasso'];\n        this.drawingCanvas.style.cursor = '';\n        this.drawingCanvas = undefined;\n        this.drawingContext = undefined;\n        this.drewPoints = [];\n      }\n    }\n\n    return this;\n  };\n  /**\n   * This method is used to bind all events of the lasso mode.\n   *\n   * > var lasso = new sigma.plugins.lasso(sigmaInstance);\n   * > lasso.activate();\n   *\n   * @return {sigma.plugins.lasso} Returns the instance.\n   */\n\n\n  var _bindAll = function _bindAll() {\n    // Mouse events\n    this.drawingCanvas.addEventListener('mousedown', onDrawingStart.bind(this));\n\n    _body.addEventListener('mousemove', onDrawing.bind(this));\n\n    _body.addEventListener('mouseup', onDrawingEnd.bind(this)); // Touch events\n\n\n    this.drawingCanvas.addEventListener('touchstart', onDrawingStart.bind(this));\n\n    _body.addEventListener('touchmove', onDrawing.bind(this));\n\n    _body.addEventListener('touchcancel', onDrawingEnd.bind(this));\n\n    _body.addEventListener('touchleave', onDrawingEnd.bind(this));\n\n    _body.addEventListener('touchend', onDrawingEnd.bind(this));\n  };\n  /**\n   * This method is used to unbind all events of the lasso mode.\n   *\n   * > var lasso = new sigma.plugins.lasso(sigmaInstance);\n   * > lasso.activate();\n   *\n   * @return {sigma.plugins.lasso} Returns the instance.\n   */\n\n\n  var _unbindAll = function _unbindAll() {\n    // Mouse events\n    this.drawingCanvas.removeEventListener('mousedown', onDrawingStart.bind(this));\n\n    _body.removeEventListener('mousemove', onDrawing.bind(this));\n\n    _body.removeEventListener('mouseup', onDrawingEnd.bind(this)); // Touch events\n\n\n    this.drawingCanvas.removeEventListener('touchstart', onDrawingStart.bind(this));\n    this.drawingCanvas.removeEventListener('touchmove', onDrawing.bind(this));\n\n    _body.removeEventListener('touchcancel', onDrawingEnd.bind(this));\n\n    _body.removeEventListener('touchleave', onDrawingEnd.bind(this));\n\n    _body.removeEventListener('touchend', onDrawingEnd.bind(this));\n  };\n  /**\n   * This method is used to retrieve the previously selected nodes\n   *\n   * > var lasso = new sigma.plugins.lasso(sigmaInstance);\n   * > lasso.getSelectedNodes();\n   *\n   * @return {array} Returns an array of nodes.\n   */\n\n\n  Lasso.prototype.getSelectedNodes = function () {\n    return this.selectedNodes;\n  };\n\n  function onDrawingStart(event) {\n    var drawingRectangle = this.drawingCanvas.getBoundingClientRect();\n\n    if (this.isActive) {\n      this.isDrawing = true;\n      this.drewPoints = [];\n      this.selectedNodes = [];\n      this.sigmaInstance.refresh();\n      this.drewPoints.push({\n        x: event.clientX - drawingRectangle.left,\n        y: event.clientY - drawingRectangle.top\n      });\n      this.drawingCanvas.style.cursor = this.settings('cursor');\n      event.stopPropagation();\n    }\n  }\n\n  function onDrawing(event) {\n    if (this.isActive && this.isDrawing) {\n      var x = 0,\n          y = 0,\n          drawingRectangle = this.drawingCanvas.getBoundingClientRect();\n\n      switch (event.type) {\n        case 'touchmove':\n          x = event.touches[0].clientX;\n          y = event.touches[0].clientY;\n          break;\n\n        default:\n          x = event.clientX;\n          y = event.clientY;\n          break;\n      }\n\n      this.drewPoints.push({\n        x: x - drawingRectangle.left,\n        y: y - drawingRectangle.top\n      }); // Drawing styles\n\n      this.drawingContext.lineWidth = this.settings('lineWidth');\n      this.drawingContext.strokeStyle = this.settings('strokeStyle');\n      this.drawingContext.fillStyle = this.settings('fillStyle');\n      this.drawingContext.lineJoin = 'round';\n      this.drawingContext.lineCap = 'round'; // Clear the canvas\n\n      this.drawingContext.clearRect(0, 0, this.drawingContext.canvas.width, this.drawingContext.canvas.height); // Redraw the complete path for a smoother effect\n      // Even smoother with quadratic curves\n\n      var sourcePoint = this.drewPoints[0],\n          destinationPoint = this.drewPoints[1],\n          pointsLength = this.drewPoints.length,\n          getMiddlePointCoordinates = function getMiddlePointCoordinates(firstPoint, secondPoint) {\n        return {\n          x: firstPoint.x + (secondPoint.x - firstPoint.x) / 2,\n          y: firstPoint.y + (secondPoint.y - firstPoint.y) / 2\n        };\n      };\n\n      this.drawingContext.beginPath();\n      this.drawingContext.moveTo(sourcePoint.x, sourcePoint.y);\n\n      for (var i = 1; i < pointsLength; i++) {\n        var middlePoint = getMiddlePointCoordinates(sourcePoint, destinationPoint); // this.drawingContext.lineTo(this.drewPoints[i].x, this.drewPoints[i].y);\n\n        this.drawingContext.quadraticCurveTo(sourcePoint.x, sourcePoint.y, middlePoint.x, middlePoint.y);\n        sourcePoint = this.drewPoints[i];\n        destinationPoint = this.drewPoints[i + 1];\n      }\n\n      this.drawingContext.lineTo(sourcePoint.x, sourcePoint.y);\n      this.drawingContext.stroke();\n\n      if (this.settings('fillWhileDrawing')) {\n        this.drawingContext.fill();\n      }\n\n      event.stopPropagation();\n    }\n  }\n\n  function onDrawingEnd(event) {\n    if (this.isActive && this.isDrawing) {\n      this.isDrawing = false; // Select the nodes inside the path\n\n      var nodes = this.renderer.nodesOnScreen,\n          nodesLength = nodes.length,\n          i = 0,\n          prefix = this.renderer.options.prefix || ''; // Loop on all nodes and check if they are in the path\n\n      while (nodesLength--) {\n        var node = nodes[nodesLength],\n            x = node[prefix + 'x'],\n            y = node[prefix + 'y'];\n\n        if (this.drawingContext.isPointInPath(x, y) && !node.hidden) {\n          this.selectedNodes.push(node);\n        }\n      } // Dispatch event with selected nodes\n\n\n      this.dispatchEvent('selectedNodes', this.selectedNodes); // Clear the drawing canvas\n\n      this.drawingContext.clearRect(0, 0, this.drawingCanvas.width, this.drawingCanvas.height);\n      this.drawingCanvas.style.cursor = this.settings('cursor');\n      event.stopPropagation();\n    }\n  }\n  /**\n   * @param  {sigma}                                  sigmaInstance The related sigma instance.\n   * @param  {renderer} renderer                      The sigma instance renderer.\n   * @param  {sigma.classes.configurable} settings    A settings class\n   *\n   * @return {sigma.plugins.lasso} Returns the instance\n   */\n\n\n  sigma.plugins.lasso = function (sigmaInstance, renderer, settings) {\n    // Create lasso if undefined\n    if (!_instances[sigmaInstance.id]) {\n      _instances[sigmaInstance.id] = new Lasso(sigmaInstance, renderer, settings);\n    } // Listen for sigmaInstance kill event, and remove the lasso isntance\n\n\n    sigmaInstance.bind('kill', function () {\n      if (_instances[sigmaInstance.id] instanceof Lasso) {\n        _instances[sigmaInstance.id].clear();\n\n        delete _instances[sigmaInstance.id];\n      }\n    });\n    return _instances[sigmaInstance.id];\n  };\n}).call(this);\n}.call(window));"],"sourceRoot":""}