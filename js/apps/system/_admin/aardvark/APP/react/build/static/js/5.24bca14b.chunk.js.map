{"version":3,"sources":["../../frontend/js/lib/sigma.canvas.edges.dotted.js"],"names":["sigma","utils","pkg","canvas","edges","dotted","edge","source","target","context","settings","color","active","active_color","prefix","size","edgeColor","defaultNodeColor","defaultEdgeColor","save","strokeStyle","setLineDash","lineWidth","beginPath","moveTo","lineTo","stroke","restore","call","window"],"mappings":"4EACA,YAIA,WACA,aAEAA,MAAAC,MAAAC,IAAA,sBAWAF,MAAAG,OAAAC,MAAAC,OAAA,SAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GACA,IAAAC,EAAAL,EAAAM,OAAAN,EAAAO,cAAAH,EAAA,0BAAAJ,EAAAK,MACAG,EAAAJ,EAAA,cACAK,EAAAT,EAAAQ,EAAA,WACAE,EAAAN,EAAA,aACAO,EAAAP,EAAA,oBACAQ,EAAAR,EAAA,oBACA,IAAAC,EAAA,OAAAK,GACA,aACAL,EAAAJ,EAAAI,OAAAM,EACA,MAEA,aACAN,EAAAH,EAAAG,OAAAM,EACA,MAEA,QACAN,EAAAO,EAGAT,EAAAU,OAEAb,EAAAM,OACAH,EAAAW,YAAA,SAAAV,EAAA,mBAAAC,GAAAO,EAAAR,EAAA,0BAEAD,EAAAW,YAAAT,EAGAF,EAAAY,YAAA,KACAZ,EAAAa,UAAAP,EACAN,EAAAc,YACAd,EAAAe,OAAAjB,EAAAO,EAAA,KAAAP,EAAAO,EAAA,MACAL,EAAAgB,OAAAjB,EAAAM,EAAA,KAAAN,EAAAM,EAAA,MACAL,EAAAiB,SACAjB,EAAAkB,WAhDA,KAmDCC,KAAAC","file":"static/js/5.24bca14b.chunk.js","sourcesContent":["/*** IMPORTS FROM imports-loader ***/\n(function() {\n\n;\n\n(function () {\n  'use strict';\n\n  sigma.utils.pkg('sigma.canvas.edges');\n  /**\n   * This method renders the edge as a dotted line.\n   *\n   * @param  {object}                   edge         The edge object.\n   * @param  {object}                   source node  The edge source node.\n   * @param  {object}                   target node  The edge target node.\n   * @param  {CanvasRenderingContext2D} context      The canvas context.\n   * @param  {configurable}             settings     The settings function.\n   */\n\n  sigma.canvas.edges.dotted = function (edge, source, target, context, settings) {\n    var color = edge.active ? edge.active_color || settings('defaultEdgeActiveColor') : edge.color,\n        prefix = settings('prefix') || '',\n        size = edge[prefix + 'size'] || 1,\n        edgeColor = settings('edgeColor'),\n        defaultNodeColor = settings('defaultNodeColor'),\n        defaultEdgeColor = settings('defaultEdgeColor');\n    if (!color) switch (edgeColor) {\n      case 'source':\n        color = source.color || defaultNodeColor;\n        break;\n\n      case 'target':\n        color = target.color || defaultNodeColor;\n        break;\n\n      default:\n        color = defaultEdgeColor;\n        break;\n    }\n    context.save();\n\n    if (edge.active) {\n      context.strokeStyle = settings('edgeActiveColor') === 'edge' ? color || defaultEdgeColor : settings('defaultEdgeActiveColor');\n    } else {\n      context.strokeStyle = color;\n    }\n\n    context.setLineDash([2]);\n    context.lineWidth = size;\n    context.beginPath();\n    context.moveTo(source[prefix + 'x'], source[prefix + 'y']);\n    context.lineTo(target[prefix + 'x'], target[prefix + 'y']);\n    context.stroke();\n    context.restore();\n  };\n})();\n}.call(window));"],"sourceRoot":""}