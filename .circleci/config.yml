version: 2.1

setup: true

orbs:
  continuation: circleci/continuation@0.4.0

parameters:
  enterprise-branch:
    type: string
    # we use an empty string as default. In this case we check if the enterprise repo
    # contains a branch with the same name as the arangodb repo. If this is the case
    # we use it, otherwise we fall back to "devel".
    default: ""
  rebuild-test-docker-images:
    type: boolean
    default: false
  build-docker-image:
    type: string
    default: ""
  nightly:
    type: boolean
    default: false
  replication-two:
    type: boolean
    default: false # We use replication1 as default.
  c-compiler:
    type: string
    default: "gcc"
  cxx-compiler:
    type: string
    default: "g++"
  sanitizer:
    type: string
    default: "" # should be empty, "tsan" or "alubsan"

# our defined job, and its steps
jobs:
  # this is in a separate job from "setup" to make it as cheap as possible (because it uses the bare base image)
  check-build-trigger:
    docker:
      - image: cimg/base:current
    resource_class: small
    steps:
      - when:
          condition:
            not:
              or:
                - equal: [devel, << pipeline.git.branch >>]
                - equal: [api, << pipeline.trigger_source >>]
                - equal: [scheduled_pipeline, << pipeline.trigger_source >>]
          steps:
            - run: |
                echo "Intentional build failure - to run an actual build please trigger a pipeline manually."
                exit 1
      - run: echo "Check successful - generating config."

  generate-config:
    docker:
      - image: cimg/python:3.11.1
    resource_class: small
    executor: continuation/default
    parameters:
      definitions:
        type: string
      default-enterprise-branch:
        type: string
        default: "devel"
    steps:
      - run:
          name: Checkout
          command: |
            # We do not want to clone the whole repository since we only need a few files.
            # Unfortunately GitHub does not support the git-archive protocol, so we need to fetch the required files by hand.
            (mkdir .circleci && cd .circleci && curl https://api.github.com/repos/arangodb/arangodb/contents/.circleci?ref=$CIRCLE_SHA1 | jq ".[].download_url" | xargs wget)
            (mkdir tests && cd tests && wget https://raw.githubusercontent.com/arangodb/arangodb/$CIRCLE_SHA1/<< parameters.definitions >>)

      - add_ssh_keys:
          fingerprints:
            - "f9:49:75:1a:ad:44:89:10:4b:3c:70:70:ba:d3:c3:ce"
      - run:
          name: Determine enterprise branch
          command: |
            ssh-keyscan github.com >> ~/.ssh/known_hosts
            if [ "<< pipeline.parameters.enterprise-branch >>" == "" ]; then
              set +e
              DEFAULT_ENTERPRISE_BRANCH=`curl -s https://api.github.com/repos/arangodb/arangodb/commits/$CIRCLE_SHA1/pulls | jq -e -r ".[0].base.ref"`
              if [ "$?" == "0" ] ; then
                echo "Found associated PR, using base branch '$DEFAULT_ENTERPRISE_BRANCH' as default enterprise branch"
              elif [[ "$CIRCLE_BRANCH" =~ ^[0-9]+\.[0-9]+(\.[0-9]+)$ ]]; then
                echo "Building for release branch '$CIRCLE_BRANCH' - using that als default enterprise branch"
                DEFAULT_ENTERPRISE_BRANCH=$CIRCLE_BRANCH
              else
                echo "Did not find associated PR, falling back to '<< parameters.default-enterprise-branch >>' as default enterprise branch"
                DEFAULT_ENTERPRISE_BRANCH=<< parameters.default-enterprise-branch >>
              fi

              git ls-remote --exit-code --heads git@github.com:arangodb/enterprise.git "$CIRCLE_BRANCH"
              if [ "$?" == "0" ] ; then
                ENTERPRISE_BRANCH=$CIRCLE_BRANCH
              else
                ENTERPRISE_BRANCH=$DEFAULT_ENTERPRISE_BRANCH
              fi
              set -e
            else
              ENTERPRISE_BRANCH=<< pipeline.parameters.enterprise-branch >>
            fi
            ENTERPRISE_COMMIT=`git ls-remote --heads git@github.com:arangodb/enterprise.git $ENTERPRISE_BRANCH | cut -f1`
            echo "Using enterprise branch $ENTERPRISE_BRANCH (sha $ENTERPRISE_COMMIT)"
            echo "{\"enterprise-commit\": \"$ENTERPRISE_COMMIT\"}" > parameters.json
            cat parameters.json

      - run:
          name: Generate config
          command: |
            if [ "<< pipeline.parameters.rebuild-test-docker-images >>" == "true" ]; then
              cp .circleci/build_test_image.yml continuation_config.yml
            else
              pip install pyyaml
              python3 ".circleci/generate_config.py" --sanitizer "<< pipeline.parameters.sanitizer >>" \
                <<# pipeline.parameters.nightly >> --nightly <</ pipeline.parameters.nightly >> \
                <<# pipeline.parameters.replication-two >> -rt <</ pipeline.parameters.replication-two >> \
                -o continuation_config.yml ./.circleci/base_config.yml << parameters.definitions >>
            fi

      - continuation/continue:
          configuration_path: continuation_config.yml
          parameters: parameters.json

# our single workflow, that triggers the setup job defined above
workflows:
  setup:
    jobs:
      # we always create a workflow and let the build fail in check-build-trigger unless it has been triggered manually
      # or runs on the devel branch (see condition in check-build-trigger)
      - check-build-trigger
      - generate-config:
          definitions: "tests/test-definitions.txt"
          requires:
            - check-build-trigger
