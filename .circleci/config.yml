version: 2.1

setup: true

orbs:
  continuation: circleci/continuation@0.3.1

# our defined job, and its steps
jobs:
  setup:
    docker:
      - image: cimg/python:3.11.1
    executor: continuation/default
    parameters:
      definitions:
        type: string
    steps:
      - run:
          name: Checkout
          command: |
            # We do not want to clone the whole repository since we only need a few files.
            # Unfortunately GitHub does not support the git-archive protocol, so we need to fetch the required files by hand.
            (mkdir .circleci && cd .circleci && curl https://api.github.com/repos/arangodb/arangodb/contents/.circleci?ref=$CIRCLE_SHA1 | jq ".[].download_url" | xargs wget)
            (mkdir tests && cd tests && wget https://raw.githubusercontent.com/arangodb/arangodb/$CIRCLE_SHA1/<< parameters.definitions >>)
      - run:
          name: Generate config
          command: |
            pip install pyyaml
            python3 ".circleci/generate_config.py" -o generated_config.yml ./.circleci/base_config.yml << parameters.definitions >>

      - continuation/continue:
          configuration_path: generated_config.yml # use newly generated config to continue

  replication2-compile-linux-community:
    parameters:
      preset:
        type: string
    docker:
      - image: arangodb/build-alpine-x86_64:3.16-gcc11.2-openssl1.1.1t
    resource_class: xlarge
    environment:
      GIT_SSH_COMMAND: ssh -v
    steps:
      - run: git clone --depth 1 https://github.com/arangodb/arangodb.git -b "$CIRCLE_BRANCH" --recurse-submodules --shallow-submodules -j 8 /root/project
      - run:
          name: Configure CCache
          command: ccache --set-config max_size=250M
      - run:
          name: Print CCache Settings
          command: ccache -p
      - restore_cache:
          keys:
            - ccache-v2-build-r2-{{ .Branch }}-{{ .Revision }}
            - ccache-v2-build-r2-{{ .Branch }}-
            - ccache-v2-build-r2
      - run:
          name: Zero CCache Statistics
          command: ccache -z
      - run:
          name: Configure
          command: |
            cmake --preset << parameters.preset >> -DCMAKE_C_COMPILER=gcc -DCMAKE_CXX_COMPILER=g++ -DCMAKE_EXE_LINKER_FLAGS="-fuse-ld=lld" -DSTATIC_EXECUTABLES=On
      - run:
          name: Build
          command: |
            cmake --build --preset << parameters.preset >> --parallel 8 --target arangodbtests_replication2_pure
      - run:
          name: CCache Statistics
          command: ccache -sv
      - store_artifacts:
          path: build-presets/<< parameters.preset >>/bin/arangodbtests_replication2_pure
      - save_cache:
          when: always
          key: ccache-v2-build-r2-{{ .Branch }}-{{ .Revision }}
          paths:
            - /root/.cache/ccache
      - run:
          name: Clean up workspace
          command: |
            rm build-presets/<< parameters.preset >>/bin/*.a
      - persist_to_workspace:
          root: .
          paths:
            - build-presets/<< parameters.preset >>/bin
            - scripts/
            - js/
            - etc/
            - tests/js
            - utils
            - UnitTests
            - 3rdParty/iresearch/tests/resources

  replication2-run-gtest-executable-linux:
    parameters:
      executable:
        type: string
      filter:
        type: string
      size:
        type: string
        default: small
      shuffle:
        type: string
        default: ""
    docker:
      - image: cimg/base:2022.12
    resource_class: << parameters.size >>
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Enabled coredumps
          command: ulimit -c unlimited
      - run:
          name: Run GTest
          command: |
            << parameters.executable >> --gtest_filter=<< parameters.filter >> --gtest_output=xml << parameters.shuffle >>
      - run:
          command: |
            mkdir -p /tmp/core_dumps
            cp core.* /tmp/core_dumps
          when: on_fail
      - store_artifacts:
          path: /tmp/core_dumps
      - store_test_results:
          path: test_detail.xml
          
# our single workflow, that triggers the setup job defined above
workflows:
  setup:
    when:
      or:
        - equal: [ devel, << pipeline.git.branch >> ]
        - equal: [ staging/replication-2.0, << pipeline.git.branch >> ]
        - equal: [ api, << pipeline.trigger_source >> ]
    jobs:
      - setup:
          definitions: "tests/test-definitions.txt"
  setup-rlog:
    when:
      matches:
        pattern: /^(bug-fix|feature|chore)\/cinfra-.*$/
        value: << pipeline.git.branch >>
    jobs:
      - setup:
          name: Prepare CINFRA test set
          definitions: "tests/test-definitions-rlog.txt"
  replication2-pr:
    when:
      matches:
        pattern: /^(bug-fix|feature|chore)\/cinfra-.*$/
        value: << pipeline.git.branch >>
    jobs:
      - replication2-compile-linux-community:
          name: build replication2 test pure
          preset: pr-replication-2-pure
      - replication2-run-gtest-executable-linux:
          name: replication 2 pure tests
          executable: 'build-presets/pr-replication-2-pure/bin/arangodbtests_replication2_pure'
          filter: '*'
          size: medium
          requires:
            - build replication2 test pure

