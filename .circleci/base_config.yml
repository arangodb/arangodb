version: 2.1

orbs:
  win: circleci/windows@5.0 # The Windows orb gives you everything you need to start using the

parameters:
  enterprise-commit:
    type: string
    default: ""
  build-docker-image:
    type: string
    default: "arangodb/build-alpine:3.18-clang16.0-gcc12.2-openssl3.1.4-26c4da3c8"
  # Unused here, but it will be forwarded from config and will cause errors if not defined
  replication-two:
    type: boolean
    default: false
  c-compiler:
    type: string
    default: "clang"
  cxx-compiler:
    type: string
    default: "clang++"
  # these are basically global constants
  build-targets:
    type: string
    default: "arangod arangoimport arangoexport arangodump arangorestore arangobench"
  test-build-targets:
    type: string
    default: "arangodbtests fuertetest"
  enterprise-build-targets:
    type: string
    default: "arangobackup"
  v8-build-targets:
    type: string
    default: "arangosh"

commands:
  checkout-arangodb:
    parameters:
      destination:
        type: string
      with-submodules:
        type: boolean
    steps:
      - run:
          name: Checkout ArangoDB
          command: |
            mkdir -p << parameters.destination >>
            cd << parameters.destination >>
            echo << pipeline.git.revision >>
            git init
            git remote add origin https://github.com/arangodb/arangodb.git
            echo "Fetching stuff"
            git fetch --depth 1 origin << pipeline.git.revision >>
            git checkout << pipeline.git.revision >>
      - when:
          condition: << parameters.with-submodules >>
          steps:
            - run:
                name: "Checkout submodules"
                command: |
                  cd << parameters.destination >>
                  git submodule init
                  git submodule update --recursive --depth 1 --jobs 8

  checkout-enterprise:
    description: "Checkout enterprise code"
    parameters:
      destination:
        type: string
    steps:
      - add_ssh_keys:
          fingerprints:
            - "f9:49:75:1a:ad:44:89:10:4b:3c:70:70:ba:d3:c3:ce"
      - run:
          name: Checkout Enterprise
          environment:
            GIT_SSH_COMMAND: "ssh -o StrictHostKeyChecking=no"
          command: |
            mkdir -p << parameters.destination >>
            cd << parameters.destination >>
            git clone git@github.com:arangodb/enterprise.git .
            git reset --hard << pipeline.parameters.enterprise-commit >>

jobs:
  minimal-checkout:
    docker:
      - image: cimg/base:current
    resource_class: small
    environment:
      GIT_SSH_COMMAND: ssh -v
    steps:
      - checkout-arangodb:
          with-submodules: false
          destination: "/home/circleci/project"
      - checkout-enterprise:
          destination: "/home/circleci/project/enterprise"
      - persist_to_workspace:
          root: .
          paths:
            - .

  check-log-ids:
    docker:
      - image: cimg/python:3.11.1
    resource_class: small
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Install pyyaml
          command: |
            python -m pip install --upgrade pip
            pip install pyyaml
      - run:
          name: Check LogIDs
          command: |
            python3 utils/checkLogIds.py

  clang-format:
    docker:
      - image: alpine:3.15
    resource_class: small
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Install clang-format
          command: |
            apk add --no-cache git bash coreutils grep clang-extra-tools=12.0.1-r1
      - run:
          name: Print clang-format version
          command: clang-format --version
      - run:
          name: Run clang-format
          command: |
            scripts/clang-format-circleci.sh
      - run:
          name: Store diff
          command: |
            OUTCOME_BASE="/tmp/clang_format_outcome"
            OUTCOME_COMMUNITY=$OUTCOME_BASE/community.diff
            OUTCOME_ENTERPRISE=$OUTCOME_BASE/enterprise.diff
            mkdir -p $OUTCOME_BASE
            if [ -n "$(git status --porcelain)" ] ; then
                git diff | tee $OUTCOME_COMMUNITY
            fi
            if [ -n "$(git -C enterprise status --porcelain)" ] ; then
                git -C enterprise diff | tee $OUTCOME_ENTERPRISE
            fi
            if [ -f "$OUTCOME_COMMUNITY" ] || [ -f "$OUTCOME_ENTERPRISE" ]; then
              exit 1
            fi
      - store_artifacts:
          path: /tmp/clang_format_outcome

  eslint:
    docker:
      - image: alpine:3.17
    resource_class: small
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Install eslint
          command: |
            apk add --no-cache npm
            npm -g install eslint@8.46.0
      - run:
          name: Run eslint
          command: |
            utils/eslint.sh

  compile-linux:
    parameters:
      preset:
        type: string
      enterprise:
        type: boolean
      build-tests:
        type: boolean
        default: true
      build-v8:
        type: boolean
        default: true
      publish-artifacts:
        type: boolean
        default: true
      resource-class:
        type: string
      s3-prefix:
        type: string
        default: ""
    docker:
      - image: << pipeline.parameters.build-docker-image >>
    resource_class: << parameters.resource-class >>
    environment:
      GIT_SSH_COMMAND: ssh
      SCCACHE_ERROR_LOG: /tmp/sccache.log
      SCCACHE_LOG: info,sccache::cache=debug,sccache::compiler::compiler=debug
      SCCACHE_S3_KEY_PREFIX: << parameters.s3-prefix >>
    steps:
      - checkout-arangodb:
          with-submodules: true
          destination: "/root/project"
      - when:
          condition: << parameters.enterprise >>
          steps:
            - checkout-enterprise:
                destination: "/root/project/enterprise"
      - run:
          name: Print SCCache Settings
          command: sccache -s
      - run:
          name: Configure
          command: |
            cmake --preset << parameters.preset >> -DCMAKE_C_COMPILER=<< pipeline.parameters.c-compiler >> -DCMAKE_CXX_COMPILER=<< pipeline.parameters.cxx-compiler >> -DCMAKE_EXE_LINKER_FLAGS="-fuse-ld=lld" -DCMAKE_LIBRARY_PATH=$OPENSSL_ROOT_DIR/lib
      - run:
          name: Build
          command: |
            TARGETS="<< pipeline.parameters.build-targets >>"
            if [ << parameters.build-v8 >> = true ]; then
              TARGETS="$TARGETS << pipeline.parameters.v8-build-targets >>"
            fi
            if [ << parameters.enterprise >> = true ]; then
              TARGETS="$TARGETS << pipeline.parameters.enterprise-build-targets >>"
            fi
            if [ << parameters.build-tests >> = true ]; then
              TARGETS="$TARGETS << pipeline.parameters.test-build-targets >>"
            fi
            echo "Building targets: $TARGETS"
            cmake --build --preset << parameters.preset >> --parallel 8 --target $TARGETS
      - run:
          name: Size leaderboard
          command: |
            ls -Ssha build/bin/*.a
      - run:
          name: Cleanup build directory
          command: |
            find build/ -iname *.a -delete || true
            find build/ -iname *.o -delete || true
      - run:
          name: SCCache Statistics
          command: sccache -s
      - store_artifacts:
          path: /tmp/sccache.log
      - when:
          condition: << parameters.publish-artifacts >>
          steps:
            - store_artifacts:
                path: build/bin/arango*
            - persist_to_workspace:
                root: .
                paths:
                  - build/compile_commands.json
                  - CMakePresets.json
                  - build/
                  - scripts/
                  - js/
                  - enterprise/js
                  - etc/
                  - tests/js
                  - enterprise/tests/js
                  - utils
                  - 3rdParty/iresearch/tests/resources
                  - 3rdParty/rta-makedata

  compile-mac:
    parameters:
      preset:
        type: string
      resource:
        type: string
      build-tests:
        type: boolean
        default: true
      enterprise:
        type: boolean
        default: false
      publish-artifacts:
        type: boolean
        default: true
    macos:
      xcode: 14.2.0
    resource_class: << parameters.resource >>
    steps:
      - checkout-arangodb:
          with-submodules: true
          destination: "~/project"
      - when:
          condition: << parameters.enterprise >>
          steps:
            - checkout-enterprise:
                destination: "~/project/enterprise"
      - run:
          name: "Install llvm"
          command: |
            brew install cmake llvm@14
      - run:
          name: "Install OpenSSL"
          command: |
            export MAC_OPENSSL=`grep OPENSSL_MACOS ~/project/VERSIONS|cut -d '"' -f 2-2`
            wget https://www.openssl.org/source/openssl-$MAC_OPENSSL.tar.gz --directory-prefix=/tmp
            mkdir ~/openssl
            tar zvxf /tmp/openssl-$MAC_OPENSSL.tar.gz -C ~/openssl --strip-components 1
            cd ~/openssl/
            ./config
            make -j8
      - run:
          name: "Configure"
          command: |
            export PATH="/opt/homebrew/opt/llvm@14/bin:/usr/local/opt/llvm@14/bin:$PATH"
            export MACOSX_DEPLOYMENT_TARGET=11.0
            export OPENSSL_ROOT_DIR=~/openssl
            mkdir ~/build
            cmake --preset << parameters.preset >> -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_LIBRARY_PATH=~/openssl/ -DSTATIC_EXECUTABLES=Off -DCMAKE_EXE_LINKER_FLAGS="-Wl" -S ~/project -B ~/build
      - run:
          name: "Build"
          command: |
            echo "Building targets: client-tools"
            cmake --build ~/build --parallel 8 --target client-tools

  compile-windows:
    parameters:
      preset:
        type: string
      build-tests:
        type: boolean
        default: true
      publish-artifacts:
        type: boolean
        default: true
    machine: true
    resource_class: "arangodb/win"
    shell: powershell.exe
    environment:
      GIT_SSH_COMMAND: ssh
      SCCACHE_ERROR_LOG: /tmp/sccache.log
      SCCACHE_LOG: info,sccache::cache=debug,sccache::compiler::compiler=debug
    steps:
      - checkout-arangodb:
          with-submodules: true
          destination: "D:/CircleCI/project"
      # for windows we build only enterprise, so we can check it out unconditionally
      - checkout-enterprise:
          destination: "D:/CircleCI/project/enterprise"
      # TODO - sccache currently doesn't work on windows; will be addressed in a separate PR
      # - run:
      #     name: Print SCCache Settings
      #     command: sccache -s
      - run:
          name: "Configure"
          shell: powershell.exe
          command: |
            mkdir build
            # make sure we have the latest image!
            docker pull arangodb/build-windows-x64:10.0.17763.4737-VS-17.3.3-OpenSSL-3.1.4-f3c77755ece
            # TODO - use preset
            docker run --rm --isolation process -v D:/CircleCI/project:C:/project -w C:/project/build arangodb/build-windows-x64:10.0.17763.4737-VS-17.3.3-OpenSSL-3.1.4-f3c77755ece cmake -G 'Visual Studio 17 2022' -T 'v143,host=x64' -DUSE_MAINTAINER_MODE=On -DUSE_GOOGLE_TESTS=On -DUSE_ENTERPRISE=On -DCMAKE_BUILD_TYPE=RelWithDebInfo -DPACKAGING=NSIS -DCMAKE_INSTALL_PREFIX=/ -DSKIP_PACKAGING=On -DUSE_FAILURE_TESTS=On -DSTATIC_EXECUTABLES=On -DOPENSSL_USE_STATIC_LIBS=On -DUSE_STRICT_OPENSSL_VERSION=On ..
      - run:
          name: "Build"
          shell: powershell.exe
          command: |
            docker run --rm --isolation process -v D:/CircleCI/project:C:/project -w C:/project/build arangodb/build-windows-x64:10.0.17763.4737-VS-17.3.3-OpenSSL-3.1.4-f3c77755ece cmake --build . --config `"RelWithDebInfo`" --parallel -- /p:CL_MPcount=24
      - run:
          name: Cleanup build directory
          shell: powershell.exe
          command: |
            cd D:/CircleCI/project/build
            Get-ChildItem *.pdb -Recurse | foreach { Remove-Item -Path $_.FullName }
            Get-ChildItem *.lib -Recurse | foreach { Remove-Item -Path $_.FullName }
            Get-ChildItem *.exp -Recurse | foreach { Remove-Item -Path $_.FullName }
            Get-ChildItem *.obj -Recurse | foreach { Remove-Item -Path $_.FullName }
            Get-ChildItem *.vcxproj -Recurse | foreach { Remove-Item -Path $_.FullName }
            Get-ChildItem *.filters -Recurse | foreach { Remove-Item -Path $_.FullName }
            Get-ChildItem *.sln -Recurse | foreach { Remove-Item -Path $_.FullName }
            Get-ChildItem *.pch -Recurse | foreach { Remove-Item -Path $_.FullName }
            Get-ChildItem *.ifc -Recurse | foreach { Remove-Item -Path $_.FullName }
            Get-ChildItem *.ilk -Recurse | foreach { Remove-Item -Path $_.FullName }
            Get-ChildItem *.tlog -Recurse | where { ! $_.PSIsContainer } | foreach { Remove-Item -Path $_.FullName }
      #            Get-ChildItem *.dat -Recurse | foreach { Remove-Item -Path $_.FullName }
      # - run:
      #     name: Save workspace for development
      #     shell: powershell.exe
      #     command: |
      #       cd D:/CircleCI/project/
      #       7z a -r ./workspace CMakePresets.json build/ scripts/ js/ enterprise/js etc/ tests/js enterprise/tests/js utils 3rdParty/iresearch/tests/resources 3rdParty/rta-makedata
      # - run:
      #     name: SCCache Statistics
      #     command: sccache -s
      # - store_artifacts:
      #     path: /tmp/sccache.log
      - when:
          condition: << parameters.publish-artifacts >>
          steps:
            # - store_artifacts:
            #     path: D:/CircleCI/project/workspace.7z
            - store_artifacts:
                path: D:/CircleCI/project/build/bin/RelWithDebInfo/
                destination: windows
            - persist_to_workspace:
                root: D:/CircleCI/project/
                paths:
                  - CMakePresets.json
                  - build/
                  - scripts/
                  - js/
                  - enterprise/js
                  - etc/
                  - tests/js
                  - enterprise/tests/js
                  - utils
                  - 3rdParty/iresearch/tests/resources
                  - 3rdParty/rta-makedata

  run-windows-tests:
    parameters:
      suiteName:
        type: string
      suites:
        type: string
      size:
        type: string
      extraArgs:
        type: string
        default: ""
      buckets:
        type: integer
        default: 1
      cluster:
        type: boolean
    executor:
      name: win/default # executor type
      size: << parameters.size >> # can be medium, large, xlarge, 2xlarge
    parallelism: << parameters.buckets >>
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Install python packages
          when: always
          command: |
            pip install psutil
      - run:
          name: Prepare OS
          when: always
          command: |
            Set-TimeZone -Id "Central European Standard Time"
      - run:
          name: Run << parameters.suiteName >> tests
          # we increase the no_output_timeout so our own timeout mechanism can kick in and gather more information
          no_output_timeout: 20m
          command: |
            mkdir work
            # Note: we need the leading space for extraArgs to avoid a parsing issue in argparse
            python scripts/test/test_launch_controller.py << parameters.suites >> `
              --testBuckets $env:CIRCLE_NODE_TOTAL/$env:CIRCLE_NODE_INDEX `
              --cluster << parameters.cluster >> `
              --extraArgs " << parameters.extraArgs >>" `
              --definition tests/test-definitions.txt
      - run:
          name: Copy test results
          when: always
          command: |
            mkdir test-results
            Get-ChildItem -Path .\testrunXml -Filter *.xml -Recurse | ForEach-Object {Copy-Item $_.FullName -Destination .\test-results}
      - store_artifacts:
          destination: << parameters.suiteName >>
          path: ./work/
      - store_test_results:
          path: ./test-results/

  run-linux-tests:
    docker:
      - image: arangodb/test-ubuntu:22.04-6c4e824d8d2
    parameters:
      suiteName:
        type: string
      suites:
        type: string
      size:
        type: string
      extraArgs:
        type: string
        default: ""
      buckets:
        type: integer
        default: 1
      cluster:
        type: boolean
    resource_class: << parameters.size >>
    parallelism: << parameters.buckets >>
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Enabled coredumps
          command: ulimit -c unlimited
      - run:
          name: Run << parameters.suiteName >> tests
          # we increase the no_output_timeout so our own timeout mechanism can kick in and gather more information
          no_output_timeout: 20m
          command: |
            mkdir work
            # Note: we need the leading space for extraArgs to avoid a parsing issue in argparse
            python3 scripts/test/test_launch_controller.py << parameters.suites >> \
              --testBuckets $CIRCLE_NODE_TOTAL/$CIRCLE_NODE_INDEX \
              --cluster << parameters.cluster >> \
              --extraArgs " << parameters.extraArgs >>" \
              --definition tests/test-definitions.txt
      - run:
          name: Copy test results
          when: always
          command: |
            mkdir test-results
            find testrunXml -iname *xml -exec cp "{}" --target-directory=./test-results \;
      - store_artifacts:
          destination: << parameters.suiteName >>
          path: ./work/
      - store_test_results:
          path: ./test-results/

  run-hotbackup-tests:
    docker:
      - image: arangodb/test-ubuntu:22.04-6c4e824d8d2
    parameters:
      size:
        type: string
    resource_class: << parameters.size >>
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Enabled coredumps
          command: ulimit -c unlimited
      - run:
          name: Install dependencies
          command: |
            pip install -r scripts/toolbox/requirements.txt
      - run:
          name: Run HotBackup tests
          command: |
            python3 scripts/toolbox/HotBackupConsistencyTest.py \
              --arangod $PWD/build/bin/arangod \
              --topdir $PWD \
              --workdir /tmp/test-workdir
      - run:
          name: Cleanup
          command: |
            rm -rf /tmp/test-workdir
      - store_artifacts:
          destination: hotbackup-test
          path: /tmp/test-workdir

  run-cppcheck:
    docker:
      - image: << pipeline.parameters.build-docker-image >>
    resource_class: medium+
    steps:
      - run:
          name: Prepare container
          command: |
            mkdir -p /root/workspace/ 
            mkdir -p /root/project/
      - attach_workspace:
          at: "/root/workspace/"
      - checkout-arangodb:
          with-submodules: true
          destination: "/root/project"
      - checkout-enterprise:
          destination: "/root/project/enterprise"
      - run:
          name: Run cppcheck
          command: |
            ln -s /root/workspace/build/ /root/project/
            cd /root/project/ 
            utils/cppcheck-circleci.sh /root/workspace/build/compile_commands.json
      - run:
          name: Format result
          when: always
          command: |
            cd /root/project/ 
            sed -i 's/\/root\/project\/\/root\/project\///g' cppcheck.xml
            sed -i 's/\/root\/project\///g' cppcheck.xml
            cppcheck_junit cppcheck.xml cppcheck-junit.xml
      - store_artifacts:
          path: /root/project/cppcheck.xml
      - store_test_results:
          path: /root/project/cppcheck-junit.xml

workflows:
  lint:
    jobs:
      - minimal-checkout:
          name: minimal-checkout
      - check-log-ids:
          name: check-log-ids
          requires:
            - minimal-checkout
      - clang-format:
          name: clang-format
          requires:
            - minimal-checkout
      - eslint:
          name: eslint
          requires:
            - minimal-checkout
  x64-linux-community-pr:
    jobs:
      - compile-linux:
          context:
            - sccache-aws-bucket # add the environment variables to setup sccache for the S3 bucket
          resource-class: xlarge
          name: build-linux-ce-x64
          preset: community-pr
          enterprise: false
      - run-cppcheck:
          name: cppcheck
          requires:
            - build-linux-ce-x64
  x64-linux-enterprise-pr:
    jobs:
      - compile-linux:
          context:
            - sccache-aws-bucket # add the environment variables to setup sccache for the S3 bucket
          resource-class: xlarge
          name: build-linux-ee-x64
          preset: enterprise-pr
          enterprise: true
      - compile-linux:
          context:
            - sccache-aws-bucket # add the environment variables to setup sccache for the S3 bucket
          resource-class: xlarge
          name: build-ee-non-maintainer-x64
          preset: enterprise-pr-non-maintainer
          enterprise: true
          publish-artifacts: false
          build-tests: false
      - compile-linux:
          context:
            - sccache-aws-bucket # add the environment variables to setup sccache for the S3 bucket
          resource-class: xlarge
          name: build-ee-no-v8-x64
          preset: enterprise-pr-no-v8
          enterprise: true
          publish-artifacts: false
          build-tests: false
          build-v8: false
      - run-cppcheck:
          name: cppcheck
          requires:
            - build-linux-ee-x64
      - run-hotbackup-tests:
          name: run-hotbackup-tests-x64
          size: medium
          requires:
            - build-linux-ee-x64
  aarch64-linux-community-pr:
    jobs:
      - compile-linux:
          context:
            - sccache-aws-bucket # add the environment variables to setup sccache for the S3 bucket
          resource-class: arm.xlarge
          s3-prefix: aarch64
          name: build-linux-ce-aarch64
          preset: community-pr
          enterprise: false
  aarch64-linux-enterprise-pr:
    jobs:
      - compile-linux:
          context:
            - sccache-aws-bucket # add the environment variables to setup sccache for the S3 bucket
          resource-class: arm.xlarge
          s3-prefix: aarch64
          name: build-linux-ee-aarch64
          preset: enterprise-pr
          enterprise: true
      - run-hotbackup-tests:
          name: run-hotbackup-tests-aarch64
          size: arm.medium
          requires:
            - build-linux-ee-aarch64
  aarch64-mac-tools-pr:
    jobs:
      - compile-mac:
          context:
            - sccache-aws-bucket # add the environment variables to setup sccache for the S3 bucket
          name: mac-tools-m1-enterprise-pr
          resource: macos.m1.medium.gen1
          preset: enterprise-pr
          build-tests: false
          enterprise: true
      - compile-mac:
          context:
            - sccache-aws-bucket # add the environment variables to setup sccache for the S3 bucket
          name: mac-tools-m1-community-pr
          resource: macos.m1.medium.gen1
          preset: community-pr
          build-tests: false
          enterprise: false
      - compile-mac:
          context:
            - sccache-aws-bucket # add the environment variables to setup sccache for the S3 bucket
          name: mac-tools-x86-enterprise-pr
          resource: macos.x86.medium.gen2
          preset: enterprise-pr
          build-tests: false
          enterprise: true
      - compile-mac:
          context:
            - sccache-aws-bucket # add the environment variables to setup sccache for the S3 bucket
          name: mac-tools-x86-community-pr
          resource: macos.x86.medium.gen2
          preset: community-pr
          build-tests: false
          enterprise: false
  x64-enterprise-windows-pr:
    jobs:
      - compile-windows:
          context:
            - sccache-aws-bucket # add the environment variables to setup sccache for the S3 bucket
          name: build-windows-ee-x64
          preset: enterprise-pr
          build-tests: true
