version: 2.1

parameters:
  enterprise-branch:
    type: string
    default: ""

jobs:
  minimal-checkout:
    docker:
      - image: cimg/base:current
    resource_class: small
    environment:
      GIT_SSH_COMMAND: ssh -v
    steps:
      - run:
          name: Checkout
          command: |
            git clone --depth 1 https://github.com/arangodb/arangodb.git --branch "$CIRCLE_BRANCH" --shallow-submodules -j 8 .
            git reset --hard "$CIRCLE_SHA1"
      - persist_to_workspace:
          root: .
          paths:
            - .

  check-log-ids:
    docker:
      - image: cimg/python:3.11.1
    resource_class: small
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Install pyyaml
          command: |
            python -m pip install --upgrade pip
            pip install pyyaml
      - run:
          name: Check LogIDs
          command: |
            python3 utils/checkLogIds.py

  clang-format:
    docker:
      - image: alpine:3.15
    resource_class: small
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Install clang-format
          command: |
            apk add --no-cache git bash coreutils grep clang-extra-tools=12.0.1-r1
      - run:
          name: Print clang-format version
          command: clang-format --version
      - run:
          name: Run clang-format
          command: |
            scripts/clang-format-circleci.sh
      - run:
          name: Store diff
          command: |
            git status
            git diff --exit-code > /tmp/clang_format_outcome.txt
      - store_artifacts:
          path: /tmp/clang_format_outcome.txt

  compile-linux:
    parameters:
      preset:
        type: string
      edition:
        type: string
      enterprise:
        type: boolean
    docker:
      - image: arangodb/build-alpine-x86_64:3.16-gcc11.2-openssl3.0.8
    resource_class: xlarge
    environment:
      GIT_SSH_COMMAND: ssh -v
      SCCACHE_ERROR_LOG: /tmp/sccache.log
      SCCACHE_LOG: info,sccache::cache=debug,sccache::compiler::compiler=debug
    steps:
      - add_ssh_keys:
          fingerprints:
            - "f9:49:75:1a:ad:44:89:10:4b:3c:70:70:ba:d3:c3:ce"
      - run:
          name: Checkout ArangoDB
          command: |
            git clone --depth 1 https://github.com/arangodb/arangodb.git --branch "$CIRCLE_BRANCH" --recurse-submodules --shallow-submodules -j 8 /root/project
            git reset --hard "$CIRCLE_SHA1"
      - run:
          name: Checkout Enterprise
          command: |
            if [ << parameters.enterprise >> == true ]; then
              ssh-keyscan github.com >> ~/.ssh/known_hosts
              if ["<< pipeline.parameters.enterprise-branch >>" == ""]; then
                git ls-remote --exit-code --heads git@github.com:arangodb/enterprise.git "$CIRCLE_BRANCH"
                if [ "$?" == "0" ] ; then
                  ENTERPRISE_BRANCH=$CIRCLE_BRANCH
                else
                  ENTERPRISE_BRANCH=devel
                fi
              else
                ENTERPRISE_BRANCH=<< pipeline.parameters.enterprise-branch >>
              fi
              echo "Using enterprise branch $ENTERPRISE_BRANCH"
              git clone --depth 1 git@github.com:arangodb/enterprise.git --branch "$ENTERPRISE_BRANCH" /root/project/enterprise
            fi
      - run:
          name: Print SCCache Settings
          command: sccache -s
      - run:
          name: Configure
          command: |
            cmake --preset << parameters.preset >> -DCMAKE_C_COMPILER=gcc -DCMAKE_CXX_COMPILER=g++ -DCMAKE_EXE_LINKER_FLAGS="-fuse-ld=lld" -DCMAKE_LIBRARY_PATH=$OPENSSL_ROOT_DIR/lib
      - run:
          name: Build
          command: |
            cmake --build --preset << parameters.preset >> --parallel 8 --target arangodbtests arangod arangosh arangoimport arangoexport arangodump arangorestore arangobench fuertetest
            if [ << parameters.enterprise >> = true ]; then
              cmake --build --preset << parameters.preset >> --parallel 8 --target arangobackup
            fi
      - run:
          name: Size leaderboard
          command: |
            ls -Ssha build/bin/*.a
      - run:
          name: Cleanup build directory
          command: |
            find build/ -iname *.a -delete || true
            find build/ -iname *.o -delete || true
      - run:
          name: SCCache Statistics
          command: sccache -s
      - store_artifacts:
          path: build/bin/arango*
      - store_artifacts:
          path: /tmp/sccache.log
      - persist_to_workspace:
          root: .
          paths:
            - CMakePresets.json
            - build/
            - scripts/
            - js/
            - enterprise/js
            - etc/
            - tests/js
            - enterprise/tests/js
            - utils
            - UnitTests
            - 3rdParty/iresearch/tests/resources

  run-tests:
    docker:
      - image: cimg/python:3.11.1
    parameters:
      suiteName:
        type: string
      suites:
        type: string
      size:
        type: string
      extraArgs:
        type: string
        default: ""
      buckets:
        type: integer
        default: 1
      cluster:
        type: boolean
    resource_class: << parameters.size >>
    parallelism: << parameters.buckets >>
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Enabled coredumps
          command: ulimit -c unlimited
      - run:
          name: Install dependencies
          command: |
            pip install psutil py7zr
            sudo apt update
            sudo apt install 7zip
            sudo apt install gdb
      - run:
          name: Run << parameters.suiteName >> tests
          command: |
            mkdir work
            # Note: we need the leading space for extraArgs to avoid a parsing issue in argparse
            python3 scripts/test/test_launch_controller.py << parameters.suites >> \
              --testBuckets $CIRCLE_NODE_TOTAL/$CIRCLE_NODE_INDEX \
              --cluster << parameters.cluster >> \
              --extraArgs " << parameters.extraArgs >>" \
              --definition tests/test-definitions.txt
      - run:
          name: Copy test results
          when: always
          command: |
            mkdir test-results
            find testrun -iname *xml -exec cp "{}" --target-directory=./test-results \;
      - store_artifacts:
          destination: << parameters.suiteName >>
          path: ./work/
      - store_test_results:
          path: ./test-results/

workflows:
  lint:
    jobs:
      - minimal-checkout:
          name: minimal-checkout
      - check-log-ids:
          name: check-log-ids
          requires:
            - minimal-checkout
      - clang-format:
          name: clang-format
          requires:
            - minimal-checkout
  community-pr:
    jobs:
      - compile-linux:
          name: build-ce
          preset: community-pr
          edition: x64-community
          enterprise: false
  enterprise-pr:
    jobs:
      - compile-linux:
          name: build-ee
          preset: enterprise-pr
          edition: x64-enterprise
          enterprise: true
